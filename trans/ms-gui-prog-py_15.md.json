["```py\n$ pip install --user psutil\n```", "```py\nclass ColorButton(qtw.QPushButton):\n\n   changed = qtc.pyqtSignal()\n\n    def __init__(self, default_color, changed=None):\n        super().__init__()\n        self.set_color(qtg.QColor(default_color))\n        self.clicked.connect(self.on_click)\n        if changed:\n            self.changed.connect(changed)\n```", "```py\n    def set_color(self, color):\n        self._color = color\n        pixmap = qtg.QPixmap(32, 32)\n        pixmap.fill(self._color)\n        self.setIcon(qtg.QIcon(pixmap))\n```", "```py\n    def on_click(self):\n        color = qtw.QColorDialog.getColor(self._color)\n        if color:\n            self.set_color(color)\n            self.changed.emit()\n```", "```py\nclass FontButton(qtw.QPushButton):\n\n    changed = qtc.pyqtSignal()\n\n    def __init__(self, default_family, default_size, changed=None):\n        super().__init__()\n        self.set_font(qtg.QFont(default_family, default_size))\n        self.clicked.connect(self.on_click)\n        if changed:\n            self.changed.connect(changed)\n\n    def set_font(self, font):\n        self._font = font\n        self.setFont(font)\n        self.setText(f'{font.family()} {font.pointSize()}')\n```", "```py\n    def on_click(self):\n        font, accepted = qtw.QFontDialog.getFont(self._font)\n        if accepted:\n            self.set_font(font)\n            self.changed.emit()\n```", "```py\nclass ImageFileButton(qtw.QPushButton):\n\n    changed = qtc.pyqtSignal()\n\n    def __init__(self, changed=None):\n        super().__init__(\"Click to select\u2026\")\n        self._filename = None\n        self.clicked.connect(self.on_click)\n        if changed:\n            self.changed.connect(changed)\n\n    def on_click(self):\n        filename, _ = qtw.QFileDialog.getOpenFileName(\n            None, \"Select an image to use\",\n            qtc.QDir.homePath(), \"Images (*.png *.xpm *.jpg)\")\n        if filename:\n            self._filename = filename\n            self.setText(qtc.QFileInfo(filename).fileName())\n            self.changed.emit()\n```", "```py\nclass MemeEditForm(qtw.QWidget):\n\n    changed = qtc.pyqtSignal(dict)\n\n    def __init__(self):\n        super().__init__()\n        self.setLayout(qtw.QFormLayout())\n```", "```py\n        self.image_source = ImageFileButton(changed=self.on_change)\n        self.layout().addRow('Image file', self.image_source)\n```", "```py\n        self.top_text = qtw.QPlainTextEdit(textChanged=self.on_change)\n        self.bottom_text = qtw.QPlainTextEdit(textChanged=self.on_change)\n        self.layout().addRow(\"Top Text\", self.top_text)\n        self.layout().addRow(\"Bottom Text\", self.bottom_text)\n        self.text_color = ColorButton('white', changed=self.on_change)\n        self.layout().addRow(\"Text Color\", self.text_color)\n        self.text_font = FontButton('Impact', 32, changed=self.on_change)\n        self.layout().addRow(\"Text Font\", self.text_font)\n```", "```py\n        self.text_bg_color = ColorButton('black', changed=self.on_change)\n        self.layout().addRow('Text Background', self.text_bg_color)\n        self.top_bg_height = qtw.QSpinBox(\n            minimum=0, maximum=32,\n            valueChanged=self.on_change, suffix=' line(s)')\n        self.layout().addRow('Top BG height', self.top_bg_height)\n        self.bottom_bg_height = qtw.QSpinBox(\n            minimum=0, maximum=32,\n            valueChanged=self.on_change, suffix=' line(s)')\n        self.layout().addRow('Bottom BG height', self.bottom_bg_height)\n        self.bg_padding = qtw.QSpinBox(\n            minimum=0, maximum=100, value=10,\n            valueChanged=self.on_change, suffix=' px')\n        self.layout().addRow('BG Padding', self.bg_padding)\n```", "```py\n    def get_data(self):\n        return {\n            'image_source': self.image_source._filename,\n            'top_text': self.top_text.toPlainText(),\n            'bottom_text': self.bottom_text.toPlainText(),\n            'text_color': self.text_color._color,\n            'text_font': self.text_font._font,\n            'bg_color': self.text_bg_color._color,\n            'top_bg_height': self.top_bg_height.value(),\n            'bottom_bg_height': self.bottom_bg_height.value(),\n            'bg_padding': self.bg_padding.value()\n        }\n\n    def on_change(self):\n        self.changed.emit(self.get_data())\n```", "```py\n        self.setWindowTitle('Qt Meme Generator')\n        self.max_size = qtc.QSize(800, 600)\n        self.image = qtg.QImage(\n            self.max_size, qtg.QImage.Format_ARGB32)\n        self.image.fill(qtg.QColor('black'))\n```", "```py\n        mainwidget = qtw.QWidget()\n        self.setCentralWidget(mainwidget)\n        mainwidget.setLayout(qtw.QHBoxLayout())\n        self.image_display = qtw.QLabel(pixmap=qtg.QPixmap(self.image))\n        mainwidget.layout().addWidget(self.image_display)\n        self.form = MemeTextForm()\n        mainwidget.layout().addWidget(self.form)\n        self.form.changed.connect(self.build_image)\n```", "```py\n    def build_image(self, data):\n        if not data.get('image_source'):\n            self.image.fill(qtg.QColor('black'))\n        else:\n            self.image.load(data.get('image_source'))\n            if not (self.max_size - self.image.size()).isValid():\n                # isValid returns false if either dimension is negative\n                self.image = self.image.scaled(\n                    self.max_size, qtc.Qt.KeepAspectRatio)\n```", "```py\n        painter = qtg.QPainter(self.image)\n```", "```py\n        font_px = qtg.QFontInfo(data['text_font']).pixelSize()\n        top_px = (data['top_bg_height'] * font_px) + data['bg_padding']\n        top_block_rect = qtc.QRect(\n            0, 0, self.image.width(), top_px)\n        bottom_px = (\n            self.image.height() - data['bg_padding']\n            - (data['bottom_bg_height'] * font_px))\n        bottom_block_rect = qtc.QRect(\n            0, bottom_px, self.image.width(), self.image.height())\n```", "```py\n        painter.setBrush(qtg.QBrush(data['bg_color']))\n        painter.drawRect(top_block_rect)\n        painter.drawRect(bottom_block_rect)\n```", "```py\n        painter.setPen(data['text_color'])\n        painter.setFont(data['text_font'])\n        flags = qtc.Qt.AlignHCenter | qtc.Qt.TextWordWrap\n        painter.drawText(\n            self.image.rect(), flags | qtc.Qt.AlignTop, data['top_text'])\n        painter.drawText(\n            self.image.rect(), flags | qtc.Qt.AlignBottom,\n            data['bottom_text'])\n```", "```py\n        self.image_display.setPixmap(qtg.QPixmap(self.image))\n```", "```py\n        toolbar = self.addToolBar('File')\n        toolbar.addAction(\"Save Image\", self.save_image)\n```", "```py\n    def save_image(self):\n        save_file, _ = qtw.QFileDialog.getSaveFileName(\n            None, \"Save your image\",\n            qtc.QDir.homePath(), \"PNG Images (*.png)\")\n        if save_file:\n            self.image.save(save_file, \"PNG\")\n```", "```py\nclass GraphWidget(qtw.QWidget):\n    \"\"\"A widget to display a running graph of information\"\"\"\n\n    crit_color = qtg.QColor(255, 0, 0)  # red\n    warn_color = qtg.QColor(255, 255, 0)  # yellow\n    good_color = qtg.QColor(0, 255, 0)  # green\n\n    def __init__(\n        self, *args, data_width=20,\n        minimum=0, maximum=100,\n        warn_val=50, crit_val=75, scale=10,\n        **kwargs\n    ):\n        super().__init__(*args, **kwargs)\n```", "```py\n        self.minimum = minimum\n        self.maximum = maximum\n        self.warn_val = warn_val\n        self.scale = scale\n        self.crit_val = crit_val\n```", "```py\nfrom collections import deque\n```", "```py\n        self.values = deque([self.minimum] * data_width, maxlen=data_width)\n        self.setFixedWidth(data_width * scale)\n```", "```py\n    def add_value(self, value):\n        value = max(value, self.minimum)\n        value = min(value, self.maximum)\n        self.values.append(value)\n        self.update()\n```", "```py\n    def paintEvent(self, paint_event):\n        painter = qtg.QPainter(self)\n```", "```py\n        brush = qtg.QBrush(qtg.QColor(48, 48, 48))\n        painter.setBrush(brush)\n        painter.drawRect(0, 0, self.width(), self.height())\n```", "```py\n    def val_to_y(self, value):\n        data_range = self.maximum - self.minimum\n        value_fraction = value / data_range\n        y_offset = round(value_fraction * self.height())\n        y = self.height() - y_offset\n        return y\n```", "```py\n        pen = qtg.QPen()\n        pen.setDashPattern([1, 0])\n        warn_y = self.val_to_y(self.warn_val)\n        pen.setColor(self.warn_color)\n        painter.setPen(pen)\n        painter.drawLine(0, warn_y, self.width(), warn_y)\n```", "```py\n        crit_y = self.val_to_y(self.crit_val)\n        pen.setColor(self.crit_color)\n        painter.setPen(pen)\n        painter.drawLine(0, crit_y, self.width(), crit_y)\n```", "```py\n        gradient = qtg.QLinearGradient(\n            qtc.QPointF(0, self.height()), qtc.QPointF(0, 0))\n```", "```py\n        gradient.setColorAt(0, self.good_color)\n        gradient.setColorAt(\n            self.warn_val/(self.maximum - self.minimum),\n            self.warn_color)\n        gradient.setColorAt(\n            self.crit_val/(self.maximum - self.minimum),\n            self.crit_color)\n```", "```py\n        brush = qtg.QBrush(gradient)\n        painter.setBrush(brush)\n        painter.setPen(qtc.Qt.NoPen)\n```", "```py\n        self.start_value = getattr(self, 'start_value', self.minimum)\n        last_value = self.start_value\n        self.start_value = self.values[0]\n```", "```py\n        for indx, value in enumerate(self.values):\n            x = (indx + 1) * self.scale\n            last_x = indx * self.scale\n            y = self.val_to_y(value)\n            last_y = self.val_to_y(last_value)\n```", "```py\n            path = qtg.QPainterPath()\n            path.moveTo(x, self.height())\n            path.lineTo(last_x, self.height())\n            path.lineTo(last_x, last_y)\n            path.lineTo(x, y)\n```", "```py\n            painter.drawPath(path)\n            last_value = value\n```", "```py\n            #path.lineTo(x, y)\n            c_x = round(self.scale * .5) + last_x\n            c1 = (c_x, last_y)\n            c2 = (c_x, y)\n            path.cubicTo(*c1, *c2, x, y)\n```", "```py\n        self.graph = GraphWidget(self)\n        self.setCentralWidget(self.graph)\n```", "```py\nfrom psutil import cpu_percent\n```", "```py\n    def update_graph(self):\n        cpu_usage = cpu_percent()\n        self.graph.add_value(cpu_usage)\n```", "```py\n        self.timer = qtc.QTimer()\n        self.timer.setInterval(1000)\n        self.timer.timeout.connect(self.update_graph)\n        self.timer.start()\n```", "```py\n    def update_graph(self):\n        import random\n        cpu_usage = random.randint(1, 100)\n        self.graph.add_value(cpu_usage)\n```", "```py\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nBORDER_HEIGHT = 100\n```", "```py\n        self.resize(qtc.QSize(SCREEN_WIDTH, SCREEN_HEIGHT))\n        self.scene = Scene()\n        view = qtw.QGraphicsView(self.scene)\n        self.setCentralWidget(view)\n```", "```py\nclass Scene(qtw.QGraphicsScene):\n\n    def __init__(self):\n        super().__init__()\n        self.setBackgroundBrush(qtg.QBrush(qtg.QColor('black')))\n        self.setSceneRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)\n```", "```py\n        wall_brush = qtg.QBrush(qtg.QColor('blue'), qtc.Qt.Dense5Pattern)\n        floor = self.addRect(\n            qtc.QRectF(0, SCREEN_HEIGHT - BORDER_HEIGHT,\n                       SCREEN_WIDTH, BORDER_HEIGHT),\n            brush=wall_brush)\n        ceiling = self.addRect(\n            qtc.QRectF(0, 0, SCREEN_WIDTH, BORDER_HEIGHT),\n            brush=wall_brush)\n```", "```py\n        self.top_score = 0\n        self.bottom_score = 0\n        score_font = qtg.QFont('Sans', 32)\n        self.top_score_display = self.addText(\n            str(self.top_score), score_font)\n        self.top_score_display.setPos(10, 10)\n        self.bottom_score_display = self.addText(\n            str(self.bottom_score), score_font)\n        self.bottom_score_display.setPos(\n            SCREEN_WIDTH - 60, SCREEN_HEIGHT - 60)\n```", "```py\n    def top_score_increment(self):\n        self.top_score += 1\n        self.top_score_display.setPlainText(str(self.top_score))\n\n    def bottom_score_increment(self):\n        self.bottom_score += 1\n        self.bottom_score_display.setPlainText(str(self.bottom_score))\n```", "```py\nclass Tank(qtw.QGraphicsObject):\n\n    BOTTOM, TOP = 0, 1\n    TANK_BM = b'\\x18\\x18\\xFF\\xFF\\xFF\\xFF\\xFF\\x66'\n```", "```py\n    def __init__(self, color, y_pos, side=TOP):\n        super().__init__()\n        self.side = side\n```", "```py\n        self.bitmap = qtg.QBitmap.fromData(\n            qtc.QSize(8, 8), self.TANK_BM)\n```", "```py\n00011000\n00011000\n11111111\n11111111\n11111111\n11111111\n11111111\n01100110\n```", "```py\n        transform = qtg.QTransform()\n        transform.scale(4, 4)  # scale to 32x32\n        if self.side == self.TOP:  # We're pointing down\n            transform.rotate(180)\n        self.bitmap = self.bitmap.transformed(transform)\n```", "```py\n        self.pen = qtg.QPen(qtg.QColor(color))\n```", "```py\n    def paint(self, painter, option, widget):\n        painter.setPen(self.pen)\n        painter.drawPixmap(0, 0, self.bitmap)\n```", "```py\n    def boundingRect(self):\n        return qtc.QRectF(0, 0, self.bitmap.width(),\n                          self.bitmap.height())\n```", "```py\n        if self.side == self.BOTTOM:\n            y_pos -= self.bitmap.height()\n        self.setPos(0, y_pos)\n```", "```py\n        self.animation = qtc.QPropertyAnimation(self, b'x')\n        self.animation.setStartValue(0)\n        self.animation.setEndValue(SCREEN_WIDTH - self.bitmap.width())\n        self.animation.setDuration(2000)\n```", "```py\n    def toggle_direction(self):\n        if self.animation.direction() == qtc.QPropertyAnimation.Forward:\n            self.left()\n        else:\n            self.right()\n\n    def right(self):\n        self.animation.setDirection(qtc.QPropertyAnimation.Forward)\n        self.animation.start()\n\n    def left(self):\n        self.animation.setDirection(qtc.QPropertyAnimation.Backward)\n        self.animation.start()\n```", "```py\n        self.animation.finished.connect(self.toggle_direction)\n```", "```py\n        if self.side == self.TOP:\n            self.toggle_direction()\n        self.animation.start()\n```", "```py\nclass Bullet(qtw.QGraphicsObject):\n\n    hit = qtc.pyqtSignal()\n\n    def __init__(self, y_pos, up=True):\n        super().__init__()\n        self.up = up\n        self.y_pos = y_pos\n```", "```py\n    def boundingRect(self):\n        return qtc.QRectF(0, 0, 10, 10)\n\n    def paint(self, painter, options, widget):\n        painter.setBrush(qtg.QBrush(qtg.QColor('yellow')))\n        painter.drawRect(0, 0, 10, 10)\n```", "```py\n        blur = qtw.QGraphicsBlurEffect()\n        blur.setBlurRadius(10)\n        blur.setBlurHints(\n            qtw.QGraphicsBlurEffect.AnimationHint)\n self.setGraphicsEffect(blur)\n```", "```py\n        self.animation = qtc.QPropertyAnimation(self, b'y')\n        self.animation.setStartValue(y_pos)\n        end = 0 if up else SCREEN_HEIGHT\n        self.animation.setEndValue(end)\n        self.animation.setDuration(1000)\n```", "```py\n    def shoot(self, x_pos):\n        self.animation.stop()\n        self.setPos(x_pos, self.y_pos)\n        self.animation.start()\n```", "```py\n        bullet_y = (\n            y_pos - self.bitmap.height()\n            if self.side == self.BOTTOM\n            else y_pos + self.bitmap.height()\n        )\n        self.bullet = Bullet(bullet_y, self.side == self.BOTTOM)\n```", "```py\n    def shoot(self):\n        if not self.bullet.scene():\n            self.scene().addItem(self.bullet)\n        self.bullet.shoot(self.x())\n```", "```py\n    def check_collision(self):\n        colliding_items = self.collidingItems()\n        if colliding_items:\n            self.scene().removeItem(self)\n            for item in colliding_items:\n                if type(item).__name__ == 'Tank':\n                    self.hit.emit()\n```", "```py\n        self.yChanged.connect(self.check_collision)\n```", "```py\n        self.bottom_tank = Tank(\n            'red', floor.rect().top(), Tank.BOTTOM)\n        self.addItem(self.bottom_tank)\n\n        self.top_tank = Tank(\n            'green', ceiling.rect().bottom(), Tank.TOP)\n        self.addItem(self.top_tank)\n```", "```py\n        self.top_tank.bullet.hit.connect(self.top_score_increment)\n        self.bottom_tank.bullet.hit.connect(self.bottom_score_increment)\n```", "```py\n    def keyPressEvent(self, event):\n        keymap = {\n            qtc.Qt.Key_Right: self.bottom_tank.right,\n            qtc.Qt.Key_Left: self.bottom_tank.left,\n            qtc.Qt.Key_Return: self.bottom_tank.shoot,\n            qtc.Qt.Key_A: self.top_tank.left,\n            qtc.Qt.Key_D: self.top_tank.right,\n            qtc.Qt.Key_Space: self.top_tank.shoot\n        }\n        callback = keymap.get(event.key())\n        if callback:\n            callback()\n```", "```py\n       def create_headshot(self, image_file, name):\n           image = qtg.QImage()\n           image.load(image_file)\n           # your code here\n\n           # end of your code\n           return image\n```", "```py\n   def paintEvent(self, event):\n       black_brush = qtg.QBrush(qtg.QColor('black'))\n       white_brush = qtg.QBrush(qtg.QColor('white'))\n       painter = qtg.QPainter()\n       painter.setBrush(black_brush)\n       painter.drawRect(0, 0, self.width(), self.height())\n       painter.setBrush(white_brush)\n       painter.drawText(0, 0, 'Test Text')\n```", "```py\n   scene = QGraphicsScene()\n   scene.setSceneRect(0, 0, 800, 600)\n   circle = scene.addEllipse(0, 0, 10, 10)\n   animation = QPropertyAnimation(circle, b'x')\n   animation.setStartValue(0)\n   animation.setEndValue(600)\n   animation.setDuration(5000)\n   animation.start()\n```", "```py\n   gradient = qtg.QLinearGradient(\n       qtc.QPointF(0, 100), qtc.QPointF(0, 0))\n   gradient.setColorAt(20, qtg.QColor('red'))\n   gradient.setColorAt(40, qtg.QColor('orange'))\n   gradient.setColorAt(60, qtg.QColor('green'))\n   painter = QPainter()\n   painter.setGradient(gradient)\n```"]