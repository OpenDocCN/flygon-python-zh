["```py\n pip install scikit-learn\n```", "```py\nIn [ ]:\n    from alpha_vantage.timeseries import TimeSeries\n\n    # Update your Alpha Vantage API key here...\n    ALPHA_VANTAGE_API_KEY = 'PZ2ISG9CYY379KLI'\n\n    ts = TimeSeries(key=ALPHA_VANTAGE_API_KEY, output_format='pandas')\n    df_jpm, meta_data = ts.get_daily_adjusted(\n        symbol='JPM', outputsize='full')\n    df_gs, meta_data = ts.get_daily_adjusted(\n        symbol='GS', outputsize='full')\n```", "```py\nIn [ ]:\n    import pandas as pd\n\n    df_x = pd.DataFrame({'GS': df_gs['5\\. adjusted close']})\n```", "```py\nIn [ ]: \n    jpm_prices = df_jpm['5\\. adjusted close']\n```", "```py\nfrom sklearn.linear_model import LinearRegression\n\nclass LinearRegressionModel(object):\n    def __init__(self):\n        self.df_result = pd.DataFrame(columns=['Actual', 'Predicted'])\n\n    def get_model(self):\n        return LinearRegression(fit_intercept=False)\n\n    def get_prices_since(self, df, date_since, lookback):\n        index = df.index.get_loc(date_since)\n        return df.iloc[index-lookback:index]        \n```", "```py\ndef learn(self, df, ys, start_date, end_date, lookback_period=20):\n     model = self.get_model()\n\n     for date in df[start_date:end_date].index:\n         # Fit the model\n         x = self.get_prices_since(df, date, lookback_period)\n         y = self.get_prices_since(ys, date, lookback_period)\n         model.fit(x, y.ravel())\n\n         # Predict the current period\n         x_current = df.loc[date].values\n         [y_pred] = model.predict([x_current])\n\n         # Store predictions\n         new_index = pd.to_datetime(date, format='%Y-%m-%d')\n         y_actual = ys.loc[date]\n         self.df_result.loc[new_index] = [y_actual, y_pred]\n```", "```py\nIn [ ]:\n    linear_reg_model = LinearRegressionModel()\n    linear_reg_model.learn(df_x, jpm_prices, start_date='2018', \n                           end_date='2019', lookback_period=20)\n```", "```py\nIn [ ]:\n    %matplotlib inline\n\n    linear_reg_model.df_result.plot(\n        title='JPM prediction by OLS', \n        style=['-', '--'], figsize=(12,8));\n```", "```py\nIn [ ]:\n    from sklearn.metrics import mean_absolute_error\n\n    actual = linear_reg_model.df_result['Actual']\n    predicted = linear_reg_model.df_result['Predicted']\n\n    mae = mean_absolute_error(actual, predicted)\n    print('mean absolute error:', mae)\nOut[ ]:\n    mean absolute error: 2.4581692107823367\n```", "```py\nIn [ ]:\n    from sklearn.metrics import mean_squared_error\n    mse = mean_squared_error(actual, predicted)\n    print('mean squared error:', mse)\nOut[ ]:\n    mean squared error: 12.156835196436589\n```", "```py\nIn [ ]:\n    from sklearn.metrics import explained_variance_score\n    eva = explained_variance_score(actual, predicted)\n    print('explained variance score:', eva)\nOut[ ]:\n    explained variance score: 0.5332235487812286\n```", "```py\nIn [ ]:\n    from sklearn.metrics import r2_score\n    r2 = r2_score(actual, predicted) \n    print('r2 score:', r2)\nOut[ ]:\n    r2 score: 0.41668246393290576\n```", "```py\nIn [ ]:\n    from sklearn.linear_model import Ridge\n\n    class RidgeRegressionModel(LinearRegressionModel): \n        def get_model(self):\n            return Ridge(alpha=.5)\n\n    ridge_reg_model = RidgeRegressionModel()\n    ridge_reg_model.learn(df_x, jpm_prices, start_date='2018', \n                          end_date='2019', lookback_period=20)\n```", "```py\nIn [ ]:\n    from sklearn.metrics import (\n        accuracy_score, mean_absolute_error, \n        explained_variance_score, r2_score\n    )\n    def print_regression_metrics(df_result):\n        actual = list(df_result['Actual'])\n        predicted = list(df_result['Predicted'])\n        print('mean_absolute_error:', \n            mean_absolute_error(actual, predicted))\n        print('mean_squared_error:', mean_squared_error(actual, predicted))\n        print('explained_variance_score:', \n            explained_variance_score(actual, predicted))\n        print('r2_score:', r2_score(actual, predicted)) \n```", "```py\nIn [ ]:\n    print_regression_metrics(ridge_reg_model.df_result)\nOut[ ]:\n    mean_absolute_error: 1.5894879428144535\n    mean_squared_error: 4.519795633665941\n    explained_variance_score: 0.7954229624785825\n    r2_score: 0.7831280913202121\n```", "```py\nIn [ ]:\n    df_spx, meta_data = ts.get_daily_adjusted(\n        symbol='SPX', outputsize='full')\n    df_gld, meta_data = ts.get_daily_adjusted(\n        symbol='GLD', outputsize='full')\n    df_dxy, dxy_meta_data = ts.get_daily_adjusted(\n        symbol='UUP', outputsize='full')\n    df_ief, meta_data = ts.get_daily_adjusted(\n        symbol='IEF', outputsize='full')\n```", "```py\nIn [ ]:\n    import pandas as pd\n\n    df_assets = pd.DataFrame({\n        'SPX': df_spx['5\\. adjusted close'],\n        'GLD': df_gld['5\\. adjusted close'],\n        'UUP': df_dxy['5\\. adjusted close'],\n        'IEF': df_ief['5\\. adjusted close'],\n    }).dropna()\n```", "```py\nIN [ ]:\n    df_assets_1m = df_assets.pct_change(periods=20)\n    df_assets_1m.columns = ['%s_1m'%col for col in df_assets.columns]\n\n    df_assets_3m = df_assets.pct_change(periods=60)\n    df_assets_3m.columns = ['%s_3m'%col for col in df_assets.columns]\n\n    df_assets_6m = df_assets.pct_change(periods=120)\n    df_assets_6m.columns = ['%s_6m'%col for col in df_assets.columns]\n\n    df_assets_12m = df_assets.pct_change(periods=240)\n    df_assets_12m.columns = ['%s_12m'%col for col in df_assets.columns]\n```", "```py\nIn [ ]:\n    df_lagged = df_assets_1m.join(df_assets_3m)\\\n        .join(df_assets_6m)\\\n        .join(df_assets_12m)\\\n        .dropna()\n```", "```py\nIn [ ]:\n    df_lagged.info()\nOut[ ]:\n    <class 'pandas.core.frame.DataFrame'>\n    Index: 2791 entries, 2008-02-12 to 2019-03-14\n    Data columns (total 16 columns):\n    ...\n```", "```py\nIn [ ]:\n    y = jpm_prices.pct_change().dropna()\n```", "```py\nIn [ ]:\n    multi_linear_model = LinearRegressionModel()\n    multi_linear_model.learn(df_lagged, y, start_date='2018', \n                             end_date='2019', lookback_period=10)\n```", "```py\nIn [ ]:\n    multi_linear_model.df_result.plot(\n        title='JPM actual versus predicted percentage returns',\n        style=['-', '--'], figsize=(12,8));\n```", "```py\nIn [ ]:\n    print_regression_metrics(multi_linear_model.df_result)\nOut[ ]:\n    mean_absolute_error: 0.01952328066607389\n    mean_squared_error: 0.0007225502867195044\n    explained_variance_score: -2.729798588246765\n    r2_score: -2.738404583097052\n\n```", "```py\nIn [ ]:\n    from sklearn.ensemble import BaggingRegressor\n\n    class BaggingRegressorModel(LinearRegressionModel):\n        def get_model(self):\n            return BaggingRegressor(n_estimators=20, random_state=0) \nIn [ ]:\n bagging = BaggingRegressorModel()\n    bagging.learn(df_lagged, y, start_date='2018', \n                  end_date='2019', lookback_period=10) \n```", "```py\nIn [ ]:\n    print_regression_metrics(bagging.df_result)\nOut[ ]:\n    mean_absolute_error: 0.0114699264723\n    mean_squared_error: 0.000246352185742\n    explained_variance_score: -0.272260304849\n    r2_score: -0.274602137956\n```", "```py\nIn [ ]:\n    import numpy as np\n    y_direction = y >= 0\n    y_direction.head(3)\nOut[ ]:\n    date\n    1998-01-05     True\n    1998-01-06    False\n    1998-01-07     True\n    Name: 5\\. adjusted close, dtype: bool\n```", "```py\nIn [ ]:\n    flags = list(y_direction.unique())\n    flags.sort()\n    print(flags)\nOut[ ]:    \n    [False, True]\n```", "```py\nIn [ ]:    \n    df_input = df_assets_1m.join(df_assets_3m).dropna()\n```", "```py\nIn [ ]:\n    df_input.info()\nOut[ ]:\n    <class 'pandas.core.frame.DataFrame'>\n    Index: 2971 entries, 2007-05-25 to 2019-03-14\n    Data columns (total 8 columns):\n    ...\n```", "```py\nIn [ ]:\n    from sklearn.linear_model import LogisticRegression\n\n    class LogisticRegressionModel(LinearRegressionModel):\n        def get_model(self):\n            return LogisticRegression(solver='lbfgs')\n```", "```py\nIn [ ]:\n    logistic_reg_model = LogisticRegressionModel()\n    logistic_reg_model.learn(df_input, y_direction, start_date='2018', \n                             end_date='2019', lookback_period=100)\n```", "```py\nIn [ ]:\n    logistic_reg_model.df_result.head()\n```", "```py\nIn [ ]:\n    from sklearn.metrics import confusion_matrix\n\n    df_result = logistic_reg_model.df_result \n    actual = list(df_result['Actual'])\n    predicted = list(df_result['Predicted'])\n\n    matrix = confusion_matrix(actual, predicted)\nIn [ ]:\n    print(matrix)\nOut[ ]:\n    [[60 66]\n     [55 70]]\n```", "```py\nIn [ ]:\n    %matplotlib inline\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n\n    plt.subplots(figsize=(12,8))\n    sns.heatmap(matrix.T, square=True, annot=True, fmt='d', cbar=False, \n                xticklabels=flags, yticklabels=flags)\n    plt.xlabel('Actual')\n    plt.ylabel('Predicted')\n    plt.title('JPM percentage returns 2018');\n```", "```py\nIn [ ]:\n    from sklearn.metrics import accuracy_score\n    print('accuracy_score:', accuracy_score(actual, predicted))\nOut[ ]:\n    accuracy_score: 0.5179282868525896\n```", "```py\nIn [ ]:\n    from sklearn.metrics import precision_score\n    print('precision_score:', precision_score(actual, predicted))\nOut[ ]:\n    precision_score: 0.5147058823529411\n```", "```py\nIn [ ]:\n    from sklearn.metrics import recall_score\n    print('recall_score:', recall_score(actual, predicted))\nOut[ ]:\n    recall_score: 0.56\n```", "```py\nIn [ ]:\n    from sklearn.metrics import f1_score\n    print('f1_score:', f1_score(actual, predicted))\nOut[ ]:\n    f1_score: 0.5363984674329502\n```", "```py\nIn [ ]:\n    from sklearn.svm import SVC\n\n    class SVCModel(LogisticRegressionModel):\n        def get_model(self):\n            return SVC(C=1000, gamma='auto')\nIn [ ]:\n    svc_model = SVCModel()\n    svc_model.learn(df_input, y_direction, start_date='2018', \n                    end_date='2019', lookback_period=100)\n```", "```py\nIn [ ]:\n    df_result = svc_model.df_result\n    actual = list(df_result['Actual'])\n    predicted = list(df_result['Predicted'])\nIn [ ]:\n    print('accuracy_score:', accuracy_score(actual, predicted))\n    print('precision_score:', precision_score(actual, predicted))\n    print('recall_score:', recall_score(actual, predicted))\n    print('f1_score:', f1_score(actual, predicted)) \nOut[ ]:\n    accuracy_score: 0.5577689243027888\n    precision_score: 0.5538461538461539\n    recall_score: 0.576\n    f1_score: 0.5647058823529412\n```"]