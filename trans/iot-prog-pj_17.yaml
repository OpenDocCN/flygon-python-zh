- en: Building the JavaScript Client
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建JavaScript客户端
- en: Let's face it. We really wouldn’t have an Internet of Things if it wasn’t for
    the internet. JavaScript, along with HTML and CSS, is one of the core technologies
    of the internet. At the heart of the Internet of Things is the protocol for communicating
    between devices, MQTT.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们面对现实吧。如果没有互联网，我们真的不会有物联网。JavaScript，连同HTML和CSS，是互联网的核心技术之一。物联网的核心是设备之间通信的协议MQTT。
- en: In this chapter, we will turn our attention away from Python and focus on using
    JavaScript to build a JavaScript client to subscribe to a topic on an MQTT server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将把注意力从Python转移到使用JavaScript构建JavaScript客户端以订阅MQTT服务器上的主题。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing JavaScript cloud libraries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍JavaScript云库
- en: Connect to Cloud Services using JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript连接到云服务
- en: Project overview
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: We will start this chapter by creating a simple JavaScript client that connects
    to an MQTT Broker (server). We will send a test message to the the MQTT Broker
    and then have that message return to the same page we created the JavaScript client
    on. We will then publish a message from Raspberry Pi to our MQTT Broker.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个简单的JavaScript客户端开始这一章，该客户端连接到MQTT Broker（服务器）。我们将向MQTT Broker发送一条测试消息，然后让该消息返回到我们创建JavaScript客户端的同一页。然后我们将从Raspberry
    Pi发布一条消息到我们的MQTT Broker。
- en: It should take a couple of hours to complete this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章应该需要几个小时。
- en: Getting started
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个项目，需要以下内容：
- en: Raspberry Pi model 3 (2015 model or newer)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi 3型号（2015年或更新型号）
- en: A USB power supply
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB电源适配器
- en: A computer monitor
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机显示器
- en: A USB keyboard
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB键盘
- en: A USB mouse
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB鼠标
- en: A separate computer for writing and executing the JavaScript client program
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于编写和执行JavaScript客户端程序的单独计算机
- en: Introducing JavaScript cloud libraries
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍JavaScript云库
- en: Let's start off by providing a background on JavaScript cloud libraries. JavaScript
    has been around since the dawn of the internet (1995, for argument's sake). It
    has become a language that can turn a HTML web page into a fully functioning desktop
    equivalent app. Personally, I find JavaScript to be one of the most useful programming
    languages out there (besides Python, of course).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先介绍一下JavaScript云库的背景。JavaScript自互联网诞生以来就存在（1995年，举例而言）。它已经成为一种可以将HTML网页转变为完全功能的桌面等效应用程序的语言。就我个人而言，我发现JavaScript是最有用的编程语言之一（当然，除了Python）。
- en: JavaScript was released in 1995 and was designed to work with the most popular
    web browser at the time, Netscape Navigator. It was originally called livescript,
    but the name was changed to JavaScript due to the use and support of Java within
    the Netscape Navigator browser. Despite the similar syntax, Java and JavaScript
    really have nothing to do with each other—a confusing fact that continues to this
    day.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript于1995年发布，旨在与当时最流行的网络浏览器Netscape Navigator一起使用。它最初被称为livescript，但由于在Netscape
    Navigator浏览器中使用和支持Java，名称被更改为JavaScript。尽管语法相似，但Java和JavaScript实际上与彼此无关——这是一个令人困惑的事实，直到今天仍然存在。
- en: Google Cloud
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌云
- en: Through `google-api-javascript-client`, we may access Google Cloud services.
    Specifically, we may access the Google Compute Engine, which is a component of
    the Google Cloud platform. With the Google Compute Engine, we may access the infrastructure
    that runs Gmail, YouTube, the Google search engine, and other Google services
    through the use of on-demand virtual machines. If this sounds like the type of
    tech babble that will impress your friends, you may want to dig a little deeper
    into this JavaScript library. You may find out more about the `google-api-javascript-client`
    here: [https://cloud.google.com/compute/docs/tutorials/javascript-guide](https://cloud.google.com/compute/docs/tutorials/javascript-guide).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`google-api-javascript-client`，我们可以访问谷歌云服务。具体来说，我们可以访问谷歌计算引擎，这是谷歌云平台的一个组件。通过谷歌计算引擎，我们可以通过按需虚拟机访问运行Gmail、YouTube、谷歌搜索引擎和其他谷歌服务的基础设施。如果这听起来像是能让你的朋友印象深刻的技术术语，你可能需要更深入地了解这个JavaScript库。您可以在这里了解更多关于`google-api-javascript-client`的信息：[https://cloud.google.com/compute/docs/tutorials/javascript-guide](https://cloud.google.com/compute/docs/tutorials/javascript-guide)。
- en: AWS SDK for JavaScript
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS SDK for JavaScript
- en: The AWS SDK for JavaScript in Node.js provides JavaScript objects for AWS services.
    These services include Amazon S3, Amazon EC2, Amazon SWF, and DynamoDB. This library
    uses the Node.js runtime environment. You may find out more about this library
    here: [https://aws.amazon.com/sdk-for-node-js/](https://aws.amazon.com/sdk-for-node-js/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: AWS SDK for JavaScript in Node.js提供了AWS服务的JavaScript对象。这些服务包括Amazon S3、Amazon
    EC2、Amazon SWF和DynamoDB。此库使用Node.js运行时环境。您可以在这里了解更多关于这个库的信息：[https://aws.amazon.com/sdk-for-node-js/](https://aws.amazon.com/sdk-for-node-js/)。
- en: Node.js was released in May of 2009\. The original author was Ryan Dhal and
    it is currently being developed by the company Joyent. Node.js allows for the
    execution of JavaScript code outside of the browser, thereby making it a JavaScript
    everywhere technology. This allows JavaScript to be used both on the server side
    and client side for web applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js于2009年5月发布。最初的作者是Ryan Dhal，目前由Joyent公司开发。Node.js允许在浏览器之外执行JavaScript代码，从而使其成为一种JavaScript无处不在的技术。这使JavaScript可以在服务器端和客户端用于Web应用程序。
- en: Eclipse Paho JavaScript client
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse Paho JavaScript客户端
- en: The Eclipse Paho JavaScript client library is an MQTT browser-based library
    for JavaScript clients. Paho is itself written in JavaScript and may easily be
    inserted into a web application project. The Eclipse Paho JavaScript client library
    uses web sockets to connect to an MQTT Broker. We will be using this library for
    our projects in this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse Paho JavaScript客户端库是一个面向JavaScript客户端的MQTT基于浏览器的库。Paho本身是用JavaScript编写的，可以轻松地插入到Web应用程序项目中。Eclipse
    Paho JavaScript客户端库使用Web套接字连接到MQTT Broker。我们将在本章的项目中使用这个库。
- en: Connecting to cloud services using JavaScript
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript连接到云服务
- en: For our project, we will build a JavaScript client and connect it to an MQTT
    Broker. We will both **Publish** and **Subscribe** to a **topic** named **test**.
    We will then write a small simple program on Raspberry Pi to publish to the topic
    named test. What this code will demonstrate is how easy it is to send and receive
    messages using MQTT.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们将构建一个JavaScript客户端并将其连接到MQTT Broker。我们将**发布**和**订阅**名为**test**的**topic**。然后，我们将在树莓派上编写一个小的简单程序来发布到名为test的主题。这段代码将演示使用MQTT发送和接收消息是多么容易。
- en: 'Take a look at the following diagram to see what we will accomplish with this
    project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下图表，了解我们将通过此项目实现的内容：
- en: '![](assets/84267fcf-dc03-4879-a939-a007bd125ecb.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/84267fcf-dc03-4879-a939-a007bd125ecb.png)'
- en: Setting up a CloudMQTT account
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置CloudMQTT帐户
- en: The first step is to set up an MQTT Broker. We may do this by installing one
    locally using the Mosquitto platform ([www.mosquitto.org](http://www.mosquitto.org)).
    What we will do instead is set up a cloud-based MQTT Broker using the website
    [www.cloudmqtt.com](http://www.cloudmqtt.com).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是设置MQTT Broker。我们可以通过在本地安装Mosquitto平台（[www.mosquitto.org](http://www.mosquitto.org)）来完成此操作。相反，我们将使用网站[www.cloudmqtt.com](http://www.cloudmqtt.com)设置基于云的MQTT
    Broker。
- en: 'To set up an account:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置帐户：
- en: In your browser, navigate to [www.cloudmqtt.com.](http://www.cloudmqtt.com)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，导航到[www.cloudmqtt.com.](http://www.cloudmqtt.com)
- en: Click on Log in at the top-right corner.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角点击登录。
- en: 'In the Create an account box, type in your email address:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建帐户框中，输入您的电子邮件地址：
- en: '![](assets/f04e69e9-3f08-4ba7-a01f-2c681a01a8e3.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f04e69e9-3f08-4ba7-a01f-2c681a01a8e3.png)'
- en: You will be sent an email to that email address asking you for confirmation.
    You can complete the confirmation process by clicking on the Confirm email button
    in the email.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将收到一封发送到该电子邮件地址的电子邮件，要求您确认。您可以通过单击电子邮件中的确认电子邮件按钮来完成确认过程。
- en: 'You will then be taken to a page where you need to enter a password. Choose
    a password, confirm it, and then press Submit:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后您将进入一个页面，需要输入密码。选择密码，确认密码，然后按提交：
- en: '![](assets/4078ed85-99ff-471d-9ca8-90f36549b436.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4078ed85-99ff-471d-9ca8-90f36549b436.png)'
- en: You will then be taken to the Instances page. This is where we will create an
    MQTT Broker instance to send and publish MQTT messages.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后您将进入实例页面。这是我们将创建MQTT Broker实例以发送和发布MQTT消息的地方。
- en: Setting up an MQTT Broker instance
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置MQTT Broker实例
- en: 'Now that we have a CloudMQTT account set up, it''s time to create an instance
    to use for our app:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了CloudMQTT帐户，是时候创建一个用于我们应用程序的实例了：
- en: From the Instances page, click on the big green button stating Create new instance.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从实例页面，单击标有创建新实例的大绿色按钮。
- en: 'You will see the following page:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下页面：
- en: '![](assets/01a45002-ed39-4088-981a-c57dfa9a50a1.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/01a45002-ed39-4088-981a-c57dfa9a50a1.png)'
- en: In the Name box, enter `T.A.R.A.S` (we will name the MQTT Broker instance this
    as we will consider this broker part of the T.A.R.A.S robot car).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称框中，输入`T.A.R.A.S`（我们将将MQTT Broker实例命名为此，因为我们将考虑此Broker是T.A.R.A.S机器人汽车的一部分）。
- en: In the Plan dropdown, select Cute Cat (this is the free option that is good
    for development purposes).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在计划下拉菜单中，选择Cute Cat（这是用于开发目的的免费选项）。
- en: Click on the green Select Region button.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击绿色的选择区域按钮。
- en: 'Based on where you are located in the world, select a region that is close
    to your geographic location. Since I am located in Canada, I will choose US-East-1
    (Northern Virginia):'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您所在的世界位置，选择一个靠近您地理位置的区域。由于我位于加拿大，我将选择US-East-1（北弗吉尼亚）：
- en: '![](assets/d41391c9-48ce-4cfb-8894-5732fe6f80e0.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d41391c9-48ce-4cfb-8894-5732fe6f80e0.png)'
- en: Click on the green Confirm button.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击绿色的确认按钮。
- en: 'You will see the Confirm new instance page. Review this information before
    clicking on the green Confirm instance button:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到确认新实例页面。在点击绿色的确认实例按钮之前，请查看此信息：
- en: '![](assets/62dd7a70-3784-465c-a9ca-9143c8705e4c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62dd7a70-3784-465c-a9ca-9143c8705e4c.png)'
- en: 'You should see a list of Instances with the T.A.R.A.S instance in the list:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到T.A.R.A.S实例在列表中的实例列表中：
- en: '![](assets/0e5c8309-381e-4d4a-8fbb-515b4ef2a5f9.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0e5c8309-381e-4d4a-8fbb-515b4ef2a5f9.png)'
- en: Writing the JavaScript client code
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写JavaScript客户端代码
- en: 'Here is a screenshot of the T.A.R.A.S instance that I set up on my account.
    Please note the values in the list. These values are from my instance and yours
    will be different. We will use these values when writing our JavaScript client:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在我的帐户上设置的T.A.R.A.S实例的屏幕截图。请注意列表中的值。这些值来自我的实例，您的值将不同。我们将在编写JavaScript客户端时使用这些值：
- en: '![](assets/5519d33b-365e-40d2-8ef0-02657aef5ef6.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5519d33b-365e-40d2-8ef0-02657aef5ef6.png)'
- en: 'To write our JavaScript client code, we should use a computer other than Raspberry
    Pi on T.A.R.A.S. You may use whichever OS and HTML editor you desire. I wrote
    my JavaScript client code using macOS and Visual Studio Code. You will also need
    the Paho JavaScript library:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写我们的JavaScript客户端代码，我们应该使用T.A.R.A.S上的树莓派以外的计算机。您可以使用任何您喜欢的操作系统和HTML编辑器。我使用macOS和Visual
    Studio Code编写了我的JavaScript客户端代码。您还需要Paho JavaScript库：
- en: Navigate to the Eclipse Paho downloads site at [https://projects.eclipse.org/projects/technology.paho/downloads](https://projects.eclipse.org/projects/technology.paho/downloads).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Eclipse Paho下载站点[https://projects.eclipse.org/projects/technology.paho/downloads](https://projects.eclipse.org/projects/technology.paho/downloads)。
- en: Click on the JavaScript client link. It will be marked with the name `JavaScript
    client`, followed by a version number. At the time of writing, the version was
    1.03.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击JavaScript客户端链接。它将以`JavaScript客户端`的名称标记，后跟版本号。在撰写本文时，版本号为1.03。
- en: The JavaScript client library will download as a ZIP file with `paho.javascript-1.0.3`.
    Unzip the file.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript客户端库将以`paho.javascript-1.0.3`的ZIP文件形式下载。解压文件。
- en: We will need a folder on our computer to use as a projects folder. Create a
    new folder on your computer and name it `MQTT HTML Client`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在计算机上创建一个用作项目文件夹的文件夹。在计算机上创建一个新文件夹，并将其命名为`MQTT HTML Client`。
- en: Create a subfolder called `scripts` inside the `MQTT HTML Client` folder.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MQTT HTML Client`文件夹内创建一个名为`scripts`的子文件夹。
- en: Drag and drop the unzipped `paho.javascript-1.0.3` folder into the `MQTT HTML
    Client` folder.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将解压后的`paho.javascript-1.0.3`文件夹拖放到`MQTT HTML Client`文件夹中。
- en: 'The directory structure inside of the `MQTT HTML Client` folder should look
    like the following:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MQTT HTML Client`文件夹内的目录结构应如下所示：'
- en: '![](assets/5e404183-5f7a-4f40-84e3-e31297a50130.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e404183-5f7a-4f40-84e3-e31297a50130.png)'
- en: 'Now, it''s time to write the code. We are going to make our code as simple
    as possible so that we may gain an understanding of how MQTT works with JavaScript.
    Our client code will consist of two files, an HTML page and a `.js` (JavaScript)
    file. Let''s start by creating the HTML page:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候编写代码了。我们将尽可能简化我们的代码，以便更好地理解MQTT如何与JavaScript配合使用。我们的客户端代码将包括两个文件，一个HTML页面和一个`.js`（JavaScript）文件。让我们从创建HTML页面开始：
- en: Using your favorite HTML editor, create a file called `index.html` and save
    it to the project root.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的HTML编辑器，创建一个名为`index.html`的文件并保存到项目根目录。
- en: 'Your `project` folder should look like the following:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的`project`文件夹应该如下所示：
- en: '![](assets/6a9ccea0-16b5-4bd3-ac42-b289a09df395.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6a9ccea0-16b5-4bd3-ac42-b289a09df395.png)'
- en: 'Type the following into the `index.html` file:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`文件中输入以下内容：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the changes to `index.html`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存对`index.html`的更改。
- en: 'What we have done here is we have created a simple HTML page and imported two
    JavaScript libraries, the Paho JavaScript library and a file called `index.js`,
    which we haven''t created yet:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里做的是创建一个简单的HTML页面，并导入了两个JavaScript库，Paho JavaScript库和一个名为`index.js`的文件，我们还没有创建：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We then need to create two buttons; on the top button, we set the `onclick`
    method to `sendTestData`. On the bottom button, we set the `onclick` method to
    `subscribeTestData`. These methods will be created in the JavaScript file we will
    write. For simplicity''s sake, we do not assign ID names to these buttons as we
    will not be referencing them in our JavaScript code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要创建两个按钮；在顶部按钮上，我们将`onclick`方法设置为`sendTestData`。在底部按钮上，我们将`onclick`方法设置为`subscribeTestData`。这些方法将在我们编写的JavaScript文件中创建。为简单起见，我们不给这些按钮分配ID名称，因为我们不会在我们的JavaScript代码中引用它们：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The last element we will create in our `index.html` page is a textbox. We assign
    an `id` of `messageTxt` and a value of `Waiting for MQTT message to the text box`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`index.html`页面中将创建的最后一个元素是一个文本框。我们为文本框分配了一个`id`为`messageTxt`和一个值为`Waiting
    for MQTT message`：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we were to load `index.html` into a browser, it would look like as follows:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们将`index.html`加载到浏览器中，它将如下所示：
- en: '![](assets/d3b89900-edd2-4fb5-9e45-d39a24510d8f.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d3b89900-edd2-4fb5-9e45-d39a24510d8f.png)'
- en: Running the code
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行代码
- en: 'Before we can run our client code, we need to create the JavaScript file that
    will provide the functionality we require:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行客户端代码之前，我们需要创建一个JavaScript文件，该文件将提供我们需要的功能：
- en: Using the HTML editor, create a file called `index.js` and save it to the `scripts`
    folder in our project directory.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用HTML编辑器，在我们的项目目录中的`scripts`文件夹中创建一个名为`index.js`的文件并保存。
- en: 'Add the following code to `index.js` and save it. Replace the `Server`, `User`,
    `Password`, and `Websockets Port` with values from your instance (shown as `"m10.cloudmqtt.com"`,
    `38215`, `"vectydkb"`, and `"ZpiPufitxnnT"`, respectively):'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`index.js`并保存。用您的实例中的值替换`Server`、`User`、`Password`和`Websockets Port`（分别显示为`"m10.cloudmqtt.com"`、`38215`、`"vectydkb"`和`"ZpiPufitxnnT"`）：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the code by refreshing the browser, where you have `index.html` loaded.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过刷新加载了`index.html`的浏览器中运行代码。
- en: Click on the Subscribe to test button. You should get pop-up dialog with the
    message Subscribed to test.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Subscribe to test`按钮。您应该会收到一个弹出对话框，显示`Subscribed to test`消息。
- en: Close the pop-up dialog.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭弹出对话框。
- en: Click on the Send test message button.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击发送测试消息按钮。
- en: You should see the message `Hello from JavaScript client` in the text box.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该在文本框中看到消息`Hello from JavaScript client`。
- en: 'Was this some kind of magic we just performed? Well, in a way, it was. We just
    accomplished subscribing to a topic on our MQTT Broker and then followed that
    up by publishing to the same topic and then receiving a message in our same JavaScript
    client. To witness this from the MQTT Broker, do the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们刚刚执行的某种魔术吗？在某种程度上是。我们刚刚成功订阅了MQTT Broker上的一个主题，然后发布到相同的主题，然后在同一个JavaScript客户端中接收到了一条消息。要从MQTT
    Broker中观察到这一点，请执行以下操作：
- en: Log in to your CloudMQTT account
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的CloudMQTT帐户
- en: Click on the T.A.R.A.S instance
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击T.A.R.A.S实例
- en: Click on the WEBSOCKET UI menu option
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击WEBSOCKET UI菜单选项
- en: 'You should see the following dialog saying that you are connected:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该会看到以下对话框，显示您已连接：
- en: '![](assets/a3d25e03-1fdd-4109-9f78-44479e68140a.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3d25e03-1fdd-4109-9f78-44479e68140a.png)'
- en: In another tab or window on your browser, navigate back to the JavaScript client,
    `index.html`
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器的另一个标签或窗口中，导航回JavaScript客户端`index.html`
- en: Click on the Send test message button again
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击发送测试消息按钮
- en: Navigate back to the CloudMQTT page
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回CloudMQTT页面
- en: 'Under the Received messages list, you should see a message:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接收到的消息列表下，您应该看到一条消息：
- en: '![](assets/50628610-fba2-47f4-a0db-e16acfd31ad2.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/50628610-fba2-47f4-a0db-e16acfd31ad2.png)'
- en: Click on the Send test message button a few more times and you should see a
    list of the same messages under Received messages.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击发送测试消息按钮几次，您应该会在接收到的消息下看到相同消息的列表。
- en: Understanding the JavaScript code
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解JavaScript代码
- en: Before we write code for Raspberry Pi, let's take a look at the JavaScript code
    from `index.js`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在为树莓派编写代码之前，让我们先看一下`index.js`中的JavaScript代码。
- en: 'We will look at the subscribe code first. The two methods we use to subscribe
    to a topic from our MQTT Broker are `subscribeTestData` and `onsubsribeTestDataSuccess`.
    `subscribeTestData` creates a Paho MQTT client object named `client`. It uses
    the `client` object to connect to our MQTT Broker by instantiating the object
    with `Server` and `Websockets Port` values (I''ve left the values from my account
    in the code for simplicity''s sake):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先来看订阅代码。我们用来从我们的MQTT Broker订阅主题的两种方法是`subscribeTestData`和`onsubsribeTestDataSuccess`。`subscribeTestData`创建了一个名为`client`的Paho
    MQTT客户端对象。它使用`client`对象通过实例化对象与我们的MQTT Broker连接，并使用`Server`和`Websockets Port`值（为简单起见，我在代码中留下了我的帐户中的值）：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We then set the callback handlers with `client.onConnectionLost` and `client.onMessageArrived`.
    The callback handlers link functions in our JavaScript code to events from our
    `client` object. In this case, when the connection to the MQTT Broker is lost
    or when a message has arrived from the MQTT Broker. The `options` variable sets
    the use of SSL to `true`, sets the `User` and `Password` settings, and then sets
    the conditions of a successful connection to the `onsubsribeTestDataSuccess` method
    and an unsuccessful connection attempt to the `doFail` method. We then connect
    to our MQTT broker through the `client.connect` method by passing in our `options` variable.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用“client.onConnectionLost”和“client.onMessageArrived”设置回调处理程序。回调处理程序将我们JavaScript代码中的函数与我们的“client”对象的事件相关联。在这种情况下，当与MQTT代理的连接丢失或从MQTT代理接收到消息时。
    “options”变量将SSL的使用设置为“true”，设置“User”和“Password”设置，然后将成功连接的条件设置为“onsubsribeTestDataSuccess”方法，将连接尝试不成功的条件设置为“doFail”方法。然后，我们通过传递我们的“options”变量通过“client.connect”方法连接到我们的MQTT代理。
- en: 'The `onsubsribeTestDataSuccess` method is called when there is a successful
    connection to the MQTT Broker. It sets the `client` object up to subscribe to
    the `test` topic. It then creates an alert with the message `Subscribed to test`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当成功连接到MQTT代理时，将调用“onsubsribeTestDataSuccess”方法。它设置“client”对象以订阅“test”主题。然后，它创建一个带有消息“Subscribed
    to test”的警报：
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `doFail` method is called if the connection to the client is unsuccessful.
    It simply creates a pop-up alert with the message `Error!`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与客户端的连接不成功，则调用“doFail”方法。它只是创建一个带有消息“错误！”的弹出警报：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we understand the code to subscribe to the `test` topic, let's take
    a look at the code that publishes to the `test` topic.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了订阅“test”主题的代码，让我们看一下发布到“test”主题的代码。
- en: 'The `sendTestData` function is very similar to the `subscribeTestData` function:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: “sendTestData”函数与“subscribeTestData”函数非常相似：
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A Paho MQTT client object named `client` is created with the same parameters
    that were used in the `subscribeTestData` function. The only callback handler
    set is `onConnectionLost`. We do not set `onMessageArrived` as we are sending
    a message and not receiving one. The `options` variable is set with the same values
    that were used in the `subscribeTestData` function, with the exception of `onSuccess`,
    which we assign to the `sendTestDataMessage` function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个名为“client”的Paho MQTT客户端对象，其参数与“subscribeTestData”函数中使用的参数相同。设置的唯一回调处理程序是“onConnectionLost”。我们没有设置“onMessageArrived”，因为我们正在发送消息而不是接收消息。将“options”变量设置为与“subscribeTestData”函数中使用的相同值，唯一的例外是将“onSuccess”分配给“sendTestDataMessage”函数。
- en: 'The `sendTestDataMessage` function creates a new Paho MQTT Message object with
    the `Hello from JavaScript client` value and names it `message`. The `destinationName`
    is the topic we are creating the message for and it is set to the `test` value.
    We then send off the message with `client.send`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “sendTestDataMessage”函数创建一个新的Paho MQTT消息对象，其值为“Hello from JavaScript client”，并将其命名为“message”。
    “destinationName”是我们为其创建消息的主题，设置为“test”值。然后，我们使用“client.send”发送消息：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `onConnectionLost` function is used for both subscribe and publish and
    simply creates an alert popup with an error message taken from the JavaScript
    response object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: “onConnectionLost”函数用于订阅和发布，并简单地创建一个带有来自JavaScript响应对象的错误消息的警报弹出窗口：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we have our JavaScript client subscribing and publishing to our MQTT
    Broker, let's get Raspberry Pi in on it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的JavaScript客户端已经订阅并发布到我们的MQTT代理，让我们让树莓派也参与其中。
- en: Publishing MQTT messages from our Raspberry Pi
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从我们的树莓派发布MQTT消息
- en: 'Let''s return to our Raspberry Pi (if you have been using another computer)
    and write some code to communicate with our MQTT Broker:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们返回到我们的树莓派（如果您一直在使用另一台计算机），并编写一些代码与我们的MQTT代理进行通信：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE打开Thonny。
- en: Click on the New icon to create a new file.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“新建”图标创建一个新文件。
- en: 'Type the following into the file:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中输入以下内容：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save the file as `CloudMQTT-example.py` and run it.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为“CloudMQTT-example.py”并运行它。
- en: 'Navigate back to the CloudMQTT page. You should see messages coming from the
    Raspberry Pi:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到CloudMQTT页面。您应该看到来自树莓派的消息：
- en: '![](assets/3e8afc3a-0e68-4a3f-a61c-120c53b71bc9.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/3e8afc3a-0e68-4a3f-a61c-120c53b71bc9.png)
- en: 'Navigate to our JavaScript client, `index.html`. You should see the message
    `Hello from the Raspberry Pi` in the textbox (if you do not see the message, refresh
    the page and click on Subscribe to test again):'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们的JavaScript客户端“index.html”。您应该在文本框中看到消息“Hello from the Raspberry Pi”（如果您没有看到消息，请刷新页面并再次单击“Subscribe
    to test”）：
- en: '![](assets/3ce2d3c4-6320-486b-9e96-6c57db5fcb98.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/3ce2d3c4-6320-486b-9e96-6c57db5fcb98.png)
- en: The Raspberry Pi Python code was deliberately kept simple so that the concepts
    may be understood. We start the code by importing the libraries we need. Then, we
    create an MQTT client object we call `mqttc`. The username and password are set
    using the `username_pw_set` method. We then connect to the MQTT Broker using the
    `connect` method by passing in the `Server` and `Port` values (we use `Port` instead
    of `Websockets Port` for the Python client). Inside a continuous loop, we publish
    to the MQTT Broker through the `publish` method by passing in the topic, `test`,
    and the message `Hello from Raspberry Pi`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派Python代码故意保持简单，以便可以理解这些概念。我们通过导入所需的库来启动代码。然后，我们创建一个名为“mqttc”的MQTT客户端对象。使用“username_pw_set”方法设置用户名和密码。然后，我们使用“connect”方法连接到MQTT代理，通过传递“Server”和“Port”值（我们为Python客户端使用“Port”而不是“Websockets
    Port”）。在一个连续的循环内，我们通过传递主题“test”和消息“Hello from Raspberry Pi”来通过“publish”方法发布到MQTT代理。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored JavaScript libraries before using JavaScript to
    create an MQTT client. We set up a cloud-based MQTT Broker and were able to publish
    and subscribe to messages using both our JavaScript client and a Python program
    on our Raspberry Pi.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在使用JavaScript创建MQTT客户端之前探索了JavaScript库。我们设置了一个基于云的MQTT代理，并能够使用我们的JavaScript客户端和树莓派上的Python程序发布和订阅消息。
- en: In [Chapter 18](74462726-806d-4214-8818-17f4627477c3.xhtml), *Putting It All
    Together*, we will expand on what we have learned in this chapter and build a
    JavaScript client that can control T.A.R.A.S over the internet.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第18章](74462726-806d-4214-8818-17f4627477c3.xhtml)中，*将所有内容放在一起*，我们将扩展本章学到的知识，并构建一个可以通过互联网控制T.A.R.A.S的JavaScript客户端。
- en: Questions
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which program (platform) may we use to install an MQTT Broker locally?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个程序（平台）在本地安装MQTT Broker？
- en: True or false? JavaScript and Java are the same technologies.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript和Java是相同的技术，是真是假？
- en: True or false? We may use JavaScript to create an MQTT client.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用JavaScript来创建一个MQTT客户端吗？
- en: Which Google services may we access using the `google-api-javascript-client` library?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`google-api-javascript-client`库来访问哪些谷歌服务？
- en: True or false? MQTT is a protocol used in the Internet of Things.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT是物联网中使用的协议，是真是假？
- en: What does the JavaScript Node.js technology allow you to do?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript Node.js技术允许您做什么？
- en: True or false? Python may be used in developing an MQTT client.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python可以用于开发MQTT客户端，是真是假？
- en: True or false? We may add functionality from an outside JavaScript library to
    our web page by using the script tag.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过使用脚本标签将外部JavaScript库的功能添加到我们的网页中，是真是假？
- en: How do we set the username and password for our MQTT client in our JavaScript
    code?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在JavaScript代码中为我们的MQTT客户端设置用户名和密码？
- en: True or false? We may view our published messages inside the Cloud MQTT app.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在Cloud MQTT应用程序中查看我们发布的消息吗？
- en: Further reading
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For further information on using a cloud-based MQTT Broker, consult the CloudMQTT
    documentation at [https://www.cloudmqtt.com/docs.html](https://www.cloudmqtt.com/docs.html)[.](https://www.cloudmqtt.com/docs.html)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用基于云的MQTT Broker的更多信息，请参阅[https://www.cloudmqtt.com/docs.html](https://www.cloudmqtt.com/docs.html)。
