["```py\nfrom time import sleep\nimport Adafruit_DHT\nimport paho.mqtt.client as mqtt\nimport json\n\nhost = 'demo.thingsboard.io'\naccess_token = '<<access token>>'\ndht_sensor = Adafruit_DHT.DHT11\npin = 19\n\nsensor_data = {'temperature': 0, 'humidity': 0}\n\nclient = mqtt.Client()\nclient.username_pw_set(access_token)\n\nwhile True:\n humidity, temperature = Adafruit_DHT\n .read_retry(dht_sensor, pin)\n\n print(u\"Temperature: {:g}\\u00b0C, Humidity\n {:g}%\".format(temperature, humidity))\n\n sensor_data['temperature'] = temperature\n sensor_data['humidity'] = humidity\n client.connect(host, 1883, 20)\n client.publish('v1/devices/me/telemetry', \n json.dumps(sensor_data), 1)\n client.disconnect()\n sleep(10)\n```", "```py\nfrom time import sleep\nimport Adafruit_DHT\nimport paho.mqtt.client as mqtt\nimport json\n```", "```py\nhost = 'demo.thingsboard.io'\naccess_token = '<<access token>>'\n```", "```py\ndht_sensor = Adafruit_DHT.DHT11\npin = 19\n```", "```py\nsensor_data = {'temperature': 0, 'humidity': 0}\n```", "```py\nclient = mqtt.Client()\nclient.username_pw_set(access_token)\n```", "```py\nwhile True:\n    humidity, temperature = Adafruit_DHT\n                                .read_retry(dht_sensor, pin)\n\n    print(u\"Temperature: {:g}\\u00b0C, Humidity\n               {:g}%\".format(temperature, humidity))\n\n    sensor_data['temperature'] = temperature\n    sensor_data['humidity'] = humidity\n```", "```py\nclient.connect(host, 1883, 20)\nclient.publish('v1/devices/me/telemetry', \n            json.dumps(sensor_data), 1)\nclient.disconnect()\nsleep(10)\n```", "```py\npip3 install twilio\n```", "```py\nfrom twilio.rest import Client\n\naccount_sid = '<<your account_sid>>'\nauth_token = '<<your auth_token>>'\nclient = Client(account_sid, auth_token)\n\nmessage = client.messages.create(\n                              body='Twilio says hello!',\n                              from_='<<your Twilio number>>',\n                              to='<<your cell phone number>>'\n                          )\nprint(message.sid)\n```", "```py\nfrom gpiozero import MotionSensor\nimport Adafruit_DHT\n\nclass SensoryData:\n    humidity=''\n    temperature=''\n    detected_motion=''\n\n    dht_pin = 19\n    dht_sensor = Adafruit_DHT.DHT11\n    motion_sensor = MotionSensor(4)\n\n    def __init__(self):\n        self.humidity, self.temperature = Adafruit_DHT\n                            .read_retry(self.dht_sensor, \n                            self.dht_pin)\n\n        self.motion_detected = self.motion_sensor.motion_detected\n\n    def getTemperature(self):\n        return self.temperature\n\n    def getHumidity(self):\n        return self.humidity\n\n    def getMotionDetected(self):\n        return self.motion_detected\n\nif __name__ == \"__main__\":\n\n    while True:\n        sensory_data = SensoryData()\n        print(sensory_data.getTemperature())\n        print(sensory_data.getHumidity())\n        print(sensory_data.getMotionDetected())\n\n```", "```py\nimport paho.mqtt.client as mqtt\nimport json\nfrom SensoryData import SensoryData\nfrom time import sleep\n\nclass SensoryDashboard:\n\n    host = 'demo.thingsboard.io'\n    access_token = '<<your access_token>>'\n    client = mqtt.Client()\n    client.username_pw_set(access_token)\n    sensory_data = ''\n\n    def __init__(self, sensoryData):\n        self.sensoryData = sensoryData\n\n    def publishSensoryData(self):\n        sensor_data = {'temperature': 0, 'humidity': 0,\n                        'Motion Detected':False}\n\n        sensor_data['temperature'] =  self.sensoryData\n                                        .getTemperature()\n\n        sensor_data['humidity'] = self.sensoryData.getHumidity()\n\n        sensor_data['Motion Detected'] = self.sensoryData\n                                        .getMotionDetected()\n\n        self.client.connect(self.host, 1883, 20)\n        self.client.publish('v1/devices/me/telemetry',         \n                                json.dumps(sensor_data), 1)\n        self.client.disconnect()\n\n        return sensor_data['Motion Detected']\n\nif __name__==\"__main__\":\n\n    while True:\n        sensoryData = SensoryData()\n        sensory_dashboard = SensoryDashboard(sensoryData)\n\n        print(\"Motion Detected: \" +             \n                str(sensory_dashboard.publishSensoryData()))\n\n        sleep(10)\n```", "```py\nfrom twilio.rest import Client\nfrom SensoryData import SensoryData\nfrom SensoryDashboard import SensoryDashboard\nfrom gpiozero import Button\nfrom time import time, sleep\n\nclass SecurityDashboardDist:\n    account_sid = ''\n    auth_token = ''\n    time_sent = 0\n    test_env = True \n    switch = Button(8)\n\n    def __init__(self, test_env = True):\n        self.test_env = self.setEnvironment(test_env)\n\n    def setEnvironment(self, test_env):\n        if test_env:\n            self.account_sid = '<<your Twilio test account_sid>>'\n            self.auth_token = '<<your Twilio test auth_token>>'\n            return True\n        else:\n            self.account_sid = '<<your Twilio live account_sid>>'\n            self.auth_token = '<<your Twilio live auth_token>>'\n            return False\n\n    def update_dashboard(self, sensoryDashboard):\n        self.sensoryDashboard = sensoryDashboard\n\n        motion_detected = self\n                          .sensoryDashboard\n                          .publishSensoryData()\n\n        if motion_detected:\n            return self.send_alert()\n        else:\n            return 'Alarm not triggered'\n\n    def send_alert(self):\n        if self.switch.is_pressed:\n            return self.sendTextMessage()\n        else:\n            return \"Alarm triggered but Not Armed\"\n\n    def sendTextMessage(self):\n        message_interval = round(time() - self.time_sent)\n\n        if message_interval > 600:\n            twilio_client = Client(self.account_sid, \n                                   self.auth_token)\n\n            if self.test_env:\n                message = twilio_client.messages.create(\n                            body='Intruder Alert',\n                            from_= '+15005550006',\n                            to='<<your cell number>>'\n                          )\n            else:\n                message = twilio_client.messages.create(\n                            body='Intruder Alert',\n                            from_= '<<your Twilio number>>',\n                            to='<<your cell number>>'\n                          )\n\n            self.time_sent=round(time())\n\n            return 'Alarm triggered and text message sent - ' \n                    + message.sid\n        else:\n             return 'Alarm triggered and text \n                    message sent less than 10 minutes ago'   \n\nif __name__==\"__main__\":  \n    security_dashboard = SecurityDashboardDist()\n\n    while True:\n        sensory_data = SensoryData()\n        sensory_dashboard = SensoryDashboard(sensory_data)\n        print(security_dashboard.update_dashboard(\n                sensory_dashboard))\n\n        sleep(5)\n\n```", "```py\nfrom twilio.rest import Client\nfrom SensoryData import SensoryData\nfrom SensoryDashboard import SensoryDashboard\nfrom gpiozero import Button\nfrom time import time, sleep\n```", "```py\nclass SecurityDashboardDist:\n```", "```py\n    account_sid = ''\n    auth_token = ''\n    time_sent = 0\n    test_env = True \n    switch = Button(8)\n\n    def __init__(self, test_env = True):\n        self.test_env = self.setEnvironment(test_env)\n```", "```py\ndef setEnvironment(self, test_env):\n        if test_env:\n            self.account_sid = '<<your Twilio test account_sid>>'\n            self.auth_token = '<<your Twilio test auth_token>>'\n            return True\n        else:\n            self.account_sid = '<<your Twilio live account_sid>>'\n```", "```py\n            self.auth_token = '<<your Twilio live auth_token>>'\n            return False\n```", "```py\ndef update_dashboard(self, sensoryDashboard):\n        self.sensoryDashboard = sensoryDashboard\n\n        motion_detected = self\n                          .sensoryDashboard\n                          .publishSensoryData()\n\n        if motion_detected:\n            return self.send_alert()\n        else:\n            return 'Alarm not triggered'\n```", "```py\ndef send_alert(self):\n        if self.switch.is_pressed:\n            return self.sendTextMessage()\n        else:\n            return \"Alarm triggered but Not Armed\"\n```", "```py\ndef sendTextMessage(self):\n        message_interval = round(time() - self.time_sent)\n\n        if message_interval > 600:\n            twilio_client = Client(self.account_sid, \n                                   self.auth_token)\n\n            if self.test_env:\n                message = twilio_client.messages.create(\n                            body='Intruder Alert',\n                            from_= '+15005550006',\n                            to='<<your cell number>>'\n                          )\n            else:\n                message = twilio_client.messages.create(\n                            body='Intruder Alert',\n                            from_= '<<your Twilio number>>',\n                            to='<<your cell number>>'\n                          )\n\n            self.time_sent=round(time())\n\n            return 'Alarm triggered and text message sent - ' \n                    + message.sid\n        else:\n             return 'Alarm triggered and text \n                    message sent less than 10 minutes ago'   \n```", "```py\nif __name__==\"__main__\":  \n    security_dashboard = SecurityDashboardDist()\n\n    while True:\n        sensory_data = SensoryData()\n        sensory_dashboard = SensoryDashboard(sensory_data)\n        print(security_dashboard.update_dashboard(\n                sensory_dashboard))\n\n        sleep(5)\n```", "```py\nsecurity_dashboard = SecurityDashboardDist(True)\n```"]