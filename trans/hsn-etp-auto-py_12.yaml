- en: Interacting with the Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与数据库交互
- en: In previous chapters, we generated several different reports, using many Python
    utilities and tools. In this chapter, we will utilize Python libraries to connect
    to external databases and submit the data we have generated. This data can then
    be accessed by external applications to get information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们使用了许多Python工具和实用程序生成了多种不同的报告。在本章中，我们将利用Python库连接到外部数据库，并提交我们生成的数据。然后，外部应用程序可以访问这些数据以获取信息。
- en: Python provides a wide range of libraries and modules that cover managing and
    working on popular **Database Management Systems** (**DBMSes**), such as MySQL,
    PostgreSQL, and Oracle. In this chapter, we will learn how to interact with a
    DBMS and fill it with our own data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了广泛的库和模块，涵盖了管理和处理流行的**数据库管理系统**（**DBMSes**），如MySQL、PostgreSQL和Oracle。在本章中，我们将学习如何与DBMS交互，并填充我们自己的数据。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Installing MySQL on an automation server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自动化服务器上安装MySQL
- en: Accessing the MySQL database from Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Python访问MySQL数据库
- en: Installing MySQL on an automation server
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自动化服务器上安装MySQL
- en: The first thing that we need to do is set up a database. In the following steps,
    we will cover how to install the MySQL database on our automation server, which
    we created in [Chapter 8](part0116.html#3EK180-9cfcdc5beecd470bbeda046372f0337f),
    *Preparing a Lab Environment*. Basically, you will need a Linux-based machine
    (CentOS or Ubuntu) with an internet connection to download the SQL packages. MySQL
    is an open source DBMS that uses a relational database and the SQL language to
    interact with data. In CentOS 7, MySQL is replaced with another, forked version,
    called MariaDB; both have the same source code, with some enhancements in MariaDB.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是设置一个数据库。在接下来的步骤中，我们将介绍如何在我们在[第8章](part0116.html#3EK180-9cfcdc5beecd470bbeda046372f0337f)中创建的自动化服务器上安装MySQL数据库。基本上，您需要一个具有互联网连接的基于Linux的机器（CentOS或Ubuntu）来下载SQL软件包。MySQL是一个使用关系数据库和SQL语言与数据交互的开源DBMS。在CentOS
    7中，MySQL被另一个分支版本MariaDB取代；两者具有相同的源代码，但MariaDB中有一些增强功能。
- en: 'Follow these steps to install MariaDB:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装MariaDB：
- en: 'Use the `yum` package manager (or `apt`, in the case of Debian-based systems)
    to download the `mariadb-server` package, as shown in the following snippet:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`yum`软件包管理器（或`apt`，在基于Debian的系统中）下载`mariadb-server`软件包，如下摘录所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the installation has completed successfully, start the `mariadb` daemon.
    Also, we need to enable it at the operating system startup using the `systemd`
    command:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，启动`mariadb`守护程序。此外，我们需要使用`systemd`命令在操作系统启动时启用它：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Validate the database status by running the following command, and make sure
    that the output contains `Active:active (running)`:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令验证数据库状态，并确保输出包含`Active:active (running)`：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Securing the installation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护安装
- en: 'The next, logical step after installation is securing it. MariaDB includes
    a security script that changes the options inside the MySQL configuration files,
    like creating the root password for accessing the database and allowing remote
    access. Run the following commands to launch the script:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后的下一个逻辑步骤是保护它。MariaDB包括一个安全脚本，可以更改MySQL配置文件中的选项，比如创建用于访问数据库的root密码和允许远程访问。运行以下命令启动脚本：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first prompt asks you to provide the root password. This root password
    is not the Linux root username, but the root password for the MySQL database;
    since this is a fresh installation, we have not set it yet, so we will simply
    press *Enter* to go to the next step:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个提示要求您提供root密码。这个root密码不是Linux的root用户名，而是MySQL数据库的root密码；由于这是一个全新的安装，我们还没有设置它，所以我们将简单地按*Enter*进入下一步：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The script will suggest setting the password for the root. We will accept the
    suggestion by pressing `Y` and entering the new password:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将建议为root设置密码。我们将通过按`Y`并输入新密码来接受建议：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following prompts will suggest removing the anonymous users from administrating
    and accessing the database, which is highly recommended:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下提示将建议删除匿名用户对数据库的管理和访问权限，这是强烈建议的：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can run SQL commands from a remote machine to the database hosted in your
    automation servers; this requires you to give a special privilege to root users,
    so they can access the database remotely:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从远程机器向托管在自动化服务器上的数据库运行SQL命令；这需要您为root用户授予特殊权限，以便他们可以远程访问数据库：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we will remove the testing database, which anyone can access, and
    reload the privileges tables to ensure that all changes will take effect immediately:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将删除任何人都可以访问的测试数据库，并重新加载权限表，以确保所有更改立即生效：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have finished securing the installation; now, let's validate it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了安装的保护；现在，让我们验证它。
- en: Verifying the database installation
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证数据库安装
- en: 'The first step after MySQL installation is to validate it. We need to verify
    that the `mysqld` daemon has started and is listening to port `3306`. We will
    do that by running the `netstat` command and `grep` on the listening port:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL安装后的第一步是验证它。我们需要验证`mysqld`守护程序是否已启动并正在侦听端口`3306`。我们将通过运行`netstat`命令和在侦听端口上使用`grep`来做到这一点：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This means that the `mysqld` service can accept incoming connections from any
    IP over the port `3306`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`mysqld`服务可以接受来自端口`3306`上的任何IP的传入连接。
- en: If you have `iptables` running on your machine, you need to add a rule to `INPUT` a
    chain, in order to allow remote hosts to connect to the MySQL database. Also,
    validate that `SELINUX` has the proper policies.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的机器上运行着`iptables`，您需要向`INPUT`链添加一个规则，以允许远程主机连接到MySQL数据库。还要验证`SELINUX`是否具有适当的策略。
- en: 'The second verification is through connecting to the database using the `mysqladmin`
    utility. This tool is included in MySQL clients and allows you to execute commands
    remotely (or locally) on the MySQL database:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次验证是通过使用`mysqladmin`实用程序连接到数据库。这个工具包含在MySQL客户端中，允许您在MySQL数据库上远程（或本地）执行命令：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '| **Switch Name**  | **Meaning** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **切换名称** | **含义** |'
- en: '| `-u` | Specifies the username. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `-u` | 指定用户名。 |'
- en: '| `-p` | Makes MySQL prompt you with the username''s password. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `-p` | 使MySQL提示您输入用户名的密码。 |'
- en: '| `ping` | Operation name to validate whether the MySQL database is alive or
    not. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `ping` | 用于验证MySQL数据库是否存活的操作名称。 |'
- en: The output indicates that the MySQL installation has completed successfully,
    and we're ready to move to the next step.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 输出表明MySQL安装已成功完成，我们准备进行下一步。
- en: Accessing the MySQL database from Python
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Python访问MySQL数据库
- en: The Python developer creates the `MySQLdb` module, which provides a utility
    to interact and manage the database from a Python script. This module can be installed
    using Python's `pip`, or with an operating system package manager, such as `yum`
    or `apt`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Python开发人员创建了`MySQLdb`模块，该模块提供了一个工具，可以从Python脚本中与数据库进行交互和管理。可以使用Python的`pip`或操作系统包管理器（如`yum`或`apt`）安装此模块。
- en: 'To install the package, use the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装该软件包，请使用以下命令：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Verify the installation as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式验证安装：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Since the module has imported without any errors, we know that the Python module
    has successfully installed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块已经成功导入，我们知道Python模块已成功安装。
- en: 'We will now access the database through the console and create a simple database
    called `TestingPython`, with one table inside it. We will then connect to it from
    Python:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过控制台访问数据库，并创建一个名为`TestingPython`的简单数据库，其中包含一个表。然后我们将从Python连接到它：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding statements, we connected to the database using the MySQL utility,
    then used the SQL `CREATE` command to create a blank, new database.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述声明中，我们使用MySQL实用程序连接到数据库，然后使用SQL的`CREATE`命令创建一个空的新数据库。
- en: 'You can verify the newly created database by using the following commands:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令验证新创建的数据库：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It's not mandatory to write SQL commands in uppercase; however, it's a best
    practice, in order to differentiate them from variables and other operations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL命令中不一定要使用大写字母；但是，这是最佳实践，以便将它们与变量和其他操作区分开来。
- en: 'We need to switch to the new database:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要切换到新的数据库：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, execute the following command to create a new table inside the database:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行以下命令在数据库中创建一个新表：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When you're creating a table, you should specify the column type. For example, `fname`
    is a string with a maximum of 30 characters, while `id` is an integer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表时，应指定列类型。例如，`fname`是一个最大长度为30个字符的字符串，而`id`是一个整数。
- en: 'Verify the table creation as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 验证表的创建如下：
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Querying the database
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询数据库
- en: 'At this point, our database is ready for some Python script. Let''s create
    a new Python file and provide database parameters:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的数据库已准备好接受一些Python脚本。让我们创建一个新的Python文件，并提供数据库参数：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The parameters provided (`SQL_IP`, `SQL_USERNAME`, `SQL_PASSWORD`, and `SQL_DB`)
    are needed to establish the connection and authenticate against the database on
    port `3306`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的参数（`SQL_IP`、`SQL_USERNAME`、`SQL_PASSWORD`和`SQL_DB`）是建立连接并对端口`3306`上的数据库进行身份验证所需的。
- en: 'The following table mentions the parameters and their meaning:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了参数及其含义：
- en: '| **Parameter** | **Meaning** |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **含义** |'
- en: '| `host` | The server IP address that has the `mysql` installation. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `host` | 具有`mysql`安装的服务器IP地址。 |'
- en: '| `user` | The username with administrative privileges over the connected database.
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `user` | 具有对连接数据库的管理权限的用户名。 |'
- en: '| `passwd` | The password created using the `mysql_secure_installation` script.
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `passwd` | 使用`mysql_secure_installation`脚本创建的密码。 |'
- en: '| `db` | The database name. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `db` | 数据库名称。 |'
- en: 'The output will be as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The returned object indicates that the connection has successfully opened to
    the database. Let''s use this object to create the SQL cursor that is used to
    execute the actual commands:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象表明已成功打开到数据库的连接。让我们使用此对象创建用于执行实际命令的SQL游标：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can have many cursors associated with a single connection, and any change
    in one cursor will be immediately reported to other ones, as you have the same
    connection opened.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以有许多与单个连接关联的游标，对一个游标的任何更改都会立即报告给其他游标，因为您已经打开了相同的连接。
- en: The cursor has two main methods: `execute()` and `fetch*()`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 游标有两个主要方法：`execute()`和`fetch*()`。
- en: 'The `execute()` method is used to send commands to the database and return
    the query results, while the `fetch*()` method has three flavors:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute()`方法用于向数据库发送命令并返回查询结果，而`fetch*()`方法有三种不同的用法：'
- en: '| **Method Name** | **Description** |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **方法名称** | **描述** |'
- en: '| `fetchone()` | Fetches only one record from the output, regardless of the
    number of returned rows. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `fetchone()` | 从输出中获取一个记录，而不管返回的行数。 |'
- en: '| `fetchmany(num)` | Returns the number of records specified inside the method.
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `fetchmany(num)` | 返回方法内指定的记录数。 |'
- en: '| `fetchall()` | Returns all records. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `fetchall()` | 返回所有记录。 |'
- en: 'Since `fetchall()` is a generic method that fetches either one record or all
    records, we will use it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`fetchall()`是一个通用方法，可以获取一个记录或所有记录，我们将使用它：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Inserting records into the database
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向数据库中插入记录
- en: 'The `MySQLdb` module allows us to insert records into the database using the
    same cursor operation. Remember that the `execute()` method can be used for both
    insertion and query. Without further ado, we will change our script a bit and
    provide the following `insert` commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`MySQLdb`模块允许我们使用相同的游标操作将记录插入到数据库中。请记住，`execute()`方法可用于插入和查询。毫不犹豫，我们将稍微修改我们的脚本，并提供以下`insert`命令：'
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the preceding example, the following applies:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，以下内容适用：
- en: We defined four employee records as a dictionary. Each one has an `id`, `fname`,
    `lname`, and `title`, in keys, with different values for each.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将四个员工记录定义为字典。每个记录都有`id`、`fname`、`lname`和`title`，并具有不同的值。
- en: Then, we grouped them using `employees`, which is a variable of the `list` type.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们使用`employees`对它们进行分组，这是一个`list`类型的变量。
- en: A `for` loop was created to iterate over the `employees` list and, inside the
    loop, we formatted the `insert` SQL command and used the `execute()` method to
    push the data to the SQL database. Notice that it's not required to add a semicolon
    (`;`) after the command inside the `execute` function, as it will be added automatically.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`for`循环来迭代`employees`列表，在循环内部，我们格式化了`insert` SQL命令，并使用`execute()`方法将数据推送到SQL数据库。请注意，在`execute`函数内部不需要在命令后添加分号(`;`)，因为它会自动添加。
- en: After each successful execution of the SQL command, the `commit()` operation
    will be used to force the database engine to commit the data; otherwise, the connection
    will be rolled back.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每次成功执行SQL命令后，将使用`commit()`操作来强制数据库引擎提交数据；否则，连接将被回滚。
- en: Finally, use the `close()` function to terminate the established SQL connection.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，使用`close()`函数来终止已建立的SQL连接。
- en: Closing the database connection means that all the cursors are sent to Python
    garbage collectors and will be unusable. Also, note that when you close the connection
    without committing the changes, it will make the database engine immediately roll
    back all transactions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭数据库连接意味着所有游标都被发送到Python垃圾收集器，并且将无法使用。还要注意，当关闭连接而不提交更改时，它会立即使数据库引擎回滚所有事务。
- en: 'The script''s output is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的输出如下：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can query the database through the MySQL console to verify that the data
    has been submitted to the database:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过MySQL控制台查询数据库，以验证数据是否已提交到数据库：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, returning to our Python code, we can use the `execute()` function again;
    this time, we use it to select all the data that we inserted inside the `TestTable`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我们的Python代码，我们可以再次使用`execute()`函数；这次，我们使用它来选择在`TestTable`中插入的所有数据：
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The script''s output is as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的输出如下：
- en: '[PRE27]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `L` character after the `id` value in the previous example can be resolved
    by converting the data to integer again (in Python), using the `int()` function.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，`id`值后的`L`字符可以通过再次将数据转换为整数（在Python中）来解决，使用`int()`函数。
- en: Another useful attribute inside of the cursor is `.rowcount`. This attribute
    will indicate how many rows are returned as a result of the last `.execute()`
    method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 游标内另一个有用的属性是`.rowcount`。这个属性将指示上一个`.execute()`方法返回了多少行。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to interact with a DBMS using Python connectors.
    We installed a MySQL database on our automation server, and then verified it.
    Then, we accessed the MySQL DB using a Python script, and performed operations
    on it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Python连接器与DBMS交互。我们在自动化服务器上安装了一个MySQL数据库，然后进行了验证。然后，我们使用Python脚本访问了MySQL数据库，并对其进行了操作。
- en: In the next chapter, we will learn how to use Ansible for system administration.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Ansible进行系统管理。
