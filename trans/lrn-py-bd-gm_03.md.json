["```py\n>>> y\n>>> x = y + 6 * 7 \n```", "```py\n>>> 5 == 5\nTrue\n>>> \"Python\" == \"Java\"\nFalse\n```", "```py\n>>> \"5\" == 5 # String(5) not equal to int(5)\n```", "```py\n>>> int(\"5\") == 5\nTrue\n>>> \"5\" == str(5)\nTrue\n```", "```py\n>>> logic = False\n>>> type(logic)\n'<class 'bool'>'\n```", "```py\n>>> v1 = 5\n>>> v2 = 10\n>>> v1 < v2\nTrue\n>>> v1 > v2\nFalse\n>>> v2 <= v1\nFalse\n>>> v2 >= v1\nTrue\n>>> v2 != v2\nFalse\n>>> v1 is v2 \nFalse\n>>> v1 is v1\nTrue\n```", "```py\n      >>> condition_one = 5 > 2 #True\n      >>> condition_two = 6 < 10 #True\n      >>> condition_one and condition_two\n      True\n      >>> condition_two = 6 > 10\n      >>> condition_one and condition_two\n      False\n```", "```py\n >>> 4 < 10 or 5 == 5\n True\n >>> 4 <= 10 or 100 < 50\n True\n >>> 10 <= 4 or 100 < 50\n False\n```", "```py\n      >>> not (5 < 4) # condition 5 < 4 is False\n      True\n      >>> not True\n      False\n```", "```py\n>>> 1 and 1\n1\n>>> 1 and 0\n0\n>>> 1 or 0\n1\n>>> 49 or True\n49\n```", "```py\n#filename: conditionals.py\n\nif (True):\n  #Do something\n```", "```py\n>>> if ( 4 == 4):\n          pass\n>>> #does not print anything\n```", "```py\n>>> number = 1\n>>> if number > 0:\n        print(\"Number is positive\")\n    else:\n        print(\"Number is negative\")\nNumber is positive\n>>>\n```", "```py\n>>> number = input(\"Enter any number: \")\n>>> number = int(number) #converting string to integer\n>>> if number > 0:\n        print(\"Number is Positive\")\n    elif number == 0:\n        print(\"Number is Zero\")\n    else:\n        print(\"Number is Negative\")\nEnter any number: 0\nNumber is Zero\n>>>\n```", "```py\n>>> number = 10\n>>> if number > 0:\n        if number % 2 == 0:\n                print(\"Number is positive and even\")\n        else:\n                print(\"Number is positive and odd\")      \nNumber is positive and even \n```", "```py\n>>> number = 4\n>>> if number > 0:\n        if number % 2 == 0 and number < 10:\n                print(\"Number {} is small even & positive number\".format(number))\nNumber 4 is small even & positive number\n```", "```py\n>>> i = 0\n>>> i = i + 1\n```", "```py\n>>> value = 4\n>>> value += 5\n>>> print(value)\n9\n```", "```py\n>>> for i in range(10):\n         print(i, \" John Doe\") #range(10) gives [0,1,2,3,4,5,6,7,8,9]\n0  John Doe\n1  John Doe\n2  John Doe\n3  John Doe\n4  John Doe\n5  John Doe\n6  John Doe\n7  John Doe\n8  John Doe\n9  John Doe\n```", "```py\n>>> for i in [6,7,8]:\n         print(i)\n6\n7\n8\n```", "```py\n>>> for name in ['Tom','Harry','Ricky','Matt']:\n             print(name)\nTom\nHarry\nRicky\nMatt\n```", "```py\n>>> person_names = ['Tom','Harry','Ricky','Matt']\n>>> for name in person_names:\n         print(person_names)\nTraceback (most recent call last):\n   File \"<pyshell#26>\", line 1, in <module>\n     for name in person_name:\nNameError: name 'person_name' is not defined\n```", "```py\n>>> i = 0\n>>> while (i < 10):\n        print(\"John Doe\")\n        i = i + 1\nJohn Doe\nJohn Doe\nJohn Doe\nJohn Doe\nJohn Doe\nJohn Doe\nJohn Doe\nJohn Doe\nJohn Doe\nJohn Doe\n```", "```py\n>>> while True:\n         print(\"Infinite loop\")\n```", "```py\n>>> condition = True\n>>> while condition:\n        print(\"This will run only one time\")\n        condition = False\nThis will run only one time\n```", "```py\n>>> numbers = [113,115,55,66,65,90]\n>>> min(numbers)\n55\n>>>max(numbers)\n115\n```", "```py\n>>> smallest_number = None\n>>> for item in [113,115,55,66,65,90]:\n            if smallest_number is None or item < smallest_number:\n                     smallest_number = item\n>>> print(\"Smallest:\", smallest_number)\nSmallest: 55\n```", "```py\n>>> largest_number = None\n>>> for item in [113,115,55,66,65,90]:\n            if largest_number is None or item > largest_number:\n                    largest_number = item\n>>> print(\"Largest: \",largest_number)\nLargest: 115\n```", "```py\n>>> items = [1,5,7,8,\"Free\",\"spam\",False,89,90,11,\"Python\"]\n>>> refined_items = []\n>>> for item in items:\n        if type(item) != int:\n                continue\n        else:\n                 refined_items.append(item)\n>>> print(refined_items)\n[1,5,7,8,89,90,11]\n```", "```py\n>>> items = [1,5,7,8,\"Free\",\"spam\",False,89,90,11,\"Python\"]\n>>> refined_items = []\n>>> for item in items:\n        if type(item) != int:\n                 break\n        else:\n                 refined_items.append(item)\n>>> print(refined_items)\n[1,5,7,8]\n```", "```py\n>>> print(\"Hey! it's me\")))\nSyntaxError: invalid syntax\n```", "```py\n>>> a = 34\n>>> a / 0\nTraceback (most recent call last):\n  File \"<pyshell#2>\", line 1, in <module>\n    a / 0\nZeroDivisionError: division by zero\n```", "```py\n>>> a = 34\n #INSIDE TRY BLOCK: put code that can give you error or exception\n>>> try:\n       print(a/0) #this will give you exception\n    except:\n       print(\"You cannot divide any number by Zero. It is Illegal!\") #message to user\n\nYou cannot divide any number by Zero. It is Illegal!\n```", "```py\n>>> a = 34\n #INSIDE TRY BLOCK: put code that can give you error or exception\n>>> try:\n        print(a/0) #this will give you exception\n    except ZeroDivisionError:\n        pass\n```", "```py\n#code is written in same previous file\n\nchoices = []\nfor pos in range(0,9):\n      choices.append(str(pos+1))\n```", "```py\n#board layout\nprint('\\n')\nprint('|' + choices[0] + '|' + choices[1] + '|' + choices[2] + '|')\nprint('----------')\nprint('|' + choices[3] + '|' + choices[4] + '|' + choices[5] + '|')\nprint('----------')\nprint('|' + choices[6] + '|' + choices[7] + '|' + choices[8] + '|')\n\n#output\n''' \n|1|2|3|\n----------\n|4|5|6|\n----------\n|7|8|9|\n\n'''\n```", "```py\nwhile True:\n    print('\\n')\n    print('|' + choices[0] + '|' + choices[1] + '|' + choices[2] + '|')\n    print('----------')\n    print('|' + choices[3] + '|' + choices[4] + '|' + choices[5] + '|')\n    print('----------')\n    print('|' + choices[6] + '|' + choices[7] + '|' + choices[8] + '|')\n    #above code is to print board layouts\n\n    try:\n        choice = int(input(\"> \").strip())\n    except:\n        print(\"Please enter only valid fields from board (0-8)\")\n        continue\n```", "```py\n#creating Boolean variable\nIs_Current_One = True #default player is player X\n\n#first move is done by player X\nwhile True:\n    #put code of board layouts here\n    if Is_Current_One:\n        print(\"Player X\")\n    else:\n        print(\"Player O\")\n\n    #put try and except block here\n    #---------------------------------------------\n    #code to put either X or O on position selected by user\n    if Is_Current_One:\n        choices[choice-1] = 'X'\n    else:\n        choices[choice-1] = 'O'\n    #code to toggle between True and False\n    Is_Current_One = not Is_Current_One\n```", "```py\n| 1 | 2 | 3 |\n ----------\n| 4 | 5 | 6 |\n ----------\n| 7 | 8 | 9 |\n```", "```py\nwon = False #at first we don't have any winner\nwhile not won:\n    #code from previous topics\n    #logic to make any player winner:\n    for pos_x in range(0,3):\n        pos_y = pos_x * 3 \n\n        #for row condition:\n        if (choices[pos_y] == choices[(pos_y + 1)]) and (choices[pos_y] \n           == choices[(pos_y + 2)]):\n            #code to change won to True\n            won = True #main loop will break\n\n        #column condition:\n        if (choices[pos_x] == choices[(pos_x + 3)]) and (choices[pos_x] \n          == choices[(pos_x + 6)]):\n            won = True #main loop will break\n\n```", "```py\nwhile not won:\n    #code from previous topic\n    for pos_x in range(0,3):\n        pos_y = pos_x * 3\n\n    #add condition for row and column here\n\n#print who is winner\nprint(\"Player \" + str(int(Is_Current_One + 1)) + \" won, Congratulations!\")    \n```", "```py\n| 1 | 2 | 3 |\n ----------\n| 4 | 5 | 6 |\n ----------\n| 7 | 8 | 9 |\n```", "```py\nwhile not won:\n    #code from previous topic\n    for pos_x in range(0,3):\n        pos_y = pos_x * 3\n    #add condition for row and column here\n\n    #diagonal condition here:\n    if ((choices[0] == choices[4] and choices[0] == choices[8]) or\n        (choices[2] == choices[4] and choices[4] == choices[6])):\n         won = True\n\n#print who is winner\nprint(\"Player \" + str(int(Is_Current_One + 1)) + \" won, Congratulations!\")  \n```"]