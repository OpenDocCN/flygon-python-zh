["```py\n          python3.8 -m pip install matplotlib\n\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\ndef f(x):\n    return x*(x - 2)*np.exp(3 - x)\n```", "```py\nx = np.linspace(-0.5, 3.0)  # 100 values between -0.5 and 3.0\n```", "```py\ny = f(x)  # evaluate f on the x points\n```", "```py\nplt.plot(x, y)\n```", "```py\nplt.show()\n```", "```py\nfig = plt.figure()  # manually create a figure\nlines = plt.plot(x, y)  # plot data\n```", "```py\nx = np.linspace(-0.5, 3.0)\nlines = plt.plot(x, f(x), x, x**2, x, 1 - x)\n```", "```py\nfig, ax = plt.subplots()\nl1 = ax.plot(x, f(x))\nl2 = ax.plot(x, x**2)\nl3 = ax.plot(x, 1 - x)\n```", "```py\ny1 = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\ny2 = np.array([1.2, 1.6, 3.1, 4.2, 4.8])\ny3 = np.array([3.2, 1.1, 2.0, 4.9, 2.5])\n```", "```py\nfig, ax = plt.subplots()\n```", "```py\nlines = ax.plot(y1, 'o', y2, 'x', y3, '*')\n```", "```py\nax.plot(y1, 'o', y2, 'x', y3, '*', color=\"k\")\n```", "```py\nax.axis([-0.5, 5.5, 0, 5.5]) # set axes\nax.set_xticks([0.5*i for i in range(9)])  # set xticks\nax.set_yticks([0.5*i for i in range(11)] # set yticks\nax.grid()  # add a grid\n```", "```py\nfig, ax = plt.subplots()\nax = ax.plot(y1, \"o-\", y2, \"x--\", y3, \"*-.\")\n```", "```py\nax.set_title(\"Plot of the data y1, y2, and y3\")\nax.set_xlabel(\"x axis label\")\nax.set_ylabel(\"y axis label\")\n```", "```py\nax.legend((\"data y1\", \"data y2\", \"data y3\"))\n```", "```py\ndef generate_newton_iters(x0, number):\n    iterates = [x0]\n    errors = [abs(x0 - 1.)]\n    for _ in range(number):\n        x0 = x0 - (x0*x0 - 1.)/(2*x0)\n        iterates.append(x0)\n        errors.append(abs(x0 - 1.))\n    return iterates, errors\n```", "```py\niterates, errors = generate_newton_iters(2.0, 5)\n```", "```py\nfig, (ax1, ax2) = plt.subplots(1, 2, tight_layout=True) # 1 row, 2 columns\n```", "```py\nax1.plot(iterates, \"x\")\nax1.set_title(\"Iterates\")\nax1.set_xlabel(\"$i$\", usetex=True)\nax1.set_ylabel(\"$x_i$\", usetex=True)\n```", "```py\nax2.semilogy(errors, \"x\") # plot y on logarithmic scale\nax2.set_title(\"Error\")\nax2.set_xlabel(\"$i$\", usetex=True)\nax2.set_ylabel(\"Error\")\n```", "```py\nx = np.arange(1, 5, 0.1)\ny = x*x\n```", "```py\nfig, ax = plt.subplots()\nax.plot(x, y)\nax.set_title(\"Graph of $y = x^2$\", usetex=True)\nax.set_xlabel(\"$x$\", usetex=True)\nax.set_ylabel(\"$y$\", usetex=True)\n```", "```py\nfig.savefig(\"savingfigs.png\", dpi=300)\n```", "```py\nX = np.linspace(-2, 2)\nY = np.linspace(-1, 1)\n```", "```py\nx, y = np.meshgrid(X, Y)\n```", "```py\nz = x**2 * y**3\n```", "```py\nfrom mpl_toolkits import mplot3d\n```", "```py\nfig = plt.figure()\nax = fig.add_subplot(projection=\"3d\")  # declare 3d plot\n```", "```py\nax.plot_surface(x, y, z)\n```", "```py\nax.set_xlabel(\"$x$\")\nax.set_ylabel(\"$y$\")\nax.set_zlabel(\"$z$\")\n```", "```py\nax.set_title(\"Graph of the function $f(x) = x^2y^3$)\n```", "```py\nfig = plt.figure()  # Force a new figure\nplt.contour(x, y, z)\nplt.title(\"Contours of $f(x) = x^2y^3$\")\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$y$\")\n```", "```py\nx = np.array([ 0.19, -0.82, 0.8 , 0.95, 0.46, 0.71, \n     -0.86, -0.55,   0.75,-0.98, 0.55, -0.17, -0.89,\n         -0.4 , 0.48, -0.09, 1., -0.03, -0.87, -0.43])\ny = np.array([-0.25, -0.71, -0.88, 0.55, -0.88, 0.23, \n      0.18,-0.06, 0.95, 0.04, -0.59, -0.21, 0.14, 0.94, \n          0.51, 0.47, 0.79, 0.33, -0.85, 0.19])\nz = np.array([-0.04, 0.44, -0.53, 0.4, -0.31, 0.13, \n      -0.12, 0.03, 0.53, -0.03, -0.25, 0.03, -0.1 , \n          -0.29, 0.19, -0.03, 0.58, -0.01, 0.55, -0.06])\n```", "```py\nfig = plt.figure(tight_layout=True)  # force new figure\nax1 = fig.add_subplot(1, 2, 1, projection=\"3d\")  # 3d axes\nax1.plot_trisurf(x, y, z)\nax1.set_xlabel(\"$x$\")\nax1.set_ylabel(\"$y$\")\nax1.set_zlabel(\"$z$\")\nax1.set_title(\"Approximate surface\")\n```", "```py\nax2 = fig.add_subplot(1, 2, 2)  # 2d axes\nax2.tricontour(x, y, z)\nax2.set_xlabel(\"$x$\")\nax2.set_ylabel(\"$y$\")\nax2.set_title(\"Approximate contours\")\n```", "```py\nX = np.linspace(-2, 2)\nY = np.linspace(-2, 2)\nx, y = np.meshgrid(X, Y)\nt = x**2 + y**2  # small efficiency\nz = np.cos(2*np.pi*t)*np.exp(-t)\n```", "```py\nfig = plt.figure()\nax = fig.add_subplot(projection=\"3d\")\nax.plot_surface(x, y, z, cmap=\"binary_r\")\nax.set_title(\"Surface with colormap\")\nax.set_xlabel(\"$x$\")\nax.set_ylabel(\"$y$\")\nax.set_zlabel(\"$z$\")\n```", "```py\nfig = plt.figure()\nplt.contour(x, y, z, cmap=\"binary_r\")\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$y$\")\nplt.title(\"Contour plot with colormap set\")\n```", "```py\nfrom matplotlib.colors import LightSource\nlight_source = LightSource(0, 45)  # angles of lightsource\ncmap = plt.get_cmap(\"binary_r\")\nvals = light_source.shade(z, cmap)\nsurf = ax.plot_surface(x, y, z, facecolors=vals)\n```"]