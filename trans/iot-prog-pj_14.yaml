- en: Controlling the Robot Car Using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python控制机器人小车
- en: In [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml), *Introducing the
    Raspberry Pi Robot Car*, we built our T.A.R.A.S robot car. At the end of the chapter,
    we discussed how we could control T.A.R.A.S through code. In this chapter, we
    will start writing code to do just that.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第13章](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml)中，*介绍树莓派机器人小车*，我们建造了T.A.R.A.S机器人小车。在章节结束时，我们讨论了如何通过代码控制T.A.R.A.S。在本章中，我们将开始编写代码来实现这一点。
- en: We will start out by writing simple Python code, and then utilize the GPIO Zero
    library to make the car wheels move forward, move the servo motors holding the
    camera, and light up the LEDs at the back of the robot car.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编写简单的Python代码，然后利用GPIO Zero库使车轮向前移动，移动携带摄像头的伺服电机，并点亮机器人小车后面的LED灯。
- en: We will then organize our code using classes, before enhancing it further, as
    we send T.A.R.A.S off on a secret security mission.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用类组织我们的代码，然后进一步增强它，让T.A.R.A.S执行秘密安全任务。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Taking a look at the Python code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看Python代码
- en: Modifying the robot car Python code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改机器人小车的Python代码
- en: Enhancing the code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强代码
- en: Knowledge required to complete this chapter
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成本章所需的知识
- en: If you have jumped to this chapter without going through the projects in the
    previous chapters, let me outline the skills you need to complete the following
    projects. We will, of course, have to know how to get around the Raspbian OS in
    order to find our **Integrated Development Environment** (**IDE**).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您跳到本章而没有经历前几章的项目，让我概述一下您完成以下项目所需的技能。当然，我们必须知道如何在Raspbian OS中四处走动，以便找到我们的**集成开发环境**（**IDE**）。
- en: After you have finished programming T.A.R.A.S, you may be inclined to take your
    new skills and compete against other people building Raspberry Pi robots. Pi Wars
    ([https://piwars.org/](https://piwars.org/)) is such a place to do just that.
    Pi Wars is an international robotics competition that takes place in Cambridge
    in the UK. Up to 76 teams compete in challenge-based robotics competitions over
    the course of a weekend. Even though it is called Pi Wars, you can rest assured
    that you will not come back with a box of broken parts, as each of the competitions
    are non-destructive challenges. Check out [https://piwars.org/](https://piwars.org/),
    or search for Pi Wars videos on YouTube for more information.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成T.A.R.A.S的编程后，您可能会倾向于利用新技能与其他构建树莓派机器人的人竞争。Pi Wars ([https://piwars.org/](https://piwars.org/))就是这样一个地方。Pi
    Wars是一个在英国剑桥举行的国际机器人竞赛。在一个周末内，最多有76支队伍参加基于挑战的机器人竞赛。尽管它被称为Pi Wars，但您可以放心，您不会带着一箱破碎的零件回来，因为每场比赛都是非破坏性的挑战。查看[https://piwars.org/](https://piwars.org/)，或在YouTube上搜索Pi
    Wars视频以获取更多信息。
- en: As well, a working knowledge of Python is needed, as we will be doing all our
    coding in this chapter in Python. Since I like to use an object-oriented approach
    as much as I can, some knowledge of **Object-Oriented Programming** (**OOP**)
    will help you to benefit more from this chapter as well.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，需要对Python有一定的了解，因为本章的所有编码都将使用Python完成。由于我喜欢尽可能多地使用面向对象的方法，一些**面向对象编程**（**OOP**）的知识也将帮助您更好地从本章中受益。
- en: Project overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will program T.A.R.A.S to dance around the table and take
    photographs. The projects in this chapter should take a few hours to complete.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将编程T.A.R.A.S在桌子周围跳舞并拍照。本章的项目应该需要几个小时才能完成。
- en: Getting started
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个项目，需要以下内容：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派3型号（2015年或更新型号）
- en: A USB power supply
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB电源供应
- en: A computer monitor
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机显示器
- en: A USB keyboard
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB键盘
- en: A USB mouse
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB鼠标
- en: A completed T.A.R.A.S robot car kit (see [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml),
    *Introducing the Raspberry Pi Robot Car*)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已完成的T.A.R.A.S机器人小车套件（参见[第13章](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml)，*介绍树莓派机器人小车*）
- en: Taking a look at the Python code
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看Python代码
- en: In a way, our robot car project is like an overview of the code we've done in
    previous chapters. Through the use of Python and the amazing GPIO Zero library,
    we are able to read sensory data from the GPIO and control output devices by writing
    to GPIO pins. In the following steps, we will start with very simple Python code
    and the GPIO Zero library. If you have completed some of the earlier projects
    in the book, the code will seem quite familiar to you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，我们的机器人小车项目就像是我们在前几章中所做的代码的概述。通过使用Python和令人惊叹的GPIO Zero库，我们能够从GPIO读取传感器数据，并通过向GPIO引脚写入数据来控制输出设备。在接下来的步骤中，我们将从非常简单的Python代码和GPIO
    Zero库开始。如果您已经完成了本书中的一些早期项目，那么这些代码对您来说将会非常熟悉。
- en: Controlling the drive wheels of the robot car
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制机器人小车的驱动轮
- en: 'Let''s see if we can make T.A.R.A.S move a little. We will start by writing
    some basic code to move the robot car back and forth:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否可以让T.A.R.A.S移动一点。我们将首先编写一些基本代码来让机器人小车前后移动：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny
- en: Click on the New icon to create a new file
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建新文件
- en: 'Type the following code into the file:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入文件：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the file as `motor-test.py`
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`motor-test.py`
- en: Run the code
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should see the robot car move forward for `0.5` seconds, before moving backward
    for the same amount of time. If there was nothing in the way, the robot car should
    have returned to the same position it started from. The code is pretty self-explanatory;
    however, we will go over it now.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到机器人小车向前移动`0.5`秒，然后向后移动相同的时间。如果路上没有障碍物，机器人小车应该回到起始位置。代码相当简单明了；然而，我们现在将对其进行讨论。
- en: We start off by importing the libraries we need: `Robot` and `sleep`. After
    that, we instantiate a `Robot` object, called `robot`, and configure it to have
    the `5` and `6` pins for the left-hand side motors, and `22` and `27` for the
    right-hand side motors. After that, we move the robot forward at a speed of `0.2`.
    In order for the robot to go faster, we increase this value. After a short delay,
    we return the robot back to its original position with the `robot.backward(0.2)` command.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入我们需要的库：`Robot`和`sleep`。之后，我们实例化一个名为`robot`的`Robot`对象，并将其配置为左侧电机的`5`和`6`引脚，右侧电机的`22`和`27`引脚。之后，我们以`0.2`的速度将机器人向前移动。为了使机器人移动更快，我们增加这个值。稍作延迟后，我们使用`robot.backward(0.2)`命令将机器人返回到原始位置。
- en: One thing to take note of is the way the motors spin, and keep spinning, until
    they are stopped with the `robot.stop()` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是电机的旋转方式，它们会一直旋转，直到使用`robot.stop()`命令停止。
- en: If you found that the motors did not move the way they should, it is because
    of the wiring. Try experimenting with the wiring and changing the pin numbers
    for the `Robot` object `(left=(5,6), right=(22,27)`. It may take a few tries to
    get it right.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现电机没有按预期移动，那是因为接线的问题。尝试尝试不同的接线和更改`Robot`对象的引脚号码（left=(5,6), right=(22,27)）。可能需要几次尝试才能搞定。
- en: Moving the servos on the robot car
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动机器人车上的舵机
- en: 'We will now test the servo motors. To do this, we will pan the robot camera
    mount (the robot''s head) from right to left:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将测试舵机。为了做到这一点，我们将从右到左摆动机器人摄像头支架（机器人的头）：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE 打开 Thonny
- en: Click on the New icon to create a new file
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件
- en: 'Type the following code into the file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入文件：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save the file as `servo-test.py`
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`servo-test.py`
- en: Run the code
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should see the robot head move all the way to the right, wait for `5` seconds,
    and then move all the way to the left.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到机器人头部向右移动，等待`5`秒，然后向左移动。
- en: In the code, we start by importing the `Adafruit_PCA9685` library. After importing
    the `sleep` function, we then create a `PCA9685` object that we call `pwm`. This
    is, of course, an object built with code from Adafruit to support the HAT. We
    then set the minimum and maximum values that the servo can move, with `servo_min`
    and `servo_max` respectively.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们首先导入`Adafruit_PCA9685`库。在导入`sleep`函数后，我们创建一个名为`pwm`的`PCA9685`对象。当然，这是一个使用Adafruit代码构建的对象，用于支持HAT。然后我们分别设置舵机可以移动的最小和最大值，分别为`servo_min`和`servo_max`。
- en: If you are not getting the results you expect, experiment with the `servo_min` and
    `servo_max` values. We touch a bit on servos in [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有得到预期的结果，请尝试调整`servo_min`和`servo_max`的值。我们在[第5章](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml)中稍微涉及了一些关于舵机的内容，*用Python控制舵机*。
- en: Taking a picture
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拍照
- en: 'You may remember using the Raspberry Pi camera from previous chapters; in particular, [Chapter
    9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml), *Building a Home Security Dashboard*,
    where we used it to take a picture for our security application. Since T.A.R.A.S
    will be our trusty security agent, it makes sense for it to have the ability to
    take pictures. Let''s write some code to test out that the camera is working on
    our robot car:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得在以前的章节中使用树莓派摄像头；特别是[第9章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)，*构建家庭安全仪表板*，我们在那里使用它为我们的安全应用程序拍照。由于T.A.R.A.S将是我们可靠的安全代理，它有能力拍照是有意义的。让我们编写一些代码来测试一下我们的机器人车上的摄像头是否工作：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE 打开 Thonny
- en: Click on the New icon to create a new file
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件
- en: 'Enter the following code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the file as `camera-test.py`
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`camera-test.py`
- en: Run the code
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: If everything is set up correctly, you should see an image file in your `/home/pi` directory,
    with the name `image`, followed by today's date.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切设置正确，您应该在`/home/pi`目录中看到一个图像文件，文件名为`image`，后跟今天的日期。
- en: Making a beep noise
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出蜂鸣声
- en: Our security agent is limited to making a noise in order to alert us and scare
    away potential intruders. In this section, we will test the active buzzer installed
    on T.A.R.A.S.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的安全代理受限于发出噪音以警示我们并吓跑潜在的入侵者。在这一部分，我们将测试安装在T.A.R.A.S上的有源蜂鸣器。
- en: The old British police whistle was one of the earliest and trusted pieces of
    equipment that police officers of the past had to defend themselves. With its
    unique sound, the police whistle allowed officers to communicate with each other.
    Despite the fact that police whistles are no longer in use, its legacy has left
    its impact on society, such that the term 'Whistle Blower' is used to this day
    to refer to someone exposing hidden injustices or corruption.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的英国警察口哨是过去警察官员必须自卫的最早和可信赖的装备之一。英国警察口哨以其独特的声音，允许警官之间进行交流。尽管警察口哨已不再使用，但它的遗产对社会产生了影响，以至于“吹哨人”这个术语至今仍用来指代揭露隐藏的不公正或腐败的人。
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE 打开 Thonny
- en: Click on the New icon to create a new file
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件
- en: 'Type the following code into the file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入文件：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save the file as `buzzer-test.py`
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`buzzer-test.py`
- en: Run the code
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should hear the buzzer sound for `5` seconds, before shutting off.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该听到蜂鸣器声音持续`5`秒，然后关闭。
- en: Making the LEDs blink
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让LED闪烁
- en: 'On the back of T.A.R.A.S, we have installed two LEDs (preferably, one red one
    and one green one). We have used simple GPIO Zero library commands to blink LEDs
    before, so that shouldn''t be a challenge for us. Let''s take this a step further,
    and create code that we can use to encapsulate LED blinking patterns:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在T.A.R.A.S的背面，我们安装了两个LED（最好是一个红色和一个绿色）。我们以前使用简单的GPIO Zero库命令来闪烁LED，所以这对我们来说不应该是一个挑战。让我们更进一步，创建可以用来封装LED闪烁模式的代码：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on the New icon to create a new file
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新图标创建一个新文件
- en: 'Type the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file as `TailLights.py`
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`TailLights.py`
- en: Run the code
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: 'You should see a 20-second long, blinking display from the LEDs. Of note in
    our code, however, is the use of the `LEDBoard` class from the GPIO Zero library,
    as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到LED显示器闪烁20秒。但值得注意的是我们的代码中使用了GPIO Zero库的`LEDBoard`类，如下所示：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this code, we instantiate an object, called `led_lights`, from the `LEDBoard`
    class, and configure it with the values of `red` and `green`, pointing to the `21`
    and `20` GPIO pins respectively. By using `LEDBoard`, we are able to control the
    LEDs separately or as one unit. The `blink_together` method controls the LEDs
    as one unit, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们从`LEDBoard`类中实例化一个名为`led_lights`的对象，并使用`red`和`green`的值来配置它，分别指向`21`和`20`的GPIO引脚。通过使用`LEDBoard`，我们能够分别或作为一个单元来控制LED。`blink_together`方法控制LED作为一个单元，如下所示：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Our code is rather self explanatory; however, there are few other things we
    should point out. When we initialize the `TailLights` object, we give the LEDs
    a short blink to signify that the object has been initialized. This allows for
    troubleshooting later on; although, if we feel that the code is redundant, then
    we can remove it later instead:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码相当容易理解；然而，还有一些其他事情我们应该指出。当我们初始化`TailLights`对象时，我们让LED短暂闪烁以表示对象已被初始化。这样可以在以后进行故障排除；尽管，如果我们觉得代码是多余的，那么我们以后可以将其删除：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Keeping the initialization code in place may come in handy though when we want
    to ensure that our LEDs have not been disconnected (after all, who hasn''t disconnected
    something when trying to connect something else?). To do this from the shell,
    type the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 保留初始化代码可能会很方便，尤其是当我们想要确保我们的LED没有断开连接时（毕竟，谁在尝试连接其他东西时没有断开过某些东西呢？）。要从shell中执行此操作，请输入以下代码：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should see the LEDs blink for half a second.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到LED闪烁了半秒钟。
- en: Modifying the robot car Python code
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改机器人车Python代码
- en: Now that we have tested the motors, servos, camera, and LEDs, it's time to modify
    the code into classes to give it more unity. In this section, we will make T.A.R.A.S
    dance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经测试了电机、舵机、摄像头和LED，是时候将代码修改为类，以使其更加统一了。在本节中，我们将让T.A.R.A.S跳舞。
- en: Move the wheels
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动车轮
- en: 'Let''s start by encapsulating the code that moves the wheels on the robot car:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从封装移动机器人车轮的代码开始：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on the New icon to create a new file
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新图标创建一个新文件
- en: 'Type the following code into the file:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入文件中：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save the file as `RobotWheels.py`
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`RobotWheels.py`
- en: Run the code
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should see T.A.R.A.S do a little dance in front of you. Be sure to keep
    the wires that connect to T.A.R.A.S loose, so that T.A.R.A.S can do its thing.
    Who says that robots can't dance?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到T.A.R.A.S在你面前跳了一小段舞。确保连接到T.A.R.A.S的电线松动，这样T.A.R.A.S就可以做自己的事情。谁说机器人不能跳舞呢？
- en: The code is pretty self explanatory. Of note, though, is the way we call the
    `move_forward`, `move_backwards`, `turn_left`, and `turn_right` functions from
    the `dance` method. We could actually parameterize the amount of time between
    the moves, but that would complicate things a little more than need be. The delay
    of `0.5` seconds (coupled with the hardcoded speed of `0.2`) seems to be perfect
    for a dancing robot that does not fall off the desk. Think of it as T.A.R.A.S
    being on a very crowded dance floor with little room to move.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码相当容易理解。但值得注意的是我们如何从`dance`方法中调用`move_forward`、`move_backwards`、`turn_left`和`turn_right`函数。我们实际上可以参数化移动之间的时间，但这会使事情变得更加复杂。`0.5`秒的延迟（加上硬编码的速度`0.2`）似乎非常适合一个不会从桌子上掉下来的跳舞机器人。可以把T.A.R.A.S想象成在一个非常拥挤的舞池上，没有太多的移动空间。
- en: But wait, there's more. T.A.R.A.S can also move its head, light up, and make
    some noise. Let's start to add these moves.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等，还有更多。T.A.R.A.S还可以移动头部、点亮灯光并发出一些声音。让我们开始添加这些动作。
- en: Move the head
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动头部
- en: 'Since the camera on T.A.R.A.S is attached to the head, it makes sense to encapsulate
    the head movements (camera mount servos) with the camera functionality:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于T.A.R.A.S上的摄像头连接到头部，因此将头部运动（摄像头支架舵机）与摄像头功能封装起来是有意义的：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on the New icon to create a new file
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新图标创建一个新文件
- en: 'Type the following code into the file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入文件中：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the file as `RobotCamera.py`
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`RobotCamera.py`
- en: Run the code
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should see T.A.R.A.S move its head to the right, then down, then up, and
    then all the way to the left, before returning to the middle and stopping.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到T.A.R.A.S把头向右转，然后向下，然后向上，然后全部向左，然后返回到中间并停止。
- en: 'Again, we try and write our code so that it is simple to figure out. The `init`
    method, called when a `RobotCamera` object is instantiated, ensures that T.A.R.A.S
    has its head up before moving it:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们尝试编写我们的代码，使其易于理解。当实例化`RobotCamera`对象时，`init`方法确保T.A.R.A.S在移动头部之前将头部抬起：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'By calling the `RobotCamera` class, we structure our code to view the servos
    and movement of the robot car''s head as part of operating the camera. Although
    we don''t use the camera in our example, we will be using it soon. The values
    that are set for the minimum and maximum servo position were determined though
    trial and error as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`RobotCamera`类，我们将代码结构化为查看机器人车头部舵机和运动的一部分。尽管我们在示例中没有使用摄像头，但我们很快就会使用它。为舵机位置设置的最小和最大值是通过试验和错误确定的，如下所示：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Play around with these values to make it suit your build of the T.A.R.A.S robot
    car.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试调整这些值以适应您的T.A.R.A.S机器人车的构建。
- en: The `dance` and `secret_dance` methods perform a series of moves with the head
    of the robot car to simulate dancing. They are basically the same method (with
    the exception of the `take_picture` call at the end) of the `secret_dance` method
    that takes a picture with the Raspberry Pi camera and stores it in the home directory
    with a date-based name.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`dance`和`secret_dance`方法使用机器人车头执行一系列动作来模拟跳舞。它们基本上是相同的方法（除了`take_picture`在最后调用），`secret_dance`方法使用树莓派摄像头拍照，并以基于日期的名称存储在主目录中。'
- en: Make sounds
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出声音
- en: 'Now that T.A.R.A.S can move its body and head, it''s time to make some noise:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在T.A.R.A.S可以移动身体和头部了，是时候发出一些声音了：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on the New icon to create a new file
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建新文件
- en: Type the following code into the file
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入文件
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file as `RobotBeep.py`
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`RobotBeep.py`
- en: Run the code
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should hear a short beep coming from the active buzzer on T.A.R.A.S. This
    seems like a lot of code just to do that, doesn't it? Ah, but wait until the next
    section, when we take full advantage of the `RobotBeep` class.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该听到T.A.R.A.S上的有源蜂鸣器发出短促的蜂鸣声。这似乎是为了做这个而写了很多代码，不是吗？啊，但是等到下一节，当我们充分利用`RobotBeep`类时。
- en: 'The `init` function of `RobotBeep` allow us to turn on and off the initial
    beep that is heard once the class is instantiated. This is good for testing that
    our buzzer actually works, which we do by passing `True` to the class when we
    are creating the `robot_beep` object:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`RobotBeep`的`init`函数允许我们打开和关闭类实例化时听到的初始蜂鸣声。这对于测试我们的蜂鸣器是否正常工作很有用，我们通过在创建`robot_beep`对象时向类传递`True`来进行测试：'
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `notes` list and `play_song` methods perform the actual magic of the class.
    The list is actually a list of lists, as each value represents the time the buzzer
    plays or rests:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`notes`列表和`play_song`方法执行类的实际魔术。该列表实际上是一个列表的列表，因为每个值代表蜂鸣器播放或休息的时间：'
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Cycling through the `notes` list, look at the `note` variable. We use the first
    element as the length of time for which to keep the buzzer on, and the second
    element as the amount of time to rest before turning the buzzer back on. In other
    words, the first element determines the length of the note, and the second the
    space between that note and the next note. The `notes` list and `play_song` method
    give T.A.R.A.S the ability to sing (albeit without a melody).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 循环遍历`notes`列表，查看`note`变量。我们使用第一个元素作为保持蜂鸣器开启的时间长度，第二个元素作为在再次打开蜂鸣器之前休息的时间量。换句话说，第一个元素确定音符的长度，第二个元素确定该音符与下一个音符之间的间隔。`notes`列表和`play_song`方法使T.A.R.A.S能够唱歌（尽管没有旋律）。
- en: We will use the `play_song` method in our next section.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中使用`play_song`方法。
- en: Enhancing the code
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强代码
- en: It's a cold, dark, and dreary December night. Not much is known about our adversaries,
    but we do know that they like to dance. T.A.R.A.S has been assigned to a local
    dance club located deep into enemy territory. All of the persons of interest are
    there on this night. Your mission, should you choose to accept it, is to write
    a program to have T.A.R.A.S take secret photos at the club. However, it must not
    look like T.A.R.A.S is taking photos. T.A.R.A.S has to dance! If our adversaries
    found out that T.A.R.A.S was taking photos, that would be bad. Really bad! Think
    C3PO in the Empire Strikes Back bad.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个寒冷，黑暗和阴郁的十二月之夜。我们对我们的对手知之甚少，但我们知道他们喜欢跳舞。T.A.R.A.S被指派到敌人领土深处的一个当地舞厅。在这个晚上，所有感兴趣的人都在那里。如果您选择接受的话，您的任务是编写一个程序，让T.A.R.A.S在舞厅拍摄秘密照片。但是，它不能看起来像T.A.R.A.S在拍照。T.A.R.A.S必须跳舞！如果我们的对手发现T.A.R.A.S在拍照，那将是糟糕的。非常糟糕！想象一下帝国反击战中的C3PO糟糕。
- en: Stitching our code together
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的代码连接起来
- en: 'So, we have the ability to make T.A.R.A.S move its head and body, make sounds,
    light up, and take pictures. Let''s put all of this together so that we may complete
    the mission:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有能力让T.A.R.A.S移动头部和身体，发出声音，发光和拍照。让我们把所有这些放在一起，以便完成任务：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on the New icon to create a new file
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建新文件
- en: 'Type the following into the file:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容输入文件：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the file as `RobotDance.py`
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`RobotDance.py`
- en: Run the code
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should see T.A.R.A.S perform a series of moves before secretly taking a
    picture. If you check the Raspberry Pi `home` folder after the dance is done,
    you should see six new photos.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在秘密拍照之前，您应该看到T.A.R.A.S执行一系列动作。如果舞蹈结束后检查树莓派`home`文件夹，您应该会看到六张新照片。
- en: 'Something of note in our code is the use of the list called `light_show`. We
    use this list in two ways. First, the values stored in the list are passed to
    the `alarm` method of the `TailLights` object that we instantiate in our `RobotDance`
    class. We do this with the `tail_light_repetition` variable in the `lets_dance_incognito`
    method, as shown here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们代码中值得注意的是`light_show`列表的使用。我们以两种方式使用此列表。首先，将列表中存储的值传递给我们在`RobotDance`类中实例化的`TailLights`对象的`alarm`方法。我们在`lets_dance_incognito`方法中使用`tail_light_repetition`变量，如下所示：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see in the previous code, the variable of the `TailLights` class
    for the `alarm` method is named `tail_lights`. This will cause the LEDs to go
    through their sequence a number of times, based on the value of `tail_light_repetition`.
    For example, when the value of `2` is passed into the `alarm` method (the first
    value in the `light_show` list), the LED sequence will be performed twice.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在先前的代码中所看到的，`TailLights`类的变量`alarm`方法被命名为`tail_lights`。这将导致LED根据`tail_light_repetition`的值多次执行它们的序列。例如，当将值`2`传递给`alarm`方法（`light_show`列表中的第一个值）时，LED序列将执行两次。
- en: We run the `lets_dance_incognito` method six times. This is based on the number
    of values in the `light_show` list. This is the second way in which we use `light_show`.
    In order to increase or decrease the number of times that T.A.R.A.S performs the
    dance, we can either add or subtract some numbers from the `light_show` list.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行`lets_dance_incognito`方法六次。这基于`light_show`列表中的值的数量。这是我们使用`light_show`的第二种方式。为了增加或减少T.A.R.A.S执行舞蹈的次数，我们可以从`light_show`列表中添加或减去一些数字。
- en: As we are calling the `secret_dance` method on the `RobotCamera` object named `robot_camera`,
    for each value in the `light_show` list (in this case, six), we should have six
    photos in our home directory with date-based names after the dance is done.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在名为`robot_camera`的`RobotCamera`对象上调用`secret_dance`方法时，对于`light_show`列表中的每个值（在本例中为六），在舞蹈结束后，我们的家目录中应该有六张以日期命名的照片。
- en: After T.A.R.A.S performs its dance, check the home directory for pictures T.A.R.A.S
    took during the dance. Mission accomplished!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: T.A.R.A.S完成舞蹈后，请检查家目录中T.A.R.A.S在舞蹈期间拍摄的照片。任务完成！
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By the end of this chapter, you should be familiar with controlling a Raspberry
    Pi-powered robot with Python code. We started off by simply getting the various
    components on the robot car to work using simple code. After we were satisfied
    that the robot car does indeed move using our Python commands, we encapsulated
    the code in classes in order to make it easier to work with. This resulted in
    the `RobotDance` class, that contained calls to classes, which, in turn, encapsulated
    the control code for our robot. This allowed us to use the `RobotDance` class as
    a black box, abstracting away control code, and allowing us to focus on the task
    of designing dance steps for T.A.R.A.S.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该熟悉使用Python代码控制树莓派驱动的机器人。我们首先通过简单的代码使机器人车上的各种组件工作。在我们确信机器人车确实使用我们的Python命令移动后，我们将代码封装在类中，以便更容易使用。这导致了`RobotDance`类，其中包含对类的调用，这些类又封装了我们机器人的控制代码。这使我们能够使用`RobotDance`类作为黑匣子，将控制代码抽象化，并使我们能够专注于为T.A.R.A.S设计舞步的任务。
- en: In [Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting Sensory
    Inputs from the Robot Car to the Web*, we will pull sensory information from T.A.R.A.S
    (the distance sensor values) and publish it to the web, before unleashing T.A.R.A.S
    from the wires on the desktop and setting it free.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第15章](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml)中，*将机器人车的感应输入连接到网络*，我们将从T.A.R.A.S（距离传感器值）中获取感官信息，并将其发布到网络上，然后将T.A.R.A.S从桌面上的电线中释放出来，让其自由行动。
- en: Questions
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: True or false? The `LEDBoard` object allows us to control many LEDs at the same
    time.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？`LEDBoard`对象允许我们同时控制许多LED。
- en: True or false? The notes list on the `RobotCamera` object is used to move the
    camera mount.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？`RobotCamera`对象上的笔记列表用于移动摄像机支架。
- en: True or false? The adversaries in our fictional story love to dance.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们虚构故事中的对手喜欢跳舞。
- en: What is the difference between the `dance` and `secret_dance` methods?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dance`和`secret_dance`方法之间有什么区别？'
- en: What is the name of the `gpiozero` library for robots?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 机器人的`gpiozero`库的名称是什么？
- en: What is the term, inspired by the old police whistle, given to the act of exposing
    crime?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 受老警察哨子启发，给出揭露犯罪行为的行为的术语是什么？
- en: True or false? Encapsulating control code is a meaningless and unnecessary step.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？封装控制代码是一个毫无意义和不必要的步骤。
- en: What is the purpose of the `TailLights` class?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TailLights`类的目的是什么？'
- en: Which class and method would we use to turn the robot car to the right?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用哪个类和方法将机器人车转向右侧？
- en: What is the purpose of the `RobotCamera` class?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RobotCamera`类的目的是什么？'
- en: Further reading
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: One of the best reference books for learning GPIO Zero is the GPIO Zero PDF
    document itself. Google search for GPIO Zero PDF, and then download and read it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 学习GPIO Zero的最佳参考书之一是GPIO Zero PDF文档本身。搜索GPIO Zero PDF，然后下载并阅读它。
