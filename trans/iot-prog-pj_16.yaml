- en: Controlling the Robot Car with Web Service Calls
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Web服务调用控制机器人车
- en: One day, driverless cars will dominate our streets and highways. Although the
    sensory information and control algorithms will be located in the car itself,
    we will have the ability (and it will possibly be a legislative requirement) to
    control the cars from elsewhere. Controlling driverless cars will require sensory
    information from the car to be sent to a control station in the form of speed,
    GPS location, and so on. Conversely, information from the control station will
    be sent to the car in the form of traffic and directions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有一天，无人驾驶汽车将主导我们的街道和高速公路。尽管感应信息和控制算法将位于汽车本身，但我们将有能力（并且可能会成为立法要求）从其他地方控制汽车。控制无人驾驶汽车将需要将汽车的感应信息以速度、GPS位置等形式发送到控制站。相反，控制站的信息将以交通和方向等形式发送到汽车。
- en: In this chapter, we will explore both the sending of sensory information from
    T.A.R.A.S and the receiving of control information by T.A.R.A.S.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨从T.A.R.A.S发送感应信息和接收T.A.R.A.S控制信息的两个方面。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Reading the robot car's data from the cloud
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从云端读取机器人车的数据
- en: Using a Python program to control a robot car through the cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python程序通过云端控制机器人车
- en: Knowledge required to complete this chapter
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成本章所需的知识
- en: To complete this chapter, you should have a completed T.A.R.A.S robot car, as
    described in detail in [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml),
    *Introducing the Raspberry Pi Robot Car*. As with our other chapters in this book,
    a working knowledge of Python is required, as well as a basic understanding of
    object-oriented programming.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您应该有一个完整的T.A.R.A.S机器人车，详细描述在[第13章](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml)中，*介绍树莓派机器人车*。与本书中的其他章节一样，需要具备Python的工作知识，以及对面向对象编程的基本理解。
- en: Project overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: The projects in this chapter will involve communicating with T.A.R.A.S through
    the internet. We will take a deeper look at the dashboard analogue dial that we
    created in [Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting
    Sensory Inputs from the Robot Car to the Web*, before we create switches on the
    dashboard that control T.A.R.A.S. These projects should take about 2 hours to
    complete.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目将涉及通过互联网与T.A.R.A.S进行通信。我们将深入研究在[第15章](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml)中创建的仪表板模拟表，然后在仪表板上创建控制T.A.R.A.S的开关。这些项目应该需要大约2小时才能完成。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this project, the following will be required:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，需要以下内容：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个树莓派3型号（2015年或更新型号）
- en: A USB power supply
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB电源适配器
- en: A computer monitor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台电脑显示器
- en: A USB keyboard
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB键盘
- en: A USB mouse
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB鼠标
- en: A completed T.A.R.A.S robot car kit (see [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml),
    *Introducing the Raspberry Pi Robot Car*)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个完整的T.A.R.A.S机器人车套件（参见[第13章](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml)，*介绍树莓派机器人车*）
- en: Reading the robot car's data from the cloud
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从云端读取机器人车的数据
- en: In [Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting Sensory
    Inputs from the Robot Car to the Web*, we were able to send the distance sensory
    data to the cloud using the website [https://thingsboard.io/](https://thingsboard.io/).
    We ended by showing an analogue meter displaying the distance value. In this section,
    we will dig a little deeper into the analogue widget by customizing it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第15章](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml)中，*将机器人车的感应输入连接到网络*，我们能够使用网站[https://thingsboard.io/](https://thingsboard.io/)将距离感应数据发送到云端。最后，我们展示了一个显示距离数值的模拟仪表。在本节中，我们将深入研究模拟小部件并进行自定义。
- en: Changing the look of the distance gauge
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变距离表的外观
- en: 'This is how we change the look of the distance gauge:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们改变距离表外观的方法：
- en: Log into your ThingsBoard account
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录您的ThingsBoard账户
- en: Click on DASHBOARDS
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击DASHBOARDS
- en: Click on the ROBOTEYES title
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击ROBOTEYES标题
- en: Click on the orange pencil icon in the bottom-right corner of the screen
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击屏幕右下角的橙色铅笔图标
- en: You will notice that the distance analogue dial has changed (see the following
    screenshot)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到距离模拟表已经改变（见下面的屏幕截图）
- en: For one thing, there are three new icons located at the top-right corner of
    the dial
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，表盘右上角有三个新图标
- en: At the bottom-right corner, the color has changed to light gray as well
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右下角的颜色也变成了浅灰色
- en: You may resize the widget by hovering your mouse over the bottom-right corner
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过将鼠标悬停在右下角来调整小部件的大小
- en: You may also move the widget around the dashboard
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您也可以将小部件移动到仪表板上
- en: The X in the top-right corner allows you to remove this widget from the dashboard
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右上角的X允许您从仪表板中删除此小部件
- en: The icon with the underlined arrow allows you to download the widget as a `.json`
    file. This file may be used to import the widget into another dashboard on ThingsBoard
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带有下划线箭头的图标允许您将小部件下载为`.json`文件。此文件可用于将小部件导入ThingsBoard上的另一个仪表板
- en: 'Clicking on the pencil icon on the widget produces a menu that slides out from
    the right-hand side:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击小部件上的铅笔图标会产生一个从右侧滑出的菜单：
- en: '![](assets/947e50b2-1c6b-43f3-8c1b-029d601c9124.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/947e50b2-1c6b-43f3-8c1b-029d601c9124.png)'
- en: As you can see in the previous screenshot, the menu options are DATA, SETTINGS,
    ADVANCED, and ACTION. The default is DATA
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，菜单选项为DATA、SETTINGS、ADVANCED和ACTION。默认为DATA
- en: Click on the SETTINGS tab
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击SETTINGS选项卡
- en: 'Under the Title, change the name to `RobotEyes`:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题下，将名称更改为`RobotEyes`：
- en: '![](assets/67a0e9ed-a1df-4a5d-8e13-0909edd17784.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/67a0e9ed-a1df-4a5d-8e13-0909edd17784.png)'
- en: Click on the Display title check box
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击显示标题复选框
- en: 'Click on the white circle under Background color:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击背景颜色下的白色圆圈：
- en: '![](assets/3fcf61fa-9959-41d4-99b6-cdb3aae1e365.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3fcf61fa-9959-41d4-99b6-cdb3aae1e365.png)'
- en: 'You will see the color selection dialog:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到颜色选择对话框：
- en: '![](assets/3045209d-d736-42a9-9e1e-00babfd775ff.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3045209d-d736-42a9-9e1e-00babfd775ff.png)'
- en: Change the top to `rgb(50,87,126)`
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将顶部更改为`rgb(50,87,126)`
- en: Click on the orange checkbox to accept the changes
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的橙色复选框以接受更改
- en: 'You will notice the distance gauge has a few cosmetic changes (see the following
    screenshot):'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到距离表有一些外观上的变化（请参见以下屏幕截图）：
- en: '![](assets/e12eee79-c197-47b5-afc4-fb904b89f9d1.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e12eee79-c197-47b5-afc4-fb904b89f9d1.png)'
- en: Changing the range on the distance gauge
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改距离表上的范围
- en: 'Looking at the distance analogue gauge, it''s pretty obvious that having negative
    numbers doesn''t make a lot of sense for our application. Let''s make the range `0`
    to `100`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 看着距离模拟表，很明显，对于我们的应用程序来说，有负数并没有太多意义。让我们将范围更改为`0`到`100`：
- en: Click on the pencil icon on the widget
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击小部件上的铅笔图标
- en: Click on the ADVANCED tab
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“高级”选项卡
- en: 'Change the Minimum value to `0` and the Maximum value to `100`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将最小值更改为`0`，将最大值更改为`100`：
- en: '![](assets/2292aa38-1f4e-4055-8dca-42262a44e8e5.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2292aa38-1f4e-4055-8dca-42262a44e8e5.png)'
- en: Click on the orange checkbox in the top-right corner to accept the changes to
    the widget
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的橙色复选框以接受对小部件的更改
- en: Close the ROBOTEYES dialog
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭ROBOTEYES对话框
- en: Click on the orange checkbox in the bottom-right corner to accept the changes
    to the dashboard
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右下角的橙色复选框以接受对仪表板的更改
- en: 'You will notice that the distance analogue gauge now shows a range of `0` to
    `100`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到距离模拟表现在显示范围为`0`到`100`：
- en: '![](assets/c8e1a9b6-5b28-423b-9cf2-dd21c16c35c7.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c8e1a9b6-5b28-423b-9cf2-dd21c16c35c7.png)'
- en: Viewing the dashboard outside of your account
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的帐户之外查看仪表板
- en: For our final trick, we will display our dashboard outside of our account (we
    did this in [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing
    to Web Services*, as well). This also allow us to send our dashboard to a friend.
    So, why would we want to view our dashboard outside of the account? At the core
    of the Internet of Things is the concept that we may take information from one
    place and show it somewhere else, maybe somewhere on the other side of the world.
    By making our dashboard accessible outside of our account, we allow dashboards
    to be set up anywhere without the need to share our account information. Picture
    a large computer screen somewhere in the world, where a small section of the screen
    shows our dashboard. Showing distance information from T.A.R.A.S may not be of
    great interest to many, but the concept is what is important.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最后一个技巧，我们将在我们的帐户之外显示我们的仪表板（我们在[第10章](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml)中也这样做，*发布到Web服务*）。这也允许我们将我们的仪表板发送给朋友。那么，为什么我们要在帐户之外查看我们的仪表板呢？物联网的核心概念是我们可以从一个地方获取信息并在其他地方显示，也许是在世界的另一边的某个地方。通过使我们的仪表板在我们的帐户之外可访问，我们允许在任何地方设置仪表板，而无需共享我们的帐户信息。想象一下世界上某个地方有一块大屏幕，屏幕的一小部分显示我们的仪表板。从T.A.R.A.S显示距离信息可能对许多人来说并不是很感兴趣，但重要的是概念。
- en: 'To share our dashboard, do the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要分享我们的仪表板，请执行以下操作：
- en: In the ThingsBoard app, click on the DASHBOARDS option
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ThingsBoard应用程序中，点击“仪表板”选项
- en: 'Click on the middle icon under the RobotEyes dashboard:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击RobotEyes仪表板下的中间图标：
- en: '![](assets/2218b998-0b43-4bdd-af3e-69b5d68724f9.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2218b998-0b43-4bdd-af3e-69b5d68724f9.png)'
- en: 'You will see a dialog similar to the following (the URL has been partially
    blurred):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到类似以下的对话框（URL已部分模糊处理）：
- en: '![](assets/0368bece-b8e4-42b2-9dc1-4f059ad502e8.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0368bece-b8e4-42b2-9dc1-4f059ad502e8.png)'
- en: Click on the icon beside the URL to copy the URL to the clipboard
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击URL旁边的图标将URL复制到剪贴板
- en: To test out the URL, paste it into a completely different browser on your computer
    (or email it to a friend and have them open it)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试URL，请将其粘贴到计算机上的完全不同的浏览器中（或将其发送给朋友并让他们打开）
- en: You should be able to see the dashboard with our distance analogue gauge
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该能够看到我们的距离模拟表的仪表板
- en: Using a Python program to control a robot car through the cloud
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python程序通过云控制机器人车
- en: Being able to see sensory data in a dashboard is pretty impressive. However,
    what if we wanted to actually control something from our dashboard? In this section,
    we will do just that. We will start by constructing a simple switch to control
    an LED on T.A.R.A.S. We will then expand on this and have T.A.R.A.S do its dance
    from a push of a button over the internet.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在仪表板中看到传感器数据是非常令人印象深刻的。但是，如果我们想要从我们的仪表板实际控制某些东西怎么办？在本节中，我们将做到这一点。我们将首先构建一个简单的开关来控制T.A.R.A.S上的LED。然后，我们将扩展此功能，并让T.A.R.A.S通过互联网上的按钮按下来跳舞。
- en: 'Let''s start by changing the name of the dashboard from `RobotEyes` to `RobotControl`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将仪表板的名称从`RobotEyes`更改为`RobotControl`：
- en: In the ThingsBoard application, click on the DASHBOARDS option
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ThingsBoard应用程序中，点击“仪表板”选项
- en: 'Click on the pencil icon under the RobotEyes dashboard:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击RobotEyes仪表板下的铅笔图标：
- en: '![](assets/5d584ac7-e3ca-4193-adf0-9c86c0a719e3.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d584ac7-e3ca-4193-adf0-9c86c0a719e3.png)'
- en: Click on the orange pencil icon
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色铅笔图标
- en: 'Change the tile from `RobotEyes` to `RobotControl`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将瓷砖从`RobotEyes`更改为`RobotControl`：
- en: '![](assets/0c99f107-af76-44a2-b4c6-0ec5cb7863b5.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0c99f107-af76-44a2-b4c6-0ec5cb7863b5.png)'
- en: Click on the orange check to accept the changes
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色复选框以接受更改
- en: Exit out of the side dialog
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出侧边对话框
- en: Now let's control an LED on T.A.R.A.S from our ThingsBoard dashboard.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们从ThingsBoard仪表板上控制T.A.R.A.S上的LED。
- en: Adding a switch to our dashboard
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的仪表板添加一个开关
- en: 'In order to control an LED, we need to create a switch:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制LED，我们需要创建一个开关：
- en: Click on the RobotControl dashboard
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击RobotControl仪表板
- en: Click on the orange pencil icon
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色铅笔图标
- en: Click on the + icon
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击+图标
- en: Click on the Create new widget icon
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建新小部件”图标
- en: 'Select CONTROL WIDGETS and click on Switch control:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“控制小部件”并点击“切换控制”：
- en: '![](assets/a2a3f9d4-ab05-4e65-82a0-4581d1c2b6b6.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a2a3f9d4-ab05-4e65-82a0-4581d1c2b6b6.png)'
- en: Under Target device, select RobotControl
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标设备下，选择RobotControl
- en: 'Click on the SETTINGS tab:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“设置”选项卡：
- en: '![](assets/ad038ebb-a391-4dc2-8d92-901d1b7f5870.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ad038ebb-a391-4dc2-8d92-901d1b7f5870.png)'
- en: Change the title to `Green Tail Light` and click on Display title
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标题更改为`Green Tail Light`，然后点击显示标题
- en: Click on the ADVANCED tab
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击高级选项卡
- en: 'Change the RPC set value method to `toggleGreenTailLight`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将RPC设置值方法更改为`toggleGreenTailLight`：
- en: '![](assets/5b306916-8573-4478-922b-6930261347a0.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5b306916-8573-4478-922b-6930261347a0.png)'
- en: Click on the orange check mark icon to accept the changes to the widget
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色的勾号图标以接受对小部件的更改
- en: Close the side dialog
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭侧边对话框
- en: Click on the orange check mark icon to accept the changes to the dashboard
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色的勾号图标以接受对仪表板的更改
- en: So, what did we just do here? We have added a switch to our dashboard that will
    publish a method called `toggleGreenTailLight`, which will return a value of either
    `true` or `false` (the default return values as `this is a switch`).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们刚刚做了什么？我们在我们的仪表板上添加了一个开关，它将发布一个名为`toggleGreenTailLight`的方法，该方法将返回一个值，要么是`true`，要么是`false`（默认返回值为`this
    is a switch`）。
- en: Now that we have the switch, let's write some code on our Raspberry Pi that
    will respond to it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们有了开关，让我们在树莓派上编写一些代码来响应它。
- en: Controlling the green LED on T.A.R.A.S
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制T.A.R.A.S上的绿色LED
- en: 'To control the green LED on T.A.R.A.S, we will need to write some code to the
    Raspberry Pi on T.A.R.A.S. We will need the access token for our dashboard (see
    [Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting Sensory
    Inputs from the Robot Car to the Web*, on how to get that):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制T.A.R.A.S上的绿色LED，我们需要编写一些代码到T.A.R.A.S上的树莓派。我们需要我们仪表板的访问令牌（参见[第15章](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml)，*将机器人汽车的感应输入连接到网络*，关于如何获取）：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on the New icon to create a new file
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新建图标创建一个新文件
- en: 'Type the following:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE0]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the file as `control-green-led-mqtt.py`
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`control-green-led-mqtt.py`
- en: Run the code
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: Go back to our ThingsBoard dashboard (if you haven't been using a computer other
    than the Raspberry Pi on T.A.R.A.S, now is a good time to do so)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回我们的ThingsBoard仪表板（如果您一直在T.A.R.A.S上的树莓派之外的计算机上使用，现在是一个好时机）
- en: Click on the switch to turn it on
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击开关以打开它
- en: You should see the green LED on T.A.R.A.S turn on and off with the switch
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到T.A.R.A.S上的绿色LED随开关的打开和关闭而打开和关闭
- en: So, what did we just do here? Using boilerplate code taken from the ThingsBoard
    website, we have built a **Message Querying Telemetry Transport** (**MQTT**) client
    that listens to the dashboard and responds whenever the `toggleGreenTailLight`
    method is received. We accomplish this by subscribing to `'v1/devices/me/rpc/request/+'` in
    the `on_connect` method. We used MQTT in [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml),
    *Publishing to Web Services*, as well. However, as this code is pretty much just
    MQTT code, let's look into it a little closer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们刚刚做了什么？使用从ThingsBoard网站获取的样板代码，我们构建了一个**消息查询遥测传输**（**MQTT**）客户端，该客户端监听仪表板，并在接收到`toggleGreenTailLight`方法时做出响应。我们通过在`on_connect`方法中订阅`'v1/devices/me/rpc/request/+'`来实现这一点。我们在[第10章](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml)中也使用了MQTT，*发布到网络服务*。然而，由于这段代码几乎只是MQTT代码，让我们更仔细地研究一下。
- en: MQTT is a lightweight messaging protocol based on a `publisher` and `subscriber`
    method, perfect for use in the Internet of Things. A good way to understand publishers
    and subscribers is to relate them to newspapers of the past. The publisher was
    the entity that produced the newspaper; the subscribers were the people that bought
    and read the newspaper. The publisher did not know, or even have to know, how
    many subscribers it had in order to print the newspaper (not taking the cost of
    publishing into account). Think of the giant newspapers that published every day,
    not knowing how many people would buy their newspaper. So, the publisher can have
    many subscribers and, conversely, the subscriber can subscribe to many publishers,
    as a reader could read many different newspapers.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: MQTT是一种基于`发布者`和`订阅者`方法的轻量级消息传递协议，非常适合在物联网中使用。理解发布者和订阅者的一个好方法是将它们与过去的报纸联系起来。发布者是制作报纸的实体；订阅者是购买和阅读报纸的人。发布者不知道，甚至不必知道，为了印刷报纸有多少订阅者（不考虑出版成本）。想象一下每天都会出版的巨大报纸，不知道有多少人会购买他们的报纸。因此，发布者可以有很多订阅者，反之亦然，订阅者可以订阅很多发布者，就像读者可以阅读很多不同的报纸一样。
- en: 'We start off by importing the libraries we need for the code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入我们代码所需的库：
- en: '[PRE1]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Of note here are the `json` and `pho.mqtt.client` libraries, which are needed
    for communication to the MQTT server. `THINGSBOARD_HOST` and `ACCESS_TOKEN` are
    standard variables needed to connect to the right server and service. Then, of
    course, there is the `GPIO Zero LED` class, which sets the `green_led` variable
    to GPIO pin `21` (which happens to be the green taillight on T.A.R.A.S).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的是`json`和`pho.mqtt.client`库，这些库是与MQTT服务器通信所需的。`THINGSBOARD_HOST`和`ACCESS_TOKEN`是连接到正确服务器和服务所需的标准变量。当然，还有`GPIO
    Zero LED`类，它将`green_led`变量设置为GPIO引脚`21`（这恰好是T.A.R.A.S上的绿色尾灯）。
- en: 'The `on_connect` method prints out connection information and then subscribes
    to the service that will connect us to `rpc` methods from our ThingsBoard dashboard:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`on_connect`方法打印出连接信息，然后订阅将我们连接到来自我们ThingsBoard仪表板的`rpc`方法的服务：'
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It is the `on_message` method that allows us to really modify the code for
    our purposes:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 正是`on_message`方法使我们能够真正修改我们的代码以满足我们的目的：
- en: '[PRE3]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We first collect the `data` from our `msg` variable and convert it to a `json`
    file using the `json.loads` method. The `method` declaration, `on_message(client,
    userdata, msg)`, is again standard boilerplate code from the ThingsBoard website.
    We are really only concerned with getting the `msg` value.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从我们的`msg`变量中收集`data`，然后使用`json.loads`方法将其转换为`json`文件。`method`声明`on_message(client,
    userdata, msg)`，再次是来自ThingsBoard网站的标准样板代码。我们真正关心的只是获取`msg`的值。
- en: 'The first `if` statement, `if data[''method''] == ''toggleGreenTailLight''`,
    checks our `msg` for the `toggleGreenTailLight` method we set up with our switch
    on the ThingsBoard dashboard. Once we know that `msg` contains this method, we
    extract the other key-value pair in `data`, using `if data[''params'']` to check
    for a `True` value. So, in other words, the `json` file we get back calling the
    `on_message` method will look something like `{''params'': True, ''method'': ''toggleGreenTailLight''}`.
    This is basically a Python dictionary of two key-value pairs. This may seem confusing,
    but the easiest way to think about it would be to imagine this as a `json` version
    of a method (`toggleGreenTailLight`) with a return value (`True`).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '第一个`if`语句，`if data[''method''] == ''toggleGreenTailLight''`，检查我们的`msg`是否包含我们在ThingsBoard仪表板上设置的`toggleGreenTailLight`方法。一旦我们知道`msg`包含这个方法，我们使用`if
    data[''params'']`提取`data`中的其他键值对，以检查是否有`True`值。换句话说，调用`on_message`方法返回的`json`文件看起来像`{''params'':
    True, ''method'': ''toggleGreenTailLight''}`。这基本上是一个包含两个键值对的Python字典。这可能看起来令人困惑，但最简单的想法是将其想象成一个`json`版本的方法（`toggleGreenTailLight`）和一个返回值（`True`）。'
- en: 'One way to really understand what is going on is to put a `print` statement
    to `print data` inside of the `on_message` method, just after `data = json.loads(msg.payload.decode("utf-8"))`.
    Hence, the method would look something like the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 真正理解发生了什么的一种方法是在`on_message`方法中添加一个`print`语句来`print data`，就在`data = json.loads(msg.payload.decode("utf-8"))`之后。因此，该方法看起来像以下内容：
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the value returned from `params` is `True`, we simply turn on the LED using
    standard GPIO Zero code. We turn the LED off when the value returned from `params`
    is not `True` (or `False`, as there are only two values possible).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当从`params`返回的值为`True`时，我们简单地使用标准的GPIO Zero代码打开LED。当从`params`返回的值不是`True`（或`False`，因为只有两个可能的值）时，我们关闭LED。
- en: Seeing the LED turn on and off by using the internet is pretty impressive. However,
    that's not enough. Let's utilize some of the code we used in previous chapters
    and make T.A.R.A.S dance. This time, we will make it dance using the internet.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用互联网看到LED开关是相当令人印象深刻的。然而，这还不够。让我们利用我们在之前章节中使用的一些代码，让T.A.R.A.S跳舞。这一次，我们将通过互联网让它跳舞。
- en: Using the internet to make T.A.R.A.S dance
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用互联网让T.A.R.A.S跳舞
- en: To make T.A.R.A.S dance again, we are going to need to ensure that the code
    from [Chapter 14](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml), *Controlling the
    Robot Car Using Python*, is in the same directory as the code we are going to
    write.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要让T.A.R.A.S再次跳舞，我们需要确保[第14章](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml)中的代码*使用Python控制机器人车*与我们将要编写的代码在同一个目录中。
- en: 'We will start by creating a dance switch on our dashboard:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从在我们的仪表板上创建一个跳舞开关开始：
- en: Follow the previous steps 1 through 9 under Adding a switch to our dashboard
    to create a switch
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的步骤1到9，在仪表板下添加一个开关来创建一个开关
- en: Change the title to Dance Switch and click on Display title
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标题更改为Dance Switch并点击显示标题
- en: Click on the ADVANCED tab
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击高级选项卡
- en: Change the `RPC set value method` to `dance`
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`RPC set value method`更改为`dance`
- en: Click on the orange check mark icon to accept the changes to the widget
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色的勾号图标以接受对小部件的更改
- en: Close the side dialog
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭侧边对话框
- en: Click on the orange check mark icon to accept the changes to the dashboard
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击橙色的勾号图标以接受对仪表板的更改
- en: 'Now that we have the switch, let''s modify our code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了开关，让我们修改我们的代码：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE打开Thonny
- en: Click on the New icon to create a new file
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新图标创建一个新文件
- en: 'Type the following from step 4:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入步骤4中的以下内容：
- en: '[PRE5]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the file as `internet-dance.py`
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`internet-dance.py`
- en: Run the code
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: Now go to the dashboard and flick on the dance switch (unfortunately, it's a
    switch and not a button). T.A.R.A.S should start dancing just like it did in [Chapter
    14](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml), *Controlling the Robot Car Using
    Python*.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在去仪表板上打开跳舞开关（不幸的是，它是一个开关而不是一个按钮）。T.A.R.A.S应该开始跳舞，就像在[第14章](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml)中一样，*使用Python控制机器人车*。
- en: So, what did we just do? Well, we took simple code, modified it a bit, and through
    the power of object-oriented programming, we were able to get T.A.R.A.S to dance
    without having to change or even go through our old `RobotDance` code (isn't OOP
    the best thing since whatever you think the best thing is?).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们刚刚做了什么？嗯，我们拿了简单的代码，稍微修改了一下，通过面向对象编程的力量，我们能够让T.A.R.A.S跳舞，而无需更改甚至浏览我们旧的`RobotDance`代码（难道OOP不是自从你认为最好的东西以来最好的东西吗？）。
- en: For the MQTT code, all we had to do was add `import` to the `RobotDance` class,
    take away the redundant GPIO Zero import, take away any reference to the LED (as
    this would cause conflict), and then modify our `on_message` method to look for
    `dance` as the method.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MQTT代码，我们所要做的就是在`RobotDance`类中添加`import`，去掉多余的GPIO Zero导入，去掉对LED的任何引用（因为这会引起冲突），然后修改我们的`on_message`方法以查找`dance`作为方法。
- en: The `robot_dance` object of the `RobotDance` class type does all the work. When
    we call the `lets_dance_incognito` method on this object, it puts into motion
    the methods used for movement in the `RobotWheels`, `RobotBeep`, `TailLights`,
    and `RobotCamera` classes. The end result is a way to make T.A.R.A.S dance through
    the use of a switch on the internet.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`RobotDance`类类型的`robot_dance`对象完成了所有工作。当我们在这个对象上调用`lets_dance_incognito`方法时，它会启动`RobotWheels`、`RobotBeep`、`TailLights`和`RobotCamera`类中用于移动的方法。最终结果是通过互联网上的开关让T.A.R.A.S跳舞的方法。'
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked a bit further into the dashboard analogue gauge we
    used for distance sensory information. We modified it cosmetically before changing
    the range and making it available publicly. We then turned our attention to controlling
    T.A.R.A.S thorough the internet. Through the use of a simple program, we were
    able to turn on the green LED on T.A.R.A.S. with a dashboard switch. We took this
    knowledge and modified our code to make T.A.R.A.S dance via another dashboard
    switch.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们进一步研究了我们用于距离传感信息的仪表盘模拟表。在更改范围并将其公开之前，我们对其进行了美学修改。然后，我们将注意力转向通过互联网控制T.A.R.A.S。通过使用一个简单的程序，我们能够通过仪表盘开关打开T.A.R.A.S上的绿色LED。我们利用这些知识修改了我们的代码，通过另一个仪表盘开关使T.A.R.A.S跳舞。
- en: In [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building the JavaScript
    Client*, we will continue with this by writing a JavaScript client to control
    T.A.R.A.S through the internet.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第17章](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml) *构建JavaScript客户端*中，我们将继续编写一个JavaScript客户端，通过互联网控制T.A.R.A.S。
- en: Questions
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What type of information would a driverless car need from a central station?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无人驾驶汽车需要从中央站获取什么类型的信息？
- en: True/false? It is not possible to change the background color of widgets in
    the ThingsBoard dashboard.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假？在ThingsBoard仪表盘中无法更改小部件的背景颜色。
- en: How would you change the range on a dashboard analogue gauge?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何更改仪表盘模拟表的范围？
- en: True/false? The information returned from the line `print(data)` cannot be read
    by humans.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假？从行`print(data)`返回的信息无法被人类阅读。
- en: Which method from the `RobotDance` class do we call to make T.A.R.A.S dance?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`RobotDance`类中调用哪个方法来使T.A.R.A.S跳舞？
- en: True/false? The library that we require to work with `json` data is called `jason`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假？我们需要使用的处理`json`数据的库叫做`jason`。
- en: How do we create a switch on our dashboard?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在仪表盘上创建一个开关？
- en: True/false? The green LED on T.A.R.A.S is connected to GPIO pin 14.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假？T.A.R.A.S上的绿色LED连接到GPIO引脚14。
- en: True/false? A publisher can only have one subscriber.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假？一个发布者只能有一个订阅者。
- en: How many key-value pairs are returned from `msg` with the `on_message` method?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`on_message`方法从`msg`返回多少个键值对？
- en: Further reading
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: As we only briefly touched on ThingsBoard, it is a good idea to check out their
    documentation at [https://thingsboard.io/docs/guides/](https://thingsboard.io/docs/guides/).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只是简单地涉及了ThingsBoard，查看他们的文档是个好主意，网址是[https://thingsboard.io/docs/guides/](https://thingsboard.io/docs/guides/)。
