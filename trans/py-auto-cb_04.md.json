["```py\n$ mkdir dir\n$ touch dir/file1.txt\n$ touch dir/file2.txt\n$ mkdir dir/subdir\n$ touch dir/subdir/file3.txt\n$ touch dir/subdir/file4.txt\n$ touch dir/subdir/file5.pdf\n$ touch dir/file6.pdf\n```", "```py\n$ cd dir\n```", "```py\n>>> import os\n>>> for root, dirs, files in os.walk('.'):\n...     for file in files:\n...         print(file)\n...\nfile1.txt\nfile2.txt\nfile6.pdf\nfile3.txt\nfile4.txt\nfile5.pdf\n```", "```py\n>>> for root, dirs, files in os.walk('.'):\n...     for file in files:\n...         full_file_path = os.path.join(root, file)\n...         print(full_file_path)\n...\n./dir/file1.txt\n./dir/file2.txt\n./dir/file6.pdf\n./dir/subdir/file3.txt\n./dir/subdir/file4.txt\n./dir/subdir/file5.pdf\n```", "```py\n>>> for root, dirs, files in os.walk('.'):\n...     for file in files:\n...         if file.endswith('.pdf'):\n...             full_file_path = os.path.join(root, file)\n...             print(full_file_path)\n...\n./dir/file6.pdf\n./dir/subdir/file5.pdf\n```", "```py\n>>> import re\n>>> for root, dirs, files in os.walk('.'):\n...     for file in files:\n...         if re.search(r'[13579]', file):\n...             full_file_path = os.path.join(root, file)\n...             print(full_file_path)\n...\n./dir/file1.txt\n./dir/subdir/file3.txt\n./dir/subdir/file5.pdf\n```", "```py\n>>> for root, dirs, files in os.walk('.'):\n... print(root, dirs, files)\n...\n. ['dir'] []\n./dir ['subdir'] ['file1.txt', 'file2.txt', 'file6.pdf']\n./dir/subdir [] ['file3.txt', 'file4.txt', 'file5.pdf']\n```", "```py\n>>> os.path.split('/a/very/long/path/file.txt')\n('/a/very/long/path', 'file.txt')\n```", "```py\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```", "```py\n>>> with open('zen_of_python.txt') as file:\n...     for line in file:\n...         print(line)\n...\n[RESULT NOT DISPLAYED]\n```", "```py\n>>> with open('zen_of_python.txt', 'r') as file:\n...     for line in file:\n...         if 'should' in line.lower():\n...             print(line)\n...\nErrors should never pass silently.\nThere should be one-- and preferably only one --obvious way to do it.\n```", "```py\n>>> with open('zen_of_python.txt', 'rt') as file:\n...     for line in file:\n...         if 'better' in line.lower():\n...             print(line)\n...             break\n...\nBeautiful is better than ugly.\n```", "```py\n>>> file = open('zen_of_python')\n>>> content = file.read()\n>>> file.close()\n```", "```py\n>>> with open('example_utf8.txt') as file:\n...     print(file.read())\n...\n20\u00a3\n```", "```py\n>>> with open('example_iso.txt') as file:\n... print(file.read())\n...\nTraceback (most recent call last):\n  ...\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xa3 in position 2: invalid start byte\n```", "```py\n>>> with open('example_iso.txt', \n              encoding='iso-8859-1') as file:\n...     print(file.read())\n...\n20\u00a3\n```", "```py\n>>> with open('example_utf8.txt') as file:\n...     content = file.read()\n>>> with open('example_output_iso.txt', 'w',\n               encoding='iso-8859-1') as file:\n...     file.write(content)\n...\n4\n```", "```py\n>>> with open('example_output_iso.txt', \n              encoding='iso-8859-1') as file:\n...     print(file.read())\n...\n20\u00a3\n```", "```py\n>>> from bs4 import UnicodeDammit\n>>> with open('example_output_iso.txt', 'rb') as file:\n...     content = file.read()\n...\n>>> suggestion = UnicodeDammit(content)\n>>> suggestion.original_encoding\n'iso-8859-1'\n>>> suggestion.unicode_markup\n'20\u00a3\\n'\n```", "```py\n>>> import csv\n```", "```py\n>>> with open('top_films.csv') as file:\n...   data = csv.reader(file)\n...   for row in data:\n...       print(row)\n...\n['Rank', 'Admissions\\n(millions)', 'Title (year) (studio)', 'Director(s)']\n['1', '225.7', 'Gone With the Wind (1939)\\xa0(MGM)', 'Victor Fleming, George Cukor, Sam Wood']\n['2', '194.4', 'Star Wars (Ep. IV: A New Hope) (1977)\\xa0(Fox)', 'George Lucas']\n...\n['10', '118.9', 'The Lion King (1994)\\xa0(BV)', 'Roger Allers, Rob Minkoff']\n```", "```py\n>>> with open('top_films.csv') as file:\n...     data = csv.DictReader(file)\n...     structured_data = [row for row in data]\n...\n>>> structured_data[0]\nOrderedDict([('Rank', '1'), ('Admissions\\n(millions)', '225.7'), ('Title (year) (studio)', 'Gone With the Wind (1939)\\xa0(MGM)'), ('Director(s)', 'Victor Fleming, George Cukor, Sam Wood')])\n```", "```py\n>>> structured_data[0].keys()\nodict_keys(['Rank', 'Admissions\\n(millions)', 'Title (year) (studio)', 'Director(s)'])\n>>> structured_data[0]['Rank']\n'1'\n>>> structured_data[0]['Director(s)']\n'Victor Fleming, George Cukor, Sam Wood'\n```", "```py\n>>> with open('top_films.csv', newline='') as file:\n...    dialect = csv.Sniffer().sniff(file.read())\n```", "```py\n>>> with open('top_films.csv', newline='') as file:\n...     reader = csv.reader(file, dialect)\n...     for row in reader:\n...         print(row)\n```", "```py\n[<Timestamp in iso format>] - SALE - PRODUCT: <product id> - PRICE: $<price of the sale>\n```", "```py\n>>> from price_log import PriceLog\n```", "```py\n>>> with open('example_logs.log') as file:\n...     logs = [PriceLog.parse(log) for log in file]\n...\n>>> len(logs)\n5\n>>> logs[0]\n<PriceLog (Delorean(datetime=datetime.datetime(2018, 6, 17, 22, 11, 50, 268396), timezone='UTC'), 1489, 9.99)>\n```", "```py\n>>> total = sum(log.price for log in logs)\n>>> total\nDecimal('47.82')\n```", "```py\n>>> from collections import Counter\n>>> counter = Counter(log.product_id for log in logs)\n>>> counter\nCounter({1489: 2, 4508: 1, 8597: 1, 3086: 1})\n```", "```py\n>>> logs = []\n>>> with open('example_logs.log') as file:\n...     for log in file:\n...         plog = PriceLog.parse(log)\n...         if plog.product_id == 1489:\n...             logs.append(plog)\n...\n>> len(logs)\n2\n>>> logs[0].product_id, logs[0].timestamp\n(1489, Delorean(datetime=datetime.datetime(2018, 6, 17, 22, 11, 50, 268396), timezone='UTC'))\n>>> logs[1].product_id, logs[1].timestamp\n(1489, Delorean(datetime=datetime.datetime(2018, 6, 17, 22, 11, 50, 268468), timezone='UTC'))\n```", "```py\n>>> counter.most_common()\n[(1489, 2), (4508, 1), (8597, 1), (3086, 1)]\n```", "```py\n$ ls -lrt zen_of_python.txt\n-rw-r--r--@ 1 jaime staff 856 14 Jun 21:22 zen_of_python.txt\n```", "```py\n>>> import os\n>>> from datetime import datetime\n```", "```py\n>>> stats = os.stat(('zen_of_python.txt')\n>>> stats\nos.stat_result(st_mode=33188, st_ino=15822537, st_dev=16777224, st_nlink=1, st_uid=501, st_gid=20, st_size=856, st_atime=1529461935, st_mtime=1529007749, st_ctime=1529007757)\n```", "```py\n>>> stats.st_size\n856\n```", "```py\n>>> datetime.fromtimestamp(stats.st_mtime)\ndatetime.datetime(2018, 6, 14, 21, 22, 29)\n```", "```py\n>>> datetime.fromtimestamp(stats.st_atime)\ndatetime.datetime(2018, 6, 20, 3, 32, 15)\n```", "```py\n>>> os.path.getsize('zen_of_python.txt')\n856\n>>> os.path.getmtime('zen_of_python.txt')\n1529531584.0\n>>> os.path.getatime('zen_of_python.txt')\n1529531669.0\n```", "```py\n$ echo \"Pillow==5.1.0\" >> requirements.txt\n$ echo \"xmltodict==0.11.0\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> from PIL import Image\n>>> from PIL.ExifTags import TAGS, GPSTAGS\n>>> import xmltodict\n>>> from gps_conversion import exif_to_decimal, rdf_to_decimal\n```", "```py\n>>> image1 = Image.open('photo-dublin-a1.jpg')\n```", "```py\n>>> image1.height\n3024\n>>> image1.width\n4032\n>>> image1.format\n'JPEG'\n```", "```py\n>>> exif_info_1 = {TAGS.get(tag, tag): value \n                   for tag, value in image1._getexif().items()}\n>>> exif_info_1['Model']\n'iPhone X'\n>>> exif_info_1['LensModel']\n'iPhone X back dual camera 4mm f/1.8'\n>>> exif_info_1['DateTimeOriginal']\n'2018:04:21 12:07:55'\n```", "```py\n>>> image2 = Image.open('photo-dublin-a2.png')\n>>> image2.height\n2630\n>>> image2.width\n3943\n>>> image2.format\n'PNG'\n>>> xmp_info = xmltodict.parse(image2.info['XML:com.adobe.xmp'])\n```", "```py\n>>> rdf_info_2 = xmp_info['x:xmpmeta']['rdf:RDF']['rdf:Description']\n>>> rdf_info_2['tiff:Model']\n'iPhone X'\n>>> rdf_info_2['exifEX:LensModel']\n'iPhone X back dual camera 4mm f/1.8'\n>>> rdf_info_2['xmp:CreateDate']\n'2018-04-21T12:07:55'\n```", "```py\n>>> gps_info_1 = {GPSTAGS.get(tag, tag): value \n                  for tag, value in exif_info_1['GPSInfo'].items()}\n>>> exif_to_decimal(gps_info_1)\n('N53.34690555555556', 'W6.247797222222222')\n>>> rdf_to_decimal(rdf_info_2)\n('N53.346905', 'W6.247796666666667')\n```", "```py\n>>> image3 = Image.open('photo-dublin-b.png')\n>>> xmp_info = xmltodict.parse(image3.info['XML:com.adobe.xmp'])\n>>> rdf_info_3 = xmp_info['x:xmpmeta']['rdf:RDF']['rdf:Description']\n>>> rdf_info_3['xmp:CreateDate']\n'2018-03-08T18:16:57'\n>>> rdf_to_decimal(rdf_info_3)\n('N53.34984166666667', 'W6.260388333333333')\n```", "```py\n>>> from PIL import Image\n>>> import pytesseract\n>>> pytesseract.image_to_string(Image.open('photo-text.jpg'))\n'Automate!'\n```", "```py\n>>> >>> pytesseract.image_to_string(Image.open('photo-dublin-a-text.jpg'))\n'\ufb02\\n\\nAutomat'\n```", "```py\n>>> echo \"PyPDF2==1.26.0\" >> requirements.txt\n>>> pip install -r requirements.txt\n```", "```py\n>>> from PyPDF2 import PdfFileReader\n```", "```py\n>>> file = open('document-1.pdf', 'rb')\n>>> document = PdfFileReader(file)\n```", "```py\n>>> document.numPages\n3\n>>> document.isEncrypted\nFalse\n```", "```py\n>>> document.documentInfo['/CreationDate']\n\"D:20180624111518Z00'00'\"\n>>> document.documentInfo['/Producer']\n'Mac OS X 10.13.5 Quartz PDFContext'\n```", "```py\n>>> document.pages[0].extractText()\n'!A VERY IMPORTANT DOCUMENT \\nBy James McCormac CEO Loose Seal Inc '\n```", "```py\n>>> document.pages[1].extractText()\n'\"!This is an example of a test document that is stored in PDF format. It contains some \\nsentences to describe what it is and the it has lore ipsum text.\\n!\"\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. ...$'\n```", "```py\n>>> file.close()\n>>> file = open('document-2.pdf', 'rb')\n>>> document = PdfFileReader(file)\n```", "```py\n>>> document.isEncrypted\nTrue\n>>> document.numPages\n...\nPyPDF2.utils.PdfReadError: File has not been decrypted\n```", "```py\n>>> document.decrypt('automate')\n1\n>>> document.numPages\n3\n>>> document.pages[0].extractText()\n'!A VERY IMPORTANT DOCUMENT \\nBy James McCormac CEO Loose Seal Inc ' \n```", "```py\n>>> file.close()\n```", "```py\n$ qpdf --decrypt --password=PASSWORD encrypted.pdf output-decrypted.pdf\n```", "```py\n>>> echo \"python-docx==0.8.6\" >> requirements.txt\n>>> pip install -r requirements.txt\n```", "```py\n>> import docx\n```", "```py\n>>> doc = docx.Document('document-1.docx')\n```", "```py\n>> doc.core_properties.title\n'A very important document'\n>>> doc.core_properties.keywords\n'lorem ipsum'\n>>> doc.core_properties.modified\ndatetime.datetime(2018, 6, 24, 15, 1, 7)\n```", "```py\n>>> len(doc.paragraphs)\n58\n```", "```py\n>>> for index, paragraph in enumerate(doc.paragraphs):\n...     if paragraph.text:\n...         print(index, paragraph.text)\n...\n30 A VERY IMPORTANT DOCUMENT\n31 By James McCormac\n32 CEO Loose Seal Inc\n34\n...\n56 TITLE 2\n57 ...\n```", "```py\n>>> doc.paragraphs[30].text\n'A VERY IMPORTANT DOCUMENT'\n>>> doc.paragraphs[31].text\n'By James McCormac'\n```", "```py\n>>> doc.paragraphs[30].runs[0].italic\n>>> doc.paragraphs[30].runs[0].bold\nTrue\n>>> doc.paragraphs[31].runs[0].bold\n>>> doc.paragraphs[31].runs[0].italic\nTrue\n```", "```py\n>>> [run.text for run in doc.paragraphs[48].runs]\n['This is an example of a test document that is stored in ', 'Word', ' format', '. It contains some ', 'sentences', ' to describe what it is and it has ', 'lore', 'm', ' ipsum', ' text.']\n>>> run1 = doc.paragraphs[48].runs[1]\n>>> run1.text\n'Word'\n>>> run1.bold\nTrue\n>>> run2 = doc.paragraphs[48].runs[8]\n>>> run2.text\n' ipsum'\n>>> run2.italic\nTrue\n```", "```py\n>>> run2.font.cs_italic\nTrue\n>>> run2.font.size\n152400\n>>> run2.font.small_caps\n```", "```py\nbeautifulsoup4==4.6.0\nPillow==5.1.0\nPyPDF2==1.26.0\npython-docx==0.8.6\n```", "```py\n\u251c\u2500\u2500 dir\n\u2502   \u251c\u2500\u2500 file1.txt\n\u2502   \u251c\u2500\u2500 file2.txt\n\u2502   \u251c\u2500\u2500 file6.pdf\n\u2502   \u2514\u2500\u2500 subdir\n\u2502       \u251c\u2500\u2500 file3.txt\n\u2502       \u251c\u2500\u2500 file4.txt\n\u2502       \u2514\u2500\u2500 file5.pdf\n\u251c\u2500\u2500 document-1.docx\n\u251c\u2500\u2500 document-1.pdf\n\u251c\u2500\u2500 document-2-1.pdf\n\u251c\u2500\u2500 document-2.pdf\n\u251c\u2500\u2500 example_iso.txt\n\u251c\u2500\u2500 example_output_iso.txt\n\u251c\u2500\u2500 example_utf8.txt\n\u251c\u2500\u2500 top_films.csv\n\u2514\u2500\u2500 zen_of_python.txt\n```", "```py\n$ python scan.py -h\nusage: scan.py [-h] [-w W]\n\noptional arguments:\n -h, --help show this help message and exit\n -w W Word to search\n```", "```py\n$ python scan.py -w the\n>>> Word found in ./document-1.pdf\n>>> Word found in ./top_films.csv\n>>> Word found in ./zen_of_python.txt\n>>> Word found in ./dir/file6.pdf\n>>> Word found in ./dir/subdir/file5.pdf\n```", "```py\n$ python scan.py -w lorem\n>>> Word found in ./document-1.docx\n>>> Word found in ./document-1.pdf\n>>> Word found in ./dir/file6.pdf\n>>> Word found in ./dir/subdir/file5.pdf\n```", "```py\n$ python scan.py -w 20\u00a3\n>>> Word found in ./example_iso.txt\n>>> Word found in ./example_output_iso.txt\n```", "```py\n$ python scan.py -w BETTER\n>>> Word found in ./zen_of_python.txt\n```"]