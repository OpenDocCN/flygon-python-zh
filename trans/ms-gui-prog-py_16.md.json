["```py\n#version 120\n```", "```py\nattribute highp vec4 vertex;\nuniform highp mat4 matrix;\nattribute lowp vec4 color_attr;\nvarying lowp vec4 color;\n```", "```py\nvoid main(void)\n{\n  gl_Position = matrix * vertex;\n  color = color_attr;\n}\n```", "```py\n#version 120\n\nvarying lowp vec4 color;\n\nvoid main(void)\n{\n  gl_FragColor = color;\n}\n```", "```py\n        self.resize(800, 600)\n        main = qtw.QWidget()\n        self.setCentralWidget(main)\n        main.setLayout(qtw.QVBoxLayout())\n        oglw = GlWidget()\n        main.layout().addWidget(oglw)\n```", "```py\nclass GlWidget(qtw.QOpenGLWidget):\n    \"\"\"A widget to display our OpenGL drawing\"\"\"\n```", "```py\n    def initializeGL(self):\n        super().initializeGL()\n        gl_context = self.context()\n        version = qtg.QOpenGLVersionProfile()\n        version.setVersion(2, 1)\n        self.gl = gl_context.versionFunctions(version)\n```", "```py\n        self.gl.glEnable(self.gl.GL_DEPTH_TEST)\n        self.gl.glDepthFunc(self.gl.GL_LESS)\n        self.gl.glEnable(self.gl.GL_CULL_FACE)\n```", "```py\n        self.program = qtg.QOpenGLShaderProgram()\n        self.program.addShaderFromSourceFile(\n            qtg.QOpenGLShader.Vertex, 'vertex_shader.glsl')\n        self.program.addShaderFromSourceFile(\n            qtg.QOpenGLShader.Fragment, 'fragment_shader.glsl')\n        self.program.link()\n```", "```py\n        self.vertex_location = self.program.attributeLocation('vertex')\n        self.matrix_location = self.program.uniformLocation('matrix')\n        self.color_location = self.program.attributeLocation('color_attr')\n```", "```py\n        self.view_matrix = qtg.QMatrix4x4()\n```", "```py\n        self.view_matrix.perspective(\n            45,  # Angle\n            self.width() / self.height(),  # Aspect Ratio\n            0.1,  # Near clipping plane\n            100.0  # Far clipping plane\n        )\n```", "```py\n        self.view_matrix.translate(0, 0, -5)\n```", "```py\n    def paintGL(self):\n        self.gl.glClearColor(0.1, 0, 0.2, 1)\n        self.gl.glClear(\n            self.gl.GL_COLOR_BUFFER_BIT | self.gl.GL_DEPTH_BUFFER_BIT)\n        self.program.bind()\n```", "```py\n        front_vertices = [\n            qtg.QVector3D(0.0, 1.0, 0.0),  # Peak\n            qtg.QVector3D(-1.0, 0.0, 0.0),  # Bottom left\n            qtg.QVector3D(1.0, 0.0, 0.0)  # Bottom right\n            ]\n```", "```py\n        face_colors = (\n            qtg.QColor('red'),\n            qtg.QColor('orange'),\n            qtg.QColor('yellow'),\n        )\n```", "```py\n    def qcolor_to_glvec(self, qcolor):\n        return qtg.QVector3D(\n            qcolor.red() / 255,\n            qcolor.green() / 255,\n            qcolor.blue() / 255\n        )\n```", "```py\n        gl_colors = [\n            self.qcolor_to_glvec(color)\n            for color in face_colors\n        ]\n```", "```py\n        self.program.setUniformValue(\n            self.matrix_location, self.view_matrix)\n```", "```py\n        self.program.setAttributeValue(\n            self.color_location, gl_colors[0])\n```", "```py\n        self.program.enableAttributeArray(self.vertex_location)\n        self.program.setAttributeArray(\n            self.vertex_location, front_vertices)\n        self.program.enableAttributeArray(self.color_location)\n        self.program.setAttributeArray(self.color_location, gl_colors)\n```", "```py\n        self.gl.glDrawArrays(self.gl.GL_TRIANGLES, 0, 3)\n```", "```py\n        back_vertices = [\n            qtg.QVector3D(x.toVector2D(), -0.5)\n            for x in front_vertices]\n```", "```py\n        self.program.setAttributeArray(\n            self.vertex_location, reversed(back_vertices))\n        self.gl.glDrawArrays(self.gl.GL_TRIANGLES, 0, 3)\n```", "```py\n        sides = [(0, 1), (1, 2), (2, 0)]\n        side_vertices = list()\n        for index1, index2 in sides:\n            side_vertices += [\n                front_vertices[index1],\n                back_vertices[index1],\n                back_vertices[index2],\n                front_vertices[index2]\n            ]\n```", "```py\n        side_colors = [\n            qtg.QColor('blue'),\n            qtg.QColor('purple'),\n            qtg.QColor('cyan'),\n            qtg.QColor('magenta'),\n        ]\n        gl_colors = [\n            self.qcolor_to_glvec(color)\n            for color in side_colors\n        ] * 3\n```", "```py\n        self.program.setAttributeArray(self.color_location, gl_colors)\n        self.program.setAttributeArray(self.vertex_location, side_vertices)\n        self.gl.glDrawArrays(self.gl.GL_QUADS, 0, len(side_vertices))\n```", "```py\n        self.program.disableAttributeArray(self.vertex_location)\n        self.program.disableAttributeArray(self.color_location)\n        self.program.release()\n```", "```py\n        btn_layout = qtw.QHBoxLayout()\n        main.layout().addLayout(btn_layout)\n        for direction in ('none', 'left', 'right', 'up', 'down'):\n            button = qtw.QPushButton(\n                direction,\n                autoExclusive=True,\n                checkable=True,\n                clicked=getattr(oglw, f'spin_{direction}'))\n            btn_layout.addWidget(button)\n        zoom_layout = qtw.QHBoxLayout()\n        main.layout().addLayout(zoom_layout)\n        zoom_in = qtw.QPushButton('zoom in', clicked=oglw.zoom_in)\n        zoom_layout.addWidget(zoom_in)\n        zoom_out = qtw.QPushButton('zoom out', clicked=oglw.zoom_out)\n        zoom_layout.addWidget(zoom_out)\n```", "```py\n        self.rotation = [0, 0, 0, 0]\n```", "```py\n        self.view_matrix.rotate(*self.rotation)\n```", "```py\n    def spin_none(self):\n        self.rotation = [0, 0, 0, 0]\n\n    def spin_left(self):\n        self.rotation = [-1, 0, 1, 0]\n\n    def spin_right(self):\n        self.rotation = [1, 0, 1, 0]\n\n    def spin_up(self):\n        self.rotation = [1, 1, 0, 0]\n\n    def spin_down(self):\n        self.rotation = [-1, 1, 0, 0]\n```", "```py\n        self.update()\n```", "```py\n    def zoom_in(self):\n        self.view_matrix.scale(1.1, 1.1, 1.1)\n\n    def zoom_out(self):\n        self.view_matrix.scale(.9, .9, .9)\n```", "```py\n   #version 2.1\n\n   attribute highp vec4 vertex;\n\n   void main (void)\n   {\n   gl_Position = vertex;\n   }\n```", "```py\n   attribute highp vec4 value1;\n   varying highp vec3 x[4];\n   void main(void)\n   {\n     x[0] = vec3(sin(value1[0] * .4));\n     x[1] = vec3(cos(value1[1]));\n     gl_Position = value1;\n     x[2] = vec3(10 * x[0])\n   }\n```", "```py\n   attribute highp vec4 coordinates;\n   uniform highp mat4 matrix1;\n\n   void main(void){\n     gl_Position = matrix1 * coordinates;\n   }\n```", "```py\n   matrix = qtg.QMatrix4x4()\n   matrix.perspective(60, 4/3, 2, 10)\n   matrix.translate(1, -1, -4)\n   matrix.rotate(45, 1, 0, 0)\n```"]