["```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import matplotlib.pyplot as plt\n```", "```py\n>>> DATA = (\n...    ('Q1 2017', 100),\n...    ('Q2 2017', 150),\n...    ('Q3 2017', 125),\n...    ('Q4 2017', 175),\n... )\n```", "```py\n>>> POS = list(range(len(DATA)))\n>>> VALUES = [value for label, value in DATA]\n>>> LABELS = [label for label, value in DATA]\n```", "```py\n>>> plt.bar(POS, VALUES)\n>>> plt.xticks(POS, LABELS)\n>>> plt.ylabel('Sales')\n```", "```py\n>>> plt.show()\n```", "```py\n>>> from matplotlib.ticker import FuncFormatter\n\n>>> def value_format(value, position):\n...    return '$ {}M'.format(int(value))\n\n>>> axes = plt.gca()\n>>> axes.yaxis.set_major_formatter(FuncFormatter(value_format))\n```", "```py\n>>> plt.bar(POS, VALUES, color='xkcd:moss green')\n```", "```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import matplotlib.pyplot as plt\n```", "```py\n>>> DATA = (\n...     ('Q1 2017', 100, 0),\n...     ('Q2 2017', 105, 15),\n...     ('Q3 2017', 125, 40),\n...     ('Q4 2017', 115, 80),\n... )\n```", "```py\n>>> POS = list(range(len(DATA)))\n>>> VALUESA = [valueA for label, valueA, valueB in DATA]\n>>> VALUESB = [valueB for label, valueA, valueB in DATA]\n>>> LABELS = [label for label, value1, value2 in DATA]\n```", "```py\n>>> plt.bar(POS, VALUESB)\n>>> plt.bar(POS, VALUESA, bottom=VALUESB)\n>>> plt.ylabel('Sales')\n>>> plt.xticks(POS, LABELS)\n```", "```py\n>>> plt.show()\n```", "```py\n>>> VALUESA = [100 * valueA / (valueA + valueB) for label, valueA, valueB in DATA]\n>>> VALUESB = [100 * valueB / (valueA + valueB) for label, valueA, valueB in DATA]\n```", "```py\n>>> WIDTH = 0.3\n>>> plt.bar([p - WIDTH / 2 for p in POS], VALUESA, width=WIDTH)\n>>> plt.bar([p + WIDTH / 2 for p in POS], VALUESB, width=WIDTH)\n```", "```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import matplotlib.pyplot as plt\n```", "```py\n>>> DATA = (\n...     ('Common', 100),\n...     ('Premium', 75),\n...     ('Luxurious', 50),\n...     ('Extravagant', 20),\n... )\n```", "```py\n>>> VALUES = [value for label, value in DATA]\n>>> LABELS = [label for label, value in DATA]\n```", "```py\n>>> plt.pie(VALUES, labels=LABELS, autopct='%1.1f%%')\n>>> plt.gca().axis('equal')\n```", "```py\n>>> plt.show()\n```", "```py\n>>> plt.pie(VALUES, labels=LABELS, startangle=90, counterclock=False)\n```", "```py\n>>> from matplotlib.ticker import FuncFormatter\n\n>>> total = sum(value for label, value in DATA)\n>>> BY_VALUE = {int(100 * value / total): value for label, value in DATA}\n\n>>> def value_format(percent, **kwargs):\n...     value = BY_VALUE[int(percent)]\n...     return '{}'.format(value)\n```", "```py\n>>> explode = (0, 0, 0.1, 0)\n>>> plt.pie(VALUES, labels=LABELS, explode=explode, autopct=value_format,\n            startangle=90, counterclock=False)\n```", "```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import matplotlib.pyplot as plt\n```", "```py\n>>> DATA = (\n...     ('Q1 2017', 100, 5),\n...     ('Q2 2017', 105, 15),\n...     ('Q3 2017', 125, 40),\n...     ('Q4 2017', 115, 80),\n... )\n```", "```py\n>>> POS = list(range(len(DATA)))\n>>> VALUESA = [valueA for label, valueA, valueB in DATA]\n>>> VALUESB = [valueB for label, valueA, valueB in DATA]\n>>> LABELS = [label for label, value1, value2 in DATA]\n```", "```py\n>>> plt.plot(POS, VALUESA, 'o-')\n>>> plt.plot(POS, VALUESB, 'o-')\n>>> plt.ylabel('Sales')\n>>> plt.xticks(POS, LABELS)\n```", "```py\n>>> plt.show()\n```", "```py\n>>> POS = [year for year in range(1970, 2013)]\n>>> MOORES = [1000 * (2 ** (i * 0.5)) for i in range(len(POS))]\n>>> plt.plot(POS, MOORES)\n```", "```py\n>>> DATA = (\n...    ('Intel 4004', 2_300, 1971),\n...    ('Motorola 68000', 68_000, 1979),\n...    ('Pentium', 3_100_000, 1993),\n...    ('Core i7', 731_000_000, 2008),\n... )\n```", "```py\n>>> data_x = [x for label, y, x in DATA]\n>>> data_y = [y for label, y, x in DATA]\n>>> plt.plot(data_x, data_y, 'v')\n```", "```py\n>>> for label, y, x in DATA:\n>>>    plt.text(x, y, label)\n```", "```py\n>>> plt.gca().grid()\n>>> plt.yscale('log')\n```", "```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import csv\n>>> import matplotlib.pyplot as plt\n>>> from matplotlib.ticker import FuncFormatter\n```", "```py\n>>> with open('scatter.csv') as fp:\n...    reader = csv.reader(fp)\n...    data = list(reader)\n```", "```py\n>>> data_x = [float(x) for x, y in data]\n>>> data_y = [float(y) for x, y in data]\n>>> plt.scatter(data_x, data_y)\n```", "```py\n>>> def format_minutes(value, pos):\n...     return '{}m'.format(int(value))\n>>> def format_dollars(value, pos):\n...     return '${}'.format(value)\n>>> plt.gca().xaxis.set_major_formatter(FuncFormatter(format_minutes))\n>>> plt.xlabel('Time in website')\n>>> plt.gca().yaxis.set_major_formatter(FuncFormatter(format_dollars))\n>>> plt.ylabel('Spending')\n```", "```py\n>>> plt.show()\n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> import random\n>>> NUM_POINTS = 100\n>>> COLOR_SCALE = ['#FF0000', '#FFFF00', '#FFFF00', '#7FFF00', '#00FF00']\n>>> data_x = [random.random() for _ in range(NUM_POINTS)]\n>>> data_y = [random.random() for _ in range(NUM_POINTS)]\n>>> size = [(50 * random.random()) ** 2 for _ in range(NUM_POINTS)]\n>>> color = [random.choice(COLOR_SCALE) for _ in range(NUM_POINTS)]\n>>> plt.scatter(data_x, data_y, s=size, c=color, alpha=0.5)\n>>> plt.show()\n```", "```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ echo \"Fiona==1.7.13\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> import matplotlib.cm as cm\n>>> import fiona\n```", "```py\n>>> COUNTRIES_POPULATION = {\n...     'Spain': 47.2,\n...     'Portugal': 10.6,\n...     'United Kingdom': 63.8,\n...     'Ireland': 4.7,\n...     'France': 64.9,\n...     'Italy': 61.1,\n...     'Germany': 82.6,\n...     'Netherlands': 16.8,\n...     'Belgium': 11.1,\n...     'Denmark': 5.6,\n...     'Slovenia': 2,\n...     'Austria': 8.5,\n...     'Luxembourg': 0.5,\n...     'Andorra': 0.077,\n...     'Switzerland': 8.2,\n...     'Liechtenstein': 0.038,\n... }\n>>> MAX_POPULATION = max(COUNTRIES_POPULATION.values())\n>>> MIN_POPULATION = min(COUNTRIES_POPULATION.values())\n```", "```py\n>>> colormap = cm.get_cmap('Greens')\n>>> COUNTRY_COLOUR = {\n...     country_name: colormap(\n...         (population - MIN_POPULATION) / (MAX_POPULATION - MIN_POPULATION)\n...     )\n...     for country_name, population in COUNTRIES_POPULATION.items()\n... }\n```", "```py\n>>> with fiona.open('europe.geojson') as fd:\n>>>     full_data = [data for data in full_data\n...                  if data['properties']['NAME'] in COUNTRIES_POPULATION]\n```", "```py\n>>> for data in full_data:\n...     country_name = data['properties']['NAME']\n...     color = COUNTRY_COLOUR[country_name]\n...     geo_type = data['geometry']['type']\n...     if geo_type == 'Polygon':\n...         data_x = [x for x, y in data['geometry']['coordinates'][0]]\n...         data_y = [y for x, y in data['geometry']['coordinates'][0]]\n...         plt.fill(data_x, data_y, c=color)\n...     elif geo_type == 'MultiPolygon':\n...         for coordinates in data['geometry']['coordinates']:\n...             data_x = [x for x, y in coordinates[0]]\n...             data_y = [y for x, y in coordinates[0]]\n...             plt.fill(data_x, data_y, c=color)\n```", "```py\n>>> plt.show()\n```", "```py\n    long, lat = data['properties']['LON'], data['properties']['LAT']\n    iso3 = data['properties']['ISO3']\n    plt.text(long, lat, iso3, horizontalalignment='center')\n```", "```py\n>>> axes = plt.gca()\n>>> axes.set_aspect('equal', adjustable='box')\n```", "```py\n>>> plt.xticks([])\n>>> plt.yticks([])\n>>> axes = plt.gca()\n>>> axes.set_facecolor('xkcd:light blue')\n```", "```py\n plt.fill(data_x, data_y, c=color)\n plt.plot(data_x, data_y, c='black', linewidth=0.2)\n```", "```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import matplotlib.pyplot as plt\n```", "```py\n>>> LEGEND = ('ProductA', 'ProductB', 'ProductC')\n>>> DATA = (\n...     ('Q1 2017', 100, 30, 3),\n...     ('Q2 2017', 105, 32, 15),\n...     ('Q3 2017', 125, 29, 40),\n...     ('Q4 2017', 115, 31, 80),\n... )\n```", "```py\n>>> POS = list(range(len(DATA)))\n>>> VALUESA = [valueA for label, valueA, valueB, valueC in DATA]\n>>> VALUESB = [valueB for label, valueA, valueB, valueC in DATA]\n>>> VALUESC = [valueC for label, valueA, valueB, valueC in DATA]\n>>> LABELS = [label for label, valueA, valueB, valueC in DATA]\n```", "```py\n>>> WIDTH = 0.2\n>>> plt.bar([p - WIDTH for p in POS], VALUESA, width=WIDTH)\n>>> plt.bar([p for p in POS], VALUESB, width=WIDTH)\n>>> plt.bar([p + WIDTH for p in POS], VALUESC, width=WIDTH)\n>>> plt.ylabel('Sales')\n>>> plt.xticks(POS, LABELS)\n```", "```py\n>>> plt.annotate('400% growth', xy=(1.2, 18), xytext=(1.3, 40),\n                 horizontalalignment='center',\n                 arrowprops=dict(facecolor='black', shrink=0.05))\n```", "```py\n>>> plt.legend(LEGEND)\n```", "```py\n>>> plt.show()\n```", "```py\n>>> valueA = plt.bar([p - WIDTH for p in POS], VALUESA, width=WIDTH)\n>>> valueB = plt.bar([p for p in POS], VALUESB, width=WIDTH)\n>>> valueC = plt.bar([p + WIDTH for p in POS], VALUESC, width=WIDTH)\n>>> plt.legend((valueC, valueB, valueA), LEGEND)\n```", "```py\n>>> plt.legend(LEGEND, title='Products', bbox_to_anchor=(1, 0.8))\n>>> plt.subplots_adjust(right=0.80)\n```", "```py\nplt.annotate('400% growth', xy=(1.2, 18), xytext=(1.3, 40),\n             horizontalalignment='center',\n             arrowprops={'facecolor': 'black',\n                         'arrowstyle': \"fancy\",\n                         'connectionstyle': \"angle3\",\n                         })\n```", "```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import matplotlib.pyplot as plt\n```", "```py\n>>> DATA = (\n...  ('Q1 2017', 100, 3000, 3),\n...  ('Q2 2017', 105, 3200, 5),\n...  ('Q3 2017', 125, 2900, 7),\n...  ('Q4 2017', 115, 3100, 3),\n... )\n```", "```py\n>>> POS = list(range(len(DATA)))\n>>> VALUESA = [valueA for label, valueA, valueB, valueC in DATA]\n>>> VALUESB = [valueB for label, valueA, valueB, valueC in DATA]\n>>> VALUESC = [valueC for label, valueA, valueB, valueC in DATA]\n>>> LABELS = [label for label, valueA, valueB, valueC in DATA]\n```", "```py\n>>> plt.subplot(2, 1, 1)\n```", "```py\n>>> valueA = plt.bar(POS, VALUESA)\n>>> plt.ylabel('Sales A')\n```", "```py\n>>> plt.twinx()\n>>> valueB = plt.plot(POS, VALUESB, 'o-', color='red')\n>>> plt.ylabel('Sales B')\n>>> plt.xticks(POS, LABELS)\n```", "```py\n>>> plt.subplot(2, 1, 2)\n>>> plt.plot(POS, VALUESC)\n>>> plt.gca().set_ylim(ymin=0)\n>>> plt.xticks(POS, LABELS)\n```", "```py\n>>> plt.show()\n```", "```py\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import matplotlib.pyplot as plt\n```", "```py\n>>> DATA = (\n...    ('Q1 2017', 100),\n...    ('Q2 2017', 150),\n...    ('Q3 2017', 125),\n...    ('Q4 2017', 175),\n... )\n>>> POS = list(range(len(DATA)))\n>>> VALUES = [value for label, value in DATA]\n>>> LABELS = [label for label, value in DATA]\n```", "```py\n>>> plt.bar(POS, VALUES)\n>>> plt.xticks(POS, LABELS)\n>>> plt.ylabel('Sales')\n```", "```py\n>>> plt.savefig('data.png')\n```", "```py\n>>> plt.savefig('data.png', dpi=72)\n```"]