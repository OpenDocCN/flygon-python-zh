- en: Controlling a Servo with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python控制舵机
- en: Analog meters and instrumentation were the only ways to display data prior to
    the rise of digital technologies. Once the move was made to digital, analog meters
    fell out of vogue. Generations that grew up learning to tell the time on an analog
    clock may suddenly find this skill to be out of date, as digital displays of time
    have become the norm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字技术兴起之前，模拟仪表和仪器是显示数据的唯一方式。一旦转向数字技术，模拟仪表就不再流行。在模拟时钟上学习报时的一代人可能会突然发现这项技能已经过时，因为数字显示时间已经成为常态。
- en: In this chapter, we will bridge the gap between the digital and analog worlds
    by changing the position of a servo motor based on a digital value.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过根据数字值改变舵机的位置来弥合数字世界和模拟世界之间的差距。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Wiring up a servo motor to the Raspberry Pi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将舵机连接到树莓派
- en: Controlling the servo through the command line
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过命令行控制舵机
- en: Writing a Python program to control the servo
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个Python程序来控制舵机
- en: Knowledge required to complete this chapter
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成本章所需的知识
- en: The reader will need a working knowledge of the Python programming language
    to complete this chapter. Knowledge of using a simple breadboard to connect components
    is also a must.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 读者需要对Python编程语言有一定的了解才能完成本章。还必须了解使用简单的面包板连接组件。
- en: Project overview
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this project, we will wire up a servo motor and LED, and control it using
    the `GPIO Zero` library. We will start by designing the circuit in Fritzing, and
    then we will assemble it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将连接一个舵机和LED，并使用`GPIO Zero`库来控制它。我们将首先在Fritzing中设计电路，然后进行组装。
- en: We will start controlling the servo using Python shell.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始使用Python shell来控制舵机。
- en: Finally, we will expand on this knowledge by creating a Python class that will
    turn the servo motor based on a percentage amount, and turn on, turn off, or flash
    the LED based on a number passed to the class.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过创建一个Python类来扩展这些知识，该类将根据传递给类的数字打开、关闭或闪烁LED，并根据百分比量来转动舵机。
- en: This project should take about 2 hours to complete.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目应该需要大约2个小时来完成。
- en: Getting started
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个项目需要以下物品：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派3型号（2015年或更新型号）
- en: A USB power supply
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB电源适配器
- en: A computer monitor
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机显示器
- en: A USB keyboard
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB键盘
- en: A USB mouse
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB鼠标
- en: A small servo motor
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个小型舵机
- en: A breadboard
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板
- en: A LED (any color)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED（任何颜色）
- en: Jumper wires for the breadboard
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板的跳线
- en: Wiring up a servo motor to the Raspberry Pi
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将舵机连接到树莓派
- en: This project involves wiring up a servo motor to our Raspberry Pi. Many people
    confuse servo motors with stepper and DC motors. Let's take a look at the differences
    between these types of motors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目涉及将舵机连接到我们的树莓派。许多人将舵机与步进电机和直流电机混淆。让我们来看看这些类型的电机之间的区别。
- en: Stepper motors
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步进电机
- en: Stepper motors are brushless DC electrical motors that move a full rotation
    of equal steps. The position of the motor is controlled without the use of a feedback
    system (open-loop system). This makes stepper motors relatively inexpensive and
    popular for robotics, 3-D printers, and CNC-type applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 步进电机是无刷直流电动机，可以移动等步长的完整旋转。电机的位置是在没有使用反馈系统（开环系统）的情况下控制的。这使得步进电机相对廉价，并且在机器人、3D打印机和数控机床等应用中很受欢迎。
- en: 'The following is a crude diagram of the internal workings of a stepper motor:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是步进电机内部工作的粗略图示：
- en: '![](assets/35ada15a-697a-46e7-9680-659725d49243.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/35ada15a-697a-46e7-9680-659725d49243.jpg)'
- en: By turning on and off the coils **A** and **B** in sequence, the **Permanent
    Magnet** (which is attached to the shaft of the motor) is spun. Precise steps
    are used, allowing precise control of the motor, as the number of steps may be
    controlled easily.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按顺序打开和关闭线圈A和B，可以旋转连接到电机轴的永磁体。使用精确的步骤，可以精确控制电机，因为步数可以轻松控制。
- en: Stepper motors tend to be heavier and bulkier than other types of small motors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 步进电机往往比其他类型的小型电机更重更笨重。
- en: 'The following photo shows a typical stepper motor used in a 3-D printer:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下照片显示了3D打印机中使用的典型步进电机：
- en: '![](assets/29d7c3f6-9842-4328-aa1e-6d1fac677db1.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/29d7c3f6-9842-4328-aa1e-6d1fac677db1.png)'
- en: DC motors
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直流电机
- en: DC motors are similar to stepper motors, but do not divide motion into equal
    steps. They were the first widely used electrical motors, and are in use in electric
    cars, elevators, and any other application that does not require precise control
    of the position of the motor. DC motors may be brushed or brushless.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 直流电机与步进电机类似，但不会将运动分成相等的步骤。它们是最早被广泛使用的电动机，并且在电动汽车、电梯和任何不需要精确控制电机位置的应用中使用。直流电机可以是刷式或无刷的。
- en: Brushed motors are simpler to operate, but have limitations on **revolutions
    per minute** (**RPM**) and usage life. Brushless motors are more complicated,
    and require electronics for control—for example, the **Electronic Speed Controllers**
    (**ESCs**) used on some drones. Brushless motors may be operated at a much higher
    RPM, and have a longer usage life than brushed motors.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 刷式电机操作起来更简单，但在每分钟转数（RPM）和使用寿命上有限制。无刷电机更复杂，需要电子控制，例如一些无人机上使用的电子调速器（ESC）。无刷电机可以以更高的转速运行，并且比刷式电机有更长的使用寿命。
- en: DC motors have a much shorter response time than stepper motors, and tend to
    be lighter than comparable stepper motors.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 直流电机的响应时间比步进电机短得多，并且比可比较的步进电机更轻。
- en: 'The following is a photo of a typical small brushed DC motor:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是典型的小型刷式直流电机的照片：
- en: '![](assets/a1a836f9-1ba8-4389-a264-e9334868bcba.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a1a836f9-1ba8-4389-a264-e9334868bcba.png)'
- en: Servo motors
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 舵机
- en: Servo motors use a closed-loop feedback mechanism to provide extremely precise
    control of the position of the motor. They are considered a high-performance alternative
    to stepper motors. The range can vary depending on the servo, with some servos
    limited to 180-degree movement while others can move a full 360 degrees.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机利用闭环反馈机制来提供对电机位置的极其精确的控制。它们被认为是步进电机的高性能替代品。范围可以根据舵机的不同而变化，有些舵机限制在180度运动，而其他舵机可以运动360度。
- en: Closed-loop control systems, unlike open-loop control systems, maintain an output
    by measuring the actual condition of the output, and comparing it to the desired
    outcome. Closed-loop control systems are often called feedback control systems,
    as it is this feedback that is used to adjust the condition.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 闭环控制系统与开环控制系统不同，它通过测量输出的实际条件并将其与期望的结果进行比较来维持输出。闭环控制系统通常被称为反馈控制系统，因为正是这种反馈被用来调整条件。
- en: The angle of a servo is determined by pulses passed to the control pin on the
    servo. Different brands of servo have different maximum and minimum values to
    determine the angle of the servo needle.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机的角度由传递到舵机控制引脚的脉冲决定。不同品牌的舵机具有不同的最大和最小值，以确定舵机指针的角度。
- en: 'The following is a diagram to demonstrate the relationship between **p****ulse
    width modulation** (**PWM**) and the position of a 180-degree servo:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个图表，用于演示**脉冲宽度调制**（**PWM**）与180度舵机位置之间的关系：
- en: '![](assets/2f396a7b-6ff8-4927-b78c-9b6e8e46d669.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2f396a7b-6ff8-4927-b78c-9b6e8e46d669.jpg)'
- en: 'The following is a photo of the small servo motor that we will be using for
    our circuit. We are able to connect this servo directly to our Raspberry Pi (this
    may not be possible with larger servos):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在电路中使用的小型舵机的照片。我们可以直接将这个舵机连接到我们的树莓派（较大的舵机可能无法实现）：
- en: '![](assets/f4c4ea4c-ac2d-443e-95c3-adeb4af4fd75.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f4c4ea4c-ac2d-443e-95c3-adeb4af4fd75.png)'
- en: 'The following is a chart of servo color codes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是舵机颜色代码的图表：
- en: '![](assets/d0ff3d63-d318-408e-aa5d-f8b7c7d0e08e.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d0ff3d63-d318-408e-aa5d-f8b7c7d0e08e.png)'
- en: Connecting the servo motor to our Raspberry Pi
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将舵机连接到我们的树莓派
- en: Our circuit will consist of a simple servo and LED.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的电路将由一个简单的舵机和LED组成。
- en: 'The following is the Fritzing diagram of the circuit:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是电路的Fritzing图：
- en: '![](assets/51200b9c-1606-418a-b96b-dfc27c026afe.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/51200b9c-1606-418a-b96b-dfc27c026afe.png)'
- en: 'We connect:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们连接：
- en: The positive power of the servo to the 5V DC supply, and the ground to GND
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 舵机的正电源到5V直流电源，地到GND
- en: The control signal from the servo to GPIO 17
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从舵机到GPIO 17的控制信号
- en: The positive end of the LED to GPIO 14, and the resistor to GND
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED的正极连接到GPIO 14，电阻连接到GND
- en: 'Be sure to use a small servo motor, as larger ones may require more power than
    the Raspberry Pi is able to supply. The circuit should resemble the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 确保使用小型舵机，因为较大的舵机可能需要比树莓派能够提供的更多电力。电路应该类似于以下内容：
- en: '![](assets/02e23687-6fd6-40d8-9f3c-a9d313002c39.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02e23687-6fd6-40d8-9f3c-a9d313002c39.png)'
- en: Control the servo through the command line
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过命令行控制舵机
- en: Now that our servo is connected to our Raspberry Pi, let's write some code at
    the command line to control it. We will use the Raspberry Pi Python library `GPIO
    Zero` to do this.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的舵机已连接到树莓派，让我们在命令行中编写一些代码来控制它。我们将使用树莓派Python库`GPIO Zero`来实现这一点。
- en: 'Load up Thonny and click on Shell:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 加载Thonny并点击Shell：
- en: '![](assets/60473ee5-7d07-4f6d-a96d-697fe870bd5b.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60473ee5-7d07-4f6d-a96d-697fe870bd5b.png)'
- en: 'Type the following in the shell:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Shell中输入以下内容：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After a short delay, the cursor should return. What we have done here is load
    the `servo` object from `gpiozero` into memory. We will assign pin GPIO `17` with
    the following statement:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 短暂延迟后，光标应该返回。我们在这里所做的是将`gpiozero`中的`servo`对象加载到内存中。我们将使用以下语句为引脚GPIO `17`分配：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will now move the servo motor to the minimum (`min`) position. Type the
    following into the command line:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将舵机移动到最小（`min`）位置。在命令行中输入以下内容：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should hear the servo motor moving, and the needle will go to its farthest
    position (if it is not already there).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该听到舵机在移动，指针将移动到最远的位置（如果它还没有在那里）。
- en: 'Let''s move the servo motor to the maximum ( `max`) position with the following
    command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令将舵机移动到最大（`max`）位置：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, move the servo to the middle ( `mid`) position with the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下命令将舵机移动到中间（`mid`）位置：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The servo motor should move to its middle position.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机应该移动到其中间位置。
- en: 'When you place your hand over the servo motor, you may feel a slight jerking
    motion. To temporarily disable control of the servo, type the following into the
    command line and press Enter:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当你把手放在舵机上时，你可能会感到轻微的抽搐运动。要暂时禁用对舵机的控制，请在命令行中输入以下内容并按Enter键：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The jerking motion should stop, and the needle indicator attached to the servo
    should stay in its current position.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 抽搐运动应该停止，附在舵机上的指针指示器应该保持在当前位置。
- en: As we can see, it is very easy to move the servo motor to its minimum, middle,
    and maximum values. But what if we want to have more precise control of the servo?
    For those instances, we may use the value property of the `servo` object. A value
    between `-1` (minimum) and `1` (maximum) can be used to move the servo motor.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，很容易将舵机移动到其最小、中间和最大值。但是如果我们想要更精确地控制舵机怎么办？在这种情况下，我们可以使用`servo`对象的value属性。可以使用介于`-1`（最小）和`1`（最大）之间的值来移动舵机。
- en: 'Type the following into the command line:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中输入以下内容：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `servo` should move to its minimum position. Now, type the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`servo`应该移动到其最小位置。现在，输入以下内容：'
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `servo` should now move to its maximum position. Let''s use the value property
    to indicate weather conditions. Type the following into the command line:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`servo`现在应该移动到其最大位置。让我们使用value属性来指示天气条件。在命令行中输入以下内容：'
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Test the code in the shell with the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Shell中使用以下代码进行测试：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see the following in the shell:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在Shell中看到以下内容：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With our `servo` object and our `weather_conditions` dictionary, we may now
    use the servo motor to indicate the weather conditions physically. Type the following
    into the shell:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的“servo”对象和我们的“weather_conditions”字典，我们现在可以使用伺服电机来物理地指示天气条件。在shell中输入以下内容：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The servo motor should move to the minimum position to indicate that the weather
    conditions are `cloudy`. Now, let''s try `sunny`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机应该移动到最小位置，以指示天气条件为“多云”。现在，让我们尝试“晴朗”：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The servo should move to the maximum position to indicate `sunny` weather conditions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服应该移动到最大位置，以指示“晴朗”的天气条件。
- en: 'For `partly cloudy` and `partly sunny` conditions, use the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“局部多云”和“局部晴朗”的条件，使用以下内容：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Write a Python program to control the servo
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个Python程序来控制伺服
- en: 'Jerry Seinfeld once joked that all we need to know about the weather is: Should
    we bring a coat or not? For the rest of this chapter and the next, we will build
    an analog meter needle dashboard to indicate the wardrobe needed for the weather
    conditions.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 杰瑞·塞范菲尔德曾开玩笑说，我们需要知道天气的全部信息就是：我们是否需要带上外套？在本章和下一章的其余部分中，我们将建立一个模拟仪表针仪表板，以指示天气条件所需的服装。
- en: We will also add an LED that will turn on to indicate that an umbrella is needed,
    and flash to indicate a very bad storm.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加一个LED，用于指示需要雨伞，并闪烁以指示非常恶劣的风暴。
- en: Before we can build the dashboard in [Chapter 6](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml),
    *Working with the Servo Control Code to Control an Analog Device*, we need code
    to control the servo and LED. We will start by creating a class to do just that.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以在[第6章](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml)中构建仪表板之前，我们需要代码来控制伺服和LED。我们将首先创建一个类来实现这一点。
- en: 'This class will set the servo position and LED state on our circuit:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类将在我们的电路上设置伺服位置和LED状态：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE 打开 Thonny
- en: Click on the New icon to create a new file
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件
- en: 'Type the following:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Save the file as `WeatherDashboard.py`
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为“WeatherDashboard.py”
- en: Run the code
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should see the servo move to the middle position, and the LED should turn
    on
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到伺服移动到中间位置，LED应该打开
- en: Experiment with other values and see if you can move the servo to 75% and have
    the LED blink.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试其他值，看看是否可以将伺服移动到75%并使LED闪烁。
- en: 'Let''s take a look at the code. After defining the class, we set GPIO pin values
    for the servo and LED with the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码。在定义类之后，我们使用以下内容为伺服和LED设置了GPIO引脚值：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you saw in the circuit we built, we connected the servo and LED to GPIO `17`
    and GPIO `14`, respectively. `GPIO Zero` allows us to assign GPIO values easily
    without boilerplate code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在我们建立的电路中看到的那样，我们将伺服和LED分别连接到GPIO“17”和GPIO“14”。GPIO Zero允许我们轻松地分配GPIO值，而无需样板代码。
- en: 'In our class initialization method, we create `Servo` and `LED` objects called
    `servo` and `led` respectively:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的类初始化方法中，我们分别创建了名为“servo”和“led”的“Servo”和“LED”对象：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'From here, we call the methods in our class that move the servo and set the
    LED. Let''s look at the first method:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们调用我们类中移动伺服和设置LED的方法。让我们看看第一个方法：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In this method, we simply set the value property in `servo` object. As this
    property only accepts values from `-1` to `1`, and we are passing a value from
    `0` to `100`, we need to convert our `servo_position`. We do that with the following
    method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们只需设置“servo”对象中的值属性。由于此属性仅接受从“-1”到“1”的值，而我们传递的值是从“0”到“100”，因此我们需要将我们的“servo_position”进行转换。我们使用以下方法来实现这一点：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In order to convert a percentage value to a `-1` to `1` scale value, we multiply
    the percentage value by `0.02`, and then subtract `1`. It's easy to verify this
    math by using the percentage value of `50`. The value of `50` represents the middle
    value in a `0` to `100` scale. Multiplying `50` by `0.02` produces the value of
    `1`. Subtracting `1` from this value produces `0`, which is the middle value in
    a `-1` to `1` scale.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将百分比值转换为“-1”到“1”的比例值，我们将百分比值乘以“0.02”，然后减去“1”。通过使用百分比值为“50”来验证这个数学问题是很容易的。值为“50”代表了“0”到“100”比例中的中间值。将“50”乘以“0.02”得到了值为“1”。从这个值中减去“1”得到了“0”，这是“-1”到“1”比例中的中间值。
- en: 'To set the status of the LED (`off`, `on`, or `blink`) we call the following method
    from our initialization method:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置LED的状态（关闭、打开或闪烁），我们从初始化方法中调用以下方法：
- en: '[PRE20]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In `set_led_status`, we set our LED to `off` if the value passed in is `0`,
    `on` if the value is `1`, and `blink` if it is any other value.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在“set_led_status”中，如果传入的值为“0”，我们将LED设置为“关闭”，如果值为“1”，我们将其设置为“打开”，如果是其他值，我们将其设置为“闪烁”。
- en: 'We test out our class with the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用以下代码测试我们的类：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In [Chapter 6](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml), *Working with the
    Servo Control Code to Control an Analog Device*, we will use this class to build
    our analog weather dashboard.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml)中，*使用伺服控制代码控制模拟设备*，我们将使用这个类来构建我们的模拟天气仪表板。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As we can see, bridging the gap between the digital and analog worlds for data
    display is relatively easy using the Raspberry Pi. Its GPIO port allows for easy
    connection to various output devices such as motors and LEDs.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，使用树莓派轻松地将数字世界和模拟世界之间的差距进行数据显示。其GPIO端口允许轻松连接各种输出设备，如电机和LED。
- en: In this chapter, we connected a servo motor and LED, and controlled them using
    Python code. We will expand on this in [Chapter 6](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml),
    Working with the Servo Control code to Control an Analog Device, as we build an
    IoT weather dashboard with an analog meter display.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们连接了一个伺服电机和LED，并使用Python代码对它们进行了控制。我们将在[第6章](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml)中扩展这一点，使用伺服控制代码来控制模拟设备，构建一个带有模拟仪表盘显示的物联网天气仪表板。
- en: Questions
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: True or false? A stepper motor is controlled using an open-loop feedback system.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真还是假？步进电机是使用开环反馈系统控制的。
- en: What type of electric motor would you use if you were building an electric car?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您要建造一辆电动汽车，您会使用什么类型的电动机？
- en: True or false? Servo motors are considered a high-performance alternative to
    stepper motors.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？舵机被认为是步进电机的高性能替代品。
- en: What controls the angle of the servo motor?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是什么控制了舵机的角度？
- en: True or false? DC motors have shorter response times than stepper motors.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？直流电机的响应时间比步进电机短。
- en: Which Python package do we use to control our servo?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪个Python包来控制我们的舵机？
- en: True or false? We are able to control a servo using the Python shell in Thonny.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们能够在Thonny的Python shell中控制舵机。
- en: Which command is used to move the servo to its maximum position?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用什么命令将舵机移动到最大位置？
- en: True or false? We can only move the servo to its minimum, maximum, and middle
    positions.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们只能将舵机移动到最小、最大和中间位置。
- en: How do we convert percentage values to the corresponding values that the `servo`
    object understands in our code?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何将百分比值转换为代码中`servo`对象理解的相应值？
- en: Further reading
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The `GPIO Zero` documentation gives a complete overview of this amazing Raspberry
    Pi Python library. Find out more at [https://gpiozero.readthedocs.io/en/stable/](https://gpiozero.readthedocs.io/en/stable/).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`GPIO Zero`文档提供了对这个令人惊叹的树莓派Python库的完整概述。了解更多信息，请访问[https://gpiozero.readthedocs.io/en/stable/](https://gpiozero.readthedocs.io/en/stable/)。'
