["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# line to allow the plots to be shown in the Jupyter Notebook\n%matplotlib inline\n```", "```py\ndef toss_die():\n\u00a0\u00a0\u00a0\u00a0outcome = np.random.randint(1, 7)\n\u00a0\u00a0\u00a0\u00a0return outcome\n```", "```py\nfor x in range(10):\n\u00a0\u00a0\u00a0\u00a0print(toss_die())\n```", "```py\n6, 2, 6, 5, 1, 3, 3, 6, 6, 5 \n```", "```py\nnp.random.seed(123)\nfor x in range(10):\n\u00a0\u00a0\u00a0\u00a0print(toss_die(), end=', ')\n```", "```py\n6, 3, 5, 3, 2, 4, 3, 4, 2, 2\n```", "```py\nstudents = ['student_' + str(i) for i in range(1,31)]\n```", "```py\nsample_students = np.random.choice(a=students, size=4,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0replace=False)\nsample_students\n```", "```py\narray(['student_16', 'student_11', 'student_19', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'student_26'], dtype='<U10')\n```", "```py\nsample_students2 = np.random.choice(a=students, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size=12, replace=True)\nfor i, s in enumerate(sample_students2):\n\u00a0\u00a0\u00a0\u00a0print(f'Week {i+1}: {s}')\n```", "```py\nWeek 1: student_6\nWeek 2: student_23\nWeek 3: student_4\nWeek 4: student_26\nWeek 5: student_5\nWeek 6: student_30\nWeek 7: student_23\nWeek 8: student_30\nWeek 9: student_11\nWeek 10: student_6\nWeek 11: student_13\nWeek 12: student_5\n```", "```py\n    import numpy as np\n    ```", "```py\n    suits = ['hearts', 'diamonds', 'spades', 'clubs']\n    ranks = ['Ace', '2', '3', '4', '5', '6', '7', '8', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'9', '10', 'Jack', 'Queen', 'King']\n    ```", "```py\n    cards = [rank + '-' + suit for rank in ranks for suit in suits]\n    ```", "```py\n    print(np.random.choice(cards, size=5, replace=False)) \n    ```", "```py\n    ['Ace-clubs' '5-clubs' '7-clubs' '9-clubs' '6-clubs']\n    ```", "```py\n    def deal_hands():\n    \u00a0\u00a0\u00a0\u00a0drawn_cards = np.random.choice(cards, size=10, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0replace=False)\n    \u00a0\u00a0\u00a0\u00a0hand_1 = drawn_cards[:5].tolist()\n    \u00a0\u00a0\u00a0\u00a0hand_2 = drawn_cards[5:].tolist()\n    \u00a0\u00a0\u00a0\u00a0return hand_1, hand_2\n    ```", "```py\n    deal_hands()\n    ```", "```py\n    (['9-spades', 'Ace-clubs', 'Queen-diamonds', '2-diamonds', \n    \u00a0\u00a0'9-diamonds'],\n    \u00a0['Jack-hearts', '8-clubs', '10-clubs', '4-spades', \n    \u00a0\u00a0'Queen-hearts'])\n    ```", "```py\n    def deal_hands2():\n    \u00a0\u00a0\u00a0\u00a0drawn_cards = np.random.choice(cards, size=10, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0replace=True)\n    \u00a0\u00a0\u00a0\u00a0hand_1 = drawn_cards[:5].tolist()\n    \u00a0\u00a0\u00a0\u00a0hand_2 = drawn_cards[5:].tolist()\n    \u00a0\u00a0\u00a0\u00a0return hand_1, hand_2\n    ```", "```py\n    np.random.seed(2)\n    deal_hands2()\n    ```", "```py\n    (['Jack-hearts', '4-clubs', 'Queen-diamonds', '3-hearts', \n    \u00a0\u00a0'6-spades'],\n    \u00a0['Jack-clubs', '5-spades', '3-clubs', 'Jack-hearts', '2-clubs'])\n    ```", "```py\nnp.random.seed(81)\none_million_tosses = np.random.randint(low=1, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0high=7, size=int(1e6))\n```", "```py\none_million_tosses[:10]\n```", "```py\narray([4, 2, 1, 4, 4, 4, 2, 2, 6, 3])\n```", "```py\nN_A_occurs = (one_million_tosses == 2).sum()\nProb_A = N_A_occurs/one_million_tosses.shape[0]\nprint(f'P(A)={Prob_A}')\n```", "```py\nP(A)=0.16595\n```", "```py\nN_B_occurs = (one_million_tosses == 6).sum()\nProb_B = N_B_occurs/one_million_tosses.shape[0]\nprint(f'P(B)={Prob_B}')\n```", "```py\nP(B)=0.166809\n```", "```py\nN_odd_number = (\n\u00a0\u00a0\u00a0\u00a0(one_million_tosses == 1) | \n\u00a0\u00a0\u00a0\u00a0(one_million_tosses == 3) | \n\u00a0\u00a0\u00a0\u00a0(one_million_tosses == 5)).sum()\nProb_C = N_odd_number/one_million_tosses.shape[0]\nprint(f'P(C)={Prob_C}')\n```", "```py\nP(C)=0.501162\n```", "```py\nN_D_occurs = (one_million_tosses < 5).sum()\nProb_D = N_D_occurs/one_million_tosses.shape[0]\nprint(f'P(D)={Prob_D}')\n```", "```py\nP(D)=0.666004\n```", "```py\nnp.random.seed(55)\nnumber_of_tosses = int(1e5)\ndie_1 = np.random.randint(1,7, size=number_of_tosses)\ndie_2 = np.random.randint(1,7, size=number_of_tosses)\nX = die_1 + die_2\n```", "```py\nprint(die_1[:10])\nprint(die_2[:10])\nprint(X[:10])\n```", "```py\n[6 3 1 6 6 6 6 6 4 2]\n[1 2 3 5 1 3 3 6 3 1]\n[7  5  4 11  7  9  9 12  7  3]\n```", "```py\nProb_X_is_10 = (X == 10).sum()/X.shape[0]\nprint(f'P(X = 10) = {Prob_X_is_10}')\n```", "```py\nP(X = 10) = 0.08329\n```", "```py\nProb_X_is_gt_5 = (X > 5).sum()/X.shape[0]\nprint(f'P(X > 5) = {Prob_X_is_gt_5}')\n```", "```py\nP(X > 5) = 0.72197\n```", "```py\nX = pd.Series(X)\n# counts the occurrences of each value\nfreq_of_X_values = X.value_counts()\nfreq_of_X_values.sort_index().plot(kind='bar')\nplt.grid();\n```", "```py\nProb_of_X_values = freq_of_X_values/X.shape[0]\nProb_of_X_values.sort_index().plot(kind='bar')\nplt.grid();\n```", "```py\nnp.random.seed(97)\nten_coins_a_million_times = np.random.randint(0, 2, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size=int(10e6))\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.reshape(-1,10) \n```", "```py\nten_coins_a_million_times[:12, :]\n```", "```py\narray([[0, 1, 1, 1, 1, 1, 0, 1, 1, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 0, 1, 1, 1, 0, 1, 0, 0, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 1, 0, 1, 1, 0, 0, 0, 0, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 0, 1, 1, 0, 1, 0, 0, 1, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 0, 1, 0, 1, 0, 1, 0, 0, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 1, 1, 1, 0, 1, 1, 1, 1, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 1, 1, 1, 0, 1, 0, 1, 0, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 1, 0, 0, 1, 1, 1, 0, 0, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 0, 0, 1, 1, 1, 0, 0, 0, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 0, 1, 1, 1, 0, 0, 0, 1, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 0, 0, 0, 1, 1, 1, 0, 1, 1]])\n```", "```py\nY = ten_coins_a_million_times.sum(axis=1)\n```", "```py\nProb_Y_is_0 = (Y == 0).sum() / Y.shape[0]\nprint(f'P(Y = 0) = {Prob_Y_is_0}')\n```", "```py\nP(Y = 0) = 0.000986\n```", "```py\nY = pd.Series(Y)\n# counts the occurrences of each value\nfreq_of_Y_values = Y.value_counts()\nProb_of_Y_values = freq_of_Y_values/Y.shape[0]\nProb_of_Y_values.sort_index().plot(kind='bar')\nplt.grid();\n```", "```py\nprint(Prob_of_Y_values.loc[[4,5,6]])\nprint(f'P(4<=Y<=6) = {Prob_of_Y_values.loc[[4,5,6]].sum()}')\n```", "```py\n4    0.205283\n5    0.246114\n6    0.205761\ndtype: float64\nP(4<=Y<=6) = 0.657158\n```", "```py\n    import numpy as np\n    ```", "```py\n    def roulette(number_of_games=1):\n\n    \u00a0\u00a0\u00a0\u00a0# generate the Roulette numbers\n    \u00a0\u00a0\u00a0\u00a0roulette_numbers = np.arange(0, 37)\n\n    \u00a0\u00a0\u00a0\u00a0outcome = np.random.choice(a = roulette_numbers, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size = number_of_games,\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0replace = True)\n    \u00a0\u00a0\u00a0\u00a0return outcome\n    ```", "```py\n    def payoff(outcome, units=1):\n    \u00a0\u00a0\u00a0\u00a0# 1\\. Bet m units on the numbers from 19 to 36\n    \u00a0\u00a0\u00a0\u00a0# 2\\. If the outcome of the roulette is any of the \n    \u00a0\u00a0\u00a0\u00a0#    selected numbers, then you win m units\n    \u00a0\u00a0\u00a0\u00a0if outcome > 18:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pay = units\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0# 3\\. If the outcome of the roulette is any number \n    \u00a0\u00a0\u00a0\u00a0#    between 0 and 18 (inclusive) then you lose m units\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pay = -units\n    \u00a0\u00a0\u00a0\u00a0return pay\n    ```", "```py\n    payoff = np.vectorize(payoff)\n    ```", "```py\n    outcomes = roulette(20)\n    payoffs = payoff(outcomes)\n    print(outcomes)\n    print(payoffs)\n    ```", "```py\n    [29 36 11  6 11  6  1 24 30 13  0 35  7 34 30  7 36 32 12 10]\n    [ 1  1 -1 -1 -1 -1 -1  1  1 -1 -1  1 -1  1  1 -1  1  1 -1 -1]\n    ```", "```py\n    number_of_games = int(1e6)\n    outcomes = roulette(number_of_games)\n    payoffs = payoff(outcomes)\n    ```", "```py\n    np.mean(payoffs)\n    ```", "```py\nnp.random.seed(977)\nnp.random.choice(['defective', 'good'], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size=12, p=(0.04, 0.96))\n```", "```py\narray(['good', 'good', 'good', 'good', 'good', 'good', 'good', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'defective', 'good', 'good', 'good', 'good'], dtype='<U9')\n```", "```py\nnp.random.seed(10)\nn_boxes = int(1e6)\nparts_per_box = 12\none_million_boxes = np.random.choice\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0([1, 0], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size=(n_boxes, parts_per_box), \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p=(0.04, 0.96))\n```", "```py\none_million_boxes[:5,:]\n```", "```py\narray([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n```", "```py\n# count defective pieces per box\ndefective_pieces_per_box = one_million_boxes.sum(axis=1)\n# count how many times we observed 0, 1,\u2026, 12 defective pieces\ndefective_pieces_per_box = pd.Series(defective_pieces_per_box)\nfrequencies = defective_pieces_per_box.value_counts()\n# probability distribution\nprobs_Z = frequencies/n_boxes\n```", "```py\nprint(probs_Z.sort_index())\nprobs_Z.sort_index().plot(kind='bar')\nplt.grid()\n```", "```py\n0    0.612402\n1    0.306383\n2    0.070584\n3    0.009630\n4    0.000940\n5    0.000056\n6    0.000004\n7    0.000001\n```", "```py\nimport scipy.stats as stats\nY_rv = stats.binom(\n\u00a0\u00a0\u00a0\u00a0n = 10, # number of coins\n\u00a0\u00a0\u00a0\u00a0p = 0.5 # probability of heads (success)\n)\n```", "```py\ny_values = np.arange(0, 11)\n```", "```py\nY_probs = Y_rv.pmf(y_values) \n```", "```py\nfig, ax = plt.subplots()\nax.bar(y_values, Y_probs)\nax.set_xticks(y_values)\nax.grid()\n```", "```py\nY_rv_df = pd.DataFrame({'Y_simulated_pmf': Prob_of_Y_values,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Y_theoretical_pmf':  Y_probs},\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index=y_values)\nY_rv_df.plot(kind='bar')\nplt.grid();\n```", "```py\n    import numpy as np\n    import scipy.stats as stats\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n    ```", "```py\n    # number of parts per box\n    parts_per_box = 12\n    Z_rv = stats.binom\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(n = parts_per_box,\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p = 0.04 # probability of defective piece (success)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    ```", "```py\n    z_possible_values = np.arange(0, parts_per_box + 1)\n    Z_probs = Z_rv.pmf(z_possible_values)\n    fig, ax = plt.subplots()\n    ax.bar(z_possible_values, Z_probs)\n    ax.set_xticks(z_possible_values)\n    ax.grid();\n    ```", "```py\ngames = pd.read_csv('./data/appstore_games.csv')\noriginal_colums_dict = {x: x.lower().replace(' ','_') \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for x in games.columns}\n# renaming columns\ngames.rename(columns = original_colums_dict, inplace = True)\n```", "```py\ngames['size'] = games['size']/(1e6)\n# replacing the one missing value with the median\ngames['size'] = games['size'].fillna(games['size'].median())\ngames['size'].hist(bins = 50, ec='k');\n```", "```py\n# get the number of games to use as denominator\nnumber_of_games = games['size'].size\n# calculate probabilities\nprob_X_gt_100 = (games['size'] > 100).sum()/number_of_games\nprob_X_bt_100_and_400 = ((games['size'] >= 100) & \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(games['size'] <= 400))\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.sum()/number_of_games\nprob_X_eq_152_53 = (games['size'] == 152.53).sum()/number_of_games\n# print the results\nprint(f'P(X > 100) = {prob_X_gt_100:0.5f}')\nprint(f'P(100 <= X <= 400) = {prob_X_bt_100_and_400:0.5f}')\nprint(f'P(X = 152.53) = {prob_X_eq_152_53:0.5f}')\n```", "```py\nP(X > 100) = 0.33098\nP(100 <= X <= 400) = 0.28306\nP(X = 152.53) = 0.00000\n```", "```py\n# set the mu and sigma parameters of the distribution\nheights_mean = 170\nheights_sd = 10\n# instantiate the random variable object\nheights_rv = stats.norm(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loc = heights_mean, # mean of the distribution\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scale = heights_sd  # standard deviation\n)\n```", "```py\nheights_rv.pdf(175)\n```", "```py\n0.03520653267642\n```", "```py\nvalues = np.linspace(130, 210, num=200)\n```", "```py\nheights_rv_pdf = heights_rv.pdf(values)\nplt.plot(values, heights_rv_pdf)\nplt.grid();\n```", "```py\nsample_heighs = heights_rv.rvs\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(size = 5, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random_state = 998 # similar to np.seed)\nfor i, h in enumerate(sample_heighs):\n\u00a0\u00a0\u00a0\u00a0print(f'Men {i + 1} height: {h:0.1f}')\n```", "```py\nMen 1 height: 171.2\nMen 2 height: 173.3\nMen 3 height: 157.1\nMen 4 height: 164.9\nMen 5 height: 179.1\n```", "```py\n# size of the simulation\nsim_size = int(1e5)\n# simulate the random samples\nsample_heights = heights_rv.rvs\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(size = sim_size,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random_state = 88 # similar to np.seed)\nProb_event = (sample_heights > 190).sum()/sim_size\nprint(f'Probability of a male > 190 cm: {Prob_event:0.5f} \\\n (or {100*Prob_event:0.2f}%)')\n```", "```py\nProbability of a male > 190 cm: 0.02303 (or 2.30%)\n```", "```py\n# parameters of distributions\nheights_means = [170, 170, 175]\nheights_sds = [10, 5, 10]\ncountries = ['Country A', 'Country B', 'Country C']\nheights_rvs = {}\nplotting_values = {}\n# creating the random variables\nfor i, country in enumerate(countries):\n\u00a0\u00a0\u00a0\u00a0heights_rvs[country] = stats.norm(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0loc = heights_means[i], # mean of the distribution\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scale = heights_sds[i]  # standard deviation\n\u00a0\u00a0\u00a0\u00a0)\n```", "```py\n# getting x and y values for plotting the distributions\nfor i, country in enumerate(countries):\n\u00a0\u00a0\u00a0\u00a0x_values = np.linspace(heights_means[i] - 4*heights_sds[i], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0heights_means[i] + 4*heights_sds[i])\n\u00a0\u00a0\u00a0\u00a0y_values = heights_rvs[country].pdf(x_values)\n\u00a0\u00a0\u00a0\u00a0plotting_values[country] = (x_values, y_values)\n\n# plotting the three distributions\nfig, ax = plt.subplots(figsize = (8, 4))\nfor i, country in enumerate(countries):\n\u00a0\u00a0\u00a0\u00a0ax.plot(plotting_values[country][0], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0plotting_values[country][1], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label=country, lw = 2)\n\nax.set_xticks(np.arange(130, 220, 5))\nplt.legend()\nplt.grid();\n```", "```py\nfrom matplotlib.patches import Polygon\ndef func(x):\n\u00a0\u00a0\u00a0\u00a0return heights_rv.pdf(x)\nlower_lim = 160\nupper_lim = 180\nx = np.linspace(130, 210)\ny = func(x)\n```", "```py\nfig, ax = plt.subplots(figsize=(8,4))\nax.plot(x, y, 'blue', linewidth=2)\nax.set_ylim(bottom=0)\n# Make the shaded region\nix = np.linspace(lower_lim, upper_lim)\niy = func(ix)\nverts = [(lower_lim, 0), *zip(ix, iy), (upper_lim, 0)]\npoly = Polygon(verts, facecolor='0.9', edgecolor='0.5')\nax.add_patch(poly)\nax.text(0.5 * (lower_lim + upper_lim), 0.01, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r\"$\\int_{160}^{180} f(x)\\mathrm{d}x$\", \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0horizontalalignment='center', fontsize=15)\nfig.text(0.85, 0.05, '$height$')\nfig.text(0.08, 0.85, '$f(x)$')\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.xaxis.set_ticks_position('bottom')\nax.set_xticks((lower_lim, upper_lim))\nax.set_xticklabels(('$160$', '$180$'))\nax.set_yticks([]);\n```", "```py\n# limits of the integral\nlower_lim = 160\nupper_lim = 180\n# calculating the area under the curve\nProb_X_in_160_180 = heights_rv.cdf(upper_lim) - \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0heights_rv.cdf(lower_lim)\n# print the result\nprint(f'Prob(160 <= X <= 180) = {Prob_X_in_160_180:0.4f}')\n```", "```py\nProb(160 <= X <= 180) = 0.6827\n```", "```py\n# limits of the integral\nlower_lim = 190\nupper_lim = np.Inf # since we are asking X > 190\n# calculating the area under the curve\nProb_X_gt_190 = heights_rv.cdf(upper_lim) - \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0heights_rv.cdf(lower_lim)\n# print the result\nprint(f'Probability of a male > 190 cm: {Prob_X_gt_190:0.5f} \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(or {100*Prob_X_gt_190:0.2f}%)')\n```", "```py\nProbability of a male > 190 cm: 0.02275 (or 2.28%)\n```", "```py\n    import numpy as np\n    import scipy.stats as stats\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n    ```", "```py\n    # producing the normal distribution\n    X_mean = 100\n    X_sd = 15\n    # create the random variable\n    X_rv = stats.norm(loc = X_mean, scale = X_sd)\n    ```", "```py\n    x_values = np.linspace(X_mean - 4 * X_sd, X_mean + 4 * X_sd)\n    y_values = X_rv.pdf(x_values)\n    plt.plot(x_values, y_values, lw=2)\n    plt.grid();\n    ```", "```py\n    Prob_X_gt_80 = X_rv.cdf(np.Inf) - X_rv.cdf(80)\n    print(f'Prob(X >= 80): {Prob_X_gt_80:0.5f} \\\n    (or {100*Prob_X_gt_80:0.2f}%)')\n    ```", "```py\n    Prob(X >= 80): 0.90879 (or 90.88%)\n    ```", "```py\n    proportion_of_admitted = 0.02\n    cut_off = X_rv.ppf(1-proportion_of_admitted)\n    print(f'To admit the top {100*proportion_of_admitted:0.0f}%, \\\n    the cut-off score should be {cut_off:0.1f}')\n    top_percents = np.arange(0.9, 1, 0.01)\n    ```", "```py\n    To admit the top 2%, the cut-off score should be 130.8\n    ```", "```py\n    count    1258.000000\n    mean        0.000996\n    std         0.014591\n    min        -0.092534\n    25%        -0.005956\n    50%         0.000651\n    75%         0.007830\n    max         0.104522\n    Name: returns, dtype: float64\n    ```"]