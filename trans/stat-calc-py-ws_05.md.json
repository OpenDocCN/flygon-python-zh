["```py\ndef my_function(arg1, arg2):\n\u00a0\u00a0\u00a0\u00a0'''Write a function that adds two numbers \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and returns their sum'''\n\u00a0\u00a0\u00a0\u00a0result = arg1 + arg2\n\u00a0\u00a0\u00a0\u00a0return result\n```", "```py\nsummed = my_function(2,9)\nprint(summed)\n```", "```py\n11\n```", "```py\ndef my_sequence(arg1, arg2, n):\n\u00a0\u00a0\u00a0\u00a0'''Write a function that adds two numbers n times and \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prints their sum'''\n\u00a0\u00a0\u00a0\u00a0result = 0\n\u00a0\u00a0\u00a0\u00a0for i in range(n):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = result + arg1 + arg2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(result)\n```", "```py\nmy_sequence(2,9,4)\n```", "```py\n11\n22\n33\n44\n```", "```py\ndef my_sequence(arg1, arg2, n):\n\u00a0\u00a0\u00a0\u00a0'''Write a function that adds two numbers n times \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and prints their sum'''\n\u00a0\u00a0\u00a0\u00a0i = 0\n\u00a0\u00a0\u00a0\u00a0result = 0\n\u00a0\u00a0\u00a0\u00a0while i < n:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = result + arg1 + arg2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(result)\n```", "```py\ndef my_generator(arg1, arg2, n):\n\u00a0\u00a0\u00a0\u00a0'''Write a generator function that adds \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0two numbers n times and prints their sum'''\n\u00a0\u00a0\u00a0\u00a0i = 0\n\u00a0\u00a0\u00a0\u00a0result = 0\n\u00a0\u00a0\u00a0\u00a0while i < n:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = result + arg1 + arg2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield result\n```", "```py\nmy_gen = my_generator(2,9,4)\nnext(my_gen)\n```", "```py\n11\n```", "```py\nnext(my_gen)\n```", "```py\n22\n```", "```py\nnext(my_gen)\n```", "```py\n33\n```", "```py\nnext(my_gen)\n```", "```py\n44\n```", "```py\nnext(my_gen)\nTraceback (most recent call last):\n\u00a0\u00a0\u00a0\u00a0File \"<stdin>\", line 1, in <module>\nStopIteration\n```", "```py\n    def a_n(a1, d, n):\n    \u00a0\u00a0\u00a0\u00a0'''Return the n-th term of the arithmetic sequence.\n    \u00a0\u00a0\u00a0\u00a0:a1: first term of the sequence. Integer or real.\n    \u00a0\u00a0\u00a0\u00a0:n: the n-th term in sequence\n    \u00a0\u00a0\u00a0\u00a0returns: n-th term. Integer or real.'''\n    \u00a0\u00a0\u00a0\u00a0an = a1 + (n - 1)*d\n    \u00a0\u00a0\u00a0\u00a0return an\n    ```", "```py\n    a_n(4, 3, 10)\n    ```", "```py\n    31\n    ```", "```py\n    def a_seq(a1, d, n):\n    \u00a0\u00a0\u00a0\u00a0'''Obtain the whole arithmetic sequence up to n.\n    \u00a0\u00a0\u00a0\u00a0:a1: first term of the sequence. Integer or real.\n    \u00a0\u00a0\u00a0\u00a0:d: common difference of the sequence. Integer or real.\n    \u00a0\u00a0\u00a0\u00a0:n: length of sequence\n    \u00a0\u00a0\u00a0\u00a0returns: sequence as a list.'''\n    \u00a0\u00a0\u00a0\u00a0sequence = []\n    \u00a0\u00a0\u00a0\u00a0for _ in range(n):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sequence.append(a1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 = a1 + d\n    \u00a0\u00a0\u00a0\u00a0return sequence\n    ```", "```py\n    a_seq(4, 3, 10)\n    ```", "```py\n    [4, 7, 10, 13, 16, 19, 22, 25, 28, 31]\n    ```", "```py\n    def infinite_a_sequence(a1, d):\n    \u00a0\u00a0\u00a0\u00a0while True:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yield a1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 = a1 + d\n    for i in infinite_a_sequence(4,3):\n    \u00a0\u00a0\u00a0\u00a0print(i, end=\" \")\n    ```", "```py\n    sum(a_seq(4, 3, 10))\n    ```", "```py\n    175\n    ```", "```py\n    def a_series(a1, d, n):\n    \u00a0\u00a0\u00a0\u00a0result = n * (a1 + a_n(a1, d, n)) / 2\n    \u00a0\u00a0\u00a0\u00a0return result\n    ```", "```py\n    a_series(4, 3, 10)\n    ```", "```py\n    175.0\n    ```", "```py\ndef n_geom_seq(r, a, n):\n\u00a0\u00a0\u00a0\u00a0an = r**(n-1) * a \n\u00a0\u00a0\u00a0\u00a0return an \n```", "```py\nn_geom_seq(2, 3, 10) \n```", "```py\n1536\n```", "```py\ndef sum_n(r, a, n):\n\u00a0\u00a0\u00a0\u00a0sum_n = a*(1 - r**n) / (1 - r) \n\u00a0\u00a0\u00a0\u00a0return sum_n\n```", "```py\nsum_n(2, 3, 10)\n```", "```py\n3069.0\n```", "```py\n    def find_ratio(*args):\n    \u00a0\u00a0\u00a0\u00a0arg0=args[0]\n    \u00a0\u00a0\u00a0\u00a0ratios = []\n    \u00a0\u00a0\u00a0\u00a0for arg in args[1:]:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ratio = round(arg/arg0,8)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arg0=arg\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ratios.append(ratio)\n    \u00a0\u00a0\u00a0\u00a0if len(set(ratios)) == 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ratio\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1\n    ```", "```py\n    find_ratio(1,2,4,8,16,32,64,128,256,512)\n    ```", "```py\n    2.0\n    ```", "```py\n    find_ratio(1,2,3)\n    ```", "```py\n    -1\n    ```", "```py\n    def find_next(*args):\n    \u00a0\u00a0\u00a0\u00a0if find_ratio(*args) == -1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise ValueError('The sequence you entered' \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'is not a geometric sequence. '\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Please check input.')\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return args[-1]*find_ratio(*args)\n    ```", "```py\n    find_next(1,2,4)\n    ```", "```py\n    8.0\n    ```", "```py\n    find_next(1.36,0.85680,0.539784,0.34006392)\n    ```", "```py\n    0.2142402696\n    ```", "```py\ndef factorial(n):\n\u00a0\u00a0\u00a0\u00a0if n == 0 or n ==1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\n\u00a0\u00a0\u00a0\u00a0elif n == 2:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 2\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return n*factorial(n - 1)\n```", "```py\nfactorial(11)\n```", "```py\n39916800\n```", "```py\n    def p_n(n):\n    \u00a0\u00a0\u00a0\u00a0if n < 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1\n    \u00a0\u00a0\u00a0\u00a0elif n == 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\n    \u00a0\u00a0\u00a0\u00a0elif n == 2:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 7\n    \u00a0\u00a0\u00a0\u00a0elif n == 3:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 2\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pn = (3*p_n(n-2) - p_n(n-1) )/ (p_n(n-3) + 1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return pn\n    ```", "```py\n    for i in range(1,11):\n    \u00a0\u00a0\u00a0\u00a0print(p_n(i))\n    ```", "```py\n    1\n    7\n    2\n    9.5\n    -0.4375\n    9.645833333333334\n    -1.0436507936507937\n    53.29982363315697\n    -5.30073825572847\n    -3784.586609737289\n    ```", "```py\n    from matplotlib import pyplot as plt\n    plist = []\n    for i in range(1,40):\n    \u00a0\u00a0\u00a0\u00a0plist.append(p_n(i))\n\n    plt.plot(plist, linestyle='--', marker='o', color='b')\n    plt.show()\n    ```", "```py\nfrom math import sqrt\ndef hypotenuse(a,b):\n\u00a0\u00a0\u00a0\u00a0h = sqrt(a**2 + b**2)\n\u00a0\u00a0\u00a0\u00a0return h\n```", "```py\nhypotenuse(a = 3, b = 4)\n```", "```py\n5.0\n```", "```py\n    import numpy as np\n    from matplotlib import pyplot as plt\n    ```", "```py\n    def find_hypotenuse(p1, p2):\n    \u00a0\u00a0\u00a0\u00a0p3 = round( (p1**2 + p2**2)**0.5, 8)\n    \u00a0\u00a0\u00a0\u00a0return p3\n    ```", "```py\n    def find_trig(adjacent, opposite, hypotenuse):\n    \u00a0\u00a0\u00a0\u00a0'''Returns the tuple (sin, cos, tan)'''\n    \u00a0\u00a0\u00a0\u00a0return opposite/hypotenuse, adjacent/hypotenuse, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opposite/adjacent\n    ```", "```py\n    def plot_triangle(p1, p2, lw=5):\n    \u00a0\u00a0\u00a0\u00a0x = [0, p1, 0]\n    \u00a0\u00a0\u00a0\u00a0y = [0, 0, p2]\n    \u00a0\u00a0\u00a0\u00a0n = ['0', 'p1', 'p2']\n    \u00a0\u00a0\u00a0\u00a0fig, ax = plt.subplots(figsize=(p1,p2))\n    \u00a0\u00a0\u00a0\u00a0# plot points\n    \u00a0\u00a0\u00a0\u00a0ax.scatter(x, y,  s=400, c=\"#8C4799\", alpha=0.4)\n    \u00a0\u00a0\u00a0\u00a0ax.annotate(find_hypotenuse(p1,p2),(p1/2,p2/2))\n\n    \u00a0\u00a0\u00a0\u00a0# plot edges\n    \u00a0\u00a0\u00a0\u00a0ax.plot([0, p1], [0, 0], lw=lw, color='r')\n    \u00a0\u00a0\u00a0\u00a0ax.plot([0, 0], [0, p2], lw=lw, color='b')\n    \u00a0\u00a0\u00a0\u00a0ax.plot([0, p1], [p2, 0], lw=lw, color='y')\n    \u00a0\u00a0\u00a0\u00a0for i, txt in enumerate(n):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ax.annotate(txt, (x[i], y[i]), va='center')\n    ```", "```py\n    p01 = 4\n    p02 = 4\n    print(find_trig(p01,p02,find_hypotenuse(p01,p02)))\n    plot_triangle(p01,p02)\n    ```", "```py\n    x = np.linspace(0, 10, 200)\n    sin = np.sin(x)\n    cos = np.cos(x)\n    plt.xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a05*np.pi/2, 3*np.pi], \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['0','','\\u03C0','','2\\u03C0','','3\\u03C0'])\n    plt.plot(x, sin, marker='o', label='sin')\n    plt.plot(x, cos, marker='x', label='cos')\n    plt.legend(loc=\"upper left\")\n    plt.ylim(-1.1, 1.6)\n    plt.show()\n    ```", "```py\nfrom math import acos, asin, atan, cos\nx = 0.5\n```", "```py\nprint(acos(x))\n```", "```py\n1.0471975511965979\n```", "```py\nprint(asin(x))\n```", "```py\n0.5235987755982989\n```", "```py\nprint(atan(x))\n```", "```py\n0.4636476090008061\n```", "```py\nx = -1.2\nprint(acos(x))\n```", "```py\nTraceback (most recent call last):\n\u00a0\u00a0\u00a0\u00a0File \"<stdin>\", line 1, in <module>\n```", "```py\nx = -1.2\nprint(atan(x))\n```", "```py\n-0.8760580505981934\n```", "```py\nprint(acos(cos(0.2)))\n```", "```py\n0.2\n```", "```py\n    from math import atan, pi\n    ```", "```py\n    AC = 33\n    BC = 20\n    tan_th = BC/AC\n    print(tan_th)\n    ```", "```py\n    0.6060606060606061\n    ```", "```py\n    theta = atan(tan_th)\n    ```", "```py\n    theta_degrees = theta*180/pi\n    print(theta_degrees)\n    ```", "```py\n    31.218402764346372\n    ```", "```py\n    AB = (AC**2 + BC**2)**0.5\n    print(AB)\n    ```", "```py\n    38.58756276314948\n    ```", "```py\n    from matplotlib import pyplot as plt\n    import numpy as np\n    ```", "```py\n    x = np.linspace(0.1, 50, 2000)\n    y = np.arctan(7*x / (30+x**2) )\n    plt.plot(x,y)\n    plt.show()\n    ```", "```py\n    ymax = max(y)\n    xmax = x[list(y).index(ymax)]\n    print(round(xmax,2), round(ymax,2))\n    ```", "```py\n    5.47 0.57\n    ```", "```py\n    ymax_degrees = round(ymax * 180 / np.pi, 2)\n    print(ymax_degrees)\n    ```", "```py\n    32.58\n    ```", "```py\nimport numpy as np\nA = np.array([1,2,3]) # create vector A\nB = np.array([4,5,6]) # create vector B\n```", "```py\nA + B\n```", "```py\narray([5, 7, 9])\n```", "```py\nA - B\n```", "```py\narray([-3, -3, -3])\n```", "```py\nA*B\n```", "```py\narray([ 4, 10, 18])\n```", "```py\nA.dot(B)\n```", "```py\n32\n```", "```py\nnp.cross(A,B)\n```", "```py\narray([-3,  6, -3])\n```", "```py\nimport numpy as np\nfrom math import acos\nA = np.array([2,10,0])\nB = np.array([9,1,-1])\n```", "```py\nAmagn = np.sqrt(A.dot(A))\nBmagn = np.sqrt(B.dot(B))\n```", "```py\nAmagn = np.linalg.norm(A)\nBmagn = np.linalg.norm(B)\n```", "```py\nprint(Amagn, Bmagn)\n```", "```py\n10.198039027185569\n9.1104335791443\n```", "```py\ntheta = acos(A.dot(B) / (Amagn * Bmagn))\nprint(theta)\n```", "```py\n1.2646655256233297\n```", "```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    def plot_vectors(vec1, vec2, isSum = False):\n\n    \u00a0\u00a0\u00a0\u00a0label1 = \"A\"; label2 = \"B\"; label3 = \"A+B\"\n    \u00a0\u00a0\u00a0\u00a0orig = [0.0, 0.0]  # position of origin of axes\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0ax = plt.axes()\n    \u00a0\u00a0\u00a0\u00a0ax.annotate(label1, [vec1[0]+0.5,vec1[1]+0.5] )   \n    \u00a0\u00a0\u00a0\u00a0# shift position of label for better visibility\n    \u00a0\u00a0\u00a0\u00a0ax.annotate(label2, [vec2[0]+0.5,vec2[1]+0.5] )\n    \u00a0\u00a0\u00a0\u00a0if isSum: \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec3 = [vec1[0]+vec2[0], vec1[1]+vec2[1]]     \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# if isSum=True calculate the sum of the two vectors\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ax.annotate(label3, [vec3[0]+0.5,vec3[1]+0.5] )\n\n    \u00a0\u00a0\u00a0\u00a0ax.arrow(*orig, *vec1, head_width=0.4, head_length=0.65)\n    \u00a0\u00a0\u00a0\u00a0ax.arrow(*orig, *vec2, head_width=0.4, head_length=0.65, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ec='blue')\n    \u00a0\u00a0\u00a0\u00a0if isSum:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ax.arrow(*orig, *vec3, head_width=0.2, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head_length=0.25, ec='yellow')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# plot the vector sum as well\n\n    \u00a0\u00a0\u00a0\u00a0plt.grid()\n    \u00a0\u00a0\u00a0\u00a0e=3 \n    \u00a0\u00a0\u00a0\u00a0# shift limits by e for better visibility\n    \u00a0\u00a0\u00a0\u00a0plt.xlim(min(vec1[0],vec2[0],0)-e, max(vec1[0],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec2[0],0)+e) \n    \u00a0\u00a0\u00a0\u00a0# set plot limits to the min/max of coordinates\n    \u00a0\u00a0\u00a0\u00a0plt.ylim(min(vec1[1],vec2[1],0)-e, max(vec1[1],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vec2[1],0)+e) \n    \u00a0\u00a0\u00a0\u00a0# so that all vectors are inside the plot area\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0plt.title('Vector sum',fontsize=14)\n    \u00a0\u00a0\u00a0\u00a0plt.show()\n    \u00a0\u00a0\u00a0\u00a0plt.close()\n    ```", "```py\n    def find_angle(vec1, vec2, isRadians = True, isSum = False):\n    \u00a0\u00a0\u00a0\u00a0vec1 = np.array(vec1)\n    \u00a0\u00a0\u00a0\u00a0vec2 = np.array(vec2)\n\n    \u00a0\u00a0\u00a0\u00a0product12 = np.dot(vec1,vec2)\n    \u00a0\u00a0\u00a0\u00a0cos_theta = product12/(np.dot(vec1,vec1)**0.5 * \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0np.dot(vec2,vec2)**0.5 )\n    \u00a0\u00a0\u00a0\u00a0cos_theta = round(cos_theta, 12)\n    \u00a0\u00a0\u00a0\u00a0theta = np.arccos(cos_theta)\n\n    \u00a0\u00a0\u00a0\u00a0plot_vectors(vec1, vec2, isSum=isSum)\n    \u00a0\u00a0\u00a0\u00a0if isRadians:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return theta\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 180*theta/np.pi\n    ```", "```py\n    ve1 = [1,5]\n    ve2 = [5,-1]\n    find_angle(ve1, ve2, isRadians = False, isSum = True)\n    ```", "```py\n    ve1 = [1,5]\n    ve2 = [0.5,2.5]\n    find_angle(ve1, ve2, isRadians = False, isSum = True)\n    ```", "```py\n    ve1 = [1,5]\n    ve2 = [-3,-5]\n    find_angle(ve1, ve2, isRadians = False, isSum = True)\n    ```", "```py\nc = <real> + <imag>*1j,\n```", "```py\nc = complex(<real>, <imag>).\n```", "```py\na = 1\nb = -3\nz = complex(a, b)\nprint(z)\n```", "```py\n(1-3j)\n```", "```py\nprint(z.real)\n```", "```py\n1.0\n```", "```py\nprint(z.imag)\n```", "```py\n-3.0\n```", "```py\ndef find_polar(z):\n\u00a0\u00a0\u00a0\u00a0from math import asin\n\u00a0\u00a0\u00a0\u00a0x = z.real\n\u00a0\u00a0\u00a0\u00a0y = z.imag\n\u00a0\u00a0\u00a0\u00a0r = (x**2 + y**2)**0.5\n\u00a0\u00a0\u00a0\u00a0phi = asin(y/r)\n\u00a0\u00a0\u00a0\u00a0return r, phi\nfind_polar(1-3j)\n```", "```py\n(3.1622776601683795, -1.2490457723982544)\n```", "```py\nimport cmath\nz = 1-3j\ncmath.polar(z)\n```", "```py\n(3.1622776601683795, -1.2490457723982544)\n```", "```py\ndef complex_operations2(c1, c2):\n\u00a0\u00a0\u00a0\u00a0print('Addition =', c1 + c2)\n\u00a0\u00a0\u00a0\u00a0print('Subtraction =', c1 - c2)\n\u00a0\u00a0\u00a0\u00a0print('Multiplication =', c1 * c2)\n\u00a0\u00a0\u00a0\u00a0print('Division =', c1 / c2)\n```", "```py\ncomplex_operations2(10+2j/3, 2.9+1j/3)\n```", "```py\nAddition = (12.9+1j)\nSubtraction = (7.1+0.3333333333333333j)\nMultiplication = (28.77777777777778+5.266666666666666j)\nDivision = (3.429391054896336-0.16429782240187768j)\n```", "```py\ncomplex_operations2(1, 1j)\n```", "```py\nAddition = (1+1j)\nSubtraction = (1-1j)\nMultiplication = 1j\nDivision = -1j\n```", "```py\nimport cmath\ndef complex_operations1(c):\n\u00a0\u00a0\u00a0\u00a0modulus = abs(c)\n\u00a0\u00a0\u00a0\u00a0phase = cmath.phase(c)\n\u00a0\u00a0\u00a0\u00a0polar = cmath.polar(c)\n\u00a0\u00a0\u00a0\u00a0print('Modulus =', modulus)\n\u00a0\u00a0\u00a0\u00a0print('Phase =', phase)\n\u00a0\u00a0\u00a0\u00a0print('Polar Coordinates =', polar)\n\u00a0\u00a0\u00a0\u00a0print('Conjugate =',c.conjugate())\n\u00a0\u00a0\u00a0\u00a0print('Rectangular Coordinates =', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cmath.rect(modulus, phase))\ncomplex_operations1(3+4j)\n```", "```py\nModulus = 5.0\nPhase = 0.9272952180016122\nPolar Coordinates = (5.0, 0.9272952180016122)\nConjugate = (3-4j)\nRectangular Coordinates = (3.0000000000000004+3.9999999999999996j)\n```", "```py\n    import cmath\n    from matplotlib import pyplot as plt\n    import warnings\n    warnings.filterwarnings(\"ignore\")\n    ```", "```py\n    def plot_complex(c, color='b', label=None):\n\n    \u00a0\u00a0\u00a0\u00a0ax = plt.axes()\n    \u00a0\u00a0\u00a0\u00a0ax.arrow(0, 0, c.real, c.imag, head_width=0.2, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head_length=0.3, color=color)\n    \u00a0\u00a0\u00a0\u00a0ax.annotate(label, xy=(0.6*c.real, 1.15*c.imag))\n    \u00a0\u00a0\u00a0\u00a0plt.xlim(-3,3)\n    \u00a0\u00a0\u00a0\u00a0plt.ylim(-3,3)\n    \u00a0\u00a0\u00a0\u00a0plt.grid(b=True, which='major') #<-- plot grid lines\n    ```", "```py\n    def mult_complex(c, label1='old', label2='new'):\n\n    \u00a0\u00a0\u00a0\u00a0phase = cmath.phase(c)\n    \u00a0\u00a0\u00a0\u00a0plot_complex(c, label=label1)\n\n    \u00a0\u00a0\u00a0\u00a0if phase == 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = -1\n    \u00a0\u00a0\u00a0\u00a0elif phase < 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('old phase:', phase)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = cmath.sqrt(c)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('new phase:', cmath.phase(result))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0plot_complex(result, 'red', label=label2)\n    \u00a0\u00a0\u00a0\u00a0elif phase > 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('old phase:', phase)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = c*c\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('new phase:', cmath.phase(result))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0plot_complex(result, 'red', label=label2)\n    \u00a0\u00a0\u00a0\u00a0return result\n    ```", "```py\n    mult_complex(1 + 1.2j)\n    ```", "```py\n    mult_complex(1-1.2j)\n    ```", "```py\n    c0 = 1+1.2j\n    n = 0\n    while n < 6:\n    \u00a0\u00a0\u00a0\u00a0c0 = mult_complex(c0, None, str(n))\n    \u00a0\u00a0\u00a0\u00a0n+=1\n    ```"]