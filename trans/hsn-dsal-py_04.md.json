["```py\n>>> s = set()\n```", "```py\n>>> a = \"eggs\"\n>>> b = \"ham\"\n>>> c = \"spam\"\n```", "```py\nclass Node:\n\n    def __init__ (self, data=None):\n        self.data = data \n        self.next = None\n```", "```py\ndef _str_ (self):\n   return str(data)\n```", "```py\n>>> n1 = Node('eggs')\n>>> n2 = Node('ham')\n>>> n3 = Node('spam')\n```", "```py\n>>> n1.next = n2\n>>> n2.next = n3\n```", "```py\ncurrent = n1  \nwhile current:\n     print(current.data)\n     current = current.next\n```", "```py\nclass SinglyLinkedList:\n    def __init__ (self):\n        self.tail = None\n```", "```py\nclass SinglyLinkedList:\n    # ...\n    def append(self, data):\n         # Encapsulate the data in a Node \n         node = Node(data)\n         if self.tail == None:\n             self.tail = node \n         else:\n             current = self.tail \n             while current.next:\n                 current = current.next \n             current.next = node\n```", "```py\n>>> words = SinglyLinkedList()\n>>> words.append('egg')\n>>> words.append('ham')\n>>> words.append('spam')\n```", "```py\n>>> current = words.tail\n>>> while current:\n        print(current.data)\n        current = current.next\n```", "```py\nclass SinglyLinkedList:\n    def init (self):\n        # ...\n        self.tail = None\n\n    def append(self, data):\n        node = Node(data)\n       if self.head:\n            self.head.next = node \n            self.head = node\n       else:\n            self.tail = node \n            self.head = node\n```", "```py\ndef size(self):\n count = 0\n current = self.tail\n while current:\n     count += 1\n     current = current.next \n return count\n```", "```py\nclass SinglyLinkedList:\n    def init (self):\n        # ...\n```", "```py\n\n        self.size = 0\n\n    def append(self, data):\n        # ...\n        self.size += 1\n```", "```py\ndef iter(self):\n    current = self.tail \n    while current:\n        val = current.data \n        current = current.next \n        yield val\n```", "```py\nfor word in words.iter():\n    print(word)\n```", "```py\ndef delete(self, data): \n    current = self.tail \n    prev = self.tail \n    while current:\n        if current.data == data:\n            if current == self.tail:\n                self.tail = current.next \n            else:\n                prev.next = current.next \n            self.count -= 1\n            return\n        prev = current\n        current = current.next\n```", "```py\ndef search(self, data):\n    for node in self.iter():\n        if data == node:\n            return True \n    return False\n```", "```py\ndef clear(self):\n    \"\"\" Clear the entire list. \"\"\"\n    self.tail = None\n    self.head = None\n```", "```py\nclass Node(object):\n    def __init__ (self, data=None, next=None, prev=None):\n       self.data = data \n       self.next = next \n       self.prev = prev\n```", "```py\nclass DoublyLinkedList(object):\n    def init (self): \n        self.head = None\n        self.tail = None\n        self.count = 0\n```", "```py\ndef append(self, data):\n    \"\"\" Append an item to the list. \"\"\"\n\n    new_node = Node(data, None, None)\n    if self.head is None:\n        self.head = new_node\n        self.tail = self.head\n    else:\n        new_node.prev = self.tail \n        self.tail.next = new_node \n        self.tail = new_node\n        self.count += 1\n```", "```py\nnew_node.prev = self.tail\n```", "```py\nself.tail.next = new_node\n```", "```py\nself.tail = new_node\n```", "```py\nself.count += 1\n```", "```py\ndef delete(self, data):\n    \"\"\" Delete a node from the list. \"\"\" \n    current = self.head \n    node_deleted = False \n    if current is None:       #Item to be deleted is not found in the list\n        node_deleted = False \n\n    elif current.data == data:   #Item to be deleted is found at starting of list\n        self.head = current.next  \n        self.head.prev = None \n        node_deleted = True \n\n    elif self.tail.data == data:   #Item to be deleted is found at the end of list.\n        self.tail = self.tail.prev  \n        self.tail.next = None \n        node_deleted = True \n    else: \n        while current:          #search item to be deleted, and delete that node\n            if current.data == data: \n                current.prev.next = current.next  \n                current.next.prev = current.prev \n                node_deleted = True \n            current = current.next \n\n    if node_deleted: \n        self.count -= 1\n```", "```py\ndef delete(self, data): \n    current = self.head \n    node_deleted = False\n    ...\n```", "```py\nif current is None:\n  node_deleted = False\n```", "```py\nelif current.data == data: \n    self.head = current.next \n    self.head.prev = None\n    node_deleted = True\n```", "```py\nelif self.tail.data == data:\n   self.tail = self.tail.prev \n   self.tail.next = None\n   node_deleted = True\n```", "```py\nelse\n    while current:\n       if current.data == data:\n             current.prev.next = current.next \n             current.next.prev = current.prev \n             node_deleted = True\n       current = current.next\n```", "```py\nif node_deleted:\n  self.count -= 1\n```", "```py\ndef contain(self, data):\n    for node_data in self.iter():\n       if data == node_data:\n       return True \n    return False\n```", "```py\ndef append(self, data): \n    node = Node(data)\n    if self.head:\n        self.head.next = node \n        self.head = node\n    else:\n       self.head = node\n       self.tail = node\n\n    self.head.next = self.tail \n    self.size += 1\n```", "```py\ndef delete(self, data): \n     current = self.tail \n     prev = self.tail \n       while current:\n           if current.data == data:\n              if current == self.tail:\n                  self.tail = current.next \n                  self.head.next = self.tail\n              else:\n                  prev.next = current.next\n              self.size -= 1 \n              return\n           prev = current\n           current = current.next\n```", "```py\ndef delete(self, data): \n    current = self.tail \n    prev = self.tail\n    while prev == current or prev != self.head:\n        if current.data == data:\n            if current == self.tail: \n                self.tail = current.next \n                self.head.next = self.tail\n            else:\n                prev.next = current.next \n                self.size -= 1\n    return\n    prev = current\n    current = current.next\n```", "```py\nwords = CircularList() \nwords.append('eggs') \nwords.append('ham') \nwords.append('spam')\ncounter = 0\n\nfor word in words.iter():\n    print(word)\n    counter += 1\n    if counter > 1000:\n        break\n```"]