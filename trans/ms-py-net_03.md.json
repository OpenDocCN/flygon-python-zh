["```py\n nx-osv-2# show ip int brief\n    IP Interface Status for VRF \"default\"(1)\n    Interface IP Address Interface Status\n    Lo0 192.168.0.2 protocol-up/link-up/admin-up\n    Eth2/1 10.0.0.6 protocol-up/link-up/admin-up\n    nx-osv-2#\n```", "```py\n >>> new_connection.send('sh ip int briefn')\n    16\n    >>> output = new_connection.recv(5000)\n    >>> print(output)\n    b'sh ip int briefrrnIP Interface Status for VRF \n    \"default\"(1)rnInterface IP Address Interface \n    StatusrnLo0 192.168.0.2 protocol-up/link-up/admin-up \n    rnEth2/1 10.0.0.6 protocol-up/link-up/admin-up rnrnx-\n    osv-2# '\n    >>>\n```", "```py\n    {\n     \"ins_api\":{\n     \"outputs\":{\n     \"output\":{\n     \"body\":{\n     \"TABLE_intf\":[\n       {\n       \"ROW_intf\":{\n       \"admin-state\":\"up\",\n       \"intf-name\":\"Lo0\",\n       \"iod\":84,\n       \"ip-disabled\":\"FALSE\",\n       \"link-state\":\"up\",\n       \"prefix\":\"192.168.0.2\",\n       \"proto-state\":\"up\"\n       }\n       },\n     {\n     \"ROW_intf\":{\n     \"admin-state\":\"up\",\n     \"intf-name\":\"Eth2/1\",\n     \"iod\":36,\n     \"ip-disabled\":\"FALSE\",\n     \"link-state\":\"up\",\n     \"prefix\":\"10.0.0.6\",\n     \"proto-state\":\"up\"\n     }\n     }\n     ],\n      \"TABLE_vrf\":[\n      {\n     \"ROW_vrf\":{\n     \"vrf-name-out\":\"default\"\n     }\n     },\n     {\n     \"ROW_vrf\":{\n     \"vrf-name-out\":\"default\"\n     }\n     }\n     ]\n     },\n     \"code\":\"200\",\n     \"input\":\"show ip int brief\",\n     \"msg\":\"Success\"\n     }\n     },\n     \"sid\":\"eoc\",\n     \"type\":\"cli_show\",\n     \"version\":\"1.2\"\n     }\n    }\n```", "```py\n$ sudo apt-get install -y python3-dev libxml2-dev libxslt1-dev libffi-dev libssl-dev zlib1g-dev python3-pip git python3-requests\n```", "```py\n$ git clone https://github.com/ncclient/ncclient\n$ cd ncclient/\n$ sudo python3 setup.py install\n$ sudo python setup.py install #for Python 2\n```", "```py\nfeature nxapi\nusername cisco password 5 $1$Nk7ZkwH0$fyiRmMMfIheqE3BqvcL0C1 role network-operator\nusername cisco role network-admin\nusername cisco passphrase lifetime 99999 warntime 14 gracetime 3\n```", "```py\nnx-osv-2(config)# nxapi http port 80\nnx-osv-2(config)# nxapi sandbox\n```", "```py\n    #!/usr/bin/env python3\n    from ncclient import manager\n    conn = manager.connect(\n            host='172.16.1.90',\n            port=22,\n            username='cisco',\n            password='cisco',\n            hostkey_verify=False,\n            device_params={'name': 'nexus'},\n            look_for_keys=False)\n    for value in conn.server_capabilities:\n        print(value)\n    conn.close_session()\n```", "```py\n$ python cisco_nxapi_1.py\nurn:ietf:params:netconf:capability:writable-running:1.0\nurn:ietf:params:netconf:capability:rollback-on-error:1.0\nurn:ietf:params:netconf:capability:validate:1.0\nurn:ietf:params:netconf:capability:url:1.0?scheme=file\nurn:ietf:params:netconf:base:1.0\nurn:ietf:params:netconf:capability:candidate:1.0\nurn:ietf:params:netconf:capability:confirmed-commit:1.0\nurn:ietf:params:xml:ns:netconf:base:1.0\n```", "```py\n    \"\"\"\n     NX-API-BOT \n    \"\"\"\n    import requests\n    import json\n\n    \"\"\"\n    Modify these please\n    \"\"\"\n    url='http://YOURIP/ins'\n    switchuser='USERID'\n    switchpassword='PASSWORD'\n\n    myheaders={'content-type':'application/json-rpc'}\n    payload=[\n      {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"cli\",\n        \"params\": {\n          \"cmd\": \"show version\",\n          \"version\": 1.2\n        },\n        \"id\": 1\n      }\n    ]\n    response = requests.post(url,data=json.dumps(payload), \n    headers=myheaders,auth=(switchuser,switchpassword)).json()\n```", "```py\n$ python3 cisco_nxapi_2.py\n7.2(0)D1(1) [build 7.2(0)ZD(0.120)]\n```", "```py\n      {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"cli\",\n        \"params\": {\n          \"cmd\": \"interface ethernet 2/12\",\n          \"version\": 1.2\n        },\n        \"id\": 1\n      },\n      {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"cli\",\n        \"params\": {\n          \"cmd\": \"description foo-bar\",\n          \"version\": 1.2\n        },\n        \"id\": 2\n      },\n      {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"cli\",\n        \"params\": {\n          \"cmd\": \"end\",\n          \"version\": 1.2\n        },\n        \"id\": 3\n      },\n      {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"cli\",\n        \"params\": {\n          \"cmd\": \"copy run start\",\n          \"version\": 1.2\n        },\n        \"id\": 4\n      }\n    ]\n```", "```py\nhostname nx-osv-1-new\n...\ninterface Ethernet2/12\ndescription foo-bar\nshutdown\nno switchport\nmac-address 0000.0000.002f \n```", "```py\n urn:cisco:params:xml:ns:yang:cisco-virtual-service?module=cisco-\n virtual-service&revision=2015-04-09\n http://tail-f.com/ns/mibs/SNMP-NOTIFICATION-MIB/200210140000Z?\n module=SNMP-NOTIFICATION-MIB&revision=2002-10-14\n urn:ietf:params:xml:ns:yang:iana-crypt-hash?module=iana-crypt-\n hash&revision=2014-04-04&features=crypt-hash-sha-512,crypt-hash-\n sha-256,crypt-hash-md5\n urn:ietf:params:xml:ns:yang:smiv2:TUNNEL-MIB?module=TUNNEL-\n MIB&revision=2005-05-16\n urn:ietf:params:xml:ns:yang:smiv2:CISCO-IP-URPF-MIB?module=CISCO-\n IP-URPF-MIB&revision=2011-12-29\n urn:ietf:params:xml:ns:yang:smiv2:ENTITY-STATE-MIB?module=ENTITY-\n STATE-MIB&revision=2005-11-22\n urn:ietf:params:xml:ns:yang:smiv2:IANAifType-MIB?module=IANAifType-\n MIB&revision=2006-03-31\n <omitted>\n```", "```py\n  def getTicket():\n      url = \"https://\" + controller + \"/api/v1/ticket\"\n      payload = {\"username\":\"usernae\",\"password\":\"password\"}\n      header = {\"content-type\": \"application/json\"}\n      response= requests.post(url,data=json.dumps(payload), headers=header, verify=False)\n      r_json=response.json()\n      ticket = r_json[\"response\"][\"serviceTicket\"]\n      return ticket\n```", "```py\nurl = \"https://\" + controller + \"/api/v1/network-device\"\nheader = {\"content-type\": \"application/json\", \"X-Auth-Token\":ticket}\n```", "```py\n    Network Devices =\n    {\n     \"version\": \"1.0\",\n     \"response\": [\n     {\n     \"reachabilityStatus\": \"Unreachable\",\n     \"id\": \"8dbd8068-1091-4cde-8cf5-d1b58dc5c9c7\",\n     \"platformId\": \"WS-C2960C-8PC-L\",\n    <omitted>\n     \"lineCardId\": null,\n     \"family\": \"Wireless Controller\",\n     \"interfaceCount\": \"12\",\n     \"upTime\": \"497 days, 2:27:52.95\"\n     }\n    ]\n    }\n    8dbd8068-1091-4cde-8cf5-d1b58dc5c9c7 Cisco Catalyst 2960-C Series\n     Switches\n    cd6d9b24-839b-4d58-adfe-3fdf781e1782 Cisco 3500I Series Unified\n    Access Points\n    <omitted>\n    55450140-de19-47b5-ae80-bfd741b23fd9 Cisco 4400 Series Integrated \n    Services Routers\n    ae19cd21-1b26-4f58-8ccd-d265deabb6c3 Cisco 5500 Series Wireless LAN \n    Controllers\n```", "```py\n set system login user netconf uid 2001\n set system login user netconf class super-user\n set system login user netconf authentication encrypted-password\n \"$1$0EkA.XVf$cm80A0GC2dgSWJIYWv7Pt1\"\n set system services ssh\n set system services telnet\n set system services netconf ssh port 830\n```", "```py\n netconf@foo> show configuration | display set\n set version 12.1R1.9\n set system host-name foo\n set system domain-name bar\n <omitted>\n```", "```py\n netconf@foo> show configuration | display xml\n <rpc-reply >\n <configuration junos:commit-seconds=\"1485561328\" junos:commit-\n localtime=\"2017-01-27 23:55:28 UTC\" junos:commit-user=\"netconf\">\n <version>12.1R1.9</version>\n <system>\n <host-name>foo</host-name>\n <domain-name>bar</domain-name>\n```", "```py\n  #!/usr/bin/env python3\n\n  from ncclient import manager\n\n  conn = manager.connect(\n      host='192.168.24.252',\n      port='830',\n      username='netconf',\n      password='juniper!',\n      timeout=10,\n      device_params={'name':'junos'},\n      hostkey_verify=False)\n\n  result = conn.command('show version', format='text')\n  print(result)\n  conn.close_session()\n```", "```py\n    <rpc-reply message-id=\"urn:uuid:7d9280eb-1384-45fe-be48-\n    b7cd14ccf2b7\">\n    <output>\n    Hostname: foo\n Model: olive\n JUNOS Base OS boot [12.1R1.9]\n JUNOS Base OS Software Suite [12.1R1.9]\n <omitted>\n JUNOS Runtime Software Suite [12.1R1.9]\n JUNOS Routing Software Suite [12.1R1.9]\n    </output>\n    </rpc-reply>\n```", "```py\n      print(result.xpath('output')[0].text)\n```", "```py\n      #!/usr/bin/env python3\n\n      from ncclient import manager\n      from ncclient.xml_ import new_ele, sub_ele\n\n      conn = manager.connect(host='192.168.24.252', port='830', \n    username='netconf' , password='juniper!', timeout=10, \n    device_params={'name':'junos'}, hostkey_v erify=False)\n```", "```py\n      # lock configuration and make configuration changes\n      conn.lock()\n\n      # build configuration\n      config = new_ele('system')\n      sub_ele(config, 'host-name').text = 'master'\n      sub_ele(config, 'domain-name').text = 'python'\n```", "```py\n     <system>\n        <host-name>foo</host-name>\n        <domain-name>bar</domain-name>\n    ...\n    </system>\n```", "```py\n      # send, validate, and commit config\n      conn.load_configuration(config=config)\n      conn.validate()\n      commit_config = conn.commit()\n      print(commit_config.tostring)\n\n      # unlock config\n      conn.unlock()\n\n      # close session\n      conn.close_session()\n```", "```py\n# make a connection object\ndef connect(host, port, user, password):\n    connection = manager.connect(host=host, port=port, username=user,\n            password=password, timeout=10, device_params={'name':'junos'},\n            hostkey_verify=False)\n    return connection\n\n# execute show commands\ndef show_cmds(conn, cmd):\n    result = conn.command(cmd, format='text')\n    return result\n\n# push out configuration\ndef config_cmds(conn, config):\n    conn.lock()\n    conn.load_configuration(config=config)\n    commit_config = conn.commit()\n    return commit_config.tostring\n```", "```py\n$ sudo apt-get install -y python3-pip python3-dev libxml2-dev libxslt1-dev libssl-dev libffi-dev\n```", "```py\n$ sudo pip3 install junos-eznc\n$ sudo pip install junos-eznc\n```", "```py\nset system services netconf ssh port 830\n```", "```py\nset system login user netconf uid 2001\nset system login user netconf class super-user\nset system login user netconf authentication encrypted-password \"$1$0EkA.XVf$cm80A0GC2dgSWJIYWv7Pt1\"\n```", "```py\n$ ssh-keygen -t rsa\n```", "```py\n$ mv ~/.ssh/id_rsa.pub /tmp\n$ cd /tmp\n$ python3 -m http.server\nServing HTTP on 0.0.0.0 port 8000 ...\n```", "```py\nnetconf@foo# set system login user echou class super-user authentication load-key-file http://192.168.24.164:8000/id_rsa.pub\n/var/home/netconf/...transferring.file........100% of 394 B 2482 kBps\n```", "```py\n$ ssh -i ~/.ssh/id_rsa 192.168.24.252\n--- JUNOS 12.1R1.9 built 2012-03-24 12:52:33 UTC\nechou@foo>\n```", "```py\nPython 3.5.2 (default, Nov 17 2016, 17:05:23)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from jnpr.junos import Device\n>>> dev = Device(host='192.168.24.252', user='netconf', password='juniper!')\n>>> dev.open()\nDevice(192.168.24.252)\n>>> dev.facts\n{'serialnumber': '', 'personality': 'UNKNOWN', 'model': 'olive', 'ifd_style': 'CLASSIC', '2RE': False, 'HOME': '/var/home/juniper', 'version_info': junos.version_info(major=(12, 1), type=R, minor=1, build=9), 'switch_style': 'NONE', 'fqdn': 'foo.bar', 'hostname': 'foo', 'version': '12.1R1.9', 'domain': 'bar', 'vc_capable': False}\n>>> dev.close()\n```", "```py\n>>> from jnpr.junos import Device\n>>> dev1 = Device(host='192.168.24.252', user='echou', ssh_private_key_file='/home/echou/.ssh/id_rsa')\n>>> dev1.open()\nDevice(192.168.24.252)\n>>> dev1.facts\n{'HOME': '/var/home/echou', 'model': 'olive', 'hostname': 'foo', 'switch_style': 'NONE', 'personality': 'UNKNOWN', '2RE': False, 'domain': 'bar', 'vc_capable': False, 'version': '12.1R1.9', 'serialnumber': '', 'fqdn': 'foo.bar', 'ifd_style': 'CLASSIC', 'version_info': junos.version_info(major=(12, 1), type=R, minor=1, build=9)}\n>>> dev1.close()\n```", "```py\n      #!/usr/bin/env python3\n      from jnpr.junos import Device\n      import xml.etree.ElementTree as ET\n      import pprint\n\n      dev = Device(host='192.168.24.252', user='juniper', passwd='juniper!')\n\n      try:\n          dev.open()\n      except Exception as err:\n          print(err)\n          sys.exit(1)\n\n      result = \n    dev.rpc.get_interface_information(interface_name='em1', terse=True)\n      pprint.pprint(ET.tostring(result))\n\n      dev.close()\n```", "```py\n netconf@foo> show interfaces em1 | display xml rpc\n <rpc-reply >\n <rpc>\n <get-interface-information>\n <interface-name>em1</interface-name>\n </get-interface-information>\n </rpc>\n <cli>\n <banner></banner>\n </cli>\n </rpc-reply>\n```", "```py\n >>> dev1.display_xml_rpc('show interfaces em1', format='text')\n '<get-interface-information>n <interface-name>em1</interface-\n name>n</get-interface-information>n'\n```", "```py\n      #!/usr/bin/env python3\n      from jnpr.junos import Device\n      from jnpr.junos.utils.config import Config\n```", "```py\n      dev = Device(host='192.168.24.252', user='juniper', \n    passwd='juniper!')\n\n      try:\n          dev.open()\n      except Exception as err:\n          print(err)\n          sys.exit(1)\n```", "```py\n      config_change = \"\"\"\n      <system>\n        <host-name>master</host-name>\n        <domain-name>python</domain-name>\n      </system>\n      \"\"\"\n\n      cu = Config(dev)\n      cu.lock()\n      cu.load(config_change)\n      cu.commit()\n      cu.unlock()\n\n      dev.close()\n```", "```py\narista1(config)#management api http-commands\narista1(config-mgmt-api-http-cmds)#no shut\narista1(config-mgmt-api-http-cmds)#protocol https port 443\narista1(config-mgmt-api-http-cmds)#no protocol http\narista1(config-mgmt-api-http-cmds)#vrf management\n```", "```py\narista1#sh management api http-commands\nEnabled: Yes\nHTTPS server: running, set to use port 443\nHTTP server: shutdown, set to use port 80\nLocal HTTP server: shutdown, no authentication, set to use port 8080\nUnix Socket server: shutdown, no authentication\nVRF: management\nHits: 64\nLast hit: 33 seconds ago\nBytes in: 8250\nBytes out: 29862\nRequests: 23\nCommands: 42\nDuration: 7.086 seconds\nSSL Profile: none\nQoS DSCP: 0\n User Requests Bytes in Bytes out Last hit\n----------- -------------- -------------- --------------- --------------\n admin 23 8250 29862 33 seconds ago\n\nURLs\n-----------------------------------------\nManagement1 : https://192.168.199.158:443\n\narista1#\n```", "```py\n$ sudo easy_install jsonrpclib\n$ sudo pip install jsonrpclib\n```", "```py\n      #!/usr/bin/python2\n\n      from __future__ import print_function\n      from jsonrpclib import Server\n      import ssl\n\n      ssl._create_default_https_context = ssl._create_unverified_context\n\n      switch = Server(\"https://admin:arista@192.168.199.158/command-api\")\n\n      response = switch.runCmds( 1, [ \"show version\" ] )\n      print('Serial Number: ' + response[0]['serialNumber'])\n```", "```py\n [{u'memTotal': 3978148, u'internalVersion': u'4.16.6M-\n 3205780.4166M', u'serialNumber': u'<omitted>', u'systemMacAddress':\n u'<omitted>', u'bootupTimestamp': 1465964219.71, u'memFree': \n 277832, u'version': u'4.16.6M', u'modelName': u'DCS-7050QX-32-F', \n u'isIntlVersion': False, u'internalBuildId': u'373dbd3c-60a7-4736-\n 8d9e-bf5e7d207689', u'hardwareRevision': u'00.00', u'architecture': \n u'i386'}]\n```", "```py\n     print('Serial Number: ' + response[0]['serialNumber'])\n```", "```py\n$ python eapi_1.py\nSerial Number: <omitted>\n```", "```py\n      #!/usr/bin/python2\n\n      from __future__ import print_function\n      from jsonrpclib import Server\n      import ssl, pprint\n\n      ssl._create_default_https_context = ssl._create_unverified_context\n\n      # Run Arista commands thru eAPI\n      def runAristaCommands(switch_object, list_of_commands):\n          response = switch_object.runCmds(1, list_of_commands)\n          return response\n\n      switch = Server(\"https://admin:arista@192.168.199.158/command-\n    api\")\n\n      commands = [\"enable\", \"configure\", \"interface ethernet 1/3\", \n    \"switchport acc ess vlan 100\", \"end\", \"write memory\"]\n\n     response = runAristaCommands(switch, commands)\n     pprint.pprint(response)\n\n```", "```py\n$ python2 eapi_2.py\n[{}, {}, {}, {}, {}, {u'messages': [u'Copy completed successfully.']}]\n```", "```py\narista1#sh run int eth 1/3\ninterface Ethernet1/3\n    switchport access vlan 100\narista1# \n```", "```py\n$ sudo pip install pyeapi\n$ sudo pip3 install pyeapi\n```", "```py\ncat ~/.eapi.conf\n[connection:Arista1]\nhost: 192.168.199.158\nusername: admin\npassword: arista\ntransport: https\n```", "```py\n$ chmod 400 ~/.eapi.conf\n$ ls -l ~/.eapi.conf\n-r-------- 1 echou echou 94 Jan 27 18:15 /home/echou/.eapi.conf\n```", "```py\nPython 3.5.2 (default, Nov 17 2016, 17:05:23)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pyeapi\n>>> arista1 = pyeapi.connect_to('Arista1')\n```", "```py\n>>> import pprint\n>>> pprint.pprint(arista1.enable('show hostname'))\n[{'command': 'show hostname',\n 'encoding': 'json',\n 'result': {'fqdn': 'arista1', 'hostname': 'arista1'}}]\n```", "```py\n>>> arista1.config('hostname arista1-new')\n[{}]\n>>> pprint.pprint(arista1.enable('show hostname'))\n[{'command': 'show hostname',\n 'encoding': 'json',\n 'result': {'fqdn': 'arista1-new', 'hostname': 'arista1-new'}}]\n>>> arista1.config(['interface ethernet 1/3', 'description my_link'])\n[{}, {}]\n```", "```py\n>>> pprint.pprint(arista1.enable('show run'))\nTraceback (most recent call last):\n...\n File \"/usr/local/lib/python3.5/dist-packages/pyeapi/eapilib.py\", line 396, in send\n raise CommandError(code, msg, command_error=err, output=out)\npyeapi.eapilib.CommandError: Error [1002]: CLI command 2 of 2 'show run' failed: invalid command [incomplete token (at token 1: 'run')]\n>>>\n>>> pprint.pprint(arista1.enable('show running-config interface ethernet 1/3'))\nTraceback (most recent call last):\n...\npyeapi.eapilib.CommandError: Error [1002]: CLI command 2 of 2 'show running-config interface ethernet 1/3' failed: invalid command [incomplete token (at token 2: 'interface')]\n```", "```py\n>>> result = arista1.enable('show running-config')\n>>> pprint.pprint(result[0]['result']['cmds']['interface Ethernet1/3'])\n{'cmds': {'description my_link': None, 'switchport access vlan 100': None}, 'comments': []}\n```", "```py\n>>> import pyeapi\n>>> node = pyeapi.connect_to('Arista1')\n>>> vlans = node.api('vlans')\n>>> type(vlans)\n<class 'pyeapi.api.vlans.Vlans'>\n>>> dir(vlans)\n[...'command_builder', 'config', 'configure', 'configure_interface', 'configure_vlan', 'create', 'default', 'delete', 'error', 'get', 'get_block', 'getall', 'items', 'keys', 'node', 'remove_trunk_group', 'set_name', 'set_state', 'set_trunk_groups', 'values']\n>>> vlans.getall()\n{'1': {'vlan_id': '1', 'trunk_groups': [], 'state': 'active', 'name': 'default'}}\n>>> vlans.get(1)\n{'vlan_id': 1, 'trunk_groups': [], 'state': 'active', 'name': 'default'}\n>>> vlans.create(10)\nTrue\n>>> vlans.getall()\n{'1': {'vlan_id': '1', 'trunk_groups': [], 'state': 'active', 'name': 'default'}, '10': {'vlan_id': '10', 'trunk_groups': [], 'state': 'active', 'name': 'VLAN0010'}}\n>>> vlans.set_name(10, 'my_vlan_10')\nTrue\n```", "```py\narista1#sh vlan\nVLAN Name Status Ports\n----- -------------------------------- --------- -------------------------------\n1 default active\n10 my_vlan_10 active\n```", "```py\n      #!/usr/bin/env python3\n\n      import pyeapi\n\n      class my_switch():\n\n          def __init__(self, config_file_location, device):\n               # loads the config file\n               pyeapi.client.load_config(config_file_location)\n               self.node = pyeapi.connect_to(device)\n               self.hostname = self.node.enable('show hostname')[0]\n    ['result']['host name']\n              self.running_config = self.node.enable('show running-\n    config')\n\n           def create_vlan(self, vlan_number, vlan_name):\n               vlans = self.node.api('vlans')\n               vlans.create(vlan_number)\n               vlans.set_name(vlan_number, vlan_name) \n```", "```py\nPython 3.5.2 (default, Nov 17 2016, 17:05:23)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pyeapi_1\n>>> s1 = pyeapi_1.my_switch('/tmp/.eapi.conf', 'Arista1')\n>>> s1.hostname\n'arista1'\n>>> s1.running_config\n[{'encoding': 'json', 'result': {'cmds': {'interface Ethernet27': {'cmds': {}, 'comments': []}, 'ip routing': None, 'interface face Ethernet29': {'cmds': {}, 'comments': []}, 'interface Ethernet26': {'cmds': {}, 'comments': []}, 'interface Ethernet24/4': h.': \n<omitted>\n'interface Ethernet3/1': {'cmds': {}, 'comments': []}}, 'comments': [], 'header': ['! device: arista1 (DCS-7050QX-32, EOS-4.16.6M)n!n']}, 'command': 'show running-config'}]\n>>> s1.create_vlan(11, 'my_vlan_11')\n>>> s1.node.api('vlans').getall()\n{'11': {'name': 'my_vlan_11', 'vlan_id': '11', 'trunk_groups': [], 'state': 'active'}, '10': {'name': 'my_vlan_10', 'vlan_id': '10', 'trunk_groups': [], 'state': 'active'}, '1': {'name': 'default', 'vlan_id': '1', 'trunk_groups': [], 'state': 'active'}}\n>>>\n```"]