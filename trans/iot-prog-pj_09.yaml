- en: Building a Home Security Dashboard
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建家庭安全仪表板
- en: In [Chapter 7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry
    Pi Web Server*, we were introduced to the web framework CherryPy. Using CherryPy,
    we are able to turn our Raspberry Pi into a web server. In [Chapter 8](049458f1-d6ac-433a-93ab-f55501ff9523.xhtml),
    *Reading Raspberry Pi GPIO Sensor Data Using Python*, we learned how to read sensory
    data from the GPIO.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml)中，*设置树莓派Web服务器*，我们介绍了web框架CherryPy。使用CherryPy，我们可以将树莓派变成一个Web服务器。在[第8章](049458f1-d6ac-433a-93ab-f55501ff9523.xhtml)中，*使用Python读取树莓派GPIO传感器数据*，我们学会了如何从GPIO读取传感器数据。
- en: In this chapter, we will take the lessons that we learned from the previous
    two and create a home security dashboard.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从前两章学到的经验中创建一个家庭安全仪表板。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating our dashboard using CherryPy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CherryPy创建我们的仪表板
- en: Displaying sensory data on our dashboard
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的仪表板上显示传感器数据
- en: Knowledge required to complete this chapter
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成本章所需的知识
- en: The reader will need a working knowledge of the Python programming language
    to complete this chapter. A basic understanding of HTML, including CSS, is also
    required.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 读者需要对Python编程语言有一定的了解才能完成本章。还需要基本了解HTML，包括CSS。
- en: Project overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: We will build two different home security dashboards in this chapter. The first
    one will involve the use of a temperature and humidity sensor, and the next one
    will involve an active buzzer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建两个不同的家庭安全仪表板。第一个将涉及使用温度和湿度传感器，下一个将涉及使用有源蜂鸣器。
- en: This project should take a couple of hours to complete.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目应该需要几个小时才能完成。
- en: Getting started
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，需要以下内容：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派3型（2015年型号或更新型号）
- en: A USB power supply
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB电源适配器
- en: A computer monitor
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个计算机显示器
- en: A USB keyboard
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB键盘
- en: A USB mouse
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB鼠标
- en: A breadboard
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: A DHT11 temperature sensor
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT11温度传感器
- en: A latching push-button, switch, or key switch
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个锁存按钮、开关或键开关
- en: A PIR sensor
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个PIR传感器
- en: An active buzzer
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有源蜂鸣器
- en: A Raspberry Pi camera module
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派摄像头模块
- en: Creating our dashboard using CherryPy
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CherryPy创建我们的仪表板
- en: To create our home security dashboard, we will modify the code we wrote in [Chapter
    7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry Pi Web
    Server*. These modifications include adding sensory data from the GPIO—something
    we became very good at by the end of [Chapter 8](049458f1-d6ac-433a-93ab-f55501ff9523.xhtml),
    *Reading Raspberry Pi GPIO Sensor Data Using Python*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的家庭安全仪表板，我们将修改我们在[第7章](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml)中编写的代码，*设置树莓派Web服务器*。这些修改包括添加来自GPIO的传感器数据——这是我们在[第8章](049458f1-d6ac-433a-93ab-f55501ff9523.xhtml)结束时变得非常擅长的事情，*使用Python读取树莓派GPIO传感器数据*。
- en: Two of the inputs, the temperature and humidity sensor and the Pi camera, will
    require additional steps so that we can integrate them into our dashboard.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 两个输入，温度和湿度传感器以及树莓派摄像头，将需要额外的步骤，以便我们可以将它们整合到我们的仪表板中。
- en: Using the DHT11 to find temperature and humidity
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DHT11查找温度和湿度
- en: The DHT11 temperature and humidity sensor is a low-cost hobbyist-grade sensor,
    capable of providing basic measurements. The DHT11 comes in two different versions,
    the four-pin model and the three-pin model.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: DHT11温度和湿度传感器是一种低成本的业余级传感器，能够提供基本的测量。DHT11有两种不同的版本，四针模型和三针模型。
- en: 'We will be using the three-pin model for our project (see the following picture):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的项目中使用三针模型（请参阅以下图片）：
- en: '![](assets/05c744f6-b954-47ce-9212-2af4eecdfbac.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/05c744f6-b954-47ce-9212-2af4eecdfbac.png)'
- en: The library we will be using to read DHT11 data, the `Adafruit DHT` library,
    does not come pre-installed on Raspbian (as of the time of writing). To install
    it, we will clone the library's GitHub project and build it from the source.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Adafruit DHT`库来读取DHT11数据，该库在Raspbian上没有预安装（截至撰写时）。要安装它，我们将克隆库的GitHub项目并从源代码构建它。
- en: 'Open up a Terminal window, and type the following command to use `git` and
    download the source code (at the time of writing, `git` came pre-installed with
    Raspbian):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，输入以下命令使用`git`并下载源代码（撰写时，`git`已预装在Raspbian中）：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see the progress of the code downloading. Now, change directories
    by using the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到代码下载的进度。现在，使用以下命令更改目录：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will be in the `source code` directory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在`源代码`目录中。
- en: 'Build the project with the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令构建项目：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see the progress displayed in the Terminal:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在终端中看到显示的进度：
- en: '![](assets/d072cdb7-4d9b-434e-a8ff-140ffe801ade.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d072cdb7-4d9b-434e-a8ff-140ffe801ade.png)'
- en: 'If you do not receive any errors, the `Adafruit DHT` library should now be
    installed on your Raspberry Pi. To verify this, open up Thonny and check the packages:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有收到任何错误，`Adafruit DHT`库现在应该已安装在您的树莓派上。要验证这一点，打开Thonny并检查包：
- en: '![](assets/f7b5c282-0a2d-4cbb-88a3-08fd18a698b0.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7b5c282-0a2d-4cbb-88a3-08fd18a698b0.png)'
- en: 'Now, let''s wire up the circuit. Connect the DHT11 sensor to the Raspberry
    Pi as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们连接电路。将DHT11传感器连接到树莓派如下：
- en: GND from DHT11 to GND on the Raspberry Pi
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT11的GND连接到树莓派的GND
- en: VCC on DHT11 to 5V DC on the Raspberry Pi
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT11的VCC连接到树莓派的5V DC
- en: Signal on the DHT11 to GPIO pin 19
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT11的信号连接到GPIO引脚19
- en: 'See the following Fritzing diagram for more information:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅以下Fritzing图表：
- en: '![](assets/6caf4ad6-d61c-44e0-8d83-812dadc76f80.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6caf4ad6-d61c-44e0-8d83-812dadc76f80.png)'
- en: 'Once the DHT11 is wired up, it is time to write some code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦DHT11连接好，就是写一些代码的时候了：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE打开Thonny
- en: Click on New to create a new file
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建”创建一个新文件
- en: 'Type the following into the file:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中输入以下内容：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save the file as `dht-test.py`
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`dht-test.py`
- en: Run the code
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: 'You should see something similar to the following:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到类似以下的内容：
- en: '![](assets/e261501e-b9b0-4a45-a941-c1d50a855082.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e261501e-b9b0-4a45-a941-c1d50a855082.png)'
- en: Let's take a look at the code. We will start by importing the `Adafruit_DHT`
    library. We then create a new `DHT11` object, and call it `dht_sensor`. The `humidity`
    and `temperature` are set from the `read_retry` method on the `Adafruit_DHT` class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码。我们将从导入`Adafruit_DHT`库开始。然后我们创建一个新的`DHT11`对象，并将其命名为`dht_sensor`。`湿度`和`温度`是从`Adafruit_DHT`类的`read_retry`方法中设置的。
- en: We then print out the values of `humidity` and `temperature` to the shell.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在shell中打印出`湿度`和`温度`的值。
- en: Using the Pi camera to take a photo
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pi相机拍照
- en: In [Chapter 3](c4822610-2d5b-4b3a-8b29-5789ae0e7665.xhtml), *Using the GPIO
    to Connect to the Outside World*, we tried out the special Raspberry Pi camera
    module and wrote code to turn on a camera preview. It's time to put the camera
    to use.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](c4822610-2d5b-4b3a-8b29-5789ae0e7665.xhtml)中，*使用GPIO连接到外部世界*，我们尝试了特殊的树莓派相机模块，并编写了代码来打开相机预览。是时候把相机投入使用了。
- en: 'Install a Raspberry Pi camera module onto the Raspberry Pi through the CSI
    camera port (be sure to enable the camera in the Raspberry Pi Configuration screen,
    if it''s not already enabled). Let''s write some code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过CSI相机端口将树莓派相机模块安装到树莓派上（如果尚未启用，请确保在树莓派配置屏幕中启用相机）。让我们写一些代码：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on New to create a new file
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“新建”以创建新文件
- en: 'Type the following into the file:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中输入以下内容：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file as `pi-camera-test.py`
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`pi-camera-test.py`
- en: Run the code
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: This program imports `PiCamera` and sleeps before creating a new `PiCamera`
    object called `pi_cam`. The `start_preview` method shows us what the camera sees
    in a full screen.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序导入`PiCamera`并在创建一个名为`pi_cam`的新`PiCamera`对象之前休眠。`start_preview`方法向我们显示相机在全屏中看到的内容。
- en: The capture method creates a new image file called `myimage.png`, and stores
    it in the default directory `/home/pi`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获方法创建一个名为`myimage.png`的新图像文件，并将其存储在默认目录`/home/pi`中。
- en: We have `5` seconds to position our camera before a photo is taken.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有5秒的时间来调整相机的位置，然后拍照。
- en: 'The following is a picture of my work area, taken with the Raspberry Pi camera:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用树莓派相机拍摄的我的工作区的照片：
- en: '![](assets/501926f5-b41a-4fb4-bb94-da115688f2e9.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/501926f5-b41a-4fb4-bb94-da115688f2e9.png)'
- en: Creating our dashboard using CherryPy
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CherryPy创建我们的仪表板
- en: In [Chapter 7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry
    Pi Web Server*, we created a weather dashboard using the Bootstrap framework with
    the `WeatherDashboardHTML.py` file. We will revisit that code and modify it for
    our home security dashboard.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml)中，*设置树莓派Web服务器*，我们使用Bootstrap框架和`WeatherDashboardHTML.py`文件创建了一个天气仪表板。我们将重新访问该代码，并修改为我们的家庭安全仪表板。
- en: 'To create our home security dashboard, do the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的家庭安全仪表板，请执行以下操作：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on New to create a new file
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“新建”以创建新文件
- en: 'Type the following into the file:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中输入以下内容：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the file as `security-dashboard.py`
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`security-dashboard.py`
- en: Do not run the code yet, as we still have to create the `SecurityData` class.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尚未运行代码，因为我们还需要创建`SecurityData`类。
- en: As you can see, we've made a few changes to `WeatherDashboardHTML.py` in order
    to create `security-dashboard.py`. Before we run the code, let's point out a few
    of the changes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们对`WeatherDashboardHTML.py`进行了一些更改，以创建`security-dashboard.py`。在运行代码之前，让我们指出一些更改。
- en: 'The most obvious change is the use of the `SecurityData` class. As you can
    imagine, this class will be used to obtain data for our dashboard:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最明显的变化是使用了`SecurityData`类。可以想象，这个类将用于获取我们仪表板的数据：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We use the following line to automatically refresh our page every `30` seconds
    (we did not automatically refresh our weather dashboard, as weather data does
    not change often):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下行来每30秒自动刷新我们的页面（我们没有自动刷新我们的天气仪表板，因为天气数据不经常变化）：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For our home security dashboard, we use a bit of CSS magic to represent a blinking
    LED. This is accomplished by the adding the `led.css` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的家庭安全仪表板，我们使用一些CSS魔术来表示闪烁的LED。这是通过添加`led.css`文件来实现的：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For the data fields, we will access methods from our `SecurityData` object.
    We will go into more detail on these methods in the upcoming section. For our
    main section, we will create a dictionary called `conf`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据字段，我们将从我们的`SecurityData`对象中访问方法。我们将在接下来的部分详细介绍这些方法。对于我们的主要部分，我们将创建一个名为`conf`的字典：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We use the `conf` dictionary to pass configuration data to the `cherrypy quickstart` method.
    This configuration data allows us to use the static files `led.css`, `intruder.png`,
    `all-clear.png`, and `not-armed.png` with our CherryPy server.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`conf`字典将配置数据传递给`cherrypy quickstart`方法。此配置数据允许我们在CherryPy服务器中使用静态文件`led.css`，`intruder.png`，`all-clear.png`和`not-armed.png`。
- en: The CSS file `led.css` was mentioned previously. The other three files are self-described
    images that are used in our dashboard.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 先前提到了CSS文件`led.css`。其他三个文件是我们仪表板中使用的自描述图像。
- en: In order to use static files or directories with CherryPy, you must create and
    then pass in configuration information. An absolute path (as opposed to a relative
    path) must be part of the configuration information.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在CherryPy中使用静态文件或目录，您必须创建并传递配置信息。配置信息必须包含绝对路径（而不是相对路径）。
- en: The configuration information states that the CSS and image files are located
    in the directories named `styles` and `images`, respectively. These directories
    are both located in the `/home/pi` directory.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 配置信息说明CSS和图像文件分别位于名为`styles`和`images`的目录中。这些目录都位于`/home/pi`目录中。
- en: 'The following is a screenshot of the files in the `images` directory (be sure
    to place your files in the correct directories):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`images`目录中文件的屏幕截图（请确保将文件放在正确的目录中）：
- en: '![](assets/54f70c24-38f3-45dd-9eee-7db79364230f.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/54f70c24-38f3-45dd-9eee-7db79364230f.png)'
- en: Displaying sensory data on our dashboard
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的仪表板上显示传感器数据
- en: To provide our dashboard data, we will create a new Python file called `SecurityData.py`
    where we will store the `SecurityData` class. Before we do that, let's build our
    circuit.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供我们的仪表板数据，我们将创建一个名为`SecurityData.py`的新Python文件，我们将在其中存储`SecurityData`类。在这之前，让我们先建立我们的电路。
- en: Home security dashboard with a temperature sensor
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有温度传感器的家庭安全仪表板
- en: 'We will build our first version of the home security dashboard with a DHT11
    temperature and humidity sensor, a PIR sensor, and a latching button (or key switch).
    The following is the Fritzing diagram for our home security dashboard:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用DHT11温湿度传感器、PIR传感器和一个latching按钮（或钥匙开关）来构建家庭安全仪表板的第一个版本。以下是我们家庭安全仪表板的Fritzing图表：
- en: '![](assets/56fe1cf8-ea5b-4089-9019-42d61ca7b0b4.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/56fe1cf8-ea5b-4089-9019-42d61ca7b0b4.png)'
- en: 'The circuit connects as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 电路连接如下：
- en: GND from DHT11 to GND
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT11的GND连接到GND
- en: VCC on DHT11 to 5V DC
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT11的VCC连接到5V直流电源
- en: Signal on the DHT11 to GPIO pin 19
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT11的信号连接到GPIO引脚19
- en: GND from PIR sensor to GND
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PIR传感器的GND连接到GND
- en: VCC on PIR sensor to 5V DC
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PIR传感器的VCC连接到5V直流电源
- en: Signal on PIR sensor to GPIO pin4
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PIR传感器的信号连接到GPIO引脚4
- en: One end of the latching button to GPIO pin 8
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉atching按钮的一端连接到GPIO引脚8
- en: The other end of the latching button to GND
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉atching按钮的另一端接地
- en: Pi camera module to CSI port (not shown)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派摄像头模块连接到CSI端口（未显示）
- en: 'Following is a photo of our circuit. One thing to note is the separate breadboard
    for our DHT11 sensor (easier to fit on a micro breadboard), as well as the key
    switch in place of a latching button:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们电路的照片。需要注意的一点是我们为DHT11传感器使用了单独的面包板（更容易放在微型面包板上），以及钥匙开关代替latching按钮：
- en: '![](assets/04677e64-df43-436f-a745-76726f0485fb.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/04677e64-df43-436f-a745-76726f0485fb.png)'
- en: 'Now it''s time to write the code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候编写代码了：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on New to create a new file
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建”创建一个新文件
- en: 'Type the following into the file:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容输入文件：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the file as `SecurityData.py`
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`SecurityData.py`
- en: Run the code
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: You should get an output to the shell indicating the `temperature` and `humidity`
    level in the room, an `on` or `off` indicating the position of the switch, and
    the current time. Try turning the switch on and off to see if the value changes
    in the output.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在shell中得到一个输出，指示房间中的`温度`和`湿度`水平，一个表示开关位置的`on`或`off`，以及当前时间。尝试打开和关闭开关，看看输出是否发生变化。
- en: Before we run the dashboard code (`security-dashboard.py`), let's review the
    `SecurityData` class. As we can see, the first part of the code is standard boilerplate
    code that we have already become familiar with. The `getRoomConditions` and `getDetectedMessage` methods
    are either self-explanatory or something we have already covered.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行仪表板代码（`security-dashboard.py`）之前，让我们先回顾一下`SecurityData`类。正如我们所看到的，代码的第一部分是我们已经熟悉的标准样板代码。`getRoomConditions`和`getDetectedMessage`方法要么是不言自明的，要么是我们已经讨论过的内容。
- en: 'Our `getArmedStatus` method does a little trick to keep our code simple and
    compact:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`getArmedStatus`方法做了一个小技巧，以保持我们的代码简单而紧凑：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can see that `getArmedStatus` returns either `on` or `off`, not `True` or
    `False` as most methods with a binary return do. We do this for the armed section
    of our dashboard code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`getArmedStatus`返回的是`on`或`off`，而不是大多数具有二进制返回的方法返回的`True`或`False`。我们这样做是为了我们仪表板代码的武装部分。
- en: 'Here is the HTML-generated code from the `index` method of the `SecurityDashboard`
    class:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`SecurityDashboard`类的`index`方法生成的HTML代码：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see, the `getArmedStatus` method is called during the construction
    of the a div tag in place of the CSS class name. The words `on` and `off` refer
    to CSS classes in our `led.css` file. When `on` is returned, we get a blinking
    red LED-type graphic. When `off` is returned, we get a black dot.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`getArmedStatus`方法在构建div标签时被调用，以替代CSS类名。单词`on`和`off`指的是我们`led.css`文件中的CSS类。当返回`on`时，我们得到一个闪烁的红色LED类型图形。当返回`off`时，我们得到一个黑点。
- en: Thus, the position of the latching switch (or key switch) determines whether
    or not the div tag has a CSS class name of `on` or a CSS class name of `off` through
    the `getArmedStatus` method of the `SecurityData` class.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，拉atching开关（或钥匙开关）的位置决定了div标签是否具有CSS类名`on`或CSS类名`off`，通过`SecurityData`类的`getArmedStatus`方法。
- en: 'Our code gets really interesting with the `getSecurityImage` method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码在`getSecurityImage`方法中变得非常有趣：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Our first conditional statement checks to see whether the circuit is armed (switch
    is in the `on` position). If it's not armed, then all that we need to do is set
    the detected message to nothing, and return a reference to the `not-armed.png`
    file (`/not-armed.png` was defined in the configuration information that we set
    up in the `security-dashboard.py` file).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个条件语句检查电路是否处于武装状态（开关处于“on”位置）。如果没有武装，那么我们只需要将检测到的消息设置为空，并返回对`not-armed.png`文件的引用（`/not-armed.png`在我们在`security-dashboard.py`文件中设置的配置信息中定义）。
- en: 'If we take a look at the code in the `SecurityDashboard` class (`security-dashboard.py`
    file), we can see that the `getSecurityImage` method is called near the bottom
    of the generated HTML code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`SecurityDashboard`类（`security-dashboard.py`文件）中的代码，我们可以看到`getSecurityImage`方法在生成的HTML代码的底部附近被调用：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the switch in our circuit is not `on`, we will get the following in our
    dashboard footer with no description after it (blank `detected_message` value):'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电路中的开关没有打开，我们将在仪表板页脚看到以下内容，后面没有描述（空的`detected_message`值）：
- en: '![](assets/0a3c09bd-7a1f-4de6-b4c2-b55576a6eb85.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0a3c09bd-7a1f-4de6-b4c2-b55576a6eb85.png)'
- en: The second conditional statement in our code is reached when the switch is `on` and
    motion has been detected. In this case, we set the resolution of our Pi camera
    and then take a photo.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们代码中的第二个条件语句是在开关处于`on`并且检测到运动时触发的。在这种情况下，我们设置我们树莓派摄像头的分辨率，然后拍照。
- en: We probably could have set the resolution of the Pi camera during the instantiation
    of the class, and this would probably have made more sense. However, putting this
    line here makes it easier to adjust the resolution prior to completing the code,
    as the line exists in the method we are focusing on.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能在类的实例化过程中设置了树莓派摄像头的分辨率，这可能更有意义。但是，将这行放在这里使得在完成代码之前调整分辨率更容易，因为这行存在于我们关注的方法中。
- en: We call the file `intruder.png` and store it in the location where the configuration
    code in the `security-dashboard.py` file can find it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将文件命名为`intruder.png`，并将其存储在`security-dashboard.py`文件中的配置代码可以找到的位置。
- en: We also create a `detected_message` value based on the current time. This message
    will provide a timestamp to the image we acquire from the Pi camera.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还根据当前时间创建了一个`detected_message`值。这条消息将为我们从树莓派摄像头获取的图像提供时间戳。
- en: 'The final `else:` statement is where we return `/all-clear.png`. By the time
    our code has reached this point, we know that the switch is `on` and there hasn''t
    been any motion detected. The image we will see at the footer of our dashboard
    will be the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`else:`语句是我们返回`/all-clear.png`的地方。到达这一点时，我们知道开关是“开启”的，并且没有检测到任何运动。我们在仪表板页脚将看到以下图像：
- en: '![](assets/681072ff-ecb3-46a7-8081-eaf54ec7bddd.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/681072ff-ecb3-46a7-8081-eaf54ec7bddd.png)'
- en: As with the `NOT ARMED` message, there won't be a description after `ALL CLEAR`.
    We will only see this graphic when the switch is `on` and the PIR sensor did not
    pick up any motion (`motion_detected` is `false`).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与“NOT ARMED”消息一样，在“ALL CLEAR”后面不会有描述。只有当开关处于“开启”状态且PIR传感器没有检测到任何运动（`motion_detected`为`false`）时，我们才会看到这个图形。
- en: Now, let's run the dashboard code. If you haven't done so already, stop the
    `SecurityData` program by clicking on the red button. Click on the tab for the
    `security-dashboard.py` file, and click Run. Wait a few seconds in order to let
    CherryPy get running.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行仪表板代码。如果您还没有这样做，请点击红色按钮停止`SecurityData`程序。点击`security-dashboard.py`文件的选项卡，然后点击运行。等待几秒钟，以便让CherryPy运行起来。
- en: 'Open up a web browser, and navigate to the following address:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个网络浏览器，然后导航到以下地址：
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With the switch in the `off` position, you should see the following dashboard
    screen:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将开关置于“关闭”位置，您应该看到以下仪表板屏幕：
- en: '![](assets/2747d648-0f9a-443a-b1c1-6b41b37f7b57.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2747d648-0f9a-443a-b1c1-6b41b37f7b57.png)'
- en: As we can see, the LED under the Armed section is black, and we get a `NOT ARMED`
    message in the footer. We can also see that `temperature` and `humidity` are displayed,
    even though the system is not armed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，武装部分下的LED是黑色的，在页脚中会得到一个“NOT ARMED”消息。我们还可以看到`temperature`和`humidity`的显示，即使系统没有武装。
- en: The Last Check box shows us when the code last checked the status of the switch.
    If you wait 30 seconds, you should see the page refresh with the same information.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个复选框显示了代码上次检查开关状态的时间。如果你等待30秒，你应该看到页面刷新并显示相同的信息。
- en: 'Now, turn on the switch, and stand back so that the PIR sensor does not detect
    you. You should see a screen similar to the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开开关，站在一边，这样PIR传感器就不会检测到你。你应该看到一个类似于以下的屏幕：
- en: '![](assets/59607798-8731-417c-a215-12ee661d22f3.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/59607798-8731-417c-a215-12ee661d22f3.png)'
- en: You will notice that the LED in the Armed section now turns to a flashing red,
    the `temperature` and `humidity` readings are either the same or slightly different,
    the Last Check has been updated to the current time, and the `ALL CLEAR` message
    appears in the footer.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到武装部分的LED现在变成了闪烁的红色，`temperature`和`humidity`读数要么相同，要么略有不同，上次检查已更新到当前时间，并且页脚中出现了`ALL
    CLEAR`消息。
- en: 'Let''s see if we can capture an intruder. Point the Pi camera to a doorway,
    and wait for the PIR sensor to trigger:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否能抓住入侵者。将树莓派摄像头对准门口，等待PIR传感器触发：
- en: '![](assets/d3e9d7b6-cdec-4b3d-8562-6f73a6ccaf28.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d3e9d7b6-cdec-4b3d-8562-6f73a6ccaf28.png)'
- en: It appears that we have caught our intruder!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 看来我们已经抓到了入侵者！
- en: Home security dashboard with quick response
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有快速响应的家庭安全仪表板
- en: You may have noticed that it takes a really long time for our page to refresh.
    This is due to the 30-second refresh time, of course, as well as the long time
    it takes for the DHT11 to read a value.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们的页面刷新需要很长时间。当然，这是由于30秒的刷新时间，以及DHT11读取数值所需的长时间。
- en: Let's change our code to make it quicker, and give it a buzzer to scare away
    an intruders.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变我们的代码，使其更快，并给它一个蜂鸣器来吓跑入侵者。
- en: Replace the DHT11 with a buzzer connected to GPIO pin 17 (we shouldn't need
    a Fritzing diagram for this simple change).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 用连接到GPIO引脚17的蜂鸣器替换DHT11（对于这个简单的更改，我们不需要Fritzing图）。
- en: 'We will start by creating the `SecurityDataQuick` data class:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建`SecurityDataQuick`数据类：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on New to create a new file
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建”以创建一个新文件
- en: 'Type the following into the file:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中键入以下内容：
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the file as `SecurityDataQuick.py`
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`SecurityDataQuick.py`
- en: Run the code
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: In our shell, we should see the values of the switch and current time. Stop
    the program by clicking on the red button.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的shell中，我们应该看到开关和当前时间的值。通过点击红色按钮停止程序。
- en: As we can see, there have been a few changes. One change we did not make was
    changing the class name. Keeping it as `SecurityData` means fewer changes for
    our dashboard code later on.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，已经发生了一些变化。我们没有做的一个变化是更改类名。将其保持为`SecurityData`意味着以后对我们的仪表板代码的更改更少。
- en: We added the library for the `GPIO Zero` buzzer, and have removed any code relating
    to the DHT11 sensor. We have also created a new method called `sound_buzzer`,
    which we will call in the event that an intruder is detected.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了`GPIO Zero`蜂鸣器的库，并删除了与DHT11传感器相关的任何代码。我们还创建了一个名为`sound_buzzer`的新方法，当检测到入侵者时我们将调用它。
- en: A new variable called `alarm_status` has been added, with a corresponding `getAlarmStatus` method.
    We have moved the core logic of our class to this method (away from `getSecurityImage`),
    as it is here where we check on the status of our switch and PIR sensor. The variable,
    `alarm_status`, is used elsewhere to determine if a photo is to be taken. We also
    sound the alarm in this method if an intruder is detected.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个名为`alarm_status`的新变量，以及相应的`getAlarmStatus`方法。我们将类的核心逻辑移到了这个方法中（远离`getSecurityImage`），因为在这里我们检查开关和PIR传感器的状态。变量`alarm_status`在其他地方用于确定是否要拍照。如果检测到入侵者，我们还会在这个方法中发出警报。
- en: As a result of adding the new method, we change `getSecurityImage`. By using
    `alarm_status` in the `getSecurityImage` method, we do not need to check the status
    of the sensors. We may now use `getSecurityImage` for its intended use—taking
    a photo if an intruder has been detected.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加新方法，我们更改了`getSecurityImage`。通过在`getSecurityImage`方法中使用`alarm_status`，我们无需检查传感器的状态。现在我们可以将`getSecurityImage`用于其预期用途——在检测到入侵者时拍照。
- en: 'It''s now time to change the dashboard code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更改仪表板代码了：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单|编程|Thonny Python IDE打开Thonny
- en: Click on New to create a new file
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“新建”以创建新文件
- en: 'Type the following into the file:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中输入以下内容：
- en: '[PRE17]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the file as `SecurityDataQuick.py`
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`SecurityDataQuick.py`
- en: Run the code
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: Navigate back to your web browser and refresh the dashboard page
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的网络浏览器并刷新仪表板页面
- en: 'Our dashboard should now match the following screenshots:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的仪表板现在应该与以下截图匹配：
- en: '![](assets/57ba904c-a2b4-411b-bff3-8947fa32c3a3.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57ba904c-a2b4-411b-bff3-8947fa32c3a3.png)'
- en: '![](assets/3990c950-4f8d-47fd-a2e8-f7c7526f3164.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3990c950-4f8d-47fd-a2e8-f7c7526f3164.png)'
- en: '![](assets/01356c4e-7034-4ecf-8ad8-52a1258fc0dc.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/01356c4e-7034-4ecf-8ad8-52a1258fc0dc.png)'
- en: Our dashboard should refresh every two seconds instead of 30, and a buzzer should
    sound when motion is detected in armed mode.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的仪表板应该每两秒刷新一次，而不是30秒，当处于武装模式时检测到运动时应该发出蜂鸣器声音。
- en: 'Let''s take a look at the code. The changes to our dashboard are pretty self-explanatory.
    Of note, however, is the change to the middle box on our dashboard:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码。我们仪表板的更改相当容易理解。但值得注意的是我们仪表板上中间框的更改：
- en: '[PRE18]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We replaced room `temperature` and `humidity` with the status of the switch
    and PIR sensor through the `getAlarmStatus` method. With this change, we are able
    to use the `getAlarmStatus` method as our `initialization` method where we set
    the status of the `SecurityData` class variable `alarm_status`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`getAlarmStatus`方法将房间的`温度`和`湿度`替换为开关和PIR传感器的状态。通过这种更改，我们可以使用`getAlarmStatus`方法作为我们的`初始化`方法，其中我们设置`SecurityData`类变量`alarm_status`的状态。
- en: If we really wanted to be sticklers about it, we could change our code so that
    we initialize the `SecurityData` class with the values of the switch and PIR sensor.
    As it stands, `SecurityData` is more of a utility type class where certain methods
    must be called before others. We'll let it slide for now.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们真的想要一丝不苟，我们可以更改我们的代码，以便使用开关和PIR传感器的值来初始化`SecurityData`类。目前，`SecurityData`更像是一种实用类，其中必须先调用某些方法。我们暂且放过它。
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As we can see, building a security application with the Raspberry Pi is pretty
    easy. Although we our viewing our dashboard and hosting our sensors on the same
    Raspberry Pi, it is not too difficult to set up the Raspberry Pi to serve up the
    dashboard to other computers in your network (or even the internet). In [Chapter
    10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing to Web Services*,
    we will take our interaction with
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，使用树莓派构建安全应用程序非常容易。尽管我们正在查看我们的仪表板并在同一台树莓派上托管我们的传感器，但将树莓派设置为向网络中的其他计算机（甚至是互联网）提供仪表板并不太困难。在[第10章](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml)中，*发布到Web服务*，我们将与
- en: sensory data a step further and publish it to the internet.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 将传感器数据进一步处理并发布到互联网。
- en: Questions
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: True or false? The DHT11 sensor is an expensive and highly accurate sensor for
    temperature and humidity.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？DHT11传感器是一种昂贵且高精度的温湿度传感器。
- en: True or false? The DHT11 sensor can detect UV rays from the sun.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？DHT11传感器可以检测到来自太阳的紫外线。
- en: True or false? Code needed to run the DHT11 comes pre-installed with Raspbian.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？运行DHT11所需的代码已预装在Raspbian中。
- en: How do you set the resolution of the Pi camera module?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何设置Pi摄像头模块的分辨率？
- en: How do you set up CherryPy so that it can access local static files?
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何设置CherryPy以便可以访问本地静态文件？
- en: How do you set up an automatic refresh for a web page?
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何设置网页的自动刷新？
- en: True or false? Through the use of CSS, we are able to simulate a flashing LED.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？通过使用CSS，我们可以模拟闪烁的LED。
- en: What is the purpose of the `SecurityData` class?
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “SecurityData”类的目的是什么？
- en: Who or what did we find as our intruder?
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们找到了谁或什么作为我们的入侵者？
- en: If we wanted to be sticklers, how would we change our `SecurityData` class?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要一丝不苟，我们将如何更改我们的`SecurityData`类？
- en: Further reading
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The refresh method used in our code is effective, but a little clunky. Our dashboards
    may be improved through the use of AJAX code, where the fields are updated but
    not the page. Please consult the CherryPy documentation for further information.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们代码中使用的刷新方法很有效，但有点笨拙。我们的仪表板可以通过使用AJAX代码进行改进，其中字段被更新但页面不更新。请查阅CherryPy文档以获取更多信息。
