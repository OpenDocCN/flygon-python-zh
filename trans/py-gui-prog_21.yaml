- en: Implementing Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现动画
- en: 'In this chapter, you will learn how to apply motion to a given graphic image,
    hence implementing animation. Animations play a major role in explaining the practical
    workings of any machine, process, or system. In this chapter, we will be covering
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何对给定的图形图像应用运动，从而实现动画。动画在解释任何机器、过程或系统的实际工作中起着重要作用。在本章中，我们将涵盖以下主题：
- en: Displaying a 2D graphical picture
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示2D图形图片
- en: Making a ball move down on the click of a button
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击按钮使球移动
- en: Making a bouncing ball
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作一个弹跳的球
- en: Making a ball animate as per the specified curve
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使球根据指定的曲线进行动画
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: To view and manage 2D graphical items in Python, we need to make use of a class
    called `QGraphicsScene`. In order to display the contents of `QGraphicsScene`,
    we need the help of another class, called `QGraphicsView`. Basically, `QGraphicsView`
    provides a scrollable viewport to display the contents of `QGraphicsScene`. `QGraphicsScene` acts
    as a container for several graphical items. It also provides several standard
    shapes, such as rectangles and ellipses, including text items. One more thing: the
    QGraphicsScene uses OpenGL for rendering the graphics. The OpenGL is very efficient
    for displaying images and performing multimedia processing tasks. The `QGraphicsScene`
    class provides several methods that help in adding or removing graphical items
    from the scene. That is, you can add any graphical item to the scene by calling
    the `addItem` function. Similarly, to remove an item from the graphics scene,
    you can call the `removeItem` function.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中查看和管理2D图形项，我们需要使用一个名为`QGraphicsScene`的类。为了显示`QGraphicsScene`的内容，我们需要另一个名为`QGraphicsView`的类的帮助。基本上，`QGraphicsView`提供了一个可滚动的视口，用于显示`QGraphicsScene`的内容。`QGraphicsScene`充当多个图形项的容器。它还提供了几种标准形状，如矩形和椭圆，包括文本项。还有一点：`QGraphicsScene`使用OpenGL来渲染图形。OpenGL非常高效，可用于显示图像和执行多媒体处理任务。`QGraphicsScene`类提供了几种方法，可帮助添加或删除场景中的图形项。也就是说，您可以通过调用`addItem`函数向场景添加任何图形项。同样，要从图形场景中删除项目，可以调用`removeItem`函数。
- en: Implementing animation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现动画
- en: 'To apply animation in Python, we will be making use of the `QPropertyAnimation`
    class. The `QPropertyAnimation` class in PyQt helps in creating and executing
    animations in PyQt. The `QPropertyAnimation` class implements animation by manipulating
    Qt properties such as a widget''s geometry, position, and so on. The following
    are a few of the `QPropertyAnimation` methods:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中应用动画，我们将使用`QPropertyAnimation`类。PyQt中的`QPropertyAnimation`类帮助创建和执行动画。`QPropertyAnimation`类通过操纵Qt属性（如小部件的几何形状、位置等）来实现动画。以下是`QPropertyAnimation`的一些方法：
- en: '`start()`: This method begins the animation'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start()`: 该方法开始动画'
- en: '`stop()`: This method ends the animation'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop()`: 该方法结束动画'
- en: '`setStartValue()`: This method is used to assign the starting value of the
    animation'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setStartValue()`: 该方法用于指定动画的起始值'
- en: '`setEndValue()`: This method is used to assign the ending value of the animation'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setEndValue()`: 该方法用于指定动画的结束值'
- en: '`setDuration()`: This method is used to set the duration of the animation in
    milliseconds'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setDuration()`: 该方法用于设置动画的持续时间（毫秒）'
- en: '`setKeyValueAt()`: This method creates a keyframe at the given value'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setKeyValueAt()`: 该方法在给定值处创建关键帧'
- en: '`setLoopCount()`: This method sets the count of the repetitions desired in
    the animation'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setLoopCount()`: 该方法设置动画中所需的重复次数'
- en: Displaying a 2D graphical image
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示2D图形图像
- en: In this recipe, you will learn to display a 2D graphical image. We assume that
    you have a graphical image by the name `scene.jpg` on your machine, and you will
    learn how it is displayed on the form. The focus of this recipe is to understand
    how the Graphics View widget is used to display an image.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何显示2D图形图像。我们假设您的计算机上有一个名为`scene.jpg`的图形图像，并将学习如何在表单上显示它。本教程的重点是了解如何使用Graphics
    View小部件来显示图像。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The procedure for displaying graphics is very simple. You first need to create
    an object of `QGraphicsScene`, which in turn makes use of the `QGraphicsView`
    class to show its contents. Graphical items, including images, are then added
    to the `QGraphicsScene` class by invoking the `addItem` method of the `QGraphicsScene`
    class. Here are the steps to display a 2D graphical image on the screen:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 显示图形的过程非常简单。您首先需要创建一个`QGraphicsScene`对象，该对象又利用`QGraphicsView`类来显示其内容。然后通过调用`QGraphicsScene`类的`addItem`方法向`QGraphicsScene`类添加图形项，包括图像。以下是在屏幕上显示2D图形图像的步骤：
- en: Create a new application based on the Dialog without Buttons template.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于无按钮对话框模板创建一个新应用程序。
- en: Drag and drop a Graphics View widget onto it.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Graphics View小部件拖放到其中。
- en: 'Save the application with the name `demoGraphicsView.ui`. The form will appear
    as shown in the following screenshot:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoGraphicsView.ui`。表单将显示如下截图所示：
- en: '![](assets/bae96b96-83cd-4d38-9ed1-0185b3781174.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bae96b96-83cd-4d38-9ed1-0185b3781174.png)'
- en: The `pyuic5` command utility converts the `.ui` (XML) file into Python code.
    The generated Python script, `demoGraphicsView.py`, can be seen in the source
    code bundle of this book.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyuic5`命令实用程序将`.ui`（XML）文件转换为Python代码。生成的Python脚本`demoGraphicsView.py`可以在本书的源代码包中找到。'
- en: 'Create a Python script named `callGraphicsView.pyw` that imports the code,
    `demoGraphicsView.py`, to invoke the user interface design, loads an image from
    the disk, and displays it through Graphics View. The Python script file, `callGraphicsView.pyw`, will
    include the following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callGraphicsView.pyw`的Python脚本，导入代码`demoGraphicsView.py`，以调用用户界面设计，从磁盘加载图像，并通过Graphics
    View显示它。Python脚本文件`callGraphicsView.pyw`将包括以下代码：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this application, you are using Graphics View to display an image. You add
    a graphics scene to the Graphics View widget, and you add `QGraphicsPixmapItem`.
    If you want to add an image to the graphics scene, you need to provide it in the
    form of a `pixmap` item. First, you need to represent the image as `pixmap`, and
    then you make it appear as a `pixmap` item before adding it to the graphics scene.
    You need to create an instance of `QPixmap` and specify the image that you want
    to display through its `load()` method. Then, you tag the `pixmap` item as `pixmapitem`
    by passing `pixmap` to the constructor of `QGraphicsPixmapItem`. `pixmapitem`
    is then added to the scene via `addItem`. If `pixmapitem` is bigger than `QGraphicsView`,
    scrolling is enabled automatically.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在此应用程序中，您正在使用Graphics View来显示图像。您向Graphics View小部件添加了一个图形场景，并添加了`QGraphicsPixmapItem`。如果要将图像添加到图形场景中，需要以`pixmap`项目的形式提供。首先，您需要将图像表示为`pixmap`，然后在将其添加到图形场景之前将其显示为`pixmap`项目。您需要创建`QPixmap`的实例，并通过其`load()`方法指定要通过其显示的图像。然后，通过将`pixmap`传递给`QGraphicsPixmapItem`的构造函数，将`pixmap`项目标记为`pixmapitem`。然后，通过`addItem`将`pixmapitem`添加到场景中。如果`pixmapitem`比`QGraphicsView`大，则会自动启用滚动。
- en: In the previous code, I used an image with the filename `scene.jpg`. Please
    replace the filename with an image filename that is available on your disk, or
    nothing will be displayed on the screen.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我使用了文件名为`scene.jpg`的图像。请将文件名替换为您的磁盘上可用的图像文件名，否则屏幕上将不显示任何内容。
- en: 'The following methods are used:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用了以下方法：
- en: '`QGraphicsView.setScene`: This method (self, `QGraphicsScene` scene) assigns the
    scene that is supplied as a parameter to the `GraphicView` instance for display.
    If the scene is already being viewed, this function does nothing. When a scene
    is set on a view, the `QGraphicsScene.changed` signal is generated, and the view''s
    scrollbars are adjusted to fit the size of the scene.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QGraphicsView.setScene`：此方法（self，`QGraphicsScene` scene）将提供的场景分配给`GraphicView`实例以进行显示。如果场景已经在视图中显示，则此函数不执行任何操作。设置场景时，将生成`QGraphicsScene.changed`信号，并调整视图的滚动条以适应场景的大小。'
- en: '`addItem`: This method adds the specified item to the scene. If an item is
    already in a different scene, it will first be removed from its old scene and
    then added to the current scene. On running the application, the `scene.jpg` image
    will be displayed via the `GrahicsView` widget, as shown in the following screenshot:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addItem`：此方法将指定的项目添加到场景中。如果项目已经在不同的场景中，则首先将其从旧场景中移除，然后添加到当前场景中。运行应用程序时，将通过`GrahicsView`小部件显示`scene.jpg`图像，如下面的屏幕截图所示：'
- en: '![](assets/70652385-2de8-405b-b118-4b9f403460bf.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/70652385-2de8-405b-b118-4b9f403460bf.png)'
- en: Making a ball move down on the click of a button
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点击按钮使球移动
- en: In this recipe, you will understand how a basic animation is applied on an object.
    This recipe will consist of a push button and a ball, and when the push button
    is pressed, the ball will start animating towards the ground.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将了解如何在对象上应用基本动画。本教程将包括一个按钮和一个球，当按下按钮时，球将开始向地面动画。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'To make this recipe, we will be making use of the `QPropertyAnimation` class.
    The `setStartValue()` and `setEndValue()` methods of the `QPropertyAnimation`
    class will be used to define the coordinates where the animation needs to start
    and end, respectively. The `setDuration()` method will be invoked to specify the
    delay in milliseconds between every animation move. The following is the step-by-step
    procedure to apply an animation:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了制作这个教程，我们将使用`QPropertyAnimation`类。`QPropertyAnimation`类的`setStartValue()`和`setEndValue()`方法将用于分别定义动画需要开始和结束的坐标。`setDuration()`方法将被调用以指定每次动画移动之间的延迟时间（以毫秒为单位）。以下是应用动画的逐步过程：
- en: Create a new application based on the Dialog without Buttons template.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于无按钮对话框模板创建一个新应用程序。
- en: Drag and drop a Label widget and one Push Button widget onto the form.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个Label小部件和一个Push Button小部件拖放到表单上。
- en: Set the text property of the Push Button widget to `Move Down`. We assume that
    you have a ball image on your computer with the filename `coloredball.jpg`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为`Move Down`。我们假设您的计算机上有一个名为`coloredball.jpg`的球形图像。
- en: Select its pixmap property to assign the ball image to the Label widget.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择其pixmap属性以将球图像分配给Label小部件。
- en: In the pixmap property, out of the two options, Choose Resource and Choose File,
    select the Choose File option, browse your disk, and select the `coloredball.jpg` file.
    The image of the ball will appear in place of the Label widget.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在pixmap属性中，从两个选项中选择Resource和Choose File，选择Choose File选项，浏览您的磁盘，并选择`coloredball.jpg`文件。球的图像将出现在Label小部件的位置。
- en: Set the objectName property of the Push Button widget to `pushButtonPushDown`
    and that of the Label widget to `labelPic`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为`pushButtonPushDown`，Label小部件的objectName属性设置为`labelPic`。
- en: 'Save the application with the name `demoAnimation1.ui`. The application will
    appear as shown in the following screenshot:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`demoAnimation1.ui`保存应用程序。应用程序将显示如下屏幕截图所示：
- en: '![](assets/d58c8775-5b6f-4b2f-8c3a-cdeefbcef278.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d58c8775-5b6f-4b2f-8c3a-cdeefbcef278.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file that needs to be converted into Python code. On application of
    the `pyuic5` command utility, the `.ui` file is converted into a Python script.
    The generated Python script, `demoAnimation1.py`, can be seen in the source code
    bundle of this book.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个需要转换为Python代码的XML文件。在应用`pyuic5`命令实用程序时，`.ui`文件将被转换为Python脚本。生成的Python脚本`demoAnimation1.py`可以在本书的源代码包中看到。
- en: Treat the `demoAnimation1.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoAnimation1.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callAnimation1.pyw` and import the
    `demoAnimation1.py` code into it:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callAnimation1.pyw`的Python文件，并将`demoAnimation1.py`代码导入其中：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You can see that the click() event of the Push Button widget with the objectName
    property `pushButtonMoveDown` is connected to the `startAnimation` method; when
    the push button is clicked, the `startAnimation` method is invoked. In the `startAnimation` method,
    you create an object of the `QPropertyAnimation` class and name it `anim`. While
    creating the `QPropertyAnimation` instance, you pass two arguments; the first
    is the Label widget to which you want to apply the animation and the second is
    the property that defines the object's attribute to which you want to apply the
    animation to the object's attribute. Because you want to apply an animation to
    the ball's geometry, you pass `b"geometry"` as the second attribute while defining
    the `QPropertyAnimation` object. After that, you specify the duration of the animation
    as `10000` milliseconds, meaning you want to change the geometry of the object
    after every 10,000 milliseconds. Through the `setStartValue` method, you specify
    the region that is the rectangular area where you want the animation to start,
    and by invoking the `setEndValue` method, you specify the rectangular region where
    you want to stop the animation. By invoking the `start` method, you initiate the
    animation; consequently, the ball moves down from the rectangular region specified
    through the `setStartValue` method until it reaches the rectangular region specified
    through the `setEndValue` method.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，具有objectName属性`pushButtonMoveDown`的推送按钮小部件的click()事件连接到`startAnimation`方法；当点击推送按钮时，将调用`startAnimation`方法。在`startAnimation`方法中，创建一个`QPropertyAnimation`类的对象并命名为`anim`。在创建`QPropertyAnimation`实例时，传递两个参数；第一个是要应用动画的标签小部件，第二个是定义要将动画应用于对象属性的属性。因为您想要对球的几何图形应用动画，所以在定义`QPropertyAnimation`对象时，将`b"geometry"`作为第二个属性传递。之后，将动画的持续时间指定为`10000`毫秒，这意味着您希望每隔10,000毫秒更改对象的几何图形。通过`setStartValue`方法，指定要开始动画的矩形区域，并通过调用`setEndValue`方法，指定要停止动画的矩形区域。通过调用`start`方法，启动动画；因此，球从通过`setStartValue`方法指定的矩形区域向下移动，直到达到通过`setEndValue`方法指定的矩形区域。
- en: 'On running the application, you will find a push button and a Label widget
    representing the ball image on the screen, as shown in the following screenshot
    (left). On clicking the Move Down push button, the ball starts animating towards
    the ground and stop its animation at the region specified through the `setEndValue` method,
    as shown in the following screenshot (right):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您会在屏幕上找到一个推送按钮和一个代表球图像的标签小部件，如下截图所示（左）。点击Move Down推送按钮后，球开始向地面动画，并在通过`setEndValue`方法指定的区域停止动画，如下截图所示（右）：
- en: '![](assets/36217d0c-f023-4596-9f9b-433a7f9502ac.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36217d0c-f023-4596-9f9b-433a7f9502ac.png)'
- en: Making a bouncing ball
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个弹跳的球
- en: In this recipe, you will make a bouncing ball; when clicking a button, a ball
    falls towards the ground and on touching the ground, it bounces back to the top.
    In this recipe, you will understand how a basic animation is applied on an object.
    This recipe will consist of a push button and a ball, and when the push button
    is pressed, the ball will start animating towards the ground.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将制作一个弹跳的球；当点击按钮时，球向地面掉落，触及地面后，它会反弹到顶部。在这个示例中，您将了解如何在对象上应用基本动画。这个示例将包括一个推送按钮和一个球，当按下推送按钮时，球将开始向地面动画。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To make a ball appear to be bouncing, we need to make it first animate towards
    the ground, and then from the ground up to the sky. To do so, we will be invoking
    the `setKeyValueAt` method of the `QPropertyAnimation` class three times. The
    first and second calls to the `setKeyValueAt` method will make the ball animate
    from the top to the bottom. The third call to the `setKeyValueAt` method will
    make the ball animate from bottom to top. The coordinates in the three `setKeyValueAt` methods are
    provided so that the ball bounces in the opposite direction, and not where it
    came from. The following are the steps to understand how a ball can be animated
    to appear to be bouncing:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使球看起来像是在弹跳，我们需要首先使其向地面动画，然后从地面向天空动画。为此，我们将三次调用`QPropertyAnimation`类的`setKeyValueAt`方法。前两次调用`setKeyValueAt`方法将使球从顶部向底部动画。第三次调用`setKeyValueAt`方法将使球从底部向顶部动画。在三个`setKeyValueAt`方法中提供坐标，以使球以相反方向弹跳，而不是从哪里来的。以下是了解如何使球看起来像在弹跳的步骤：
- en: Create a new application based on the Dialog without Buttons template.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于没有按钮的对话框模板创建一个新的应用程序。
- en: Drag and drop a Label widget and one Push Button widget onto the form.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个标签小部件和一个推送按钮小部件拖放到表单上。
- en: Set the text property of the Push Button widget to `Bounce`. We assume that
    you have a ball image on your computer with the filename `coloredball.jpg`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的文本属性设置为`Bounce`。我们假设您的计算机上有一个名为`coloredball.jpg`的球形图像。
- en: To assign the ball image to the Label widget, select its pixmap property.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将球形图像分配给标签小部件，请选择其pixmap属性。
- en: In the pixmap property, out of the two options, `Choose Resource` and `Choose
    File`, select the Choose File option, browse your disk, and select the `coloredball.jpg` file.
    The image of the ball will appear in place of the Label widget.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在pixmap属性中，从两个选项`Choose Resource`和`Choose File`中选择`Choose File`选项，浏览您的磁盘，并选择`coloredball.jpg`文件。球的图像将出现在标签小部件的位置。
- en: Set the objectName property of the Push Button widget to `pushButtonBounce`
    and that of the Label widget to `labelPic`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的objectName属性设置为`pushButtonBounce`，标签小部件的objectName属性设置为`labelPic`。
- en: Save the application with the name `demoAnimation3.ui`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoAnimation3.ui`。
- en: 'The application will appear as shown in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将显示如下截图所示：
- en: '![](assets/f6f06312-aec8-4d84-864c-1635ffe30319.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f6f06312-aec8-4d84-864c-1635ffe30319.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs to be converted into Python code. On application of the
    `pyuic5` command utility, the `.ui` file is converted into a Python script. The
    generated Python script, `demoAnimation3.py`, can be seen in the source code bundle
    of this book.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。在应用`pyuic5`命令实用程序时，`.ui`文件将被转换为Python脚本。生成的Python脚本`demoAnimation3.py`可以在本书的源代码包中找到。
- en: Treat the `demoAnimation3.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoAnimation3.py`脚本视为头文件，并将其导入到您将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callAnimation3.pyw` and import the
    `demoAnimation3.py` code into it:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callAnimation3.pyw`的Python文件，并将`demoAnimation3.py`代码导入其中。
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'You can see that the click() event of the Push Button widget with the objectName
    property, `pushButtonMoveDown`, is connected to the `startAnimation` method; when
    the push button is clicked, the `startAnimation` method will be invoked. In the
    `startAnimation` method, you create an object of the `QPropertyAnimation` class
    and name it `anim`. While creating the `QPropertyAnimation` instance, you pass
    two arguments: the first is the Label widget to which you want to apply the animation,
    and the second is the property that defines the object''s attribute to which you
    want to apply the animation to the object''s attribute. Because you want to apply
    an animation to the ball''s geometry, you pass `b"geometry"` as the second attribute
    while defining the `QPropertyAnimation` object. After that, you specify the duration
    of the animation as `10000` milliseconds, meaning you want to change the geometry
    of the object after every 10,000 milliseconds. Through the `setKeyValue` method,
    you specify the region that is the rectangular area where you want the animation
    to start. You mention the top-left region through this method because you want
    the ball to fall from the top-left corner towards the ground. Through the second
    call to the `setKeyValue` method, you supply the region in which you want the
    ball to fall to the ground. You also specify the angle of the fall. The ball will
    fall diagonally down towards the ground. By invoking the third `setValue` method,
    you specify the end value where you want the animation to stop, which in this
    case is in the top-right corner. Through these three calls to the `setKeyValue` method,
    you make the ball fall diagonally down towards the ground and then bounce back
    to the top-right corner. By invoking the `start` method, you initiate the animation.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，具有objectName属性`pushButtonMoveDown`的Push按钮小部件的click()事件与`startAnimation`方法连接在一起；当单击按钮时，将调用`startAnimation`方法。在`startAnimation`方法中，您创建一个`QPropertyAnimation`类的对象，并将其命名为`anim`。在创建`QPropertyAnimation`实例时，您传递两个参数：第一个是要应用动画的Label小部件，第二个是定义要将动画应用于对象属性的属性。因为您想要将动画应用于球的几何属性，所以在定义`QPropertyAnimation`对象时，将`b"geometry"`作为第二个属性传递。之后，您将动画的持续时间指定为`10000`毫秒，这意味着您希望每隔10,000毫秒更改对象的几何形状。通过`setKeyValue`方法，您指定要开始动画的区域，通过这种方法指定左上角区域，因为您希望球从左上角向地面掉落。通过对`setKeyValue`方法的第二次调用，您提供了球掉落到地面的区域。您还指定了掉落的角度。球将对角线向下掉落到地面。通过调用第三个`setValue`方法，您指定动画停止的结束值，在这种情况下是在右上角。通过对`setKeyValue`方法的这三次调用，您使球对角线向下掉落到地面，然后反弹回右上角。通过调用`start`方法，您启动动画。
- en: On running the application, you will find the Push Button and Label widgets
    representing the ball image at the top-left corner of the screen, as shown in
    the following screenshot (left).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您会发现Push按钮和Label小部件代表球图像显示在屏幕左上角，如下面的屏幕截图所示（左侧）。
- en: 'On clicking the Bounce push button, the ball starts animating diagonally down
    towards the ground, as shown in the middle screenshot, and after touching the
    ground, the ball bounces back towards the top-right corner of the screen, as shown
    on the right:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 单击Bounce按钮后，球开始沿对角线向下动画移动到地面，如中间屏幕截图所示，触地后，球反弹回屏幕的右上角，如右侧所示：
- en: '![](assets/b97a5f52-81a4-4e91-afde-843f7bfe0f4a.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b97a5f52-81a4-4e91-afde-843f7bfe0f4a.png)'
- en: Making a ball animate as per the specified curve
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据指定的曲线使球动起来
- en: A curve with the desired shape and size is created and a ball is set to move
    along the shape of the curve on the click of a push button. In this recipe, you
    will understand how to implement a guided animation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个具有所需形状和大小的曲线，并设置一个球在单击按钮时沿着曲线的形状移动。在这个示例中，您将了解如何实现引导动画。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The `setKeyValueAt` method of the `QPropertyAnimation` class determines the
    direction of an animation. For guided animation, you invoke the `setKeyValueAt` method
    in a loop. The coordinates of the curve are passed to the `setKeyValueAt` method
    in the loop to make the ball animate along the curve. Here are the steps to make
    an object animate as desired:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPropertyAnimation`类的`setKeyValueAt`方法确定动画的方向。对于引导动画，您在循环中调用`setKeyValueAt`方法。在循环中将曲线的坐标传递给`setKeyValueAt`方法，以使球沿着曲线动画。以下是使对象按预期动画的步骤：'
- en: Create a new application based on the Dialog without Buttons template.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于无按钮对话框模板创建一个新的应用程序。
- en: Drag and drop a Label widget and one Push Button widget onto the form.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个Label小部件和一个Push按钮小部件拖放到表单上。
- en: Set the text property of the Push Button widget to `Move With Curve`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push按钮小部件的文本属性设置为`Move With Curve`。
- en: Assuming you have a ball image on your computer with the filename `coloredball.jpg`,
    you can assign this ball image to the Label widget by using its pixmap property.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您的计算机上有一个名为`coloredball.jpg`的球形图像，您可以使用其pixmap属性将此球形图像分配给Label小部件。
- en: In the pixmap property, you will find two options, Choose Resource and Choose
    File; select the Choose File option, browse your disk, and select the `coloredball.jpg` file.
    The image of the ball will appear in place of the Label widget.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pixmap`属性中，您会找到两个选项，选择资源和选择文件；选择选择文件选项，浏览您的磁盘，并选择`coloredball.jpg`文件。球的图像将出现在`Label`小部件的位置。
- en: Set the objectName property of the Push Button widget to `pushButtonMoveCurve`
    and that of the Label widget to `labelPic`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Push Button`小部件的`objectName`属性设置为`pushButtonMoveCurve`，将`Label`小部件的`objectName`属性设置为`labelPic`。
- en: 'Save the application with the name `demoAnimation4.ui`. The application will
    appear as shown in the following screenshot:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoAnimation4.ui`。应用程序将显示如下截图所示：
- en: '![](assets/0ab85891-3816-483b-9ede-704837a20332.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0ab85891-3816-483b-9ede-704837a20332.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file and is
    an XML file. The XML file is converted into Python code by applying the `pyuic5`
    utility. You can find the generated Python code, `demoAnimation4.py`, in the source
    code bundle of this book.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，是一个XML文件。通过应用`pyuic5`实用程序，将XML文件转换为Python代码。您可以在本书的源代码包中找到生成的Python代码`demoAnimation4.py`。
- en: Treat the `demoAnimation4.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoAnimation4.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callAnimation4.pyw` and import the
    `demoAnimation4.py` code into it:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callAnimation4.pyw`的Python文件，并将`demoAnimation4.py`代码导入其中：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: First of all, you make the curve appear on the screen. This is the curve that
    will guide the ball's animation; that is, it will act as a path for the animation.
    You define an instance of the `QPainterPath` class and name it** path**. You invoke
    the `moveTo` method of the `QPainterPath` class to specify the starting location
    of the path or curve. The `cubicTo` method is invoked to specify the curved path
    for the ball's animation.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让曲线出现在屏幕上。这是将指导球动画的曲线；也就是说，它将作为动画的路径。您定义了`QPainterPath`类的实例并将其命名为`path`。您调用`QPainterPath`类的`moveTo`方法来指定路径或曲线的起始位置。调用`cubicTo`方法来指定球动画的曲线路径。
- en: 'You can see that the click event of the Push Button widget with the objectName
    property `pushButtonMoveCurve` is connected to the `startAnimation` method; when
    the Push Button widget is clicked, the `startAnimation()` method will be invoked.
    In the `startAnimation` method, you create an object of the `QPropertyAnimation`
    class and name it `anim`. While creating the `QPropertyAnimation` instance, you
    pass two arguments: the first is the Label widget to which you want to apply the
    animation, and the second is the property that defines the object''s attribute
    to which you want to apply the animation to the object''s attribute. Because you
    want to apply the animation to the ball''s position, you pass `b''pos"` as the
    second attribute while defining the `QPropertyAnimation` object. After that, you
    specify the duration of the animation as `4000` milliseconds, meaning you want
    to change the position of the ball after every `4000` milliseconds. Using the
    `setStartValue()` method of the `QPropertyAnimation` class, you specify the coordinates
    from where you want the ball to animate. You set the `for` loop that specifies
    the values that the ball needs to move along. You specify the path of the ball''s
    animation by invoking the `setKeyValue` method inside the `for` loop. Because
    the ball needs to be drawn at every point specified in the path, you set the point
    where the ball needs to be drawn by invoking the `pointAtPercent()` method and
    passing it to the `setKeyValueAt()` method. You also need to set the location
    where the animation needs to stop by invoking the `setEndValue()` method.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现`Push Button`小部件的`objectName`属性为`pushButtonMoveCurve`的点击事件与`startAnimation`方法相连接；当单击`Push
    Button`小部件时，将调用`startAnimation()`方法。在`startAnimation`方法中，您创建了`QPropertyAnimation`类的对象并将其命名为`anim`。在创建`QPropertyAnimation`实例时，您传递了两个参数：第一个是要应用动画的`Label`小部件，第二个是定义要将动画应用于对象属性的属性。因为您想要将动画应用于球的位置，所以在定义`QPropertyAnimation`对象时，您将`b'pos'`作为第二个属性传递。之后，您将动画的持续时间指定为`4000`毫秒，这意味着您希望每`4000`毫秒更改球的位置。使用`QPropertyAnimation`类的`setStartValue()`方法，您指定了希望球进行动画的坐标。您设置了指定球需要沿着移动的值的`for`循环。您通过在`for`循环内调用`setKeyValue`方法来指定球的动画路径。因为球需要在路径中指定的每个点绘制，所以您通过调用`pointAtPercent()`方法并将其传递给`setKeyValueAt()`方法来设置球需要绘制的点。您还需要通过调用`setEndValue()`方法来设置动画需要停止的位置。
- en: Shortly after, you specify the start and end locations of the animation, you
    specify the path of animation, and the `paintEvent()` method is called to redraw
    the ball at every point of the path.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 不久之后，您会指定动画的开始和结束位置，指定动画的路径，并调用`paintEvent()`方法来在路径的每一点重新绘制球。
- en: 'On running the application, you find the Push Button widget and a Label widget
    representing the ball image in the top-left corner of the screen (left side of
    the screenshot) and on clicking the Move With Curve push button, the ball starts
    animating along the drawn curve and stops where the curve ends (right side of
    the screenshot):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您会在屏幕左上角（截图的左侧）找到`Push Button`小部件和代表球形图像的`Label`小部件，并在单击`Move With Curve`按钮后，球会沿着绘制的曲线开始动画，并在曲线结束的地方停止（截图的右侧）：
- en: '![](assets/4a89a80e-ad09-4699-bae1-03d9950497f4.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a89a80e-ad09-4699-bae1-03d9950497f4.png)'
