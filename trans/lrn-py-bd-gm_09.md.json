["```py\n>>> 6 + 6\n12\n>>> \"Python\" + \" is \" + \"best\"\n'Python is best'\n>>> [1,2,3] + [4,5]\n[1,2,3,4,5]\n```", "```py\n>>> dir(str)\n['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n```", "```py\n>>> first_name = \"Ross\"\n>>> first_name.__add__(\" Geller\")\n'Ross Geller'\n```", "```py\nclass Base:\n    def __init__(self, first):\n        self.first = first\n\n    def add(self, other):\n        print(self.first + other)\n```", "```py\n>>> obj1 = Base(1)\n>>> obj2 = Base(2)\n>>> obj1.add(obj2)\nTypeError: unsupported operand type(s) for +: 'int' and 'Base'\n```", "```py\nclass Base:\n    def __init__(self, first):\n        self.first = first\n\n    def __add__(self, other): #operator '+' is overloaded \n print(self.first + other.first)    \n```", "```py\n>>> obj1 = Base(1)\n>>> obj2 = Base(2)\n>>> obj1.__add__(obj2)\n3\n#for strings as add method is defined internally inside str class\n>>> obj3 = Base(\"Hello \")\n>>> obj4 = Base(\"World\")\n>>> obj3.__add__(obj4)\n'Hello World'\n```", "```py\nclass Base:\n    def __new__(cls):\n        print(\"This is __new__() magic method\")\n        obj = object.__new__(cls)\n        return obj\n    def __init__(self):\n        print(\"This is __init__() magic method\")\n        self.info = \"I love Python\"\n```", "```py\n>>> obj = Base()\nThis is __new__() magic method\nThis is __init__() magic method\n```", "```py\n>>> info = \"I love Python\"\n>>> len(info)\n13\n>>> info.__len__()\n13\n```", "```py\ndef line(a, b, x, y):\n    \"Draw line from `(a, b)` to `(x, y)`.\"\n    import turtle\n    turtle.up()\n    turtle.goto(a, b)\n    turtle.down()\n    turtle.goto(x, y)\n```", "```py\nclass Vector(object):\n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n    def __str__(self):\n        return \"(%s, %s)\"%(self.x, self.y)\n```", "```py\n>>> pos = Vector(10, 40)\n>>> pos.__str__()\n'(10, 40)'\n```", "```py\ndef __iadd__(self, other):\n    if isinstance(other, Vector):\n        self.x += other.x\n        self.y += other.y\n    else:\n        self.x += other\n        self.y += other\n    return \"(%s, %s)\"%(self.x, self.y)\n```", "```py\n>>> a1 = Vector(10,20)\n>>> a2 = Vector(30,40)\n>>> a1.__iadd__(a2)\n'(40, 60)'\n```", "```py\ndef __isub__(self, other):\n    if isinstance(other, Vector):\n            self.x -= other.x\n            self.y -= other.y\n        else:\n            self.x -= other\n            self.y -= other\n        return \"(%s, %s)\"%(self.x, self.y)\n```", "```py\n>>> a1 = Vector(10,20)\n>>> a2 = Vector(30,40)\n>>> a1.__isub__(a2)\n'(-20, -20)'\n```", "```py\ndef __imul__(self, other):\n        if isinstance(other, Vector):\n            self.x *= other.x\n            self.y *= other.y\n        else:\n            self.x *= other\n            self.y *= other\n        return \"(%s, %s)\"%(self.x, self.y)\n\ndef __itruediv__(self, other):\n        if isinstance(other, Vector):\n            self.x /= other.x\n            self.y /= other.y\n        else:\n            self.x /= other\n            self.y /= other\n        return \"(%s, %s)\"%(self.x, self.y)\n```", "```py\ndef __mul__(self, scalar):\n    return (self.x * scalar, self.y * scalar)\ndef __div__(self, scalar):\n    return (self.x / scalar, self.y / scalar)\n```", "```py\ndef __neg__(self):\n    return (\u2013self.x, \u2013self.y)\n```", "```py\ndef __eq__(self, other):\n\n        \"\"\"v.__eq__(w) -> v == w\n >>> v = vector(1, 2)\n >>> w = vector(1, 2)\n >>> v == w\n True\n \"\"\"\n\n if isinstance(other, vector):\n            return self.x == other.x and self.y == other.y\n        return NotImplemented\n```"]