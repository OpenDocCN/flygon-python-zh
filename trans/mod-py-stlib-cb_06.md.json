["```py\n# Write a file with latin-1 encoding\nwith open('/tmp/somefile.txt', mode='w', encoding='latin-1') as f:\n    f.write('This is some latin1 text: \"\u00e8 gi\u00e0 ora\"')\n\n# Read back file with latin-1 encoding.\nwith open('/tmp/somefile.txt', encoding='latin-1') as f:\n    txt = f.read()\n    print(txt)\n```", "```py\n>>> '\u00ec'.encode('utf-8').decode('latin-1')\n'\u00c3\u00ac'\n```", "```py\nwith open('/var/log/install.log') as f:\n    lines = list(f)\n```", "```py\n0                   1                   2                   3\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|          Source Port          |       Destination Port        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                        Sequence Number                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Acknowledgment Number                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```", "```py\n>>> import struct\n>>> with open('/tmp/packet.dump', 'rb') as f:\n...     data = struct.unpack_from('>HHLL', f.read())\n>>> data\n(50291, 80, 2778997212, 644363807)\n```", "```py\n>>> with open('/tmp/packet.dump', 'wb') as f:\n...     data = struct.pack('>HHLL', 50291, 80, 2778997212, 644363807)\n...     f.write(data)\n>>> data\nb'\\xc4s\\x00P\\xa5\\xa4!\\xdc&h6\\x1f'\n```", "```py\nimport zipfile\nimport os\n\ndef zipdir(archive_name, directory):\n    with zipfile.ZipFile(\n        archive_name, 'w', compression=zipfile.ZIP_DEFLATED\n    ) as archive:\n        for root, dirs, files in os.walk(directory):\n            for filename in files:\n                abspath = os.path.join(root, filename)\n                relpath = os.path.relpath(abspath, directory)\n                archive.write(abspath, relpath)        \n```", "```py\nzipdir('/tmp/test.zip', '_build/doctrees')\n```", "```py\n>>> with zipfile.ZipFile('/tmp/test.zip') as archive:\n...     for n in archive.namelist():\n...         print(n)\nalgorithms.doctree\nconcurrency.doctree\ncrypto.doctree\ndatastructures.doctree\ndatetimes.doctree\ndevtools.doctree\nenvironment.pickle\nfilesdirs.doctree\ngui.doctree\nindex.doctree\nio.doctree\nmultimedia.doctree\n```", "```py\n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   shelf['value'] = 5\n... \n```", "```py\n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   print(shelf['value'])\n... \n5\n```", "```py\n>>> class MyClass(object):\n...   def __init__(self, value):\n...     self.value = value\n... \n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   shelf['value'] = MyClass(5)\n... \n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   print(shelf['value'])\n... \n<__main__.MyClass object at 0x101e90d30>\n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   print(shelf['value'].value)\n... \n5\n```", "```py\n>>> import pickle\n>>> pickle.dumps(MyClass(5))\nb'\\x80\\x03c__main__\\nMyClass\\nq\\x00)\\x81q\\x01}'\nb'q\\x02X\\x05\\x00\\x00\\x00valueq\\x03K\\x05sb.'\n```", "```py\n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   shelf['value'].value = 10\n... \n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   print(shelf['value'].value)\n... \n5\n```", "```py\n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   myvalue = shelf['value']\n...   myvalue.value = 10\n...   shelf['value'] = myvalue\n... \n>>> with shelve.open('/tmp/shelf.db') as shelf:\n...   print(shelf['value'].value)\n... \n10\n```", "```py\n[main]\ndebug = true\npath = /tmp\nfrequency = 30\n```", "```py\nimport configparser\n\ndef read_config(config_text, schema=None):\n    \"\"\"Read options from ``config_text`` applying given ``schema``\"\"\"\n    schema = schema or {}\n\n    cfg = configparser.ConfigParser(\n        interpolation=configparser.ExtendedInterpolation()\n    )\n    try:\n        cfg.read_string(config_text)\n    except configparser.MissingSectionHeaderError:\n        config_text = '[main]\\n' + config_text\n        cfg.read_string(config_text)\n\n    config = {}\n    for section in schema:\n        options = config.setdefault(section, {})\n        for option, option_schema in schema[section].items():\n            options[option] = option_schema.get('default')\n    for section in cfg.sections():\n        options = config.setdefault(section, {})\n        section_schema = schema.get(section, {})\n        for option in cfg.options(section):\n            option_schema = section_schema.get(option, {})\n            getter = 'get' + option_schema.get('type', '')\n            options[option] = getattr(cfg, getter)(section, option)\n    return config\n```", "```py\nconfig_text = '''\ndebug = true\n\n[registry]\nname = Alessandro\nsurname = Molina\n\n[extra]\nlikes = spicy food\ncountrycode = 39\n'''\n\nconfig = read_config(config_text, {\n    'main': {\n        'debug': {'type': 'boolean'}\n    },\n    'registry': {\n        'name': {'default': 'unknown'},\n        'surname': {'default': 'unknown'},\n        'middlename': {'default': ''},\n    },\n    'extra': {\n        'countrycode': {'type': 'int'},\n        'age': {'type': 'int', 'default': 0}\n    },\n    'more': {\n        'verbose': {'type': 'int', 'default': 0}\n    }\n})\n```", "```py\n>>> import pprint\n>>> pprint.pprint(config)\n{'extra': {'age': 0, 'countrycode': 39, 'likes': 'spicy food'},\n 'main': {'debug': True},\n 'more': {'verbose': 0},\n 'registry': {'middlename': 'unknown',\n              'name': 'Alessandro',\n              'surname': 'Molina'}}\n```", "```py\noption1 = value1\noption2 = value2\n```", "```py\n[paths]\nroot = /tmp/test01\nimages = ${root}/images\nsounds = ${root}/sounds\n```", "```py\n[main]\nroot = /tmp/test01\n\n[paths]\nimages = ${main:root}/images\nsounds = ${main:root}/sounds\n```", "```py\n>>> config = read_config('''\n... [DEFAULT]\n... option = 1\n... \n... [section1]\n... \n... [section2]\n... option = 5\n... ''')\n>>> config\n{'section1': {'option': '1'}, \n 'section2': {'option': '5'}}\n```", "```py\nimport xml.etree.ElementTree as ET\nfrom contextlib import contextmanager\n\nclass XMLDocument:\n    def __init__(self, root='document', mode='xml'):\n        self._root = ET.Element(root)\n        self._mode = mode\n\n    def __str__(self):\n        return ET.tostring(self._root, encoding='unicode', method=self._mode)\n\n    def write(self, fobj):\n        ET.ElementTree(self._root).write(fobj)\n\n    def __enter__(self):\n        return XMLDocumentBuilder(self._root)\n\n    def __exit__(self, exc_type, value, traceback):\n        return\n\nclass XMLDocumentBuilder:\n    def __init__(self, root):\n        self._current = [root]\n\n    def tag(self, *args, **kwargs):\n        el = ET.Element(*args, **kwargs)\n        self._current[-1].append(el)\n        @contextmanager\n        def _context():\n            self._current.append(el)\n            try:\n                yield el\n            finally:\n                self._current.pop()\n        return _context()\n\n    def text(self, text):\n        if self._current[-1].text is None:\n            self._current[-1].text = ''\n        self._current[-1].text += text\n```", "```py\ndoc = XMLDocument('html', mode='html')\n\nwith doc as _:\n    with _.tag('head'):\n        with _.tag('title'): _.text('This is the title')\n    with _.tag('body'):\n        with _.tag('div', id='main-div'):\n            with _.tag('h1'): _.text('My Document')\n            with _.tag('strong'): _.text('Hello World')\n            _.tag('img', src='http://via.placeholder.com/150x150')\n```", "```py\n>>> print(doc)\n<html>\n    <head>\n        <title>This is the title</title>\n    </head>\n    <body>\n        <div id=\"main-div\">\n            <h1>My Document</h1>\n            <strong>Hello World</strong>\n            <img src=\"http://via.placeholder.com/150x150\">\n        </div>\n    </body>\n</html>\n```", "```py\ndoc.write('/tmp/test.html')\n```", "```py\nroot = ET.Element('html')\nhead = ET.Element('head')\nroot.append(head)\ntitle = ET.Element('title')\ntitle.text = 'This is the title'\nhead.append(title)\n```", "```py\ndoc = XMLDocument('html', mode='html')\nwith doc as _:\n    _.text('Some text, ')\n    _.text('and even more')\n```", "```py\ndoc = XMLDocument('html', mode='html')\nwith doc as _:\n    _.tag('input', type='text', placeholder='Name?')\n    _.tag('input', type='text', placeholder='Surname?')\n```", "```py\n<html>\n    <input placeholder=\"Name?\" type=\"text\">\n    <input placeholder=\"Surname?\" type=\"text\">\n</html>\n```", "```py\ndoc = XMLDocument('html', mode='html')\nwith doc as _:\n    with _.tag('head'):\n        with _.tag('title') as title: title.text = 'This is a title'\n```", "```py\n<html>\n    <head>\n        <title>This is a title</title>\n    </head>\n</html>\n```", "```py\ndoc = XMLDocument('html', mode='html')\nwith doc as builder:\n    _ = builder.tag\n    _t = builder.text\n\n    with _('head'):\n        with _('title'): _t('This is the title')\n    with _('body'):\n        with _('div', id='main-div'):\n            with _('h1'): _t('My Document')\n            with _('strong'): _t('Hello World')\n            _('img', src='http://via.placeholder.com/150x150')\n```", "```py\n<html>\n    <body class=\"main-body\">\n        <p>hi</p>\n        <img><br>\n        <input type=\"text\" />\n    </body>\n</html>\n```", "```py\nxml.etree.ElementTree.ParseError: mismatched tag: line 7, column 6\n```", "```py\nimport xml.etree.ElementTree as ET\nfrom html.parser import HTMLParser\n\nclass ETHTMLParser(HTMLParser):\n    SELF_CLOSING = {'br', 'img', 'area', 'base', 'col', 'command',    \n                    'embed', 'hr', 'input', 'keygen', 'link', \n                    'menuitem', 'meta', 'param',\n                    'source', 'track', 'wbr'}\n\n    def __init__(self, *args, **kwargs):\n        super(ETHTMLParser, self).__init__(*args, **kwargs)\n        self._builder = ET.TreeBuilder()\n        self._stack = []\n\n    @property\n    def _last_tag(self):\n        return self._stack[-1] if self._stack else None\n\n    def _handle_selfclosing(self):\n        last_tag = self._last_tag\n        if last_tag in self.SELF_CLOSING:\n            self.handle_endtag(last_tag)\n\n    def handle_starttag(self, tag, attrs):\n        self._handle_selfclosing()\n        self._stack.append(tag)\n        self._builder.start(tag, dict(attrs))\n\n    def handle_endtag(self, tag):\n        if tag != self._last_tag:\n            self._handle_selfclosing()\n        self._stack.pop()\n        self._builder.end(tag)\n\n    def handle_data(self, data):\n        self._handle_selfclosing()\n        self._builder.data(data)\n\n    def close(self):\n        return self._builder.close()\n```", "```py\ntext = '''\n<html>\n    <body class=\"main-body\">\n        <p>hi</p>\n        <img><br>\n        <input type=\"text\" />\n    </body>\n</html>\n'''\n\nparser = ETHTMLParser()\nparser.feed(text)\nroot = parser.close()\n```", "```py\n>>> print(ET.tostring(root, encoding='unicode'))\n<html>\n    <body class=\"main-body\">\n        <p>hi</p>\n        <img /><br />\n        <input type=\"text\" />\n    </body>\n</html>\n```", "```py\ndef print_node(el, depth=0):\n    print(' '*depth, el)\n    for child in el:\n        print_node(child, depth + 1)\n\n>>> print_node(root)\n <Element 'html' at 0x102799a48>\n  <Element 'body' at 0x102799ae8>\n   <Element 'p' at 0x102799a98>\n   <Element 'img' at 0x102799b38>\n   <Element 'br' at 0x102799b88>\n   <Element 'input' at 0x102799bd8>\n```", "```py\n<br><p></p>\n```", "```py\nIn::\n<br></br><p></p>\n```", "```py\n<body><br></body>\n```", "```py\n<body><br></br></body>\n```", "```py\n<p><br>Hello World</p>\n```", "```py\n<p><br></br>Hello World</p>\n```", "```py\n<input disabled>\n```", "```py\n<input type=text>\n```", "```py\n<li>Item 1\n<li>Item 2\n```", "```py\n\"ID\",\"Name\",\"Surname\",\"Language\"\n1,\"Alessandro\",\"Molina\",\"Italian\"\n2,\"Mika\",\"H\u00e4kkinen\",\"Suomi\"\n3,\"Sebastian\",\"Vettel\",\"Deutsch\"\n```", "```py\nimport csv\n\nwith open('/tmp/table.csv', 'w', encoding='utf-8') as f:\n    writer = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC)\n    writer.writerow((\"ID\",\"Name\",\"Surname\",\"Language\"))\n    writer.writerow((1,\"Alessandro\",\"Molina\",\"Italian\"))\n    writer.writerow((2,\"Mika\",\"H\u00e4kkinen\",\"Suomi\"))\n    writer.writerow((3,\"Sebastian\",\"Vettel\",\"Deutsch\"))\n```", "```py\nwith open('/tmp/table.csv', 'r', encoding='utf-8', newline='') as f:\n    reader = csv.DictReader(f)\n    for row in reader:\n        print(row)\n```", "```py\n{'Surname': 'Molina', 'Language': 'Italian', 'ID': '1', 'Name': 'Alessandro'}\n{'Surname': 'H\u00e4kkinen', 'Language': 'Suomi', 'ID': '2', 'Name': 'Mika'}\n{'Surname': 'Vettel', 'Language': 'Deutsch', 'ID': '3', 'Name': 'Sebastian'}\n```", "```py\nimport sqlite3\n\nwith sqlite3.connect('/tmp/test.db') as db:\n    try:\n        db.execute('''CREATE TABLE people (\n            id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \n            name TEXT, \n            surname TEXT, \n            language TEXT\n        )''')\n    except sqlite3.OperationalError:\n        # Table already exists\n        pass\n\n    sql = 'INSERT INTO people (name, surname, language) VALUES (?, ?, ?)'\n    db.execute(sql, (\"Alessandro\", \"Molina\", \"Italian\"))\n    db.execute(sql, (\"Mika\", \"H\u00e4kkinen\", \"Suomi\"))\n    db.execute(sql, (\"Sebastian\", \"Vettel\", \"Deutsch\"))\n```", "```py\nwith sqlite3.connect('/tmp/test.db') as db:\n    db.row_factory = sqlite3.Row\n    cursor = db.cursor()\n    for row in cursor.execute('SELECT * FROM people WHERE language \n                              != :language', \n                              {'language': 'Italian'}):\n        print(dict(row))\n```", "```py\n{'name': 'Mika', 'language': 'Suomi', 'surname': 'H\u00e4kkinen', 'id': 2}\n{'name': 'Sebastian', 'language': 'Deutsch', 'surname': 'Vettel', 'id': 3}\n```", "```py\ncursor.execute('SELECT * FROM people WHERE language != %s' % ('Italian',)):\n```"]