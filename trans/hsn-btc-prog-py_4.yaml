- en: Bitcoin Data Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币数据分析
- en: In this chapter, we will explore the manipulation and visualization of bitcoin
    price data using Python. We will also explore bitcoin transaction graphs, along
    with collecting and analyzing *Bitcoin Dice* game data using Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Python探索比特币价格数据的操作和可视化。我们还将探索比特币交易图表，以及使用Python收集和分析*比特币骰子*游戏数据。
- en: Manipulating and visualizing bitcoin price data
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作和可视化比特币价格数据
- en: 'In this section, we will introduce the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍以下主题：
- en: Getting set up for data analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为数据分析做好准备
- en: Getting, reading in, and cleaning bitcoin price data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取、读取和清理比特币价格数据
- en: Exploring, manipulating, and visualizing the cleaned-up data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索、操作和可视化清理后的数据
- en: We first need to install several Python libraries, which includes installing
    the `pandas` module for reading in data, and also doing some exploratory analysis.
    We'll also be installing `matplotlib` for creating plots and charts, as well as
    Jupyter Notebooks, as they are the best for this kind of work involving data analysis.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要安装几个Python库，其中包括安装`pandas`模块用于读取数据，以及进行一些探索性分析。我们还将安装`matplotlib`用于创建图表和图表，以及Jupyter笔记本，因为它们是进行数据分析的最佳工具。
- en: Getting set up for data analysis
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为数据分析做好准备
- en: 'To install the Python modules, open the command-line program. In the command
    line, to install `pandas`, execute the following command:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Python模块，请打开命令行程序。在命令行中，要安装`pandas`，请执行以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Similarly, to install `matplotlib`, execute the following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，要安装`matplotlib`，请执行以下命令：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To install Jupyter, execute the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Jupyter，请执行以下命令：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Having finished installing the required modules, launch the Jupyter Notebook
    by executing the `jupyter notebook `command. This will open up a new browser window,
    or a tab, where it will display the list of files that are already there from
    the folder where we executed the `jupyter notebook `command. The following screenshot
    shows the `jupyter notebook` command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装所需的模块后，通过执行`jupyter notebook`命令启动Jupyter Notebook。这将在新的浏览器窗口或选项卡中打开，显示已经存在于我们执行`jupyter
    notebook`命令的文件夹中的文件列表。以下屏幕截图显示了`jupyter notebook`命令：
- en: '![](Images/af8667a9-bfa8-4170-8ca7-d60ed89c1186.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/af8667a9-bfa8-4170-8ca7-d60ed89c1186.png)'
- en: 'Next, choose to create a new Python 3 notebook, as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择创建一个新的Python 3笔记本，如下屏幕截图所示：
- en: '![](Images/b6e8b34b-841f-4a3b-a49f-292b11303034.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b6e8b34b-841f-4a3b-a49f-292b11303034.png)'
- en: Getting, reading in, and cleaning bitcoin price data
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取、读取和清理比特币价格数据
- en: We will start by importing the necessary modules.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先导入必要的模块。
- en: 'Import `pandas` to enable you to read in the data and start exploring it. The
    following screenshot shows the `import pandas` command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`pandas`以使您能够读取数据并开始探索。以下屏幕截图显示了`import pandas`命令：
- en: '![](Images/e45e50b1-57f5-496c-ad52-ccce329b2305.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e45e50b1-57f5-496c-ad52-ccce329b2305.png)'
- en: Also, import `matplotlib` for drawing plots from the data.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还要导入`matplotlib`以从数据中绘制图表。
- en: 'We need to set some options for `pandas` and `matplotlib`. The following screenshot shows
    the command for importing `matplotlib`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为`pandas`和`matplotlib`设置一些选项。以下屏幕截图显示了导入`matplotlib`的命令：
- en: '![](Images/6f0cf7fa-f6ab-441a-879f-fcf6f2e8d83b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6f0cf7fa-f6ab-441a-879f-fcf6f2e8d83b.png)'
- en: The first option we will set is called `options.mode.chained_assignment = None`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置的第一个选项称为`options.mode.chained_assignment = None`。
- en: The preceding option is to make sure that the operations are for the cleanup,
    which will be performed on the pandas DataFrame objects; we want the cleanup to
    happen on the original DataFrame objects and not on copies.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的选项是确保清理操作是在pandas DataFrame对象上执行的；我们希望清理操作发生在原始DataFrame对象上，而不是在副本上。
- en: 'The following screenshot shows the `options.mode.chained_assignment = None `option:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了`options.mode.chained_assignment = None`选项：
- en: '![](Images/ecd35dc5-359e-407b-a34e-3d2007163a89.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ecd35dc5-359e-407b-a34e-3d2007163a89.png)'
- en: 'Also, set `matplotlib` to visualize and display all the charts shown in the
    following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 还要设置`matplotlib`以可视化和显示以下屏幕截图中显示的所有图表：
- en: '![](Images/d45508cb-0de5-409f-b4e5-bd849c25ff63.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d45508cb-0de5-409f-b4e5-bd849c25ff63.png)'
- en: 'The price data we have is from `coindesk.com`, as shown in the following screenshot,
    and it is freely available for download:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的价格数据来自`coindesk.com`，如下屏幕截图所示，它可以免费下载：
- en: '![](Images/0f77ee94-acf1-4414-a787-2e78cb3a83a0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0f77ee94-acf1-4414-a787-2e78cb3a83a0.png)'
- en: 'Download the data in CSV format and read this data using `pandas`. This is
    a CSV file, so we will use the `read_CSV` method from `pandas`, as shown in the
    following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以CSV格式下载数据并使用`pandas`读取这些数据。这是一个CSV文件，所以我们将使用`pandas`的`read_CSV`方法，如下屏幕截图所示：
- en: '![](Images/8d52200b-c994-4867-9998-2b3e354c1aaa.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8d52200b-c994-4867-9998-2b3e354c1aaa.png)'
- en: DataFrame
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame
- en: The data in a pandas data object is called a DataFrame. A DataFrame is in a
    tabular data format. Now, print out some records to see how this looks. To print
    this out, we can call a method called `head()` on the price DataFrame.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: pandas数据对象中的数据称为DataFrame。DataFrame是以表格形式的数据格式。现在，打印一些记录以查看其外观。要打印出来，我们可以在价格DataFrame上调用一个名为`head()`的方法。
- en: 'When we do this, we get two columns—`Date` and `Close Price`—for the bitcoin
    in USD for that day. We also have a default index for the rows starting from 0,
    which was inserted by pandas by default while reading in the data. The following
    screenshot shows the two columns, `Date` and `Close Price`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做后，我们会得到两列——`日期`和`收盘价`——表示当天比特币的美元价格。我们还有一个默认索引，从0开始的行，这是由`pandas`在读取数据时默认插入的。以下屏幕截图显示了两列，`日期`和`收盘价`：
- en: '![](Images/4f18a045-01be-4820-8c1f-46cf4ce542ac.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4f18a045-01be-4820-8c1f-46cf4ce542ac.png)'
- en: 'To get top-level information about this data, call the `info()` method on it.
    After calling this method, we get 2,592 records. There are two columns: `Date`
    and `Close Price`. `Date` has 2,592 non-null records of the `type` object, which
    means that the `Date` field has been read as text. We would have to change it
    to a proper date-time format later. We have the close price as a numeric float
    type. It has 2,590 non-null records, which are two records fewer than the `Date`
    field.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关此数据的顶级信息，请在其上调用`info()`方法。调用此方法后，我们得到2,592条记录。有两列：`Date`和`Close Price`。`Date`有2,592条非空记录，类型为对象，这意味着`Date`字段已被读取为文本。我们稍后需要将其更改为正确的日期时间格式。我们有收盘价作为数值浮点类型。它有2,590条非空记录，比`Date`字段少两条记录。
- en: 'The following screenshot shows the details of the `info()` method:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`info()`方法的详细信息：
- en: '![](Images/fb1959b0-af8a-4090-a229-9f12a130dbb1.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fb1959b0-af8a-4090-a229-9f12a130dbb1.png)'
- en: In order to print for the records from bottom, call the `tail()` method. This
    method shows that the last two records should not exist, as they are not a date
    or price. We need to remove these before proceeding with further analysis.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了打印底部的记录，调用`tail()`方法。该方法显示最后两条记录不应该存在，因为它们不是日期或价格。在进行进一步分析之前，我们需要删除这些记录。
- en: We can see that the close price has NaN values, which means that it has missing
    values. We can use this factor to remove these two records from the DataFrame.
    We call drop any method on the price, which will remove the records that have
    one or more of the columns as null or missing values.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到收盘价有NaN值，这意味着它有缺失值。我们可以利用这一因素从DataFrame中删除这两条记录。我们在价格上调用`drop any`方法，这将删除具有一个或多个列为空或缺失值的记录。
- en: Bear in mind that we are just removing it from the DataFrame price and not from
    the CSV file from which we read the data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们只是从DataFrame价格中删除它，而不是从我们读取数据的CSV文件中删除它。
- en: 'The code in the following screenshot shows the `tail()` method implementation:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图中的代码显示了`tail()`方法的实现：
- en: '![](Images/46f61d4e-87b7-426f-ab76-c2b1527be085.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/46f61d4e-87b7-426f-ab76-c2b1527be085.png)'
- en: 'Also, look at the bottom rows again to see if the records we wanted to remove
    have been removed. We can see in the following screenshot that they have, in fact, been
    removed:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，再次查看底部行，看看我们想要删除的记录是否已经被删除。我们可以在以下截图中看到，实际上已经被删除了：
- en: '![](Images/1440387a-1b4d-4fd7-a077-f94c20de33dd.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1440387a-1b4d-4fd7-a077-f94c20de33dd.png)'
- en: Data cleanup
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据清理
- en: Another data cleaning task we need to do is convert the `Date` column from an
    object or text format to a date-time format. We use the pandas `to_datetime` method
    to do this.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的另一个数据清理任务是将`Date`列从对象或文本格式转换为日期时间格式。我们使用pandas的`to_datetime`方法来实现这一点。
- en: 'Here, we ask the `to_datetime` method to convert the `Date` field or `price`
    DataFrame, and we also supply the format. We then assign the `Date` field back
    to the DataFrame, as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们要求`to_datetime`方法将`Date`字段或`price` DataFrame转换，并且我们还提供了格式。然后我们将`Date`字段重新分配给DataFrame，如下截图所示：
- en: '![](Images/066e8991-2488-46a0-bfb6-b3716579c3fa.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/066e8991-2488-46a0-bfb6-b3716579c3fa.png)'
- en: This is the reason that we set the chained assignment as equal to `null` earlier, because
    we wanted to make the changes back on the original DataFrame.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将链式赋值设置为`null`的原因，因为我们希望在原始DataFrame上进行更改。
- en: 'Call the `info()` method again to see whether the data cleanup has an impact.
    We can see that the `Date` field is now in a date-time format, as we wanted, and
    there are no non-null records in the data, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 再次调用`info()`方法，查看数据清理是否产生影响。我们可以看到`Date`字段现在是日期时间格式，正如我们想要的那样，并且数据中没有非空记录，如下截图所示：
- en: '![](Images/81f0b204-02f4-492c-9c47-6bf9c10a31e7.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/81f0b204-02f4-492c-9c47-6bf9c10a31e7.png)'
- en: Setting the index to the Date column
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将索引设置为日期列
- en: We also need to set the index to the `Date` column and remove the `Date` column
    as a separate column. This will help us to run some interesting queries on the
    date data.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将索引设置为`Date`列，并将`Date`列删除为单独的列。这将帮助我们对日期数据运行一些有趣的查询。
- en: 'The code in the following screenshot shows how to set the index to the `Date`
    column:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图中的代码显示了如何将索引设置为`Date`列：
- en: '![](Images/ed0c269e-745e-4e16-b9ba-e6a77a3390c6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ed0c269e-745e-4e16-b9ba-e6a77a3390c6.png)'
- en: 'Next, delete the `Date` column as a separate column, since it is already set
    up as an index, as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，删除`Date`列作为单独的列，因为它已经设置为索引，如下截图所示：
- en: '![](Images/5072bbcf-ab02-41b3-8784-8e1b2b5fc755.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5072bbcf-ab02-41b3-8784-8e1b2b5fc755.png)'
- en: 'Now, the `Date` column can be seen as an index and not a separate column anymore,
    as shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`Date`列可以看作是索引，而不再是一个单独的列，如下截图所示：
- en: '![](Images/be7067b2-492d-424d-9257-18d891b7e95e.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/be7067b2-492d-424d-9257-18d891b7e95e.png)'
- en: Exploring, manipulating, and visualizing the cleaned-up data
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索、操作和可视化清理后的数据
- en: As the data cleanup is done, start with the data exploration tasks. We can use
    the pandas date-time capabilities to run some interesting queries.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 数据清理完成后，开始进行数据探索任务。我们可以使用pandas日期时间功能运行一些有趣的查询。
- en: 'For example, if we want to get all the records from a particular year, pass
    that year to the DataFrame inside square brackets. The following screenshot shows
    the price data from the year 2010:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要获取特定年份的所有记录，将该年份传递给DataFrame内的方括号。以下截图显示了2010年的价格数据：
- en: '![](Images/33787d3c-0a7e-48e0-87d8-ec34a2356d11.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/33787d3c-0a7e-48e0-87d8-ec34a2356d11.png)'
- en: We can also specify whether we want the data from a particular date.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以指定我们是否要从特定日期获取数据。
- en: 'The following screenshot shows the bitcoin price in USD from August 1, 2017:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了2017年8月1日的比特币价格：
- en: '![](Images/36bfa72b-8716-43a8-964f-d5c6de623a4b.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/36bfa72b-8716-43a8-964f-d5c6de623a4b.png)'
- en: We can also specify whether we want the data from a particular period spanning
    certain dates.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以指定我们是否要从特定日期跨越一定日期的特定期间获取数据。
- en: 'The following screenshot shows the data from August 1, 2017, onward:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了2017年8月1日以后的数据：
- en: '![](Images/70c5c9f1-469a-4487-b489-a104ac298528.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/70c5c9f1-469a-4487-b489-a104ac298528.png)'
- en: 'Statistical information can also be retrieved using pandas methods. For example,
    to get the minimum price from this dataset, we can use the `min()` method, as
    shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用pandas方法检索统计信息。例如，要从数据集中获取最低价格，我们可以使用`min()`方法，如下图所示：
- en: '![](Images/20c26302-2140-4d74-9b39-841a5e472856.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/20c26302-2140-4d74-9b39-841a5e472856.png)'
- en: 'To get the maximum price, use the `max ()` method, as shown in the following
    screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最高价格，使用`max()`方法，如下图所示：
- en: '![](Images/cdc524fa-fc2f-44cd-96ca-58fda1a7d559.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cdc524fa-fc2f-44cd-96ca-58fda1a7d559.png)'
- en: 'A whole bunch of statistical information can be received in one go using the
    `describe ()` method, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`describe()`方法一次性获得大量统计信息，如下图所示：
- en: '![](Images/5a11b1ce-e18e-42e4-afd7-46dca4687e63.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5a11b1ce-e18e-42e4-afd7-46dca4687e63.png)'
- en: Data visualization
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据可视化
- en: It is very easy to start creating plots from data using `pandas` and `matplotlib`.
    To plot the entirety of the data, we will call the `plot` method on the `price`
    `DataFrame`, and we will get a plot where the *x *axis is the date and the *y *axis
    is the price data.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pandas`和`matplotlib`从数据开始创建图表非常容易。要绘制整个数据，我们将在`price` `DataFrame`上调用`plot`方法，然后将得到一个图表，其中*x*轴是日期，*y*轴是价格数据。
- en: 'The following screenshot describes the plot, wherein the *x *axis is the date
    and the *y *axis is the price data:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图描述了绘图，其中*x*轴是日期，*y*轴是价格数据：
- en: '![](Images/729227c0-4ca6-4570-9c46-f9a39bf65db9.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/729227c0-4ca6-4570-9c46-f9a39bf65db9.png)'
- en: We can also zoom in on a certain time period. For example, in order to plot
    the data from 2017 only, first select the data that is from 2017 and then call
    the `plot ()` method on the subset of data.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以放大到特定的时间段。例如，为了仅绘制2017年的数据，首先选择来自2017年的数据，然后在数据子集上调用`plot()`方法。
- en: 'In the following screenshot, we have a plot for the price data from 2017 onward:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们有2017年以后的价格数据的图表：
- en: '![](Images/8cb9d715-b57f-4087-8c20-b9c51b08b205.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8cb9d715-b57f-4087-8c20-b9c51b08b205.png)'
- en: In the next section, we will look at how to use bitcoin transaction graphs.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将学习如何使用比特币交易图。
- en: Exploring bitcoin transaction graphs
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索比特币交易图
- en: In this section, we will learn about how to get the blockchain data, and provide
    step-by-step information as to how to explore, clean up, analyze, and visualize
    this data.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何获取区块链数据，并提供逐步信息，以便探索、清理、分析和可视化这些数据。
- en: Bitcoin and blockchain graphs
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比特币和区块链图
- en: '`Blockchain.info` is one of the best places to look at the latest bitcoin stats
    and graphs. There are different kinds of charts and graphs concerning bitcoin
    and blockchain that are available for analysis. We can also download the data
    in a variety of formats—CSV, JSON, and so on. We have downloaded some of this
    data in CSV format in the previous section, and now we will explore this data
    in a Jupyter Notebook.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`Blockchain.info`是查看最新比特币统计数据和图表的最佳地方之一。有关比特币和区块链的不同类型的图表和图形可供分析。我们还可以以各种格式（CSV、JSON等）下载数据。在上一节中，我们已经以CSV格式下载了部分数据，现在我们将在Jupyter
    Notebook中探索这些数据。'
- en: We start by importing the modules we need. We need `pandas` for data reading,
    exploration, and cleanup, and we need `matplotlib` for creating the graphs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入所需的模块。我们需要`pandas`来读取、探索和清理数据，还需要`matplotlib`来创建图表。
- en: Look at the data showing the total number of bitcoins in circulation. Read the
    CSV file that has this data and create a `pandas` `DataFrame`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 查看显示流通中比特币总数的数据。读取包含此数据的CSV文件，并创建一个`pandas` `DataFrame`。
- en: 'The following screenshot shows the data for the total number of bitcoins in
    circulation:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了流通中比特币的总数量的数据：
- en: '![](Images/0743f10c-867e-479c-9d69-55fcc8a6d1b6.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0743f10c-867e-479c-9d69-55fcc8a6d1b6.png)'
- en: Exploring, cleaning up, and analyzing data
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索、清理和分析数据
- en: In order to explore this data, we use the `head()` method to look at the records
    from the top and we call the `info()` method on the DataFrame to get some more
    information, such as how many records there are, how many null or missing records
    there are, or what the data types of the various columns are.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索这些数据，我们使用`head()`方法查看顶部的记录，并在DataFrame上调用`info()`方法以获取更多信息，例如有多少记录、有多少空记录或缺失记录，或各列的数据类型是什么。
- en: We can see that the `Date` column is shown as object. We change this to date-time
    to visualize this data. To do this, we use the `to_datetime` method, and assign
    the converted values back to the same column—the DataFrame.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`Date`列显示为对象。我们将其更改为日期时间以可视化这些数据。为此，我们使用`to_datetime`方法，并将转换后的值分配回同一列——DataFrame。
- en: 'The following screenshot depicts the date format of bitcoins:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图描述了比特币的日期格式：
- en: '![](Images/2032a12f-45cd-4a9b-9728-693e60776570.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2032a12f-45cd-4a9b-9728-693e60776570.png)'
- en: Set the index of the DataFrame to the `Date` column and delete the `Date` column
    as a separate column. Perform this step in order to take advantage of the time
    series features of pandas.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将DataFrame的索引设置为`Date`列，并删除`Date`列作为单独的列。执行此步骤以利用pandas的时间序列功能。
- en: Now, check again whether the changes took place by calling `info` and `head`
    on the DataFrame.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过在DataFrame上调用`info`和`head`来再次检查是否发生了更改。
- en: 'The following screenshot shows the bitcoins for a particular range of dates:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了特定日期范围内的比特币：
- en: '![](Images/9ab5ba6f-7113-403e-82fc-b52528bd4176.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9ab5ba6f-7113-403e-82fc-b52528bd4176.png)'
- en: We are now ready to create a graph from this data. Call the `plot ()` method
    on the DataFrame and then call the `show ()` method to display the graph.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备从这些数据创建图表。在DataFrame上调用`plot()`方法，然后调用`show()`方法显示图表。
- en: It shows the total number of bitcoins that have already been mined over the
    time period for which we have this record.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了已经在我们有记录的时间段内挖出的比特币总数。
- en: 'The following screenshot describes the graph for the preceding data:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图描述了前述数据的图表：
- en: '![](Images/458d00ef-995d-458c-a2b0-0d5b0399e572.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/458d00ef-995d-458c-a2b0-0d5b0399e572.png)'
- en: Visualizing data
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化数据
- en: 'Let''s look at another example. Here, we are looking at transactions for block
    data that we read into the data:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子。在这里，我们正在查看我们读入数据的区块数据的交易：
- en: '![](Images/b1ab2dbc-0c89-4cf8-bc5b-72b6d4157d26.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b1ab2dbc-0c89-4cf8-bc5b-72b6d4157d26.png)'
- en: 'Initially, we visually explore this data using the `head` and `info` methods,
    as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们使用`head`和`info`方法对这些数据进行可视化探索，如下截图所示：
- en: '![](Images/47dc98ac-758b-497b-a6f1-e7152bb9324f.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/47dc98ac-758b-497b-a6f1-e7152bb9324f.png)'
- en: 'Next, we clean up, convert, and reshape the data, as shown in the following
    screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们清理、转换和重塑数据，如下截图所示：
- en: '![](Images/22d53244-042e-4a08-aea3-d5dfe393b026.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/22d53244-042e-4a08-aea3-d5dfe393b026.png)'
- en: 'Finally, we visualize our transactions in the block data, as shown in the following
    screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在区块数据中可视化我们的交易，如下截图所示：
- en: '![](Images/9e50e1ad-4a79-46aa-9442-ea6a4d5c2f89.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9e50e1ad-4a79-46aa-9442-ea6a4d5c2f89.png)'
- en: 'Similarly, there is another example that we should look at regarding the data
    showing mining difficulty. The steps for mining data are as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，还有另一个例子，我们应该看一下关于显示挖矿难度的数据。挖矿数据的步骤如下：
- en: 'Read in the data, as shown in the following screenshot:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取数据，如下截图所示：
- en: '![](Images/d1aa04c7-3ce1-4efc-9420-5a3626c1d1a3.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d1aa04c7-3ce1-4efc-9420-5a3626c1d1a3.png)'
- en: 'Explore the data, as shown in the following screenshot:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索数据，如下截图所示：
- en: '![](Images/bf210410-6926-4245-b20b-74aaee8fabba.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/bf210410-6926-4245-b20b-74aaee8fabba.png)'
- en: 'Clean up the data, as shown in the following screenshot:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理数据，如下截图所示：
- en: '![](Images/b8a60285-a8af-44be-aa1d-f985330c813c.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b8a60285-a8af-44be-aa1d-f985330c813c.png)'
- en: 'Finally, visualize the data, as shown in the following screenshot:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，可视化数据，如下截图所示：
- en: '![](Images/039aa5f6-de27-4770-be78-7010a56cb92e.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/039aa5f6-de27-4770-be78-7010a56cb92e.png)'
- en: We can see that there has been a gradual increase in mining difficulty over
    the years, and it trends upwards. These are just a few examples of transaction
    graphs. There is a lot of other data available for you to explore from the bitcoin
    and blockchain ecosystem.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到多年来挖矿难度逐渐增加，并呈上升趋势。这些只是交易图表的几个例子。比特币和区块链生态系统中还有很多其他可供您探索的数据。
- en: In the next module, we will look at how to collect and analyze *Bitcoin Dice*
    game data.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个模块中，我们将学习如何收集和分析*比特币骰子*游戏数据。
- en: Collecting and analyzing Bitcoin Dice game data
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集和分析比特币骰子游戏数据
- en: In this section, we will look at the data from a dice games portal, read in
    the data from the API, and use `pandas` to convert it into a tabular format. We
    will also export the data and find the things that need cleaning up. We'll clean
    up, manipulate, and reshape the data, making it ready for analysis, and finally,
    we will draw a simple plot from the clean data.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看来自骰子游戏门户的数据，从API中读取数据，并使用`pandas`将其转换为表格格式。我们还将导出数据并找到需要清理的内容。我们将清理、操作和重塑数据，使其准备好进行分析，最后，我们将从干净的数据中绘制一个简单的图表。
- en: Getting data from the Games Web API
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从游戏Web API获取数据
- en: The user can explore the dice games data from MegaDice.com, which is available
    from the website's API link at [https://www.megadice.com](https://www.megadice.com).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以从MegaDice.com上的API链接探索骰子游戏数据，该数据可从网站的API链接[https://www.megadice.com](https://www.megadice.com)获取。
- en: We will use the `pandas read_JSON` method to read individual winner history
    data from the MegaDice API link. We create a `pandas DataFrame`, called `leaders`,
    from this data and call in the `head ()` method to see what this data looks like.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`pandas read_JSON`方法从MegaDice API链接中读取个人赢家历史数据。我们从这些数据创建了一个名为`leaders`的`pandas
    DataFrame`，并调用`head()`方法来查看这些数据的样子。
- en: 'The code in the following screenshots shows the creation of the `pandas` `DataFrame`, `leaders`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图中的代码显示了`pandas` `DataFrame` `leaders`的创建：
- en: '![](Images/a44027e0-92ea-473d-99a7-55f28add40e0.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a44027e0-92ea-473d-99a7-55f28add40e0.png)'
- en: 'The data we have imported has 703 columns, most of which are individual dates.
    We will delete the last column, queryTimeInSeconds, which is not really part of
    the actual data, and should not be there. This column is shown in the following
    screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入的数据有703列，其中大部分是个别日期。我们将删除最后一列`queryTimeInSeconds`，这不是实际数据的一部分，也不应该存在。该列显示在以下截图中：
- en: '![](Images/1f7c7c51-8f17-4f38-8e88-486352256436.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1f7c7c51-8f17-4f38-8e88-486352256436.png)'
- en: 'As there are too many columns and very few rows, we want the columns to be
    rows, where each state has a single row of records. In order to perform this,
    we need to flip the columns to rows and vice versa. To do this, we need to go
    through the following steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列太多，行太少，我们希望将列变成行，其中每个状态都有一行记录。为了执行此操作，我们需要将列翻转为行，反之亦然。为此，我们需要执行以下步骤：
- en: 'First, we reset the index so that we bring in the current index as another
    column. The values for this column will become column names when we flip the `DataFrame`.
    Confirm it with the `head ()` method, as shown in the following screenshot:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们重置索引，以便将当前索引作为另一列引入。当我们翻转`DataFrame`时，此列的值将成为列名。使用`head()`方法确认，如下截图所示：
- en: '![](Images/5f7a32fa-1062-4c86-beda-ce274aaefca3.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5f7a32fa-1062-4c86-beda-ce274aaefca3.png)'
- en: 'Next, flip the DataFrame by using a method called `T`, or transposed, which
    can be seen in the following screenshot:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用称为`T`或转置的方法翻转DataFrame，如下截图所示：
- en: '![](Images/40467528-0eb5-4c1d-978b-4543ee21c193.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/40467528-0eb5-4c1d-978b-4543ee21c193.png)'
- en: 'Now, in the following screenshot, we can see that our row index has become
    dates and our earlier rows have become columns:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在以下截图中，我们可以看到我们的行索引已成为日期，我们之前的行已成为列：
- en: '![](Images/b08bb4d2-59a0-4a88-90e2-70905c491af6.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b08bb4d2-59a0-4a88-90e2-70905c491af6.png)'
- en: 'We''ve got the columns and rows we want, but there are also a few other things
    that need to be done. We want the date values to be in a date-time format, but
    currently it is in text format. However, the transposing of the DataFrame has
    changed the date values into an index. We need to first convert them into a column
    using the `reset_index` method, as shown in the following screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经得到了想要的列和行，但还有一些其他事情需要做。我们希望日期值以日期时间格式显示，但目前它是文本格式。然而，数据框的转置已经将日期值更改为索引。我们需要首先使用“reset_index”方法将它们转换为列，如下面的屏幕截图所示：
- en: '![](Images/0f50d3e6-b409-49b4-9114-b59b40d22472.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0f50d3e6-b409-49b4-9114-b59b40d22472.png)'
- en: 'Now we can convert this text data into a proper date-time format, as shown
    in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以将这些文本数据转换为正确的日期时间格式，如下面的屏幕截图所示：
- en: '![](Images/7b400b4e-6627-4c48-9c04-ce7ff291565d.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7b400b4e-6627-4c48-9c04-ce7ff291565d.png)'
- en: 'Call the `info ()` method to confirm this. We have the new column `Date` in
    the proper date-time format. Date values are required to be in text format in
    the column name index, as shown in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 调用“info()”方法来确认这一点。我们在适当的日期时间格式中有了新的列“日期”。日期值需要以文本格式显示在列名索引中，如下面的屏幕截图所示：
- en: '![](Images/602366da-4fe1-46d1-9bb1-6c7d5de73bb1.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/602366da-4fe1-46d1-9bb1-6c7d5de73bb1.png)'
- en: 'We will set the index back to the proper `Date` column and remove the `Date`
    column as a separate column, as shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把索引设置回适当的“日期”列，并将“日期”列作为单独的列删除，如下面的屏幕截图所示：
- en: '![](Images/d79a9097-673c-453c-8856-dccfbb46bb15.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d79a9097-673c-453c-8856-dccfbb46bb15.png)'
- en: 'Now, we have the DataFrame properly indexed on the `Date` field:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经正确地在“日期”字段上建立了数据框的索引：
- en: '![](Images/9e7edc0b-ecfd-40e7-843d-a7a68caf6ab3.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9e7edc0b-ecfd-40e7-843d-a7a68caf6ab3.png)'
- en: 'Draw a sample plot of this data using the `plot ()` method and show it with
    the `plt.show ()` method, as shown in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“plot()”方法绘制这些数据的示例图，并使用“plt.show()”方法显示，如下面的屏幕截图所示：
- en: '![](Images/618c9870-2ba5-4919-93e4-08495b6d77fe.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/618c9870-2ba5-4919-93e4-08495b6d77fe.png)'
- en: Now this data can be used as `pandas` time series functions, or multiple blocks
    that can be visualized for different subsets of dates, and so on.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些数据可以用作“pandas”时间序列函数，或者可以为不同日期子集可视化多个块等。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to prepare our setup for data analysis. We saw
    how to get, read in, and clean the price data. We also learned how to explore,
    manipulate, and visualize the cleaned-up data.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何准备数据分析的设置。我们看到了如何获取、读取和清理价格数据。我们还学习了如何探索、操作和可视化清理后的数据。
- en: We also explored some of the bitcoin and blockchain graphs that we can create.
    We learned where to get the relevant data, and we read this data in a Jupyter
    Notebook and imported the necessary modules. We cleaned up and manipulated this
    data, and finally, we created graphs out of this data and a notebook, but without
    using Python.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探索了一些比特币和区块链图表，我们可以创建。我们学习了从哪里获取相关数据，并在Jupyter Notebook中读取了这些数据并导入了必要的模块。我们清理和操作了这些数据，最后，我们从这些数据和笔记本中创建了图表，但没有使用Python。
- en: We also explored the data from a dice games portal. We added the data from the
    API and used pandas to convert it into a tabular format. We explored the data
    and found the things that needed cleaning up. We cleaned up and manipulated the
    data and made it ready for analysis.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探索了来自骰子游戏门户的数据。我们添加了来自API的数据，并使用pandas将其转换为表格格式。我们探索了数据，并找到了需要清理的内容。我们清理和操作了数据，并使其准备好进行分析。
