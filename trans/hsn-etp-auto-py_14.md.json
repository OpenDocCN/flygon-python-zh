["```py\n.encoding = \"UTF-8\" vhv.enable = \"TRUE\" config.version = \"8\" virtualHW.version = \"8\"   vmci0.present = \"TRUE\" hpet0.present = \"TRUE\" displayName = \"test_jinja2\"   # Specs memSize = \"4096\" numvcpus = \"1\" cpuid.coresPerSocket = \"1\"     # HDD scsi0.present = \"TRUE\" scsi0.virtualDev = \"lsilogic\" scsi0:0.deviceType = \"scsi-hardDisk\" scsi0:0.fileName = \"test_jinja2.vmdk\" scsi0:0.present = \"TRUE\"   # Floppy floppy0.present = \"false\"   #  CDRom ide1:0.present = \"TRUE\" ide1:0.deviceType = \"cdrom-image\" ide1:0.fileName = \"/vmfs/volumes/datastore1/ISO Room/CentOS-7-x86_64-Minimal-1708.iso\"   #  Networking ethernet0.virtualDev = \"e1000\" ethernet0.networkName = \"network1\" ethernet0.addressType = \"generated\" ethernet0.present = \"TRUE\"   # VM Type guestOS = \"ubuntu-64\"   # VMware Tools toolScripts.afterPowerOn = \"TRUE\" toolScripts.afterResume = \"TRUE\" toolScripts.beforeSuspend = \"TRUE\" toolScripts.beforePowerOff = \"TRUE\" tools.remindInstall = \"TRUE\" tools.syncTime = \"FALSE\"\n```", "```py\n.encoding = \"UTF-8\" vhv.enable = \"TRUE\" config.version = \"8\" virtualHW.version = \"8\"   vmci0.present = \"TRUE\" hpet0.present = \"TRUE\" displayName = \"{{vm_name}}\"   # Specs memSize = \"{{ vm_memory_size }}\" numvcpus = \"{{ vm_cpu }}\" cpuid.coresPerSocket = \"{{cpu_per_socket}}\"     # HDD scsi0.present = \"TRUE\" scsi0.virtualDev = \"lsilogic\" scsi0:0.deviceType = \"scsi-hardDisk\" scsi0:0.fileName = \"{{vm_name}}.vmdk\" scsi0:0.present = \"TRUE\"   # Floppy floppy0.present = \"false\"     # CDRom ide1:0.present = \"TRUE\" ide1:0.deviceType = \"cdrom-image\" ide1:0.fileName = \"/vmfs/volumes/datastore1/ISO Room/{{vm_image}}\"     # Networking ethernet0.virtualDev = \"e1000\" ethernet0.networkName = \"{{vm_network1}}\" ethernet0.addressType = \"generated\" ethernet0.present = \"TRUE\"   # VM Type guestOS = \"{{vm_guest_os}}\" #centos-64 or ubuntu-64   # VMware Tools toolScripts.afterPowerOn = \"TRUE\" toolScripts.afterResume = \"TRUE\" toolScripts.beforeSuspend = \"TRUE\" toolScripts.beforePowerOff = \"TRUE\" tools.remindInstall = \"TRUE\" tools.syncTime = \"FALSE\"\n```", "```py\npip install xlrd\n```", "```py\nimport xlrd\nworkbook = xlrd.open_workbook(r\"/media/bassim/DATA/GoogleDrive/Packt/EnterpriseAutomationProject/Chapter14_Creating_and_managing_VMware_virtual_machines/vm_inventory.xlsx\") sheet = workbook.sheet_by_index(0) print(sheet.nrows) print(sheet.ncols)   print(int(sheet.row(1)[1].value))   for row in range(1,sheet.nrows):\n  vm_name = sheet.row(row)[0].value\n    vm_memory_size = int(sheet.row(row)[1].value)\n  vm_cpu = int(sheet.row(row)[2].value)\n  cpu_per_socket = int(sheet.row(row)[3].value)\n  vm_hdd_size = int(sheet.row(row)[4].value)\n  vm_guest_os = sheet.row(row)[5].value\n    vm_network1 = sheet.row(row)[6].value\n```", "```py\n  from jinja2 import FileSystemLoader, Environment\nimport os\nimport xlrd\n\nprint(\"The script working directory is {}\" .format(os.path.dirname(__file__))) script_dir = os.path.dirname(__file__)   vmx_env = Environment(\n  loader=FileSystemLoader(script_dir),\n  trim_blocks=True,\n  lstrip_blocks= True )     workbook = xlrd.open_workbook(os.path.join(script_dir,\"vm_inventory.xlsx\")) sheet = workbook.sheet_by_index(0) print(\"The number of rows inside the Excel sheet is {}\" .format(sheet.nrows)) print(\"The number of columns inside the Excel sheet is {}\" .format(sheet.ncols))     vmx_data = {}   for row in range(1,sheet.nrows):\n  vm_name = sheet.row(row)[0].value\n    vm_memory_size = int(sheet.row(row)[1].value)\n  vm_cpu = int(sheet.row(row)[2].value)\n  cpu_per_socket = int(sheet.row(row)[3].value)\n  vm_hdd_size = int(sheet.row(row)[4].value)\n  vm_guest_os = sheet.row(row)[5].value\n    vm_network1 = sheet.row(row)[6].value\n\n    vmx_data[\"vm_name\"] = vm_name\n    vmx_data[\"vm_memory_size\"] = vm_memory_size\n    vmx_data[\"vm_cpu\"] = vm_cpu\n    vmx_data[\"cpu_per_socket\"] = cpu_per_socket\n    vmx_data[\"vm_hdd_size\"] = vm_hdd_size\n    vmx_data[\"vm_guest_os\"] = vm_guest_os\n    if vm_guest_os == \"ubuntu-64\":\n  vmx_data[\"vm_image\"] = \"ubuntu-16.04.4-server-amd64.iso\"    elif vm_guest_os == \"centos-64\":\n  vmx_data[\"vm_image\"] = \"CentOS-7-x86_64-Minimal-1708.iso\"    elif vm_guest_os == \"windows7-64\":\n  vmx_data[\"vm_image\"] = \"windows_7_ultimate_sp1_ x86-x64_bg-en_IE10_ April_2013.iso\"    vmx_data[\"vm_network1\"] = vm_network1\n\n    vmx_data = vmx_env.get_template(\"vmx_template.j2\").render(vmx_data)\n  with open(os.path.join(script_dir,\"vmx_files/{}.vmx\".format(vm_name)), \"w\") as f:\n  print(\"Writing Data of {} into directory\".format(vm_name))\n  f.write(vmx_data)\n  vmx_data = {} \n```", "```py\n#!/usr/bin/python __author__ = \"Bassim Aly\" __EMAIL__ = \"basim.alyy@gmail.com\"   import paramiko\nfrom scp import SCPClient\nimport time\n\ndef upload_and_create_directory(vm_name, hdd_size, source_file):    commands = [\"mkdir /vmfs/volumes/datastore1/{0}\".format(vm_name),\n  \"vmkfstools -c {0}g -a lsilogic -d zeroedthick /vmfs/volumes/datastore1/{1}/{1}.vmdk\".format(hdd_size,\n  vm_name),]\n  register_command = \"vim-cmd solo/registervm /vmfs/volumes/datastore1/{0}/{0}.vmx\".format(vm_name)\n  ipaddr = \"10.10.10.115\"\n  username = \"root\"\n  password = \"access123\"    ssh = paramiko.SSHClient()\n  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())    ssh.connect(ipaddr, username=username, password=password, look_for_keys=False, allow_agent=False)    for cmd in commands:\n  try:\n  stdin, stdout, stderr = ssh.exec_command(cmd)\n  print \" DEBUG: ... Executing the command on ESXi server\".format(str(stdout.readlines()))    except Exception as e:\n  print e\n            pass\n print \" DEBUG: **ERR....unable to execute command\"\n  time.sleep(2)\n  with SCPClient(ssh.get_transport()) as scp:\n  scp.put(source_file, remote_path='/vmfs/volumes/datastore1/{0}'.format(vm_name))\n  ssh.exec_command(register_command)\n  ssh.close()\n```", "```py\n#!/usr/bin/python __author__ = \"Bassim Aly\" __EMAIL__ = \"basim.alyy@gmail.com\"   import paramiko\nfrom scp import SCPClient\nimport time\nfrom jinja2 import FileSystemLoader, Environment\nimport os\nimport xlrd\n\ndef upload_and_create_directory(vm_name, hdd_size, source_file):    commands = [\"mkdir /vmfs/volumes/datastore1/{0}\".format(vm_name),\n  \"vmkfstools -c {0}g -a lsilogic -d zeroedthick /vmfs/volumes/datastore1/{1}/{1}.vmdk\".format(hdd_size,\n  vm_name),]\n  register_command = \"vim-cmd solo/registervm /vmfs/volumes/datastore1/{0}/{0}.vmx\".format(vm_name)    ipaddr = \"10.10.10.115\"\n  username = \"root\"\n  password = \"access123\"    ssh = paramiko.SSHClient()\n  ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())    ssh.connect(ipaddr, username=username, password=password, look_for_keys=False, allow_agent=False)    for cmd in commands:\n  try:\n  stdin, stdout, stderr = ssh.exec_command(cmd)\n  print \" DEBUG: ... Executing the command on ESXi server\".format(str(stdout.readlines()))    except Exception as e:\n  print e\n            pass\n print \" DEBUG: **ERR....unable to execute command\"\n  time.sleep(2)\n  with SCPClient(ssh.get_transport()) as scp:\n  print(\" DEBUG: ... Uploading file to the datastore\")\n  scp.put(source_file, remote_path='/vmfs/volumes/datastore1/{0}'.format(vm_name))\n  print(\" DEBUG: ... Register the virtual machine {}\".format(vm_name))\n  ssh.exec_command(register_command)    ssh.close()   print(\"The script working directory is {}\" .format(os.path.dirname(__file__))) script_dir = os.path.dirname(__file__)   vmx_env = Environment(\n  loader=FileSystemLoader(script_dir),\n  trim_blocks=True,\n  lstrip_blocks= True )   workbook = xlrd.open_workbook(os.path.join(script_dir,\"vm_inventory.xlsx\")) sheet = workbook.sheet_by_index(0) print(\"The number of rows inside the Excel sheet is {}\" .format(sheet.nrows)) print(\"The number of columns inside the Excel sheet is {}\" .format(sheet.ncols))     vmx_data = {}   for row in range(1,sheet.nrows):\n  vm_name = sheet.row(row)[0].value\n    vm_memory_size = int(sheet.row(row)[1].value)\n  vm_cpu = int(sheet.row(row)[2].value)\n  cpu_per_socket = int(sheet.row(row)[3].value)\n  vm_hdd_size = int(sheet.row(row)[4].value)\n  vm_guest_os = sheet.row(row)[5].value\n    vm_network1 = sheet.row(row)[6].value\n\n    vmx_data[\"vm_name\"] = vm_name\n    vmx_data[\"vm_memory_size\"] = vm_memory_size\n    vmx_data[\"vm_cpu\"] = vm_cpu\n    vmx_data[\"cpu_per_socket\"] = cpu_per_socket\n    vmx_data[\"vm_hdd_size\"] = vm_hdd_size\n    vmx_data[\"vm_guest_os\"] = vm_guest_os\n    if vm_guest_os == \"ubuntu-64\":\n  vmx_data[\"vm_image\"] = \"ubuntu-16.04.4-server-amd64.iso\"    elif vm_guest_os == \"centos-64\":\n  vmx_data[\"vm_image\"] = \"CentOS-7-x86_64-Minimal-1708.iso\"    elif vm_guest_os == \"windows7-64\":\n  vmx_data[\"vm_image\"] = \"windows_7_ultimate_sp1_ x86-x64_bg-en_IE10_ April_2013.iso\"    vmx_data[\"vm_network1\"] = vm_network1\n\n    vmx_data = vmx_env.get_template(\"vmx_template.j2\").render(vmx_data)\n  with open(os.path.join(script_dir,\"vmx_files/{}.vmx\".format(vm_name)), \"w\") as f:\n  print(\"Writing Data of {} into directory\".format(vm_name))\n  f.write(vmx_data)\n  print(\" DEBUG:Communicating with ESXi server to upload and register the VM\")\n  upload_and_create_directory(vm_name,\n  vm_hdd_size,\n  os.path.join(script_dir,\"vmx_files\",\"{}.vmx\".format(vm_name)))\n  vmx_data = {}\n```", "```py\npip install -U pyvmomi\n```", "```py\nyum install pyvmomi -y\n```", "```py\nfrom pyVim.connect import SmartConnect, Disconnect,SmartConnectNoSSL  ESXi_connection = SmartConnectNoSSL(host=\"10.10.10.115\", user=\"root\", pwd='access123')\n```", "```py\nimport ssl import requests certificate = ssl.SSLContext(ssl.PROTOCOL_TLSv1) certificate.verify_mode = ssl.CERT_NONE\nrequests.packages.urllib3.disable_warnings()    \n```", "```py\n#!/usr/bin/python __author__ = \"Bassim Aly\" __EMAIL__ = \"basim.alyy@gmail.com\"   from pyVim.connect import SmartConnect, Disconnect,SmartConnectNoSSL\nESXi_connection = SmartConnectNoSSL(host=\"10.10.10.115\", user=\"root\", pwd='access123')   full_name = ESXi_connection.content.about.fullName\nversion = ESXi_connection.content.about.version\nprint(\"Server Full name is {}\".format(full_name)) print(\"ESXi version is {}\".format(version))\nDisconnect(ESXi_connection) \n```", "```py\n#!/usr/bin/python __author__ = \"Bassim Aly\" __EMAIL__ = \"basim.alyy@gmail.com\"   from pyVim.connect import SmartConnect, Disconnect,SmartConnectNoSSL\n\nESXi_connection = SmartConnectNoSSL(host=\"10.10.10.115\", user=\"root\", pwd='access123')   datacenter = ESXi_connection.content.rootFolder.childEntity[0] #First Datacenter in the ESXi\\   virtual_machines = datacenter.vmFolder.childEntity #Access the child inside the vmFolder   print virtual_machines\n\nfor machine in virtual_machines:\n  print(machine.name)\n  try:\n  guest_vcpu = machine.summary.config.numCpu\n        print(\"  The Guest vCPU is {}\" .format(guest_vcpu))    guest_os = machine.summary.config.guestFullName\n        print(\"  The Guest Operating System is {}\" .format(guest_os))    guest_mem = machine.summary.config.memorySizeMB\n        print(\"  The Guest Memory is {}\" .format(guest_mem))    ipadd = machine.summary.guest.ipAddress\n        print(\"  The Guest IP Address is {}\" .format(ipadd))\n  print \"=================================\"\n  except:\n  print(\"  Can't get the summary\")\n```", "```py\n#!/usr/bin/python __author__ = \"Bassim Aly\" __EMAIL__ = \"basim.alyy@gmail.com\"   from pyVim.connect import SmartConnect, Disconnect,SmartConnectNoSSL\n\nESXi_connection = SmartConnectNoSSL(host=\"10.10.10.115\", user=\"root\", pwd='access123')   datacenter = ESXi_connection.content.rootFolder.childEntity[0] #First Datacenter in the ESXi\\   virtual_machines = datacenter.vmFolder.childEntity #Access the child inside the vmFolder   for machine in virtual_machines:\n  try:\n  powerstate = machine.summary.runtime.powerState\n        if \"python-vm\" in machine.name and powerstate == \"poweredOff\":\n  print(machine.name)\n  print(\"     The Guest Power state is {}\".format(powerstate))\n  machine.PowerOn()\n  print(\"**Powered On the virtual machine**\")    elif \"python-vm\" in machine.name and powerstate == \"poweredOn\":\n  print(machine.name)\n  print(\"     The Guest Power state is {}\".format(powerstate))\n  machine.PowerOff()\n  print(\"**Powered Off the virtual machine**\")\n  except:\n  print(\"  Can't execute the task\")   Disconnect(ESXi_connection)\n```", "```py\n- name: Provision New VM\n  hosts: localhost\n  connection: local\n  vars:\n  - VM_NAME: DevOps\n  - ESXi_HOST: 10.10.10.115\n  - USERNAME: root\n  - PASSWORD: access123\n  tasks:   - name: current time\n  command: date +%D\n  register: current_time\n  - name: Check for vSphere access parameters\n  fail: msg=\"Must set vsphere_login and vsphere_password in a Vault\"\n  when: (USERNAME is not defined) or (PASSWORD is not defined)\n  - name: debug vCenter hostname\n  debug: msg=\"vcenter_hostname = '{{ ESXi_HOST }}'\"\n  - name: debug the time\n  debug: msg=\"Time is = '{{ current_time }}'\"    - name: \"Provision the VM\"\n  vmware_guest:\n hostname: \"{{ ESXi_HOST }}\"\n  username: \"{{ USERNAME }}\"\n  password: \"{{ PASSWORD }}\"\n  datacenter: ha-datacenter\n  validate_certs: False\n  name: \"{{ VM_NAME }}\"\n  folder: /\n  guest_id: centos64Guest\n  state: poweredon\n  force: yes\n  disk:\n  - size_gb: 100\n  type: thin\n  datastore: datastore1    networks:\n  - name: network1\n  device_type: e1000 #            mac: ba:ba:ba:ba:01:02 #            wake_on_lan: True    - name: network2\n  device_type: e1000    hardware:\n memory_mb: 4096\n  num_cpus: 4\n  num_cpu_cores_per_socket: 2\n  hotadd_cpu: True\n  hotremove_cpu: True\n  hotadd_memory: True\n  scsi: lsilogic\n  cdrom:\n type: \"iso\"\n  iso_path: \"[datastore1] ISO Room/CentOS-7-x86_64-Minimal-1708.iso\"\n  register: result \n```", "```py\n# ansible-playbook esxi_create_vm.yml -vv\n```"]