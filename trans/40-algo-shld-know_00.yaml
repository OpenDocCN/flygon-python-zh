- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Algorithms have always played an important role both in the science and practice
    of computing. This book focuses on utilizing these algorithms to solve real-world
    problems. To get the most out of these algorithms, a deeper understanding of their
    logic and mathematics is imperative. You'll start with an introduction to algorithms
    and explore various algorithm design techniques. Moving on, you'll learn about
    linear programming, page ranking, and graphs, and even work with machine learning
    algorithms, understanding the math and logic behind them. This book also contains
    case studies, such as weather prediction, tweet clustering, and movie recommendation
    engines, that will show you how to apply these algorithms optimally. As you complete
    this book, you will become confident in using algorithms for solving real-world
    computational problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 算法在计算机科学和实践中一直扮演着重要角色。本书侧重于利用这些算法来解决现实世界的问题。要充分利用这些算法，对它们的逻辑和数学有更深入的理解是必不可少的。您将从算法介绍开始，探索各种算法设计技术。接着，您将了解线性规划、页面排名和图表，甚至使用机器学习算法，理解它们背后的数学和逻辑。本书还包含案例研究，如天气预测、推文聚类和电影推荐引擎，将向您展示如何最优地应用这些算法。完成本书后，您将自信地使用算法解决现实世界的计算问题。
- en: Who this book is for
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合对象
- en: This book is for the serious programmer! Whether you are an experienced programmer
    looking to gain a deeper understanding of the math behind the algorithms or have
    limited programming or data science knowledge and want to learn more about how
    you can take advantage of these battle-tested algorithms to improve the way you
    design and write code, you’ll find this book useful. Experience with Python programming
    is a must, although knowledge of data science is helpful but not necessary.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适合严肃的程序员！无论您是经验丰富的程序员，希望更深入地了解算法背后的数学，还是对编程或数据科学知识有限，想了解如何利用经过实战检验的算法来改进设计和编写代码的方式，您都会发现本书很有用。必须具备Python编程经验，尽管了解数据科学有所帮助，但并非必需。
- en: What this book covers
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖内容
- en: Chapter 1, *Overview of Algorithms*, summarizes the fundamentals of algorithms.
    It starts with a section on the basic concepts needed to understand the working
    of different algorithms. It summarizes how people started using algorithms to
    mathematically formulate certain classes of problems. It also mentions the limitations
    of different algorithms. The next section explains the various ways to specify
    the logic of an algorithm. As Python is used in this book to write the algorithms,
    how to set up the environment in order to run the examples is explained next.
    Then, the various ways in which an algorithm's performance can be quantified and
    compared against other algorithms are discussed. Finally, this chapter discusses
    various ways in which a particular implementation of an algorithm can be validated.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章《算法概述》总结了算法的基本原理。它从需要理解不同算法工作原理的基本概念开始。它总结了人们如何开始使用算法来数学地表达某些类别的问题。它还提到了不同算法的局限性。接下来的部分解释了指定算法逻辑的各种方法。由于本书使用Python编写算法，因此接下来解释了如何设置环境以运行示例。然后，讨论了衡量算法性能并与其他算法进行比较的各种方法。最后，本章讨论了验证算法特定实现的各种方法。
- en: '[Chapter 2](04672393-683c-406b-8dd1-4dab5b5d9c4f.xhtml), *Data Structures Used
    in Algorithms*, focuses on algorithms'' need for necessary in-memory data structures
    that can hold the temporary data. Algorithms can be data-intensive, compute-intensive,
    or both. But for all different types of algorithms, choosing the right data structures
    is essential for their optimal implementation. Many algorithms have recursive
    and iterative logic and require specialized data structures that are fundamentally
    iterative in nature. As we are using Python in this book, this chapter focuses
    on Python data structures that can be used to implement the algorithms discussed
    in this book.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章《算法中使用的数据结构》着重于算法对必要的内存数据结构的需求，这些数据结构可以保存临时数据。算法可以是数据密集型、计算密集型或两者兼而有之。但对于所有不同类型的算法，选择正确的数据结构对于它们的最佳实现至关重要。许多算法具有递归和迭代逻辑，并且需要基本上是迭代性质的专门数据结构。由于本书使用Python，本章重点介绍了可以用于实现本书讨论的算法的Python数据结构。
- en: '[Chapter 3](7f694829-0525-42b1-a485-fb37a07f31ec.xhtml), *Sorting and Searching
    Algorithms*, presents core algorithms that are used for sorting and searching.
    These algorithms can later become the basis for more complex algorithms. The chapter
    starts by presenting different types of sorting algorithms. It also compares the
    performance of various approaches. Then, various algorithms for searching are
    presented. They are compared and their performance and complexity are quantified.
    Finally, this chapter presents the actual applications of these algorithms.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章《排序和搜索算法》介绍了用于排序和搜索的核心算法。这些算法以后可以成为更复杂算法的基础。本章首先介绍了不同类型的排序算法。它还比较了各种方法的性能。然后，介绍了各种搜索算法。它们进行了比较，并量化了它们的性能和复杂性。最后，本章介绍了这些算法的实际应用。
- en: '[Chapter 4](d8aca545-f465-4ab2-9f26-28e658b90a33.xhtml), *Designing Algorithms*,
    presents the core design concepts of various algorithms. It also explains different
    types of algorithms and discusses their strengths and weaknesses. Understanding
    these concepts is important when it comes to designing optimal complex algorithms.
    The chapter starts by discussing different types of algorithmic designs. Then,
    it presents the solution for the famous traveling salesman problem. It then discusses
    linear programming and its limitations. Finally, it presents a practical example
    that shows how linear programming can be used for capacity planning.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章《设计算法》介绍了各种算法的核心设计概念。它还解释了不同类型的算法，并讨论了它们的优缺点。在设计复杂算法时，理解这些概念是很重要的。该章首先讨论了不同类型的算法设计。然后，它提出了著名的旅行推销员问题的解决方案。接着讨论了线性规划及其局限性。最后，它提出了一个实际例子，展示了线性规划如何用于容量规划。
- en: '[Chapter 5](051e9b32-f15f-4e88-a63a-ae3c14696492.xhtml), *Graph Algorithms*,
    focuses on the algorithms for graph problems that are common in computer science.
    There are many computational problems that can best be represented in terms of
    graphs. This chapter presents methods for representing a graph and for searching
    a graph. Searching a graph means systematically following the edges of the graph
    so as to visit the vertices of the graph. A graph-searching algorithm can discover
    a lot about the structure of a graph. Many algorithms begin by searching their
    input graph to obtain this structural information. Several other graph algorithms
    elaborate on basic graph searching. Techniques for searching a graph lie at the
    heart of the field of graph algorithms. The first section discusses the two most
    common computational representations of graphs: as adjacency lists and as adjacency
    matrices. Next, a simple graph-searching algorithm called *breadth-first search*
    is presented and shows how to create a breadth-first tree. The following section
    presents the depth-first search and provides some standard results about the order
    in which a depth-first search visits vertices.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章《图算法》专注于计算机科学中常见的图问题的算法。有许多计算问题最好以图的术语表示。本章介绍了表示图和搜索图的方法。搜索图意味着系统地沿着图的边缘访问图的顶点。图搜索算法可以发现关于图结构的许多信息。许多算法首先通过搜索它们的输入图来获得这些结构信息。几种其他图算法详细介绍了基本的图搜索。搜索图的技术是图算法领域的核心。第一部分讨论了图的两种最常见的计算表示形式：邻接表和邻接矩阵。接下来介绍了一种简单的图搜索算法，称为广度优先搜索，并展示了如何创建广度优先树。接着介绍了深度优先搜索，并提供了一些关于深度优先搜索访问顶点顺序的标准结果。
- en: '[Chapter 6](ce14ecc1-8ad5-406e-88d0-7f3acb3e4569.xhtml), *Unsupervised Machine
    Learning Algorithms*, introduces unsupervised machine learning algorithms. These
    algorithms are classified as unsupervised because the model or algorithm tries
    to learn inherent structures, patterns, and relationships from given data without
    any supervision. First, clustering methods are discussed. These are machine learning
    methods that try to find patterns of similarity and relationships among data samples
    in our dataset and then cluster these samples into various groups, such that each
    group or cluster of data samples has some similarity, based on the inherent attributes
    or features. The following section discusses dimensionality reduction algorithms,
    which are used when we end up having a number of features. Next, some algorithms
    that deal with anomaly detection are presented. Finally, this chapter presents
    association rule-mining, which is a data mining method used to examine and analyze
    large transactional datasets to identify patterns and rules of interest. These
    patterns represent interesting relationships and associations, among various items
    across transactions.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章《无监督机器学习算法》介绍了无监督机器学习算法。这些算法被分类为无监督，因为模型或算法试图从给定数据中学习内在结构、模式和关系，而无需任何监督。首先讨论了聚类方法。这些是机器学习方法，试图在数据样本中找到相似性和关系的模式，然后将这些样本聚类成各种群组，使得每个数据样本的群组或簇都具有一定的相似性，基于内在属性或特征。接下来讨论了降维算法，当我们最终拥有大量特征时使用。接着介绍了一些处理异常检测的算法。最后，本章介绍了关联规则挖掘，这是一种数据挖掘方法，用于检查和分析大型交易数据集，以识别感兴趣的模式和规则。这些模式代表跨交易的各种项目之间的有趣关系和关联。
- en: '[Chapter 7](e3df232d-9571-4514-a5f1-2789965492e1.xhtml), *Traditional Supervised
    Learning Algorithms*, describes traditional supervised machine learning algorithms
    in relation to a set of machine learning problems in which there is a labeled
    dataset with input attributes and corresponding output labels or classes. These
    inputs and corresponding outputs are then used to learn a generalized system,
    which can be used to predict results for previously unseen data points. First,
    the concept of classification is introduced in the context of machine learning.
    Then, the simplest of the machine learning algorithms, linear regression, is presented.
    This is followed by one of the most important algorithms, the decision tree. The
    limitations and strengths of decision tree algorithms are discussed, followed
    by two important algorithms, SVM and XGBoost.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章《传统监督学习算法》描述了传统的监督机器学习算法，涉及一组机器学习问题，其中存在带有输入属性和相应输出标签或类别的标记数据集。然后利用这些输入和相应的输出来学习一个泛化系统，可以用来预测以前未见过的数据点的结果。首先，在机器学习的背景下介绍了分类的概念。然后介绍了最简单的机器学习算法之一，线性回归。接着介绍了最重要的算法之一，决策树。讨论了决策树算法的局限性和优势，然后介绍了两个重要的算法，SVM和XGBoost。
- en: '[Chapter 8](e1eec5e4-0365-4aeb-94d7-2e3ae02fc18c.xhtml), *Neural Network Algorithms*,
    first introduces the main concepts and components of a typical neural network,
    which is becoming the most important type of machine learning technique. Then,
    it presents the various types of neural networks and also explains the various
    kinds of activation functions that are used to realize these neural networks.
    The backpropagation algorithm is then discussed in detail. This is the most widely
    used algorithm to converge the neural network problem. Next, the transfer learning
    technique is explained, which can be used to greatly simplify and partially automate
    the training of models. Finally, how to use deep learning to detect objects in
    multimedia data is presented as a real-world example.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章《神经网络算法》首先介绍了典型神经网络的主要概念和组件，这种网络正成为最重要的机器学习技术。然后，它介绍了各种类型的神经网络，并解释了用于实现这些神经网络的各种激活函数。接着详细讨论了反向传播算法，这是最广泛使用的收敛神经网络问题的算法。接下来解释了迁移学习技术，可以大大简化和部分自动化模型的训练。最后，介绍了如何使用深度学习来检测多媒体数据中的对象作为实际例子。
- en: '[Chapter 9](52941f90-e073-4415-b2ba-accf7507b7a2.xhtml), *Algorithms for Natural
    Language Processing*, presents algorithms for **natural language processing**
    (**NLP**). This chapter proceeds from the theoretical to the practical in a progressive
    manner. First, it presents the fundamentals, followed by the underlying mathematics.
    Then, it discusses one of the most widely used neural networks to design and implement
    a couple of important use cases for textual data. The limitations of NLP are also
    discussed. Finally, a case study is presented where a model is trained to detect
    the author of a paper based on the writing style.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章《自然语言处理算法》介绍了自然语言处理（NLP）的算法。本章以渐进的方式从理论到实践。首先介绍了基本原理，然后是基础数学知识。然后讨论了设计和实施几个重要的文本数据用例的最广泛使用的神经网络之一。还讨论了NLP的局限性。最后，介绍了一个案例研究，其中训练模型以根据写作风格检测论文的作者。
- en: '[Chapter 10](8bad1434-aba4-4e14-8846-d1db0dcbb682.xhtml), *Recommendation Engines,*
    focuses on recommendation engines, which are a way of modeling information available
    in relation to user preferences and then using this information to provide informed
    recommendations on the basis of that information. The basis of the recommendation
    engine is always the recorded interaction between the users and products. This
    chapter begins by presenting the basic idea behind recommendation engines. Then,
    it discusses various types of recommendation engines. Finally, this chapter discusses
    how recommendation engines are used to suggest items and products to different
    users.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章《推荐引擎》专注于推荐引擎，这是一种对用户偏好相关信息进行建模，并利用这些信息提供有根据的推荐的方法。推荐引擎的基础始终是用户和产品之间记录的互动。本章首先介绍了推荐引擎背后的基本思想。然后讨论了各种类型的推荐引擎。最后，讨论了推荐引擎如何用于向不同用户推荐物品和产品。
- en: '[Chapter 11](f00b92cb-0750-4423-b98f-f9b1ce46fd39.xhtml), *Data Algorithms,*
    focuses on the issues related to data-centric algorithms. The chapter starts with
    a brief overview of the issues related to data. Then, the criteria for classifying
    data are presented. Next, a description of how to apply algorithms to streaming
    data applications is provided and then the topic of cryptography is presented.
    Finally, a practical example of extracting patterns from Twitter data is presented.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章《数据算法》关注与数据中心算法相关的问题。该章从简要概述与数据相关的问题开始。然后介绍了对数据进行分类的标准。接下来提供了如何将算法应用于流数据应用程序的描述，然后介绍了密码学的主题。最后，介绍了从Twitter数据中提取模式的实际例子。
- en: '[Chapter 12](d08b4e08-c668-46fe-aed8-7e2c8855b993.xhtml), *Cryptography,* introduces
    the algorithms related to cryptography. The chapter starts by presenting the background.
    Then, symmetrical encryption algorithms are discussed. MD5 and SHA hashing algorithms
    are explained and the limitations and weaknesses associated with implementing
    symmetric algorithms are presented. Next, asymmetric encryption algorithms are
    discussed and how they are used to create digital certificates. Finally, a practical
    example that summarizes all these techniques is discussed.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章《密码学》介绍了与密码学相关的算法。该章从背景开始。然后讨论了对称加密算法。解释了MD5和SHA哈希算法，并介绍了实施对称算法的局限性和弱点。接下来讨论了非对称加密算法以及它们如何用于创建数字证书。最后，讨论了一个总结所有这些技术的实际例子。
- en: '[Chapter 13](271840d5-2d10-4fde-b403-d1a6657e10df.xhtml), *Large-Scale Algorithms,*
    explains how large-scale algorithms handle data that cannot fit into the memory
    of a single node and involve processing that requires multiple CPUs. This chapter
    starts by discussing what types of algorithms are best suited to be run in parallel.
    Then, it discusses the issues related to parallelizing the algorithms. It also
    presents the CUDA architecture and discusses how a single GPU or an array of GPUs
    can be used to accelerate the algorithms and what changes need to be made to the
    algorithm in order to effectively utilize the power of the GPU. Finally, this
    chapter discusses cluster computing and discusses how Apache Spark creates **resilient
    distributed datasets** (**RDDs**) to create an extremely fast parallel implementation
    of standard algorithms.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第13章《大规模算法》解释了如何处理无法适应单个节点内存并涉及需要多个CPU进行处理的数据的大规模算法。本章首先讨论了最适合并行运行的算法类型。然后讨论了与并行化算法相关的问题。还介绍了CUDA架构，并讨论了如何使用单个GPU或一组GPU来加速算法以及需要对算法进行哪些更改才能有效利用GPU的性能。最后，本章讨论了集群计算，并讨论了Apache
    Spark如何创建弹性分布式数据集（RDD）以创建标准算法的极快并行实现。
- en: '[Chapter 14](28c50635-5b35-4f5f-a65b-2d4e984bdad5.xhtml), *Practical Considerations*,
    starts with the important topic of explainability, which is becoming more and
    more important now that the logic behind automated decision making has been explained.
    Then, this chapter presents the ethics of using an algorithm and the possibilities
    of creating biases when implementing them. Next, the techniques for handling NP-hard
    problems are discussed in detail. Finally, ways to implement algorithms, and the
    real-world challenges associated with this, are summarized.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[第14章](28c50635-5b35-4f5f-a65b-2d4e984bdad5.xhtml)，*实际考虑*，从解释性的重要主题开始，这在现在已经解释了自动决策背后的逻辑变得越来越重要。然后，本章介绍了使用算法的伦理和在实施它们时可能产生偏见的可能性。接下来，详细讨论了处理NP-hard问题的技术。最后，总结了实施算法的方法以及与此相关的现实挑战。'
- en: To get the most out of this book
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用本书
- en: '| **Chapter number** | **Software required (with version)** | **Free/Proprietary**
    | **Hardware specifications** | **OS required** |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| **章节编号** | **所需软件（带版本）** | **免费/专有** | **硬件规格** | **所需操作系统** |'
- en: '| 1-14 | Python version 3.7.2 or later | Free | Min 4GB of RAM, 8GB +Recommended.
    | Windows/Linux/Mac |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 1-14 | Python版本3.7.2或更高 | 免费 | 最低4GB RAM，推荐8GB+ | Windows/Linux/Mac |'
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果您使用本书的数字版本，我们建议您自己输入代码或通过GitHub存储库（链接在下一节中提供）访问代码。这样做将有助于避免与复制和粘贴代码相关的任何潜在错误。**'
- en: Download the example code files
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载示例代码文件
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您的账户在[www.packt.com](http://www.packt.com)下载本书的示例代码文件。如果您在其他地方购买了本书，您可以访问[www.packtpub.com/support](https://www.packtpub.com/support)并注册，文件将直接发送到您的邮箱。
- en: 'You can download the code files by following these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤下载代码文件：
- en: Log in or register at [www.packt.com](http://www.packt.com).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[www.packt.com](http://www.packt.com)登录或注册。
- en: Select the Support tab.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“支持”选项卡。
- en: Click on Code Downloads.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“代码下载”。
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入书名，然后按照屏幕上的说明进行操作。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 文件下载后，请确保使用最新版本进行解压缩或提取文件夹：
- en: WinRAR/7-Zip for Windows
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows的WinRAR/7-Zip
- en: Zipeg/iZip/UnRarX for Mac
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac的Zipeg/iZip/UnRarX
- en: 7-Zip/PeaZip for Linux
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux的7-Zip/PeaZip
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/40-Algorithms-Every-Programmer-Should-Know](https://github.com/PacktPublishing/40-Algorithms-Every-Programmer-Should-Know).
    In case there's an update to the code, it will be updated on the existing GitHub
    repository.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在GitHub上，网址为[https://github.com/PacktPublishing/40-Algorithms-Every-Programmer-Should-Know](https://github.com/PacktPublishing/40-Algorithms-Every-Programmer-Should-Know)。如果代码有更新，将在现有的GitHub存储库上进行更新。
- en: We also have other code bundles from our rich catalog of books and videos available
    at  **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有来自我们丰富书籍和视频目录的其他代码包，可在**[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**上找到。去看看吧！
- en: Download the color images
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载彩色图片
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781789801217_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789801217_ColorImages.pdf).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还提供了一个PDF文件，其中包含本书中使用的屏幕截图/图表的彩色图片。您可以在这里下载：[https://static.packt-cdn.com/downloads/9781789801217_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781789801217_ColorImages.pdf)。
- en: Conventions used
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用的约定
- en: There are a number of text conventions used throughout this book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用了许多文本约定。
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Let''s see how to add a new element to a stack by using `push`
    or removing an element from a stack by using `pop`."'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`CodeInText`：表示文本中的代码单词，数据库表名，文件夹名，文件名，文件扩展名，路径名，虚拟URL，用户输入和Twitter句柄。这里有一个例子：“让我们看看如何通过使用`push`来向堆栈添加一个新元素，或者通过使用`pop`来从堆栈中移除一个元素。”'
- en: 'A block of code is set as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下方式编写：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "One way to reduce the complexity of an algorithm is to compromise
    on its accuracy, producing a type of algorithm called an **approximate algorithm**."'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**粗体**：表示一个新术语，一个重要单词，或者屏幕上看到的单词。例如，菜单或对话框中的单词会以这种方式出现在文本中。这里有一个例子：“简化算法的一种方法是在准确性上做出妥协，从而产生一种称为**近似算法**的算法。”'
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要提示会以这种方式出现。提示和技巧会以这种方式出现。
