["```py\nimport tkinter as tk\n\nclass ListFrame(tk.Frame):\n    def __init__(self, master, items=[]):\n        super().__init__(master)\n        self.list = tk.Listbox(self)\n        self.scroll = tk.Scrollbar(self, orient=tk.VERTICAL,\n                                   command=self.list.yview)\n        self.list.config(yscrollcommand=self.scroll.set)\n        self.list.insert(0, *items)\n        self.list.pack(side=tk.LEFT)\n        self.scroll.pack(side=tk.LEFT, fill=tk.Y)\n\n    def pop_selection(self):\n        index = self.list.curselection()\n        if index:\n            value = self.list.get(index)\n            self.list.delete(index)\n            return value\n\n    def insert_item(self, item):\n        self.list.insert(tk.END, item)\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        months = [\"January\", \"February\", \"March\", \"April\",\n                  \"May\", \"June\", \"July\", \"August\", \"September\",\n                  \"October\", \"November\", \"December\"]\n        self.frame_a = ListFrame(self, months)\n        self.frame_b = ListFrame(self)\n        self.btn_right = tk.Button(self, text=\">\",\n                                   command=self.move_right)\n        self.btn_left = tk.Button(self, text=\"<\",\n                                  command=self.move_left)\n\n        self.frame_a.pack(side=tk.LEFT, padx=10, pady=10)\n        self.frame_b.pack(side=tk.RIGHT, padx=10, pady=10)\n        self.btn_right.pack(expand=True, ipadx=5)\n        self.btn_left.pack(expand=True, ipadx=5)\n\n    def move_right(self):\n        self.move(self.frame_a, self.frame_b)\n\n    def move_left(self):\n        self.move(self.frame_b, self.frame_a)\n\n    def move(self, frame_from, frame_to):\n        value = frame_from.pop_selection()\n        if value:\n            frame_to.insert_item(value)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ndef move(self, frame_from, frame_to):\n    value = frame_from.pop_selection()\n    if value:\n        frame_to.insert_item(value)\n```", "```py\n# ...\nself.frame_a.pack(side=tk.LEFT, padx=10, pady=10) self.frame_b.pack(side=tk.RIGHT, padx=10, pady=10)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        label_a = tk.Label(self, text=\"Label A\", bg=\"yellow\")\n        label_b = tk.Label(self, text=\"Label B\", bg=\"orange\")\n        label_c = tk.Label(self, text=\"Label C\", bg=\"red\")\n        label_d = tk.Label(self, text=\"Label D\", bg=\"green\")\n        label_e = tk.Label(self, text=\"Label E\", bg=\"blue\")\n\n        opts = { 'ipadx': 10, 'ipady': 10, 'fill': tk.BOTH }\n        label_a.pack(side=tk.TOP, **opts)\n        label_b.pack(side=tk.TOP, **opts)\n        label_c.pack(side=tk.LEFT, **opts)\n        label_d.pack(side=tk.LEFT, **opts)\n        label_e.pack(side=tk.LEFT, **opts)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        label_a = tk.Label(self, text=\"Label A\", bg=\"yellow\")\n        label_b = tk.Label(self, text=\"Label B\", bg=\"orange\")\n        label_c = tk.Label(self, text=\"Label C\", bg=\"red\")\n        label_d = tk.Label(self, text=\"Label D\", bg=\"green\")\n        label_e = tk.Label(self, text=\"Label E\", bg=\"blue\")\n\n        opts = { 'ipadx': 10, 'ipady': 10 , 'sticky': 'nswe' }\n        label_a.grid(row=0, column=0, **opts)\n        label_b.grid(row=1, column=0, **opts)\n        label_c.grid(row=0, column=1, rowspan=2, **opts)\n        label_d.grid(row=0, column=2, rowspan=2, **opts)\n        label_e.grid(row=2, column=0, columnspan=3, **opts)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        label_a = tk.Label(self, text=\"Label A\", bg=\"yellow\")\n        label_b = tk.Label(self, text=\"Label B\", bg=\"orange\")\n        label_c = tk.Label(self, text=\"Label C\", bg=\"red\")\n        label_d = tk.Label(self, text=\"Label D\", bg=\"green\")\n        label_e = tk.Label(self, text=\"Label E\", bg=\"blue\")\n\n        label_a.place(relwidth=0.25, relheight=0.25)\n        label_b.place(x=100, anchor=tk.N,\n                      width=100, height=50)\n        label_c.place(relx=0.5, rely=0.5, anchor=tk.CENTER,\n                      relwidth=0.5, relheight=0.5)\n        label_d.place(in_=label_c, anchor=tk.N + tk.W,\n                      x=2, y=2, relx=0.5, rely=0.5,\n                      relwidth=0.5, relheight=0.5)\n        label_e.place(x=200, y=200, anchor=tk.S + tk.E,\n                      relwidth=0.25, relheight=0.25)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ndef show_caption(self, event):\n    caption = tk.Label(self, ...)\n    caption.place(in_=event.widget, x=event.x, y=event.y)\n    # ...\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        group_1 = tk.LabelFrame(self, padx=15, pady=10,\n                               text=\"Personal Information\")\n        group_1.pack(padx=10, pady=5)\n\n        tk.Label(group_1, text=\"First name\").grid(row=0)\n        tk.Label(group_1, text=\"Last name\").grid(row=1)\n        tk.Entry(group_1).grid(row=0, column=1, sticky=tk.W)\n        tk.Entry(group_1).grid(row=1, column=1, sticky=tk.W)\n\n        group_2 = tk.LabelFrame(self, padx=15, pady=10,\n                               text=\"Address\")\n        group_2.pack(padx=10, pady=5)\n\n        tk.Label(group_2, text=\"Street\").grid(row=0)\n        tk.Label(group_2, text=\"City\").grid(row=1)\n        tk.Label(group_2, text=\"ZIP Code\").grid(row=2)\n        tk.Entry(group_2).grid(row=0, column=1, sticky=tk.W)\n        tk.Entry(group_2).grid(row=1, column=1, sticky=tk.W)\n        tk.Entry(group_2, width=8).grid(row=2, column=1,\n                                        sticky=tk.W)\n\n        self.btn_submit = tk.Button(self, text=\"Submit\")\n        self.btn_submit.pack(padx=10, pady=10, side=tk.RIGHT)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nlabel = tk.Label(master, text=\"Info\", ...)\nframe = tk.LabelFrame(master, labelwidget=label)\n# ...\nframe.pack()\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        fields = [\"First name\", \"Last name\", \"Phone\", \"Email\"]\n        labels = [tk.Label(self, text=f) for f in fields]\n        entries = [tk.Entry(self) for _ in fields]\n        self.widgets = list(zip(labels, entries))\n        self.submit = tk.Button(self, text=\"Print info\",\n                                command=self.print_info)\n\n        for i, (label, entry) in enumerate(self.widgets):\n            label.grid(row=i, column=0, padx=10, sticky=tk.W)\n            entry.grid(row=i, column=1, padx=10, pady=5)\n        self.submit.grid(row=len(fields), column=1, sticky=tk.E,\n                         padx=10, pady=10)\n\n    def print_info(self):\n        for label, entry in self.widgets:\n            print(\"{} = {}\".format(label.cget(\"text\"), \"=\", entry.get()))\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nfields = [\"First name\", \"Last name\", \"Phone\", \"Email\"]\nlabels = [tk.Label(self, text=f) for f in fields]\nentries = [tk.Entry(self) for _ in fields]\nself.widgets = list(zip(labels, entries))\n```", "```py\nfor i, (label, entry) in enumerate(self.widgets):\n    label.grid(row=i, column=0, padx=10, sticky=tk.W)\n    entry.grid(row=i, column=1, padx=10, pady=5)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.scroll_x = tk.Scrollbar(self, orient=tk.HORIZONTAL)\n        self.scroll_y = tk.Scrollbar(self, orient=tk.VERTICAL)\n        self.canvas = tk.Canvas(self, width=300, height=100,\n                                xscrollcommand=self.scroll_x.set,\n                                yscrollcommand=self.scroll_y.set)\n        self.scroll_x.config(command=self.canvas.xview)\n        self.scroll_y.config(command=self.canvas.yview)\n\n        self.frame = tk.Frame(self.canvas)\n        self.btn = tk.Button(self.frame, text=\"Load image\",\n                             command=self.load_image)\n        self.btn.pack()\n\n        self.canvas.create_window((0, 0), window=self.frame,  \n                                          anchor=tk.NW)\n\n        self.canvas.grid(row=0, column=0, sticky=\"nswe\")\n        self.scroll_x.grid(row=1, column=0, sticky=\"we\")\n        self.scroll_y.grid(row=0, column=1, sticky=\"ns\")\n\n        self.rowconfigure(0, weight=1)\n        self.columnconfigure(0, weight=1)\n        self.bind(\"<Configure>\", self.resize)\n        self.update_idletasks()\n        self.minsize(self.winfo_width(), self.winfo_height())\n\n    def resize(self, event):\n        region = self.canvas.bbox(tk.ALL)\n        self.canvas.configure(scrollregion=region)\n\n    def load_image(self):\n        self.btn.destroy()\n        self.image = tk.PhotoImage(file=\"python.gif\")\n        tk.Label(self.frame, image=self.image).pack()\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nself.scroll_x = tk.Scrollbar(self, orient=tk.HORIZONTAL)\nself.scroll_y = tk.Scrollbar(self, orient=tk.VERTICAL)\nself.canvas = tk.Canvas(self, width=300, height=100,\n                        xscrollcommand=self.scroll_x.set,\n                        yscrollcommand=self.scroll_y.set)\nself.scroll_x.config(command=self.canvas.xview)\nself.scroll_y.config(command=self.canvas.yview)\n```", "```py\nself.frame = tk.Frame(self.canvas)\n# ...\nself.canvas.create_window((0, 0), window=self.frame, anchor=tk.NW)\n```", "```py\nself.rowconfigure(0, weight=1)\nself.columnconfigure(0, weight=1)\nself.bind(\"<Configure>\", self.resize)\n```", "```py\nself.update_idletasks()\nself.minsize(self.winfo_width(), self.winfo_height())\n```", "```py\ndef resize(self, event):\n    region = self.canvas.bbox(tk.ALL)\n    self.canvas.configure(scrollregion=region)\n```"]