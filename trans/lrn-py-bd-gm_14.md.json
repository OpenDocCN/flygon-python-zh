["```py\neasy_install PyOpenGL\n```", "```py\n      from OpenGL.GL import *\n```", "```py\n      from OpenGL.GLU import *\n```", "```py\n      from pygame.locals import *\n```", "```py\n      import pygame\n      from pygame.locals import *\n      window_screen = pygame.display.set_mode((640, 480), \n        HWSURFACE|OPENGL|DOUBLEBUF)\n```", "```py\n#Draw a geometry for the scene\ndef Draw():\n #translation (moving) about 6 unit into the screen and 1.5 unit to left\n     glTranslatef(-1.5,0.0,-6.0)\n     glBegin(GL_TRIANGLES) #GL_TRIANGLE is constant for TRIANGLES \n     glVertex3f( 0.0, 1.0, 0.0) #first vertex \n     glVertex3f(-1.0, -1.0, 0.0) #second vertex \n     glVertex3f( 1.0, -1.0, 0.0) #third vertex \n     glEnd() \n```", "```py\nglBegin(GL_QUADS)\nglColor(0.0, 1.0, 0.0) # vertex at y-axis\nglVertex(1.0, 1.0, 0.0) # Top left\nglVertex(1.0, 1.0, 0.0) # Top right\nglVertex(1.0, 1.0, 0.0) # Bottom right\nglVertex(1.0, 1.0, 0.0) # Bottom left\nglEnd()\n```", "```py\n      from OpenGL.GL import *\n      from OpenGL.GLU import *\n```", "```py\n      def change_View():\n          pass\n```", "```py\n      glViewport(0, 0 , WIDTH, HEIGHT)\n```", "```py\n      glMatrixMode(GL_PROJECTION) #first step to apply projection matrix\n```", "```py\n      aspect_ratio = float(width/height)\n      glLoadIdentity()\n      gluPerspective(40., aspect_ratio, 1., 800.)\n```", "```py\n      glMatrixMode(GL_MODELVIEW)\n      glLoadIdentity()\n```", "```py\ncube_Vertices = (\n    (1, -1, -1),\n    (1, 1, -1),\n    (-1, 1, -1),\n    (-1, -1, -1),\n    (1, -1, 1),\n    (1, 1, 1),\n    (-1, -1, 1),\n    (-1, 1, 1),\n    )\n```", "```py\ncube_Edges = (\n    (0,1),\n    (0,3),\n    (0,4),\n    (2,1),\n    (2,3),\n    (2,7),\n    (6,3),\n    (6,4),\n    (6,7),\n    (5,1),\n    (5,4),\n    (5,7),\n    )\n```", "```py\ncube_Surfaces = (\n (0,1,2,3),\n (3,2,7,6),\n (6,7,5,4),\n (4,5,1,0),\n (1,5,7,2),\n (4,0,3,6) \n )\n```", "```py\n      from OpenGL.GL import *\n      from OpenGL.GLU import *\n```", "```py\n      def renderCube():\n          glBegin(GL_QUADS)\n          for eachSurface in cube_Surfaces:\n              for eachVertex in eachSurface:\n                  glColor3fv((1, 1, 0)) #yellow color code\n                  glVertex3fv(cube_Surfaces[eachVertex])\n          glEnd()\n```", "```py\n     glBegin(GL_LINES)\n       for eachEdge in cube_Edges:\n           for eachVertex in eachEdge:\n               glVertex3fv(cube_Vertices[eachVertex])\n       glEnd()\n```", "```py\ndef ActionHandler():\n    pygame.init()\n    screen = (800, 500)\n    pygame.display.set_mode(screen, DOUBLEBUF|OPENGL) #OPENGL is essential\n\n    #1: ADD A CLIPPING TRANSFORMATION\n    gluPerspective(85.0, (screen[0]/screen[1]), 0.1, 50) \n\n    # 80.0 -> field view of camera \n    #screen[0]/screen[1] -> aspect ration (width/height)\n    #0.1 -> near clipping plane\n    #50 -> far clipping plane\n    glRotatef(18, 2, 0, 0) #start point\n```", "```py\nwhile True:\n\n        for anyEvent in pygame.event.get():\n            if anyEvent.type == pygame.QUIT:\n                pygame.quit()\n                quit()\n\n            if anyEvent.type == pygame.MOUSEBUTTONDOWN:\n                print(anyEvent)\n                print(anyEvent.button) #printing mouse event\n\n                #mouse button 4 and 5 are at the left side of the mouse\n                #mouse button 4 is used as forward and backward navigation\n                if anyEvent.button == 4: \n glTranslatef(0.0,0.0,1.0) #produces translation \n                      of (x, y, z)\n elif anyEvent.button == 5:\n glTranslatef(0.0,0.0,-1.0)\n```", "```py\n\n        glRotatef(1, 3, 1, 1) \n#The glRotatef is used to perform matrix transformation which performs a rotation \n#of counterclockwise with an angle of degree about origin through the point #provided as (x, y, z). \n        #-----------------------------------------------------------------\n        #indicates the buffer that needs to be cleared\n        #GL_COLOR_BUFFER_BIT: enabled for color drawing\n        #GL_DEPTH_BUFFER_BIT: depth buffer which needs to be cleared\n\n        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)\n\n        #render cube\n        renderCube()\n        pygame.display.flip()\n        pygame.time.wait(12)\n\n#call main function only externally\nActionHandler()\n```"]