["```py\nself.quitbutton = qtw.QPushButton('Quit')\nself.quitbutton.clicked.connect(self.close)\nself.layout().addWidget(self.quitbutton)\n```", "```py\nself.quitbutton = qtw.QPushButton('Quit', clicked=self.close)\nself.layout().addWidget(self.quitbutton)\n```", "```py\nself.entry1 = qtw.QLineEdit()\nself.entry2 = qtw.QLineEdit()\nself.layout().addWidget(self.entry1)\nself.layout().addWidget(self.entry2)\nself.entry1.textChanged.connect(self.entry2.setText)\n```", "```py\nself.entry2.textChanged.connect(print)\n```", "```py\nself.entry1.editingFinished.connect(lambda: print('editing finished'))\nself.entry2.returnPressed.connect(self.entry1.editingFinished)\n```", "```py\nself.entry1.textChanged.connect(self.quitbutton.clicked)\n```", "```py\nQObject::connect: Incompatible sender/receiver arguments\n        QLineEdit::textChanged(QString) --> QPushButton::clicked(bool)\nTraceback (most recent call last):\n  File \"signal_slots_demo.py\", line 57, in <module>\n    mw = MainWindow()\n  File \"signal_slots_demo.py\", line 32, in __init__\n    self.entry1.textChanged.connect(self.quitbutton.clicked)\nTypeError: connect() failed between textChanged(QString) and clicked()\n```", "```py\ndef needs_args(self, arg1, arg2, arg3):\n        pass\n```", "```py\nself.badbutton = qtw.QPushButton(\"Bad\")\nself.layout().addWidget(self.badbutton)\nself.badbutton.clicked.connect(self.needs_args)\n```", "```py\nTypeError: needs_args() missing 2 required positional arguments: 'arg2' and 'arg3'\nAborted (core dumped)\n```", "```py\n        # inside __init__()\n        self.goodbutton = qtw.QPushButton(\"Good\")\n        self.layout().addWidget(self.goodbutton)\n        self.goodbutton.clicked.connect(self.no_args)\n        # ...\n\n    def no_args(self):\n        print('I need no arguments')\n```", "```py\nclass FormWindow(qtw.QWidget):\n\n    submitted = qtc.pyqtSignal(str)\n```", "```py\n    def __init__(self):\n        super().__init__()\n        self.setLayout(qtw.QVBoxLayout())\n\n        self.edit = qtw.QLineEdit()\n        self.submit = qtw.QPushButton('Submit', clicked=self.onSubmit)\n\n        self.layout().addWidget(self.edit)\n        self.layout().addWidget(self.submit)\n```", "```py\n    def onSubmit(self):\n        self.submitted.emit(self.edit.text())\n        self.close()\n```", "```py\n    def __init__(self):\n        super().__init__()\n        self.setLayout(qtw.QVBoxLayout())\n\n        self.label = qtw.QLabel('Click \"change\" to change this text.')\n        self.change = qtw.QPushButton(\"Change\", clicked=self.onChange)\n        self.layout().addWidget(self.label)\n        self.layout().addWidget(self.change)\n        self.show()\n```", "```py\n    def onChange(self):\n        self.formwindow = FormWindow()\n        self.formwindow.submitted.connect(self.label.setText)\n        self.formwindow.show()\n```", "```py\n    @qtc.pyqtSlot()\n    def onChange(self):\n        # ...\n```", "```py\n    @qtc.pyqtSlot(str)\n    def onChange(self):\n        # ...\n```", "```py\nTraceback (most recent call last):\n  File \"form_window.py\", line 47, in <module>\n    mw = MainWindow()\n  File \"form_window.py\", line 31, in __init__\n    self.change = qtw.QPushButton(\"Change\", clicked=self.onChange)\nTypeError: decorated slot has no signature compatible with clicked(bool)\n```", "```py\n    submitted = qtc.pyqtSignal([str], [int, str])\n```", "```py\n    def onSubmit(self):\n        if self.edit.text().isdigit():\n            text = self.edit.text()\n            self.submitted[int, str].emit(int(text), text)\n        else:\n            self.submitted[str].emit(self.edit.text())\n        self.close()\n```", "```py\n    @qtc.pyqtSlot(str)\n    def onSubmittedStr(self, string):\n        self.label.setText(string)\n\n    @qtc.pyqtSlot(int, str)\n    def onSubmittedIntStr(self, integer, string):\n        text = f'The string {string} becomes the number {integer}'\n        self.label.setText(text)\n```", "```py\n    def onChange(self):\n        self.formwindow = FormWindow()\n        self.formwindow.submitted[str].connect(self.onSubmittedStr)\n        self.formwindow.submitted[int, str].connect(self.onSubmittedIntStr)\n```", "```py\nclass MainWindow(qtw.QWidget):\n\n    events = {}\n```", "```py\n    events = {\n        QDate:  {\n            'title': \"String title of event\",\n            'category': \"String category of event\",\n            'time': QTime() or None if \"all day\",\n            'detail':  \"String details of event\"\n        }\n    }\n```", "```py\n        self.allday_check.toggled.connect(self.event_time.setDisabled)\n```", "```py\n    def clear_form(self):\n        self.event_title.clear()\n        self.event_category.setCurrentIndex(0)\n        self.event_time.setTime(qtc.QTime(8, 0))\n        self.allday_check.setChecked(False)\n        self.event_detail.setPlainText('')\n```", "```py\n    def populate_list(self):\n        self.event_list.clear()\n        self.clear_form()\n        date = self.calendar.selectedDate()\n        for event in self.events.get(date, []):\n            time = (\n                event['time'].toString('hh:mm')\n                if event['time']\n                else 'All Day'\n            )\n            self.event_list.addItem(f\"{time}: {event['title']}\")\n```", "```py\n        self.calendar.selectionChanged.connect(self.populate_list)\n```", "```py\n    def populate_form(self):\n        self.clear_form()\n        date = self.calendar.selectedDate()\n        event_number = self.event_list.currentRow()\n        if event_number == -1:\n            return\n```", "```py\n        event_data = self.events.get(date)[event_number]\n\n        self.event_category.setCurrentText(event_data['category'])\n        if event_data['time'] is None:\n            self.allday_check.setChecked(True)\n        else:\n            self.event_time.setTime(event_data['time'])\n        self.event_title.setText(event_data['title'])\n        self.event_detail.setPlainText(event_data['detail'])\n```", "```py\n        self.event_list.itemSelectionChanged.connect(\n            self.populate_form\n        )\n```", "```py\n    def save_event(self):\n        event = {\n            'category': self.event_category.currentText(),\n            'time': (\n                None\n                if self.allday_check.isChecked()\n                else self.event_time.time()\n                ),\n            'title': self.event_title.text(),\n            'detail': self.event_detail.toPlainText()\n            }\n```", "```py\n        date = self.calendar.selectedDate()\n        event_list = self.events.get(date, [])\n        event_number = self.event_list.currentRow()\n\n        if event_number == -1:\n            event_list.append(event)\n        else:\n            event_list[event_number] = event\n```", "```py\n        event_list.sort(key=lambda x: x['time'] or qtc.QTime(0, 0))\n        self.events[date] = event_list\n        self.populate_list()\n```", "```py\n        self.add_button.clicked.connect(self.save_event)\n```", "```py\n    def delete_event(self):\n        date = self.calendar.selectedDate()\n        row = self.event_list.currentRow()\n        del(self.events[date][row])\n        self.event_list.setCurrentRow(-1)\n        self.clear_form()\n        self.populate_list()\n```", "```py\n        self.del_button.clicked.connect(self.delete_event)\n```", "```py\n    def check_delete_btn(self):\n        self.del_button.setDisabled(\n            self.event_list.currentRow() == -1)\n```", "```py\n        self.event_list.itemSelectionChanged.connect(\n            self.check_delete_btn)\n        self.check_delete_btn()\n```", "```py\nclass CategoryWindow(qtw.QWidget):\n\n    submitted = qtc.pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__(None, modal=True)\n        self.setLayout(qtw.QVBoxLayout())\n        self.layout().addWidget(\n            qtw.QLabel('Please enter a new catgory name:'))\n        self.category_entry = qtw.QLineEdit()\n        self.layout().addWidget(self.category_entry)\n        self.submit_btn = qtw.QPushButton(\n            'Submit',\n            clicked=self.onSubmit)\n        self.layout().addWidget(self.submit_btn)\n        self.cancel_btn = qtw.QPushButton(\n            'Cancel',\n            clicked=self.close\n            )\n        self.layout().addWidget(self.cancel_btn)\n        self.show()\n\n    @qtc.pyqtSlot()\n    def onSubmit(self):\n        if self.category_entry.text():\n            self.submitted.emit(self.category_entry.text())\n        self.close()\n```", "```py\n    def add_category(self, category):\n        self.event_category.addItem(category)\n        self.event_category.setCurrentText(category)\n```", "```py\n    def on_category_change(self, text):\n        if text == 'New\u2026':\n            dialog = CategoryWindow()\n            dialog.submitted.connect(self.add_category)\n            self.event_category.setCurrentIndex(0)\n```", "```py\n$ pyuic5 calendar_form.ui\n```", "```py\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(799, 600)\n        # ... etc\n```", "```py\nfrom calendar_form import Ui_MainWindow\n```", "```py\nclass MainWindow(qtw.QWidget, Ui_MainWindow):\n```", "```py\n    def __init__(self):\n        super().__init__()\n        self.setupUi(self)\n```", "```py\n        # disable the first category item\n        self.event_category.model().item(0).setEnabled(False)\n        # Populate the event list when the calendar is clicked\n        self.calendar.selectionChanged.connect(self.populate_list)\n        # Populate the event form when an item is selected\n        self.event_list.itemSelectionChanged.connect(\n            self.populate_form)\n        # Save event when save is hit\n        self.add_button.clicked.connect(self.save_event)\n        # connect delete button\n        self.del_button.clicked.connect(self.delete_event)\n        # Enable 'delete' only when an event is selected\n        self.event_list.itemSelectionChanged.connect(\n            self.check_delete_btn)\n        self.check_delete_btn()\n        # check for selection of \"new\u2026\" for category\n        self.event_category.currentTextChanged.connect(\n            self.on_category_change)\n```", "```py\nclass CategoryWindow(qtw.QWidget):\n\n    submitted = qtc.pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_CategoryWindow()\n        self.ui.setupUi(self)\n        self.show()\n```", "```py\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n```", "```py\n    @qtc.pyqtSlot()\n    def on_submit_btn_clicked(self):\n        if self.ui.category_entry.text():\n            self.submitted.emit(self.ui.category_entry.text())\n        self.close()\n```", "```py\n#from calendar_form import Ui_MainWindow\nfrom PyQt5 import uic\n```", "```py\nMW_Ui, MW_Base = uic.loadUiType('calendar_form.ui')\n```", "```py\nclass MainWindow(MW_Base, MW_Ui):\n```", "```py\n    class TimeForm(qtw.QWidget):\n\n        submitted = qtc.pyqtSignal(qtc.QTime)\n\n        def __init__(self):\n        super().__init__()\n        self.setLayout(qtw.QHBoxLayout())\n        self.time_inp = qtw.QTimeEdit(self)\n        self.layout().addWidget(self.time_inp)\n\n        def on_time_inp_editingFinished(self):\n        self.submitted.emit(self.time_inp.time())\n        self.destroy()\n```", "```py\n    from calculator_form import Ui_Calculator\n\n    class Calculator(qtw.QWidget):\n        def __init__(self):\n            self.ui = Ui_Calculator(self)\n            self.ui.setupGUI(self.ui)\n            self.show()\n```", "```py\n    class IntegerValueButton(qtw.QPushButton):\n\n        clicked = qtc.pyqtSignal(int)\n\n        def __init__(self, value, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.value = value\n            self.clicked.connect(\n                lambda: self.clicked.emit(self.value))\n```"]