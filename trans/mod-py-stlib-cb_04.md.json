["```py\nimport os\n\ndef traverse(path):\n    for basepath, directories, files in os.walk(path):\n        for f in files:\n            yield os.path.join(basepath, f)\n```", "```py\nfor f in traverse('.'):\n    print(f)\n```", "```py\n>>> import pathlib\n>>> \n>>> path = pathlib.Path('somefile.txt')\n>>> path.write_text('Hello World')  # Write some text into file.\n11\n>>> print(path.resolve())  # Print absolute path\n/Users/amol/wrk/pythonstlcookbook/somefile.txt\n>>> path.read_text()  # Check the file content\n'Hello World'\n>>> path.unlink()  # Destroy the file\n```", "```py\n>>> print(path.resolve())  # Print absolute path\nC:\\\\wrk\\\\pythonstlcookbook\\\\somefile.txt\n```", "```py\n>>> path = pathlib.Path('.')\n>>> path = path.resolve()\n>>> path\nPosixPath('/Users/amol/wrk/pythonstlcookbook')\n>>> path = path / '..'\n>>> path.resolve()\nPosixPath('/Users/amol/wrk')\n```", "```py\n>>> list(pathlib.Path('.').glob('*.py'))\n[PosixPath('conf.py')]\n```", "```py\n>>> list(pathlib.Path('.').glob('**/*.py'))\n[PosixPath('conf.py'), PosixPath('venv/bin/cmark.py'), \n PosixPath('venv/bin/rst2html.py'), ...]\n```", "```py\n>>> pathlib.Path('conf.py').stat()\nos.stat_result(st_mode=33188, \n               st_ino=116956459, \n               st_dev=16777220, \n               st_nlink=1, \n               st_uid=501, \n               st_gid=20, \n               st_size=9306, \n               st_atime=1519162544, \n               st_mtime=1510786258, \n               st_ctime=1510786258)\n```", "```py\n>>> pathlib.Path('conf.py').exists()\nTrue\n>>> pathlib.Path('conf.py').is_dir()\nFalse\n>>> pathlib.Path('_build').is_dir()\nTrue\n```", "```py\n>>> from tempfile import NamedTemporaryFile\n>>>\n>>> with tempfile.NamedTemporaryFile() as f:\n...   print(f.name)\n... \n/var/folders/js/ykgc_8hj10n1fmh3pzdkw2w40000gn/T/tmponbsaf34\n```", "```py\n>>> with tempfile.NamedTemporaryFile() as f:\n...   os.system('echo \"Hello World\" > %s' % f.name)\n...   f.seek(0)\n...   print(f.read())\n... \n0\n0\nb'Hello World\\n'\n```", "```py\n>>> with tempfile.SpooledTemporaryFile(max_size=30) as temp:\n...     for i in range(3):\n...         temp.write(b'Line of text\\n')\n...     \n...     temp.seek(0)\n...     print(temp.read())\n... \nb'Line of text\\nLine of text\\nLine of text\\n'\n```", "```py\n>>> with tempfile.SpooledTemporaryFile(max_size=30) as temp:\n...     for i in range(3):\n...         temp.write(b'Line of text\\n')\n...         print(temp._file)\n... \n<_io.BytesIO object at 0x10d539ca8>\n<_io.BytesIO object at 0x10d539ca8>\n<_io.BufferedRandom name=4>\n```", "```py\ndef decode_filename(fname):\n    fse = sys.getfilesystemencoding()\n    return fname.decode(fse, \"surrogateescape\")\n```", "```py\n>>> utf8_filename_bytes = '\u00f9tf8.txt'.encode('utf8')\n>>> utf8_filename = decode_filename(utf8_filename_bytes)\n>>> type(utf8_filename)\n<class 'str'>\n>>> print(utf8_filename)\n\u00f9tf8.txt\n```", "```py\n>>> latin1_filename_bytes = 'l\u00e0t\u00ecn1.txt'.encode('latin1')\n>>> latin1_filename = decode_filename(latin1_filename_bytes)\n>>> type(latin1_filename)\n<class 'str'>\n>>> latin1_filename\n'l\\udce0t\\udcecn1.txt'\n```", "```py\nimport shutil\n\ndef copydir(source, dest, ignore=None):\n    \"\"\"Copy source to dest and ignore any file matching ignore \n       pattern.\"\"\"\n    shutil.copytree(source, dest, ignore_dangling_symlinks=True,\n                    ignore=shutil.ignore_patterns(*ignore) if \n                    ignore else None)\n```", "```py\n>>> import glob\n>>> print(glob.glob('_build/pdf/*'))\n['_build/pdf/PySTLCookbook.pdf', '_build/pdf/PySTLCookbook.rtc', '_build/pdf/PySTLCookbook.stylelog']\n```", "```py\n>>> print(glob.glob('/tmp/buildcopy/*'))\n[]\n```", "```py\n>>> copydir('_build/pdf', '/tmp/buildcopy', ignore=('*.rtc', '*.stylelog'))\n```", "```py\n>>> print(glob.glob('/tmp/buildcopy/*'))\n['/tmp/buildcopy/PySTLCookbook.pdf']\n```", "```py\n>>> f = shutil.ignore_patterns('*.rtc', '*.stylelog')\n>>> f('_build', ['_build/pdf/PySTLCookbook.pdf', \n                 '_build/pdf/PySTLCookbook.rtc', \n                 '_build/pdf/PySTLCookbook.stylelog'])\n{'_build/pdf/PySTLCookbook.stylelog', '_build/pdf/PySTLCookbook.rtc'}\n```", "```py\nimport tempfile, os\n\nclass safe_open:\n    def __init__(self, path, mode='w+b'):\n        self._target = path\n        self._mode = mode\n\n    def __enter__(self):\n        self._file = tempfile.NamedTemporaryFile(self._mode, delete=False)\n        return self._file\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self._file.close()\n        if exc_type is None:\n            os.rename(self._file.name, self._target)\n        else:\n            os.unlink(self._file.name)\n```", "```py\nwith safe_open('/tmp/myfile') as f:\n    f.write(b'Hello World')\n```", "```py\n>>> print(open('/tmp/myfile').read())\nHello World\n```", "```py\nwith open('/tmp/myfile', 'wb+') as f:\n    f.write(b'Replace the hello world, ')\n    raise Exception('but crash meanwhile!')\n    f.write(b'expect to write some more')\n```", "```py\n>>> print(open('/tmp/myfile').read())\nReplace the hello world,\n```", "```py\nwith safe_open('/tmp/myfile') as f:\n    f.write(b'Replace the hello world, ')\n    raise Exception('but crash meanwhile!')\n    f.write(b'expect to write some more')\n```", "```py\n>>> print(open('/tmp/myfile').read())\nHello World\n```"]