["```py\nimport tkinter as tk\nimport tkinter.ttk as ttk\n\nclass App(tk.Tk):\n    greetings = (\"Hello\", \"Ciao\", \"Hola\")\n\n    def __init__(self):\n        super().__init__()\n        self.title(\"Tk themed widgets\")\n\n        var = tk.StringVar()\n        var.set(self.greetings[0])\n        label_frame = ttk.LabelFrame(self, text=\"Choose a greeting\")\n        for greeting in self.greetings:\n            radio = ttk.Radiobutton(label_frame, text=greeting,\n                                    variable=var, value=greeting)\n            radio.pack()\n\n        frame = ttk.Frame(self)\n        label = ttk.Label(frame, text=\"Enter your name\")\n        entry = ttk.Entry(frame)\n\n        command = lambda: print(\"{}, {}!\".format(var.get(), \n                                         entry.get()))\n        button = ttk.Button(frame, text=\"Greet\", command=command)\n\n        label.grid(row=0, column=0, padx=5, pady=5)\n        entry.grid(row=0, column=1, padx=5, pady=5)\n        button.grid(row=1, column=0, columnspan=2, pady=5)\n\n        label_frame.pack(side=tk.LEFT, padx=10, pady=10)\n        frame.pack(side=tk.LEFT, padx=10, pady=10)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nimport tkinter as tk\nimport tkinter.ttk as ttk\n```", "```py\nimport tkinter as tk\nimport tkinter.ttk as ttk\n\n# ...\nentry_1 = tk.Entry(root)\nentry_2 = ttk.Entry(root)\n```", "```py\nimport tkinter as tk\nimport tkinter.ttk as ttk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Ttk Combobox\")\n        colors = (\"Purple\", \"Yellow\", \"Red\", \"Blue\")\n\n        self.label = ttk.Label(self, text=\"Please select a color\")\n        self.combo = ttk.Combobox(self, values=colors)\n        btn_submit = ttk.Button(self, text=\"Submit\",\n                                command=self.display_color)\n        btn_clear = ttk.Button(self, text=\"Clear\",\n                                command=self.clear_color)\n\n        self.combo.bind(\"<<ComboboxSelected>>\", self.display_color)\n\n        self.label.pack(pady=10)\n        self.combo.pack(side=tk.LEFT, padx=10, pady=5)\n        btn_submit.pack(side=tk.TOP, padx=10, pady=5)\n        btn_clear.pack(padx=10, pady=5)\n\n    def display_color(self, *args):\n        color = self.combo.get()\n        print(\"Your selection is\", color)\n\n    def clear_color(self):\n        self.combo.set(\"\")\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n        self.label = ttk.Label(self, text=\"Please select a color\")\n        self.combo = ttk.Combobox(self, values=colors)\n        btn_submit = ttk.Button(self, text=\"Submit\",\n                                command=self.display_color)\n        btn_clear = ttk.Button(self, text=\"Clear\",\n                                command=self.clear_color)\n\n        self.combo.bind(\"<<ComboboxSelected>>\", self.display_color)\n```", "```py\n    def display_color(self, *args):\n        color = self.combo.get()\n        print(\"Your selection is\", color)\n```", "```py\n    def clear_color(self):\n        self.combo.set(\"\")\n```", "```py\n    combobox.insert(0, \"Add this at the beginning: \")\n```", "```py\nimport csv\nimport tkinter as tk\nimport tkinter.ttk as ttk\n\nclass App(tk.Tk):\n    def __init__(self, path):\n        super().__init__()\n        self.title(\"Ttk Treeview\")\n\n        columns = (\"#1\", \"#2\", \"#3\")\n        self.tree = ttk.Treeview(self, show=\"headings\", columns=columns)\n        self.tree.heading(\"#1\", text=\"Last name\")\n        self.tree.heading(\"#2\", text=\"First name\")\n        self.tree.heading(\"#3\", text=\"Email\")\n        ysb = ttk.Scrollbar(self, orient=tk.VERTICAL, \n                            command=self.tree.yview)\n        self.tree.configure(yscroll=ysb.set)\n\n        with open(\"contacts.csv\", newline=\"\") as f:\n            for contact in csv.reader(f):\n                self.tree.insert(\"\", tk.END, values=contact)\n        self.tree.bind(\"<<TreeviewSelect>>\", self.print_selection)\n\n        self.tree.grid(row=0, column=0)\n        ysb.grid(row=0, column=1, sticky=tk.N + tk.S)\n        self.rowconfigure(0, weight=1)\n        self.columnconfigure(0, weight=1)\n\n    def print_selection(self, event):\n        for selection in self.tree.selection():\n            item = self.tree.item(selection)\n            last_name, first_name, email = item[\"values\"][0:3]\n            text = \"Selection: {}, {} <{}>\"\n            print(text.format(last_name, first_name, email))\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n        columns = (\"#1\", \"#2\", \"#3\")\n        self.tree = ttk.Treeview(self, show=\"headings\", columns=columns)\n        self.tree.heading(\"#1\", text=\"Last name\")\n        self.tree.heading(\"#2\", text=\"First name\")\n        self.tree.heading(\"#3\", text=\"Email\")\n        ysb = ttk.Scrollbar(self, orient=tk.VERTICAL, command=self.tree.yview)\n        self.tree.configure(yscroll=ysb.set)\n```", "```py\n        with open(\"contacts.csv\", newline=\"\") as f:\n            for contact in csv.reader(f):\n                self.tree.insert(\"\", tk.END, values=contact)\n        self.tree.bind(\"<<TreeviewSelect>>\", self.print_selection)\n```", "```py\n    def print_selection(self, event):\n        for selection in self.tree.selection():\n            item = self.tree.item(selection)\n            last_name, first_name, email = item[\"values\"][0:3]\n            text = \"Selection: {}, {} <{}>\"\n            print(text.format(last_name, first_name, email))\n```", "```py\n    columns = (\"Last name\", \"First name\", \"Email\")\n    tree = ttk.Treeview(self, show=\"headings\", columns=columns)\n\n    for contact in csv.reader(f):\n        email = contact[2]\n tags = (\"dbl-click\",) if email else ()\n self.tree.insert(\"\", tk.END, values=contact, tags=tags)\n\n tree.tag_bind(\"dbl-click\", \"<Double-Button-1>\", send_email_to_contact)\n```", "```py\nimport os\nimport tkinter as tk\nimport tkinter.ttk as ttk\n\nclass App(tk.Tk):\n    def __init__(self, path):\n        super().__init__()\n        self.title(\"Ttk Treeview\")\n\n        abspath = os.path.abspath(path)\n        self.nodes = {}\n        self.tree = ttk.Treeview(self)\n        self.tree.heading(\"#0\", text=abspath, anchor=tk.W)\n        ysb = ttk.Scrollbar(self, orient=tk.VERTICAL,\n                            command=self.tree.yview)\n        xsb = ttk.Scrollbar(self, orient=tk.HORIZONTAL,\n                            command=self.tree.xview)\n        self.tree.configure(yscroll=ysb.set, xscroll=xsb.set)\n\n        self.tree.grid(row=0, column=0, sticky=tk.N + tk.S + tk.E +     tk.W)\n        ysb.grid(row=0, column=1, sticky=tk.N + tk.S)\n        xsb.grid(row=1, column=0, sticky=tk.E + tk.W)\n        self.rowconfigure(0, weight=1)\n        self.columnconfigure(0, weight=1)\n\n        self.tree.bind(\"<<TreeviewOpen>>\", self.open_node)\n        self.populate_node(\"\", abspath)\n\n    def populate_node(self, parent, abspath):\n        for entry in os.listdir(abspath):\n            entry_path = os.path.join(abspath, entry)\n            node = self.tree.insert(parent, tk.END, text=entry, open=False)\n            if os.path.isdir(entry_path):\n                self.nodes[node] = entry_path\n                self.tree.insert(node, tk.END)\n\n    def open_node(self, event):\n        item = self.tree.focus()\n        abspath = self.nodes.pop(item, False)\n        if abspath:\n            children = self.tree.get_children(item)\n            self.tree.delete(children)\n            self.populate_node(item, abspath)\n\nif __name__ == \"__main__\":\n    app = App(path=\".\")\n    app.mainloop()\n```", "```py\nimport os\nimport tkinter as tk\nimport tkinter.ttk as ttk\n\nclass App(tk.Tk):\n    def __init__(self, path):\n        # ...\n abspath = os.path.abspath(path)\n self.nodes = {}\n```", "```py\n        self.tree = ttk.Treeview(self)\n        self.tree.heading(\"#0\", text=abspath, anchor=tk.W)\n        ysb = ttk.Scrollbar(self, orient=tk.VERTICAL,\n                            command=self.tree.yview)\n        xsb = ttk.Scrollbar(self, orient=tk.HORIZONTAL,\n                            command=self.tree.xview)\n        self.tree.configure(yscroll=ysb.set, xscroll=xsb.set)\n```", "```py\n        self.tree.bind(\"<<TreeviewOpen>>\", self.open_node)\n        self.populate_node(\"\", abspath)\n```", "```py\n    def populate_node(self, parent, abspath):\n        for entry in os.listdir(abspath):\n            entry_path = os.path.join(abspath, entry)\n            node = self.tree.insert(parent, tk.END, text=entry, open=False)\n            if os.path.isdir(entry_path):\n                self.nodes[node] = entry_path\n                self.tree.insert(node, tk.END)\n```", "```py\n    def open_node(self, event):\n        item = self.tree.focus()\n        abspath = self.nodes.pop(item, False)\n        if abspath:\n            children = self.tree.get_children(item)\n            self.tree.delete(children)\n            self.populate_node(item, abspath)\n```", "```py\nimport tkinter as tk\nimport tkinter.ttk as ttk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Ttk Notebook\")\n\n        todos = {\n            \"Home\": [\"Do the laundry\", \"Go grocery shopping\"],\n            \"Work\": [\"Install Python\", \"Learn Tkinter\", \"Reply emails\"],\n            \"Vacations\": [\"Relax!\"]\n        }\n\n        self.notebook = ttk.Notebook(self, width=250, height=100)\n        self.label = ttk.Label(self)\n        for key, value in todos.items():\n            frame = ttk.Frame(self.notebook)\n            self.notebook.add(frame, text=key, underline=0,\n                              sticky=tk.NE + tk.SW)\n            for text in value:\n                ttk.Label(frame, text=text).pack(anchor=tk.W)\n\n        self.notebook.pack()\n        self.label.pack(anchor=tk.W)\n        self.notebook.enable_traversal()\n        self.notebook.bind(\"<<NotebookTabChanged>>\", self.select_tab)\n\n    def select_tab(self, event):\n        tab_id = self.notebook.select()\n        tab_name = self.notebook.tab(tab_id, \"text\")\n        text = \"Your current selection is: {}\".format(tab_name)\n        self.label.config(text=text)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n self.notebook = ttk.Notebook(self, width=250, height=100, padding=10)\n        for key, value in todos.items():\n            frame = ttk.Frame(self.notebook)\n self.notebook.add(frame, text=key,\n                              underline=0, sticky=tk.NE+tk.SW)\n            for text in value:\n                ttk.Label(frame, text=text).pack(anchor=tk.W)\n```", "```py\n        self.notebook.pack()\n        self.label.pack(anchor=tk.W)\n self.notebook.enable_traversal()\n self.notebook.bind(\"<<NotebookTabChanged>>\", self.select_tab)\n```", "```py\n    def select_tab(self, event):\n        tab_id = self.notebook.select()\n        tab_name = self.notebook.tab(tab_id, \"text\")\n        self.label.config(text=f\"Your current selection is: {tab_name}\")\n```", "```py\n    def select_tab(self, event):\n        tab_id = self.notebook.select()\n        frame = self.nametowidget(tab_id)\n        # Do something with the frame\n```", "```py\nimport tkinter as tk\nimport tkinter.ttk as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Tk themed widgets\")\n\n        style = ttk.Style(self)\n style.configure(\"TLabel\", padding=10)\n style.map(\"TButton\",\n foreground=[(\"pressed\", \"grey\"), (\"active\", \"white\")],\n background=[(\"pressed\", \"white\"), (\"active\", \"grey\")]\n ) # ...\n```", "```py\n        style.configure(\"My.TLabel\", padding=10)\n        # ...\n        label = ttk.Label(master, text=\"Some text\", style=\"My.TLabel\")\n```", "```py\nimport calendar\nimport datetime\nimport tkinter as tk\nimport tkinter.ttk as ttk\nimport tkinter.font as tkfont\nfrom itertools import zip_longest\n\nclass TtkCalendar(ttk.Frame):\n    def __init__(self, master=None, **kw):\n        now = datetime.datetime.now()\n        fwday = kw.pop('firstweekday', calendar.MONDAY)\n        year = kw.pop('year', now.year)\n        month = kw.pop('month', now.month)\n        sel_bg = kw.pop('selectbackground', '#ecffc4')\n        sel_fg = kw.pop('selectforeground', '#05640e')\n\n        super().__init__(master, **kw)\n\n        self.selected = None\n        self.date = datetime.date(year, month, 1)\n        self.cal = calendar.TextCalendar(fwday)\n        self.font = tkfont.Font(self)\n        self.header = self.create_header()\n        self.table = self.create_table()\n        self.canvas = self.create_canvas(sel_bg, sel_fg)\n        self.build_calendar()\n\n    def create_header(self):\n        left_arrow = {'children': [('Button.leftarrow', None)]}\n        right_arrow = {'children': [('Button.rightarrow', None)]}\n        style = ttk.Style(self)\n        style.layout('L.TButton', [('Button.focus', left_arrow)])\n        style.layout('R.TButton', [('Button.focus', right_arrow)])\n\n        hframe = ttk.Frame(self)\n        btn_left = ttk.Button(hframe, style='L.TButton',\n                              command=lambda: self.move_month(-1))\n        btn_right = ttk.Button(hframe, style='R.TButton',\n                               command=lambda: self.move_month(1))\n        label = ttk.Label(hframe, width=15, anchor='center')\n\n        hframe.pack(pady=5, anchor=tk.CENTER)\n        btn_left.grid(row=0, column=0)\n        label.grid(row=0, column=1, padx=12)\n        btn_right.grid(row=0, column=2)\n        return label\n\n    def move_month(self, offset):\n        self.canvas.place_forget()\n        month = self.date.month - 1 + offset\n        year = self.date.year + month // 12\n        month = month % 12 + 1\n        self.date = datetime.date(year, month, 1)\n        self.build_calendar()\n\n    def create_table(self):\n        cols = self.cal.formatweekheader(3).split()\n        table = ttk.Treeview(self, show='', selectmode='none',\n                             height=7, columns=cols)\n        table.bind('<Map>', self.minsize)\n        table.pack(expand=1, fill=tk.BOTH)\n        table.tag_configure('header', background='grey90')\n        table.insert('', tk.END, values=cols, tag='header')\n        for _ in range(6):\n            table.insert('', tk.END)\n\n        width = max(map(self.font.measure, cols))\n        for col in cols:\n            table.column(col, width=width, minwidth=width, anchor=tk.E)\n        return table\n\n    def minsize(self, e):\n        width, height = self.master.geometry().split('x')\n        height = height[:height.index('+')]\n        self.master.minsize(width, height)\n\n    def create_canvas(self, bg, fg):\n        canvas = tk.Canvas(self.table, background=bg,\n                           borderwidth=0, highlightthickness=0)\n        canvas.text = canvas.create_text(0, 0, fill=fg, anchor=tk.W)\n        handler = lambda _: canvas.place_forget()\n        canvas.bind('<ButtonPress-1>', handler)\n        self.table.bind('<Configure>', handler)\n        self.table.bind('<ButtonPress-1>', self.pressed)\n        return canvas\n\n    def build_calendar(self):\n        year, month = self.date.year, self.date.month\n        month_name = self.cal.formatmonthname(year, month, 0)\n        month_weeks = self.cal.monthdayscalendar(year, month)\n\n        self.header.config(text=month_name.title())\n        items = self.table.get_children()[1:]\n        for week, item in zip_longest(month_weeks, items):\n            week = week if week else [] \n            fmt_week = ['%02d' % day if day else '' for day in week]\n            self.table.item(item, values=fmt_week)\n\n    def pressed(self, event):\n        x, y, widget = event.x, event.y, event.widget\n        item = widget.identify_row(y)\n        column = widget.identify_column(x)\n        items = self.table.get_children()[1:]\n\n        if not column or not item in items:\n            # clicked te header or outside the columns\n            return\n\n        index = int(column[1]) - 1\n        values = widget.item(item)['values']\n        text = values[index] if len(values) else None\n        bbox = widget.bbox(item, column)\n        if bbox and text:\n            self.selected = '%02d' % text\n            self.show_selection(bbox)\n\n    def show_selection(self, bbox):\n        canvas, text = self.canvas, self.selected\n        x, y, width, height = bbox\n        textw = self.font.measure(text)\n        canvas.configure(width=width, height=height)\n        canvas.coords(canvas.text, width - textw, height / 2 - 1)\n        canvas.itemconfigure(canvas.text, text=text)\n        canvas.place(x=x, y=y)\n\n    @property\n    def selection(self):\n        if self.selected:\n            year, month = self.date.year, self.date.month\n            return datetime.date(year, month, int(self.selected))\n\ndef main():\n    root = tk.Tk()\n    root.title('Tkinter Calendar')\n    ttkcal = TtkCalendar(firstweekday=calendar.SUNDAY)\n    ttkcal.pack(expand=True, fill=tk.BOTH)\n    root.mainloop()\n\nif __name__ == '__main__':\n    main()\n```", "```py\n    def __init__(self, master=None, **kw):\n        now = datetime.datetime.now()\n        fwday = kw.pop('firstweekday', calendar.MONDAY)\n        year = kw.pop('year', now.year)\n        month = kw.pop('month', now.month)\n        sel_bg = kw.pop('selectbackground', '#ecffc4')\n        sel_fg = kw.pop('selectforeground', '#05640e')\n\n        super().__init__(master, **kw)\n```", "```py\n        self.selected = None\n        self.date = datetime.date(year, month, 1)\n        self.cal = calendar.TextCalendar(fwday)\n        self.font = tkfont.Font(self)\n        self.header = self.create_header()\n        self.table = self.create_table()\n        self.canvas = self.create_canvas(sel_bg, sel_fg)\n        self.build_calendar()\n```", "```py\n    def create_header(self):\n        left_arrow = {'children': [('Button.leftarrow', None)]}\n        right_arrow = {'children': [('Button.rightarrow', None)]}\n        style = ttk.Style(self)\n        style.layout('L.TButton', [('Button.focus', left_arrow)])\n        style.layout('R.TButton', [('Button.focus', right_arrow)])\n\n        hframe = ttk.Frame(self)\n        lbtn = ttk.Button(hframe, style='L.TButton',\n                          command=lambda: self.move_month(-1))\n        rbtn = ttk.Button(hframe, style='R.TButton',\n                          command=lambda: self.move_month(1))\n        label = ttk.Label(hframe, width=15, anchor='center')\n\n        # ...\n        return label\n```", "```py\n    def move_month(self, offset):\n        self.canvas.place_forget()\n        month = self.date.month - 1 + offset\n        year = self.date.year + month // 12\n        month = month % 12 + 1\n        self.date = datetime.date(year, month, 1)\n        self.build_calendar()\n```", "```py\n    def create_table(self):\n        cols = self.cal.formatweekheader(3).split()\n        table = ttk.Treeview(self, show='', selectmode='none',\n                             height=7, columns=cols)\n        table.bind('<Map>', self.minsize)\n        table.pack(expand=1, fill=tk.BOTH)\n        table.tag_configure('header', background='grey90')\n        table.insert('', tk.END, values=cols, tag='header')\n        for _ in range(6):\n            table.insert('', tk.END)\n\n        width = max(map(self.font.measure, cols))\n        for col in cols:\n            table.column(col, width=width, minwidth=width, anchor=tk.E)\n        return table\n```", "```py\n    def create_canvas(self, bg, fg):\n        canvas = tk.Canvas(self.table, background=bg,\n                           borderwidth=0, highlightthickness=0)\n        canvas.text = canvas.create_text(0, 0, fill=fg, anchor=tk.W)\n        handler = lambda _: canvas.place_forget()\n        canvas.bind('<ButtonPress-1>', handler)\n        self.table.bind('<Configure>', handler)\n        self.table.bind('<ButtonPress-1>', self.pressed)\n        return canvas\n```", "```py\n    def build_calendar(self):\n        year, month = self.date.year, self.date.month\n        month_name = self.cal.formatmonthname(year, month, 0)\n        month_weeks = self.cal.monthdayscalendar(year, month)\n\n        self.header.config(text=month_name.title())\n        items = self.table.get_children()[1:]\n        for week, item in zip_longest(month_weeks, items):\n            week = week if week else [] \n            fmt_week = ['%02d' % day if day else '' for day in week]\n            self.table.item(item, values=fmt_week)\n```", "```py\n    def pressed(self, event):\n        x, y, widget = event.x, event.y, event.widget\n        item = widget.identify_row(y)\n        column = widget.identify_column(x)\n        items = self.table.get_children()[1:]\n\n        if not column or not item in items:\n            # clicked te header or outside the columns\n            return\n\n        index = int(column[1]) - 1\n        values = widget.item(item)['values']\n        text = values[index] if len(values) else None\n        bbox = widget.bbox(item, column)\n        if bbox and text:\n            self.selected = '%02d' % text\n            self.show_selection(bbox)\n```", "```py\n    def show_selection(self, bbox):\n        canvas, text = self.canvas, self.selected\n        x, y, width, height = bbox\n        textw = self.font.measure(text)\n        canvas.configure(width=width, height=height)\n        canvas.coords(canvas.text, width - textw, height / 2 - 1)\n        canvas.itemconfigure(canvas.text, text=text)\n        canvas.place(x=x, y=y)\n```", "```py\n    @property\n    def selection(self):\n        if self.selected:\n            year, month = self.date.year, self.date.month\n            return datetime.date(year, month, int(self.selected))\n```"]