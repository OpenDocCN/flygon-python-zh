["```py\n>>> from urllib.request import urlopen\n>>> response = urlopen('http://packtpub.com')\n```", "```py\n>>> response.getheader('Content-Type')\n'text/html; charset=utf-8'\n>>> response.getheader('Server')\n'nginx/1.4.5'\n```", "```py\n>>> response.status\n200\n>>> response.reason\n'OK'\n```", "```py\n>>> html = response.read()\n>>> html[:15]\nb'<!DOCTYPE html>'\n```", "```py\n>>> html.decode('utf-8')[:15]\n'<!DOCTYPE html>'\n```", "```py\n>>> response = urlopen('http://duckduckgo.com', data=b'q=tkinter')\n```", "```py\n>>> from urllib.parse import urlencode\n>>> data = {'q': 'tkinter, python', 'ko': '-2', 'kz': '-1'}\n>>> urlencode(data)\n'q=tkinter%2C+python&ko=-2&kz=-1'\n>>> response = urlopen('http://duckduckgo.com', data=urlencode(data).encode())\n```", "```py\nfrom urllib.request import urlopen\n\ndef get_local_weather(station):\n    url = (\n        'http://w1.weather.gov/xml/current_obs/{}.xml'\n        .format(station))\n    response = urlopen(url)\n```", "```py\n>>> response = urlopen('http://w1.weather.gov/xml/current_obs/KBMG.xml')\n>>> print(response.read().decode())\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<?xml-stylesheet href=\"latest_ob.xsl\" type=\"text/xsl\"?>\n<current_observation version=\"1.0\"\n\n         xsi:noNamespaceSchemaLocation=\"http://www.weather.gov/view/current_observation.xsd\">\n        <credit>NOAA's National Weather Service</credit>\n        <credit_URL>http://weather.gov/</credit_URL>\n....\n```", "```py\n        <observation_time_rfc822>Wed, 14 Feb 2018 14:53:00 \n        -0500</observation_time_rfc822>\n        <weather>Fog/Mist</weather>\n        <temp_c>11.7</temp_c>\n        <relative_humidity>96</relative_humidity>\n        <pressure_mb>1018.2</pressure_mb>\n```", "```py\nfrom xml.etree import ElementTree\n```", "```py\n    xmlroot = ElementTree.fromstring(response.read())\n```", "```py\n<star_system starname=\"Sol\">\n  <planet>Mercury</planet>\n  <planet>Venus</planet>\n  <planet>Earth\n    <moon>Luna</moon>\n    </planet>\n  <planet>Mars\n    <moon>Phobos</moon>\n    <moon>Deimos</moon>\n    </planet>\n  <dwarf_planet>Ceres</dwarf_planet>\n</star_system>\n```", "```py\n    xmlroot = ElementTree.fromstring(response.read())\n    weatherdata = {\n        'observation_time_rfc822': None,\n        'temp_c': None,\n        'relative_humidity': None,\n        'pressure_mb': None,\n        'weather': None\n    }\n```", "```py\n    for tag in weatherdata:\n        element = xmlroot.find(tag)\n        if element is not None:\n            weatherdata[tag] = element.text\n```", "```py\n>>> from abq_data_entry.network import get_local_weather\n>>> get_local_weather('KBMG')\n{'observation_time_rfc822': 'Wed, 14 Feb 2018 16:53:00 -0500',\n 'temp_c': '11.7', 'relative_humidity': '96', 'pressure_mb': '1017.0',\n 'weather': 'Drizzle Fog/Mist'}\n```", "```py\nCREATE TABLE local_weather (\n        datetime TIMESTAMP(0) WITH TIME ZONE PRIMARY KEY,\n        temperature NUMERIC(5,2),\n        rel_hum NUMERIC(5, 2),\n        pressure NUMERIC(7,2),\n        conditions VARCHAR(32)\n        );\n```", "```py\n    def add_weather_data(self, data):\n        query = (\n            'INSERT INTO local_weather VALUES '\n            '(%(observation_time_rfc822)s, %(temp_c)s, '\n            '%(relative_humidity)s, %(pressure_mb)s, '\n            '%(weather)s)'\n        )\n```", "```py\n        try:\n            self.query(query, data)\n        except pg.IntegrityError:\n            # already have weather for this datetime\n            pass\n```", "```py\n    variables = {\n        ...\n        'weather_station': {'type': 'str', 'value': 'KBMG'},\n        ...\n```", "```py\n    def update_weather_data(self):\n\n      try:\n           weather_data = n.get_local_weather(\n               self.settings['weather_station'].get())\n```", "```py\n        except Exception as e:\n            messagebox.showerror(\n                title='Error',\n                message='Problem retrieving weather data',\n                detail=str(e)\n            )\n            self.status.set('Problem retrieving weather data')\n```", "```py\n        else:\n            self.data_model.add_weather_data(weather_data)\n            self.status.set(\n                'Weather data recorded for {}'\n                .format(weather_data['observation_time_rfc822']))\n```", "```py\n        self.callbacks = {\n            ...\n            'update_weather_data': self.update_weather_data,\n            ...\n```", "```py\n        #Tools menu\n        tools_menu = tk.Menu(self, tearoff=False)\n        tools_menu.add_command(\n            label=\"Update Weather Data\",\n            command=self.callbacks['update_weather_data'])\n        self.add_cascade(label='Tools', menu=tools_menu)\n```", "```py\nSELECT * FROM local_weather;\n```", "```py\n>>> import requests\n>>> response = requests.request('GET', 'http://www.alandmoore.com')\n```", "```py\nresponse = requests.get('http://www.alandmoore.com')\n```", "```py\n>>> response = requests.post(\n    'http://duckduckgo.com',\n    data={'q': 'tkinter', 'ko': '-2', 'kz': '-1'})\n```", "```py\ns = requests.session()\n```", "```py\n# Assume this is a valid authentication service that returns an auth token\ns.post('http://example.com/login', data={'u': 'test', 'p': 'test'})\n# Now we would have an auth token\nresponse = s.get('http://example.com/protected_content')\n# Our token cookie would be listed here\nprint(s.cookies.items())\n```", "```py\ns.headers['User-Agent'] = 'Mozilla'\n# will be sent with a user-agent string of \"Mozilla\"\ns.get('http://example.com')\n```", "```py\n>>> r = requests.get('http://www.alandmoore.com')\n>>> r.headers\n{'Date': 'Thu, 15 Feb 2018 21:13:42 GMT', 'Server': 'Apache',\n 'Last-Modified': 'Sat, 17 Jun 2017 14:13:49 GMT',\n 'ETag': '\"20c003f-19f7-5945391d\"', 'Content-Length': '6647',\n 'Keep-Alive': 'timeout=15, max=200', 'Connection': 'Keep-Alive',\n 'Content-Type': 'text/html'}\n```", "```py\n>>> r = requests.get('http://www.example.com/does-not-exist')\n>>> r.status_code\n404\n>>> r.raise_for_status()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3.6/site-packages/requests/models.py\", line 935, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://www.example.com/does-not-exist\n```", "```py\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\ndef run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):\n    server_address = ('', 8000)\n    httpd = server_class(server_address, handler_class)\n    httpd.serve_forever()\nrun()\n```", "```py\nclass TestHandler(BaseHTTPRequestHandler):\n    pass\n\ndef run(server_class=HTTPServer, handler_class=TestHandler):\n    ...\n```", "```py\nclass TestHandler(BaseHTTPRequestHandler):\n    def do_POST(self, *args, **kwargs):\n        pass\n\n    def do_PUT(self, *args, **kwargs):\n        pass\n```", "```py\n    def _send_200(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n```", "```py\n    def _print_request_data(self):\n        content_length = self.headers['Content-Length']\n        print(\"Content-length: {}\".format(content_length))\n        data = self.rfile.read(int(content_length))\n        print(data.decode('utf-8'))\n```", "```py\n    def do_POST(self, *args, **kwargs):\n        print('POST request received')\n        self._print_request_data()\n        self._send_200()\n\n    def do_PUT(self, *args, **kwargs):\n        print(\"PUT request received\")\n        self._print_request_data()\n        self._send_200()\n```", "```py\n>>> import requests\n>>> requests.post('http://localhost:8000', data={1: 'test1', 2: 'test2'})\n<Response[200]>\n```", "```py\nPOST request received\nContent-length: 15\n1=test1&2=test2\n127.0.0.1 - - [15/Feb/2018 16:22:41] \"POST / HTTP/1.1\" 200 -\n```", "```py\nimport requests\n\n...\n\ndef upload_to_corporate_rest(\n    filepath, upload_url, auth_url, username, password):\n```", "```py\n    session = requests.session()\n```", "```py\n    response = session.post(\n        auth_url,\n        data={'username': username, 'password': password})\n    response.raise_for_status()\n```", "```py\n    files = {'file': open(filepath, 'rb')}\n    response = session.put(\n        upload_url,\n        files=files\n    )\n```", "```py\n    files['file'].close()\n    response.raise_for_status()\n```", "```py\nfrom tempfile import mkdtemp\n```", "```py\n    def _create_csv_extract(self):\n        tmpfilepath = mkdtemp()\n        csvmodel = m.CSVModel(\n            filename=self.filename.get(), filepath=tmpfilepath)\n```", "```py\n        records = self.data_model.get_all_records()\n        if not records:\n            return None\n```", "```py\n        for record in records:\n            csvmodel.save_record(record)\n\n        return csvmodel.filename\n```", "```py\n    def upload_to_corporate_rest(self):\n\n        csvfile = self._create_csv_extract()\n\n        if csvfile is None:\n            messagebox.showwarning(\n                title='No records',\n                message='There are no records to upload'\n            )\n            return\n```", "```py\n        d = v.LoginDialog(\n            self,\n            'Login to ABQ Corporate REST API')\n        if d.result is not None:\n            username, password = d.result\n        else:\n            return\n```", "```py\n        try:\n            n.upload_to_corporate_rest(\n                csvfile,\n                self.settings['abq_upload_url'].get(),\n                self.settings['abq_auth_url'].get(),\n                username,\n                password)\n```", "```py\n        except n.requests.RequestException as e:\n            messagebox.showerror('Error with your request', str(e))\n```", "```py\n        except n.requests.ConnectionError as e:\n            messagebox.showerror('Error connecting', str(e))\n```", "```py\n        except Exception as e:\n            messagebox.showerror('General Exception', str(e))\n```", "```py\n        else:\n            messagebox.showinfo(\n                'Success',\n                '{} successfully uploaded to REST API.'\n                .format(csvfile))\n```", "```py\n        self.callbacks = {\n            ...\n            'upload_to_corporate_rest':  \n           self.upload_to_corporate_rest,\n            ...\n```", "```py\n    def __init__(self, filename, filepath=None):\n        if filepath:\n            if not os.path.exists(filepath):\n                os.mkdir(filepath)\n            self.filename = os.path.join(filepath, filename)\n        else:\n            self.filename = filename\n```", "```py\n    variables = {\n        ...\n        'abq_auth_url': {\n            'type': 'str',\n            'value': 'http://localhost:8000/auth'},\n        'abq_upload_url': {\n            'type': 'str',\n            'value': 'http://localhost:8000/upload'},\n         ...\n```", "```py\n        tools_menu.add_command(\n            label=\"Upload CSV to corporate REST\",\n            command=self.callbacks['upload_to_corporate_rest'])\n```", "```py\nPOST request received\nContent-length: 27\nusername=test&password=test\n127.0.0.1 - - [16/Feb/2018 10:17:22] \"POST /auth HTTP/1.1\" 200 -\nPUT request received\nContent-length: 397\n--362eadeb828747769e75d5b4b6d32f31\nContent-Disposition: form-data; name=\"file\"; filename=\"abq_data_record_2018-02-16.csv\"\n\nDate,Time,Technician,Lab,Plot,Seed sample,Humidity,Light,Temperature,Equipment Fault,Plants,Blossoms,Fruit,Min Height,Max Height,Median Height,Notes\n2018-02-16,8:00,Q Murphy,A,1,AXM477,10.00,10.00,10.00,,1,2,3,1.00,3.00,2.00,\"\n\"\n\n--362eadeb828747769e75d5b4b6d32f31--\n\n127.0.0.1 - - [16/Feb/2018 10:17:22] \"PUT /upload HTTP/1.1\" 200 -\n```", "```py\npip install --user pyftpdlib\n```", "```py\nfrom pyftpdlib.authorizers import DummyAuthorizer\nfrom pyftpdlib.handlers import FTPHandler\nfrom pyftpdlib.servers import FTPServer\n```", "```py\nauth = DummyAuthorizer()\nauth.add_user('test', 'test', '.', perm='elrw')\n```", "```py\nhandler = FTPHandler\nhandler.authorizer = auth\n```", "```py\naddress = ('127.0.0.1', 2100)\nserver = FTPServer(address, handler)\n\nserver.serve_forever()\n```", "```py\nimport ftplib as ftp\n```", "```py\ndef upload_to_corporate_ftp(\n        filepath, ftp_host,\n        ftp_port, ftp_user, ftp_pass):\n\n    with ftp.FTP() as ftp_cx:\n        ftp_cx.connect(ftp_host, ftp_port)\n        ftp_cx.login(ftp_user, ftp_pass)\n```", "```py\n        filename = path.basename(filepath)\n        with open(filepath, 'rb') as fh:\n            ftp_cx.storbinary('STOR {}'.format(filename), fh)\n```", "```py\nfrom ftplib import FTP\nfrom os.path import join\n\nfilename = 'raytux.jpg'\npath = '/pub/ibiblio/logos/penguins'\ndestination = open(filename, 'wb')\nwith FTP('ftp.nluug.nl', 'anonymous') as ftp:\n    ftp.retrbinary(\n        'RETR {}'.format(join(path, filename)),\n        destination.write)\ndestination.close()\n```", "```py\n'226-File successfully transferred\\n226 0.000 seconds (measured here), 146.96 Mbytes per second'\n```", "```py\n    variables = {\n        ...\n        'abq_ftp_host': {'type': 'str', 'value': 'localhost'},\n        'abq_ftp_port': {'type': 'int', 'value': 2100}\n        ...\n```", "```py\n    def upload_to_corporate_ftp(self):\n        csvfile = self._create_csv_extract()\n```", "```py\n        d = v.LoginDialog(\n            self,\n            'Login to ABQ Corporate FTP')\n```", "```py\n        if d.result is not None:\n            username, password = d.result\n            try:\n                n.upload_to_corporate_ftp(\n                    csvfile,\n                    self.settings['abq_ftp_host'].get(),\n                    self.settings['abq_ftp_port'].get(),\n                    username,\n                    password)\n```", "```py\n            except n.ftp.all_errors as e:\n                messagebox.showerror('Error connecting to ftp', str(e))\n```", "```py\n            else:\n                messagebox.showinfo(\n                    'Success',\n                    '{} successfully uploaded to FTP'.format(csvfile))\n```", "```py\n        self.callbacks = {\n            ...\n            'upload_to_corporate_ftp': self.upload_to_corporate_ftp\n        }\n```", "```py\n        tools_menu.add_command(\n            label=\"Upload CSV to corporate FTP\",\n            command=self.callbacks['upload_to_corporate_ftp'])\n```", "```py\n127.0.0.1:32878-[] FTP session opened (connect)\n127.0.0.1:32878-[test] USER 'test' logged in.\n127.0.0.1:32878-[test] STOR /home/alanm/FTPserver/abq_data_record_2018-02-17.csv completed=1 bytes=235 seconds=0.001\n127.0.0.1:32878-[test] FTP session closed (disconnect).\n```"]