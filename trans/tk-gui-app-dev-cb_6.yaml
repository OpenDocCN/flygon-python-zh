- en: Asynchronous Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步编程
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Scheduling actions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度操作
- en: Running methods on threads
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线程上运行方法
- en: Performing HTTP requests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行HTTP请求
- en: Connecting threads with a progress bar
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将线程与进度条连接起来
- en: Canceling scheduled actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消已调度的操作
- en: Handling idle tasks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理空闲任务
- en: Spawning separate processes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成单独的进程
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Like any other programming language, Python lets you divide a process execution
    into multiple units that can be performed independently in time, called **threads**.
    When you launch a Python program, it starts its execution in the **main thread**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他编程语言一样，Python允许您将进程执行分成多个可以在时间上独立执行的单元，称为**线程**。当启动Python程序时，它会在**主线程**中开始执行。
- en: Tkinter's main loop must start from the main thread, which is responsible for
    handling all the events and updates to the GUI. By default, our application code,
    such as callbacks and event handlers, will also be executed in this thread.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter的主循环必须从主线程开始，负责处理所有GUI的事件和更新。默认情况下，我们的应用程序代码，如回调和事件处理程序，也将在此线程中执行。
- en: However, if we launch a long running action in this thread, the main thread
    execution will block until this operation is completed, and therefore the GUI
    will freeze and not respond to user events.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们在这个线程中启动一个长时间运行的操作，主线程的执行将会被阻塞，因此GUI将会冻结，并且不会响应用户事件。
- en: In this chapter, we will cover several recipes to achieve responsiveness in
    our applications while separate actions occur in the background, and also take
    a look at how to interact with them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍几种方法来实现应用程序的响应性，同时在后台执行单独的操作，并了解如何与它们交互。
- en: Scheduling actions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度操作
- en: A basic technique to prevent blocking the main thread in Tkinter is scheduling
    an action that will be invoked after a timeout has elapsed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Tkinter中防止阻塞主线程的基本技术是调度一个在超时后被调用的操作。
- en: In this recipe, we will take a look at how to implement this with Tkinter using
    the `after()` method, which can be called from all Tkinter widget classes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将介绍如何使用`after()`方法在Tkinter中实现这一点，该方法可以从所有Tkinter小部件类中调用。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The following code shows a straightforward example of how a callback can block
    the main loop.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了一个回调如何阻塞主循环的简单示例。
- en: 'This application consists of a single button that gets disabled when it is
    clicked, waits 5 seconds, and is enabled again. A trivial implementation would
    be the following one:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序由一个按钮组成，当单击时会被禁用，等待5秒，然后再次启用。一个简单的实现如下：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you run the preceding program, you will note that the **Wait 5 seconds**
    button is not disabled at all, but clicking on it freezes the GUI for 5 seconds.
    We can directly note that in the button styling, which looks active instead of
    disabled; also, the title bar will not respond to mouse clicks until the 5 seconds
    have elapsed:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行上述程序，您会注意到**等待5秒**按钮根本没有被禁用，但点击它会使GUI冻结5秒。我们可以直接注意到按钮样式的变化，看起来是活动的而不是禁用的；此外，标题栏在5秒时间到之前将不会响应鼠标点击：
- en: '![](images/c38a83be-7aae-4da8-9461-e4c44b592c65.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](images/c38a83be-7aae-4da8-9461-e4c44b592c65.png)'
- en: If we had included additional widgets, such as entries and scroll bars, this would
    also have affected them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们包含了其他小部件，比如输入框和滚动条，这也会受到影响。
- en: We will now take a look at how to achieve the desired functionality by scheduling
    the action instead of suspending the thread execution.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看如何通过调度操作而不是挂起线程执行来实现所需的功能。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: The `after()` method allows you to register a callback that is invoked after
    a delay expressed in milliseconds within Tkinter's main loop. You can think of
    these registered alarms as events that should be handled as soon as the system
    is idle.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`after()`方法允许您注册一个回调函数，在Tkinter的主循环中延迟指定的毫秒数后调用。您可以将这些注册的警报视为应该在系统空闲时立即处理的事件。'
- en: 'Therefore, we will replace the call to `time.sleep(5)` with `self.after(5000,
    callback)`. We use the `self` instance because the `after()` method is also available
    in the root `Tk` instance, and there will not be any difference in calling it
    from a child widget:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用`self.after(5000, callback)`替换对`time.sleep(5)`的调用。我们使用`self`实例，因为`after()`方法也可以在根`Tk`实例中使用，并且从子小部件中调用它不会有任何区别：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the preceding approach, the application is responsive before the scheduled
    action is called. The appearance of the button will change to disabled, and we
    could also interact with the title bar as usual:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述方法，应用程序在调度操作被调用之前是响应的。按钮的外观将变为禁用状态，我们也可以像往常一样与标题栏交互：
- en: '![](images/064d3045-79e4-43cc-ae25-e13f2ab909e7.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](images/064d3045-79e4-43cc-ae25-e13f2ab909e7.png)'
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: From the example mentioned in the preceding section, you might suppose the `after()`
    method executes the callback exactly after the given duration of milliseconds
    is passed as a delay.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面部分提到的示例中，您可能会认为`after()`方法会在给定的毫秒数经过后准确执行回调。
- en: However, what it does is request Tkinter to register an alarm that only guarantees
    that it will not be executed earlier than the specified time; so, if the main
    thread is busy, there is no upper limit to how long it will actually take.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它只是请求Tkinter注册一个警报，保证不会在指定的时间之前执行；因此，如果主线程忙碌，实际执行时间是没有上限的。
- en: 'We should also keep in mind that the method execution continues immediately
    after scheduling the action. The following example illustrates this behavior:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该记住，在调度操作之后，方法的执行立即继续。以下示例说明了这种行为：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding snippet will print `"First"`, then `"Second"`, and finally `"Third"`
    after 1 second each. During this time, the main thread will keep the GUI responsive,
    and users can interact with the application as usual.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码段将分别在1秒后打印“First”，“Second”和“Third”。在此期间，主线程将保持GUI响应，并且用户可以像往常一样与应用程序交互。
- en: Usually, we would want to prevent the running of the same background action
    more than once, so it's a good idea to disable the widget that triggered the execution.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们希望防止同一后台操作的运行超过一次，因此最好禁用触发执行的小部件。
- en: Do not forget that any scheduled function will be executed on the main thread,
    so just using `after()` is not enough to prevent freezing the GUI; it is also
    important to avoid executing long running methods as callbacks.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，任何预定的函数都将在主线程上执行，因此仅仅使用`after()`是不足以防止GUI冻结的；还重要的是避免执行长时间运行的方法作为回调。
- en: In the next recipe, we will take a look at how we can leverage the execution
    of these blocking actions in separate threads.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将看看如何利用单独的线程执行这些阻塞操作。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `after()` method returns an identifier of the scheduled alarm, which can
    be passed to the `after_cancel()` method to cancel the execution of the callback.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`after()`方法返回一个预定警报的标识符，可以将其传递给`after_cancel()`方法以取消回调的执行。'
- en: We will see in another recipe how to implement the functionality of stopping
    a scheduled callback using this method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个示例中，我们将看到如何使用这种方法实现停止预定回调的功能。
- en: See also
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *canceling scheduled actions* recipe
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*取消预定操作*示例'
- en: Running methods on threads
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线程上运行方法
- en: Since the main thread should be responsible only for updating the GUI and handling
    events, the rest of the background actions must be executed in separate threads.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于主线程应该负责更新GUI和处理事件，因此其余的后台操作必须在单独的线程中执行。
- en: Python's Standard Library includes the `threading` module to create and control
    multiple threads using a high-level interface that will allow us to work with
    simple classes and methods.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Python的标准库包括`threading`模块，用于使用高级接口创建和控制多个线程，这将允许我们使用简单的类和方法。
- en: It is worth mentioning that CPython—the reference Python implementation—is inherently
    limited by the **GIL** (**Global Interpreter Lock**), a mechanism that prevents
    multiple threads from executing Python byte codes once and therefore, they cannot
    run in separate cores to take full advantage of multiprocessor systems. This should
    be kept in mind if trying to use the `threading` module to improve the performance
    of your application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，CPython——参考Python实现——受**GIL**（**全局解释器锁**）的固有限制，这是一种防止多个线程同时执行Python字节码的机制，因此它们无法在单独的核心上运行，无法充分利用多处理器系统。如果尝试使用`threading`模块来提高应用程序的性能，应该记住这一点。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following example combines the suspension of a thread with `time.sleep()`
    with an action scheduled via `after()`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将`time.sleep()`的线程暂停与通过`after()`调度的操作结合起来：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To create a new `Thread` object, we can use the constructor with the `target`
    keyword argument, which will be invoked on a separate thread when we call its
    `start()` method.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的`Thread`对象，可以使用带有`target`关键字参数的构造函数，在调用其`start()`方法时将在单独的线程上调用它。
- en: 'In the preceding section, we used a reference to the `run_action` method on
    the current application instance:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们在当前应用程序实例上使用了对`run_action`方法的引用：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we periodically polled the thread status using `after()`, which schedules
    the same method again until the thread is finished:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`after()`定期轮询线程状态，直到线程完成为止：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code snippet, we set a delay of `100` milliseconds, because
    there is no need to keep polling more frequently than that. Of course, this number
    may vary depending on the nature of the threaded action.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们设置了`100`毫秒的延迟，因为没有必要以更频繁的频率进行轮询。当然，这个数字可能会根据线程操作的性质而变化。
- en: 'This timeline can be represented by the following sequence diagram:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个时间线可以用以下序列图表示：
- en: '![](images/fea2c979-482b-44a4-a0b5-c4ed260cd966.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](images/fea2c979-482b-44a4-a0b5-c4ed260cd966.jpg)'
- en: The rectangle on **Thread-1** represents the time it is busy executing **time.sleep(5)**.
    Meanwhile, **MainThread** only checks the status periodically, and there is no
    operation long enough to causes it to freeze the GUI.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**Thread-1**上的矩形表示它忙于执行**time.sleep(5)**的时间。与此同时，**MainThread**只定期检查状态，没有操作长到足以导致GUI冻结。'
- en: There's more...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we had a brief introduction to the `Thread` class, but it is
    also important to point out some details about instantiating and using threads
    in your Python programs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们简要介绍了`Thread`类，但同样重要的是指出一些关于在Python程序中实例化和使用线程的细节。
- en: Thread methods - start, run, and join
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程方法 - start、run和join
- en: In our example, we called `start()` because we wanted to execute the method
    in a separate thread and continue the execution of the current thread.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们调用了`start()`，因为我们希望在单独的线程中执行该方法并继续执行当前线程。
- en: On the other hand, if we had invoked the `join()` method, the main thread would
    have been blocked until the new thread is terminated. Therefore, it would have
    caused the same "freezing" behavior that we wanted to avoid, even if we are using
    multiple threads.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们调用了`join()`方法，主线程将被阻塞，直到新线程终止。因此，即使我们使用多个线程，它也会导致我们想要避免的相同的“冻结”行为。
- en: Finally, the `run()` method is where the thread actually executes its callable
    target operation. We will override it when we extend the `Thread` class, as in
    the next recipe.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`run()`方法是线程实际执行其可调用目标操作的地方。当我们扩展`Thread`类时，我们将覆盖它，就像下一个示例中一样。
- en: As a rule of thumb, always remember to call `start()` from the main thread to
    avoid blocking it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个经验法则，始终记住从主线程调用`start()`以避免阻塞它。
- en: Parameterizing the target method
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数化目标方法
- en: 'When using the constructor of the `Thread` class, it''s possible to specify
    the arguments of the target method via the `args` parameter:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`Thread`类的构造函数时，可以通过`args`参数指定目标方法的参数：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the `self` parameter is passed automatically since we are using the
    current instance to reference the target method. This might be handy in scenarios
    where the new thread needs to access information from the caller instance.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们正在使用当前实例引用目标方法，因此`self`参数会自动传递。在新线程需要访问来自调用方实例的信息的情况下，这可能很方便。
- en: Performing HTTP requests
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行HTTP请求
- en: Communicating your application with a remote server via HTTP is a common use
    case of asynchronous programming. The client performs a request, which is transferred
    across the network using the TCP/IP protocol; then, the server processes the information
    and sends the response back to the client.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过HTTP与远程服务器通信是异步编程的常见用例。客户端执行请求，该请求使用TCP/IP协议在网络上传输；然后，服务器处理信息并将响应发送回客户端。
- en: The time to perform this operation might vary from a few milliseconds to several
    seconds, but in most cases it is safe to assume that this latency may be noticed
    by your users.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此操作所需的时间可能会从几毫秒到几秒不等，但在大多数情况下，可以安全地假设用户可能会注意到这种延迟。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: There are plenty of third-party web services on the internet that can be freely
    accessed for prototyping purposes. However, we do not want to rely on an external
    service because its API may change or it might even go offline.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上有很多第三方网络服务可以免费访问以进行原型设计。但是，我们不希望依赖外部服务，因为其API可能会更改，甚至可能会下线。
- en: 'For this recipe, we will implement our custom HTTP server, which generates
    a random JSON response that will be printed on our separate GUI application:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将实现我们自己的HTTP服务器，该服务器将生成一个随机的JSON响应，该响应将打印在我们单独的GUI应用程序中：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To start this server, run the `server.py` script and leave the process running
    to accept incoming HTTP requests on local port `8080`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动此服务器，请运行`server.py`脚本，并保持进程运行以接受本地端口`8080`上的传入HTTP请求。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Our client application consists of a simple label to display information to
    users and a button to perform a new HTTP request to our local server:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的客户端应用程序包括一个简单的标签，用于向用户显示信息，以及一个按钮，用于向我们的本地服务器执行新的HTTP请求：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When the request is completed, the label shows the random value generated in
    the server, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求完成时，标签显示服务器中生成的随机值，如下所示：
- en: '![](images/1dafeaf9-7935-446d-a1fb-b04232acb21b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](images/1dafeaf9-7935-446d-a1fb-b04232acb21b.png)'
- en: As usual, the button gets disabled while the asynchronous action is running
    to avoid performing a new request before the preceding one has been processed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当异步操作正在运行时，按钮会被禁用，以避免在处理前一个请求之前执行新的请求。
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, we extended the `Thread` class to implement the logic that
    must run in a separate thread using a more object-oriented approach. This is done
    by overriding its `run()` method, which will be responsible for performing the
    HTTP request to the local server:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们扩展了`Thread`类，以使用更面向对象的方法实现必须在单独线程中运行的逻辑。这是通过覆盖其`run()`方法来完成的，该方法将负责执行对本地服务器的HTTP请求：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are lots of HTTP client libraries, but here we will simply use the `urllib.request`
    module from the standard library. This module contains the `urlopen()` function,
    which can take a URL string and return an HTTP response that can work as a context
    manager—that is, it can be safely read and closed using the `with` statement.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多HTTP客户端库，但在这里，我们将简单地使用标准库中的`urllib.request`模块。该模块包含`urlopen()`函数，可以接受URL字符串并返回一个HTTP响应，可以作为上下文管理器使用，即可以使用`with`语句安全地读取和关闭。
- en: 'The server returns a JSON document like the following one (you can check it
    by opening the `http://localhost:8080` URL in your browser):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器返回一个JSON文档，如下所示（您可以通过在浏览器中打开`http://localhost:8080`URL来检查）：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To decode the string to a object, we pass the response contents to the `loads()`
    function from the `json` module. Thanks to this, we can access the random value
    like using a dictionary, and store it in the `result` attribute, which is initialized
    to `None` to prevent the main thread from reading a field that is not set in case
    an error occurs:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将字符串解码为对象，我们将响应内容传递给`json`模块的`loads()`函数。由于这样，我们可以像使用字典一样访问随机值，并将其存储在`result`属性中，该属性初始化为`None`，以防止主线程在发生错误时读取未设置的字段：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, the GUI periodically polls the thread status, as we saw in the preceding
    recipe:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，GUI定期轮询线程状态，就像我们在前面的示例中看到的那样：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, the main difference is that once the thread is not alive, we can retrieve
    the value of the `result` attribute because it has been set before finishing its
    execution.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，主要的区别在于一旦线程不再活动，我们可以检索`result`属性的值，因为它在执行结束之前已经设置。
- en: See also
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Running methods on threads* recipe
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在线程上运行方法*示例'
- en: Connecting threads with a progress bar
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将线程与进度条连接起来
- en: Progress bars are useful indicators of the status of a background task, showing
    an incrementally filled portion of the bar relative to the progress. They are
    frequently used in long-running operations, so it is common to connect them with
    the threads that execute these tasks to provide visual feedback to end users.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条是后台任务状态的有用指示器，显示相对于进度的逐步填充部分。它们经常用于长时间运行的操作，因此通常将它们与执行这些任务的线程连接起来，以向最终用户提供视觉反馈。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'Our sample application will consist of a horizontal progress bar that will
    increment a fixed amount of progress once the user clicks on the Start button:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例应用程序将包括一个水平进度条，一旦用户点击“开始”按钮，它将增加固定数量的进度：
- en: '![](images/39ccaa8f-15d9-4d73-bfc0-e0be22d147d2.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](images/39ccaa8f-15d9-4d73-bfc0-e0be22d147d2.png)'
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: To simulate the execution of a background task, the increment of the progress
    bar will be generated from a different thread that will suspend its execution
    for 1 second between each step.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟后台任务的执行，进度条的增量将由一个不同的线程生成，该线程将在每个步骤之间暂停1秒。
- en: 'The communication will be made using a synchronized queue that allow us to
    exchange information in a thread-safe manner:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通信将使用同步队列进行，这允许我们以线程安全的方式交换信息：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Progressbar` is a themed widget included in the `tkinter.ttk` module. We will
    dive into this module in [Chapter 8](b8705c23-ce33-4fa7-b318-e7626e557b86.xhtml),
    *Themed Widgets*, to explore the new widgets that it defines, but so far we only
    need to use `Progressbar` as a regular widget.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Progressbar`是`tkinter.ttk`模块中包含的一个主题小部件。我们将在[第8章](b8705c23-ce33-4fa7-b318-e7626e557b86.xhtml)中深入探讨这个模块，探索它定义的新小部件，但到目前为止，我们只需要将`Progressbar`作为常规小部件使用。'
- en: We also need to import the `queue` module, which defines synchronized collections
    such as `Queue`. Synchronicity is an important topic in multithreaded environments,
    because an unexpected result might occur if shared resources are accessed at exactly
    the same time—we define this unlikely but possible scenarios as a **race condition**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要导入`queue`模块，该模块定义了同步集合，如`Queue`。在多线程环境中，同步性是一个重要的主题，因为如果在完全相同的时间访问共享资源，可能会出现意外的结果，我们将这些不太可能但可能发生的情况定义为**竞争条件**。
- en: 'With these additions, our `App` class contains these new statements:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些添加，我们的`App`类包含了这些新的语句：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Like previous examples, the `start_action()` method starts a thread, passing
    the queue and the number of steps that will simulate the long running task:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的示例一样，`start_action()`方法启动一个线程，传递队列和将模拟长时间运行任务的步数：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Our `AsyncAction` subclass defines a custom constructor to receive these parameters,
    which will later be used in the `run()` method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`AsyncAction`子类定义了一个自定义构造函数来接收这些参数，这些参数将在`run()`方法中使用：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The loop suspends the execution of the thread for 1 second and adds the increment
    to the queue as many times as indicated in the `steps` attribute.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 循环暂停线程的执行1秒，并根据“steps”属性中指示的次数将增量添加到队列中。
- en: 'The item added to the queue is retrieved from the application instance by reading
    the queue from `check_queue()`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序实例中读取队列，从`check_queue()`中检查队列中添加的项目：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following method is periodically called from `poll_thread()`, which polls
    the thread status and schedules itself again with `after()` until the thread completes
    its execution:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 从`poll_thread()`定期调用以下方法，该方法轮询线程状态并使用`after()`再次调度自己，直到线程完成执行：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: See also
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Running methods on threads* recipe
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在线程上运行方法*食谱'
- en: Canceling scheduled actions
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消预定的操作
- en: Tkinter's scheduling mechanism not only provides methods to delay callback executions,
    but also to cancel them if they have not been executed yet. Consider an operation
    that may take too much time to complete, so we want to let users to stop it by
    pressing a button or closing the application.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter的调度机制不仅提供了延迟回调执行的方法，还提供了取消它们的方法，如果它们尚未执行。考虑一个可能需要太长时间才能完成的操作，因此我们希望让用户通过按下按钮或关闭应用程序来停止它。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will take the example from the first recipe and add a Stop button to allow
    us to cancel the scheduled action.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从第一个食谱中获取示例，并添加一个Stop按钮，以允许我们取消预定的操作。
- en: 'This button will be enabled only while the action is scheduled, which means
    that once you click on the left button, the user can wait for 5 seconds, or click
    on the Stop button to immediately enable it again:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这个按钮只有在操作被预定时才会启用，这意味着一旦单击左按钮，用户可以等待5秒，或者单击Stop按钮立即再次启用它：
- en: '![](images/d3b3fcb2-7afe-4875-83aa-f97e554a4787.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](images/d3b3fcb2-7afe-4875-83aa-f97e554a4787.png)'
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The `after_cancel()` method cancels the execution of a scheduled action by
    taking the identifier previously returned by calling `after()`. In this example,
    this value is stored in the `scheduled_id` attribute:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`after_cancel()`方法通过获取先前调用`after()`返回的标识符来取消预定操作的执行。在这个例子中，这个值存储在`scheduled_id`属性中：'
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To unschedule a callback, we will first need the alarm identifier returned
    by `after()`. We will store this identifier in the `scheduled_id` attribute, since
    we will need it in a separate method:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消回调，我们首先需要`after()`返回的警报标识符。我们将把这个标识符存储在`scheduled_id`属性中，因为我们将在一个单独的方法中需要它：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, this field is passed to `after_cancel()` in the callback of the `Stop`
    button:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，该字段被传递给“Stop”按钮的回调函数中的`after_cancel()`：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In our case, it is important to disable the `Start` button once it is clicked,
    because if `start_action()` is called twice, `scheduled_id` would be overridden,
    and the `Stop` button could only cancel the last scheduled action.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，一旦单击“Start”按钮，将其禁用是很重要的，因为如果`start_action()`被调用两次，`scheduled_id`将被覆盖，而“Stop”按钮只能取消最后一个预定的操作。
- en: As a side note, `after_cancel()` has no effect if we call it with an alarm identifier
    that has already been executed.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，如果我们使用已经执行过的警报标识符调用`after_cancel()`，它将没有效果。
- en: There's more...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this section, we covered how to cancel a scheduled alarm, but if this callback
    was polling the status of a background thread, you might wonder how to stop the
    thread as well.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了如何取消预定的警报，但是如果此回调正在轮询后台线程的状态，您可能会想知道如何停止线程。
- en: 'Unfortunately, there is no official API to gracefully stop a `Thread` instance.
    If you have defined a custom subclass, you might need to include a flag that is
    periodically checked inside its `run()` method:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，没有官方的API可以优雅地停止`Thread`实例。如果您已经定义了一个自定义子类，您可能需要在其`run()`方法中定期检查的标志。
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Then, this flag can be externally modified by setting `thread.do_stop = True`
    when invoking `after_cancel()` also to stop the thread.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当调用`after_cancel()`时，这个标志可以通过设置`thread.do_stop = True`来外部修改，也可以停止线程。
- en: Obviously, this approach will heavily depend on the operations performed inside
    the `run()` method—for instance, this mechanism is easier to implement if it consists
    of a loop, because you can perform this check between each iteration.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这种方法将严重依赖于`run()`方法内部执行的操作，例如，如果它由一个循环组成，那么您可以在每次迭代之间执行此检查。
- en: Starting from Python 3.4, you can use the `asyncio` module, which includes classes
    and functions to manage asynchronous operations, including cancellations. Even
    though this module is outside the scope of this book, we recommend you explore
    it if you face more complex scenarios.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从Python 3.4开始，您可以使用`asyncio`模块，其中包括管理异步操作的类和函数，包括取消。尽管这个模块超出了本书的范围，但如果您面对更复杂的情况，我们建议您探索一下。
- en: Handling idle tasks
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理空闲任务
- en: There are certain situations where an operation causes a small pause in the
    execution of the program. It might not even take a second to complete, but it
    is still noticeable to your users because it introduces a momentary pause in the
    GUI.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，某个操作会导致程序执行时出现短暂的暂停。它甚至可能不到一秒就完成，但对于用户来说仍然是可察觉的，因为它在GUI中引入了短暂的暂停。
- en: In this recipe, we will discuss how to deal with these scenarios without needing
    to process the whole task in a separate thread.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将讨论如何处理这些情况，而无需在单独的线程中处理整个任务。
- en: Getting ready
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will take the example from the *Scheduling actions* recipe, but with a timeout
    of 1 second instead of 5.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从*Scheduling actions*配方中取一个例子，但超时时间为1秒，而不是5秒。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: When we change the state of the button to `DISABLED`, the callback continues
    its execution, so the state of the button is not actually changed until the system
    is idle, which means it has to wait for `time.sleep()` to complete.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将按钮的状态更改为`DISABLED`时，回调函数继续执行，因此按钮的状态实际上直到系统处于空闲状态时才会更改，这意味着它必须等待`time.sleep()`完成。
- en: 'However, we can force Tkinter to update all the pending GUI updates to execute
    at a specific moment, as shown in the following script:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以强制Tkinter在特定时刻更新所有挂起的GUI更新，如下面的脚本所示：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The key to the snippet mentioned in the preceding section is the call to `self.update_idletasks()`.
    Thanks to this, the change to the button state is processed by Tkinter before
    calling `time.sleep()`. So, during the second that the callback is suspended,
    the button has the desired appearance, instead of `ACTIVE`, which is the state
    that Tkinter sets for the button before invoking the callback.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面部分提到的代码片段中，关键是调用`self.update_idletasks()`。由于这一点，按钮状态的更改在调用`time.sleep()`之前由Tkinter处理。因此，在回调被暂停的一秒钟内，按钮具有期望的外观，而不是Tkinter在调用回调之前设置的`ACTIVE`状态。
- en: We used `time.sleep()` to illustrate a situation where a statement takes long
    enough to execute but is short enough to consider moving it to a new thread—in
    real-world scenarios, it would be a more complex computing operation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`time.sleep()`来说明一个语句执行时间长，但足够短，可以考虑将其移到新线程中的情况——在现实世界的场景中，这将是一个更复杂的计算操作。
- en: Spawning separate processes
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成单独的进程
- en: Under some circumstances, it is not possible to implement the desired functionality
    for your application just by using threads. For instance, you might want to call
    a separate program that could be written in a different language.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，仅使用线程可能无法实现应用程序所需的功能。例如，您可能希望调用用不同语言编写的单独程序。
- en: In this case, we also need to use the `subprocess` module to invoke the target
    program from our Python process.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们还需要使用`subprocess`模块从Python进程中调用目标程序。
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following example performs a ping to an indicated DNS or IP address:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例执行对指定DNS或IP地址的ping操作：
- en: '![](images/2d22640c-8c92-43f6-8cec-59f2f6dcb862.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](images/2d22640c-8c92-43f6-8cec-59f2f6dcb862.png)'
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: As usual, we define a custom `AsyncAction` method, but, in this case, we call
    `subprocess.run()` with the value set in the Entry widget.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们定义一个自定义的`AsyncAction`方法，但在这种情况下，我们使用Entry小部件中设置的值调用`subprocess.run()`。
- en: 'This function starts a separate subprocess that, unlike threads, uses a separate
    memory space. This means that in order to get the result of the `ping` command,
    we must pipe the result printed to the standard output and read it in our Python
    program:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数启动一个单独的子进程，与线程不同，它使用单独的内存空间。这意味着为了获得`ping`命令的结果，我们必须将打印到标准输出的结果进行管道传输，并在我们的Python程序中读取它：
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `run()` function executes the subprocess specified in the array of arguments.
    By default, the result contains only the return code of the process, so we also
    pass the `stdout` option with the `PIPE` constant to indicate that the standard
    output stream should be piped.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`run()`函数执行数组参数中指定的子进程。默认情况下，结果只包含进程的返回代码，因此我们还传递了`stdout`选项和`PIPE`常量，以指示应将标准输出流进行管道传输。'
- en: 'We call this function with the keyword argument—`shell`—set to `True` to avoid
    opening a new console for the `ping` subprocess:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用关键字参数`shell`设置为`True`来调用这个函数，以避免为`ping`子进程打开新的控制台：
- en: '[PRE25]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, when the main thread verifies that this operation has finished, it
    prints the output to the Text widget:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当主线程验证该操作已完成时，将输出打印到Text小部件：
- en: '[PRE26]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
