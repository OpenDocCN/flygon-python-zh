["```py\npip install jinja2==2.9.6\n```", "```py\nfrom __future__ import print_function\nimport argparse\nfrom collections import Counter\nimport shutil\nimport os\nimport sys\n```", "```py\nif __name__ == \"__main__\":\n    # Command-line Argument Parser\n    parser = argparse.ArgumentParser(\n        description=__description__,\n        epilog=\"Developed by {} on {}\".format(\n            \", \".join(__authors__), __date__)\n    )\n    parser.add_argument(\"OUTPUT_DIR\", help=\"Desired Output Path\")\n    args = parser.parse_args()\n\n    main(args.OUTPUT_DIR)\n```", "```py\nDEMO = Template(\"\"\"type = ['','info','success','warning','danger']; \n[snip] \n        Chartist.Pie('#chartPreferences', dataPreferences,\n          optionsPreferences);\n\n        Chartist.Pie('#chartPreferences', {\n          labels: [{{pi_labels}}],\n          series: [{{pi_series}}]\n        });\n[snip] \n\"\"\") \n```", "```py\ndef main(output_dir):\n    acquisition_data = [\n        [\"001\", \"Debbie Downer\", \"Mobile\", \"08/05/2017 13:05:21\", \"32\"],\n        [\"002\", \"Debbie Downer\", \"Mobile\", \"08/05/2017 13:11:24\", \"16\"],\n        [\"003\", \"Debbie Downer\", \"External\", \"08/05/2017 13:34:16\", \"128\"],\n        [\"004\", \"Debbie Downer\", \"Computer\", \"08/05/2017 14:23:43\", \"320\"],\n        [\"005\", \"Debbie Downer\", \"Mobile\", \"08/05/2017 15:35:01\", \"16\"],\n        [\"006\", \"Debbie Downer\", \"External\", \"08/05/2017 15:54:54\", \"8\"],\n        [\"007\", \"Even Steven\", \"Computer\", \"08/07/2017 10:11:32\", \"256\"],\n        [\"008\", \"Even Steven\", \"Mobile\", \"08/07/2017 10:40:32\", \"32\"],\n        [\"009\", \"Debbie Downer\", \"External\", \"08/10/2017 12:03:42\", \"64\"],\n        [\"010\", \"Debbie Downer\", \"External\", \"08/10/2017 12:43:27\", \"64\"]\n    ]\n    print(\"[+] Processing acquisition data\")\n    process_data(acquisition_data, output_dir)\n```", "```py\ndef process_data(data, output_dir):\n    html_table = \"\"\n    for acq in data:\n        html_table += \"<tr><td>{}</td><td>{}</td><td>{}</td><td>{}</td>\" \\\n            \"<td>{}</td></tr>\\n\".format(\n                acq[0], acq[1], acq[2], acq[3], acq[4])\n```", "```py\n    device_types = Counter([x[2] for x in data])\n    custodian_devices = Counter([x[1] for x in data])\n\n    date_dict = {}\n    for acq in data:\n        date = acq[3].split(\" \")[0]\n        if date in date_dict:\n            date_dict[date] += int(acq[4])\n        else:\n            date_dict[date] = int(acq[4])\n    output_html(output_dir, len(data), html_table,\n                device_types, custodian_devices, date_dict)\n```", "```py\ndef output_html(output, num_devices, table, devices, custodians, dates):\n    print(\"[+] Rendering HTML and copy files to {}\".format(output))\n    cwd = os.getcwd()\n    bootstrap = os.path.join(cwd, \"light-bootstrap-dashboard\")\n    shutil.copytree(bootstrap, output)\n\n    dashboard_output = os.path.join(output, \"dashboard.html\")\n    table_output = os.path.join(output, \"table.html\")\n    demo_output = os.path.join(output, \"assets\", \"js\", \"demo.js\")\n```", "```py\n    with open(dashboard_output, \"w\") as outfile:\n        outfile.write(DASH.render(num_custodians=len(custodians.keys()),\n                                  num_devices=num_devices,\n                                  data=calculate_size(dates)))\n\n    with open(table_output, \"w\") as outfile:\n        outfile.write(TABLE.render(table_body=table))\n```", "```py\n    with open(demo_output, \"w\") as outfile:\n        outfile.write(\n            DEMO.render(bar_labels=return_labels(dates.keys()),\n                        bar_series=return_series(dates.values()),\n                        pi_labels=return_labels(devices.keys()),\n                        pi_series=return_series(devices.values()),\n                        pi_2_labels=return_labels(custodians.keys()),\n                        pi_2_series=return_series(custodians.values())))\n```", "```py\ndef calculate_size(sizes):\n    return sum(sizes.values())\n\ndef return_labels(list_object):\n    return \", \".join(\"'{}'\".format(x) for x in list_object)\n\ndef return_series(list_object):\n    return \", \".join(str(x) for x in list_object)\n```", "```py\nfrom __future__ import print_function\nimport argparse\nfrom datetime import datetime\nimport os\nimport sys\nimport html_dashboard\n```", "```py\nif __name__ == \"__main__\":\n    # Command-line Argument Parser\n    parser = argparse.ArgumentParser(\n        description=__description__,\n        epilog=\"Developed by {} on {}\".format(\n            \", \".join(__authors__), __date__)\n    )\n    parser.add_argument(\"INPUT_DIR\", help=\"Input Directory of Logs\")\n    parser.add_argument(\"OUTPUT_DIR\", help=\"Desired Output Path\")\n    args = parser.parse_args()\n\n    if os.path.exists(args.INPUT_DIR) and os.path.isdir(args.INPUT_DIR):\n        main(args.INPUT_DIR, args.OUTPUT_DIR)\n    else:\n        print(\"[-] Supplied input directory {} does not exist or is not \"\n              \"a file\".format(args.INPUT_DIR))\n        sys.exit(1)\n```", "```py\ndef main(in_dir, out_dir):\n    ftk_logs = [x for x in os.listdir(in_dir)\n                if x.lower().endswith(\".txt\")]\n    print(\"[+] Processing {} potential FTK Imager Logs found in {} \"\n          \"directory\".format(len(ftk_logs), in_dir))\n    ftk_data = []\n    for log in ftk_logs:\n        log_data = {\"e_numb\": \"\", \"custodian\": \"\", \"type\": \"\",\n                    \"date\": \"\", \"size\": \"\"}\n        log_name = os.path.join(in_dir, log)\n        if validate_ftk(log_name):\n```", "```py\ndef validate_ftk(log_file):\n    with open(log_file) as log:\n        first_line = log.readline()\n        if \"Created By AccessData\" not in first_line:\n            return False\n        else:\n            return True\n```", "```py\n            with open(log_name) as log_file:\n                bps, sec_count = (None, None)\n                for line in log_file:\n                    if \"Evidence Number:\" in line:\n                        log_data[\"e_numb\"] = line.split(\n                            \"Number:\")[1].strip()\n                    elif \"Notes:\" in line:\n                        log_data[\"custodian\"] = line.split(\n                            \"Notes:\")[1].strip()\n                    elif \"Image Type:\" in line:\n                        log_data[\"type\"] = line.split(\"Type:\")[1].strip()\n                    elif \"Acquisition started:\" in line:\n                        acq = line.split(\"started:\")[1].strip()\n                        date = datetime.strptime(\n                            acq, \"%a %b %d %H:%M:%S %Y\")\n                        log_data[\"date\"] = date.strftime(\n                            \"%M/%d/%Y %H:%M:%S\")\n```", "```py\ndef calculate_size(bytes, sectors):\n    return (bytes * sectors) / (1024**3)\n```", "```py\n                    elif \"Bytes per Sector:\" in line:\n                        bps = int(line.split(\"Sector:\")[1].strip())\n                    elif \"Sector Count:\" in line:\n                        sec_count = int(\n                            line.split(\"Count:\")[1].strip().replace(\n                                \",\", \"\")\n                        )\n                if bps is not None and sec_count is not None:\n                    log_data[\"size\"] = calculate_size(bps, sec_count)\n\n            ftk_data.append(\n                [log_data[\"e_numb\"], log_data[\"custodian\"],\n                 log_data[\"type\"], log_data[\"date\"], log_data[\"size\"]]\n            )\n\n    print(\"[+] Creating HTML dashboard based acquisition logs \"\n          \"in {}\".format(out_dir))\n    html_dashboard.process_data(ftk_data, out_dir)\n```", "```py\npip install unicodecsv==0.14.1\n```", "```py\nfrom __future__ import print_function\nimport csv\nimport os\nimport sys\n```", "```py\nif sys.version_info < (3, 0):\n    csv_writer_py2(TEST_DATA_LIST, [\"Name\", \"Age\", \"Cool Factor\"],\n                   os.getcwd())\n    unicode_csv_dict_writer_py2(\n        TEST_DATA_DICT, [\"Name\", \"Age\", \"Cool Factor\"], os.getcwd(),\n        \"dict_output.csv\")\n\nelif sys.version_info >= (3, 0):\n    csv_writer_py3(TEST_DATA_LIST, [\"Name\", \"Age\", \"Cool Factor\"],\n                   os.getcwd())\n```", "```py\nTEST_DATA_LIST = [[\"Bill\", 53, 0], [\"Alice\", 42, 5],\n                  [\"Zane\", 33, -1], [\"Theodore\", 72, 9001]]\n\nTEST_DATA_DICT = [{\"Name\": \"Bill\", \"Age\": 53, \"Cool Factor\": 0},\n                  {\"Name\": \"Alice\", \"Age\": 42, \"Cool Factor\": 5},\n                  {\"Name\": \"Zane\", \"Age\": 33, \"Cool Factor\": -1},\n                  {\"Name\": \"Theodore\", \"Age\": 72, \"Cool Factor\": 9001}]\n```", "```py\ndef csv_writer_py2(data, header, output_directory, name=None):\n    if name is None:\n        name = \"output.csv\"\n\n    print(\"[+] Writing {} to {}\".format(name, output_directory))\n\n    with open(os.path.join(output_directory, name), \"wb\") as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(header)\n\n        writer.writerows(data)\n```", "```py\ndef unicode_csv_dict_writer_py2(data, header, output_directory, name=None):\n    try:\n        import unicodecsv\n    except ImportError:\n        print(\"[+] Install unicodecsv module before executing this\"\n              \" function\")\n        sys.exit(1)\n\n    if name is None:\n        name = \"output.csv\"\n\n    print(\"[+] Writing {} to {}\".format(name, output_directory))\n    with open(os.path.join(output_directory, name), \"wb\") as csvfile:\n        writer = unicodecsv.DictWriter(csvfile, fieldnames=header)\n        writer.writeheader()\n\n        writer.writerows(data)\n```", "```py\ndef csv_writer_py3(data, header, output_directory, name=None):\n    if name is None:\n        name = \"output.csv\"\n\n    print(\"[+] Writing {} to {}\".format(name, output_directory))\n\n    with open(os.path.join(output_directory, name), \"w\", newline=\"\") as \\\n            csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(header)\n\n        writer.writerows(data)\n```", "```py\npip install xlsxwriter==0.9.9\n```", "```py\nfrom __future__ import print_function\nimport argparse\nfrom collections import Counter\nfrom datetime import datetime\nimport os\nimport sys\nfrom utility import utilcsv\n\ntry:\n    import xlsxwriter\nexcept ImportError:\n    print(\"[-] Install required third-party module xlsxwriter\")\n    sys.exit(1)\n```", "```py\nif __name__ == \"__main__\":\n    # Command-line Argument Parser\n    parser = argparse.ArgumentParser(\n        description=__description__,\n        epilog=\"Developed by {} on {}\".format(\n            \", \".join(__authors__), __date__)\n    )\n    parser.add_argument(\"OUTPUT_DIR\", help=\"Desired Output Path\")\n    args = parser.parse_args()\n\n    if not os.path.exists(args.OUTPUT_DIR):\n        os.makedirs(args.OUTPUT_DIR)\n\n    main(args.OUTPUT_DIR)\n```", "```py\ndef main(output_directory):\n    print(\"[+] Reading in sample data set\")\n    # Skip first row of headers\n    data = utilcsv.csv_reader(\"redacted_sample_event_log.csv\")[1:]\n    xlsx_writer(data, output_directory)\n```", "```py\ndef xlsx_writer(data, output_directory):\n    print(\"[+] Writing output.xlsx file to {}\".format(output_directory))\n    workbook = xlsxwriter.Workbook(\n        os.path.join(output_directory, \"output.xlsx\"))\n    dashboard = workbook.add_worksheet(\"Dashboard\")\n    data_sheet = workbook.add_worksheet(\"Data\")\n```", "```py\n    title_format = workbook.add_format({\n        'bold': True, 'font_color': 'white', 'bg_color': 'black',\n        'font_size': 30, 'font_name': 'Calibri', 'align': 'center'\n    })\n    date_format = workbook.add_format(\n        {'num_format': 'mm/dd/yy hh:mm:ss AM/PM'})\n```", "```py\n    for i, record in enumerate(data):\n        data_sheet.write_number(i, 0, int(record[0]))\n        data_sheet.write(i, 1, record[1])\n        data_sheet.write(i, 2, record[2])\n        dt = datetime.strptime(record[3], \"%m/%d/%Y %H:%M:%S %p\")\n        data_sheet.write_datetime(i, 3, dt, date_format)\n        data_sheet.write_number(i, 4, int(record[4]))\n        data_sheet.write(i, 5, record[5])\n        data_sheet.write_number(i, 6, int(record[6]))\n        data_sheet.write(i, 7, record[7])\n\n    data_length = len(data) + 1\n    data_sheet.add_table(\n        \"A1:H{}\".format(data_length),\n        {\"columns\": [\n            {\"header\": \"Index\"},\n            {\"header\": \"File Name\"},\n            {\"header\": \"Computer Name\"},\n            {\"header\": \"Written Date\"},\n            {\"header\": \"Event Level\"},\n            {\"header\": \"Event Source\"},\n            {\"header\": \"Event ID\"},\n            {\"header\": \"File Path\"}\n        ]}\n    )\n```", "```py\n    event_ids = Counter([x[6] for x in data])\n    dashboard.merge_range('A1:Q1', 'Event Log Dashboard', title_format)\n    for i, record in enumerate(event_ids):\n        dashboard.write(100 + i, 0, record)\n        dashboard.write(100 + i, 1, event_ids[record])\n\n    dashboard.add_table(\"A100:B{}\".format(\n        100 + len(event_ids)),\n        {\"columns\": [{\"header\": \"Event ID\"}, {\"header\": \"Occurrence\"}]}\n    )\n```", "```py\n    event_chart = workbook.add_chart({'type': 'bar'})\n    event_chart.set_title({'name': 'Event ID Breakdown'})\n    event_chart.set_size({'x_scale': 2, 'y_scale': 5})\n\n    event_chart.add_series(\n        {'categories': '=Dashboard!$A$101:$A${}'.format(\n            100 + len(event_ids)),\n         'values': '=Dashboard!$B$101:$B${}'.format(\n             100 + len(event_ids))})\n    dashboard.insert_chart('C5', event_chart)\n\n    workbook.close()\n```", "```py\npip install pyscreenshot==0.4.2\npip install Pillow==4.2.1\npip install wxpython==4.0.0b1\n```", "```py\nfrom __future__ import print_function \nimport argparse \nfrom multiprocessing import freeze_support \nimport os \nimport sys \nimport time\n\ntry: \n    import pyscreenshot \n    import wx \nexcept ImportError: \n    print(\"[-] Install wx and pyscreenshot to use this script\") \n    sys.exit(1)\n```", "```py\nif __name__ == \"__main__\": \n    # Command-line Argument Parser \n    parser = argparse.ArgumentParser( \n        description=__description__, \n        epilog=\"Developed by {} on {}\".format( \n            \", \".join(__authors__), __date__) \n    ) \n    parser.add_argument(\"OUTPUT_DIR\", help=\"Desired Output Path\") \n    parser.add_argument( \n        \"INTERVAL\", help=\"Screenshot interval (seconds)\", type=int) \n    parser.add_argument( \n        \"-total\", help=\"Total number of screenshots to take\", type=int) \n    args = parser.parse_args() \n\n    if not os.path.exists(args.OUTPUT_DIR): \n        os.makedirs(args.OUTPUT_DIR) \n\n    main(args.OUTPUT_DIR, args.INTERVAL, args.total)\n```", "```py\ndef main(output_dir, interval, total): \n    i = 0 \n    while True: \n        i += 1 \n        time.sleep(interval) \n        image = pyscreenshot.grab() \n        output = os.path.join(output_dir, \"screenshot_{}.png\").format(i) \n        image.save(output) \n        print(\"[+] Took screenshot {} and saved it to {}\".format( \n            i, output_dir)) \n        if total is not None and i == total: \n            print(\"[+] Finished taking {} screenshots every {} \" \n                  \"seconds\".format(total, interval)) \n            sys.exit(0)\n```"]