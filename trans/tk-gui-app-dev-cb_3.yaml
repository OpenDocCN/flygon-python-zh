- en: Customizing Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义小部件
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Working with colors
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用颜色
- en: Setting widget fonts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置小部件字体
- en: Using the options database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用选项数据库
- en: Changing the cursor icon
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改光标图标
- en: Introducing the Text widget
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍文本小部件
- en: Adding tags to the Text widget
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向文本小部件添加标签
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: By default, Tkinter widgets will display with a native look and feel. While
    this standard appearance could be enough for quick prototyping, we might want
    to customize some widget attributes, such as font, color, and background.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Tkinter小部件将显示本机外观和感觉。虽然这种标准外观可能足够快速原型设计，但我们可能希望自定义一些小部件属性，如字体、颜色和背景。
- en: This customization does not affect only the widgets itself, but also its inner
    items. We will dive into the Text widget, which along with the Canvas widget is
    one of the most versatile Tkinter classes. The Text widget represents a multiline
    text area with formatted content, with several methods that make it possible to
    format characters or lines and add event-specific event bindings.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种自定义不仅影响小部件本身，还影响其内部项目。我们将深入研究文本小部件，它与画布小部件一样是最多功能的Tkinter类之一。文本小部件表示具有格式化内容的多行文本区域，具有几种方法，使得可以格式化字符或行并添加特定事件绑定。
- en: Working with colors
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用颜色
- en: In previous recipes, we have set the colors of a widget using color names, such
    as white, blue, or yellow. These values are passed as strings to the `foreground`
    and `background` options, which modify the widget's text and background colors.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的示例中，我们使用颜色名称（如白色、蓝色或黄色）来设置小部件的颜色。这些值作为字符串传递给`foreground`和`background`选项，这些选项修改了小部件的文本和背景颜色。
- en: Color names are internally mapped to **RGB** values (an additive model that
    represents a color by its combination of red, green, and blue intensities), and
    this translation is based on a table that is platform-dependent. Therefore, if
    you want to consistently display the same color in different platforms, you can
    pass the RGB value to the widget options.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色名称内部映射到**RGB**值（一种通过红、绿和蓝强度的组合来表示颜色的加法模型），这种转换基于一个因平台而异的表。因此，如果要在不同平台上一致显示相同的颜色，可以将RGB值传递给小部件选项。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'The following application shows how to dynamically change the `foreground`
    and `background` options of a label that displays a fixed text:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '以下应用程序显示了如何动态更改显示固定文本的标签的`foreground`和`background`选项： '
- en: '![](images/2988a6bc-c48d-49b5-843b-b37f4a7f858a.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](images/2988a6bc-c48d-49b5-843b-b37f4a7f858a.png)'
- en: 'Colors are specified in the RGB format and are selected by the user using a
    native color picker dialog. The following screenshot shows how this dialog looks
    on Windows 10:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色以RGB格式指定，并由用户使用本机颜色选择对话框选择。以下屏幕截图显示了Windows 10上的此对话框的外观：
- en: '![](images/7be30749-7137-4489-9b0a-ed89b07827d5.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](images/7be30749-7137-4489-9b0a-ed89b07827d5.png)'
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'As usual, we will trigger the widget configuration with standard buttons—one
    for each option. The main difference with previous examples is that values can
    be directly chosen using the `askcolor` dialog from the `tkinter.colorchooser`
    module:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们将使用标准按钮触发小部件配置——每个选项一个按钮。与以前的示例的主要区别是，可以直接使用`tkinter.colorchooser`模块的`askcolor`对话框直接选择值：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you want to check out the RGB value of a selected color, it is printed on
    the console when the dialog is confirmed, or none is shown if it is closed without
    selecting a color.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要查看所选颜色的RGB值，在对话框确认时会在控制台上打印出来，如果关闭而没有选择颜色，则不会显示任何值。
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you may have noticed, both buttons use a partial function as callback. This
    is a utility from the `functools` module, which creates a new callable object
    that behaves like the original function, but with some fixed arguments. For instance,
    consider this statement:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，两个按钮都使用了部分函数作为回调。这是`functools`模块中的一个实用程序，它创建一个新的可调用对象，其行为类似于原始函数，但带有一些固定的参数。例如，考虑以下语句：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding statement performs the same action as the following statement:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语句执行与以下语句相同的操作：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We did this in order to reuse our `set_color()` method at the same time we introduce
    the `functools` module. These techniques are very useful in more complex scenarios,
    especially when you want to compose multiple functions and it is very clear that
    some arguments are already predefined.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是为了同时重用我们的`set_color()`方法和引入`functools`模块。这些技术在更复杂的场景中非常有用，特别是当您想要组合多个函数并且非常清楚地知道一些参数已经预定义时。
- en: 'A minor detail to keep in mind is that we shorthanded `foreground` and `background`
    with `fg` and `bg`, respectively. These strings are unpacked with `**` when configuring
    the widget in this statement:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要记住的一个小细节是，我们用`fg`和`bg`分别缩写了`foreground`和`background`。在这个语句中，这些字符串使用`**`进行解包，用于配置小部件：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`askcolor` returns a tuple with two items that represent the selected color—the
    first one is a tuple of integers that represent the RGB values, and the second
    one is the hexadecimal code as a string. Since the first representation cannot
    be directly passed to the widget options, we used the hexadecimal format.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`askcolor`返回一个包含两个项目的元组，表示所选颜色——第一个是表示RGB值的整数元组，第二个是十六进制代码作为字符串。由于第一个表示不能直接传递给小部件选项，我们使用了十六进制格式。'
- en: There's more...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In case you want to translate a color name to the RGB format, you can use the
    `winfo_rgb()` method on a previously created widget. Since it returns a tuple
    of integers from 0 to 65535 to represent a 16-bit RGB value, you can convert it
    to the more common *#RRGGBB* hexadecimal representation by shifting 8 bits to
    the right:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将颜色名称转换为RGB格式，可以在先前创建的小部件上使用`winfo_rgb()`方法。由于它返回一个整数元组，表示16位RGB值的整数从0到65535，您可以通过向右移动8位将其转换为更常见的*#RRGGBB*十六进制表示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, we used `{:02x}` to format each integer into two hexadecimal
    numbers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用`{:02x}`将每个整数格式化为两个十六进制数字。
- en: Setting widget fonts
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置小部件字体
- en: In Tkinter, it is possible to customize the font used in widgets that display
    text to the users, such as buttons, labels, and entries. By default, the font
    is system-specific, but you can change it using the `font` option.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Tkinter中，可以自定义用于向用户显示文本的小部件的字体，例如按钮、标签和输入框。默认情况下，字体是特定于系统的，但可以使用`font`选项进行更改。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following application allows users to dynamically change the font family
    and size of a label with static text. Try around different values to see the results
    of the font configuration:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用程序允许用户动态更改具有静态文本的标签的字体系列和大小。尝试不同的值以查看字体配置的结果：
- en: '![](images/cd7bce85-0d22-479b-9990-315236013a54.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](images/cd7bce85-0d22-479b-9990-315236013a54.png)'
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will have two widgets to modify the font configuration: a drop-down option
    with font family names and a spinbox to enter the font size:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有两个小部件来修改字体配置：一个下拉选项，其中包含字体系列名称，以及一个输入字体大小的微调框：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that we have set some default values for the Tkinter variables connected
    to each input.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已为与每个输入连接的Tkinter变量设置了一些默认值。
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `FAMILIES` tuple contains the three font families that `Tk` guarantees
    to support on all platforms: `Times` (Times New Roman), `Courier`, and `Helvetica`.
    They can be switched with the `OptionMenu` widget, which is connected to the `self.family` variable.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`FAMILIES`元组包含`Tk`保证在所有平台上支持的三种字体系列：`Times`（Times New Roman）、`Courier`和`Helvetica`。它们可以通过与`self.family`变量连接的`OptionMenu`小部件进行切换。'
- en: 'A similar approach is followed to set the font size with `Spinbox`. Both variables
    trigger the method that changes the `font` label:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的方法用于使用`Spinbox`设置字体大小。这两个变量触发了更改`font`标签的方法：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The tuple passed to the `font` option can also define one or more of the following
    font styles: bold, roman, italic, underline, and strikethrough:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`font`选项的元组还可以定义以下一个或多个字体样式：粗体、罗马体、斜体、下划线和删除线：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can retrieve the complete list of available font families for your platform
    with the `families()` method from the `tkinter.font` module. Since you need to
    instantiate the `root` window first, you can use the following script:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`tkinter.font`模块的`families()`方法检索可用字体系列的完整列表。由于您需要首先实例化`root`窗口，因此可以使用以下脚本：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tkinter will not throw any error if you use a font family that is not included
    in the list of available families, but will try to match a similar font.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的字体系列未包含在可用系列列表中，Tkinter不会抛出任何错误，而是会尝试匹配类似的字体。
- en: There's more...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `tkinter.font` module includes a `Font` class, which can be reused over
    multiple widgets. The main advantage of modifying a `font` instance is that it
    affects all the widgets that share it with the `font` option.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`tkinter.font`模块包括一个`Font`类，可以在多个小部件上重复使用。修改`font`实例的主要优势是它会影响与`font`选项共享它的所有小部件。'
- en: 'Working with the `Font` class is very similar to using font descriptors. For
    example, this snippet creates a 18-pixel `Courier` bold font:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Font`类的工作方式与使用字体描述符非常相似。例如，此代码段创建一个18像素的`Courier`粗体字体：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To retrieve or change an option value, you can use the `cget` and `configure`
    methods as usual:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索或更改选项值，您可以像往常一样使用`cget`和`configure`方法：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See also
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using the options database* recipe
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用选项数据库*配方'
- en: Using the options database
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用选项数据库
- en: Tkinter defines a concept called *options database*, a mechanism used to customize
    the appearance of the application without having to specify it for each widget.
    It allows you to decouple some widget options from the individual widget configuration,
    providing standardized defaults based on the widget hierarchy.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter定义了一个称为*选项数据库*的概念，这是一种用于自定义应用程序外观的机制，而无需为每个小部件指定它。它允许您将一些小部件选项与单个小部件配置分离开来，根据小部件层次结构提供标准化的默认值。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will build an application with several widgets that have
    different styling, which will be defined in the options database:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将构建一个具有不同样式的多个小部件的应用程序，这些样式将在选项数据库中定义：
- en: '![](images/ed5977dc-0974-4b65-8e65-d56373bfdbf7.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](images/ed5977dc-0974-4b65-8e65-d56373bfdbf7.png)'
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In our example, we will add some options to the database through the `option_add()` method,
    which is accessible from all widget classes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将通过`option_add()`方法向数据库添加一些选项，该方法可以从所有小部件类访问：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As a result, instead of configuring the font, `foreground` and `background`
    with the rest of the options, Tkinter will use the default values defined in the
    options database.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Tkinter将使用选项数据库中定义的默认值，而不是与其他选项一起配置字体、前景和背景。
- en: How it works...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let''s start by explaining each call to `option_add`. The first invocation
    adds an option that sets the `font` attribute to all the widgets—the wildcard
    represents any application name:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从解释对`option_add`的每个调用开始。第一次调用添加了一个选项，将`font`属性设置为所有小部件——通配符代表任何应用程序名称：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next call restricts the match to an element with the `header` name—the
    more specific a rule is, the highest precedence it has. This name is later specified
    when instantiating the label with `name="header"`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个调用将匹配限制为具有`header`名称的元素——规则越具体，优先级越高。稍后在使用`name="header"`实例化标签时指定此名称：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The same applies to `self.option_add("*subtitle.font", "helvetica 14 italic")`,
    so each option matches to a different named widget instance.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`self.option_add("*subtitle.font", "helvetica 14 italic")`，也是一样的，所以每个选项都匹配到不同命名的小部件实例。
- en: 'The next options use the `Button` class name instead of an instance name. This
    way, you can refer to all widgets of a given class to provide some common defaults:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个选项使用`Button`类名而不是实例名。这样，您可以引用给定类的所有小部件以提供一些公共默认值：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As we have mentioned earlier, the options database uses the widget hierarchy
    to determine the options that apply to each instance, so if we have nested containers,
    they can also be used to restrict the options that take precedence.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，选项数据库使用小部件层次结构来确定适用于每个实例的选项，因此，如果我们有嵌套的容器，它们也可以用于限制优先级选项。
- en: These configuration options are not applied to existing widgets, only to the
    ones created after modifying the options database. Therefore, we always recommend
    calling `option_add()` at the beginning of your applications.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置选项不适用于现有小部件，只适用于修改选项数据库后创建的小部件。因此，我们始终建议在应用程序开头调用`option_add()`。
- en: 'These are some examples where each one is more specific than the preceding
    one:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些示例，每个示例比前一个更具体：
- en: '`*Frame*background`: Matches the background of all the widgets within a frame'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*Frame*background`：匹配框架内所有小部件的背景'
- en: '`*Frame.background`: Matches the background of all the frames'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*Frame.background`：匹配所有框架的背景'
- en: '`*Frame.myButton.background`: Matches the background of the widget named `myButton`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*Frame.myButton.background`：匹配名为`myButton`的小部件的背景'
- en: '`*myFrame.myButton.background`: Matches the background of the widget named
    `myButton` inside the container named `myFrame`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*myFrame.myButton.background`：匹配容器名为`myFrame`内名为`myButton`的小部件的背景'
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Instead of adding the options programmatically, it is also possible to define
    them in a separate text file using the following format:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅可以通过编程方式添加选项，还可以使用以下格式在单独的文本文件中定义它们：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This file should be loaded into the application using the `option_readfile()`
    method, and replaces all the calls to `option_add()`. In our example, let''s suppose
    the file is called `my_options_file` and it is placed in the same directory as
    our script:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件应该使用`option_readfile()`方法加载到应用程序中，并替换所有对`option_add()`的调用。在我们的示例中，假设文件名为`my_options_file`，并且它放在与我们的脚本相同的目录中：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If the file does not exist or its format is invalid, Tkinter will raise `TclError`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件不存在或其格式无效，Tkinter将引发`TclError`。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Working with colors* recipe
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用颜色
- en: The *Setting widget fonts* recipe
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置小部件字体
- en: Changing the cursor icon
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改光标图标
- en: Tkinter allows you to customize the cursor icon while hovering over a widget.
    This behavior is sometimes enabled by default, like the Entry widget that displays
    an I-beam pointer.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter允许您在悬停在小部件上时自定义光标图标。这种行为有时是默认启用的，比如显示I型光标的Entry小部件。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following application shows how to display a busy cursor while it is performing
    a long-running operation, and a cursor with a question mark, typically used in
    help menus:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用程序显示了如何在执行长时间操作时显示繁忙光标，以及在帮助菜单中通常使用的带有问号的光标：
- en: '![](images/c660453b-6895-4f3e-a6ed-87a59c90693d.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](images/c660453b-6895-4f3e-a6ed-87a59c90693d.png)'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The mouse pointer icon can be changed using the `cursor` option. In our example,
    we used the `watch` value to display the native busy cursor and `question_arrow`
    to display the regular arrow with a question mark:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标指针图标可以使用`cursor`选项更改。在我们的示例中，我们使用`watch`值来显示本机繁忙光标，`question_arrow`来显示带有问号的常规箭头：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can check out a complete list of valid `cursor` values and the system-specific
    ones in the official Tcl/Tk documentation at [https://www.tcl.tk/man/tcl/TkCmd/cursors.htm](https://www.tcl.tk/man/tcl/TkCmd/cursors.htm).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方Tcl/Tk文档的[https://www.tcl.tk/man/tcl/TkCmd/cursors.htm](https://www.tcl.tk/man/tcl/TkCmd/cursors.htm)中查看有效`cursor`值和特定于系统的完整列表。
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If a widget does not specify the `cursor` option, it takes the value defined
    in the parent container. Therefore, we can easily apply it to all widgets by setting
    it at the `root` window level. This is done by invoking `set_watch_cursor()` within
    the `perform_action()` method:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个小部件没有指定`cursor`选项，它将采用父容器中定义的值。因此，我们可以通过在`root`窗口级别设置它来轻松地将其应用于所有小部件。这是通过在`perform_action()`方法中调用`set_watch_cursor()`来完成的：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The exception here is the `Help` button, which explicitly sets the cursor to `question_arrow`.
    This option can be directly set while instantiating the widget as well:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的例外是`Help`按钮，它明确将光标设置为`question_arrow`。此选项也可以在实例化小部件时直接设置：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There's more...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Note that if you click on the `Start!` button and place the mouse over the `Help`
    button before the scheduled method is invoked, the cursor will display as `help` instead
    of `watch`. This happens because if the `cursor` option of a widget is set, it
    takes precedence over the `cursor` defined in the parent container.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果在调用预定方法之前单击`Start!`按钮并将鼠标放在`Help`按钮上，光标将显示为`help`而不是`watch`。这是因为如果小部件的`cursor`选项已设置，它将优先于父容器中定义的`cursor`。
- en: 'To avoid this, we can save the current `cursor` value and change it to `watch`, and
    restore it later. The function that performs this operation can be called recursively
    in the child widget by iterating over the `winfo_children()` list:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们可以保存当前的`cursor`值并将其更改为`watch`，然后稍后恢复它。执行此操作的函数可以通过迭代`winfo_children()`列表在子小部件中递归调用：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we added the `_old_cursor` property to each widget, so
    if you follow a similar approach, keep in mind that you cannot call `restore_cursor()`
    before `set_watch_cursor()`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们为每个小部件添加了`_old_cursor`属性，因此如果您遵循类似的方法，请记住在`set_watch_cursor()`之前不能调用`restore_cursor()`。
- en: Introducing the Text widget
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Text小部件
- en: The Text widget offers an advanced functionality compared with other widget
    classes. It displays multiple lines of editable text that can be indexed by lines
    and columns. Additionally, you can refer to ranges of text using tags, which may
    define a customized appearance and behavior.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Text小部件提供了与其他小部件类相比更高级的功能。它显示可编辑文本的多行，可以按行和列进行索引。此外，您可以使用标签引用文本范围，这些标签可以定义自定义外观和行为。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following application shows basic use of the Text widget, where you can
    dynamically insert and remove text and retrieve the selected content:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用程序展示了 `Text` 小部件的基本用法，您可以动态插入和删除文本，并检索所选内容：
- en: '![](images/a753a28a-5bb3-434a-8efd-712c2e758a2e.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](images/a753a28a-5bb3-434a-8efd-712c2e758a2e.png)'
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Apart from the `Text` widget, our application contains three buttons that call
    the methods to clear the whole text content, insert the `"Hello, world"` string in
    the current cursor position, and print the current selection made with the mouse
    or the keyboard:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Text` 小部件，我们的应用程序还包含三个按钮，这些按钮调用方法来清除整个文本内容，在当前光标位置插入`"Hello, world"`字符串，并打印用鼠标或键盘进行的当前选择：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our `Text` widget is initially empty, and it has a width of 50 characters and
    a height of 10 lines. Apart from allowing users to enter any type of text, we
    will dive into the methods used by each button to have a better understanding
    of how to interact with this widget.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `Text` 小部件最初是空的，宽度为50个字符，高度为10行。除了允许用户输入任何类型的文本，我们还将深入研究每个按钮使用的方法，以更好地了解如何与这个小部件交互。
- en: The `delete(start, end)` method removes the content from the `start` index to
    the `end` index. If the second parameter is omitted, it only deletes the character
    at the `start` position.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete(start, end)` 方法从 `start` 索引到 `end` 索引删除内容。如果省略第二个参数，它只删除 `start` 位置的字符。'
- en: 'In our example, we delete all the text by calling this method from the `1.0`
    index (column 0 of the first line) to the `tk.END` index, which refers to the
    last character:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们通过从 `1.0` 索引（第一行的第0列）调用此方法到 `tk.END` 索引（指向最后一个字符）来删除所有文本：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `insert(index, text)` method inserts the given text at the `index` position.
    Here, we call it with the `INSERT` index, which corresponds to the position of
    the insertion cursor:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`insert(index, text)` 方法在`index`位置插入给定的文本。在这里，我们使用`INSERT`索引调用它，该索引对应于插入光标的位置：'
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `tag_ranges(tag)` method returns a tuple with the first and last indices
    of all the ranges with a given `tag`. We used the special `tk.SEL` tag to refer
    to the current selection. If there is no selection, this call would return an
    empty tuple. This is combined with the `get(start, end)` method, which returns
    the text in a given range:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`tag_ranges(tag)` 方法返回一个元组，其中包含给定 `tag` 的所有范围的第一个和最后一个索引。我们使用特殊的 `tk.SEL` 标签来引用当前选择。如果没有选择，这个调用会返回一个空元组。这与
    `get(start, end)` 方法结合使用，该方法返回给定范围内的文本：'
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Since the `SEL` tag corresponds to only one range, we can safely unpack it to
    call the `get` method.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `SEL` 标签只对应一个范围，我们可以安全地解包它来调用 `get` 方法。
- en: Adding tags to the Text widget
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 Text 小部件添加标记
- en: In this recipe, you will learn how to configure the behavior of a tagged range
    of characters within a `Text` widget.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，您将学习如何配置 `Text` 小部件中标记的字符范围的行为。
- en: All the concepts are the same as those that apply to regular widgets, such as
    event sequences or configuration options, which have already been covered in previous
    recipes. The main difference is that we need to work with the text indices to
    identify the tagged content, instead of using object references.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的概念都与适用于常规小部件的概念相同，比如事件序列或配置选项，这些概念在之前的示例中已经涵盖过了。主要的区别是，我们需要使用文本索引来识别标记的内容，而不是使用对象引用。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To illustrate how to use the text tags, we will create a `Text` widget that
    simulates the insertion of hyperlinks. When clicked, this link will open the selected
    URL with the default browser.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明如何使用文本标记，我们将创建一个模拟插入超链接的 `Text` 小部件。点击时，此链接将使用默认浏览器打开所选的 URL。
- en: 'For instance, if the user enters the following content, the python.org text can
    be tagged as a hyperlink:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果用户输入以下内容，`python.org` 文本可以被标记为超链接：
- en: '![](images/8a673cd4-d0d1-438b-b1d9-44ae42a5aa4e.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](images/8a673cd4-d0d1-438b-b1d9-44ae42a5aa4e.png)'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this application, we will define a tag named `"link"`, which represents
    a clickable hyperlink. This tag will be added to the current selection using a
    button, and the mouse click will trigger the event to open the link in a browser:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此应用程序，我们将定义一个名为`"link"`的标记，它表示可点击的超链接。此标记将被添加到当前选择中，鼠标点击将触发打开浏览器中的链接的事件：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, we will initialize the tag by configuring the color and underline style.
    We add event bindings to open the clicked text with a browser and to change the
    cursor appearance while placing the mouse over the tagged text:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将通过配置颜色和下划线样式来初始化标记。我们添加事件绑定来使用浏览器打开点击的文本，并在鼠标悬停在标记文本上时改变光标外观：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Within the `open_link` method, we transform the clicked position to the corresponding
    line and column using the `index` method of the `Text` class:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `open_link` 方法中，我们使用 `Text` 类的 `index` 方法将点击的位置转换为相应的行和列：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that the position corresponding to the clicked index is `"@x,y"`, but we
    moved it to the next character. We do this because `tag_prevrange` returns the
    preceding range to the given index, so it will not return the current range if
    we click on the first character.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与点击的索引对应的位置是`"@x,y"`，但我们将其移动到下一个字符。我们这样做是因为 `tag_prevrange` 返回给定索引的前一个范围，因此如果我们点击第一个字符，它将不返回当前范围。
- en: 'Finally, we will retrieve the text from the range and open it with the default
    browser using the `open` function from the `webbrowser` module:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将从范围中检索文本，并使用 `webbrowser` 模块的 `open` 函数在默认浏览器中打开它：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There's more...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Since the `webbrowser.open` function does not check whether the URL is valid,
    this application can be improved by including a basic hyperlink validation. For
    instance, you can use the `urlparse` function to verify that the URL has a network
    location:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `webbrowser.open` 函数不检查 URL 是否有效，可以通过包含基本的超链接验证来改进此应用程序。例如，您可以使用 `urlparse`
    函数来验证 URL 是否具有网络位置：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Although this solution is not intended to handle some corner cases, it might
    serve as a first approach to discarding most invalid URLs.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个解决方案并不打算处理一些特殊情况，但它可能作为丢弃大多数无效URL的第一步。
- en: In general, you can use tags to create complex text-based programs, such as
    an IDE with syntax highlighting. In fact, IDLE—bundled in the default Python implementation—is
    based on Tkinter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，您可以使用标签来创建复杂的基于文本的程序，比如带有语法高亮的IDE。事实上，IDLE——默认的Python实现中捆绑的——就是基于Tkinter的。
- en: See also
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Changing the cursor icon* recipe
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更改光标图标*食谱'
- en: The *Introducing the Text widget* recipe
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*介绍文本小部件*食谱'
