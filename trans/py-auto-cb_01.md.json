["```py\n$ python3 -m venv .venv\n```", "```py\n$ pip --version\npip 9.0.3 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)\n$ which python3\n/usr/local/bin/python3\n```", "```py\n$ source .venv/bin/activate\n```", "```py\n(.venv) $ which python\n/root_dir/.venv/bin/python\n(.venv) $ which pip\n/root_dir/.venv/bin/pip\n```", "```py\n(.venv) $ pip install --upgrade pip\n...\nSuccessfully installed pip-10.0.1\n(.venv) $ pip --version\npip 10.0.1 from /root_dir/.venv/lib/python3.6/site-packages/pip (python 3.6)\n```", "```py\n(.venv) $ deactivate \n$ which python3\n/usr/local/bin/python3\n$ pip --version\npip 9.0.3 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)\n```", "```py\n(.venv) $ deactivate\n$ rm -rf .venv\n```", "```py\n$ python3 -m venv -h\nusage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n [--upgrade] [--without-pip] [--prompt PROMPT]\n ENV_DIR [ENV_DIR ...]\nCreates virtual Python environments in one or more target directories.\npositional arguments:\n ENV_DIR A directory to create the environment in.\n\noptional arguments:\n -h, --help show this help message and exit\n --system-site-packages\n Give the virtual environment access to the system\n site-packages dir.\n --symlinks Try to use symlinks rather than copies, when symlinks\n are not the default for the platform.\n --copies Try to use copies rather than symlinks, even when\n symlinks are the default for the platform.\n --clear Delete the contents of the environment directory if it\n already exists, before environment creation.\n --upgrade Upgrade the environment directory to use this version\n of Python, assuming Python has been upgraded in-place.\n --without-pip Skips installing or upgrading pip in the virtual\n environment (pip is bootstrapped by default)\n --prompt PROMPT Provides an alternative prompt prefix for this\n environment.\nOnce an environment has been created, you may wish to activate it, for example, by\nsourcing an activate script in its bin directory.\n```", "```py\n$ pip install virtualenvwrapper\n```", "```py\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n```", "```py\n$ mkvirtualenv automation_cookbook\n...\nInstalling setuptools, pip, wheel...done.\n(automation_cookbook) $ deactivate\n$ workon automation_cookbook\n(automation_cookbook) $\n```", "```py\ndelorean==1.0.0\nrequests==2.18.4\n```", "```py\n$ pip install -r requirements.txt\n...\nSuccessfully installed babel-2.5.3 certifi-2018.4.16 chardet-3.0.4 delorean-1.0.0 humanize-0.5.1 idna-2.6 python-dateutil-2.7.2 pytz-2018.4 requests-2.18.4 six-1.11.0 tzlocal-1.5.1 urllib3-1.22\n```", "```py\n$ python\nPython 3.6.5 (default, Mar 30 2018, 06:41:53)\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import delorean\n>>> import requests\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\n$ pip install -r requirements.txt\n```", "```py\n$ pip freeze > requirements.txt\n```", "```py\nresult = template.format(*parameters)\n```", "```py\n>>> 'Put the value of the string here: {}'.format('STRING')\n\"Put the value of the string here: STRING\"\n>>> 'It can be any type ({}) and more than one ({})'.format(1.23, str)\n\"It can be any type (1.23) and more than one (<class 'str'>)\"\n>> 'Specify the order: {1}, {0}'.format('first', 'second')\n'Specify the order: second, first'\n>>> 'Or name parameters: {first}, {second}'.format(second='SECOND', first='FIRST')\n'Or name parameters: FIRST, SECOND'\n```", "```py\n# INPUT DATA\ndata = [\n    (1000, 10),\n    (2000, 17),\n    (2500, 170),\n    (2500, -170),\n]\n# Print the header for reference\nprint('REVENUE | PROFIT | PERCENT')\n\n# This template aligns and displays the data in the proper format\nTEMPLATE = '{revenue:>7,} | {profit:>+7} | {percent:>7.2%}'\n\n# Print the data rows\nfor revenue, profit in data:\n    row = TEMPLATE.format(revenue=revenue, profit=profit, percent=profit / revenue)\n    print(row)\n```", "```py\nREVENUE | PROFIT | PERCENT\n 1,000 |    +10 |   1.00%\n 2,000 |    +17 |   0.85%\n 2,500 |   +170 |   6.80%\n 2,500 |   -170 |  -6.80%\n```", "```py\n>>> param1 = 'first'\n>>> param2 = 'second'\n>>> f'Parameters {param1}:{param2}'\n'Parameters first:second'\n```", "```py\n>> value = 'VALUE'\n>>> f'This is the value, in curly brackets {{{value}}}'\n'This is the value, in curly brackets {VALUE}'\n```", "```py\n    AFTER THE CLOSE OF THE SECOND QUARTER, OUR COMPANY, CASTA\u00d1ACORP\n    HAS ACHIEVED A GROWTH IN THE REVENUE OF 7.47%. THIS IS IN LINE\n    WITH THE OBJECTIVES FOR THE YEAR. THE MAIN DRIVER OF THE SALES HAS BEEN\n    THE NEW PACKAGE DESIGNED UNDER THE SUPERVISION OF OUR MARKETING DEPARTMENT.\n    OUR EXPENSES HAS BEEN CONTAINED, INCREASING ONLY BY 0.7%, THOUGH THE BOARD\n    CONSIDERS IT NEEDS TO BE FURTHER REDUCED. THE EVALUATION IS SATISFACTORY\n    AND THE FORECAST FOR THE NEXT QUARTER IS OPTIMISTIC. THE BOARD EXPECTS\n    AN INCREASE IN PROFIT OF AT LEAST 2 MILLION DOLLARS.\n```", "```py\n>>> INPUT_TEXT = '''\n...     AFTER THE CLOSE OF THE SECOND QUARTER, OUR COMPANY, CASTA\u00d1ACORP\n...     HAS ACHIEVED A GROWTH IN THE REVENUE OF 7.47%. THIS IS IN LINE\n...\n'''\n>>> words = INPUT_TEXT.split()\n```", "```py\n>>> redacted = [''.join('X' if w.isdigit() else w for w in word) for word in words]\n```", "```py\n>>> ascii_text = [word.encode('ascii', errors='replace').decode('ascii')\n...               for word in redacted]\n```", "```py\n>>> newlines = [word + '\\n' if word.endswith('.') else word for word in ascii_text]\n>>> LINE_SIZE = 80\n>>> lines = []\n>>> line = ''\n>>> for word in newlines:\n...     if line.endswith('\\n') or len(line) + len(word) + 1 > LINE_SIZE:\n...         lines.append(line)\n...         line = ''\n...     line = line + ' ' + word\n```", "```py\n>>> lines = [line.title() for line in lines]\n>>> result = '\\n'.join(lines)\n```", "```py\n>>> print(result)\n After The Close Of The Second Quarter, Our Company, Casta?Acorp Has Achieved A\n Growth In The Revenue Of X.Xx%.\n\n This Is In Line With The Objectives For The Year.\n\n The Main Driver Of The Sales Has Been The New Package Designed Under The\n Supervision Of Our Marketing Department.\n\n Our Expenses Has Been Contained, Increasing Only By X.X%, Though The Board\n Considers It Needs To Be Further Reduced.\n\n The Evaluation Is Satisfactory And The Forecast For The Next Quarter Is\n Optimistic.\n```", "```py\n>>> 'UPPERCASE'.lower()\n'uppercase'\n```", "```py\n>>> 'One ring to rule them all, one ring to find them, One ring to bring them all and in the darkness bind them.'.replace('ring', 'necklace')\n'One necklace to rule them all, one necklace to find them, One necklace to bnecklace them all and in the darkness bind them.'\n```", "```py\n[<Timestamp in iso format>] - SALE - PRODUCT: <product id> - PRICE: $<price of the sale>\n```", "```py\n[2018-05-05T10:58:41.504054] - SALE - PRODUCT: 1345 - PRICE: $09.99\n```", "```py\n$ source .venv/bin/activate\n```", "```py\n>>> import delorean\n>>> from decimal import Decimal\n```", "```py\n>>> log = '[2018-05-05T11:07:12.267897] - SALE - PRODUCT: 1345 - PRICE: $09.99'\n```", "```py\n>>> divide_it = log.split(' - ')\n>>> timestamp_string, _, product_string, price_string = divide_it\n```", "```py\n>>> timestamp = delorean.parse(tmp_string.strip('[]'))\n```", "```py\n>>> product_id = int(product_string.split(':')[-1])\n```", "```py\n>>> price = Decimal(price_string.split('$')[-1])\n```", "```py\n>> timestamp, product_id, price\n(Delorean(datetime=datetime.datetime(2018, 5, 5, 11, 7, 12, 267897), timezone='UTC'), 1345, Decimal('9.99'))\n```", "```py\n>>> product_string.split(':')\n['PRODUCT', ' 1345']\n>>> int(' 1345')\n1345\n```", "```py\n>>> price_string.split('$')\n['PRICE: ', '09.99']\n>>> Decimal('09.99')\nDecimal('9.99')\n```", "```py\nclass PriceLog(object):\n  def __init__(self, timestamp, product_id, price):\n    self.timestamp = timestamp\n    self.product_id = product_id\n    self.price = price\n  def __repr__(self):\n    return '<PriceLog ({}, {}, {})>'.format(self.timestamp,\n                                            self.product_id,\n                                            self.price)\n  @classmethod\n  def parse(cls, text_log):\n    '''\n    Parse from a text log with the format\n    [<Timestamp>] - SALE - PRODUCT: <product id> - PRICE: $<price>\n    to a PriceLog object\n    '''\n    divide_it = text_log.split(' - ')\n    tmp_string, _, product_string, price_string = divide_it\n    timestamp = delorean.parse(tmp_string.strip('[]'))\n    product_id = int(product_string.split(':')[-1])\n    price = Decimal(price_string.split('$')[-1])\n    return cls(timestamp=timestamp, product_id=product_id, price=price)\n```", "```py\n>>> log = '[2018-05-05T12:58:59.998903] - SALE - PRODUCT: 897 - PRICE: $17.99'\n>>> PriceLog.parse(log)\n<PriceLog (Delorean(datetime=datetime.datetime(2018, 5, 5, 12, 58, 59, 998903), timezone='UTC'), 897, 17.99)>\n```", "```py\n>>> 0.1 + 0.1 + 0.1 0.30000000000000004\n```", "```py\ndelorean==1.0.0\nrequests==2.18.3\nparse==1.8.2\n```", "```py\n$ pip install -r requirements.txt\n...\nCollecting parse==1.8.2 (from -r requirements.txt (line 3))\n Using cached https://files.pythonhosted.org/packages/13/71/e0b5c968c552f75a938db18e88a4e64d97dc212907b4aca0ff71293b4c80/parse-1.8.2.tar.gz\n...\nInstalling collected packages: parse\n Running setup.py install for parse ... done\nSuccessfully installed parse-1.8.2\n```", "```py\n>>> from parse import parse\n```", "```py\n>>> LOG = '[2018-05-06T12:58:00.714611] - SALE - PRODUCT: 1345 - PRICE: $09.99'\n```", "```py\n>>> FORMAT = '[{date}] - SALE - PRODUCT: {product} - PRICE: ${price}'\n```", "```py\n>>> result = parse(FORMAT, LOG)\n>>> result\n<Result () {'date': '2018-05-06T12:58:00.714611', 'product': '1345', 'price': '09.99'}>\n>>> result['date']\n'2018-05-06T12:58:00.714611'\n>>> result['product']\n'1345'\n>>> result['price']\n'09.99'\n```", "```py\n>>> FORMAT = '[{date:ti}] - SALE - PRODUCT: {product:d} - PRICE: ${price:05.2f}'\n```", "```py\n>>> result = parse(FORMAT, LOG)\n>>> result\n<Result () {'date': datetime.datetime(2018, 5, 6, 12, 58, 0, 714611), 'product': 1345, 'price': 9.99}>\n>>> result['date']\ndatetime.datetime(2018, 5, 6, 12, 58, 0, 714611)\n>>> result['product']\n1345\n>>> result['price']\n9.99\n```", "```py\n>>> from decimal import Decimal\n>>> def price(string):\n...   return Decimal(string)\n...\n>>> FORMAT = '[{date:ti}] - SALE - PRODUCT: {product:d} - PRICE: ${price:price}'\n>>> parse(FORMAT, LOG, {'price': price})\n<Result () {'date': datetime.datetime(2018, 5, 6, 12, 58, 0, 714611), 'product': 1345, 'price': Decimal('9.99')}>\n```", "```py\nclass PriceLog(object):\n  def __init__(self, timestamp, product_id, price):\n    self.timestamp = timestamp\n    self.product_id = product_id\n    self.price = price\n  def __repr__(self):\n    return '<PriceLog ({}, {}, {})>'.format(self.timestamp,\n                                            self.product_id,\n                                            self.price)\n  @classmethod\n  def parse(cls, text_log):\n    '''\n    Parse from a text log with the format\n    [<Timestamp>] - SALE - PRODUCT: <product id> - PRICE: $<price>\n    to a PriceLog object\n    '''\n    def price(string):\n      return Decimal(string)\n    def isodate(string):\n      return delorean.parse(string)\n    FORMAT = ('[{timestamp:isodate}] - SALE - PRODUCT: {product:d} - '\n              'PRICE: ${price:price}')\n    formats = {'price': price, 'isodate': isodate}\n    result = parse.parse(FORMAT, text_log, formats)\n    return cls(timestamp=result['timestamp'],\n               product_id=result['product'],\n               price=result['price'])\n```", "```py\n>>> log = '[2018-05-06T14:58:59.051545] - SALE - PRODUCT: 827 - PRICE: $22.25'\n>>> PriceLog.parse(log)\n<PriceLog (Delorean(datetime=datetime.datetime(2018, 6, 5, 14, 58, 59, 51545), timezone='UTC'), 827, 22.25)>\n```", "```py\n>>> import re\n>>> re.search(r'LOG', 'LOGS')\n<_sre.SRE_Match object; span=(0, 3), match='LOG'>\n>>> re.search(r'LOG', 'NOT A MATCH')\n>>>\n```", "```py\n>>> import re\n```", "```py\n>>> re.search(r'LOG', 'SOME LOGS')\n<_sre.SRE_Match object; span=(5, 8), match='LOG'>\n```", "```py\n>>> re.search(r'^LOG', 'LOGS')\n<_sre.SRE_Match object; span=(0, 3), match='LOG'>\n>>> re.search(r'^LOG', 'SOME LOGS')\n>>>\n```", "```py\n>>> re.search(r'LOG$', 'SOME LOG')\n<_sre.SRE_Match object; span=(5, 8), match='LOG'>\n>>> re.search(r'LOG$', 'SOME LOGS')\n>>>\n```", "```py\n>>> STRING = 'something in the things she shows me'\n>>> match = re.search(r'thing', STRING)\n>>> STRING[:match.start()], STRING[match.start():match.end()], STRING[match.end():]\n('some', 'thing', ' in the things she shows me')\n>>> match = re.search(r'\\bthing', STRING)\n>>> STRING[:match.start()], STRING[match.start():match.end()], STRING[match.end():]\n('something in the ', 'thing', 's she shows me')\n\n```", "```py\n>>> re.search(r'[0123456789-]+', 'the phone number is 1234-567-890')\n<_sre.SRE_Match object; span=(20, 32), match='1234-567-890'>\n>>> re.search(r'[0123456789-]+', 'the phone number is 1234-567-890').group()\n'1234-567-890'\n```", "```py\n>>> re.search(r'\\S+@\\S+', 'my email is email.123@test.com').group()\n'email.123@test.com'\n```", "```py\n>>> match = re.search(r'[0123456789-]+', 'the phone number is 1234-567-890')\n>>> [int(n) for n in match.group().split('-')]\n[1234, 567, 890]\n```", "```py\n>>> import re\n```", "```py\n>>> match = re.search(r'the phone number is ([\\d-]+)', '37: the phone number is 1234-567-890')\n>>> match.group()\n'the phone number is 1234-567-890'\n>>> match.group(1)\n'1234-567-890'\n```", "```py\n>>> pattern = re.compile(r'The answer to question (\\w+) is (yes|no)', re.IGNORECASE)\n>>> pattern.search('Naturaly, the answer to question 3b is YES')\n<_sre.SRE_Match object; span=(10, 42), match='the answer to question 3b is YES'>\n>>> _.groups()\n('3b', 'YES')\n```", "```py\n>>> PATTERN = re.compile(r'([A-Z][\\w\\s]+).(TX|OR|OH|MI)')\n>>> TEXT ='the jackalopes are the team of Odessa,TX while the knights are native of Corvallis OR and the mud hens come from Toledo.OH; the whitecaps have their base in Grand Rapids,MI'\n>>> list(PATTERN.finditer(TEXT))\n[<_sre.SRE_Match object; span=(31, 40), match='Odessa,TX'>, <_sre.SRE_Match object; span=(73, 85), match='Corvallis OR'>, <_sre.SRE_Match object; span=(113, 122), match='Toledo.OH'>, <_sre.SRE_Match object; span=(157, 172), match='Grand Rapids,MI'>]\n>>> _[0].groups()\n('Odessa', 'TX')\n```", "```py\n>>> re.search(r'the phone number is ([\\d-]+)', '37: the phone number is 1234-567-890')\n<_sre.SRE_Match object; span=(4, 36), match='the phone number is 1234-567-890'>\n>>> _.group(1)\n'1234-567-890'\n>>> re.search(r'[0123456789-]+', '37: the phone number is 1234-567-890')\n<_sre.SRE_Match object; span=(0, 2), match='37'>\n>>> _.group()\n'37'\n```", "```py\n>>> re.search(r'([A-Z][\\w\\s]+).(TX|OR|OH|MI)', 'This is a test, Escanaba MI')\n<_sre.SRE_Match object; span=(16, 27), match='Escanaba MI'>\n>>> re.search(r'([A-Z][\\w\\s]+).(TX|OR|OH|MI)', 'This is a test with Escanaba MI')\n<_sre.SRE_Match object; span=(0, 31), match='This is a test with Escanaba MI'>\n```", "```py\n>>> PATTERN.search(TEXT)\n<_sre.SRE_Match object; span=(31, 40), match='Odessa,TX'>\n>>> PATTERN.findall(TEXT)\n[('Odessa', 'TX'), ('Corvallis', 'OR'), ('Toledo', 'OH')]\n```", "```py\n>>> PATTERN = re.compile(r'(?P<city>[A-Z][\\w\\s]+?).(?P<state>TX|OR|OH|MN)')\n>>> match = PATTERN.search(TEXT)\n>>> match.groupdict()\n{'city': 'Odessa', 'state': 'TX'}\n>>> match.group('city')\n'Odessa'\n>>> match.group('state')\n'TX'\n>>> match.group(1), match.group(2)\n('Odessa', 'TX')\n```", "```py\nIMPORTS\n\ndef main(main parameters):\n  DO THINGS\n\nif __name__ == '__main__':\n    DEFINE ARGUMENT PARSER\n    PARSE ARGS\n    VALIDATE OR MANIPULATE ARGS, IF NEEDED\n    main(arguments)\n```", "```py\nimport argparse\n\ndef main(number):\n    print('#' * number)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('number', type=int, help='A number')\n    args = parser.parse_args()\n\n    main(args.number)\n```", "```py\n$ python3 recipe_cli_step1.py\nusage: recipe_cli_step1.py [-h] number\nrecipe_cli_step1.py: error: the following arguments are required: number\n$ python3 recipe_cli_step1.py -h\nusage: recipe_cli_step1.py [-h] number\npositional arguments:\n number A number\noptional arguments:\n -h, --help show this help message and exit\n```", "```py\n$ python3 recipe_cli_step1.py 4\n####\n$ python3 recipe_cli_step1.py not_a_number\nusage: recipe_cli_step1.py [-h] number\nrecipe_cli_step1.py: error: argument number: invalid int value: 'not_a_number'\n```", "```py\nimport argparse\n\ndef main(character, number):\n    print(character * number)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('number', type=int, help='A number')\n    parser.add_argument('-c', type=str, help='Character to print',\n                        default='#')\n\nargs = parser.parse_args()\nmain(args.c, args.number)\n```", "```py\n$ python3 recipe_cli_step2.py -h\nusage: recipe_cli_step2.py [-h] [-c C] number\n\npositional arguments:\n number A number\n\noptional arguments:\n -h, --help show this help message and exit\n -c C Character to print\n$ python3 recipe_cli_step2.py 4\n####\n$ python3 recipe_cli_step2.py 5 -c m\nmmmmm\n```", "```py\nimport argparse\n\ndef main(character, number):\n    print(character * number)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('number', type=int, help='A number')\n    parser.add_argument('-c', type=str, help='Character to print',\n                        default='#')\n    parser.add_argument('-U', action='store_true', default=False,\n                        dest='uppercase',\n                        help='Uppercase the character')\n    args = parser.parse_args()\n\n    if args.uppercase:\n        args.c = args.c.upper()\n\n    main(args.c, args.number)\n```", "```py\n$ python3 recipe_cli_step3.py 4 -c f\nffff\n$ python3 recipe_cli_step3.py 4 -c f -U\nFFFF\n```", "```py\n parser.add_argument('-v', '--verbose', action='store_true', default=False, \n                     help='Enable verbose output')\n```"]