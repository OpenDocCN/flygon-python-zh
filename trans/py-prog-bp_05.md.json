["```py\ndef new_booking(self, user_id, film, time): \n    ... \n    self.email_service.send_confirmation(user_id, film, time) \n    ... \n```", "```py\n$ docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq \n```", "```py\n$ docker ps\n```", "```py\npip install pip-tools \n```", "```py\nbase.in \ntest.in \n```", "```py\nnameko \n```", "```py\npytest \n```", "```py\npip-compile requirements/base.in \npip-compile requirements/test.in \n```", "```py\n... \nnameko==2.8.3 \npath.py==10.5             # via nameko \npbr==3.1.1                # via mock \npyyaml==3.12              # via nameko \nredis==2.10.6 \nrequests==2.18.4          # via nameko \nsix==1.11.0               # via mock, nameko \nurllib3==1.22             # via requests \n... \n```", "```py\nnameko==2.8.3 \n```", "```py\n$ pip-sync requirements/base.txt requirements/test.txt \n```", "```py\n$ pip install -r requirements/base.txt -r requirements/test.txt \n```", "```py\nfrom nameko.rpc import rpc \n\nclass KonnichiwaService: \n\n    name = 'konnichiwa_service' \n\n    @rpc \n    def konnichiwa(self): \n        return 'Konnichiwa!' \n```", "```py\nAMQP_URI: 'pyamqp://guest:guest@localhost' \nrpc_exchange: 'nameko-rpc' \n```", "```py\n. \n\u251c\u2500\u2500 config.yaml \n\u251c\u2500\u2500 requirements \n\u2502   \u251c\u2500\u2500 base.in \n\u2502   \u251c\u2500\u2500 base.txt \n\u2502   \u251c\u2500\u2500 test.in \n\u2502   \u2514\u2500\u2500 test.txt \n\u251c\u2500\u2500 temp_messenger \n    \u2514\u2500\u2500 service.py \n```", "```py\n$ nameko run temp_messenger.service --config config.yaml \n```", "```py\nstarting services: konnichiwa_service \nConnected to amqp://guest:**@127.0.0.1:5672// \n```", "```py\n$ nameko shell \n```", "```py\n>>> n.rpc.konnichiwa_service.konnichiwa() \n'Konnichiwa!' \n```", "```py\nfrom nameko.testing.services import worker_factory \nfrom temp_messenger.service import KonnichiwaService \n\ndef test_konnichiwa(): \n    service = worker_factory(KonnichiwaService) \n    result = service.konnichiwa() \n    assert result == 'Konnichiwa!' \n```", "```py\npytest \n```", "```py\nfrom nameko.rpc import rpc, RpcProxy \nfrom nameko.web.handlers import http \n```", "```py\nclass WebServer: \n\n    name = 'web_server' \n    konnichiwa_service = RpcProxy('konnichiwa_service') \n\n    @http('GET', '/') \n    def home(self, request): \n        return self.konnichiwa_service.konnichiwa() \n```", "```py\ndef test_root_http(web_session, web_config, container_factory): \n    web_config['AMQP_URI'] = 'pyamqp://guest:guest@localhost' \n\n    web_server = container_factory(WebServer, web_config) \n    konnichiwa = container_factory(KonnichiwaService, web_config) \n    web_server.start() \n    konnichiwa.start() \n\n    result = web_session.get('/') \n\n    assert result.text == 'Konnichiwa!' \n```", "```py\n$ docker run -d -p 6379:6379 --name redis redis\n```", "```py\n$ docker ps\n```", "```py\ndocker exec -it redis /bin/bash\n```", "```py\nredis-cli \n```", "```py\n127.0.0.1:6379> SET msg1 hello\nOK\n```", "```py\n127.0.0.1:6379> GET msg1\n\"hello\"\n```", "```py\n127.0.0.1:6379> SET msg2 \"hi there\"\nOK\n127.0.0.1:6379> GET msg2\n\"hi there\"\n```", "```py\n127.0.0.1:6379> KEYS *\n1) \"msg2\"\n2) \"msg1\"\n```", "```py\n127.0.0.1:6379> SET msg3 \"this message will die soon\" EX 15\nOK\n```", "```py\n127.0.0.1:6379> TTL msg3\n(integer) 10\n```", "```py\n127.0.0.1:6379> PTTL msg3\n(integer) 6080\n```", "```py\n127.0.0.1:6379> GET msg3\n\"this message will die soon\"\n```", "```py\n127.0.0.1:6379> GET msg3\n(nil)\n```", "```py\nfrom redis import StrictRedis \n\nclass RedisClient: \n\n    def __init__(self, url): \n        self.redis = StrictRedis.from_url( \n            url, decode_responses=True \n        ) \n```", "```py\ndef get_message(self, message_id): \n    message = self.redis.get(message_id) \n\n    if message is None: \n        raise RedisError( \n            'Message not found: {}'.format(message_id) \n        ) \n\n    return message \n```", "```py\nclass RedisError(Exception): \n    pass \n```", "```py\nfrom nameko.extensions import DependencyProvider \n```", "```py\nclass MessageStore(DependencyProvider): \n\n    def setup(self): \n        redis_url = self.container.config['REDIS_URL'] \n        self.client = RedisClient(redis_url) \n\n    def stop(self): \n        del self.client \n\n    def get_dependency(self, worker_ctx): \n        return self.client \n```", "```py\nfrom .dependencies.redis import MessageStore \n```", "```py\nclass MessageService: \n\n    name = 'message_service' \n    message_store = MessageStore() \n\n    @rpc \n    def get_message(self, message_id): \n        return self.message_store.get_message(message_id) \n```", "```py\n127.0.0.1:6379> set msg1 \"this is a test\"\nOK\n```", "```py\n$ nameko run temp_messenger.service --config config.yaml\n```", "```py\n>>> n.rpc.message_service.get_message('msg1') \n'this is a test' \n```", "```py\n    >>> n.rpc.message_service.get_message('i_dont_exist')\n    Traceback (most recent call last):\n      File \"<console>\", line 1, in <module>\n      File \"/Users/marcuspen/.virtualenvs/temp_messenger/lib/python3.6/site-packages/nameko/rpc.py\", line 393, in __call__\n        return reply.result()\n      File \"/Users/marcuspen/.virtualenvs/temp_messenger/lib/python3.6/site-packages/nameko/rpc.py\", line 379, in result\n        raise deserialize(error)\n    nameko.exceptions.RemoteError: RedisError Message not found: i_dont_exist\n```", "```py\nfrom uuid import uuid4 \n```", "```py\n    def save_message(self, message): \n        message_id = uuid4().hex \n        self.redis.set(message_id, message) \n\n        return message_id \n```", "```py\n    @rpc \n    def save_message(self, message): \n        message_id = self.message_store.save_message(message) \n        return message_id \n```", "```py\n>>> n.rpc.message_service.save_message('Nameko is awesome!')\n    'd18e3d8226cd458db2731af8b3b000d9'\n```", "```py\n>>>n.rpc.message_service.get_message\n   ('d18e3d8226cd458db2731af8b3b000d9')\n    'Nameko is awesome!'\n```", "```py\ndef get_all_messages(self): \n    return [ \n        { \n            'id': message_id, \n            'message': self.redis.get(message_id) \n        } \n        for message_id in self.redis.keys() \n    ] \n```", "```py\ndef get_all_messages(self): \n    message_ids = self.redis.keys() \n    messages = [] \n\n    for message_id in message_ids: \n        message = self.redis.get(message_id) \n        messages.append( \n            {'id': message_id, 'message': message} \n        ) \n\n    return messages \n```", "```py\n@rpc \ndef get_all_messages(self): \n    messages = self.message_store.get_all_messages() \n    return messages \n```", "```py\n>>> n.rpc.message_service.save_message('Nameko is awesome!')\n'bf87d4b3fefc49f39b7dd50e6d693ae8'\n>>> n.rpc.message_service.save_message('Python is cool!')\n'd996274c503b4b57ad5ee201fbcca1bd'\n>>> n.rpc.message_service.save_message('To the foo bar!')\n'69f99e5863604eedaf39cd45bfe8ef99'\n>>> n.rpc.message_service.get_all_messages()\n[{'id': 'd996274...', 'message': 'Python is cool!'},\n{'id': 'bf87d4b...', 'message': 'Nameko is awesome!'},\n{'id': '69f99e5...', 'message': 'To the foo bar!'}]\n```", "```py\nfrom jinja2 import Environment, PackageLoader, select_autoescape \n\nclass TemplateRenderer: \n\n    def __init__(self, package_name, template_dir): \n        self.template_env = Environment( \n            loader=PackageLoader(package_name, template_dir), \n            autoescape=select_autoescape(['html']) \n        ) \n\n    def render_home(self, messages): \n        template = self.template_env.get_template('home.html') \n        return template.render(messages=messages) \n```", "```py\n<!DOCTYPE html> \n\n<body> \n    {% if messages %} \n        {% for message in messages %} \n            <p>{{ message['message'] }}</p> \n        {% endfor %} \n    {% else %} \n        <p>No messages!</p> \n    {% endif %} \n</body> \n```", "```py\nfrom nameko.extensions import DependencyProvider \n```", "```py\nclass Jinja2(DependencyProvider): \n\n    def setup(self): \n        self.template_renderer = TemplateRenderer( \n            'temp_messenger', 'templates' \n        ) \n\n    def get_dependency(self, worker_ctx): \n        return self.template_renderer \n```", "```py\nfrom .dependencies.jinja2 import Jinja2 \n```", "```py\nclass WebServer: \n\n    name = 'web_server' \n    message_service = RpcProxy('message_service') \n    templates = Jinja2() \n\n    @http('GET', '/') \n    def home(self, request): \n        messages = self.message_service.get_all_messages() \n        rendered_template = self.templates.render_home(messages) \n\n        return rendered_template \n```", "```py\nfrom werkzeug.wrappers import Response \n```", "```py\ndef create_html_response(content): \n    headers = {'Content-Type': 'text/html'} \n    return Response(content, status=200, headers=headers) \n```", "```py\n@http('GET', '/') \ndef home(self, request): \n    messages = self.message_service.get_all_messages() \n    rendered_template = self.templates.render_home(messages) \n    html_response = create_html_response(rendered_template) \n\n    return html_response \n```", "```py\nimport json \n```", "```py\n@http('POST', '/messages') \ndef post_message(self, request): \n    data_as_text = request.get_data(as_text=True) \n\n    try: \n        data = json.loads(data_as_text) \n    except json.JSONDecodeError: \n        return 400, 'JSON payload expected' \n\n    try: \n        message = data['message'] \n    except KeyError: \n        return 400, 'No message given' \n\n    self.message_service.save_message(message) \n\n    return 204, '' \n```", "```py\n$ curl -d '{\"message\": \"foo\"}' -H \"Content-Type: application/json\" -X POST http://localhost:8000/messages\n```", "```py\n<head> \n  <script src=\"https://code.jquery.com/jquery-latest.js\"></script> \n</head> \n```", "```py\n<form action=\"/messages\" id=\"postMessage\"> \n  <input type=\"text\" name=\"message\" placeholder=\"Post message\"> \n  <input type=\"submit\" value=\"Post\"> \n</form> \n```", "```py\n<script> \n\n$( \"#postMessage\" ).submit(function(event) { # \u2460 \n  event.preventDefault(); # \u2461 \n\n  var $form = $(this), \n    message = $form.find( \"input[name='message']\" ).val(), \n    url = $form.attr(\"action\"); # \u2462 \n\n  $.ajax({ # \u2463 \n    type: 'POST', \n    url: url, \n    data: JSON.stringify({message: message}), # \u2464 \n    contentType: \"application/json\", # \u2465 \n    dataType: 'json', # \u2466 \n    success: function() {location.reload();} # \u2467 \n  }); \n}); \n</script> \n```", "```py\ndef save_message(self, message): \n    message_id = uuid4().hex \n    self.redis.set(message_id, message, ex=10) \n\n    return message_id \n```", "```py\ndef get_all_messages(self): \n    return [ \n        { \n            'id': message_id, \n            'message': self.redis.get(message_id), \n            'expires_in': self.redis.pttl(message_id), \n        } \n        for message_id in self.redis.keys() \n    ] \n```", "```py\nfrom operator import itemgetter \n```", "```py\ndef sort_messages_by_expiry(messages, reverse=False): \n    return sorted( \n        messages, \n        key=itemgetter('expires_in'), \n        reverse=reverse \n    ) \n```", "```py\n@rpc \ndef get_all_messages(self): \n    messages = self.message_store.get_all_messages() \n    sorted_messages = sort_messages_by_expiry(messages) \n    return sorted_messages \n```", "```py\nsorted_messages = sort_messages_by_expiry(messages, reverse=True) \n```", "```py\ndef create_json_response(content): \n    headers = {'Content-Type': 'application/json'} \n    json_data = json.dumps(content) \n    return Response(json_data, status=200, headers=headers) \n```", "```py\n@http('GET', '/messages') \ndef get_messages(self, request): \n    messages = self.message_service.get_all_messages() \n    return create_json_response(messages) \n```", "```py\n<div id=\"messageContainer\"></div> \n```", "```py\nfunction messagePoll() { \n  $.ajax({ \n    type: \"GET\", # \u2460 \n    url: \"/messages\", \n    dataType: \"json\", \n    success: function(data) { # \u2461 \n      updateMessages(data); \n    }, \n    timeout: 500, # \u2462 \n    complete: setTimeout(messagePoll, 1000), # \u2463 \n  }) \n} \n```", "```py\nfunction updateMessages(messages) { \n  var $messageContainer = $('#messageContainer'); # \u2460 \n  var messageList = []; # \u2461 \n  var emptyMessages = '<p>No messages!</p>'; # \u2462 \n\n  if (messages.length === 0) { # \u2463 \n    $messageContainer.html(emptyMessages); # \n  } else { \n    $.each(messages, function(index, value) { \n      var message = $(value.message).text() || value.message; \n      messageList.push('<p>' + message + '</p>'); # \n    }); \n    $messageContainer.html(messageList); # \u2464 \n  } \n} \n```"]