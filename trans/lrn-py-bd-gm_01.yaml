- en: Getting to Know Python - Setting Up Python and the Editor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Python-设置Python和编辑器
- en: Python is notorious in the data and analytics industry, but it is still a hidden
    artifact in the gaming industry. While making games using other gaming engines
    such as Unity and Godot, we tend to combine our design logic with core programming
    principles. But in the case of Python, it is mostly the analysis of problems and
    programming paradigms that coalesce together. A program flow or structure is a
    sequence that is dovetailed with its programming paradigms. A programming paradigm,
    as its name suggests, facilitates the programmer to write a solution to a problem
    in the most economical and efficient way possible. For instance, writing a program
    in two lines of code instead of ten lines is an outcome of using a programming
    paradigm. The purpose of program flow analysis or structural analysis is to uncover
    information about procedures that need to be invoked for various design patterns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python在数据和分析行业中臭名昭著，但在游戏行业中仍然是一个隐藏的工具。在使用其他游戏引擎（如Unity和Godot）制作游戏时，我们倾向于将设计逻辑与核心编程原则相结合。但在Python的情况下，主要是问题分析和编程范式的融合。程序流程或结构是一个与其编程范式交织在一起的序列。编程范式正如其名称所示，它便于程序员以最经济和高效的方式编写问题的解决方案。例如，用两行代码而不是十行代码编写程序是使用编程范式的结果。程序流程分析或结构分析的目的是揭示有关需要调用各种设计模式的程序的信息。
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Introducing programming with Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python介绍编程
- en: Installing Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Python
- en: The building blocks of Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的构建模块
- en: Installing the PyCharm IDE
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装PyCharm IDE
- en: Programming code without *Hello World*
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写*Hello World*之外的编程代码
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following is a list of the minimum hardware requirements you''ll need for
    this book:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您在本书中需要的最低硬件要求的列表：
- en: A working PC with a minimum of 4GB RAM
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有至少4GB RAM的工作PC
- en: An external mouse adapter (if you are using a laptop)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部鼠标适配器（如果您使用笔记本电脑）
- en: A minimum of 5GB of hard disk space to download an external IDE and Python packages
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要5GB的硬盘空间来下载外部IDE和Python软件包
- en: 'You will need the following software to get the most out of this book (we will
    download all of them in this chapter):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要以下软件才能充分利用本书（我们将在本章中下载所有这些软件）：
- en: Various open source Python packages like pygame, pymunk and pyopenGL
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种开源Python软件包，如pygame，pymunk和pyopenGL
- en: The Pycharm IDE (community version), which you can find at [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pycharm IDE（社区版），您可以在[https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)找到
- en: Various open source packages, such as `pygame` and `pycharm`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种开源软件包，如`pygame`和`pycharm`
- en: The code for this chapter, which can be found in this book's GitHub repository: [https://github.com/PacktPublishing/Learning-Python-by-building-games/tree/master/Chapter01](https://github.com/PacktPublishing/Learning-Python-by-building-games/tree/master/Chapter01)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的GitHub存储库中找到：[https://github.com/PacktPublishing/Learning-Python-by-building-games/tree/master/Chapter01](https://github.com/PacktPublishing/Learning-Python-by-building-games/tree/master/Chapter01)
- en: 'Check out the following video to see the code in action:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的运行情况：
- en: '[http://bit.ly/2o2pVgA](http://bit.ly/2o2pVgA)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2o2pVgA](http://bit.ly/2o2pVgA)'
- en: Introducing programming with Python
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python介绍编程
- en: 'The old adage of programming states the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 编程的古老格言如下：
- en: '"Coding is basically the computer language that''s used to develop apps, websites,
    and software. Without it, we''d have none of the major technology we''ve come
    to rely on such as Facebook, our smartphones, the browser we choose to view our
    favorite blogs on, or even the blogs themselves. It all runs on code."'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “编码基本上是用于开发应用程序、网站和软件的计算机语言。没有它，我们将无法使用我们所依赖的主要技术，如Facebook、智能手机、我们选择查看最喜欢的博客的浏览器，甚至博客本身。这一切都运行在代码上。”
- en: We couldn't agree more with this. Computer programming can be both a rewarding
    and tedious activity. Sometimes, we might be in a situation where we can't find
    the tweaks of the exception (unexpected behavior of the program) that we caught
    in the program and, later, we find that the error was because of wrong modules
    or bad practices. Writing programs is similar to *writing essays*; first, we have
    to learn about the patterns of an essay; then, we analyze the topics and write
    them; and finally, we check the grammar.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对此深表认同。计算机编程既可以是一项有益的工作，也可能是一项乏味的活动。有时，我们可能会遇到无法找到程序中捕获的异常（程序的意外行为）的调整的情况，后来我们发现错误是因为错误的模块或不良的实践。编写程序类似于*写作文章*；首先，我们必须了解文章的模式；然后，我们分析主题并写下来；最后，我们检查语法。
- en: Similar to the process of writing an essay, when writing code, we have to analyze
    the patterns or grammar of the programming language, then we analyze the problems,
    and then we write a program. Finally, we check its grammar, which we normally
    do with alpha and beta testing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与写作文章的过程类似，编写代码时，我们必须分析编程语言的模式或语法，然后分析问题，然后编写程序。最后，我们检查它的语法，通常是通过alpha和beta测试来完成的。
- en: This book will try to turn you into a person who can analyze a problem, build
    noble logic, and come up with an idea that will solve that problem. We won't make
    this journey monotonous; instead, we will learn about Python syntax by building
    games in each chapter. By the end of this book, you will be thinking like a programmer—maybe
    not a professional one, but at least you will have developed the skill to make
    your own programs using Python.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将尝试让您成为一个可以分析问题、建立高贵逻辑并提出解决问题的想法的人。我们不会让这段旅程变得单调；相反，我们将通过在每一章节中构建游戏来学习Python语法。到本书结束时，您将会像一个程序员一样思考——也许不是专业的程序员，但至少您将已经掌握了使用Python制作自己程序的技能。
- en: 'There are two crucial things you''ll learn about in this book:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将学习到两个关键的内容：
- en: Firstly, you will learn about the vocabulary and grammar of Python. I don't
    mean learning about Python theory or history. First, we have to learn about Python
    syntax; then, we will see how we can create statements and expressions with that
    syntax. This step includes collecting data and information and storing it in an
    appropriate data structure.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，您将学习Python的词汇和语法。我不是指学习Python的理论或历史。首先，我们必须学习Python的语法；然后，我们将看看如何使用该语法创建语句和表达式。这一步包括收集数据和信息，并将其存储在适当的数据结构中。
- en: Then, you will learn about the procedures that come with the idea of calling
    the appropriate methods. This process includes using the data that was collected
    in the first step to get the intended output. This second step is not specific
    to any programming language. This is going to teach us about various programming
    prototypes rather than just Python.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，您将学习与调用适当方法的想法相对应的程序。这个过程包括使用在第一步收集的数据来获得预期的输出。这第二步不是特定于任何编程语言。这将教我们各种编程原型，而不仅仅是Python。
- en: Learning any other programming languages after learning about Python is a lot
    easier. The only difference you will observe in other programming language is
    syntax complexities and program debugging tools. In this book, we will try to
    learn about as many programming paradigms as possible so that we can start a programming
    career.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了Python之后，学习任何其他编程语言都会更容易。您将观察到的唯一区别是其他编程语言的语法复杂性和程序调试工具。在本书中，我们将尽可能多地学习各种编程范式，以便我们可以开始编程生涯。
- en: Are you still unsure about Python?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您对Python还有疑问吗？
- en: 'Let''s take a look at some of the products that have been made with Python:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下一些使用Python制作的产品：
- en: No list starts without mentioning Google. They use it in their web search system
    and page rank algorithm.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有提到谷歌的清单是不完整的。他们在他们的网络搜索系统和页面排名算法中使用它。
- en: Disney uses Python for its creative processes.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迪士尼使用Python进行创意过程。
- en: BitTorrent and DropBox are written in Python.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BitTorrent和DropBox都是用Python编写的。
- en: Mozilla Firefox uses it to explore content and is a major contributor to Python
    packages.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla Firefox用它来探索内容，并且是Python软件包的主要贡献者。
- en: NASA uses it for scientific purposes.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NASA用它进行科学研究。
- en: The list goes on and on!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 清单还在继续！
- en: Let's take a look at how code procedures work in simple terms.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简单地看一下代码程序是如何工作的。
- en: Explaining code procedures
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释代码程序
- en: To explain how code procedures work in simple terms, let's take the example
    of making an omelet. You start by learning the basics from a recipe book. First,
    you gather some utensils and make sure they are clean and dry. After that, you
    beat the eggs, salt, and pepper until it's all blended. Then, you add butter to
    your non-stick pan, add your egg mixture, and cook it or even tilt the pan to
    check whether every part of the omelet is cooked or not.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单地解释代码程序是如何工作的，让我们以制作煎蛋卷为例。您首先从食谱书中学习基础知识。首先，您收集一些器具，并确保它们干净干燥。之后，您打蛋，加盐和胡椒，直到混合均匀。然后，您在不粘锅中加入黄油，加入蛋液，煮熟，甚至可以倾斜锅来检查煎蛋卷的每个部分是否煮熟。
- en: In terms of programming, first, we talk about collecting our tools, such as
    the utensils and eggs, which relates to collecting data that will be manipulated
    by the instructions we write in our programs. After that, we talk about cooking
    the eggs, which is your methods. We normally manipulate data in methods to get
    output in a form that is meaningful to the user. Here, the output is an omelet.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程方面，首先，我们谈论收集我们的工具，比如器具和鸡蛋，这涉及收集将被我们程序中的指令操纵的数据。之后，我们谈论煮鸡蛋，这就是你的方法。我们通常在方法中操纵数据，以便以对用户有意义的形式得到输出。这里，输出是一个煎蛋卷。
- en: Giving instructions to a program is the job of a programmer. But let's distinguish
    between a client and a programmer. If you are using a product where you give instructions
    to the computer to perform tasks for you, then you are a client, but if you design
    instructions that will complete tasks for a product you've created for everyone,
    this indicates that you are a programmer. It is only a matter of *for one* or
    *for everyone* to determine whether a user is a client or programmer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 给程序提供指令是程序员的工作。但让我们区分客户和程序员。如果您使用的产品是让您向计算机发出指令来为您执行任务，那么您是客户，但如果您设计了为您为所有人创建的产品完成任务的指令，这表明您是程序员。只是“为一个人”还是“为所有人”决定了用户是客户还是程序员。
- en: Some of the instructions we will use in our Windows Command Prompt or Linux
    Terminal will be for opening the directory of our machine. There are two ways
    of performing this action. You can either do it using a GUI, or you can use the
    Terminal or command prompt. If you type in the `dir` command in the respective
    field, you are now telling the computer to display the directories in that location.
    The same thing can be done in any programming language. In Python, we have modules
    to do this for us. We have to import that module before we can use it. Python
    provides a lot of modules and libraries to perform such operations. In a procedural
    programming language such as C, which allows low-level interaction with memory,
    this makes it harder to code, but with Python, it is easier to use the standard
    library, which makes the code shorter and readable. David Beazley, the author
    of *How to Think Like a Computer Scientist Learning Python*, was once asked, *why
    Python?* He simply replied, *Python is simply a lot of fun and more productive*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Windows命令提示符或Linux终端中使用的一些指令是用来打开我们机器的目录。有两种执行此操作的方法。您可以使用图形用户界面，也可以使用终端或命令提示符。如果您在相应的字段中键入`dir`命令，那么您现在正在告诉计算机在该位置显示目录。在任何编程语言中都可以做同样的事情。在Python中，我们有模块来为我们做这个。我们必须在使用之前导入该模块。Python提供了许多模块和库来执行此类操作。在诸如C之类的过程式编程语言中，它允许与内存进行低级交互，这使得编码更加困难，但使用Python可以更容易地使用标准库，这使得代码更短更易读。《如何像计算机科学家一样思考学习Python》的作者大卫·比兹利曾经被问到，“为什么选择Python？”他简单地回答说，“Python只是更有趣和更高效”。
- en: Conversing with Python
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Python交谈
- en: Python has been around for many years (nearly 29), and regardless of all of
    the upgrades it has had to go through, it's still standing as the easiest language
    for beginners to learn. The primary reason for this is that it can be correlated
    to the English vocabulary. Similar to how we make statements with English words
    and vocabulary, we can write statements and operations with Python syntax that
    commands can interpret, execute, and provide us with a result. We can make a sentence
    such as *go there* as a command to reflect the position of something with conditionals
    and flow controls. Learning the syntax of Python is pretty easy; the actual task
    is to use all of the resources provided by Python to build brand new logic to
    solve intricate problems. Just learning the basic syntax and writing a couple
    of programs is never enough; you have to practice enough so that you can come
    up with revolutionary ideas to solve real-world problems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python已经存在了很多年（将近29年），尽管它经历了许多升级，但它仍然是最容易让初学者学习的语言。这主要是因为它可以与英语词汇相关联。类似于我们用英语单词和词汇做陈述，我们可以用Python语法编写陈述和操作，命令可以解释、执行并给我们提供结果。我们可以用条件和流控制来反映某物的位置，比如*去那里*作为一个命令。学习Python的语法非常容易；真正的任务是利用Python提供的所有资源来构建全新的逻辑，以解决复杂的问题。仅仅学习基本的语法和写几个程序是不够的；你必须练习足够多，以便能够提出解决现实问题的革命性想法。
- en: 'We have a lot of vocabulary in the English dictionary. Unlike the English dictionary,
    Python only contains a few words in its container, which we normally call reserved
    words. There are 33 of them in total. They are instructions that tell the Python
    interpreter to perform specific operations. Modifying them isn''t possible—they
    can only be used to perform specific tasks. In addition, when we call a print
    statement and write some text in it, it is expected that it prints out that message.
    If you want to make a program that takes input from the user, calling the print
    statement is useless; the input statement has to be called to achieve that. The
    following table shows our 33 reserved words:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在英语词典中有很多词汇。与英语词典不同，Python只包含少量单词，我们通常称之为保留字。总共有33个。它们是指示Python解释器执行特定操作的指令。修改它们是不可能的——它们只能用于执行特定任务。此外，当我们调用打印语句并在其中写一些文本时，预期它会打印出该消息。如果你想制作一个从用户那里获取输入的程序，调用打印语句是无用的；必须调用输入语句才能实现这一点。以下表格显示了我们的33个保留字：
- en: '| `False` | `class` | `finally` | `is` | `return` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `False` | `class` | `finally` | `is` | `return` |'
- en: '| `None` | `continue` | `for` | `lambda` | `try` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `None` | `continue` | `for` | `lambda` | `try` |'
- en: '| `True` | `def` | `from` | `nonlocal` | `while` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `True` | `def` | `from` | `nonlocal` | `while` |'
- en: '| `and` | `del` | `global` | `not` | `with` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `and` | `del` | `global` | `not` | `with` |'
- en: '| `as` | `elif` | `if` | `or` | `yield` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `as` | `elif` | `if` | `or` | `yield` |'
- en: '| `assert` | `else` | `import` | `pass` |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `assert` | `else` | `import` | `pass` |  |'
- en: '| `break` | `except` | `in` | `raise` |  |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `break` | `except` | `in` | `raise` |  |'
- en: Each of the preceding words can be found in our English dictionary. In addition,
    if we search for the word `return` in the dictionary, it simply gives us the verb
    meaning of coming or going back to the original place. The same semantics are
    used in Python; when you use the return statement with functions, then you are
    pulling out something from the function. In the upcoming chapters, we will see
    all of these keywords in action.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单词都可以在我们的英语词典中找到。此外，如果我们在词典中搜索单词`return`，它只会给我们返回原始位置的动词含义。Python中也使用相同的语义；当你在函数中使用return语句时，你是在从函数中取出一些东西。在接下来的章节中，我们将看到所有这些关键字的用法。
- en: Now that we have started to learn how to converse in Python by examining its
    keywords, we will install Python. Gear yourself up and open your machine for some
    fun.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开始学习如何通过检查其关键字来使用Python进行对话，我们将安装Python。做好准备，打开你的机器，开始一些有趣的事情。
- en: Installing Python
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Python
- en: In this section, we will look at installing Python on Windows and macOS.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何在Windows和macOS上安装Python。
- en: For the Windows platform
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于Windows平台
- en: 'Python doesn''t come pre-installed on Windows. We have to download it manually
    from its official website and then install it. Let''s look at how to do this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Python不会预装在Windows上。我们必须从官方网站手动下载并安装它。让我们看看如何做到这一点：
- en: First of all, open your favorite browser and open the following URL: [https://www.Python.org/](https://www.python.org/).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开你喜欢的浏览器，打开以下网址：[https://www.Python.org/](https://www.python.org/)。
- en: 'You will be directed to the page that''s shown in the following screenshot. Once
    you have been redirected to Python''s official website, you will see three sections: Download,
    Docs, and Jobs. Click on the Download section at the bottom of the page:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被引导到下图所示的页面。一旦你被重定向到Python的官方网站，你会看到三个部分：下载、文档和工作。点击页面底部的下载部分：
- en: '![](Images/418d7334-70bb-4486-a8ec-a9fb501b7e51.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/418d7334-70bb-4486-a8ec-a9fb501b7e51.png)'
- en: 'You will see a list of files, as shown in the following screenshot. Pick the
    file that''s appropriate for your platform. We''re looking at the installation
    for Windows in this section, so we will click on the Windows executable link.
    This is highlighted in the following screenshot:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个文件列表，如下截图所示。选择适合你平台的文件。在本节中，我们将看一下Windows的安装，所以我们会点击Windows可执行文件链接。如下截图所示：
- en: '![](Images/a9ed1edb-d919-4d0c-85cc-b1777249bac6.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a9ed1edb-d919-4d0c-85cc-b1777249bac6.png)'
- en: 'After clicking on that, you will get a file that needs to be downloaded. After
    opening that downloaded file, you will get the installer, as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击后，你将得到一个需要下载的文件。打开下载的文件后，你将得到安装程序，如下所示：
- en: '![](Images/32dc46f2-a12d-4779-97d3-0836ea61f2d2.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/32dc46f2-a12d-4779-97d3-0836ea61f2d2.png)'
- en: 'In the installer, make sure you check the Add Python to PATH box. This will
    put the Python library files in our environment variables so that we can execute
    our Python programs. Afterward, you will get a message about its successful installation:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装程序中，确保您选中“将Python添加到PATH”框。这将在我们的环境变量中放置Python库文件，以便我们可以执行我们的Python程序。之后，您将收到有关其成功安装的消息：
- en: '![](Images/cd48caf9-57f4-4522-8a64-2781194055fa.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cd48caf9-57f4-4522-8a64-2781194055fa.png)'
- en: 'Press the Windows key + *R* to open Run and type `cmd` in the Run tab to open
    your Windows Command Prompt. Then, type `Python` in the command shell:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下Windows键+*R*打开运行，然后在运行选项卡中键入`cmd`打开Windows命令提示符。然后，在命令shell中键入`Python`：
- en: '![](Images/1c6076a2-5cd9-4d90-858d-cb9f9d069092.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1c6076a2-5cd9-4d90-858d-cb9f9d069092.png)'
- en: If you get the Python version that's displayed in the preceding screenshot,
    then Python has been successfully installed on your machine. Congratulations!
    Now, you can get your hands dirty by writing your first program with Python.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您得到前面截图中显示的Python版本，那么Python已成功安装在您的计算机上。恭喜！现在，您可以通过使用Python编写您的第一个程序来动手实践。
- en: 'If you get an error saying **Python is not recognized as an internal or external
    command**, you have to explicitly add Python to the path environment variable.
    Follow these steps to do so:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误提示**Python is not recognized as an internal or external command**，则必须显式将Python添加到路径环境变量中。按照以下步骤执行：
- en: Open the Control Panel, navigate to System and Security, and then go to System
    to view the basic information about your system.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制面板，导航到“系统和安全”，然后转到“系统”以查看有关您系统的基本信息。
- en: Open your Advanced system settings and then Environment Variables....
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开高级系统设置，然后选择“环境变量...”。
- en: In the Variable section, search for Path. Select the Path variable and press
    the Edit... tab.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“变量”部分，搜索“路径”。选择“路径”变量，然后按“编辑...”选项卡。
- en: Click New in the Edit Environment Variable tab.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“编辑环境变量”选项卡中单击“新建”。
- en: Add this path so that it's pointing to your Python installation directory, that
    is, C:\Users\admin\AppData\Local\Programs\Python\Python37\.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加此路径，使其指向您的Python安装目录，即C:\Users\admin\AppData\Local\Programs\Python\Python37\。
- en: 'Click on the OK button to save these changes:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”按钮以保存这些更改：
- en: '![](Images/7b357caf-b0c1-43a3-8edd-8975e0497710.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7b357caf-b0c1-43a3-8edd-8975e0497710.png)'
- en: Now, we have successfully installed Python for Windows. If you are using a Mac,
    the next section will help you to access Python too.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已成功在Windows上安装了Python。如果您使用的是Mac，下一节将帮助您也访问Python。
- en: For the Mac platform
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于Mac平台
- en: 'Python comes pre-installed with Mac OS X. To check the version of Python you
    have installed, you should open your command line and type `Python --version`.
    If you get a version number of 3.5 or newer, you don''t need to go through the
    installation process, but if you have version 2.7, you should follow these instructions
    to download the latest available version:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Python在Mac OS X上预先安装。要检查您安装的Python版本，您应该打开命令行并输入`Python --version`。如果您得到3.5或更新的版本号，您就不需要进行安装过程，但如果您有2.7版本，您应该按照以下说明下载最新可用版本：
- en: 'Open your browser and type in [https://www.Python.org/downloads/](https://www.python.org/downloads/).
    You will be sent to the following page:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，输入[https://www.Python.org/downloads/](https://www.python.org/downloads/)。您将被发送到以下页面：
- en: '![](Images/663aa19c-0e4d-47ca-87f9-a0688af61e29.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/663aa19c-0e4d-47ca-87f9-a0688af61e29.jpg)'
- en: 'Click on the macOS 64-bit/32-bit installer. You will be provided with a `.pkg`
    file. Download it. Then, navigate to that installed directory and click on that
    installer. You will see the following tab. Press Continue to initiate the installer:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击macOS 64位/32位安装程序。您将获得一个`.pkg`文件。下载它。然后，导航到已安装的目录并单击该安装程序。您将看到以下选项卡。按“继续”以启动安装程序：
- en: '![](Images/60d48855-ca1a-4a01-aca4-2655797228b4.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/60d48855-ca1a-4a01-aca4-2655797228b4.jpg)'
- en: Whenever you download Python, a bundle of packages will be installed on your
    computer. We can't use those packages directly, so we should call them individually
    for each independent task. To write programs, we need an environment where we
    can call Python so that it can complete tasks for us. In the next section, we
    will explore the user-friendly environment provided by Python where we can write
    our own programs and run them to view their output.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您下载Python时，一堆软件包将安装在您的计算机上。我们不能直接使用这些软件包，所以我们应该为每个独立的任务单独调用它们。要编写程序，我们需要一个环境，我们可以在其中调用Python，以便它可以为我们完成任务。在下一节中，我们将探索Python提供的用户友好环境，我们可以在其中编写自己的程序并运行它们以查看它们的输出。
- en: 'Now that you have installed Python version 3.7 on Mac OS X, you can open your
    Terminal and check the version of Python you have with the `python --version` command.
    You will see Python 2.7.10\. The reason for this is that Mac OS X comes preinstalled
    with version 2.7+ of Python. To use the newer version of Python, you have to use
    the `python3` command. Type the following command into your Terminal and observe
    the result:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已在Mac OS X上安装了Python 3.7版本，您可以打开终端并使用`python --version`命令检查您的Python版本。您将看到Python
    2.7.10。原因是Mac OS X预先安装了Python 2.7+版本。要使用更新的Python版本，您必须使用`python3`命令。在终端中键入以下命令并观察结果：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, to make sure Python uses the interpreter with the newer version that you
    just installed, you can use an aliasing technique that will replace the current
    working Python version with Python3\. To perform aliasing, you have to follow
    these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了确保Python使用您刚刚安装的较新版本的解释器，您可以使用一种别名技术，将当前工作的Python版本替换为Python3。要执行别名，您必须按照以下步骤执行：
- en: Open your Terminal and type in the `nano ~/.bash_profile` command to open a
    bash file using the nano editor.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入`nano ~/.bash_profile`命令以使用nano编辑器打开bash文件。
- en: Next, go to the end of the file (after import PATH) and type in the `alias python=python3` command.
    To save a nano file, press *Ctrl* + *X* and then *Y* to save.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到文件末尾（在导入路径之后）并键入`alias python=python3`命令。要保存nano文件，请按*Ctrl* + *X*，然后按*Y*保存。
- en: Now, open your Terminal again and type in the same command that we used previously
    to check the Python version we have. It will be updated to the newer version of
    Python. From now on, in order to run any Python file from your Mac, you can use
    this Python command, followed by the signature of the file or filename.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次打开您的终端，并输入我们之前使用的相同命令来检查我们拥有的Python版本。它将更新到较新版本的Python。从现在开始，为了从Mac运行任何Python文件，您可以使用这个Python命令，后面跟着文件的签名或文件名。
- en: Introducing the Python Shell and IDLE
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Python Shell和IDLE
- en: 'The Python Shell is similar to Command Prompt for Windows and the Terminal
    for Linux and Mac OS X where you write commands that will be executed in the filesystem.
    The results of these commands are printed instantly within the shell. You can
    also get direct access to this shell using a Python command (> python)  in any
    Terminal. The result will contain an exception and an error due to the improper
    execution of the code, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Python Shell类似于Windows的命令提示符和Linux和Mac OS X的终端，您可以在其中编写将在文件系统中执行的命令。这些命令的结果会立即在shell中打印出来。您还可以使用任何终端中的Python命令（>
    python）直接访问此shell。结果将包含由于代码执行不正确而导致的异常和错误，如下所示：
- en: '[PRE1]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we ran into an error and the Python IDE is explicitly telling
    us the name of error we ran into, which in this case is `NameError` (a type of
    syntax error). `SyntaxError` occurs due to an incorrect pattern of code. In the
    preceding code example, when you write the `I love Python` syntax, this implies
    nothing to  the Python interpreter. You should write proper commands or define
    something properly if you want to rectify that problem. Writing `imput` instead
    of input is also a syntax error.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们遇到了一个错误，Python IDE明确告诉我们我们遇到的错误名称，在这种情况下是`NameError`（一种语法错误）。`SyntaxError`是由于代码的不正确模式而发生的。在前面的代码示例中，当您编写`I
    love Python`语法时，这对Python解释器来说什么都不意味着。如果要纠正这个问题，您应该编写正确的命令或正确定义某些内容。写`imput`而不是input也是语法错误。
- en: Logic errors or semantic errors occur even if your program syntax is correct.
    However, this doesn't solve your problem domain. They are dangerous as they are
    hard to track. The program is perfectly correct but does not solve any problem
    that it's intended to.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑错误或语义错误即使您的程序语法正确也会发生。然而，这并不能解决您的问题领域。它们很难追踪，因此很危险。程序完全正确，但并没有解决它本来要解决的任何问题。
- en: When you download the Python package on your machine, a **Python** **Integrated
    Development Environment** (**IDE**) called IDLE (Python's built-in IDE) is downloaded
    automatically onto your machine. You can type `IDLE` into the search bar to navigate
    to this environment. IDLE is a free open source program that provides two interfaces
    where you can write code. We can write scripts and Terminal commands in IDLE.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在计算机上下载Python软件包时，一个名为IDLE（Python内置IDE）的**Python集成开发环境**（**IDE**）会自动下载到您的计算机上。您可以在搜索栏中输入`IDLE`来进入这个环境。IDLE是一个免费的开源程序，提供了两个界面，您可以在其中编写代码。我们可以在IDLE中编写脚本和终端命令。
- en: Now that we are familiar with what not to do in the Python Shell, let's talk
    about the particulars of the Python Shell—an environment where you can write your
    Python code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了在Python Shell中不应该做什么，让我们谈谈Python Shell的细节——这是一个您可以编写Python代码的环境。
- en: Particulars of the Python Shell
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python Shell的细节
- en: As we mentioned previously, in this section, we are going to take a tour of
    the particulars of Python. This includes Python's built-in shell, Python's text
    editor (usually called Python script), and the Python documentation page.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，在这一部分，我们将参观Python的细节。这包括Python的内置shell，Python的文本编辑器（通常称为Python脚本）和Python文档页面。
- en: 'Follow these steps to learn about the particulars of the Python Shell:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤了解Python Shell的细节：
- en: 'When you open Python Shell, you will see the following window. The first thing
    you will see in the shell is Python''s current version number:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您打开Python Shell时，您会看到以下窗口。您在shell中看到的第一件事是Python的当前版本号：
- en: '![](Images/a0bf29a2-3565-4a42-b1ed-133c27e51b65.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a0bf29a2-3565-4a42-b1ed-133c27e51b65.png)'
- en: 'In the Python shell, there are three angular brackets placed next to each other,
    like this: `>>>`. You can start writing your code from there:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python shell中，有三个角括号相邻放置在一起，就像这样：`>>>`。您可以从那里开始编写您的代码：
- en: '![](Images/90030578-dd0c-4d5c-b99c-0ba50a871dd7.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/90030578-dd0c-4d5c-b99c-0ba50a871dd7.png)'
- en: 'Press *F1* to open the Python documentation or go to the Help tab and click
    Python Docs F1 (on a Windows machine). To get access the documentation online,
    please go to [https://docs.python.org/3/](https://docs.python.org/3/):'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*F1*打开Python文档，或转到帮助选项卡，单击Python Docs F1（在Windows机器上）。要在线访问文档，请转到[https://docs.python.org/3/](https://docs.python.org/3/)：
- en: '![](Images/152dcd04-ce27-4a80-bf41-db37e2330bdd.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/152dcd04-ce27-4a80-bf41-db37e2330bdd.png)'
- en: I hope that you are now familiar with the Python Shell. We are going to write
    a lot of code in the shell, so make sure you get familiar with it by customizing
    or playing with this environment a bit longer. After you are done with it, you
    can proceed to the next section, where you are going to learn about what you need
    to know before you write your first Python program.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您现在对Python Shell已经很熟悉了。我们将在shell中编写大量代码，因此请确保通过自定义或长时间玩耍来熟悉它。完成后，您可以继续下一节，在那里您将学习在编写第一个Python程序之前需要了解的内容。
- en: Building blocks of Python
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的基本组成部分
- en: 'There are some conventional patterns that we make use of while writing programs
    in Python. Python, being a high-level language, doesn''t care about low-level
    routines, but has the capability to interact with them. Python is made up of six
    building blocks. Every program that is made with Python revolves around them.
    These building blocks are input, output, sequential execution, conditionals, recursion,
    and reuse. Let''s go over them now:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写Python程序时，我们使用一些常规模式。Python作为一种高级语言，不关心低级例程，但具有与它们交互的能力。Python由六个构建块组成。用Python制作的每个程序都围绕着它们展开。这些构建块是输入、输出、顺序执行、条件、递归和重用。现在让我们来详细了解一下它们：
- en: '**Input**: Input is everywhere. If you make an application with Python, it
    mainly deals with formatting the input of the user in a way that would harvest
    meaningful results. There is an built-in `input()` method in Python so that we
    can get data input from the user.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：输入无处不在。如果你用Python制作一个应用程序，它主要处理用户输入的格式，以便收集有意义的结果。Python中有一个内置的`input()`方法，因此我们可以从用户那里获取数据输入。'
- en: '**Output**: After we have manipulated the data that was entered by a user,
    it''s time for us to present it. In this layer, we make use of design tools and
    presentation tools to format meaningful output and send it to the user.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出**：在我们操纵用户输入的数据之后，是时候向用户呈现它了。在这一层，我们利用设计工具和演示工具来格式化有意义的输出并发送给用户。'
- en: '**Sequential execution**: This preserves the sequence of execution of statements.
    In Python, we normally use indentation, which is spaces that denotes scopes. Any
    commands that are at zero-level indentation are executed first.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顺序执行**：这保留了语句的执行顺序。在Python中，我们通常使用缩进，即表示作用域的空格。任何在零级缩进的命令都会首先执行。'
- en: '**Conditionals**: These provide flow control to programs. Based on comparisons,
    we make logic that will make a flow of the code and will either execute or skip
    it.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**条件**：这些为程序提供流程控制。基于比较，我们制定逻辑，使代码流动，并执行或跳过它。'
- en: '**Recursion**: This is anything that needs to be done until some condition
    is met. We normally call them **loops**.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归：这是需要做的任何事情，直到满足某些条件。我们通常称它们为**循环**。
- en: '**Reuse**: Write code once, use it a million times. Reuse is a paradigm where
    we write a set of code, give it a reference, and use it whenever required. Functions
    and objects provide reusability.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重用**：编写一次代码，使用无数次。重用是一种范式，我们编写一组代码，给它一个引用，并在需要时使用它。函数和对象提供了可重用性。'
- en: Writing a program in Python Shell may be easy to debug for most programmers,
    but it can create overhead in the long run. If you want to save your code for
    future reference or you want to write multi-line statements, you will probably
    be overwhelmed with the deficit feature of the Python interpreter. To solve this
    problem, we have to create a script file. They are called scripts because they
    allow you to write multi-line statements in single files that you can run immediately.
    This comes in handy when we have multiple data storage and files to deal with.
    You can distinguish a Python file from other files by its extension, that is, `.py`.
    You should also save your Python script files with the `.py` extension.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python Shell中编写程序对大多数程序员来说可能很容易调试，但从长远来看可能会产生额外的开销。如果你想保存代码以备将来参考，或者你想编写多行语句，你可能会被Python解释器的功能不足所压倒。为了解决这个问题，我们必须创建一个脚本文件。它们被称为脚本，因为它们允许你在单个文件中编写多行语句，然后立即运行。当我们有多个数据存储和文件要处理时，这将非常方便。你可以通过扩展名来区分Python文件和其他文件，也就是`.py`。你还应该将Python脚本文件保存为`.py`扩展名。
- en: 'To run your script file from a Terminal or Windows Command Prompt, you have
    to tell your Python interpreter to run that file by its filename, like so:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要从终端或Windows命令提示符中运行你的脚本文件，你必须告诉Python解释器通过文件名运行该文件，就像这样：
- en: '[PRE2]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding command, `$` is an operating system prompt. First, you have
    to call the Python interpreter with the `Python` command and tell it to execute
    the file name next to it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`$`是操作系统提示符。首先，你必须使用`Python`命令调用Python解释器，并告诉它执行其旁边的文件名。
- en: 'If you want to see the content of the `Python` file within the Terminal, use
    the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在终端中查看`Python`文件的内容，请使用以下命令：
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To exit the Python Terminal, write the `exit()` command in the Terminal.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出Python终端，在终端中写入`exit()`命令。
- en: 'Now that we''ve learned how to open and exit the interface of the Python environment,
    we have to learn about its building blocks. Many beginners make a fallacious assumption
    that a program has only two building blocks: input and output. In the next section,
    we will see how to debunk this assumption by employing six building block of programming.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何打开和退出Python环境的界面，我们必须了解它的构建模块。许多初学者错误地认为程序只有两个构建模块：输入和输出。在下一节中，我们将看到如何通过使用编程的六个构建模块来驳斥这一假设。
- en: 'The toughest part of programming is learning the art of programming paradigms
    such as object-oriented programming, DRY principles, or the linear time complexity
    model. If you get a good grasp of these prototypes, learning any new programming
    language will be a piece of cake. Having that said, learning all of these paradigms
    with Python is a lot easier than Java or C# as, in Python, the code will be shorter
    and the syntax is English-friendly:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 编程最困难的部分是学习编程范式，比如面向对象编程、DRY原则或线性时间复杂度模型。如果你掌握了这些原型，学习任何新的编程语言都将变得轻而易举。话虽如此，使用Python学习所有这些范式要比Java或C#容易得多，因为在Python中，代码会更短，语法也更符合英语习惯：
- en: '![](Images/940ac0b9-a662-43c9-9a87-88d7accbce8b.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/940ac0b9-a662-43c9-9a87-88d7accbce8b.png)'
- en: Before we write our first program, we will install one more IDLE for the upcoming
    chapters where we will be writing program-intricate games. In those types of games,
    the features that are provided by IDLE are not enough, and so we will see how
    to install PyCharm—an advance IDLE—in the next section.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写第一个程序之前，我们将安装另一个IDLE，以备后面的章节中我们将编写复杂的游戏。在这些类型的游戏中，IDLE提供的功能是不够的，因此我们将看到如何在下一节中安装PyCharm——一个高级的IDLE。
- en: Installing the PyCharm IDE
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyCharm IDE
- en: Earlier in this chapter, we discovered IDLE. We have already seen an environment
    where we can write code and get output straightaway. However, you can probably
    imagine what happens if we have lots of code to be executed at once, maybe 1,000
    lines of code, one by one. We have to solve this problem by writing a script,
    which is a collection of Python code. This will be executed at once instead of
    being executed line by line in the shell of IDLE.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们发现了IDLE。我们已经看到了一个环境，我们可以在其中编写代码并立即获得输出。但是，您可以想象一下，如果我们有很多代码要一次执行，可能是1000行代码，一次执行一行。我们必须通过编写脚本来解决这个问题，这是Python代码的集合。这将一次执行，而不是在IDLE的shell中逐行执行。
- en: 'If you want to write a script, follow these steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想编写脚本，请按照以下步骤操作：
- en: Open the Search tab from your PC and type `IDLE`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的PC中打开搜索选项卡，然后键入`IDLE`。
- en: Click on the File tab.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件选项卡。
- en: Press on New File.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下New File。
- en: 'A new file will be generated. You can write multiple expressions, statements,
    and commands in that single file. The left-hand side of the following screenshot
    shows the Python script where you can write multi-line statements, while the right-hand
    side of the following screenshot shows the Python Shell, where you will execute
    your script and get instant results:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成一个新文件。您可以在单个文件中编写多个表达式、语句和命令。以下屏幕截图的左侧显示了Python脚本，您可以在其中编写多行语句，而以下屏幕截图的右侧显示了Python
    Shell，您将在其中执行脚本并获得即时结果：
- en: '![](Images/83321431-77d1-42cd-8cef-856e1ffb2058.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/83321431-77d1-42cd-8cef-856e1ffb2058.png)'
- en: After you've finished writing your scripts, you have to save it before running
    it. To save your file, go to File and click on Save. Provide the appropriate filename
    for your script by placing the `.py` extension at the end of it, for example, `test.py`.
    Press *F5* to execute your script file.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写脚本完成后，您必须在运行之前保存它。要保存文件，请转到文件并单击保存。通过在末尾放置`.py`扩展名为您的脚本提供适当的文件名，例如`test.py`。按下*F5*执行您的脚本文件。
- en: 'We will build many games throughout this book where we will have to deal with
    images, physics, rendering, and the installation of Python packages. This IDE,
    that is, IDLE, is not capable of providing smart IDE features such as code completion,
    integration and plugins, and branching of packages. Hence, we have to upgrade
    to the best Python text-enriched IDE, that is, the PyCharm IDE. Let''s get started:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将构建许多游戏，其中我们将处理图像、物理、渲染和安装Python包。这个IDE，也就是IDLE，无法提供智能IDE功能，比如代码完成、集成和插件以及包的分支。因此，我们必须升级到最好的Python文本丰富的IDE，也就是PyCharm
    IDE。让我们开始吧：
- en: 'Visit [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)
    to download the PyCharm environment. The installation of PyCharm is as simple
    as the installation of any other program. After you''ve downloaded the installer
    from the website, click on that installer. You should see the following window:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/)下载PyCharm环境。安装PyCharm与安装任何其他程序一样简单。从网站下载安装程序后，点击该安装程序。您应该会看到以下窗口：
- en: '![](Images/c9a4caf9-823a-4248-81e6-f5ab098bec4c.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c9a4caf9-823a-4248-81e6-f5ab098bec4c.png)'
- en: Click on the Next> button and install it on the appropriate drive. After you've
    installed it, search for `PyCharm` in the search bar and open it. You should see
    the following window:![](Images/ac6b5f5e-7caa-41c4-9661-e5a39606e5ca.png)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击<Next>按钮并将其安装在适当的驱动器上。安装完成后，在搜索栏中搜索`PyCharm`并打开它。您应该会看到以下窗口：![](Images/ac6b5f5e-7caa-41c4-9661-e5a39606e5ca.png)
- en: Now, click +Create New Project and give your project a name. To create a new
    Python file, left-click on your project name, click on New, and then click the Python
    File tab:![](Images/c7753959-cb44-41e4-b346-8f4a7b602dbb.png)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击+创建新项目并给您的项目命名。要创建新的Python文件，请在项目名称上单击左键，单击New，然后单击Python File选项卡：![](Images/c7753959-cb44-41e4-b346-8f4a7b602dbb.png)
- en: Now, we have everything that we need to master this book—I mean the tools, but
    obviously, we have to learn every possible paradigm of Python to master the concept
    of Python. Now that you are fully equipped with these tools, let's write our first
    effective Python program, *No Hello World.*
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们拥有了掌握本书所需的一切——我的意思是工具，但显然，我们必须学习Python的每种可能的范式来掌握Python的概念。现在您已经全副武装了这些工具，让我们编写我们的第一个有效的Python程序，*No
    Hello World*。
- en: Programming code without Hello World
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程代码没有Hello World
- en: 'There is a tradition in the programming world to print *Hello World* as our
    first program. Let''s break the mold and make our first program one that takes
    input from the user and prints it to the console. Follow these steps to execute
    your first program:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程世界中有一个传统，即将*Hello World*打印为我们的第一个程序。让我们打破常规，使我们的第一个程序成为从用户那里获取输入并将其打印到控制台的程序。按照以下步骤执行您的第一个程序：
- en: 'Open your IDLE and type in the following commands:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的IDLE并输入以下命令：
- en: '[PRE4]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Press *Enter* to execute the command. You will get a message saying Enter your
    Name:. Type in your name and hit *Enter*. You will see the output print the name
    that you just passed.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*执行命令。您将收到一条消息，上面写着输入您的姓名：。输入您的姓名并按*Enter*。您将看到输出打印您刚刚传递的姓名。
- en: 'We made use of two commands here, also known as functions We will learn about
    them in the upcoming chapters. Let''s go over these two functions now:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用了两个命令，也称为函数。我们将在接下来的章节中学习它们。现在让我们来看看这两个函数：
- en: '`input()` is a built-in function of Python that will take input from the user.
    Spaces are also included as characters.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input()`是Python的内置函数，将从用户那里获取输入。空格也包括在字符中。'
- en: '`print()` is a built-in function of Python that will print whatever is passed
    inside the parentheses.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print()`是Python的内置函数，将打印括号内传递的任何内容。'
- en: Now that we have started to code our first program with Python using Python's
    built-in IDLE, it's your turn to test the working of IDLE. Since we are going
    to be building lots of games using IDLE, make sure you get familiar with its interface.
    The core programming modules that we learned about in this chapter, such as Python
    keywords and the input-print function, are important as they help us to build
    programs that can take input from users and display it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开始使用Python的内置IDLE编写我们的第一个程序，轮到您测试IDLE的工作原理了。由于我们将使用IDLE构建大量游戏，请确保您熟悉其界面。本章学习的核心编程模块，如Python关键字和输入-打印函数，非常重要，因为它们帮助我们构建可以从用户那里获取输入并显示的程序。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a tour of the basics of Python and learned how similar
    its vocabulary is to English. We installed the Python package on our machine and
    viewed the pre-installed IDE of Python, known as IDLE. We saw how scripts can
    be written on the Python IDE and how we can execute them. Then, we installed the
    feature-rich Python text editor known as PyCharm IDE on our machine. We wrote
    our first Python program, which is able to take input from the user and display
    it on the screen.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对Python的基础知识进行了概述，并学习了它与英语的词汇有多么相似。我们在计算机上安装了Python软件包，并查看了Python的预安装集成开发环境（IDE）IDLE。我们看到了如何在Python
    IDE上编写脚本以及如何执行它们。然后，我们在计算机上安装了功能丰富的Python文本编辑器PyCharm IDE。我们编写了我们的第一个Python程序，它能够从用户那里获取输入并在屏幕上显示。
- en: The skills that you have acquired in this chapter are fundamental for building
    the flow of a program. For instance, our program was able to take input/output
    data. Any game that's made in Python has to be interactive for the users or players,
    and this is done through the input and output interface. In this chapter, we looked
    at how to take input from a user and display it. As we continue with this book,
    we will explore various ways to build a program that handles user events such
    as taking input from the mouse, keyboard, and screen-taps.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中您所学到的技能对于构建程序的流程至关重要。例如，我们的程序能够处理输入/输出数据。任何用Python制作的游戏都必须对用户或玩家进行交互，这是通过输入和输出界面来实现的。在本章中，我们学习了如何从用户那里获取输入并显示它。随着我们继续阅读本书，我们将探索各种构建程序的方式，包括处理来自鼠标、键盘和屏幕点击的用户事件。
- en: The next chapter will be crucial as we will look at Python essentials such as
    values, types, variables, operators, and modules. We will also start to build
    a tic-tac-toe game.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将至关重要，因为我们将学习Python的基本要素，如值、类型、变量、运算符和模块。我们还将开始构建一个井字棋游戏。
