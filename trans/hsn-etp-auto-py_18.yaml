- en: Building a Network Scanner Using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python构建网络扫描器
- en: In this chapter, we will build a network scanner that can identify the live
    hosts on the network and we will also expand it to include guessing the running
    operating system on each host and opened/closed ports. Usually, gathering this
    information requires multiple tools and some Linux ninja skills to get the required
    information but, using Python, we can build our own network scanner code that
    includes any tools and we can get a customized output.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个网络扫描器，它可以识别网络上的活动主机，并且我们还将扩展它以包括猜测每个主机上正在运行的操作系统以及打开/关闭的端口。通常，收集这些信息需要多个工具和一些Linux
    ninja技能来获取所需的信息，但是使用Python，我们可以构建自己的网络扫描器代码，其中包括任何工具，并且我们可以获得定制的输出。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the network scanner
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解网络扫描器
- en: Building a network scanner with Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python构建网络扫描器
- en: Sharing your code on GitHub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub上分享您的代码
- en: Understanding the network scanner
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解网络扫描器
- en: A network scanner is used to scan a provided range of network IDs in both layer
    2 and layer 3\. It can send requests and analyze responses for hundreds of thousands
    of computers. Also, you can expand its functionality to show some shared resources,
    via Samba and NetBIOS protocols, and the content of unprotected data on servers
    running sharing protocols. Another usage for the network scanner in penetration
    testing is when a white hat hacker tries to simulate an attack on network resources
    to find vulnerabilities and to evaluate company security. The final goal of the
    penetration test is to generate a report with all of the weaknesses in the target
    system so the origin point can reinforce and enhance security policies against
    the potential real attack.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 网络扫描器用于扫描提供的网络ID范围，包括第2层和第3层。它可以发送请求并分析数十万台计算机的响应。此外，您可以扩展其功能以显示一些共享资源，通过Samba和NetBIOS协议，以及运行共享协议的服务器上的未受保护数据的内容。渗透测试中网络扫描器的另一个用途是，当白帽黑客尝试模拟对网络资源的攻击以查找漏洞并评估公司的安全性时。渗透测试的最终目标是生成一份报告，其中包含目标系统中所有弱点，以便原始点可以加强和增强安全策略，以抵御潜在的真实攻击。
- en: Building a network scanner with Python
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python构建网络扫描器
- en: 'Python tools provide many native modules and support for working with sockets
    and TCP/IP in general. Additionally, Python can use the existing third-party commands
    available on the system to initiate the required scan and return the result. This
    can be done using the `subprocess` module that we discussed before, in [Chapter
    9](part0128.html#3Q2800-9cfcdc5beecd470bbeda046372f0337f), *Using the Subprocess
    Module*. A simple example is using Nmap to scan a subnet, as in the following
    code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python工具提供了许多本地模块，并支持与套接字和TCP/IP一般的工作。此外，Python可以使用系统上可用的现有第三方命令来启动所需的扫描并返回结果。这可以使用我们之前讨论过的`subprocess`模块来完成，在[第9章](part0128.html#3Q2800-9cfcdc5beecd470bbeda046372f0337f)中，*使用Subprocess模块*。一个简单的例子是使用Nmap来扫描子网，就像下面的代码中所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, we can see the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到以下内容：
- en: At the beginning, we imported the `subprocess` module to be used in our script.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们导入了`subprocess`模块以在我们的脚本中使用。
- en: Then, we defined the network that we want to scan with the `network` parameter.
    Notice that we used the CIDR notation, but we could use the subnet mask instead
    and convert that to CIDR notation using the Python `netaddr` module.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们使用`network`参数定义了要扫描的网络。请注意，我们使用了CIDR表示法，但我们也可以使用子网掩码，然后使用Python的`netaddr`模块将其转换为CIDR表示法。
- en: The `Popen()` class inside `subprocess` is used to create an object that will
    send a regular Nmap command and scan the network. Notice that we added some flags, `-sP`,
    to tweak the Nmap operation and redirected the output to a special pipe created
    by `subprocess.PIPE`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subprocess`中的`Popen()`类用于创建一个对象，该对象将发送常规的Nmap命令并扫描网络。请注意，我们添加了一些标志`-sP`来调整Nmap的操作，并将输出重定向到`subprocess.PIPE`创建的特殊管道。'
- en: Finally, we iterated over the created pipe and printed each line.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们迭代创建的管道并打印每一行。
- en: 'The script output is as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下：
- en: '**![](../images/00222.jpeg)**Access to network ports on Linux requires root
    access, or your account must belong to a sudoers group in order to avoid any problems
    in the script. Also, the `nmap` package should be installed on the system prior
    to running the Python code.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](../images/00222.jpeg)**在Linux上访问网络端口需要root访问权限，或者您的帐户必须属于sudoers组，以避免脚本中的任何问题。此外，在运行Python代码之前，系统上应该安装`nmap`软件包。'
- en: This is a simple Python script and we can use the Nmap tool directly instead
    of using it inside Python. However, wrapping the Nmap (or any other system command)
    with Python code gives us the flexibility of tailoring the output and customizing
    it in any way. In the next section, we will enhance our script and add more functionality
    to it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的Python脚本，我们可以直接使用Nmap工具，而不是在Python中使用它。然而，使用Python代码包装Nmap（或任何其他系统命令）给了我们灵活性，可以定制输出并以任何方式自定义它。在下一节中，我们将增强我们的脚本并添加更多功能。
- en: Enhancing the code
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强代码
- en: Although the output of Nmap gives us an overview of the live hosts on the scanned
    network, we can enhance it and have a better output view. For example, I need
    to know the total number of hosts at the beginning of the output, then the IP
    address, MAC address, and MAC vendor for each one, but in tabular form, so I can
    easily locate any host and all of the information associated with it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Nmap的输出给了我们对扫描网络上的活动主机的概述，但我们可以增强它并获得更好的输出视图。例如，我需要在输出的开头知道主机的总数，然后是每个主机的IP地址、MAC地址和MAC供应商，但以表格形式，这样我就可以轻松地找到任何主机以及与之相关的所有信息。
- en: 'For that reason, I will design a function and name it `nmap_report()`. This
    function will take the standard output generated from the `subprocess` pipe and
    will extract the required information and format it in table format:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我将设计一个函数并命名为`nmap_report()`。这个函数将获取从`subprocess`管道生成的标准输出，并提取所需的信息，并以表格格式进行格式化：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Starting with the easiest part, we can get the number of live hosts by counting
    the `Host is up` occurrences in the passed output and assigning this to the `number_of_hosts`
    parameter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以通过计算传递输出中“主机已启动”的出现次数来获取活动主机的数量，并将其分配给`number_of_hosts`参数。
- en: Secondly, Python has a nice module called `PrettyTable` which can create a text
    table and handle the cell sizing according to data inside it. The module accepts
    the table headers as a list and uses the `add_row()` function to add rows to the
    created table. So, the first thing is to import this module (after installing
    it, if it's not already installed). In our example, we will pass a list of three
    items (`IP`, `MAC`, `Vendor`) to the `PrettyTable` class (imported from the `PrettyTable`
    module) to create the table headers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，Python有一个很好的模块叫做`PrettyTable`，它可以创建一个文本表，并根据其中的数据处理单元大小。该模块接受表头作为列表，并使用`add_row()`函数向创建的表中添加行。因此，第一件事是导入这个模块（如果尚未安装，则安装它）。在我们的例子中，我们将传递一个包含三个项目（`IP`，`MAC`，`Vendor`）的列表给`PrettyTable`类（从`PrettyTable`模块导入），以创建表头。
- en: Now, to fill up this table, we will split the output on `\n` (carriage return).
    The split result will be a list, that we can iterate over to grab specific information
    such as MAC address and IP address. We used a few splitting and replace hacks
    to extract the MAC address alone. Also, we used the regular expression `search`
    function to get the IP address portion (or the hostname if DNS is enabled) from
    the output.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了填充这个表，我们将在`\n`（回车）上进行分割。分割结果将是一个列表，我们可以迭代以获取特定信息，如MAC地址和IP地址。我们使用了一些分割和替换技巧来提取MAC地址。此外，我们使用了正则表达式`search`函数从输出中获取IP地址部分（如果启用了DNS，则获取主机名）。
- en: Finally, we added this information to the created `Host_Table` and continued
    to iterate over the next line.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将这些信息添加到创建的“Host_Table”中，并继续迭代下一行。
- en: 'Following is the full script:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的脚本：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice we also added a pre-check to the `subprocess` command using the `netaddr.IPNetwork()`
    class. This class will validate whether the network is correctly formatted *before*
    executing the `subprocess` command, otherwise the class will raise an exception
    which should be handled by the `AddrFormatError` exception class and will print
    a customized error message to user.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还使用了`netaddr.IPNetwork()`类对`subprocess`命令进行了预检查。这个类将在执行`subprocess`命令*之前*验证网络是否格式正确，否则该类将引发一个异常，应该由`AddrFormatError`异常类处理，并向用户打印一个定制的错误消息。
- en: 'The script output is:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下：
- en: '![](../images/00223.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00223.jpeg)'
- en: 'Now, if we change the network to an incorrect value (either the subnet mask
    is wrong or the network ID is not valid), the `IPNetwork()` class will throw an
    exception and this error message will be printed:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们将网络更改为不正确的值（子网掩码错误或网络ID无效），`IPNetwork()`类将抛出一个异常，并打印出这个错误消息：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../images/00224.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00224.jpeg)'
- en: Scanning the services
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描服务
- en: Running services on a host machine typically open a port in the operating system
    and start listening to it in order to accept incoming TCP communication and start
    the three-way handshake. In Nmap, you can send an SYN packet on a specific port
    and, if the host responds with SYN-ACK, then the service is running and listening
    to the port.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 主机机器上运行的服务通常会在操作系统中打开一个端口，并开始监听它，以接受传入的TCP通信并开始三次握手。在Nmap中，您可以在特定端口上发送一个SYN数据包，如果主机以SYN-ACK响应，则服务正在运行并监听该端口。
- en: 'Let''s test the HTTP port, for example in [google.com](https://www.google.com/),
    using `nmap`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试HTTP端口，例如在[google.com](https://www.google.com/)上，使用`nmap`：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../images/00225.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00225.jpeg)'
- en: 'We can use the same concept to discover the running services on the router.
    For example, the router that runs the BGP daemon will listen to port `179` for
    open/update/keep alive/notification messages. If you want to monitor the router,
    then the SNMP service should be enabled and should listen to incoming SNMP get/set
    messages. The MPLS LDP will usually listen to `646` for establishing a relationship
    with other neighbors. Here is a list of common services running on the router
    and their listening ports:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用相同的概念来发现路由器上运行的服务。例如，运行BGP守护程序的路由器将监听端口`179`以接收/更新/保持活动/通知消息。如果要监视路由器，则应启用SNMP服务，并应监听传入的SNMP
    get/set消息。MPLS LDP通常会监听`646`以与其他邻居建立关系。以下是路由器上运行的常见服务及其监听端口的列表：
- en: '| **Service** | **Listening port** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **服务** | **监听端口** |'
- en: '| FTP | `21` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| FTP | `21` |'
- en: '| SSH | `22` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| SSH | `22` |'
- en: '| TELNET | `23` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| TELNET | `23` |'
- en: '| SMTP | `25` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| SMTP | `25` |'
- en: '| HTTP | `80` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| HTTP | `80` |'
- en: '| HTTPS | `443` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| HTTPS | `443` |'
- en: '| SNMP | `161` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| SNMP | `161` |'
- en: '| BGP | `179` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| BGP | `179` |'
- en: '| LDP | `646` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| LDP | `646` |'
- en: '| RPCBIND | `111` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| RPCBIND | `111` |'
- en: '| NETCONF | `830` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| NETCONF | `830` |'
- en: '| XNM-CLEAR-TEXT | `3221` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| XNM-CLEAR-TEXT | `3221` |'
- en: We can create a dictionary with all of these ports and scan them using `subprocess`
    and Nmap. Then we use the returned output to create our table, which lists the
    open and closed ports for each scan. Also, with some additional logic, we can
    try to correlate information to guess the operating system type of the device
    function. For example, if the device is listening to port `179` (BGP port), then
    the device is most likely a network gateway and, if it listens to `389` or `636`,
    then the device is running an LDAP application and could be the company active
    directory. This will help us to create the proper attack against the device during
    the pen testing.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个包含所有这些端口的字典，并使用`subprocess`和Nmap对它们进行扫描。然后我们使用返回的输出来创建我们的表，列出每次扫描的开放和关闭的端口。另外，通过一些额外的逻辑，我们可以尝试相关信息来猜测设备功能的操作系统类型。例如，如果设备正在监听端口`179`（BGP端口），那么设备很可能是网络网关，如果它监听`389`或`636`，那么设备正在运行LDAP应用程序，可能是公司的活动目录。这将帮助我们在渗透测试期间针对设备创建适当的攻击。
- en: 'Without further ado, let''s quickly put our idea and notes in the following
    script:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 废话不多说，让我们快速把我们的想法和笔记放在下面的脚本中：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this example, we can see the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到以下内容：
- en: We developed a function named `get_port_status()` to take the Nmap port scanning
    result and to search for the port status (open, closed, filtered, and so on) using
    the regular expression inside the `findall()` function. It returns the port status
    result.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们开发了一个名为`get_port_status()`的函数，用于获取Nmap端口扫描结果，并使用`findall()`函数内的正则表达式来搜索端口状态（打开、关闭、过滤等）。它返回端口状态结果。
- en: Then, we added services ports mapped to the service name inside the `router_ports`
    dictionary, so we could access any port value using the corresponding service
    name (dictionary key). Also, we defined the router hosts' IP addresses inside
    the `live_hosts` list. Note that we can use the `nmap` with the `-sP` flag to
    get the live hosts, as we did before in a previous script.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们在`router_ports`字典中添加了映射到服务名称的服务端口，这样我们就可以使用相应的服务名称（字典键）访问任何端口值。此外，我们在`live_hosts`列表中定义了路由器主机的IP地址。请注意，我们可以使用`nmap`和`-sP`标志来获取活动主机，就像我们之前在之前的脚本中所做的那样。
- en: Now, we can iterate over each IP address in the `live_hosts` list and execute
    the Nmap to scan each port in the `router_ports` dictionary. This requires a nested
    `for` loop, so for each device we iterate over a list of ports and so on. The
    result will be added to the `services_status` dictionary—the service name is a
    dictionary key while the port status is the dictionary value.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，我们可以遍历`live_hosts`列表中的每个IP地址，并执行Nmap来扫描`router_ports`字典中的每个端口。这需要一个嵌套的`for`循环，因此对于每个设备，我们都要遍历一个端口列表，依此类推。结果将被添加到`services_status`字典中——服务名称是字典键，端口状态是字典值。
- en: Finally, we will add the result to `Router_Table` created using the `prettytable`
    module to get a nice-looking table.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将结果添加到使用`prettytable`模块创建的`Router_Table`中，以获得一个漂亮的表格。
- en: 'The script output is as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下：
- en: '![](../images/00226.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00226.jpeg)'
- en: Sharing your code on GitHub
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitHub上分享您的代码
- en: 'GitHub is a place where you can share your code and collaborate with others
    on a common project using Git. Git is a source version control platform invented
    and created by Linus Trovalds, who started Linux but had a problem maintaining
    Linux development with a large number of developers contributing to it. He created
    a de-centralized version control where anyone could get the entire code (called
    cloning or forking), make changes, then push them back to the central repository
    to be merged with other developers'' code. Git became the preferred method for
    many developers to work together on projects. You can learn how to code in Git
    interactively with this 15-minute course offered by GitHub: [https://try.github.io](https://try.github.io).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是一个可以使用Git分享代码并与他人合作的地方。Git是由Linus Trovalds发明和创建的源代码版本控制平台，他开始了Linux，但在许多开发人员为其做出贡献的情况下，维护Linux开发成为了一个问题。他创建了一个分散式版本控制，任何人都可以获取整个代码（称为克隆或分叉），进行更改，然后将其推送回中央仓库，以与其他开发者的代码合并。Git成为许多开发人员共同合作的首选方法。您可以通过GitHub提供的这个15分钟课程交互式地学习如何在Git中编码：[https://try.github.io](https://try.github.io)。
- en: GitHub is the website that hosts those projects, which is versioned using Git.
    It's like a developer social media platform, where you can track the code development,
    write a wiki, or raise an issue/bug report and get developer feedback on it. People
    on the same project can discuss the project progress and share code together to
    build a better and faster software. Also, some companies consider your code and
    repositories—shared in your account at GitHub—as an online resume that measures
    your skills and how you code in languages of interest.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是托管这些项目的网站，使用Git进行版本控制。它就像一个开发者社交媒体平台，您可以跟踪代码开发、编写维基百科，或提出问题/错误报告，并获得开发者的反馈。同一项目上的人可以讨论项目进展，并共同分享代码，以构建更好、更快的软件。此外，一些公司将您在GitHub账户中共享的代码和仓库视为在线简历，衡量您在感兴趣的语言中的技能和编码能力。
- en: Creating an account on GitHub
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitHub上创建账户
- en: The first thing to do before sharing your code or downloading other codes is
    to create your account.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在分享您的代码或下载其他代码之前，首先要做的是创建您的账户。
- en: Head to [https://github.com/join?source=header-home](https://github.com/join?source=header-home)
    and choose a username, password, and email address, then click on the green Create
    an account button.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://github.com/join?source=header-home](https://github.com/join?source=header-home)，选择用户名、密码和电子邮件地址，然后点击绿色的“创建账户”按钮。
- en: The second thing to do is to choose your plan. By default, the free plan is
    fine as it gives you unlimited public repositories and you can push any code developed
    in any languages you like. However, the free plan doesn't make your repository
    private and allows others to search for and download it. It's not a deal breaker
    if you're not working on secret or commercial projects in your company, however
    you need to make sure that you don't share any sensitive information, such as
    passwords, tokens, or public IP addresses in the code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第二件事是选择您的计划。默认情况下，免费计划是可以的，因为它为您提供无限的公共仓库，并且您可以推送任何您喜欢的语言开发的代码。但是，免费计划不会使您的仓库私有，并允许其他人搜索和下载它。如果您不在公司中从事秘密或商业项目，这并不是一个不可接受的问题，但是您需要确保不在代码中分享任何敏感信息，如密码、令牌或公共IP地址。
- en: Creating and pushing your code
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和推送您的代码
- en: Now we're ready to share the code with others. The first thing after creating
    your GitHub account is to create a repository to host your files. Usually, you
    create one repository per project (not per file) and it contains project assets
    and files related to each other.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备与他人分享代码。在创建GitHub账户后的第一件事是创建一个仓库来托管您的文件。通常，您为每个项目创建一个仓库（而不是每个文件），它包含与彼此相关的项目资产和文件。
- en: 'Click on the + icon in the top-right, just beside your profile picture, to
    create a new repository:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 点击右上角的+图标，就在您的个人资料图片旁边，创建一个新的仓库：
- en: '![](../images/00227.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00227.jpeg)'
- en: You will be redirected to a new page where you can enter your repository name.
    Notice that you can choose any you like, but it shouldn't conflict with other
    repository in your profile. Also, you will be give a unique URL for this repo
    so anyone can access it. You can set the repo settings, such as whether it is
    public or private (only for paid plans), and if you want to initialize it with
    a README file. This file is written using **markdown** text formatting that includes
    information about your project, and steps for other developers to follow if they
    use your project.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被重定向到一个新页面，在这里你可以输入你的仓库名称。请注意，你可以选择任何你喜欢的名称，但它不应与你的个人资料中的其他仓库冲突。此外，你将获得一个唯一的URL，以便任何人都可以访问它。你可以设置仓库的设置，比如它是公开的还是私有的（只适用于付费计划），以及是否要用README文件初始化它。这个文件使用**markdown**文本格式编写，包括关于你的项目的信息，以及其他开发人员使用你的项目时需要遵循的步骤。
- en: 'Finally, you will have an option to add a `.gitignore` file where you tell
    Git to ignore tracking a certain type of file in your directory, such as logs,
    `pyc`, compiled files, video, and so on:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将有一个选项来添加一个`.gitignore`文件，告诉Git在你的目录中忽略跟踪某种类型的文件，比如日志、`pyc`编译文件、视频等：
- en: '![](../images/00228.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00228.jpeg)'
- en: 'In the end, your repo is created and you will be given a unique URL for it.
    Note this URL down as we will use it later when pushing files to it:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将创建一个仓库，并获得一个唯一的URL。记下这个URL，因为我们稍后将用它来推送文件：
- en: '![](../images/00229.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00229.jpeg)'
- en: 'Now it''s time to share your code. I will use the integrated Git functionality
    inside PyCharm to do the job although you can do the same steps in CLI. Also,
    there are many other GUI tools available (including one from GitHub itself) that
    can manage your GIT repo. I highly recommend that you do the Git training provided
    by GitHub ([https://try.github.io](https://try.github.io/)) before following these
    steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是分享你的代码的时候了。我将使用PyCharm内置的Git功能来完成这项工作，尽管你也可以在CLI中执行相同的步骤。此外，还有许多其他可用的GUI工具（包括GitHub本身提供的工具）可以管理你的GIT仓库。我强烈建议你在按照这些步骤之前先接受GitHub提供的Git培训（[https://try.github.io](https://try.github.io)）：
- en: 'Go to VCS | Import into Version Control | Create Git Repository:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到VCS | Import into Version Control | Create Git Repository：
- en: '![](../images/00230.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00230.jpeg)'
- en: 'Choose the folder where your project files are stored locally:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择存储项目文件的本地文件夹：
- en: '![](../images/00231.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00231.jpeg)'
- en: This will create a local Git repo in the folder.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在文件夹中创建一个本地的Git仓库。
- en: 'Highlight all files that need to be tracked in the sidebar and right-click
    on them, then choose Git | Add:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在侧边栏中突出显示所有需要跟踪的文件，右键单击它们，然后选择Git | Add：
- en: '![](../images/00232.jpeg)PyCharm uses file color code to indicate the type
    of file tracked in Git. When the files are not tracked, it will color them red
    and when the files are added to Git, it will color them green. This allows you
    to easily know file status without running commands.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00232.jpeg)PyCharm使用文件颜色代码来指示Git中跟踪的文件类型。当文件没有被跟踪时，它们将被标记为红色，当文件被添加到Git中时，它们将被标记为绿色。这样可以让你在不运行命令的情况下轻松了解文件的状态。'
- en: 'Define the remote repository in GitHub that will be mapped to the local repository
    by going to VCS | Git | Remotes:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到VCS | Git | Remotes来定义在GitHub中将映射到本地仓库的远程仓库：
- en: '![](../images/00233.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00233.jpeg)'
- en: 'Enter the repo name and the URL you noted down when we created the repo; click
    OK twice to exit the window:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入仓库名称和我们创建仓库时记下的URL；点击两次“确定”退出窗口：
- en: '![](../images/00234.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00234.jpeg)'
- en: 'The final step is to commit your code. Go to VCS | Git | Commit and from the
    opened popup window, select your tracked files, enter a descriptive message in
    the Commit Message section, and instead of hitting Commit, click on the small
    arrow beside it and choose Commit and Push. A dialog box might be opened telling
    you that your Git user Name Is Not Defined. Just enter your name and email and
    make sure the Set properties globally box is ticked and hit Set and Commit:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是提交你的代码。转到VCS | Git | Commit，从打开的弹出窗口中选择你要跟踪的文件，在提交消息部分输入描述性消息，而不是点击提交，点击旁边的小箭头并选择提交和推送。可能会打开一个对话框，告诉你Git用户名未定义。只需输入你的名字和电子邮件，并确保选中“全局设置属性”框，然后点击设置和提交：
- en: '![](../images/00235.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00235.jpeg)'
- en: The PyCharm gives you an option to push to Gerrit for code review. If you have
    one, you can also share your files in it. Otherwise, click on Push.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm为你提供了将代码推送到Gerrit进行代码审查的选项。如果你有一个，你也可以在其中分享你的文件。否则，点击推送。
- en: 'A notification message will appear telling you the push completed successfully:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现一个通知消息，告诉你推送成功完成：
- en: '![](../images/00236.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00236.jpeg)'
- en: 'You can refresh your GitHub repo URL from the browser and you will see all
    your files stored in it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从浏览器刷新你的GitHub仓库URL，你将看到所有存储在其中的文件：
- en: '![](../images/00237.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00237.jpeg)'
- en: Now, whenever you make any change in the code inside the tracked files and commit,
    the changes will be tracked and added to the versioning system and will be available
    in GitHub for other users to download and comment on.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当你在跟踪文件中的代码中进行任何更改并提交时，这些更改将被跟踪并添加到版本控制系统中，并可在GitHub上供其他用户下载和评论。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built our network scanner, which can be used during authorized
    penetration testing, and learned how to scan different services and applications
    running on the device to detect their type. Also, we shared our code to GitHub
    so that we could keep different versions of our code and also allow other developers
    to use our shared code and enhance it, then share it again with others.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了我们的网络扫描器，它可以在授权的渗透测试期间使用，并学习了如何扫描设备上运行的不同服务和应用程序以检测它们的类型。此外，我们将我们的代码分享到GitHub，以便我们可以保留我们代码的不同版本，并允许其他开发人员使用我们分享的代码并增强它，然后再次与其他人分享。
