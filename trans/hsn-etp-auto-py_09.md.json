["```py\nimport subprocess\nprint(subprocess.Popen(\"ifconfig\"))\n```", "```py\nprint(subprocess.Popen([\"ifconfig\"]))\n```", "```py\nprint(subprocess.Popen([\"sudo\", \"ifconfig\", \"enp60s0:0\", \"10.10.10.2\", \"netmask\", \"255.255.255.0\", \"up\"])) enp60s0:0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 10.10.10.2  netmask 255.255.255.0  broadcast 10.10.10.255\n        ether d4:81:d7:cb:b7:1e  txqueuelen 1000  (Ethernet)\n        device interrupt 16  \n```", "```py\nprint(subprocess.Popen(\"sudo ifconfig enp60s0:0 10.10.10.2 netmask 255.255.255.0 up\", shell=True)) \n```", "```py\nimport subprocess\nprint(subprocess.Popen([\"cat\", \"interfaces\"], cwd=\"/etc/network\"))  \n```", "```py\nimport subprocess\np = subprocess.Popen([\"ping\", \"8.8.8.8\", \"-c\", \"3\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE) stdout, stderr = p.communicate() print(\"\"\"==========The Standard Output is========== {}\"\"\".format(stdout))   print(\"\"\"==========The Standard Error is========== {}\"\"\".format(stderr))\n```", "```py\nimport subprocess\np = subprocess.Popen([\"grep\", \"subprocess\"], stdout=subprocess.PIPE, stdin=subprocess.PIPE) stdout,stderr = p.communicate(input=b\"welcome to subprocess module\\nthis line is a new line and doesnot contain the require string\")   print(\"\"\"==========The Standard Output is========== {}\"\"\".format(stdout))   print(\"\"\"==========The Standard Error is========== {}\"\"\".format(stderr))\n```", "```py\nimport subprocess\n\ndef ping_destination(ip):   p = subprocess.Popen(['ping', '-c', '3'],\n  stdout=subprocess.PIPE,\n  stderr=subprocess.PIPE)\n  stdout, stderr = p.communicate(input=ip)\n  if p.returncode == 0:\n  print(\"Host is alive\")\n  return True, stdout\n    else:\n  print(\"Host is down\")\n  return False, stderr\n while True:\n    print(ping_destination(raw_input(\"Please enter the host:\"))) \n```", "```py\nimport subprocess\nsubprocess.call([\"ifconfig\", \"docker0\"], stdout=subprocess.PIPE, stderr=None, shell=False) \n```", "```py\nimport subprocess\n\ntry:\n  result = subprocess.check_call([\"ping\", \"HostNotExist\", \"-c\", \"3\"]) except subprocess.CalledProcessError:\n  print(\"Host is not found\") \n```"]