["```py\n    # This code goes in MainWindow.__init__()\n    form = qtw.QWidget()\n    self.setCentralWidget(form)\n    form.setLayout(qtw.QVBoxLayout())\n    self.filename = qtw.QLineEdit()\n    self.filecontent = qtw.QTextEdit()\n    self.savebutton = qtw.QPushButton(\n      'Save',\n      clicked=self.save\n    )\n\n    form.layout().addWidget(self.filename)\n    form.layout().addWidget(self.filecontent)\n    form.layout().addWidget(self.savebutton)\n```", "```py\n  def save(self):\n    filename = self.filename.text()\n    error = ''\n    if not filename:\n      error = 'Filename empty'\n    elif path.exists(filename):\n      error = f'Will not overwrite {filename}'\n    else:\n      try:\n        with open(filename, 'w') as fh:\n          fh.write(self.filecontent.toPlainText())\n      except Exception as e:\n        error = f'Cannot write file: {e}'\n    if error:\n      qtw.QMessageBox.critical(None, 'Error', error)\n```", "```py\nclass Model(qtc.QObject):\n\n  error = qtc.pyqtSignal(str)\n\n  def save(self, filename, content):\n    print(\"save_called\")\n    error = ''\n    if not filename:\n      error = 'Filename empty'\n    elif path.exists(filename):\n      error = f'Will not overwrite {filename}'\n    else:\n      try:\n        with open(filename, 'w') as fh:\n          fh.write(content)\n      except Exception as e:\n        error = f'Cannot write file: {e}'\n    if error:\n      self.error.emit(error)\n```", "```py\nclass View(qtw.QWidget):\n\n  submitted = qtc.pyqtSignal(str, str)\n\n  def __init__(self):\n    super().__init__()\n    self.setLayout(qtw.QVBoxLayout())\n    self.filename = qtw.QLineEdit()\n    self.filecontent = qtw.QTextEdit()\n    self.savebutton = qtw.QPushButton(\n      'Save',\n      clicked=self.submit\n    )\n    self.layout().addWidget(self.filename)\n    self.layout().addWidget(self.filecontent)\n    self.layout().addWidget(self.savebutton)\n\n  def submit(self):\n    filename = self.filename.text()\n    filecontent = self.filecontent.toPlainText()\n    self.submitted.emit(filename, filecontent)\n\n  def show_error(self, error):\n    qtw.QMessageBox.critical(None, 'Error', error)\n```", "```py\n    self.view = View()\n    self.setCentralWidget(self.view)\n\n    self.model = Model()\n\n    self.view.submitted.connect(self.model.save)\n    self.model.error.connect(self.view.show_error)\n```", "```py\n    data = [\n      'Hamburger', 'Cheeseburger',\n      'Chicken Nuggets', 'Hot Dog', 'Fish Sandwich'\n    ]\n    # The list widget\n    listwidget = qtw.QListWidget()\n    listwidget.addItems(data)\n    # The combobox\n    combobox = qtw.QComboBox()\n    combobox.addItems(data)\n    self.layout().addWidget(listwidget)\n    self.layout().addWidget(combobox)\n```", "```py\n    for i in range(listwidget.count()):\n      item = listwidget.item(i)\n      item.setFlags(item.flags() | qtc.Qt.ItemIsEditable)\n```", "```py\n    model = qtc.QStringListModel(data)\n    listview = qtw.QListView()\n    listview.setModel(model)\n```", "```py\n    model_combobox = qtw.QComboBox()\n    model_combobox.setModel(model)\n```", "```py\nclass CsvTableModel(qtc.QAbstractTableModel):\n  \"\"\"The model for a CSV table.\"\"\"\n\n  def __init__(self, csv_file):\n    super().__init__()\n    self.filename = csv_file\n    with open(self.filename) as fh:\n      csvreader = csv.reader(fh)\n      self._headers = next(csvreader)\n      self._data = list(csvreader)\n```", "```py\n  def rowCount(self, parent):\n    return len(self._data)\n\n  def columnCount(self, parent):\n    return len(self._headers)\n```", "```py\n  def data(self, index, role):\n    if role == qtc.Qt.DisplayRole:\n      return self._data[index.row()][index.column()]\n```", "```py\n  def headerData(self, section, orientation, role):\n\n    if (\n      orientation == qtc.Qt.Horizontal and\n      role == qtc.Qt.DisplayRole\n    ):\n      return self._headers[section]\n    else:\n      return super().headerData(section, orientation, role)\n```", "```py\n  def sort(self, column, order):\n    self.layoutAboutToBeChanged.emit() # needs to be emitted before a sort\n    self._data.sort(key=lambda x: x[column])\n    if order == qtc.Qt.DescendingOrder:\n      self._data.reverse()\n    self.layoutChanged.emit() # needs to be emitted after a sort\n```", "```py\n  def flags(self, index):\n    return super().flags(index) | qtc.Qt.ItemIsEditable\n```", "```py\n  def flags(self, index):\n    if index not in self.readonly_indexes:\n      return super().flags(index) | qtc.Qt.ItemIsEditable\n    else:\n      return super().flags(index)\n```", "```py\n  def setData(self, index, value, role):\n    if index.isValid() and role == qtc.Qt.EditRole:\n      self._data[index.row()][index.column()] = value\n      self.dataChanged.emit(index, index, [role])\n      return True\n    else:\n      return False\n```", "```py\n  def data(self, index, role):\n    if role in (qtc.Qt.DisplayRole, qtc.Qt.EditRole):\n      return self._data[index.row()][index.column()]\n```", "```py\n  def insertRows(self, position, rows, parent):\n    self.beginInsertRows(\n      parent or qtc.QModelIndex(),\n      position,\n      position + rows - 1\n    )\n    for i in range(rows):\n      default_row = [''] * len(self._headers)\n      self._data.insert(position, default_row)\n    self.endInsertRows()\n```", "```py\n  def removeRows(self, position, rows, parent):\n    self.beginRemoveRows(\n      parent or qtc.QModelIndex(),\n      position,\n      position + rows - 1\n    )\n    for i in range(rows):\n      del(self._data[position])\n    self.endRemoveRows()\n```", "```py\n  def save_data(self):\n    with open(self.filename, 'w', encoding='utf-8') as fh:\n      writer = csv.writer(fh)\n      writer.writerow(self._headers)\n      writer.writerows(self._data)\n```", "```py\n    # in MainWindow.__init__()\n    self.tableview = qtw.QTableView()\n    self.tableview.setSortingEnabled(True)\n    self.setCentralWidget(self.tableview)\n```", "```py\n  def select_file(self):\n    filename, _ = qtw.QFileDialog.getOpenFileName(\n      self,\n      'Select a CSV file to open\u2026',\n      qtc.QDir.homePath(),\n      'CSV Files (*.csv) ;; All Files (*)'\n    )\n    if filename:\n      self.model = CsvTableModel(filename)\n      self.tableview.setModel(self.model)\n```", "```py\n    menu = self.menuBar()\n    file_menu = menu.addMenu('File')\n    file_menu.addAction('Open', self.select_file)\n```", "```py\n    file_menu.addAction('Save', self.save_file)\n```", "```py\n  def save_file(self):\n    if self.model:\n      self.model.save_data()\n```", "```py\n  def insert_above(self):\n    selected = self.tableview.selectedIndexes()\n    row = selected[0].row() if selected else 0\n    self.model.insertRows(row, 1, None)\n\n  def insert_below(self):\n    selected = self.tableview.selectedIndexes()\n    row = selected[-1].row() if selected else self.model.rowCount(None)\n    self.model.insertRows(row + 1, 1, None)\n```", "```py\n  def remove_rows(self):\n    selected = self.tableview.selectedIndexes()\n    if selected:\n      self.model.removeRows(selected[0].row(), len(selected), None)\n```", "```py\n    edit_menu = menu.addMenu('Edit')\n    edit_menu.addAction('Insert Above', self.insert_above)\n    edit_menu.addAction('Insert Below', self.insert_below)\n    edit_menu.addAction('Remove Row(s)', self.remove_rows)\n```", "```py\n  def save_as(self):\n    filename, _ = qtw.QFileDialog(self)\n    self.data.save_file(filename)\n```", "```py\n  class DataModel(QAbstractTreeModel):\n    def rowCount(self, node):\n      if node > 2:\n        return 1\n      else:\n        return len(self._data[node])\n```", "```py\n    def insertColumns(self, col, count, parent):\n      for row in self._data:\n        for i in range(count):\n          row.insert(col, '')\n```"]