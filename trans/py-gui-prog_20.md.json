["```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom demoMousetrack import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.setMouseTracking(True)\n        self.ui.setupUi(self)\n        self.show()\n    def mouseMoveEvent(self, event):\n        x = event.x()\n        y = event.y()\n        text = \"x: {0}, y: {1}\".format(x, y)\n        self.ui.label.setText(text)\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom demoMouseClicks import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.show()\n    def mousePressEvent(self, event):\n        if event.buttons() & QtCore.Qt.LeftButton:\n            x = event.x()\n            y = event.y()\n            text = \"x: {0}, y: {1}\".format(x, y)\n            self.ui.labelPress.setText('Mouse button pressed at \n            '+text)\n    def mouseReleaseEvent(self, event):\n        x = event.x()\n        y = event.y()\n        text = \"x: {0}, y: {1}\".format(x, y)\n        self.ui.labelRelease.setText('Mouse button released at \n        '+text)\n        self.update()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom PyQt5.QtGui import QPainter, QPen\nfrom PyQt5.QtCore import Qt\nfrom demoDrawDot import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.pos1 = [0,0]\n        self.show()\n    def paintEvent(self, event):\n        qp = QPainter()\n        qp.begin(self)\n        pen = QPen(Qt.black, 5)\n        qp.setPen(pen)\n        qp.drawPoint(self.pos1[0], self.pos1[1])\n        qp.end()\n    def mousePressEvent(self, event):\n        if event.buttons() & QtCore.Qt.LeftButton:\n            self.pos1[0], self.pos1[1] = event.pos().x(), \n            event.pos().y()\n            self.update()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom PyQt5.QtGui import QPainter\nfrom demoDrawLine import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.pos1 = [0,0]\n        self.pos2 = [0,0]\n        self.show()\n    def paintEvent(self, event):\n        qp = QPainter()\n        qp.begin(self)\n        qp.drawLine(self.pos1[0], self.pos1[1], self.pos2[0], \n        self.pos2[1])\n        qp.end()\n    def mousePressEvent(self, event):\n        if event.buttons() & QtCore.Qt.LeftButton:\n            self.pos1[0], self.pos1[1] = event.pos().x(), \n            event.pos().y()\n    def mouseReleaseEvent(self, event):\n            self.pos2[0], self.pos2[1] = event.pos().x(), \n            event.pos().y()\n            self.update()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom PyQt5.QtGui import QPainter, QPen\nfrom PyQt5.QtCore import Qt\nfrom demoDrawDiffLine import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.lineType=\"SolidLine\"\n        self.pos1 = [0,0]\n        self.pos2 = [0,0]\n        self.show()\n    def paintEvent(self, event):\n        qp = QPainter()\n        qp.begin(self)\n        pen = QPen(Qt.black, 4)\n        self.lineTypeFormat=\"Qt.\"+self.lineType\n        if self.lineTypeFormat == \"Qt.SolidLine\":\n            pen.setStyle(Qt.SolidLine)\n            elif self.lineTypeFormat == \"Qt.DashLine\":\n            pen.setStyle(Qt.DashLine)\n            elif self.lineTypeFormat ==\"Qt.DashDotLine\":\n                pen.setStyle(Qt.DashDotLine)\n            elif self.lineTypeFormat ==\"Qt.DotLine\":\n                pen.setStyle(Qt.DotLine)\n            elif self.lineTypeFormat ==\"Qt.DashDotDotLine\":\n                pen.setStyle(Qt.DashDotDotLine)\n                qp.setPen(pen)\n                qp.drawLine(self.pos1[0], self.pos1[1], \n                self.pos2[0], self.pos2[1])\n                qp.end()\n    def mousePressEvent(self, event):\n        if event.buttons() & QtCore.Qt.LeftButton:\n            self.pos1[0], self.pos1[1] = event.pos().x(), \n            event.pos().y()\n    def mouseReleaseEvent(self, event):\n        self.lineType=self.ui.listWidgetLineType.currentItem()\n        .text()\n        self.pos2[0], self.pos2[1] = event.pos().x(), \n        event.pos().y()\n        self.update()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom PyQt5.QtGui import QPainter\nfrom demoDrawCircle import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.pos1 = [0,0]\n        self.pos2 = [0,0]\n        self.show()\n    def paintEvent(self, event):\n        width = self.pos2[0]-self.pos1[0]\n        height = self.pos2[1] - self.pos1[1]\n        qp = QPainter()\n        qp.begin(self)\n        rect = QtCore.QRect(self.pos1[0], self.pos1[1], width, \n        height)\n        startAngle = 0\n        arcLength = 360 *16\n        qp.drawArc(rect, startAngle, arcLength)\n        qp.end()\n    def mousePressEvent(self, event):\n        if event.buttons() & QtCore.Qt.LeftButton:\n            self.pos1[0], self.pos1[1] = event.pos().x(), \n            event.pos().y()\n    def mouseReleaseEvent(self, event):\n        self.pos2[0], self.pos2[1] = event.pos().x(), \n        event.pos().y()\n        self.update()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom PyQt5.QtGui import QPainter\nfrom demoDrawRectangle import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.pos1 = [0,0]\n        self.pos2 = [0,0]\n        self.show()\n    def paintEvent(self, event):\n        width = self.pos2[0]-self.pos1[0]\n        height = self.pos2[1] - self.pos1[1]\n        qp = QPainter()\n        qp.begin(self)\n        qp.drawRect(self.pos1[0], self.pos1[1], width, height)\n        qp.end()\n    def mousePressEvent(self, event):\n        if event.buttons() & QtCore.Qt.LeftButton:\n            self.pos1[0], self.pos1[1] = event.pos().x(), \n            event.pos().y()\n    def mouseReleaseEvent(self, event):\n        self.pos2[0], self.pos2[1] = event.pos().x(), \n        event.pos().y()\n        self.update()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom PyQt5.QtGui import QPainter, QColor, QFont\nfrom PyQt5.QtCore import Qt\nfrom demoDrawText import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.ui.pushButtonDrawText.clicked.connect(self.\n        dispText)\n        self.textToDraw=\"\"\n        self.fontName=\"Courier New\"\n        self.fontSize=5\n        self.show()\n    def paintEvent(self, event):\n        qp = QPainter()\n        qp.begin(self)\n        qp.setPen(QColor(168, 34, 3))\n        qp.setFont(QFont(self.fontName, self.fontSize))\n        qp.drawText(event.rect(), Qt.AlignCenter, \n        self.textToDraw)\n        qp.end()\n    def dispText(self):\n        self.fontName=self.ui.listWidgetFont.currentItem().\n        text()\n        self.fontSize=int(self.ui.comboBoxFontSize.itemText(\n        self.ui.comboBoxFontSize.currentIndex()))\n        self.textToDraw=self.ui.textEdit.toPlainText()\n        self.update()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\npyrcc5 iconresource.qrc -o iconresource_rc.py\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QMainWindow, QApplication\nfrom PyQt5.QtGui import QPainter\nfrom demoToolBars import *\n\nclass AppWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n        self.pos1 = [0,0]\n        self.pos2 = [0,0]\n        self.toDraw=\"\"\n        self.ui.actionCircle.triggered.connect(self.drawCircle)\n        self.ui.actionRectangle.triggered.connect(self.\n        drawRectangle)\n        self.ui.actionLine.triggered.connect(self.drawLine)\n        self.show()\n\n    def paintEvent(self, event):\n        qp = QPainter()\n        qp.begin(self)\n        if self.toDraw==\"rectangle\":\n            width = self.pos2[0]-self.pos1[0]\n            height = self.pos2[1] - self.pos1[1]    \n            qp.drawRect(self.pos1[0], self.pos1[1], width, \n            height)\n        if self.toDraw==\"line\":\n            qp.drawLine(self.pos1[0], self.pos1[1], \n            self.pos2[0], self.pos2[1])\n        if self.toDraw==\"circle\":\n            width = self.pos2[0]-self.pos1[0]\n            height = self.pos2[1] - self.pos1[1]          \n            rect = QtCore.QRect(self.pos1[0], self.pos1[1], \n            width, height)\n            startAngle = 0\n            arcLength = 360 *16\n            qp.drawArc(rect, startAngle, arcLength)     \n            qp.end()\n\n    def mousePressEvent(self, event):\n        if event.buttons() & QtCore.Qt.LeftButton:\n            self.pos1[0], self.pos1[1] = event.pos().x(), \n            event.pos().y()\n\n    def mouseReleaseEvent(self, event):\n        self.pos2[0], self.pos2[1] = event.pos().x(), \n        event.pos().y()   \n        self.update()\n\n    def drawCircle(self):\n        self.toDraw=\"circle\"\n\n    def drawRectangle(self):\n        self.toDraw=\"rectangle\"\n\n    def drawLine(self):\n        self.toDraw=\"line\"\n\napp = QApplication(sys.argv)\nw = AppWindow()\nw.show()\nsys.exit(app.exec_())\n```", "```py\npip install matplotlib\n```", "```py\nx=10, y=20\nx=20, y=40\nx=30, y=60\n```", "```py\nimport matplotlib.pyplot as graph\ngraph.title('Plotting a Line!')\ngraph.xlabel('x - axis')\ngraph.ylabel('y - axis')\nx = [10,20,30]\ny = [20,40,60]\ngraph.plot(x, y)\ngraph.show()\n```", "```py\nimport matplotlib.pyplot as graph\nyears = ['2016', '2017', '2018']\nprofit = [70, 90, 80]\ngraph.bar(years, profit)\ngraph.title('Growth in Business')\ngraph.plot(100)\ngraph.show()\n```"]