["```py\n$ pip install --user PyQtChart\n```", "```py\n$ pip install --user psutil\n```", "```py\nfrom PyQt5 import QtChart as qtch\n```", "```py\nfrom collections import deque\nimport psutil\n```", "```py\n        tabs = qtw.QTabWidget()\n        self.setCentralWidget(tabs)\n```", "```py\nclass DiskUsageChartView(qtch.QChartView):\n\n    chart_title = 'Disk Usage by Partition'\n\n    def __init__(self):\n        super().__init__()\n```", "```py\n        chart = qtch.QChart(title=self.chart_title)\n        self.setChart(chart)\n```", "```py\n        series = qtch.QBarSeries()\n        chart.addSeries(series)\n```", "```py\n        bar_set = qtch.QBarSet('Percent Used')\n        series.append(bar_set)\n```", "```py\n        bar_set = qtch.QBarSet('Percent Used')\n        series.append(bar_set)\n```", "```py\n        partitions = []\n        for part in psutil.disk_partitions():\n            if 'rw' in part.opts.split(','):\n                partitions.append(part.device)\n                usage = psutil.disk_usage(part.mountpoint)\n                bar_set.append(usage.percent)\n```", "```py\n        x_axis = qtch.QBarCategoryAxis()\n        x_axis.append(partitions)\n        chart.setAxisX(x_axis)\n        series.attachAxis(x_axis)\n```", "```py\n        y_axis = qtch.QValueAxis()\n        y_axis.setRange(0, 100)\n        chart.setAxisY(y_axis)\n        series.attachAxis(y_axis)\n```", "```py\n        disk_usage_view = DiskUsageChartView()\n        tabs.addTab(disk_usage_view, \"Disk Usage\")\n```", "```py\n        series.setLabelsVisible(True)\n```", "```py\nclass CPUUsageView(qtch.QChartView):\n\n    num_data_points = 500\n    chart_title = \"CPU Utilization\"\n\n    def __init__(self):\n        super().__init__()\n        chart = qtch.QChart(title=self.chart_title)\n        self.setChart(chart)\n```", "```py\n        self.series = qtch.QSplineSeries(name=\"Percentage\")\n        chart.addSeries(self.series)\n```", "```py\n        self.data = deque(\n            [0] * self.num_data_points, maxlen=self.num_data_points)\n        self.series.append([\n            qtc.QPoint(x, y)\n            for x, y in enumerate(self.data)\n        ])\n```", "```py\n        x_axis = qtch.QValueAxis()\n        x_axis.setRange(0, self.num_data_points)\n        x_axis.setLabelsVisible(False)\n        y_axis = qtch.QValueAxis()\n        y_axis.setRange(0, 100)\n        chart.setAxisX(x_axis, self.series)\n        chart.setAxisY(y_axis, self.series)\n```", "```py\n        self.setRenderHint(qtg.QPainter.Antialiasing)\n```", "```py\n    def refresh_stats(self):\n        usage = psutil.cpu_percent()\n        self.data.append(usage)\n```", "```py\n        new_data = [\n            qtc.QPoint(x, y)\n            for x, y in enumerate(self.data)]\n        self.series.replace(new_data)\n```", "```py\n        self.timer = qtc.QTimer(\n            interval=200, timeout=self.refresh_stats)\n        self.timer.start()\n```", "```py\n        cpu_view = CPUUsageView()\n        tabs.addTab(cpu_view, \"CPU Usage\")\n```", "```py\n    def keyPressEvent(self, event):\n        keymap = {\n            qtc.Qt.Key_Up: lambda: self.chart().scroll(0, -10),\n            qtc.Qt.Key_Down: lambda: self.chart().scroll(0, 10),\n            qtc.Qt.Key_Right: lambda: self.chart().scroll(-10, 0),\n            qtc.Qt.Key_Left: lambda: self.chart().scroll(10, 0),\n            qtc.Qt.Key_Greater: self.chart().zoomIn,\n            qtc.Qt.Key_Less: self.chart().zoomOut,\n        }\n        callback = keymap.get(event.key())\n        if callback:\n            callback()\n```", "```py\nclass MemoryChartView(qtch.QChartView):\n\n    chart_title = \"Memory Usage\"\n    num_data_points = 50\n\n    def __init__(self):\n        super().__init__()\n        chart = qtch.QChart(title=self.chart_title)\n        self.setChart(chart)\n        series = qtch.QStackedBarSeries()\n        chart.addSeries(series)\n        self.phys_set = qtch.QBarSet(\"Physical\")\n        self.swap_set = qtch.QBarSet(\"Swap\")\n        series.append(self.phys_set)\n        series.append(self.swap_set)\n```", "```py\n        self.data = deque(\n            [(0, 0)] * self.num_data_points,\n            maxlen=self.num_data_points)\n        for phys, swap in self.data:\n            self.phys_set.append(phys)\n            self.swap_set.append(swap)\n```", "```py\n        x_axis = qtch.QValueAxis()\n        x_axis.setRange(0, self.num_data_points)\n        x_axis.setLabelsVisible(False)\n        y_axis = qtch.QValueAxis()\n        y_axis.setRange(0, 100)\n        chart.setAxisX(x_axis, series)\n        chart.setAxisY(y_axis, series)\n```", "```py\n    def refresh_stats(self):\n        phys = psutil.virtual_memory()\n        swap = psutil.swap_memory()\n        total_mem = phys.total + swap.total\n        phys_pct = (phys.used / total_mem) * 100\n        swap_pct = (swap.used / total_mem) * 100\n\n        self.data.append(\n            (phys_pct, swap_pct))\n        for x, (phys, swap) in enumerate(self.data):\n            self.phys_set.replace(x, phys)\n            self.swap_set.replace(x, swap)\n```", "```py\n        self.timer = qtc.QTimer(\n            interval=1000, timeout=self.refresh_stats)\n        self.timer.start()\n```", "```py\n        cpu_time_view = MemoryChartView()\n        tabs.addTab(cpu_time_view, \"Memory Usage\")\n```", "```py\n        chart.setAnimationOptions(qtch.QChart.AllAnimations)\n```", "```py\n        chart.setAnimationEasingCurve(\n            qtc.QEasingCurve(qtc.QEasingCurve.OutBounce))\n        chart.setAnimationDuration(1000)\n```", "```py\n        chart.setDropShadowEnabled(True)\n```", "```py\n        chart.setTheme(qtch.QChart.ChartThemeBrownSand)\n```", "```py\n        gradient = qtg.QLinearGradient(\n            chart.plotArea().topLeft(), chart.plotArea().bottomRight())\n        gradient.setColorAt(0, qtg.QColor(\"#333\"))\n        gradient.setColorAt(1, qtg.QColor(\"#660\"))\n        chart.setBackgroundBrush(qtg.QBrush(gradient))\n```", "```py\n        chart.setBackgroundPen(qtg.QPen(qtg.QColor('black'), 5))\n```", "```py\n        chart.setTitleBrush(\n            qtg.QBrush(qtc.Qt.white))\n        chart.setTitleFont(qtg.QFont('Impact', 32, qtg.QFont.Bold))\n```", "```py\n        axis_font = qtg.QFont('Mono', 16)\n        axis_brush = qtg.QBrush(qtg.QColor('#EEF'))\n        y_axis.setLabelsFont(axis_font)\n        y_axis.setLabelsBrush(axis_brush)\n```", "```py\n        grid_pen = qtg.QPen(qtg.QColor('silver'))\n        grid_pen.setDashPattern([1, 1, 1, 0])\n        x_axis.setGridLinePen(grid_pen)\n        y_axis.setGridLinePen(grid_pen)\n```", "```py\n        y_axis.setTickCount(11)\n```", "```py\n        y_axis.setShadesVisible(True)\n        y_axis.setShadesColor(qtg.QColor('#884'))\n```", "```py\n        legend = chart.legend()\n```", "```py\n        legend.setBackgroundVisible(True)\n        legend.setBrush(\n            qtg.QBrush(qtg.QColor('white')))\n```", "```py\n        legend.setFont(qtg.QFont('Courier', 14))\n        legend.setLabelColor(qtc.Qt.darkRed)\n```", "```py\n        legend.setMarkerShape(qtch.QLegend.MarkerShapeCircle)\n```", "```py\n   data_list = [\n       qtc.QPoint(2, 3),\n       qtc.QPoint(4, 5),\n       qtc.QPoint(6, 7)]\n   chart = qtch.QChart()\n   series = qtch.QLineSeries()\n   series.append(data_list)\n   view = qtch.QChartView()\n   view.setChart(chart)\n   view.show()\n```", "```py\n   mainwindow = qtw.QMainWindow()\n   chart = qtch.QChart()\n   series = qtch.QPieSeries()\n   series.append('Half', 50)\n   series.append('Other Half', 50)\n   mainwindow.setCentralWidget(chart)\n   mainwindow.show()\n```", "```py\n   bob_sales = [2500, 1300, 800]\n   alice_sales = [1700, 1850, 2010]\n\n   chart = qtch.QChart()\n   series = qtch.QBarSeries()\n   chart.addSeries(series)\n\n   # add code here\n\n   # end code\n   view = qtch.QChartView()\n   view.setChart(chart)\n   view.show()\n```"]