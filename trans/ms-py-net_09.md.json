["```py\n# Python 3\n$ sudo apt-get install python3-venv\n$ python3 -m venv venv\n\n# Python 2\n$ sudo apt-get install python-virtualenv\n$ virtualenv venv-python2\n```", "```py\n$ source venv/bin/activate\n(venv) $ python\n$ which python\n/home/echou/Master_Python_Networking_second_edition/Chapter09/venv/bin/python\n$ python\nPython 3.5.2 (default, Nov 23 2017, 16:37:01)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n>>> exit()\n(venv) $ deactivate\n```", "```py\n(venv) $ pip install -r requirements.txt\nCollecting Flask==0.10.1 (from -r requirements.txt (line 1))\n  Downloading https://files.pythonhosted.org/packages/db/9c/149ba60c47d107f85fe52564133348458f093dd5e6b57a5b60ab9ac517bb/Flask-0.10.1.tar.gz (544kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 552kB 2.0MB/s\nCollecting Flask-HTTPAuth==2.2.1 (from -r requirements.txt (line 2))\n  Downloading https://files.pythonhosted.org/packages/13/f3/efc053c66a7231a5a38078a813aee06cd63ca90ab1b3e269b63edd5ff1b2/Flask-HTTPAuth-2.2.1.tar.gz\n... <skip>\n  Running setup.py install for Pygments ... done\n  Running setup.py install for python-dateutil ... done\nSuccessfully installed Flask-0.10.1 Flask-HTTPAuth-2.2.1 Flask-SQLAlchemy-1.0 Jinja2-2.7.3 MarkupSafe-0.23 Pygments-1.6 SQLAlchemy-0.9.6 Werkzeug-0.9.6 httpie-0.8.0 itsdangerous-0.24 python-dateutil-2.2 requests-2.3.0 six-1.11.0 \n```", "```py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_networkers():\n    return 'Hello Networkers!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)\n```", "```py\n(venv) $ python chapter9_1.py\n * Running on http://0.0.0.0:5000/\n * Restarting with reloader\n```", "```py\n$ http GET http://172.16.1.173:5000/\nHTTP/1.0 200 OK\nContent-Length: 17\nContent-Type: text/html; charset=utf-8\nDate: Wed, 22 Mar 2017 17:37:12 GMT\nServer: Werkzeug/0.9.6 Python/3.5.2\n\nHello Networkers!\n```", "```py\n$ http [flags] [METHOD] URL [ITEM]\n```", "```py\n$ http GET https://httpbin.org/user-agent\n...\n{\n \"user-agent\": \"HTTPie/0.8.0\"\n}\n```", "```py\n$ http POST https://httpbin.org/post name=eric twitter=at_ericchou married:=true \nHTTP/1.1 200 OK\n...\nContent-Type: application/json\n...\n{\n \"headers\": {\n...\n \"User-Agent\": \"HTTPie/0.8.0\"\n },\n \"json\": {\n \"married\": true,\n \"name\": \"eric\",\n \"twitter\": \"at_ericchou\"\n },\n ...\n \"url\": \"https://httpbin.org/post\"\n}\n```", "```py\n$ cat chapter9_2.py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'You are at index()'\n\n@app.route('/routers/')\ndef routers():\n    return 'You are at routers()'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)\n```", "```py\n# Server\n$ python chapter9_2.py\n\n# Client\n$ http GET http://172.16.1.173:5000/\n...\n\nYou are at index()\n\n$ http GET http://172.16.1.173:5000/routers/\n...\n\nYou are at routers()\n```", "```py\n...\n@app.route('/routers/<hostname>')\ndef router(hostname):\n    return 'You are at %s' % hostname\n\n@app.route('/routers/<hostname>/interface/<int:interface_number>')\ndef interface(hostname, interface_number):\n    return 'You are at %s interface %d' % (hostname, interface_number)\n...\n```", "```py\n$ http GET http://172.16.1.173:5000/routers/host1\n...\nYou are at host1\n\n$ http GET http://172.16.1.173:5000/routers/host1/interface/1\n...\nYou are at host1 interface 1\n\n# Throws exception\n$ http GET http://172.16.1.173:5000/routers/host1/interface/one\nHTTP/1.0 404 NOT FOUND\n...\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n```", "```py\nfrom flask import Flask, url_for\n...\n@app.route('/<hostname>/list_interfaces')\ndef device(hostname):\n    if hostname in routers:\n        return 'Listing interfaces for %s' % hostname\n    else:\n        return 'Invalid hostname'\n\nrouters = ['r1', 'r2', 'r3']\nfor router in routers:\n    with app.test_request_context():\n        print(url_for('device', hostname=router))\n...\n```", "```py\n(venv) $ python chapter9_4.py\n/r1/list_interfaces\n/r2/list_interfaces\n/r3/list_interfaces\n * Running on http://0.0.0.0:5000/\n * Restarting with reloader \n```", "```py\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/routers/<hostname>/interface/<int:interface_number>')\ndef interface(hostname, interface_number):\n    return jsonify(name=hostname, interface=interface_number)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)\n```", "```py\n$ http GET http://172.16.1.173:5000/routers/r1/interface/1\nHTTP/1.0 200 OK\nContent-Length: 36\nContent-Type: application/json\n...\n\n{\n \"interface\": 1,\n \"name\": \"r1\"\n}\n```", "```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\n# Create Flask application, load configuration, and create\n# the SQLAlchemy object\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///network.db'\ndb = SQLAlchemy(app)\n```", "```py\nclass Device(db.Model):\n    __tablename__ = 'devices'\n    id = db.Column(db.Integer, primary_key=True)\n    hostname = db.Column(db.String(120), index=True)\n    vendor = db.Column(db.String(40))\n\n    def __init__(self, hostname, vendor):\n        self.hostname = hostname\n        self.vendor = vendor\n\n    def __repr__(self):\n        return '<Device %r>' % self.hostname\n```", "```py\nif __name__ == '__main__':\n    db.create_all()\n    r1 = Device('lax-dc1-core1', 'Juniper')\n    r2 = Device('sfo-dc1-core1', 'Cisco')\n    db.session.add(r1)\n    db.session.add(r2)\n    db.session.commit()\n```", "```py\n$ python chapter9_db_1.py\n$ ls network.db\nnetwork.db\n```", "```py\n>>> from flask import Flask\n>>> from flask_sqlalchemy import SQLAlchemy\n>>>\n>>> app = Flask(__name__)\n>>> app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///network.db'\n>>> db = SQLAlchemy(app)\n>>> from chapter9_db_1 import Device\n>>> Device.query.all()\n[<Device 'lax-dc1-core1'>, <Device 'sfo-dc1-core1'>]\n>>> Device.query.filter_by(hostname='sfo-dc1-core1')\n<flask_sqlalchemy.BaseQuery object at 0x7f1b4ae07eb8>\n>>> Device.query.filter_by(hostname='sfo-dc1-core1').first()\n<Device 'sfo-dc1-core1'>\n```", "```py\n>>> r3 = Device('lax-dc1-core2', 'Juniper')\n>>> db.session.add(r3)\n>>> db.session.commit()\n>>> Device.query.all()\n[<Device 'lax-dc1-core1'>, <Device 'sfo-dc1-core1'>, <Device 'lax-dc1-core2'>]\n```", "```py\n$ http POST http://172.16.1.173:5000/devices/ 'hostname'='iosv-1' 'loopback'='192.168.0.1' 'mgmt_ip'='172.16.1.225' 'role'='spine' 'vendor'='Cisco' 'os'='15.6'\nHTTP/1.0 201 CREATED\nContent-Length: 2\nContent-Type: application/json\nDate: Fri, 24 Mar 2017 01:45:15 GMT\nLocation: http://172.16.1.173:5000/devices/1\nServer: Werkzeug/0.9.6 Python/3.5.2\n\n{}\n```", "```py\n$ http POST http://172.16.1.173:5000/devices/ 'hostname'='iosv-2' 'loopback'='192.168.0.2' 'mgmt_ip'='172.16.1.226' 'role'='spine' 'vendor'='Cisco' 'os'='15.6'\n...\n$ http POST http://172.16.1.173:5000/devices/ 'hostname'='iosv-3', 'loopback'='192.168.0.3' 'mgmt_ip'='172.16.1.227' 'role'='leaf' 'vendor'='Cisco' 'os'='15.6'\n...\n$ http POST http://172.16.1.173:5000/devices/ 'hostname'='iosv-4', 'loopback'='192.168.0.4' 'mgmt_ip'='172.16.1.228' 'role'='leaf' 'vendor'='Cisco' 'os'='15.6'\n```", "```py\n$ http GET http://172.16.1.173:5000/devices/\nHTTP/1.0 200 OK\nContent-Length: 188\nContent-Type: application/json\nDate: Fri, 24 Mar 2017 01:53:15 GMT\nServer: Werkzeug/0.9.6 Python/3.5.2\n\n{\n \"device\": [\n \"http://172.16.1.173:5000/devices/1\",\n \"http://172.16.1.173:5000/devices/2\",\n \"http://172.16.1.173:5000/devices/3\",\n \"http://172.16.1.173:5000/devices/4\"\n ]\n}\n```", "```py\n$ http GET http://172.16.1.173:5000/devices/1\nHTTP/1.0 200 OK\nContent-Length: 188\nContent-Type: application/json\n...\n{\n \"hostname\": \"iosv-1\",\n \"loopback\": \"192.168.0.1\",\n \"mgmt_ip\": \"172.16.1.225\",\n \"os\": \"15.6\",\n \"role\": \"spine\",\n \"self_url\": \"http://172.16.1.173:5000/devices/1\",\n \"vendor\": \"Cisco\"\n}\n```", "```py\n$ http PUT http://172.16.1.173:5000/devices/1 'hostname'='iosv-1' 'loopback'='192.168.0.1' 'mgmt_ip'='172.16.1.225' 'role'='spine' 'vendor'='Cisco' 'os'='14.6'\nHTTP/1.0 200 OK\n\n# Verification\n$ http GET http://172.16.1.173:5000/devices/1\n...\n{\n \"hostname\": \"r1\",\n \"loopback\": \"192.168.0.1\",\n \"mgmt_ip\": \"172.16.1.225\",\n \"os\": \"14.6\",\n \"role\": \"spine\",\n \"self_url\": \"http://172.16.1.173:5000/devices/1\",\n \"vendor\": \"Cisco\"\n}\n```", "```py\nfrom flask import Flask, url_for, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n# The following is deprecated but still used in some examples\n# from flask.ext.sqlalchemy import SQLAlchemy\n```", "```py\nclass Device(db.Model):\n    __tablename__ = 'devices'\n  id = db.Column(db.Integer, primary_key=True)\n    hostname = db.Column(db.String(64), unique=True)\n    loopback = db.Column(db.String(120), unique=True)\n    mgmt_ip = db.Column(db.String(120), unique=True)\n    role = db.Column(db.String(64))\n    vendor = db.Column(db.String(64))\n    os = db.Column(db.String(64))\n```", "```py\ndef get_url(self):\n    return url_for('get_device', id=self.id, _external=True)\n```", "```py\ndef export_data(self):\n    return {\n        'self_url': self.get_url(),\n  'hostname': self.hostname,\n  'loopback': self.loopback,\n  'mgmt_ip': self.mgmt_ip,\n  'role': self.role,\n  'vendor': self.vendor,\n  'os': self.os\n    }\n\ndef import_data(self, data):\n    try:\n        self.hostname = data['hostname']\n        self.loopback = data['loopback']\n        self.mgmt_ip = data['mgmt_ip']\n        self.role = data['role']\n        self.vendor = data['vendor']\n        self.os = data['os']\n    except KeyError as e:\n        raise ValidationError('Invalid device: missing ' + e.args[0])\n    return self\n```", "```py\n@app.route('/devices/', methods=['GET'])\ndef get_devices():\n    return jsonify({'device': [device.get_url() \n                              for device in Device.query.all()]})\n\n@app.route('/devices/', methods=['POST'])\ndef new_device():\n    device = Device()\n    device.import_data(request.json)\n    db.session.add(device)\n    db.session.commit()\n    return jsonify({}), 201, {'Location': device.get_url()}\n```", "```py\nHTTP/1.0 201 CREATED\nContent-Length: 2\nContent-Type: application/json\nDate: ...\nLocation: http://172.16.1.173:5000/devices/4\nServer: Werkzeug/0.9.6 Python/3.5.2\n```", "```py\n@app.route('/devices/<int:id>', methods=['GET'])\ndef get_device(id):\n    return jsonify(Device.query.get_or_404(id).export_data())\n\n@app.route('/devices/<int:id>', methods=['PUT'])\ndef edit_device(id):\n    device = Device.query.get_or_404(id)\n    device.import_data(request.json)\n    db.session.add(device)\n    db.session.commit()\n    return jsonify({})\n```", "```py\nif __name__ == '__main__':\n    db.create_all()\n    app.run(host='0.0.0.0', debug=True)\n```", "```py\n# We need to install pexpect for our virtual env\n$ pip install pexpect\n\n$ cat chapter9_pexpect_1.py\nimport pexpect\n\ndef show_version(device, prompt, ip, username, password):\n device_prompt = prompt\n child = pexpect.spawn('telnet ' + ip)\n child.expect('Username:')\n child.sendline(username)\n child.expect('Password:')\n child.sendline(password)\n child.expect(device_prompt)\n child.sendline('show version | i V')\n child.expect(device_prompt)\n result = child.before\n child.sendline('exit')\n return device, result\n```", "```py\n$ pip3 install pexpect\n$ python\n>>> from chapter9_pexpect_1 import show_version\n>>> print(show_version('iosv-1', 'iosv-1#', '172.16.1.225', 'cisco', 'cisco'))\n('iosv-1', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.6(3)M2, RELEASE SOFTWARE (fc2)\\r\\n')\n>>> \n```", "```py\nfrom chapter9_pexpect_1 import show_version\n...\n@app.route('/devices/<int:id>/version', methods=['GET'])\ndef get_device_version(id):\n    device = Device.query.get_or_404(id)\n    hostname = device.hostname\n    ip = device.mgmt_ip\n    prompt = hostname+\"#\"\n  result = show_version(hostname, prompt, ip, 'cisco', 'cisco')\n    return jsonify({\"version\": str(result)})\n```", "```py\n$ http GET http://172.16.1.173:5000/devices/4/version\nHTTP/1.0 200 OK\nContent-Length: 210\nContent-Type: application/json\nDate: Fri, 24 Mar 2017 17:05:13 GMT\nServer: Werkzeug/0.9.6 Python/3.5.2\n\n{\n \"version\": \"('iosv-4', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.6(2)T, RELEASE SOFTWARE (fc2)\\r\\nProcessor board ID 9U96V39A4Z12PCG4O6Y0Q\\r\\n')\"\n}\n```", "```py\n@app.route('/devices/<device_role>/version', methods=['GET'])\ndef get_role_version(device_role):\n    device_id_list = [device.id for device in Device.query.all() if device.role == device_role]\n    result = {}\n    for id in device_id_list:\n        device = Device.query.get_or_404(id)\n        hostname = device.hostname\n        ip = device.mgmt_ip\n        prompt = hostname + \"#\"\n  device_result = show_version(hostname, prompt, ip, 'cisco', 'cisco')\n        result[hostname] = str(device_result)\n    return jsonify(result)\n```", "```py\n$ http GET http://172.16.1.173:5000/devices/spine/version\nHTTP/1.0 200 OK\n...\n{\n \"iosv-1\": \"('iosv-1', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.6(2)T, RELEASE SOFTWARE (fc2)\\r\\n')\",\n \"iosv-2\": \"('iosv-2', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.6(2)T, RELEASE SOFTWARE (fc2)\\r\\nProcessor board ID 9T7CB2J2V6F0DLWK7V48E\\r\\n')\"\n}\n\n$ http GET http://172.16.1.173:5000/devices/leaf/version\nHTTP/1.0 200 OK\n...\n{\n \"iosv-3\": \"('iosv-3', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.6(2)T, RELEASE SOFTWARE (fc2)\\r\\nProcessor board ID 9MGG8EA1E0V2PE2D8KDD7\\r\\n')\",\n \"iosv-4\": \"('iosv-4', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.6(2)T, RELEASE SOFTWARE (fc2)\\r\\nProcessor board ID 9U96V39A4Z12PCG4O6Y0Q\\r\\n')\"\n}\n```", "```py\nfrom flask import Flask, url_for, jsonify, request,\n    make_response, copy_current_request_context\n...\nimport uuid\nimport functools\nfrom threading import Thread\n```", "```py\n@app.route('/status/<id>', methods=['GET'])\ndef get_task_status(id):   global background_tasks\n    rv = background_tasks.get(id)\n    if rv is None:\n        return not_found(None)\n   if isinstance(rv, Thread):\n        return jsonify({}), 202, {'Location': url_for('get_task_status', id=id)}\n   if app.config['AUTO_DELETE_BG_TASKS']:\n        del background_tasks[id]\n    return rv\n```", "```py\n@app.route('/devices/<int:id>/version', methods=['GET'])\n@**background** def get_device_version(id):\n    device = Device.query.get_or_404(id)\n...\n\n@app.route('/devices/<device_role>/version', methods=['GET'])\n@**background** def get_role_version(device_role):\n    device_id_list = [device.id for device in Device.query.all() if device.role == device_role]\n...\n```", "```py\n$ http GET http://172.16.1.173:5000/devices/spine/version\nHTTP/1.0 202 ACCEPTED\nContent-Length: 2\nContent-Type: application/json\nDate: <skip>\nLocation: http://172.16.1.173:5000/status/d02c3f58f4014e96a5dca075e1bb65d4\nServer: Werkzeug/0.9.6 Python/3.5.2\n\n{}\n```", "```py\n$ http GET http://172.16.1.173:5000/status/d02c3f58f4014e96a5dca075e1bb65d4\nHTTP/1.0 200 OK\nContent-Length: 370\nContent-Type: application/json\nDate: <skip>\nServer: Werkzeug/0.9.6 Python/3.5.2\n\n{\n \"iosv-1\": \"('iosv-1', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.6(2)T, RELEASE SOFTWARE (fc2)\\r\\n')\",\n \"iosv-2\": \"('iosv-2', b'show version | i V\\r\\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.6(2)T, RELEASE SOFTWARE (fc2)\\r\\nProcessor board ID 9T7CB2J2V6F0DLWK7V48E\\r\\n')\"\n}\n```", "```py\nimport requests, time\n\nserver = 'http://172.16.1.173:5000' endpoint = '/devices/1/version'   # First request to get the new resource r = requests.get(server+endpoint)\nresource = r.headers['location']\nprint(\"Status: {} Resource: {}\".format(r.status_code, resource))\n\n# Second request to get the resource status r = requests.get(resource)\nprint(\"Immediate Status Query to Resource: \" + str(r.status_code))\n\nprint(\"Sleep for 2 seconds\")\ntime.sleep(2)\n# Third request to get the resource status r = requests.get(resource)\nprint(\"Status after 2 seconds: \" + str(r.status_code))\n```", "```py\n$ python chapter9_request_1.py\nStatus: 202 Resource: http://172.16.1.173:5000/status/1de21f5235c94236a38abd5606680b92\nImmediate Status Query to Resource: 202\nSleep for 2 seconds\nStatus after 2 seconds: 200\n```", "```py\n...\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask.ext.httpauth import HTTPBasicAuth\n...\n```", "```py\nauth = HTTPBasicAuth()\n\nclass User(db.Model):\n    __tablename__ = 'users'\n  id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), index=True)\n    password_hash = db.Column(db.String(128))\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def verify_password(self, password):\n        return check_password_hash(self.password_hash, password)\n```", "```py\n@auth.verify_password def verify_password(username, password):\n    g.user = User.query.filter_by(username=username).first()\n    if g.user is None:\n        return False\n return g.user.verify_password(password)\n```", "```py\n@app.before_request @auth.login_required def before_request():\n    pass \n```", "```py\n@auth.error_handler def unauthorized():\n    response = jsonify({'status': 401, 'error': 'unauthorized', \n 'message': 'please authenticate'})\n\n    response.status_code = 401\n  return response\n```", "```py\n>>> from chapter9_9 import db, User\n>>> db.create_all()\n>>> u = User(username='eric')\n>>> u.set_password('secret')\n>>> db.session.add(u)\n>>> db.session.commit()\n>>> exit()\n```", "```py\n$ http GET http://172.16.1.173:5000/devices/\nHTTP/1.0 401 UNAUTHORIZED\nContent-Length: 81\nContent-Type: application/json\nDate: <skip>\nServer: Werkzeug/0.9.6 Python/3.5.2\nWWW-Authenticate: Basic realm=\"Authentication Required\"\n\n{\n \"error\": \"unauthorized\",\n \"message\": \"please authenticate\",\n \"status\": 401\n}\n```", "```py\n$ http --auth eric:secret GET http://172.16.1.173:5000/devices/\nHTTP/1.0 200 OK\nContent-Length: 188\nContent-Type: application/json\nDate: <skip>\nServer: Werkzeug/0.9.6 Python/3.5.2\n\n{\n \"device\": [\n \"http://172.16.1.173:5000/devices/1\",\n \"http://172.16.1.173:5000/devices/2\",\n \"http://172.16.1.173:5000/devices/3\",\n \"http://172.16.1.173:5000/devices/4\"\n ]\n}\n```"]