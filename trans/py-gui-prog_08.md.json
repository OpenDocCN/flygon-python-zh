["```py\nmyimage = tk.PhotoImage(file='my_image.png')\n```", "```py\nmylabel = tk.Label(root, image=myimage)\n```", "```py\nimport tkinter as tk\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        smile = tk.PhotoImage(file='smile.gif')\n        tk.Label(self, image=smile).pack()\nApp().mainloop()\n```", "```py\nfrom os import path\nimage_path = path.join(path.dirname(__file__),\n                       'images/abq_logo_32x20.png')\n```", "```py\nfrom os import path\n\nIMAGE_DIRECTORY = path.dirname(__file__)\n\nABQ_LOGO_32 = path.join(IMAGE_DIRECTORY, 'abq_logo-32x20.png')\nABQ_LOGO_64 = path.join(IMAGE_DIRECTORY, 'abq_logo-64x40.png')\n```", "```py\nfrom .images import ABQ_LOGO_32\n```", "```py\n        self.logo = tk.PhotoImage(file=ABQ_LOGO_32)\n        tk.Label(self, image=self.logo).grid(row=0)\n```", "```py\n        self.taskbar_icon = tk.PhotoImage(file=ABQ_LOGO_64)\n        self.call('wm', 'iconphoto', self._w, self.taskbar_icon)\n```", "```py\nl = tk.Label(text='Hot Dog!', fg='yellow', bg='red')\n```", "```py\nl2 = tk.Label(text='Also Hot Dog!',\n              foreground='#FFFF00',\n              background='#FF0000')\n```", "```py\n        recordinfo = tk.LabelFrame(\n            self, text=\"Record Information\",\n            bg=\"khaki\", padx=10, pady=10)\n...\n        environmentinfo = tk.LabelFrame(\n            self, text=\"Environment Data\",\n            bg='lightblue', padx=10, pady=10)\n...\n        plantinfo = tk.LabelFrame(\n            self, text=\"Plant Data\",\n            bg=\"lightgreen\", padx=10, pady=10)\n```", "```py\n   self.inputs['Notes'].grid(sticky=\"w\", row=4, column=0,\n                             padx=10, pady=10)\n```", "```py\nimport tkinter as tk\ntext = tk.Text(width=50, height=20, bg='black', fg='lightgreen')\ntext.pack()\n```", "```py\ntext.tag_configure('prompt', foreground='magenta')\ntext.tag_configure('output', foreground='yellow')\n```", "```py\ntext.insert('end', '>>> ', ('prompt',))\n```", "```py\ndef on_return(*args):\n    cmd = text.get('prompt.last', 'end').strip()\n```", "```py\n     if cmd:\n        try:\n            output = str(eval(cmd))\n        except Exception as e:\n            output = str(e)\n```", "```py\n   text.insert('end', '\\n' + output, ('output',))\n```", "```py\n    text.insert('end', '\\n>>> ', ('prompt',))\n    return 'break'\n```", "```py\ntext.bind('<Return>', on_return)\n```", "```py\n        self.inserted_rows.clear()\n        self.updated_rows.clear()\n```", "```py\n       if rownum is not None:\n           self.updated_rows.append(rownum)\n```", "```py\n       else:\n           rownum = len(self.data_model.get_all_records()) - 1\n           self.inserted_rows.append(rownum)\n```", "```py\n       if filename:\n            ...\n            self.inserted_rows = []\n            self.updated_rows = []\n```", "```py\n       self.recordlist = v.RecordList(\n            self, self.callbacks,\n            self.inserted_rows,\n            self.updated_rows)\n```", "```py\n    def __init__(self, parent, callbacks,\n                 inserted, updated,\n                 *args, **kwargs):\n        self.inserted = inserted\n        self.updated = updated\n```", "```py\n      self.treeview.tag_configure('inserted', background='lightgreen')\n      self.treeview.tag_configure('updated', background='lightblue')\n```", "```py\n           if self.inserted and rownum in self.inserted:\n                tag = 'inserted'\n            elif self.updated and rownum in self.updated:\n                tag = 'updated'\n            else:\n                tag = ''\n```", "```py\n            self.treeview.insert('', 'end', iid=str(rownum),\n                                 text=str(rownum), values=values,\n                                 tag=tag)\n```", "```py\ntk.Label(text=\"Direct font format\", \n         font=\"Times 20 italic bold\")\n```", "```py\ntk.Label(\n    text=\"Tuple font format\",\n    font=('Droid sans', 15, 'overstrike'))\n```", "```py\nfrom tkinter.font import Font\n```", "```py\nlabelfont = Font(family='Courier', size=30,\n                 weight='bold', slant='roman',\n                 underline=False, overstrike=False)\ntk.Label(text='Using the Font class', font=labelfont).pack()\n```", "```py\ndef toggle_overstrike():\n    labelfont['overstrike'] = not labelfont['overstrike']\n\ntk.Button(text='Toggle Overstrike', command=toggle_overstrike).pack()\n```", "```py\nimport tkinter as tk\nfrom tkinter.font import nametofont\n\ndefault_font = nametofont('TkDefaultFont')\ndefault_font.config(family='Helvetica', size=32)\n\ntk.Label(text='Feeling Groovy').pack()\n```", "```py\n    variables = {\n        ...\n        'font size': {'type': 'int', 'value': 9}\n```", "```py\n        font_size_menu = tk.Menu(self, tearoff=False)\n        for size in range(6, 17, 1):\n            font_size_menu.add_radiobutton(\n                label=size, value=size,\n                variable=settings['font size'])\n        options_menu.add_cascade(label='Font size', \n                                 menu=font_size_menu)\n```", "```py\n    def set_font(self, *args):\n```", "```py\n   font_size = self.settings['font size'].get()\n```", "```py\n        font_names = ('TkDefaultFont', 'TkMenuFont', 'TkTextFont')\n        for font_name in font_names:\n            tk_font = nametofont(font_name)\n            tk_font.config(size=font_size)\n```", "```py\n        self.set_font()\n        self.settings['font size'].trace('w', self.set_font)\n```", "```py\n>>> import tkinter as tk\n>>> from tkinter import ttk\n>>> from pprint import pprint\n```", "```py\n>>> root = tk.Tk()\n>>> cb = ttk.Combobox(root)\n>>> cb.pack()\n>>> style = ttk.Style()\n```", "```py\n>>> cb_stylename = cb.winfo_class()\n>>> print(cb_stylename)\nTCombobox\n```", "```py\n>>> cb_layout = style.layout(cb_stylename)\n>>> pprint(cb_layout)\n[('Combobox.field',\n  {'children':  [('Combobox.downarrow', \n                {'side': 'right', 'sticky': 'ns'}),\n                ('Combobox.padding',\n                {'children': [('Combobox.textarea', \n                {'sticky': 'nswe'})],\n                'expand': '1',\n                'sticky': 'nswe'})],\n                'sticky': 'nswe'})]\n```", "```py\n>>> pprint(style.element_options('Combobox.downarrow'))\n('background', 'relief', 'borderwidth', 'arrowcolor', 'arrowsize')\n```", "```py\n>>> style.configure('TCombobox', arrowcolor='red')\n```", "```py\n>>> print(cb.state())\n()\n>>> cb.state(['active', 'invalid'])\n('!active', '!invalid')\n>>> print(cb.state())\n('active', 'invalid')\n```", "```py\n>>> cb.state(['!invalid'])\n('invalid',)\n>>> print(cb.state())\n('active',)\n```", "```py\n>>> pprint(style.map(cb_stylename))\n{'arrowcolor': [('disabled', '#a3a3a3')],\n 'fieldbackground': [('readonly', '#d9d9d9'), \n                     ('disabled', '#d9d9d9')]}\n```", "```py\n>>> style.map('TCombobox', arrowcolor=[('!invalid',  'blue'), ('invalid', 'focus', 'red')])\n{}\n>>> pprint(style.map('TCombobox'))\n{'arrowcolor': [('!invalid', 'blue'), ('invalid', 'focus', 'red')],\n 'fieldbackground': [('readonly', '#d9d9d9'), ('disabled', '#d9d9d9')]}\n```", "```py\n>>> style.configure('Blue.TCombobox', fieldbackground='blue')\n>>> cb.configure(style='Blue.TCombobox')\n```", "```py\n>>> style.theme_names()\n('clam', 'alt', 'default', 'classic')\n```", "```py\n>>> style.theme_use()\n'default'\n>>> style.theme_use('alt')\n```", "```py\n   style = ttk.Style()\n```", "```py\n        style.configure('RecordInfo.TLabel', background='khaki')\n        style.configure(\n            'EnvironmentInfo.TLabel',\n             background='lightblue')\n        style.configure(\n            'EnvironmentInfo.TCheckbutton',\n            background='lightblue')\n        style.configure('PlantInfo.TLabel', background='lightgreen')\n```", "```py\n       self.inputs['Date'] = w.LabelInput(\n            recordinfo, \"Date\",\n            field_spec=fields['Date'],\n            label_args={'style': 'RecordInfo.TLabel'})\n```", "```py\n       self.inputs['Equipment Fault'] = w.LabelInput(\n            environmentinfo, \"Equipment Fault\",\n            field_spec=fields['Equipment Fault'],\n            label_args={'style': 'EnvironmentInfo.TLabel'},\n            input_args={'style': 'EnvironmentInfo.TCheckbutton'})\n```", "```py\n        self.error_label = ttk.Label(self, textvariable=self.error,\n                                     **label_args)\n```", "```py\nclass TtkSpinbox(ttk.Entry):\n\n    def __init__(self, parent=None, **kwargs):\n        super().__init__(parent, 'ttk::spinbox', **kwargs)\n```", "```py\nclass ValidatedSpinbox(ValidatedMixin, TtkSpinbox):\n```", "```py\n   style = ttk.Style()\n```", "```py\n       widget_class = self.winfo_class()\n       validated_style = 'ValidatedInput.' + widget_class\n```", "```py\n       style.map(\n            validated_style,\n            foreground=[('invalid', 'white'), ('!invalid', 'black')],\n            fieldbackground=[('invalid', 'darkred'), ('!invalid', 'white')]\n       )\n```", "```py\n       self.config(\n            style=validated_style,\n            validate='all',\n            ...\n```", "```py\n    variables = {\n        ...\n        'theme': {'type': 'str', 'value': 'default'}\n    }\n```", "```py\n        style = ttk.Style()\n        theme = self.settings.get('theme').get()\n        if theme in style.theme_names():\n            style.theme_use(theme)\n```", "```py\n        style = ttk.Style()\n        themes_menu = tk.Menu(self, tearoff=False)\n        for theme in style.theme_names():\n            themes_menu.add_radiobutton(\n                label=theme, value=theme,\n                variable=settings['theme']\n            )\n        options_menu.add_cascade(label='Theme', menu=themes_menu)\n```", "```py\n        settings['theme'].trace('w', self.on_theme_change)\n```", "```py\n    def on_theme_change(self, *args):\n        \"\"\"Popup a message about theme changes\"\"\"\n        message = \"Change requires restart\"\n        detail = (\n            \"Theme changes do not take effect\"\n            \" until application restart\")\n            messagebox.showwarning(\n            title='Warning',\n            message=message,\n            detail=detail)\n```"]