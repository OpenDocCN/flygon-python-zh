- en: Appendix A. Working with Wireshark
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 使用Wireshark
- en: When developing network applications, it's often useful to be able to see exactly
    what's being transmitted over the network. Maybe something weird is going on with
    your framing, you're trying to discover the user agent for your browser, or you
    want to see what's happening in the IP protocol or lower layers. We can employ
    a class of tools called **packet sniffers** to do this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发网络应用程序时，能够准确查看网络上传输的内容通常是很有用的。也许您的帧存在一些奇怪的问题，您正在尝试发现浏览器的用户代理，或者您想查看IP协议或更低层发生了什么。我们可以使用一类工具叫做**数据包嗅探器**来做到这一点。
- en: Packet sniffers
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包嗅探器
- en: Packet sniffers are designed to capture all the network traffic that enters
    and leaves a computer, allowing us to see the full, raw contents of all packets
    that our programs send and receive, and all the headers and payloads of all the
    protocols on the stack.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包嗅探器旨在捕获进出计算机的所有网络流量，使我们能够查看我们的程序发送和接收的所有数据包的完整原始内容，以及堆栈上所有协议的所有标头和有效负载。
- en: We're going to take a quick look at one of these applications. It not only provides
    us with a very useful debugging tool for network programming, it also gives you
    a direct view of the structure of network traffic and gives you a better feel
    for the concepts of layering and encapsulation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将快速浏览其中一个应用程序。它不仅为我们提供了一个非常有用的网络编程调试工具，还直接展示了网络流量的结构，并让您更好地了解分层和封装的概念。
- en: A small word of caution before we begin though; if you're using a computer on
    a network you do not own, such as at your place of work or study, you should get
    permission from your network administrator before running a packet sniffer. On
    networks that use network hubs rather than switches, sniffers may capture data
    destined for computers other than your own. Also, running a packet sniffer may
    be against your network's usage policy. Even if it's not, packet sniffers are
    powerful network monitoring tools and administrators generally like to be aware
    of when they're being used.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，有一个小小的警告；如果您在不属于自己的网络上使用计算机，比如在您的工作场所或学习场所，您应该在运行数据包嗅探器之前获得网络管理员的许可。在使用网络集线器而不是交换机的网络上，嗅探器可能会捕获发送到其他计算机的数据。此外，运行数据包嗅探器可能违反您的网络使用政策。即使不违反，数据包嗅探器也是强大的网络监控工具，管理员通常希望在使用时知道。
- en: If this turns out to be difficult, don't panic! This book doesn't rely on having
    access to a packet sniffer at any point; we just think that you'll find them handy
    while programming for networks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这变得困难，不要惊慌！本书在任何时候都不依赖于使用数据包嗅探器；我们只是认为在编程网络时会发现它们很方便。
- en: Wireshark
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wireshark
- en: The program that we're going to take a look at is called **Wireshark**. It's
    an open source packet sniffer with support for interpreting a vast range of network
    protocols.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的程序叫做**Wireshark**。它是一个支持解释广泛的网络协议的开源数据包嗅探器。
- en: Installation
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: For Windows and Linux, Wireshark can be downloaded from [http://www.wireshark.org](http://www.wireshark.org).
    On Debian, Ubuntu, RHEL, CentOS, and Fedora it's available as the `wireshark`
    package.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows和Linux，Wireshark可以从[http://www.wireshark.org](http://www.wireshark.org)下载。在Debian，Ubuntu，RHEL，CentOS和Fedora上，它作为`wireshark`软件包可用。
- en: You'll need to have root or administrator access in order to install this. On
    Windows, make sure that you install or update the `WinPcap` library if it asks
    you to do so, and also allow it to start the `WinPcap` driver at boot time when
    prompted.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要root或管理员访问权限才能安装此软件。在Windows上，如果要求安装或更新`WinPcap`库，请确保这样做，并在提示时允许它在启动时启动`WinPcap`驱动程序。
- en: 'On Debian and Ubuntu, you will need to configure Wireshark to allow regular
    users to run captures. Run the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Debian和Ubuntu上，您需要配置Wireshark以允许常规用户运行捕获。运行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Say `Yes` to `Should non-superusers be able to capture packets?` Note that
    this doesn''t automatically allow all non-super users to use Wireshark, they still
    need to be added to the `wireshark` group. Do this now for your own user, for
    example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Should non-superusers be able to capture packets?`选择`Yes`。请注意，这并不会自动允许所有非超级用户使用Wireshark，他们仍然需要被添加到`wireshark`组。例如，现在为您自己的用户执行此操作：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You may need to log out and log in again for this to take effect, or possibly
    even reboot. For other Linux distributions, check their documentation, or there
    are instructions on the Wireshark wiki for assigning these rights at [http://wiki.wireshark.org/CaptureSetup/CapturePrivileges](http://wiki.wireshark.org/CaptureSetup/CapturePrivileges).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要注销并重新登录才能生效，或者甚至需要重新启动。对于其他Linux发行版，请查看其文档，或者在Wireshark的wiki上有关于分配这些权限的说明，网址是[http://wiki.wireshark.org/CaptureSetup/CapturePrivileges](http://wiki.wireshark.org/CaptureSetup/CapturePrivileges)。
- en: If you run into trouble at any point, you can get further help regarding the
    installation on the wiki at [http://wiki.wireshark.org/CaptureSetup](http://wiki.wireshark.org/CaptureSetup).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何时候遇到问题，您可以在[http://wiki.wireshark.org/CaptureSetup](http://wiki.wireshark.org/CaptureSetup)的wiki上获得有关安装的更多帮助。
- en: Once configured, on Linux, just run `wireshark` in an `X` session to start the
    graphical interface.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成后，在Linux上只需在`X`会话中运行`wireshark`即可启动图形界面。
- en: Capturing some packets
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获一些数据包
- en: 'Once you have Wireshark installed and running, you''ll see a window that looks
    like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并运行Wireshark后，您将看到一个窗口，类似于这样：
- en: '![Capturing some packets](graphics/6008OS_Appendix_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![捕获一些数据包](graphics/6008OS_Appendix_01.jpg)'
- en: 'Packet sniffing usually works in two steps: first, we run a traffic capture
    session, and then we analyze the captured traffic. During a capture, Wireshark
    asks the operating system for a copy of all the network traffic it processes,
    which Wireshark then keeps in a buffer for us to analyze. Wireshark provides us
    with tools that let us filter the captured data so that we can work on only the
    data streams we want, and drill into each packet in order to take a look at the
    header data and the payloads.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包嗅探通常分为两个步骤：首先，我们运行一个流量捕获会话，然后分析捕获的流量。在捕获过程中，Wireshark向操作系统请求其处理的所有网络流量的副本，然后Wireshark将其保存在缓冲区中供我们分析。Wireshark提供了工具，让我们过滤捕获的数据，以便我们只处理我们想要的数据流，并深入每个数据包以查看标头数据和有效载荷。
- en: So first, we need to select the interfaces on which we want to capture the traffic.
    We can see that there's a list of interfaces below the **Start** button. Wireshark
    captures all the network traffic that passes over all the interfaces that we select;
    this usually means that we end up capturing a lot of data that we're not actually
    interested in. In order to reduce this noise, it's best to capture as few interfaces
    as possible, ideally just one.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，我们需要选择要捕获流量的接口。我们可以看到**开始**按钮下面有一个接口列表。Wireshark捕获我们选择的所有接口上传输的所有网络流量；这通常意味着我们最终会捕获许多我们实际上不感兴趣的数据。为了减少这种噪音，最好尽可能少地捕获接口，理想情况下只捕获一个接口。
- en: We're going to use the first RFC downloader, from [Chapter 1](ch01.html "Chapter 1. Network
    Programming and Python"), *Network Programming and Python*, `RFC_downloader.py`,
    to generate some network traffic to analyze. Since this program communicates with
    a host on the Internet, we want to capture the network interface that provides
    our Internet connection.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第一个RFC下载器，来自[第1章](ch01.html "第1章。网络编程和Python")*网络编程和Python*，`RFC_downloader.py`，生成一些要分析的网络流量。由于此程序与互联网上的主机通信，我们希望捕获提供我们互联网连接的网络接口。
- en: 'If you''re not sure which interface is your Internet interface, then click
    on the **Interface List** button above the **Start** button to bring up the window,
    as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定哪个接口是您的互联网接口，那么点击上面的**开始**按钮旁边的**接口列表**按钮，以打开窗口，如下面的屏幕截图所示：
- en: '![Capturing some packets](graphics/6008OS_Appendix_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![捕获一些数据包](graphics/6008OS_Appendix_02.jpg)'
- en: On the right-side of the dialog box, you can see the live counts of the number
    of packets that have passed through each of the interfaces, since we opened the
    window. You can generate some Internet traffic by browsing a website if there's
    not much happening. The interface with the fastest rising packet count will be
    the Internet interface (ignore the `any` interface on Linux). Make a note of the
    interface's name and close the window.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话框的右侧，您可以看到自打开窗口以来通过每个接口的数据包数量的实时计数。如果没有太多活动，您可以通过浏览网站来生成一些互联网流量。数据包计数上升最快的接口将是互联网接口（在Linux上忽略`any`接口）。记下接口的名称并关闭窗口。
- en: 'Network interfaces can capture packets in one of two modes: promiscuous mode
    and non-promiscuous mode. In promiscuous mode, the interface will pass all traffic
    that it receives on to the sniffer, even if it is traffic that is not destined
    for our computer. In non-promiscuous mode, the interface filters out any traffic
    that is not for our computer. Unless you have a very specific reason to, it''s
    usually best to run in non-promiscuous mode, as this reduces the amount of extraneous
    traffic we need to filter manually. Wireshark enables promiscuous mode by default.
    To disable, go into **Capture** | **Options...** and ensure ''Use promiscuous
    mode on all interfaces'' is unticked. Then check the ''Prom Mode'' column in the
    interfaces list at the top of the options window, and ensure it''s says disabled
    for the interfaces you''re capturing on. When done, close the options window to
    return to the main screen.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 网络接口可以以两种模式之一捕获数据包：混杂模式和非混杂模式。在混杂模式下，接口将把它接收到的所有流量传递给嗅探器，即使这些流量并非是发送到我们计算机的流量。在非混杂模式下，接口会过滤掉任何不是发送给我们计算机的流量。除非您有非常特定的原因，通常最好以非混杂模式运行，因为这减少了我们需要手动过滤的多余流量。Wireshark默认启用混杂模式。要禁用，进入**捕获**
    | **选项...**，确保未选中“在所有接口上使用混杂模式”。然后检查选项窗口顶部的接口列表中的“Prom Mode”列，并确保您要捕获的接口的状态为已禁用。完成后，关闭选项窗口返回到主屏幕。
- en: 'Select your Internet interface from the interface list, which is below the
    **Start** button on the main screen, and click on **Start** to begin a capture**.**
    After a moment or two, we should see some packets coming in:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从主屏幕上**开始**按钮下方的接口列表中选择您的互联网接口，并点击**开始**开始捕获。一会儿后，我们应该会看到一些数据包进来：
- en: '![Capturing some packets](graphics/6008OS_Appendix_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![捕获一些数据包](graphics/6008OS_Appendix_03.jpg)'
- en: 'While Wireshark is capturing packets, let''s generate some traffic that we''re
    interested in analyzing. Run the `RFC_downloader.py` RFC downloader program in
    a terminal to download RFC 2324:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在Wireshark捕获数据包时，让我们生成一些我们有兴趣分析的流量。在终端中运行`RFC_downloader.py` RFC下载程序以下载RFC 2324：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once the download has run, return to Wireshark and stop the capture by clicking
    on the **Stop** button in the toolbar. If something goes awry with the capture,
    don't worry, we can try it again; just stop the capture, then click on the **Start
    a new live capture** button in the toolbar, and don't save changes to the previous
    capture when prompted. When it's running, run `RFC_downloader.py` again. Once
    you have a capture that contains the RFC downloader traffic, let's take a closer
    look at it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，返回到Wireshark，并通过工具栏中的**停止**按钮停止捕获。如果捕获出现问题，不要担心，我们可以再试一次；只需停止捕获，然后在工具栏中点击**开始新的实时捕获**按钮，并在提示时不保存对先前捕获的更改。运行`RFC_downloader.py`。一旦您有包含RFC下载器流量的捕获，让我们仔细看一下。
- en: As shown in the preceding screenshot, the Wireshark capture screen is broken
    into three sections. The top section lists the captured packets, one packet per
    row, and provides basic information for each packet, such as the source and destination
    addresses, and the name of the highest layer protocol for which the packet contains
    data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中可以看到，Wireshark捕获屏幕分为三个部分。顶部部分列出了捕获的数据包，每行一个数据包，并为每个数据包提供基本信息，例如源和目的地地址，以及数据包包含数据的最高层协议的名称。
- en: The middle section contains a breakdown of the protocols present in the selected
    packet. The top line is equivalent to layer 1 in the network stack, with subsequent
    lines corresponding to the higher layers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 中间部分包含所选数据包中存在的协议的详细信息。顶部行相当于网络堆栈中的第1层，随后的行对应于更高的层。
- en: The bottom section contains a raw listing of the entire captured packet. This
    is broken into three main vertical areas. The numbers in the first column on the
    left-hand side are the byte offsets in hex of the start of the line from the beginning
    of the packet. The middle section consists of two columns of 8 hexadecimal numbers
    each; this section shows each byte in the packet as a hexadecimal integer. The
    section on the right-hand side, consisting of two columns of ASCII characters,
    is the ASCII representation of the bytes in the packet. Dots are used here, where
    a byte value maps to a nonprintable character.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 底部部分包含整个捕获数据包的原始列表。这被分为三个主要的垂直区域。左侧第一列中的数字是从数据包开头的十六进制字节偏移量。中间部分包括两列每列8个十六进制数字；这部分显示数据包中的每个字节作为十六进制整数。右侧部分包括两列ASCII字符，是数据包中字节的ASCII表示。在这里使用点，当一个字节值映射到一个不可打印的字符时。
- en: Filtering
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤
- en: Let's see if we can find the packets that our downloader program has generated.
    There's probably a fair amount of extra network data in the capture, so first,
    we need to filter this out.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的下载程序生成了哪些数据包。在捕获中可能有相当多额外的网络数据，所以首先，我们需要将其过滤掉。
- en: 'Wireshark lets us filter using any property of any of the protocols it supports.
    To filter, we use the filter box that is under the toolbar. Wireshark has a complete
    filter language, which you can investigate with the help system. For now, we''re
    just going to do a few basic queries to find our packets. Type `http` in the filter
    box, and click on the **Apply** button. This restricts the displayed packets to
    just those that involve the HTTP protocol, as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark允许我们使用其支持的任何协议的任何属性进行过滤。要进行过滤，我们使用工具栏下方的过滤框。Wireshark有一个完整的过滤语言，您可以在帮助系统中进行调查。现在，我们只是要做一些基本的查询来找到我们的数据包。在过滤框中输入`http`，然后单击**应用**按钮。这将限制显示的数据包只涉及HTTP协议，如下图所示：
- en: '![Filtering](graphics/6008OS_Appendix_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![过滤](graphics/6008OS_Appendix_04.jpg)'
- en: Even if the only HTTP traffic that you deliberately generated during the capture
    session was through the downloader program, it's possible that we'll see more
    HTTP packets than just those. This is because some programs, such as file cloud
    storage clients, communicate with their services in the background quite frequently
    through HTTP. Also, Wireshark currently identifies SSDP protocol packets as HTTP,
    since SSDP is derived from HTTP.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在捕获会话期间您故意生成的唯一HTTP流量是通过下载程序，我们可能会看到更多的HTTP数据包。这是因为一些程序，例如文件云存储客户端，经常通过HTTP在后台与其服务进行通信。此外，Wireshark目前将SSDP协议数据包识别为HTTP，因为SSDP源自HTTP。
- en: Not a problem though, we can refine our filter. The unique identifying feature
    of our downloader packets is the server that we communicated with, [www.ietf.org](http://www.ietf.org).
    If we take a look at the packet list, you can see that the source and destination
    addresses of the captured packets are IP addresses, so before we write our new
    filter, we need to find out the IP address of [www.ietf.org](http://www.ietf.org).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不过没关系，我们可以优化我们的过滤器。我们下载器数据包的唯一标识特征是我们通信的服务器，[www.ietf.org](http://www.ietf.org)。如果我们看一下数据包列表，你会发现捕获的数据包的源和目的地地址是IP地址，所以在编写新的过滤器之前，我们需要找出[www.ietf.org](http://www.ietf.org)的IP地址。
- en: 'Retrieving the IP address of a hostname is called **name resolution**, and
    this is exactly the task that DNS was designed for. There are several mechanisms
    that we can use to interact with DNS. On Linux and Windows, we can use the `nslookup`
    command-line tool. Run the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 获取主机名的IP地址称为**名称解析**，这正是DNS设计的任务。我们可以使用几种机制与DNS交互。在Linux和Windows上，我们可以使用`nslookup`命令行工具。运行以下命令：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output indicates that [www.ietf.org](http://www.ietf.org/) is actually
    hosted at two IP addresses: `104.20.1.85` and `104.20.0.85`. This is becoming
    increasingly frequent as more websites deploy load balancing and content delivery
    networks to spread the workload across servers.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出表明[www.ietf.org](http://www.ietf.org/)实际上托管在两个IP地址上：`104.20.1.85`和`104.20.0.85`。随着越来越多的网站部署负载均衡和内容传送网络来分散服务器的工作负载，这种情况变得越来越频繁。
- en: A quick glance at our captured HTTP packets list will probably allow us to see
    which server we ended up connecting to. In the preceding example, it's `104.20.0.85`.
    However, to make sure, we can filter for both the IP addresses.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看我们捕获的HTTP数据包列表可能会让我们看到我们最终连接到的服务器。在前面的示例中，它是`104.20.0.85`。但是，为了确保，我们可以过滤这两个IP地址。
- en: Note that `nslookup` may return different IP addresses than those shown in the
    preceding example. Web services can change IP addresses of their servers for various
    reasons.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`nslookup`可能返回与前面示例中显示的IP地址不同的IP地址。Web服务可以因各种原因更改其服务器的IP地址。
- en: 'So now, we can filter for [www.ietf.org](http://www.ietf.org/). Using the IP
    addresses you just resolved, enter this new query in the filter box:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以过滤[www.ietf.org](http://www.ietf.org/)。使用刚刚解析的IP地址，输入以下新查询到过滤框中：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Click on the **Apply** button again. This query adds the extra condition that,
    as well as involving the HTTP protocol, packets must have an IP source or destination
    address of either `104.20.1.85` or `104.20.0.85`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 再次单击**应用**按钮。此查询添加了额外的条件，即除了涉及HTTP协议外，数据包必须具有IP源地址或目的地址为`104.20.1.85`或`104.20.0.85`。
- en: 'The `ip.addr` syntax is a typical example of filtering on a property of a protocol.
    There are many more. For example, if we want to filter by just the source address
    rather than both the source and destination addresses, we can use the following
    command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`ip.addr`语法是过滤协议属性的典型示例。还有很多其他的。例如，如果我们只想按源地址过滤而不是源地址和目的地址，我们可以使用以下命令：'
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To explore all the available protocols and their properties, click on the **Expression...**
    button to the right of the filter box. In the left-hand pane of the window that
    appears, we can see all the protocols listed, and we can expand one by clicking
    on the corresponding triangle or **+** symbol, which will show its properties.
    In this window, IP is listed as `IPv4`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要探索所有可用的协议及其属性，请单击过滤框右侧的**表达式...**按钮。在出现的窗口的左侧窗格中，我们可以看到列出的所有协议，并且可以通过单击相应的三角形或**+**符号来展开其中一个，这将显示其属性。在此窗口中，IP被列为`IPv4`。
- en: Inspecting packets
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查数据包
- en: 'Getting back to our RFC downloader packets, let''s close the expression window
    if it''s open, and turn our attention to the main window. After applying the `http
    and (ip.addr == 104.20.1.85 or ip.addr == 104.20.0.85)` filter, we should see
    two packets listed in the top section of the screen:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的RFC下载器数据包，如果表达式窗口打开了，让我们关闭它，然后将注意力转向主窗口。应用了`http and (ip.addr == 104.20.1.85
    or ip.addr == 104.20.0.85)`过滤器后，我们应该在屏幕顶部的列表中看到两个数据包：
- en: '![Inspecting packets](graphics/6008OS_Appendix_05.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![检查数据包](graphics/6008OS_Appendix_05.jpg)'
- en: The first is the HTTP request that `urlopen()` sent to the server, and the second
    is the server's HTTP response.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是`urlopen()`发送到服务器的HTTP请求，第二个是服务器的HTTP响应。
- en: Click on the first packet to select it, and turn your attention to the middle
    section of the window. We can see five lines of information. Each corresponds
    to a layer in the network stack and the protocol that is being used in this layer.
    While keeping an eye on the raw listing of the packets in the bottom section of
    the screen, click on the different lines in the middle section. You'll see that
    different areas of the raw packet listing get highlighted. The highlighted areas
    are the sections of the raw packet that are relevant for the protocol that you
    clicked on. For the first layer (the line beginning in **Frame**), it highlights
    the whole packet, since the whole packet is what's sent over the wire. For the
    last layer, **Hypertext Transfer Protocol**, it highlights the section of the
    packet that is the HTTP request, as shown in the preceding example. For the layers
    in between, it just highlights the header for that protocol's encapsulated packet.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 单击第一个数据包以选择它，然后将注意力转向窗口的中间部分。我们可以看到五行信息。每一行对应网络堆栈中的一层和该层中使用的协议。在屏幕底部的原始数据包列表上保持关注，单击中间部分的不同行。您会看到突出显示不同区域的原始数据包列表。突出显示的区域是您单击的协议相关的原始数据包的部分。对于第一层（以**Frame**开头的行），它会突出显示整个数据包，因为整个数据包是通过电线发送的。对于最后一层，**超文本传输协议**，它会突出显示数据包的部分，即HTTP请求，如前面的示例所示。对于中间的层，它只会突出显示该协议封装数据包的标头。
- en: 'We can drill into the header data for each encapsulated packet by clicking
    on the triangle or **+** symbols to the left of each protocol line in the middle
    section. If we do this for the **Hypertext Transfer Protocol** line, we get something
    like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过单击中间部分协议行左侧的三角形或**+**符号来查看每个封装数据包的标头数据。如果我们对**超文本传输协议**行这样做，我们会得到类似于这样的东西：
- en: '![Inspecting packets](graphics/6008OS_Appendix_06.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![检查数据包](graphics/6008OS_Appendix_06.jpg)'
- en: The `HTTP` headers in our request have been interpreted by Wireshark and broken
    out to make them more readable. You can explore the other protocols' data in the
    same way.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的请求中的`HTTP`标头已被Wireshark解释并拆分，以使其更易读。您可以以相同的方式探索其他协议的数据。
- en: 'Let''s inspect the second packet that we captured, the HTTP response. Click
    on it now in the top section of the window:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查我们捕获的第二个数据包，即HTTP响应。现在在窗口的顶部部分单击它：
- en: '![Inspecting packets](graphics/6008OS_Appendix_07.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![检查数据包](graphics/6008OS_Appendix_07.jpg)'
- en: You'll notice some extra lines for this packet in the middle section. The line
    that refers to reassembled TCP segments indicates that the HTTP response was actually
    large enough to be broken across four TCP packets. Wireshark recognized this and
    reassembled the full HTTP packet by combining the relevant TCP packets, so when
    we click on the **Hypertext Transport Protocol** line, we see the whole HTTP packet.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到中间部分的这个数据包有一些额外的行。指示重新组装的TCP段的行表明HTTP响应实际上足够大，可以跨四个TCP数据包进行分割。Wireshark识别到这一点，并通过组合相关的TCP数据包重新组装了完整的HTTP数据包，因此当我们单击**超文本传输协议**行时，我们会看到整个HTTP数据包。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't see this, you may need to switch it on in the options menu. Go
    to **Edit** | **Preferences…** to bring up the preference window, then expand
    **Protocols** in the list on the left-hand side of the screen, and scroll down
    and find **HTTP**. Make sure that both the options that mention spanning multiple
    TCP segments are checked.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到这个选项，您可能需要在选项菜单中打开它。转到**编辑** | **首选项...**以打开首选项窗口，然后在屏幕左侧的列表中展开**协议**，并向下滚动找到**HTTP**。确保检查了涉及跨多个TCP段的两个选项。
- en: Finally, the **Line-based text data** line shows us the response content media
    type (described in [Chapter 2](ch02.html "Chapter 2. HTTP and Working with the
    Web"), *HTTP and Working with the Web*), and expanding the line shows us the text
    data of the body of the response.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**基于行的文本数据**行向我们显示了响应内容的媒体类型（在[第2章](ch02.html "第2章。HTTP和与网络工作")中描述，*HTTP和与网络工作*），展开该行会显示响应正文的文本数据。
- en: A versatile tool
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个多功能工具
- en: As you'll probably notice from browsing the menus, Wireshark is a very feature-rich
    network analyzer, and we've barely even scratched the surface of its full capabilities.
    I encourage you to keep it handy as you work with this book, and do use it wherever
    you'd like to take a closer look at the data being sent or received over the network.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在浏览菜单时可能会注意到的那样，Wireshark是一个功能非常丰富的网络分析器，我们甚至还没有完全发掘出它的全部功能。我鼓励您在阅读本书时随时使用它，并且在您希望更仔细地查看网络上传输或接收的数据时使用它。
