- en: Creating a User Interface with Qt Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt组件创建用户界面
- en: 'In this chapter, we will learn to use the following widgets:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习使用以下小部件：
- en: Displaying a welcome message
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示欢迎消息
- en: Using the Radio Button widget
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单选按钮小部件
- en: Grouping radio buttons
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分组单选按钮
- en: Displaying options in the form of checkboxes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以复选框形式显示选项
- en: Displaying two groups of checkboxes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示两组复选框
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: We will be learning to create GUI applications using the Qt toolkit. The Qt
    toolkit, known simply as Qt, is a cross-platform application and UI framework
    developed by **Trolltech**, which is used for developing GUI applications. It
    runs on several platforms, including Windows, macOS X, Linux, and other UNIX platforms.
    It is also referred to as a widget toolkit because it provides widgets such as
    buttons, labels, textboxes, push buttons, and list boxes, which are required for
    designing a GUI. It includes a cross-platform collection of classes, integrated
    tools, and a cross-platform IDE. To create real-time applications, we will be
    making use of Python bindings for the Qt toolkit called, **PyQt5**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习使用Qt工具包创建GUI应用程序。Qt工具包，简称Qt，是由Trolltech开发的跨平台应用程序和UI框架，用于开发GUI应用程序。它可以在多个平台上运行，包括Windows、macOS
    X、Linux和其他UNIX平台。它也被称为小部件工具包，因为它提供了按钮、标签、文本框、推按钮和列表框等小部件，这些小部件是设计GUI所必需的。它包括一组跨平台的类、集成工具和跨平台IDE。为了创建实时应用程序，我们将使用Python绑定的Qt工具包，称为PyQt5。
- en: PyQt
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyQt
- en: PyQt is a set of Python bindings for the cross-platform application framework that
    combines all the advantages of Qt and Python. With PyQt, you can include Qt libraries
    in Python code, enabling you to write GUI applications in Python. In other words,
    PyQt allows you to access all the facilities provided by Qt through Python code.
    Since PyQt depends on the Qt libraries to run, when you install PyQt, the required
    version of Qt is also installed automatically on your machine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt是一个用于跨平台应用程序框架的Python绑定集合，结合了Qt和Python的所有优势。使用PyQt，您可以在Python代码中包含Qt库，从而能够用Python编写GUI应用程序。换句话说，PyQt允许您通过Python代码访问Qt提供的所有功能。由于PyQt依赖于Qt库来运行，因此在安装PyQt时，所需版本的Qt也会自动安装在您的计算机上。
- en: A GUI application may consist of a main window with several dialogs or just
    a single dialog. A small GUI application usually consists of at least one dialog.
    A dialog application contains buttons. It doesn't contain a menu bar, toolbar,
    status bar, or central widget, whereas a main window application normally has
    all of those.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: GUI应用程序可能包括一个带有多个对话框的主窗口，或者只包括一个对话框。一个小型GUI应用程序通常至少包括一个对话框。对话框应用程序包含按钮。它不包含菜单栏、工具栏、状态栏或中央小部件，而主窗口应用程序通常包括所有这些。
- en: 'Dialogs are of the following two types:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框有以下两种类型：
- en: '**Modal**: This dialog is one that blocks the user from interacting with other
    parts of the application. The dialog is the only part of the application that
    the user can interact with. Until the dialog is closed, no other part of the application
    can be accessed.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模态**：这种对话框会阻止用户与应用程序的其他部分进行交互。对话框是用户可以与之交互的应用程序的唯一部分。在对话框关闭之前，无法访问应用程序的其他部分。'
- en: '**Modeless**: This dialog is the opposite of a modal dialog. When a modeless
    dialog is active, the user is free to interact with the dialog and with the rest
    of the application.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非模态**：这种对话框与模态对话框相反。当非模态对话框处于活动状态时，用户可以自由地与对话框和应用程序的其他部分进行交互。'
- en: Ways of creating GUI applications
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建GUI应用程序的方式
- en: 'There are the following two ways to write a GUI application:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有以下两种方式编写GUI应用程序：
- en: From scratch, using a simple text editor
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单文本编辑器从头开始
- en: With Qt Designer, a visual design tool with which you can create a user interface
    quickly using drag and drop
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Qt Designer，一个可视化设计工具，可以快速使用拖放功能创建用户界面
- en: You will be using Qt Designer to develop GUI applications in PyQt, as it is
    a quick and easy way to design user interfaces without writing a single line of
    code. So, launch Qt Designer by double-clicking on its icon on desktop.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用Qt Designer在PyQt中开发GUI应用程序，因为这是一种快速简便的设计用户界面的方法，无需编写一行代码。因此，双击桌面上的图标启动Qt
    Designer。
- en: 'On opening, Qt Designer asks you to select a template for your new application,
    as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 打开时，Qt Designer会要求您为新应用程序选择模板，如下截图所示：
- en: '![](assets/4c0a403e-cd4c-427f-93aa-fcfdc443eefd.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4c0a403e-cd4c-427f-93aa-fcfdc443eefd.png)'
- en: Qt Designer provides a number of templates that are suitable for different kinds
    of applications. You can choose any of these templates and then click the Create
    button.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Designer提供了适用于不同类型应用程序的多个模板。您可以选择其中任何一个模板，然后单击“创建”按钮。
- en: 'Qt Designer provides the following predefined templates for a new application:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Designer为新应用程序提供以下预定义模板：
- en: 'Dialog with Buttons Bottom: This template creates a form with the OK and Cancel
    buttons in the bottom-right corner.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有底部按钮的对话框：此模板在右下角创建一个带有确定和取消按钮的表单。
- en: 'Dialog with Buttons Right: This template creates a form with the OK and Cancel
    buttons in the top-right corner.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有右侧按钮的对话框：此模板在右上角创建一个带有确定和取消按钮的表单。
- en: 'Dialog without Buttons: This template creates an empty form on which you can
    place widgets. The superclass for dialogs is `QDialog`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有按钮的对话框：此模板创建一个空表单，您可以在其中放置小部件。对话框的超类是`QDialog`。
- en: 'Main Window: This template provides a main application window with a menu bar
    and a toolbar that can be removed if not required.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主窗口：此模板提供一个带有菜单栏和工具栏的主应用程序窗口，如果不需要可以删除。
- en: 'Widget: This template creates a form whose superclass is `QWidget` rather than
    `QDialog`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件：此模板创建一个表单，其超类是`QWidget`而不是`QDialog`。
- en: Every GUI application has a top-level widget and the rest of the widgets are
    called its children. The top-level widget can be `QDialog`, `QWidget`, or `QMainWindow`,
    depending on the template you require. If you want to create an application based
    on the dialog template, then the top-level widget or the first class that you
    inherit will be `QDialog`. Similarly, to create an application based on the Main
    Window template, the top-level widget will be `QMainWindow`, and to create the
    application based on the Widget template, you need to inherit the `QWidget` class.
    As mentioned previously, the rest of the widgets that are used for the user interface
    are called child widgets of the classes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每个GUI应用程序都有一个顶级小部件，其余的小部件称为其子级。顶级小部件可以是`QDialog`、`QWidget`或`QMainWindow`，具体取决于您需要的模板。如果要基于对话框模板创建应用程序，则顶级小部件或您继承的第一个类将是`QDialog`。类似地，要基于主窗口模板创建应用程序，顶级小部件将是`QMainWindow`，要基于窗口小部件模板创建应用程序，您需要继承`QWidget`类。如前所述，用于用户界面的其余小部件称为这些类的子小部件。
- en: Qt Designer displays a menu bar and toolbar at the top. It shows a Widget box
    on the left that contains a variety of widgets used to develop applications, grouped
    in sections. All you have to do is drag and drop the widgets you want from the
    form. You can arrange widgets in layouts, set their appearance, provide initial
    attributes, and connect their signals to slots.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Designer在顶部显示菜单栏和工具栏。它在左侧显示一个包含各种小部件的窗口小部件框，用于开发应用程序，分组显示。您只需从表单中拖放您想要的小部件即可。您可以在布局中排列小部件，设置它们的外观，提供初始属性，并将它们的信号连接到插槽。
- en: Displaying a welcome message
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示欢迎消息
- en: In this recipe, the user will be prompted to enter his/her name followed by
    clicking a push button. On clicking the button, a welcome message will appear,
    "Hello," followed by the name entered by the user. For this recipe, we need to
    make use of three widgets, Label, Line Edit, and Push Button. Let's understand
    these widgets one by one.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，用户将被提示输入他/她的名字，然后点击一个按钮。点击按钮后，将出现一个欢迎消息，“你好”，后面跟着用户输入的名字。对于这个示例，我们需要使用三个小部件，标签、行编辑和按钮。让我们逐个了解这些小部件。
- en: Understanding the Label widget
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解标签小部件
- en: The Label widget is an instance of the `QLabel` class and is used for displaying
    messages and images. Because the Label widgets simply display results of computations
    and don't take any input, they are simply used for supplying information on the
    screen.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 标签小部件是`QLabel`类的一个实例，用于显示消息和图像。因为标签小部件只是显示计算结果，不接受任何输入，所以它们只是用于在屏幕上提供信息。
- en: Methods
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法
- en: 'The following are the methods provided by the `QLabel` class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`QLabel`类提供的方法：
- en: '`setText()`: This method assigns text to the Label widget'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setText()`: 该方法将文本分配给标签小部件'
- en: '`setPixmap()`: This method assigns `pixmap`, an instance of the `QPixmap` class,
    to the Label widget'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setPixmap()`: 该方法将`pixmap`，`QPixmap`类的一个实例，分配给标签小部件'
- en: '`setNum()`: This method assigns an integer or double value to the Label widget'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setNum()`: 该方法将整数或双精度值分配给标签小部件'
- en: '`clear()`: This method clears text from the Label widget'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clear()`: 该方法清除标签小部件中的文本'
- en: The default text of `QLabel` is TextLabel. That is, when you add a `QLabel`
    class to a form by dragging a Label widget and dropping it on the form, it will
    display TextLabel. Besides using `setText()`, you can also assign text to a selected
    `QLabel` object by setting its text property in the Property Editor window.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLabel`的默认文本是TextLabel。也就是说，当您通过拖放标签小部件将`QLabel`类添加到表单时，它将显示TextLabel。除了使用`setText()`，您还可以通过在属性编辑器窗口中设置其文本属性来为选定的`QLabel`对象分配文本。'
- en: Understanding the Line Edit widget
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解行编辑小部件
- en: The Line Edit widget is that is popularly used for entering single-line data.
    The Line Edit widget is an instance of the `QLineEdit` class, and you can not
    only enter, but also edit the data too. Besides entering data, you can undo, redo,
    cut, and paste data in the Line Edit widget.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 行编辑小部件通常用于输入单行数据。行编辑小部件是`QLineEdit`类的一个实例，您不仅可以输入，还可以编辑数据。除了输入数据，您还可以在行编辑小部件中撤消、重做、剪切和粘贴数据。
- en: Methods
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法
- en: 'The following are the methods provided by the `QLineEdit` class:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`QLineEdit`类提供的方法：
- en: '`setEchoMode()`: It sets the echo mode of the Line Edit widget. That is, it
    determines how the contents of the Line Edit widget are to be displayed. The available
    options are as follows:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setEchoMode()`: 它设置行编辑小部件的回显模式。也就是说，它确定如何显示行编辑小部件的内容。可用选项如下：'
- en: '`Normal`: This is the default mode and it displays characters the way they
    are entered'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Normal`: 这是默认模式，它以输入的方式显示字符'
- en: '`NoEcho`: It switches off the Line Edit echo, that is, it doesn''t display
    anything'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NoEcho`: 它关闭了行编辑的回显，也就是说，它不显示任何内容'
- en: '`Password`: This option is used for password fields, no text will be displayed;
    instead, asterisks appear for the text entered by the user'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Password`: 该选项用于密码字段，不会显示文本；而是用户输入的文本将显示为星号'
- en: '`PasswordEchoOnEdit`: It displays the actual text while editing the password
    fields, otherwise it will display the asterisks for the text'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordEchoOnEdit`: 在编辑密码字段时显示实际文本，否则将显示文本的星号'
- en: '`maxLength()`: This method is used to specify the maximum length of text that
    can be entered in the Line Edit widget.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxLength()`: 该方法用于指定可以在行编辑小部件中输入的文本的最大长度。'
- en: '`setText()`: This method is used for assigning text to the Line Edit widget.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setText()`: 该方法用于为行编辑小部件分配文本。'
- en: '`text()`: This method accesses the text entered in the Line Edit widget.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text()`: 该方法访问在行编辑小部件中输入的文本。'
- en: '`clear()`: This method clears or deletes the complete content of the Line Edit
    widget.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clear()`: 该方法清除或删除行编辑小部件的全部内容。'
- en: '`setReadOnly()`: When the Boolean value true is passed to this method, it will
    make the Line Edit widget read-only, that is, non-editable. The user cannot make
    any changes to the contents displayed through the Line Edit widget, but can only
    copy.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setReadOnly()`:当将布尔值true传递给此方法时，它将使LineEdit小部件变为只读，即不可编辑。用户无法对通过LineEdit小部件显示的内容进行任何更改，但只能复制。'
- en: '`isReadOnly()`: This method returns the Boolean value true if the Line Edit
    widget is in read-only mode, otherwise it returns false.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isReadOnly()`:如果LineEdit小部件处于只读模式，则此方法返回布尔值true，否则返回false。'
- en: '`setEnabled()`: By default, the Line Edit widget is enabled, that is, the user
    can make changes to it. But if the Boolean value false is passed to this method,
    it will disable the Line Edit widget so the user cannot edit its content, but
    can only assign text via the `setText()` method.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setEnabled()`:默认情况下，LineEdit小部件是启用的，即用户可以对其进行更改。但是，如果将布尔值false传递给此方法，它将禁用LineEdit小部件，因此用户无法编辑其内容，但只能通过`setText()`方法分配文本。'
- en: '`setFocus()`: This method positions the cursor on the specified Line Edit widget.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setFocus()`:此方法将光标定位在指定的LineEdit小部件上。'
- en: Understanding the Push Button widget
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解PushButton小部件
- en: 'To display a push button in an application, you need to create an instance
    of the `QPushButton` class. When assigning text to buttons, you can create shortcut
    keys by preceding any character in the text with an ampersand. For example, if
    the text assigned to a push button is `Click Me`, the character `C` will be underlined
    to indicate that it is a shortcut key, and the user can select the button by pressing
    *Alt* + *C*. The button emits the clicked() signal if it is activated. Besides
    text, an icon can also be displayed in the push button. The methods for displaying
    text and an icon in a push button are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序中显示一个按钮，您需要创建一个`QPushButton`类的实例。在为按钮分配文本时，您可以通过在文本中的任何字符前加上一个和字符来创建快捷键。例如，如果分配给按钮的文本是`Click
    Me`，则字符`C`将被下划线标记，表示它是一个快捷键，用户可以通过按*Alt* + *C*来选择按钮。按钮在激活时发出clicked()信号。除了文本，图标也可以显示在按钮中。在按钮中显示文本和图标的方法如下：
- en: '`setText()`: This method is used to assign text to the push button'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setText()`:此方法用于为按钮分配文本'
- en: '`setIcon()`: This method is used to assign an icon to the push button'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setIcon()`:此方法用于为按钮分配图标'
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create a new application based on the Dialog without Buttons template.
    As said earlier, this application will prompt the user to enter a name and, on
    clicking the push button after entering a name, the application with display a
    hello message along with the entered name. Here are the steps to create this application:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个新应用程序。如前所述，此应用程序将提示用户输入姓名，并在输入姓名后单击按钮后，应用程序将显示一个hello消息以及输入的姓名。以下是创建此应用程序的步骤：
- en: The other Label with default text should have the objectName property of  `labelResponse`
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有默认文本的另一个Label应该具有`labelResponse`的objectName属性
- en: Drag one more Label widget from the Display Widgets category and drop it on
    the form. Do not change the text property of this Label widget and leave its text
    property to its default value, TextLabel. This is because the text property of
    this Label widget will be set through code, that is, it will be used to display
    the hello message to the user.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从显示小部件类别中拖动一个Label小部件，并将其放在表单上。不要更改此Label小部件的文本属性，并将其文本属性保留为其默认值TextLabel。这是因为此Label小部件的文本属性将通过代码设置，即将用于向用户显示hello消息。
- en: Drag one Line Edit from the Input Widgets category and drop it on the form.
    Set its objectName property to `lineEditName.`
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从输入小部件类别中拖动一个LineEdit，并将其放在表单上。将其objectName属性设置为`lineEditName`。
- en: 'Drag one Push Button widget from the Buttons category and drop it onto the
    form. Set its text property to `Click`. You can change the text property of the
    Push Button widget through any of three ways: by double-clicking the Push Button
    widget and overwriting the default text, by right-clicking the Push Button widget
    and selecting the Change text... option from the context menu that pops up, or
    by selecting the text property from the Property Editor window and overwriting
    the default text.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从按钮类别中拖动一个PushButton小部件，并将其放在表单上。将其text属性设置为`Click`。您可以通过以下三种方式之一更改PushButton小部件的text属性：通过双击PushButton小部件并覆盖默认文本，通过右键单击PushButton小部件并从弹出的上下文菜单中选择更改文本...选项，或者通过从属性编辑器窗口中选择文本属性并覆盖默认文本。
- en: Set the objectName property of the Push Button widget to `ButtonClickMe`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将PushButton小部件的objectName属性设置为`ButtonClickMe`。
- en: 'Save the application with the name `demoLineEdit.ui`. Now the form will appear,
    as shown in the following screenshot:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoLineEdit.ui`。现在，表单将显示如下截图所示：
- en: '![](assets/d296bf34-b970-46a3-af33-77336aebb427.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d296bf34-b970-46a3-af33-77336aebb427.png)'
- en: 'The user interface that you create with Qt Designer is stored in a `.ui` file
    that includes all the form''s information: its widgets, layout, and so on. The
    `.ui` file is an XML file, and you need to convert it to Python code. That way,
    you can maintain a clear separation between the visual interface and the behavior
    implemented in code.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用Qt Designer创建的用户界面存储在一个`.ui`文件中，其中包括所有表单的信息：其小部件、布局等。`.ui`文件是一个XML文件，您需要将其转换为Python代码。这样，您可以在视觉界面和代码中实现的行为之间保持清晰的分离。
- en: 'To use the `.ui` file, you first need to convert it into a Python script. The
    command utility that you will use for converting a `.ui` file into a Python script
    is `pyuic5`. In Windows, the `pyuic5` utility is bundled with PyQt. To do the
    conversion, you need to open a Command Prompt window and navigate to the folder
    where the file is saved and issue the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用`.ui`文件，您首先需要将其转换为Python脚本。您将用于将`.ui`文件转换为Python脚本的命令实用程序是`pyuic5`。在Windows中，`pyuic5`实用程序与PyQt捆绑在一起。要进行转换，您需要打开命令提示符窗口并导航到保存文件的文件夹，并发出以下命令：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's assume that we saved the form at this location: `C:\Pythonbook\PyQt5>`.
    The preceding command shows the conversion of the `demoLineEdit.ui` file into
    a Python script, `demoLineEdit.py`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将表单保存在此位置：`C:\Pythonbook\PyQt5>`。上述命令显示了`demoLineEdit.ui`文件转换为Python脚本`demoLineEdit.py`的过程。
- en: The Python code generated by this method should not be modified manually, as
    any changes will be overwritten the next time you run the `pyuic5` command.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法生成的Python代码不应手动修改，因为任何更改都将在下次运行`pyuic5`命令时被覆盖。
- en: The code of the generated Python script file, `demoLineEdit.py`, can be seen
    in the source code bundle of this book.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的Python脚本文件`demoLineEdit.py`的代码可以在本书的源代码包中找到。
- en: Treat the code in the `demoLineEdit.py` file as a header file, and import it
    to the file from which you will invoke its user interface design.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoLineEdit.py`文件中的代码视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: The header file is a term referred to those files which are imported into the
    current file. The command to import such files is usually written at the top in
    the script, hence named as header files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 头文件是指那些被导入到当前文件中的文件。导入这些文件的命令通常写在脚本的顶部，因此被称为头文件。
- en: 'Let''s create another Python file with the name `callLineEdit.py` and import
    the `demoLineEdit.py` code into it as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建另一个名为`callLineEdit.py`的Python文件，并将`demoLineEdit.py`的代码导入其中，如下所示：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `demoLineEdit.py` file is very easy to understand. A class with the name
    of the top-level object is created, with `Ui_` prepended. Since the top-level
    object used in our application is `Dialog`, the `Ui_Dialog` class is created and
    stores the interface elements of our widget. That class has two methods, `setupUi()`
    and `retranslateUi()`. The `setupUi()` method sets up the widgets; it creates
    the widgets that you use while defining the user interface in Qt Designer. The
    method creates the widgets one by one and also sets their properties. The `setupUi()`
    method takes a single argument, which is the top-level widget in which the user
    interface (child widgets) is created. In our application, it is an instance of
    `QDialog`. The `retranslateUi()` method translates the interface.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`demoLineEdit.py`文件非常容易理解。创建了一个名为顶级对象的类，前面加上`Ui_`。由于我们应用程序中使用的顶级对象是`Dialog`，因此创建了`Ui_Dialog`类，并存储了我们小部件的界面元素。该类有两个方法，`setupUi()`和`retranslateUi()`。`setupUi()`方法设置小部件；它创建了您在Qt
    Designer中定义用户界面时使用的小部件。该方法逐个创建小部件，并设置它们的属性。`setupUi()`方法接受一个参数，即创建用户界面（子小部件）的顶级小部件。在我们的应用程序中，它是`QDialog`的一个实例。`retranslateUi()`方法翻译界面。'
- en: 'Let''s understand what `callLineEdit.py` does statement-wise:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐条理解`callLineEdit.py`的作用：
- en: It imports the necessary modules. `QWidget` is the base class of all user interface
    objects in PyQt5.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它导入了必要的模块。`QWidget`是PyQt5中所有用户界面对象的基类。
- en: It creates a new `MyForm` class that inherits from the base class, `QDialog`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它创建了一个继承自基类`QDialog`的新`MyForm`类。
- en: It provides the default constructor for `QDialog`. The default constructor has
    no parent, and a widget with no parent is known as a window.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它为`QDialog`提供了默认构造函数。默认构造函数没有父级，没有父级的小部件称为窗口。
- en: 'Event handling in PyQt5 uses signals and slots. A signal is an event, and a
    slot is a method that is executed on the occurrence of a signal. For example,
    when you click a push button, a `clicked()` event, also known as a signal, occurs.
    The `connect()` method connects signals with slots. In this case, the slot is
    a method: `dispmessage()`. That is, when the user clicks the push button, the
    `dispmessage()` method will be invoked. `clicked()` is an event here and an event
    handling loop waits for an event to occur and then dispatches it to perform some
    task. The event handling loop continues to work until either the `exit()` method
    is called or the main widget is destroyed.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyQt5中的事件处理使用信号和槽。信号是一个事件，槽是在发生信号时执行的方法。例如，当您单击一个按钮时，会发生一个`clicked()`事件，也称为信号。`connect()`方法将信号与槽连接起来。在这种情况下，槽是一个方法：`dispmessage()`。也就是说，当用户单击按钮时，将调用`dispmessage()`方法。`clicked()`在这里是一个事件，事件处理循环等待事件发生，然后将其分派以执行某些任务。事件处理循环会继续工作，直到调用`exit()`方法或主窗口被销毁为止。
- en: It creates an application object with the name `app` through the `QApplication()`
    method. Every PyQt5 application must create `sys.argv` application object which
    contains a list of arguments from the command line, and it is passed to the method
    while creating the application object. The `sys.argv` parameter helps in passing
    and controlling the startup attributes of a script.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它通过`QApplication()`方法创建了一个名为`app`的应用程序对象。每个PyQt5应用程序都必须创建`sys.argv`应用程序对象，其中包含从命令行传递的参数列表，并在创建应用程序对象时传递给方法。`sys.argv`参数有助于传递和控制脚本的启动属性。
- en: An instance of the `MyForm` class is created with the name `w`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MyForm`类的一个实例被创建，名为`w`。
- en: The `show()` method will display the widget on the screen.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`show()`方法将在屏幕上显示小部件。'
- en: The `dispmessage()` method performs event handling for the push button. It displays
    the Hello text, along with the name entered in the Line Edit widget.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dispmessage()`方法执行按钮的事件处理。它显示Hello文本，以及在行编辑小部件中输入的名称。'
- en: The `sys.exit()` method ensures a clean exit, releasing memory resources.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sys.exit()`方法确保干净退出，释放内存资源。'
- en: The `exec_()` method has an underscore because `exec` is a Python keyword.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec_()`方法有一个下划线，因为`exec`是Python关键字。'
- en: 'On executing the preceding program, you get a window with the Line Edit and
    Push Button widgets, as shown in the following screenshot. When the push button
    is selected, the `dispmessage()` method will be executed, displaying the Hello
    message along with the user''s name that is entered in the Line Edit widget:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上述程序时，您将获得一个带有行编辑和按钮小部件的窗口，如下截图所示。当选择按钮时，将执行`dispmessage()`方法，显示Hello消息以及输入在行编辑小部件中的用户名：
- en: '![](assets/1aa5d22d-74f6-4f2d-9664-791751d4bedb.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1aa5d22d-74f6-4f2d-9664-791751d4bedb.png)'
- en: Using the Radio Button widget
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单选按钮小部件
- en: This recipe displays certain flight types via Radio Button and when the user
    selects the radio button, the price associated with that flight will be displayed.
    We need to first understand the workings of Radio Button.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例通过单选按钮显示特定的航班类型，当用户选择单选按钮时，将显示与该航班相关的价格。我们需要首先了解单选按钮的工作原理。
- en: Understanding Radio Button
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解单选按钮
- en: The Radio Button widgets are very popular when you want the user to select only
    one option out of the available options. Such options are known as mutually exclusive
    options. When the user selects an option, the previously selected option is automatically
    deselected. The Radio Button widgets are instances of the `QRadioButton` class.
    Every radio button has an associated text label. The radio button can be either
    in selected (checked) or unselected (unchecked) states. If you want two or more
    sets of radio buttons, where each set allows the exclusive selection of a radio
    button, put them into different button groups (instances of `QButtonGroup`). The
    methods provided by `QRadioButton` are shown next.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望用户只能从可用选项中选择一个选项时，单选按钮小部件非常受欢迎。这些选项被称为互斥选项。当用户选择一个选项时，先前选择的选项将自动取消选择。单选按钮小部件是`QRadioButton`类的实例。每个单选按钮都有一个关联的文本标签。单选按钮可以处于选定（已选中）或未选定（未选中）状态。如果您想要两个或更多组单选按钮，其中每组允许单选按钮的互斥选择，请将它们放入不同的按钮组（`QButtonGroup`的实例）中。`QRadioButton`提供的方法如下所示。
- en: Methods
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法
- en: 'The `QRadioButton` class provides the following methods:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`QRadioButton`类提供以下方法：'
- en: '`isChecked()`: This method returns the Boolean value true if the button is
    in the selected state.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isChecked()`: 如果按钮处于选定状态，则此方法返回布尔值true。'
- en: '`setIcon()`: This method displays an icon with the radio button.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setIcon()`: 此方法显示带有单选按钮的图标。'
- en: '`setText()`: This method assigns the text to the radio button. If you want
    to specify a shortcut key for the radio button, precede the preferred character
    in the text with an ampersand (`&`). The shortcut character will be underlined.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setText()`: 此方法为单选按钮分配文本。如果您想为单选按钮指定快捷键，请在文本中使用和号（`&`）前置所选字符。快捷字符将被下划线标记。'
- en: '`setChecked()`: To make any radio button appear selected by default, pass the
    Boolean value true to this method.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setChecked()`: 要使任何单选按钮默认选定，将布尔值true传递给此方法。'
- en: Signal description
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号描述
- en: 'Signals emitted by `QRadioButton` are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`QRadioButton`发射的信号如下：'
- en: 'toggled(): This signal is emitted whenever the button changes its state from
    checked to unchecked or vice versa'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'toggled(): 当按钮从选中状态变为未选中状态，或者反之时，将发射此信号'
- en: 'clicked(): This signal is emitted when a button is activated (that is, pressed
    and released) or when its shortcut key is pressed'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击（）：当按钮被激活（即按下并释放）或者按下其快捷键时，将发射此信号
- en: 'stateChanged(): This signal is emitted when a radio button changes its state
    from checked to unchecked or vice versa'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'stateChanged(): 当单选按钮从选中状态变为未选中状态，或者反之时，将发射此信号'
- en: To understand the concept of radio buttons, let's create an application that
    asks the user to select the flight type and displays three options, First Class,
    Business Class, and Economy Class, in the form of radio buttons. On selecting
    an option through the radio button, the price for that flight will be displayed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解单选按钮的概念，让我们创建一个应用程序，询问用户选择航班类型，并通过单选按钮以`头等舱`，`商务舱`和`经济舱`的形式显示三个选项。通过单选按钮选择一个选项后，将显示该航班的价格。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create a new application based on the Dialog without Buttons template.
    This application will display different flight types along with their respective
    prices. When a user selects a flight type, its price will be displayed on the
    screen:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个新的应用程序。这个应用程序将显示不同的航班类型以及它们各自的价格。当用户选择一个航班类型时，它的价格将显示在屏幕上：
- en: Drag and drop two Label widgets and three Radio Button widgets onto the form.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个标签小部件和三个单选按钮小部件拖放到表单上。
- en: Set the text property of the first Label widget to `Choose the flight type`
    and delete the text property of the second Label widget. The text property of
    the second Label widget will be set through code; it will be used to display the
    price of the selected flight type.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个标签小部件的文本属性设置为`选择航班类型`，并删除第二个标签小部件的文本属性。第二个标签小部件的文本属性将通过代码设置；它将用于显示所选航班类型的价格。
- en: Set the text property of the three Radio Button widgets to `First Class $150`,
    `Business Class $125`, and `Economy Class $100`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个单选按钮小部件的文本属性设置为`头等舱 $150`，`商务舱 $125`和`经济舱 $100`。
- en: Set the objectName property of the second Label widget to `labelFare`. The default
    object names of the three radio buttons are `radioButton`, `radioButton_2`, and
    `radioButton_3`. Change the objectName property of these three radio buttons to
    `radioButtonFirstClass`, `radioButtonBusinessClass`, and `radioButtonEconomyClass`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个标签小部件的objectName属性设置为`labelFare`。三个单选按钮的默认对象名称分别为`radioButton`，`radioButton_2`和`radioButton_3`。将这三个单选按钮的objectName属性更改为`radioButtonFirstClass`，`radioButtonBusinessClass`和`radioButtonEconomyClass`。
- en: Save the application with name `demoRadioButton1.ui`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoRadioButton1.ui`。
- en: 'Take a look at the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的屏幕截图：
- en: '![](assets/545e660b-5490-4767-8101-c8f7ab6dea60.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/545e660b-5490-4767-8101-c8f7ab6dea60.png)'
- en: The `demoRadioButton1.ui` application is an XML file and needs to be converted
    into Python code through the `pyuic5` command utility. The generated Python code,
    `demoRadioButton1.py`, can be seen in the source code bundle of this book.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`demoRadioButton1.ui`应用程序是一个XML文件，需要通过`pyuic5`命令实用程序转换为Python代码。本书的源代码包中可以看到生成的Python代码`demoRadioButton1.py`。'
- en: Import the `demoRadioButton1.py` file as a header file in the Python script
    that you are going to create next to invoke the user interface design.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoRadioButton1.py`文件作为头文件导入到您即将创建的Python脚本中，以调用用户界面设计。
- en: 'In the Python script, write the code to display the flight type on the basis
    of the radio button selected by the user. Name the source file `callRadioButton1.py`;
    its code is shown here:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python脚本中，编写代码根据用户选择的单选按钮显示飞行类型。将源文件命名为`callRadioButton1.py`；其代码如下所示：
- en: '[PRE2]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: The toggled() event of Radio Button is connected to the `dispFare()` function,
    which will display the price of the selected flight type. In the `dispFare()`
    function, you check the state of the radio buttons. Hence, if `radioButtonFirstClass`
    is selected, the value `150` is assigned to the fare variable. Similarly, if `radioButtonBusinessClass`
    is selected, the value `125` is assigned to the `fare` variable. Similarly, the
    value `100` is assigned to the `fare` variable when `radioButtonEconomyClass`
    is selected. Finally, the value in the `fare` variable is displayed via `labelFare`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮的toggled()事件连接到`dispFare()`函数，该函数将显示所选航班类型的价格。在`dispFare()`函数中，您检查单选按钮的状态。因此，如果选择了`radioButtonFirstClass`，则将值`150`分配给票价变量。同样，如果选择了`radioButtonBusinessClass`，则将值`125`分配给`fare`变量。同样，当选择`radioButtonEconomyClass`时，将值`100`分配给`fare`变量。最后，通过`labelFare`显示`fare`变量中的值。
- en: 'On executing the previous program, you get a dialog that displays three flight
    types and prompts the user to select the one that he/she wants to use for travel.
    On selecting a flight type, the price of the selected flight type is displayed,
    as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上一个程序时，您会得到一个对话框，其中显示了三种飞行类型，并提示用户选择要用于旅行的飞行类型。选择飞行类型后，所选飞行类型的价格将显示出来，如下面的屏幕截图所示：
- en: '![](assets/1f097ec8-af6f-4177-8496-d35da2a29cc3.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1f097ec8-af6f-4177-8496-d35da2a29cc3.png)'
- en: Grouping radio buttons
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分组单选按钮
- en: In this application, we will learn to create two groups of radio buttons. The
    user can select radio buttons from either group and accordingly the result or
    text will appear on the screen.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将学习创建两组单选按钮。用户可以从任一组中选择单选按钮，相应地结果或文本将出现在屏幕上。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will display a dialog that displays shirts of different sizes and different
    payment methods. On selecting a shirt size and a payment method, the selected
    shirt size and payment method will be displayed on the screen. We will create
    two groups of radio buttons, one of the shirt sizes and other payment methods.
    The shirt size group displays four radio buttons showing four different types
    of the size such as M, L, XL, and XXL, where M stands for medium size, L stands
    for large size, and so on. The payment method group displays three radio buttons, Debit/Credit
    Card, NetBanking, and Cash On Delivery. The user can select any radio button from
    either of the groups. When the user selects any of the shirt sizes or payment
    methods, the selected shirt size and payment method will be displayed.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将显示一个对话框，其中显示不同尺码的衬衫和不同的付款方式。选择衬衫尺码和付款方式后，所选的衬衫尺码和付款方式将显示在屏幕上。我们将创建两组单选按钮，一组是衬衫尺码，另一组是付款方式。衬衫尺码组显示四个单选按钮，显示四种不同尺码的衬衫，例如M、L、XL和XXL，其中M代表中号，L代表大号，依此类推。付款方式组显示三个单选按钮，分别是借记/信用卡、网上银行和货到付款。用户可以从任一组中选择任何单选按钮。当用户选择任何衬衫尺码或付款方式时，所选的衬衫尺码和付款方式将显示出来。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s recreate the preceding application step by step:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步重新创建前面的应用程序：
- en: Create a new application based on the Dialog without Buttons template.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于无按钮对话框模板创建一个新应用程序。
- en: Drag and drop three Label widgets and seven Radio Button widgets. Out of these
    seven radio buttons, we will arrange four radio buttons in one vertical layout
    and the other three radio buttons in the second vertical layout. The two layouts
    will help in grouping these radio buttons. Radio buttons being mutually exclusive
    will allow only one radio button to be selected from a layout or group.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拖放三个Label小部件和七个Radio Button小部件。在这七个单选按钮中，我们将四个单选按钮排列在一个垂直布局中，将另外三个单选按钮排列在第二个垂直布局中。这两个布局将有助于将这些单选按钮分组。单选按钮是互斥的，只允许从布局或组中选择一个单选按钮。
- en: Set the text property of the first two Label widgets to `Choose your Shirt Size`
    and `Choose your payment method` respectively.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前两个Label小部件的文本属性分别设置为`选择您的衬衫尺码`和`选择您的付款方式`。
- en: Delete the text property of the third Label widget because we will display the
    selected shirt size and payment method through the code.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第三个Label小部件的文本属性，因为我们将通过代码显示所选的衬衫尺码和付款方式。
- en: In the Property Editor window, increase the font size of all the widgets to
    increase their visibility in the application.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性编辑器窗口中，增加所有小部件的字体大小，以增加它们在应用程序中的可见性。
- en: Set the text property of the first four radio buttons to `M`, `L`, `XL`, and
    `XXL`. Arrange these four radio buttons into one vertical layout.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前四个单选按钮的文本属性设置为`M`、`L`、`XL`和`XXL`。将这四个单选按钮排列成一个垂直布局。
- en: Set the text property of the next three radio buttons to `Debit/Credit Card`,
    `NetBanking`, and `Cash On Delivery`. Arrange these three radio buttons into a
    second vertical layout. Remember, these vertical layouts help by grouping these
    radio buttons.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将接下来的三个单选按钮的文本属性设置为`借记/信用卡`、`网上银行`和`货到付款`。将这三个单选按钮排列成第二个垂直布局。请记住，这些垂直布局有助于将这些单选按钮分组。
- en: Change the object names of the first four radio buttons to `radioButtonMedium`,
    `radioButtonLarge`, `radioButtonXL`, and `radioButtonXXL`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前四个单选按钮的对象名称更改为`radioButtonMedium`、`radioButtonLarge`、`radioButtonXL`和`radioButtonXXL`。
- en: Set the objectName property of the first `VBoxLayout` layout to `verticalLayout`.
    The `VBoxLayout` layout will be used for aligning radio buttons vertically.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个`VBoxLayout`布局的objectName属性设置为`verticalLayout`。`VBoxLayout`布局将用于垂直对齐单选按钮。
- en: Change the object names of next three radio buttons to `radioButtonDebitCard`,
    `radioButtonNetBanking`, and `radioButtonCashOnDelivery`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下一个三个单选按钮的对象名称更改为`radioButtonDebitCard`，`radioButtonNetBanking`和`radioButtonCashOnDelivery`。
- en: Set the objectName property of the second `QVBoxLayout` object to `verticalLayout_2`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个`QVBoxLayout`对象的objectName属性设置为`verticalLayout_2`。
- en: Set the objectName property of the third Label widget to `labelSelected`. It
    is through this Label widget that the selected shirt size and payment method will
    be displayed.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个标签小部件的`objectName`属性设置为`labelSelected`。通过此标签小部件，将显示所选的衬衫尺寸和付款方式。
- en: Save the application with the name `demoRadioButton2.ui`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoRadioButton2.ui`。
- en: 'Now, the form will appear, as shown in the following screenshot:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，表单将显示如下截图所示：
- en: '![](assets/8c185e1e-852e-46ca-bb90-d767f275c3ab.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8c185e1e-852e-46ca-bb90-d767f275c3ab.png)'
- en: The `.ui` (XML) file is then converted into Python code through the `pyuic5`
    command utility. You can find the Python code, `demoRadioButton2.py`, in the source
    code bundle for this book.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`.ui`（XML）文件通过`pyuic5`命令实用程序转换为Python代码。您可以在本书的源代码包中找到Python代码`demoRadioButton2.py`。
- en: Import the `demoRadioButton2.py` file, as a header file in our program to invoke
    the user interface design and to write code to display the selected shirt size
    and payment method through a Label widget when the user selects or unselects any
    of the radio buttons.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoRadioButton2.py`文件作为头文件导入我们的程序，以调用用户界面设计并编写代码，通过标签小部件显示所选的衬衫尺寸和付款方式，当用户选择或取消选择任何单选按钮时。
- en: 'Let''s name the program `callRadioButton2.pyw`; its code is shown here:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将程序命名为`callRadioButton2.pyw`；其代码如下所示：
- en: '[PRE3]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The toggled() event of all the radio buttons is connected to the `dispSelected()`
    function, which will display the selected shirt size and payment method. In the
    `dispSelected()` function, you check the status of the radio buttons to find out
    whether they are checked or unchecked. On the basis of the selected radio button
    in the first vertical layout, the value of the `selected1` variable will be set
    to `Medium`, `Large`, `Extra Large`, or `Extra Extra Large`. Similarly, from the
    second vertical layout, depending on the radio button selected, the value of the
    `selected2` variable will be initialized to Debit/Credit Card, NetBanking, or
    Cash On Delivery. Finally, the shirt size and payment method assigned to the `selected1`
    variable and selected variables will be displayed via the `labelSelected` widget.
    On running the application, you get a dialog prompting you to select the shirt
    size and payment method. On selecting a shirt size and payment method, the selected
    shirt size and payment method are displayed via the Label widget, as shown in
    the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 所有单选按钮的`toggled()`事件都连接到`dispSelected()`函数，该函数将显示所选的衬衫尺寸和付款方式。在`dispSelected()`函数中，您检查单选按钮的状态，以确定它们是选中还是未选中。根据第一个垂直布局中选择的单选按钮，`selected1`变量的值将设置为`中号`、`大号`、`特大号`或`特特大号`。类似地，从第二个垂直布局中，根据所选的单选按钮，`selected2`变量的值将初始化为`借记卡/信用卡`、`网上银行`或`货到付款`。最后，通过`labelSelected`小部件显示分配给`selected1`变量和`selected`变量的衬衫尺寸和付款方式。运行应用程序时，会弹出对话框，提示您选择衬衫尺寸和付款方式。选择衬衫尺寸和付款方式后，所选的衬衫尺寸和付款方式将通过标签小部件显示，如下截图所示：
- en: '![](assets/fbe0eafa-412a-4a05-8700-c88f95f491ee.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fbe0eafa-412a-4a05-8700-c88f95f491ee.png)'
- en: Displaying options in the form of checkboxes
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以复选框形式显示选项
- en: While creating applications, you may come across a situation where you need
    to provide several options for the user to select from. That is, you want the
    user to select one or more than one option from a set of options. In such situations,
    you need to make use of checkboxes. Let's find out more about checkboxes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建应用程序时，您可能会遇到需要为用户提供多个选项以供选择的情况。也就是说，您希望用户从一组选项中选择一个或多个选项。在这种情况下，您需要使用复选框。让我们更多地了解复选框。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Whereas radio buttons allow only one option to be selected in a group, checkboxes
    allow you to select more than one option. That is, selecting a checkbox will not
    affect other checkboxes in the application. Checkboxes are displayed with a text
    label as an instance of the `QCheckBox` class. A checkbox can be in any of three
    states: selected (checked), unselected (unchecked), or tristate (unchanged). Tristate
    is a no change state; the user has neither checked nor unchecked the checkbox.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 而单选按钮只允许在组中选择一个选项，复选框允许您选择多个选项。也就是说，选择复选框不会影响应用程序中的其他复选框。复选框显示为文本标签，是`QCheckBox`类的一个实例。复选框可以处于三种状态之一：选中（已选中）、未选中（未选中）或三态（未更改）。三态是一种无变化状态；用户既没有选中也没有取消选中复选框。
- en: Method application
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法应用
- en: 'The following are the methods provided by the `QCheckBox` class:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`QCheckBox`类提供的方法：
- en: '`isChecked()`: This method returns the Boolean value true if the checkbox is
    checked, and otherwise returns false.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isChecked()`: 如果复选框被选中，此方法返回布尔值true，否则返回false。'
- en: '`setTristate()`: If you don''t want the user to change the state of the checkbox,
    you pass the Boolean value true to this method. The user will not be able to check
    or uncheck the checkbox.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setTristate()`: 如果您不希望用户更改复选框的状态，请将布尔值true传递给此方法。用户将无法选中或取消选中复选框。'
- en: '`setIcon()`: This method is used to display an icon with the checkbox.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setIcon()`: 此方法用于显示复选框的图标。'
- en: '`setText()`: This method assigns text to the checkbox. To specify a shortcut
    key for the checkbox, precede the preferred character in the text with an ampersand.
    The shortcut character will appear as underlined.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setText()`: 此方法将文本分配给复选框。要为复选框指定快捷键，请在文本中的首选字符前加上一个和字符。快捷字符将显示为下划线。'
- en: '`setChecked()`: In order to make a checkbox appear as checked by default, pass
    the Boolean value true to this method.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setChecked()`: 为了使复选框默认显示为选中状态，请将布尔值true传递给此方法。'
- en: Signal description
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号描述
- en: 'The signals emitted by `QCheckBox` are as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`QCheckBox`发出的信号如下：'
- en: 'clicked(): This signal is emitted when a checkbox is activated (that is, pressed
    and released) or when its shortcut key is pressed'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'clicked(): 当复选框被激活（即按下并释放）或按下其快捷键时，将发出此信号'
- en: 'stateChanged(): This signal is emitted whenever a checkbox changes its state
    from checked to unchecked or vice versa'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'stateChanged(): 每当复选框从选中到未选中或反之亦然时，将发出此信号'
- en: To understand the Check Box widget, let's assume that you run a restaurant where
    several food items, such as pizzas, are sold. The pizza is sold along with different
    toppings, such as extra cheese, extra olives, and so on, and the price of each
    topping is also mentioned with it. The user can select a regular pizza with one
    or more toppings. What you want is that when a topping is selected, the total
    price of the pizza, including the selected topping, is displayed.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 理解复选框小部件，让我们假设您经营一家餐厅，销售多种食物，比如比萨。比萨可以搭配不同的配料，比如额外的奶酪，额外的橄榄等，每种配料的价格也会显示出来。用户可以选择普通比萨并加上一个或多个配料。您希望的是，当选择了配料时，比萨的总价，包括所选的配料，会显示出来。
- en: How to do it...
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The focus of this recipe is to understand how an action is initiated when the
    state of a checkbox changes from checked to unchecked or vice versa. Following
    is the step-by-step procedure to create such an application:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的重点是理解当复选框的状态从选中到未选中或反之时如何触发操作。以下是创建这样一个应用程序的逐步过程：
- en: Begin by creating a new application based on the Dialog without Buttons template.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，基于无按钮的对话框模板创建一个新应用程序。
- en: Drag and drop three Label widgets and three Check Box widgets onto the form.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个标签小部件和三个复选框小部件拖放到表单上。
- en: Set the text property of the first two Label widgets to `Regular Pizza $10`
    and `Select your extra toppings`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前两个标签小部件的文本属性设置为`Regular Pizza $10`和`Select your extra toppings`。
- en: In the Property Editor window, increase the font size of all three labels and
    checkboxes to increase their visibility in the application.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性编辑器窗口中，增加所有三个标签和复选框的字体大小，以增加它们在应用程序中的可见性。
- en: Set the text property of the three checkboxes to `Extra Cheese $1`, `Extra Olives
    $1`, and `Extra Sausages $2`. The default object names of the three checkboxes
    are `checkBox`, `checkBox_2`, and `checkBox_3`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个复选框的文本属性设置为`Extra Cheese $1`，`Extra Olives $1`和`Extra Sausages $2`。三个复选框的默认对象名称分别为`checkBox`，`checkBox_2`和`checkBox_3`。
- en: Change these to `checkBoxCheese`, `checkBoxOlives`, and `checkBoxSausages`,
    respectively.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分别更改为`checkBoxCheese`，`checkBoxOlives`和`checkBoxSausages`。
- en: Set the objectName property of the Label widget to `labelAmount`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的objectName属性设置为`labelAmount`。
- en: 'Save the application with the name `demoCheckBox1.ui`. Now, the form will appear
    as shown in the following screenshot:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoCheckBox1.ui`。现在，表单将显示如下截图所示：
- en: '![](assets/a49fb108-5909-488f-98fb-addd10717ebf.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a49fb108-5909-488f-98fb-addd10717ebf.png)'
- en: The `.ui` (XML) file is then converted into Python code through the `pyuic5`
    command utility. The Python code generated in the `demoCheckBox1.py` file can
    be seen in the source code bundle of this book.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过`pyuic5`命令实用程序将`.ui`（XML）文件转换为Python代码。在本书的源代码包中可以看到生成的`demoCheckBox1.py`文件中的Python代码。
- en: Import the `demoCheckBox1.py` file, as a header file in our program to invoke
    the user interface design and to write code to calculate the total cost of regular
    pizza, along with the selected toppings, through a Label widget when the user
    selects or unselects any of the checkboxes.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoCheckBox1.py`文件作为头文件导入我们的程序，以调用用户界面设计并编写代码，通过标签小部件计算普通比萨的总成本以及所选的配料，当用户选择或取消选择任何复选框时。
- en: 'Let''s name the program `callCheckBox1.pyw`; its code is shown here:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将程序命名为`callCheckBox1.pyw`；其代码如下所示：
- en: '[PRE5]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The stateChanged() event of checkboxes is connected to the `dispAmount` function,
    which will calculate the cost of the pizza along with the toppings selected. In
    the `dispAmount` function, you check the status of the checkboxes to find out
    whether they are checked or unchecked. The cost of the toppings whose checkboxes
    are checked is added and stored in the `amount` variable. Finally, the addition
    of the amount stored in the `amount` variable is displayed via `labelAmount`.
    On running the application, you get a dialog prompting you to select the toppings
    that you want to add to your regular pizza. On selecting any toppings, the amount
    of the regular pizza along with the selected toppings will be displayed on the
    screen, as shown in the following screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 将复选框的stateChanged()事件连接到`dispAmount`函数，该函数将计算所选配料的比萨的成本。在`dispAmount`函数中，您检查复选框的状态，以找出它们是选中还是未选中。被选中的复选框的配料成本被添加并存储在`amount`变量中。最后，存储在`amount`变量中的金额加法通过`labelAmount`显示出来。运行应用程序时，会弹出对话框提示您选择要添加到普通比萨中的配料。选择任何配料后，普通比萨的金额以及所选的配料将显示在屏幕上，如下截图所示：
- en: '![](assets/4ed74906-5046-4431-99fb-2da485c83932.png)The `dispAmount` function
    will be invoked every time the status of any checkbox changes. As a result, the
    total amount will be displayed via the Label widget, as soon as any checkbox is
    checked or unchecked.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4ed74906-5046-4431-99fb-2da485c83932.png)每当任何复选框的状态改变时，`dispAmount`函数将被调用。因此，只要勾选或取消任何复选框，总金额将通过标签小部件显示出来。'
- en: Displaying two groups of checkboxes
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示两组复选框
- en: In this application, we will learn to make two groups of checkboxes. The user
    can select any number of checkboxes from either group and, accordingly, the result
    will appear.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将学习如何制作两组复选框。用户可以从任一组中选择任意数量的复选框，相应的结果将显示出来。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will try displaying a menu of a restaurant where different types of ice creams
    and drinks are served. We will create two groups of checkboxes, one of ice creams
    and the other of drinks. The ice cream group displays four checkboxes showing
    four different types of ice cream, mint chocolate chip, cookie dough, and so on,
    along with their prices. The drinks group displays three checkboxes, coffee, soda,
    and so on, along with their prices. The user can select any number of checkboxes
    from either of the groups. When the user selects any of the ice creams or drinks,
    the total price of the selected ice creams and drinks will be displayed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试显示一家餐厅的菜单，那里供应不同类型的冰淇淋和饮料。我们将创建两组复选框，一组是冰淇淋，另一组是饮料。冰淇淋组显示四个复选框，显示四种不同类型的冰淇淋，薄荷巧克力片、曲奇面团等，以及它们的价格。饮料组显示三个复选框，咖啡、苏打水等，以及它们的价格。用户可以从任一组中选择任意数量的复选框。当用户选择任何冰淇淋或饮料时，所选冰淇淋和饮料的总价格将显示出来。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Here are the steps to create an application, which explain how checkboxes can
    be arranged into different groups and how to take respective action when the state
    of any checkbox from any group changes:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建应用程序的步骤，解释了如何将复选框排列成不同的组，并在任何组的任何复选框的状态发生变化时采取相应的操作：
- en: Create a new application based on the Dialog without Buttons template.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于没有按钮的对话框模板创建一个新的应用程序。
- en: Drag and drop four Label widgets, seven Check Box widgets, and two Group Box
    widgets onto the form.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个标签小部件、七个复选框小部件和两个分组框小部件拖放到表单上。
- en: Set the text property of the first three Label widgets to `Menu`, `Select your
    IceCream`, and `Select your drink` respectively.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前三个标签小部件的文本属性分别设置为`菜单`，`选择您的冰淇淋`和`选择您的饮料`。
- en: Delete the text property of the fourth Label widget because we will display
    the total amount of the selected ice creams and drinks through the code.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第四个标签小部件的文本属性，因为我们将通过代码显示所选冰淇淋和饮料的总金额。
- en: Through Property Editor, increase the font size of the all the widgets to increase
    their visibility in the application.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过属性编辑器，增加所有小部件的字体大小，以增加它们在应用程序中的可见性。
- en: Set the text property of the first four checkboxes to `Mint Choclate Chips $4`,
    `Cookie Dough $2`, `Choclate Almond $3`, and `Rocky Road $5`. Put these four checkboxes
    into the first group box.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前四个复选框的文本属性设置为`Mint Choclate Chips $4`，`Cookie Dough $2`，`Choclate Almond $3`和`Rocky
    Road $5`。将这四个复选框放入第一个分组框中。
- en: Set the text property of the next three checkboxes to `Coffee $2`, `Soda $3`,
    and `Tea $1` respectively. Put these three checkboxes into the second group box.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将接下来三个复选框的文本属性设置为`Coffee $2`，`Soda $3`和`Tea $1`。将这三个复选框放入第二个分组框中。
- en: Change the object names of the first four checkboxes to `checkBoxChoclateChips`,
    `checkBoxCookieDough`, `checkBoxChoclateAlmond`, and `checkBoxRockyRoad`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前四个复选框的对象名称更改为`checkBoxChoclateChips`，`checkBoxCookieDough`，`checkBoxChoclateAlmond`和`checkBoxRockyRoad`。
- en: Set the objectName property of the first group box to `groupBoxIceCreams`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个分组框的`objectName`属性设置为`groupBoxIceCreams`。
- en: Change the objectName property of the next three checkboxes to `checkBoxCoffee`,
    `checkBoxSoda`, and `checkBoxTea`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将接下来三个复选框的`objectName`属性更改为`checkBoxCoffee`，`checkBoxSoda`和`checkBoxTea`。
- en: Set the objectName property of the second group box to `groupBoxDrinks`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个分组框的`objectName`属性设置为`groupBoxDrinks`。
- en: Set the objectName property of the fourth Label widget to `labelAmount`.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第四个标签小部件的`objectName`属性设置为`labelAmount`。
- en: 'Save the application with the name `demoCheckBox2.ui`. It is through this Label
    widget that the total amount of the selected ice creams and drinks will be displayed,
    as shown in the following screenshot:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoCheckBox2.ui`。通过这个标签小部件，所选冰淇淋和饮料的总金额将显示出来，如下面的屏幕截图所示：
- en: '![](assets/0c376114-b3d1-4706-8f83-f503e597ac9f.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0c376114-b3d1-4706-8f83-f503e597ac9f.png)'
- en: The `.ui` (XML) file is then converted into Python code through the `pyuic5`
    command utility. You can find the generated Python code, the `demoCheckbox2.py`
    file, in the source code bundle of this book.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过`pyuic5`命令实用程序将`.ui`（XML）文件转换为Python代码。您可以在本书的源代码包中找到生成的Python代码`demoCheckbox2.py`文件。
- en: Import the `demoCheckBox2.py` file as a header file in our program to invoke
    the user interface design, and to write code to calculate the total cost of ice
    creams and drinks through a Label widget when the user selects or unselects any
    of the checkboxes.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的程序中将`demoCheckBox2.py`文件作为头文件导入，以调用用户界面设计，并编写代码来通过标签小部件计算冰淇淋和饮料的总成本，当用户选择或取消选择任何复选框时。
- en: 'Let''s name the program `callCheckBox2.pyw`; its code is shown here:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将程序命名为`callCheckBox2.pyw`；其代码如下所示：
- en: '[PRE6]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The stateChanged() event of all the checkboxes is connected to the `dispAmount` function,
    which will calculate the cost of the selected ice creams and drinks. In the `dispAmount` function,
    you check the status of the checkboxes to find out whether they are checked or
    unchecked. The cost of the ice creams and drinks whose checkboxes are checked
    is added and stored in the `amount` variable. Finally, the addition of the amount
    stored in the `amount` variable is displayed via the `labelAmount` widget. On
    running the application, you get a dialog prompting you to select the ice creams
    or drinks that you want to order. On selecting the ice creams or drinks, the total
    amount of the chosen items will be displayed, as shown in the following screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 所有复选框的`stateChanged()`事件都连接到`dispAmount`函数，该函数将计算所选冰淇淋和饮料的成本。在`dispAmount`函数中，您检查复选框的状态，以找出它们是选中还是未选中。选中复选框的冰淇淋和饮料的成本被添加并存储在`amount`变量中。最后，通过`labelAmount`小部件显示存储在`amount`变量中的金额的总和。运行应用程序时，会弹出对话框提示您选择要订购的冰淇淋或饮料。选择冰淇淋或饮料后，所选项目的总金额将显示出来，如下面的屏幕截图所示：
- en: '![](assets/9e489150-d6f2-4a81-bb85-67494f09c7fd.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9e489150-d6f2-4a81-bb85-67494f09c7fd.png)'
