["```py\n\u03bb python -m venv .env\n```", "```py\n\u03bb source .env/bin/activate\n```", "```py\n\u03bb .env\\Scripts\\activate\n```", "```py\n\u03bb pip install pytest\n```", "```py\n\u03bb pytest --version\nThis is pytest version 3.5.1, imported from x:\\fibo\\.env36\\lib\\site-packages\\pytest.py\n```", "```py\n    # contents of test_player_mechanics.py\n    def test_player_hit():\n        player = create_player()\n        assert player.health == 100\n        undead = create_undead()\n        undead.hit(player)\n        assert player.health == 80\n```", "```py\n\u03bb pytest test_player_mechanics.py\n```", "```py\n    class TestMechanics:\n\n        def test_player_hit(self):\n            ...\n\n        def test_player_health_flask(self):\n            ...\n```", "```py\n\u03bb pytest\n```", "```py\n \u03bb pytest tests/core tests/contrib\n```", "```py\n \u03bb pytest tests/core tests/contrib/test_text_plugin.py\n```", "```py\n \u03bb pytest tests/core/test_core.py::test_regex_matching\n```", "```py\n \u03bb pytest tests/contrib/test_text_plugin.py::TestPluginHooks\n```", "```py\n \u03bb pytest tests/contrib/\n      test_text_plugin.py::TestPluginHooks::test_registration\n```", "```py\n \u03bb pytest tests/core -v\n======================== test session starts ========================\n...\ncollected 6 items\n\ntests\\core\\test_core.py::test_regex_matching PASSED            [ 16%]\ntests\\core\\test_core.py::test_check_options FAILED             [ 33%]\ntests\\core\\test_core.py::test_type_checking FAILED             [ 50%]\ntests\\core\\test_parser.py::test_parse_expr PASSED              [ 66%]\ntests\\core\\test_parser.py::test_parse_num PASSED               [ 83%]\ntests\\core\\test_parser.py::test_parse_add PASSED               [100%]\n```", "```py\n\u03bb pytest tests/core --collect-only\n======================== test session starts ========================\n...\ncollected 6 items\n<Module 'tests/core/test_core.py'>\n <Function 'test_regex_matching'>\n <Function 'test_check_options'>\n <Function 'test_type_checking'>\n<Module 'tests/core/test_parser.py'>\n <Function 'test_parse_expr'>\n <Function 'test_parse_num'>\n <Function 'test_parse_add'>\n\n=================== no tests ran in 0.01 seconds ====================\n```", "```py\n________________________ test_default_health ________________________\n\n    def test_default_health():\n        health = get_default_health('warrior')\n>       assert health == 95\nE       assert 80 == 95\n\ntests\\test_assert_demo.py:25: AssertionError\n```", "```py\n_____________________ test_default_player_class _____________________\n\n    def test_default_player_class():\n        x = get_default_player_class()\n>       assert x == 'sorcerer'\nE       AssertionError: assert 'warrior' == 'sorcerer'\nE         - warrior\nE         + sorcerer\n```", "```py\n__________________ test_warrior_short_description ___________________\n\n    def test_warrior_short_description():\n        desc = get_short_class_description('warrior')\n>       assert desc == 'A battle-hardened veteran, can equip heavy armor and weapons.'\nE       AssertionError: assert 'A battle-har... and weapons.' == 'A battle-hard... and weapons.'\nE         - A battle-hardened veteran, favors heavy armor and weapons.\nE         ?                            ^ ^^^^\nE         + A battle-hardened veteran, can equip heavy armor and weapons.\nE         ?                            ^ ^^^^^^^\n```", "```py\n\n    def test_warrior_long_description():\n        desc = get_long_class_description('warrior')\n>       assert desc == textwrap.dedent('''\\\n            A seasoned veteran of many battles. Strength and Dexterity\n            allow to yield heavy armor and weapons, as well as carry\n            more equipment. Weak in magic.\n            ''')\nE       AssertionError: assert 'A seasoned v... \\n' == 'A seasoned ve... \\n'\nE         - A seasoned veteran of many battles. High Strength and Dexterity\nE         ?                                     -----\nE         + A seasoned veteran of many battles. Strength and Dexterity\nE           allow to yield heavy armor and weapons, as well as carry\nE         - more equipment while keeping a light roll. Weak in magic.\nE         ?               ---------------------------\nE         + more equipment. Weak in magic. \n```", "```py\n____________________ test_get_starting_equiment _____________________\n\n    def test_get_starting_equiment():\n        expected = ['long sword', 'shield']\n>       assert get_starting_equipment('warrior') == expected\nE       AssertionError: assert ['long sword'...et', 'shield'] == ['long sword', 'shield']\nE         At index 1 diff: 'warrior set' != 'shield'\nE         Left contains more items, first extra item: 'shield'\nE         Use -v to get the full diff\n\ntests\\test_assert_demo.py:71: AssertionError\n```", "```py\n____________________ test_get_starting_equiment _____________________\n\n    def test_get_starting_equiment():\n        expected = ['long sword', 'shield']\n>       assert get_starting_equipment('warrior') == expected\nE       AssertionError: assert ['long sword'...et', 'shield'] == ['long sword', 'shield']\nE         At index 1 diff: 'warrior set' != 'shield'\nE         Left contains more items, first extra item: 'shield'\nE         Full diff:\nE         - ['long sword', 'warrior set', 'shield']\nE         ?               ---------------\nE         + ['long sword', 'shield']\n\ntests\\test_assert_demo.py:71: AssertionError\n```", "```py\nE         ...Full output truncated (100 lines hidden), use '-vv' to show\n```", "```py\n_______________________ test_starting_health ________________________\n\n    def test_starting_health():\n        expected = {'warrior': 85, 'sorcerer': 50}\n>       assert get_classes_starting_health() == expected\nE       AssertionError: assert {'knight': 95...'warrior': 85} == {'sorcerer': 50, 'warrior': 85}\nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'sorcerer': 55} != {'sorcerer': 50}\nE         Left contains more items:\nE         {'knight': 95}\nE         Use -v to get the full diff\n```", "```py\n________________________ test_player_classes ________________________\n\n    def test_player_classes():\n>       assert get_player_classes() == {'warrior', 'sorcerer'}\nE       AssertionError: assert {'knight', 's...r', 'warrior'} == {'sorcerer', 'warrior'}\nE         Extra items in the left set:\nE         'knight'\nE         Use -v to get the full diff\n```", "```py\ndef create_character(name: str, class_name: str) -> Character:\n    \"\"\"\n    Creates a new character and inserts it into the database.\n\n    :raise InvalidCharacterNameError:\n        if the character name is empty.\n\n    :raise InvalidClassNameError:\n        if the class name is invalid.\n\n    :return: the newly created Character.\n    \"\"\"\n    ...\n```", "```py\ndef test_empty_name():\n    with pytest.raises(InvalidCharacterNameError):\n        create_character(name='', class_name='warrior')\n\ndef test_invalid_class_name():\n    with pytest.raises(InvalidClassNameError):\n        create_character(name='Solaire', class_name='mage')\n```", "```py\ndef create_character(name: str, class_name: str) -> Character:\n    \"\"\"\n    Creates a new character and inserts it into the database.\n    ...\n    \"\"\"\n    if not name:\n        raise InvalidCharacterNameError('character name empty')\n\n    if class_name not in VALID_CLASSES:\n        msg = f'invalid class name: \"{class_name}\"'\n        raise InvalidCharacterNameError(msg)\n    ...\n```", "```py\n======================== test session starts ========================\n...\ncollected 2 items\n\ntests\\test_checks.py .F                                        [100%]\n\n============================= FAILURES ==============================\n______________________ test_invalid_class_name ______________________\n\n def test_invalid_class_name():\n with pytest.raises(InvalidCharacterNameError):\n>           create_character(name='Solaire', class_name='mage')\n\ntests\\test_checks.py:51:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nname = 'Solaire', class_name = 'mage'\n\n def create_character(name: str, class_name: str) -> Character:\n \"\"\"\n Creates a new character and inserts it into the database.\n\n :param name: the character name.\n\n :param class_name: the character class name.\n\n :raise InvalidCharacterNameError:\n if the character name is empty.\n\n :raise InvalidClassNameError:\n if the class name is invalid.\n\n :return: the newly created Character.\n \"\"\"\n if not name:\n raise InvalidCharacterNameError('character name empty')\n\n if class_name not in VALID_CLASSES:\n msg = f'invalid class name: \"{class_name}\"'\n>           raise InvalidClassNameError(msg)\nE           test_checks.InvalidClassNameError: invalid class name: \"mage\"\n\ntests\\test_checks.py:40: InvalidClassNameError\n================ 1 failed, 1 passed in 0.05 seconds =================\n```", "```py\ndef test_empty_name():\n    with pytest.raises(InvalidCharacterNameError,\n                       match='character name empty'):\n        create_character(name='', class_name='warrior')\n\ndef test_invalid_class_name():\n    with pytest.raises(InvalidClassNameError,\n                       match='invalid class name: \"mage\"'):\n        create_character(name='Solaire', class_name='mage')\n```", "```py\ndef get_initial_hit_points(player_class: str) -> int:\n    ...\n```", "```py\nclass PlayerClass(Enum):\n    WARRIOR = 1\n    KNIGHT = 2\n    SORCERER = 3\n    CLERIC = 4\n```", "```py\ndef get_initial_hit_points(player_class: Union[PlayerClass, str]) -> int:\n    if isinstance(player_class, str):\n        msg = 'Using player_class as str has been deprecated' \\\n              'and will be removed in the future'\n        warnings.warn(DeprecationWarning(msg))\n        player_class = get_player_enum_from_string(player_class)\n    ...\n```", "```py\ndef test_get_initial_hit_points_warning():\n    with pytest.warns(DeprecationWarning):\n        get_initial_hit_points('warrior')\n```", "```py\ndef test_get_initial_hit_points_warning():\n    with pytest.warns(DeprecationWarning,\n                      match='.*str has been deprecated.*'):\n        get_initial_hit_points('warrior')\n```", "```py\n>>> 0.1 + 0.2 == 0.3\nFalse\n```", "```py\ndef test_simple_math():\n    assert abs(0.1 + 0.2) - 0.3 < 0.0001\n```", "```py\ndef test_approx_simple():\n    assert 0.1 + 0.2 == approx(0.3)\n```", "```py\n      def test_approx_list():\n          assert [0.1 + 1.2, 0.2 + 0.8] == approx([1.3, 1.0])\n```", "```py\n      def test_approx_dict():\n          values = {'v1': 0.1 + 1.2, 'v2': 0.2 + 0.8}\n          assert values == approx(dict(v1=1.3, v2=1.0))\n```", "```py\n      def test_approx_numpy():\n          import numpy as np\n          values = np.array([0.1, 0.2]) + np.array([1.2, 0.8])\n          assert values == approx(np.array([1.3, 1.0]))\n```", "```py\n    def test_approx_simple_fail():\n>       assert 0.1 + 0.2 == approx(0.35)\nE       assert (0.1 + 0.2) == 0.35 \u00b1 3.5e-07\nE        + where 0.35 \u00b1 3.5e-07 = approx(0.35)\n```", "```py\nsetup.py\nmylib/\n    tests/\n         __init__.py\n         test_core.py\n         test_utils.py    \n    __init__.py\n    core.py\n    utils.py\n```", "```py\n\u03bb pytest --pyargs mylib.tests\n```", "```py\nsetup.py\nmylib/  \n    __init__.py\n    core.py\n    utils.py\ntests/\n    __init__.py\n    test_core.py\n    test_utils.py \n```", "```py\nmylib/  \n    __init__.py\n    core/\n        __init__.py\n        foundation.py\n    contrib/\n        __init__.py\n        text_plugin.py\ntests/\n    __init__.py\n    core/\n        __init__.py\n        test_foundation.py\n    contrib/\n        __init__.py\n        test_text_plugin.py\n```", "```py\n\u03bb pytest -k \"test_parse\"\n```", "```py\n\u03bb pytest -k \"parse and not num\"\n```", "```py\n\u03bb pytest tests/core -x\n```", "```py\n\u03bb pytest --lf tests/core\n...\ncollected 6 items / 4 deselected\nrun-last-failure: rerun previous 2 failures\n```", "```py\n\u03bb pytest -x --lf \n```", "```py\n\u03bb pytest -x --lf\n======================== test session starts ========================\n...\ncollected 6 items\nrun-last-failure: rerun previous 2 failures first\n```", "```py\nimport hashlib\n\ndef commit_hash(contents):\n    size = len(contents)\n    print('content size', size)\n    hash_contents = str(size) + '\\0' + contents\n    result = hashlib.sha1(hash_contents.encode('UTF-8')).hexdigest()\n    print(result)\n    return result[:8]\n```", "```py\ndef test_commit_hash():\n    contents = 'some text contents for commit'\n    assert commit_hash(contents) == '0cf85793'\n```", "```py\n\u03bb pytest tests\\test_digest.py\n======================== test session starts ========================\n...\n\ntests\\test_digest.py .                                         [100%]\n\n===================== 1 passed in 0.03 seconds ======================\n```", "```py\n\u03bb pytest tests\\test_digest.py\n======================== test session starts ========================\n...\n\ntests\\test_digest.py F                                         [100%]\n\n============================= FAILURES ==============================\n_________________________ test_commit_hash __________________________\n\n def test_commit_hash():\n contents = 'a new text emerges!'\n>       assert commit_hash(contents) == '0cf85793'\nE       AssertionError: assert '383aa486' == '0cf85793'\nE         - 383aa486\nE         + 0cf85793\n\ntests\\test_digest.py:15: AssertionError\n----------------------- Captured stdout call ------------------------\ncontent size 19\n383aa48666ab84296a573d1f798fff3b0b176ae8\n===================== 1 failed in 0.05 seconds ======================\n```", "```py\n\u03bb pytest tests\\test_digest.py -s\n======================== test session starts ========================\n...\n\ntests\\test_digest.py content size 29\n0cf857938e0b4a1b3fdd41d424ae97d0caeab166\n.\n\n===================== 1 passed in 0.02 seconds ======================\n```", "```py\n============================= FAILURES ==============================\n_______________________ test_read_properties ________________________\n\n def test_read_properties():\n lines = DATA.strip().splitlines()\n> grids = list(iter_grids_from_csv(lines))\n\ntests\\test_read_properties.py:32:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_read_properties.py:27: in iter_grids_from_csv\n yield parse_grid_data(fields)\ntests\\test_read_properties.py:21: in parse_grid_data\n active_cells=convert_size(fields[2]),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'NULL'\n\n def convert_size(s):\n> return int(s)\nE ValueError: invalid literal for int() with base 10: 'NULL'\n\ntests\\test_read_properties.py:14: ValueError\n===================== 1 failed in 0.05 seconds ======================\n```", "```py\n============================= FAILURES ==============================\n_______________________ t________\n\n def test_read_properties():\n lines = DATA.strip().splitlines()\n>       grids = list(iter_grids_from_csv(lines))\n\ntests\\test_read_properties.py:32:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlines = ['Main Grid,48,44', '2nd Grid,24,21', '3rd Grid,24,null']\n\n def iter_grids_from_csv(lines):\n for fields in csv.reader(lines):\n>       yield parse_grid_data(fields)\n\ntests\\test_read_properties.py:27:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfields = ['3rd Grid', '24', 'null']\n\n def parse_grid_data(fields):\n return GridData(\n name=str(fields[0]),\n total_cells=convert_size(fields[1]),\n>       active_cells=convert_size(fields[2]),\n )\n\ntests\\test_read_properties.py:21:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'null'\n\n def convert_size(s):\n>       return int(s)\nE       ValueError: invalid literal for int() with base 10: 'null'\n\ntests\\test_read_properties.py:14: ValueError\n===================== 1 failed in 0.05 seconds ======================\n```", "```py\n============================= FAILURES ==============================\n_______________________ test_read_properties ________________________\ntests\\test_read_properties.py:32: in test_read_properties\n grids = list(iter_grids_from_csv(lines))\ntests\\test_read_properties.py:27: in iter_grids_from_csv\n yield parse_grid_data(fields)\ntests\\test_read_properties.py:21: in parse_grid_data\n active_cells=convert_size(fields[2]),\ntests\\test_read_properties.py:14: in convert_size\n return int(s)\nE   ValueError: invalid literal for int() with base 10: 'null'\n===================== 1 failed in 0.04 seconds ======================\n```", "```py\n_______________________ test_read_properties ________________________\nTraceback (most recent call last):\n File \"X:\\CH2\\tests\\test_read_properties.py\", line 32, in test_read_properties\n grids = list(iter_grids_from_csv(lines))\n File \"X:\\CH2\\tests\\test_read_properties.py\", line 27, in iter_grids_from_csv\n yield parse_grid_data(fields)\n File \"X:\\CH2\\tests\\test_read_properties.py\", line 21, in parse_grid_data\n active_cells=convert_size(fields[2]),\n File \"X:\\CH2\\tests\\test_read_properties.py\", line 14, in convert_size\n return int(s)\nValueError: invalid literal for int() with base 10: 'null'\n===================== 1 failed in 0.03 seconds ======================\n```", "```py\n============================= FAILURES ==============================\nX:\\CH2\\tests\\test_read_properties.py:14: ValueError: invalid literal for int() with base 10: 'null'\n```", "```py\ntests\\test_read_properties.py F                                [100%]\n\n===================== 1 failed in 0.04 seconds ======================\n```", "```py\n_______________________ test_read_properties ________________________\n\n def test_read_properties():\n lines = DATA.strip().splitlines()\n>       grids = list(iter_grids_from_csv(lines))\n\nlines      = ['Main Grid,48,44', '2nd Grid,24,21', '3rd Grid,24,null']\n\ntests\\test_read_properties.py:32:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\test_read_properties.py:27: in iter_grids_from_csv\n yield parse_grid_data(fields)\ntests\\test_read_properties.py:21: in parse_grid_data\n active_cells=convert_size(fields[2]),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = 'null'\n\n def convert_size(s):\n>       return int(s)\nE       ValueError: invalid literal for int() with base 10: 'null'\n\ns          = 'null'\n\ntests\\test_read_properties.py:14: ValueError\n===================== 1 failed in 0.05 seconds ======================\n```", "```py\n\u03bb pytest --durations=5\n...\n===================== slowest 5 test durations ======================\n3.40s call CH2/tests/test_slow.py::test_corner_case\n2.00s call CH2/tests/test_slow.py::test_parse_large_file\n0.00s call CH2/tests/core/test_core.py::test_type_checking\n0.00s teardown CH2/tests/core/test_parser.py::test_parse_expr\n0.00s call CH2/tests/test_digest.py::test_commit_hash\n================ 3 failed, 7 passed in 5.51 seconds =================\n```", "```py\n...\n________________________ test_type_checking _________________________\n\n    def test_type_checking():\n>       assert 0\nE       assert 0\n\ntests\\core\\test_core.py:12: AssertionError\n=============== 14 failed, 17 passed in 5.68 seconds ================\n```", "```py\n...\n________________________ test_type_checking _________________________\n\n def test_type_checking():\n>       assert 0\nE       assert 0\n\ntests\\core\\test_core.py:12: AssertionError\n====================== short test summary info ======================\nFAIL tests\\test_assert_demo.py::test_approx_simple_fail\nFAIL tests\\test_assert_demo.py::test_approx_list_fail\nFAIL tests\\test_assert_demo.py::test_default_health\nFAIL tests\\test_assert_demo.py::test_default_player_class\nFAIL tests\\test_assert_demo.py::test_warrior_short_description\nFAIL tests\\test_assert_demo.py::test_warrior_long_description\nFAIL tests\\test_assert_demo.py::test_get_starting_equiment\nFAIL tests\\test_assert_demo.py::test_long_list\nFAIL tests\\test_assert_demo.py::test_starting_health\nFAIL tests\\test_assert_demo.py::test_player_classes\nFAIL tests\\test_checks.py::test_invalid_class_name\nFAIL tests\\test_read_properties.py::test_read_properties\nFAIL tests\\core\\test_core.py::test_check_options\nFAIL tests\\core\\test_core.py::test_type_checking\n=============== 14 failed, 17 passed in 5.68 seconds ================\n```", "```py\n[pytest]\n```", "```py\n[tox]\nenvlist = py27,py36\n...\n\n[pytest]\n# pytest options\n```", "```py\n[pytest]\naddopts=--tb=native --maxfail=10 -v\n```", "```py\n\u03bb pytest tests/test_core.py\n```", "```py\n\u03bb pytest --tb=native --max-fail=10 -v tests/test_core.py\n```", "```py\n\u03bb pytest --tb=auto tests/test_core.py\n```", "```py\n[pytest]\npython_files = unittests_*.py\npython_functions = check_*\npython_classes = *TestSuite\n```", "```py\n[pytest]\ncache_dir=$TMP/pytest-cache\n```", "```py\n[pytest]\nnorecursedirs = artifacts _build docs\n```", "```py\n[pytest]\ntestpaths = tests\n```", "```py\n\u03bb pytest -o python_classes=Suite -o cache_dir=$TMP/pytest-cache\n```"]