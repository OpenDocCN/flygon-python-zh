- en: Setting Up Your GPU Programming Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置GPU编程环境
- en: We will now see how to set up an appropriate environment for GPU programming
    under both Windows and Linux. In both cases, there are several steps we will have
    to take. We will proceed through these steps one-by-one, noting any differences
    between Linux and Windows as we proceed. You should, of course, feel free to skip
    or ignore any sections or comments that don't apply to your choice of operating
    system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何在Windows和Linux下设置适当的GPU编程环境。在这两种情况下，我们都需要采取几个步骤。我们将逐步进行这些步骤，注意Linux和Windows之间的任何差异。当然，您可以随意跳过或忽略不适用于您选择的操作系统的任何部分或注释。
- en: The reader should note that we will only cover two platforms for 64-bit Intel/AMD-based
    PCs in this chapter—Ubuntu LTS (long-term support) releases and Windows 10\. Note
    that any Ubuntu LTS-based Linux operating systems (such as Xubuntu, Kubuntu, or
    Linux Mint) are also equally appropriate to the generic Unity/GNOME-based Ubuntu
    releases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应注意，本章仅涵盖64位Intel/AMD PC的两个平台——Ubuntu LTS（长期支持）版本和Windows 10。请注意，任何基于Ubuntu
    LTS的Linux操作系统（如Xubuntu，Kubuntu或Linux Mint）也同样适用于通用的Unity/GNOME-based Ubuntu版本。
- en: We suggest the use of Python 2.7 over Python 3.x. Python 2.7 has stable support
    across all libraries that we use in this text, and we have tested every example
    given in this book with Python 2.7 on both Windows and Linux platforms. Python
    3.x users can make use of this book, but should be aware of the differences between
    Python 2.7 and Python 3.x. Some of the examples in this have been tested on using
    Python 3.7, but require standard changes, such as adding parentheses with the
    Python `print` function.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用Python 2.7而不是Python 3.x。 Python 2.7在本文中使用的所有库中都有稳定的支持，并且我们已经在Windows和Linux平台上使用Python
    2.7测试了本书中给出的每个示例。 Python 3.x用户可以使用本书，但应该注意Python 2.7和Python 3.x之间的区别。本书中的一些示例已经在Python
    3.7上进行了测试，但需要标准更改，例如在Python `print`函数中添加括号。
- en: Packt author Dr. Sebastian Raschka provides a list of key differences between
    Python 2.7 and 3.x at [https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html](https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Packt作者Sebastian Raschka博士在[https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html](https://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html)提供了Python
    2.7和3.x之间的关键区别列表。
- en: We suggest the Anaconda Python 2.7 distribution in particular for both Windows
    and Linux users, since this can be installed on a user-by-user basis without `sudo`
    or `administrator` access, contains all necessary data science and visualization
    modules needed for this text, and uses fast pre-optimized NumPy/SciPy packages
    that make use of Intel's **Math Kernel Library** (**MKL**). (The default Linux
    `/usr/bin/python` installation should also be sufficient for this text, but you
    may have to install some packages manually, such as NumPy and Matplotlib.)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特别建议Windows和Linux用户使用Anaconda Python 2.7版本，因为它可以在用户基础上安装，无需`sudo`或`管理员`权限，包含本文所需的所有数据科学和可视化模块，并使用快速预优化的NumPy/SciPy包，这些包利用了英特尔的**数学核心库**（**MKL**）。
    （默认的Linux `/usr/bin/python`安装对于本文也应该足够，但您可能需要手动安装一些包，如NumPy和Matplotlib。）
- en: Anaconda Python (both 2.7 and 3.x versions) can be downloaded for all platforms
    at [https://www.anaconda.com/download/.](https://www.anaconda.com/download/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda Python（2.7和3.x版本）可以在[https://www.anaconda.com/download/.](https://www.anaconda.com/download/)下载到所有平台上。
- en: 'Users who are on other supported platforms (for example, macOS, Windows 7/8,
    Windows Server 2016, Red Hat/Fedora, OpenSUSE, and CENTOS) should consult the
    official NVIDIA CUDA documentation ([https://docs.nvidia.com/cuda/](https://docs.nvidia.com/cuda/))
    for further details. Furthermore, there are other possibilities for hardware:
    the reader interested in embedded systems or robotics with some experience in
    boards, such as the Raspberry Pi may wish to start with an ARM-based NVIDIA Jetson
    development board, while the reader interested in cloud computing or web programming
    may consider remotely using an appropriate Azure or AWS instance. In these cases,
    the reader is encouraged to read the official documentation to set up their drivers,
    compiler, and CUDA Toolkit. Some of the steps in this chapter may or may not apply.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 其他受支持平台的用户（例如macOS，Windows 7/8，Windows Server 2016，Red Hat/Fedora，OpenSUSE和CENTOS）应查阅官方的NVIDIA
    CUDA文档（[https://docs.nvidia.com/cuda/](https://docs.nvidia.com/cuda/)）以获取更多详细信息。此外，还有其他硬件选择：对于对嵌入式系统或具有树莓派等开发板经验的读者，可能希望从基于ARM的NVIDIA
    Jetson开发板开始，而对于对云计算或Web编程感兴趣的读者，可能考虑远程使用适当的Azure或AWS实例。在这些情况下，鼓励读者阅读官方文档以设置其驱动程序，编译器和CUDA工具包。本章中的一些步骤可能适用，也可能不适用。
- en: 'The learning outcomes for this chapter are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的学习目标是：
- en: Ensuring that we have the appropriate hardware
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保我们拥有适当的硬件
- en: Installing the NVIDIA GPU drivers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装NVIDIA GPU驱动程序
- en: Setting up an appropriate C/C++ programming environment
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置适当的C/C++编程环境
- en: Installing the NVIDIA CUDA Toolkit
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装NVIDIA CUDA工具包
- en: Setting up our Python environment for GPU programming
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为GPU编程设置Python环境
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: An installation of Anaconda Python 2.7 is suggested for this chapter at [https://www.anaconda.com/download/.](https://www.anaconda.com/download/)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章建议安装Anaconda Python 2.7，网址为[https://www.anaconda.com/download/.](https://www.anaconda.com/download/)
- en: This chapter's code is also available on GitHub at [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA.](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码也可以在GitHub上找到，网址为[https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA.](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA)
- en: For more information about the pre-requisites, check the Preface of this book;
    and for the software and hardware requirements, check the README section in [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA.](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有关先决条件的更多信息，请查看本书的前言；有关软件和硬件要求，请查看[https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA)中的README部分。
- en: Ensuring that we have the right hardware
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保我们拥有正确的硬件
- en: 'For this book, we recommend that you have the following hardware as a minimum:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，我们建议您至少具备以下硬件：
- en: 64-bit Intel/AMD-based PC
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 64位英特尔/AMD PC
- en: 4 gigabytes (GB) of RAM
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4GB RAM
- en: NVIDIA GeForce GTX 1050 GPU (or higher)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NVIDIA GeForce GTX 1050 GPU（或更高）
- en: This configuration will ensure that you can comfortably learn GPU programming,
    run all of the examples in this book, and also run some of the other newer and
    interesting GPU-based software, such as Google's TensorFlow (a machine learning
    framework) or the Vulkan SDK (a cutting-edge graphics API).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置将确保您可以轻松学习GPU编程，在本书中运行所有示例，并且还可以运行一些其他新的有趣的基于GPU的软件，如Google的TensorFlow（一种机器学习框架）或Vulkan
    SDK（一种尖端的图形API）。
- en: '**Note that you must have an NVIDIA brand GPU to make use of this book!** The
    CUDA Toolkit is proprietary for NVIDIA cards, so it won''t work for programming
    Intel HD or Radeon GPUs.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**请注意，您必须拥有NVIDIA品牌的GPU才能使用本书！** CUDA Toolkit专为NVIDIA卡而设计，因此无法用于编程Intel HD或Radeon
    GPU。'
- en: As stated, we will be assuming that you are using either the Windows 10 or Ubuntu
    LTS (long-term support) release.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所述，我们将假设您使用的是Windows 10或Ubuntu LTS（长期支持）版本。
- en: Ubuntu LTS releases generally have version numbers of the form 14.04, 16.04,
    18.04, and so on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu LTS发布通常具有14.04、16.04、18.04等形式的版本号。
- en: Ubuntu LTS, is by and large, the most mainstream version of Linux, which ensures
    maximum compatibility with new software and toolkits. Keep in mind there are many
    variations of Linux that are based on Ubuntu, such as Linux Mint or Xubuntu, and
    these generally work equally well. (I have personally found that Linux Mint works
    fairly well out of the box for GPU-equipped laptops.)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu LTS，大体上来说，是最主流的Linux版本，可以确保与新软件和工具包的最大兼容性。请记住，有许多基于Ubuntu的Linux变体，如Linux
    Mint或Xubuntu，这些通常同样有效。（我个人发现Linux Mint在配备GPU的笔记本电脑上开箱即用效果相当不错。）
- en: We should note that we are assuming that you have at least an entry-level GTX
    1050 (Pascal) GPU, or the equivalent in any newer architecture. Note that many
    of the examples in this book will most likely work on most older GPUs, but they
    have only been tested on a GTX 1050 (under Windows 10) and GTX 1070 (under Linux)
    by the author. While the examples haven't been tested on older GPUs, a 2014-era
    entry level Maxwell architecture GPU, such as a GTX 750, should also be sufficient
    for the purposes of this text.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该注意，我们假设您至少拥有一款入门级GTX 1050（Pascal）GPU，或者在任何更新的架构中具有相当的性能。请注意，本书中的许多示例很可能在大多数旧GPU上运行，但作者只在GTX
    1050（在Windows 10下）和GTX 1070（在Linux下）上进行了测试。虽然这些示例尚未在旧GPU上进行测试，但2014年的入门级Maxwell架构GPU，如GTX
    750，也应足以满足本文的要求。
- en: If you are using a desktop PC, please ensure that you have physically installed
    your GPU by following all the included instructions before proceeding.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是台式PC，请确保在继续之前已经按照所有包含的说明物理安装了GPU。
- en: Checking your hardware (Linux)
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查您的硬件（Linux）
- en: We will now do a few basic checks in Linux to ensure that we have the right
    hardware. Let's first open up a Terminal and drop to the bash command line—you
    can do this quickly in Ubuntu by pressing the combination *Ctrl* + *Alt* + *T*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在Linux中进行一些基本检查，以确保我们拥有正确的硬件。首先让我们打开一个终端并切换到bash命令行——您可以通过在Ubuntu中快速按下组合键*Ctrl*
    + *Alt* + *T*来快速完成这一步。
- en: 'Let''s now check our processor by typing `lscpu` and pressing *Enter*. A lot
    of information will appear, but just look at the first line and make sure that
    the architecture is indeed x86_64:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过输入`lscpu`并按*Enter*来检查我们的处理器。会出现大量信息，但只需查看第一行，确保架构确实是x86_64：
- en: '![](assets/e6983512-f18c-418c-9307-e1169baf3591.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e6983512-f18c-418c-9307-e1169baf3591.png)'
- en: 'Next, we check our memory capacity by typing `free -g` at the bash prompt and
    then again press *Enter*. This will tell us the total number of proper memory
    that we have in gigabytes in the first entry of the first row, as well as the
    amount of memory in swap space in the following row:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过在bash提示符下输入`free -g`并再次按*Enter*来检查我们的内存容量。这将告诉我们在第一行的第一个条目中我们拥有的总内存量（以GB为单位），以及在接下来的行中交换空间中的内存量：
- en: '![](assets/c3146279-5d0d-47b3-a8d9-cc7db17d807b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3146279-5d0d-47b3-a8d9-cc7db17d807b.png)'
- en: This is certainly sufficient memory.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是足够的内存。
- en: 'Finally, let''s see whether we have an appropriate GPU. NVIDIA GPUs communicate
    with our PC via the PCI bus, so we can use the `lspci` command to list all PCI
    hardware. There is usually a lot of other hardware listed, so let''s use the `grep`
    command to filter for just NVIDIA GPUs by entering `lspci | grep -e "NVIDIA"`
    at the bash prompt:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看我们是否有适当的GPU。NVIDIA GPU通过PCI总线与我们的PC通信，因此我们可以使用`lspci`命令列出所有PCI硬件。通常会列出许多其他硬件，因此让我们使用`grep`命令仅过滤出NVIDIA
    GPU，输入`lspci | grep -e "NVIDIA"`在bash提示符下：
- en: '![](assets/4365ea85-449d-4d80-b0c6-4514fdebe0e5.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4365ea85-449d-4d80-b0c6-4514fdebe0e5.png)'
- en: This is a GTX 1070, which fortunately exceeds our need for at least a GTX 1050.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一款GTX 1070，幸运的是它超出了我们至少需要GTX 1050的要求。
- en: Checking your hardware (windows)
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查您的硬件（Windows）
- en: 'First, we must open the Windows panel. We do this by pressing *Windows* + *R*
    and then entering `Control Panel` at the prompt, as demonstrated in the following
    screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须打开Windows面板。我们可以通过按下*Windows* + *R*，然后在提示符处输入`Control Panel`来实现这一点，如下面的屏幕截图所示：
- en: '![](assets/80e71c36-7fdf-4962-bb3a-107afc76022b.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80e71c36-7fdf-4962-bb3a-107afc76022b.png)'
- en: 'The Windows Control Panel will pop up. Now click on System and Security, and
    then choose System on the following screen. This will immediately tell us the
    amount of RAM that we have and whether we have a 64-bit processor:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Windows控制面板将弹出。现在点击系统和安全，然后选择以下屏幕上的系统。这将立即告诉我们我们拥有多少RAM以及我们是否拥有64位处理器：
- en: '![](assets/73eb0d90-a13d-42e1-a0ac-7941a3f8ff5e.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/73eb0d90-a13d-42e1-a0ac-7941a3f8ff5e.png)'
- en: 'To check our GPU, click on Device Manager in the upper left-hand corner of
    this window. The Windows Device Manager will then pop up; you can then select
    the Display adapters drop-down box to check which GPUs are on your system:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查我们的GPU，请点击此窗口左上角的设备管理器。然后Windows设备管理器将弹出；然后您可以选择显示适配器下拉框来检查您系统上的GPU：
- en: '![](assets/e084b0d1-48a8-4280-86a5-dd505ff38c0c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e084b0d1-48a8-4280-86a5-dd505ff38c0c.png)'
- en: Installing the GPU drivers
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GPU驱动程序
- en: If you already have drivers for your GPU installed, you may possibly skip this
    step; moreover, some versions of CUDA are pre-packaged with the latest drivers.
    Quite often, CUDA is very particular about which driver you have installed and
    may not even work with the CUDA Toolkit driver, so you may have to experiment
    with several different drivers before you find one that works.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了GPU的驱动程序，您可能可以跳过此步骤；此外，一些版本的CUDA已经预先打包了最新的驱动程序。通常情况下，CUDA对您安装的驱动程序非常挑剔，甚至可能无法与CUDA
    Toolkit驱动程序一起工作，因此您可能需要尝试几种不同的驱动程序，直到找到一个可用的。
- en: Generally speaking, Windows has better CUDA driver compatibility and a more
    user-friendly installation than Linux. Windows users may consider skipping this
    step and just use the driver that is packaged with the CUDA Toolkit, which we
    will install a little later in this chapter. We would strongly suggest that Linux
    users (particularly Linux laptop users), however, closely follow all the steps
    in this section before proceeding.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Windows具有更好的CUDA驱动程序兼容性和更用户友好的安装比Linux。Windows用户可以考虑跳过此步骤，只使用与CUDA Toolkit捆绑的驱动程序，我们稍后将在本章中安装。然而，我们强烈建议Linux用户（特别是Linux笔记本用户）在继续之前，密切遵循本节中的所有步骤。
- en: Installing the GPU drivers (Linux)
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GPU驱动程序（Linux）
- en: 'In Ubuntu, the default driver for NVIDIA GPUs is an open-source driver called
    Nouveau; unfortunately, this does not work with CUDA at all, so we will have to
    install a proprietary driver. We will have to add the special `graphics-drivers` repository
    to our package manager to be able to download proprietary NVIDIA drivers to our
    Ubuntu system. We add the repository by typing the following line into the bash
    prompt:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu中，NVIDIA GPU的默认驱动程序是一个名为Nouveau的开源驱动程序；不幸的是，这在CUDA中根本不起作用，因此我们必须安装专有驱动程序。我们必须将特殊的`graphics-drivers`存储库添加到我们的软件包管理器中，以便能够将专有NVIDIA驱动程序下载到我们的Ubuntu系统中。我们通过在bash提示符中输入以下行来添加存储库：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since this is a `sudo` superuser command, you will have to enter your password.
    We now synchronize our system with the new repository by typing the following
    line:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个`sudo`超级用户命令，您将需要输入您的密码。我们现在通过输入以下行来将系统与新的存储库同步：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We should now be ready to install our driver. From the Ubuntu desktop, press
    *Windows* + *R*, and then enter `software and drivers`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该准备安装我们的驱动程序。从Ubuntu桌面，按下*Windows* + *R*，然后输入`software and drivers`：
- en: '![](assets/33637818-a7d1-4fb9-8b47-9c09741b001c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/33637818-a7d1-4fb9-8b47-9c09741b001c.png)'
- en: 'The Software & Drivers setup menu should appear. From here, click on the tab
    marked Additional Drivers. You should see a selection of available stable proprietary
    drivers for your GPU; choose the newest one you see I(n my case, it is `nvidia-driver-396`,
    demonstrated as follows):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 软件和驱动程序设置菜单应该出现。从这里，点击标记为附加驱动程序的选项卡。您应该看到一系列可用的稳定专有驱动程序供您的GPU选择；选择您看到的最新的一个（在我的情况下，它是`nvidia-driver-396`，如下所示）：
- en: '![](assets/d75d9ff2-f44a-459c-ba72-7ded556d763b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d75d9ff2-f44a-459c-ba72-7ded556d763b.png)'
- en: With the latest driver selected, click on Apply Changes. You will be prompted
    again for your `sudo` password, and then the driver will install; a progress bar
    should appear. Note that this process can take a long time and it may appear that
    your computer is *hanging*; this process can take well over an hour, so please
    be patient.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择最新的驱动程序后，点击应用更改。您将再次被提示输入您的`sudo`密码，然后驱动程序将安装；进度条应该出现。请注意，这个过程可能需要很长时间，而且可能会出现您的计算机“挂起”的情况；这个过程可能需要超过一个小时，所以请耐心等待。
- en: 'Finally, when the process is complete, reset your computer, and return to your
    Ubuntu desktop. Now type *Windows* + *A*, and then enter `nvidia-settings` (or
    alternatively, run this program from a bash prompt). The NVIDIA X Server Settings
    manager should appear, and indicate that you are using the appropriate driver
    version:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当过程完成时，重启您的计算机，返回到Ubuntu桌面。现在输入*Windows* + *A*，然后输入`nvidia-settings`（或者，从bash提示符中运行此程序）。NVIDIA
    X Server设置管理器应该出现，并指示您正在使用适当的驱动程序版本：
- en: '![](assets/bdab7346-2e9f-4615-b61b-a91f6b6b8588.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bdab7346-2e9f-4615-b61b-a91f6b6b8588.png)'
- en: Installing the GPU drivers (Windows)
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GPU驱动程序（Windows）
- en: To reiterate—it is generally suggested that the reader initially skip this step,
    and then install the drivers that are included with the CUDA Toolkit.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一下-通常建议读者最初跳过此步骤，然后安装包含在CUDA Toolkit中的驱动程序。
- en: The latest drivers for Windows are available directly from NVIDIA at [http://www.nvidia.com/Download/](http://www.nvidia.com/Download/). Simply
    choose the appropriate Windows 10 drivers for your GPU from the drop-down menu,
    which are executable (`.exe`) files. Simply install the driver by double-clicking
    on the file from the file manager.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的最新驱动程序可以直接从NVIDIA的[http://www.nvidia.com/Download/](http://www.nvidia.com/Download/)下载。只需从下拉菜单中选择适用于您GPU的适当的Windows
    10驱动程序，这些是可执行（`.exe`）文件。只需通过双击文件管理器中的文件来安装驱动程序。
- en: Setting up a C++ programming environment
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立C++编程环境
- en: Now that we have our drivers installed, we have to set up our C/C++ programming
    environment; both Python and CUDA are particular about what compilers and IDEs
    they may integrate with, so you may have to be careful. In the case of Ubuntu
    Linux users, the standard repository compilers and IDEs generally work and integrate
    perfectly with the CUDA Toolkit, while Windows users might have to exercise a
    little more caution.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了驱动程序，我们必须设置我们的C/C++编程环境；Python和CUDA都对它们可能集成的编译器和IDE有特殊要求，所以您可能需要小心。对于Ubuntu
    Linux用户，标准存储库的编译器和IDE通常可以完美地与CUDA工具包集成，而Windows用户可能需要更加小心。
- en: Setting up GCC, Eclipse IDE, and graphical dependencies (Linux)
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置GCC、Eclipse IDE和图形依赖项（Linux）
- en: 'Open up a Terminal from the Ubuntu desktop (*Ctrl* + *Alt* + *T*). We first
    update the `apt` repository as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从Ubuntu桌面打开终端（*Ctrl* + *Alt* + *T*）。我们首先更新`apt`存储库如下：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can install everything we need for CUDA with one additional line:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以用一行额外的命令安装我们需要的CUDA一切：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `build-essential` is the package with the `gcc` and `g++` compilers, and
    other utilities such as make; `binutils` has some generally useful utilities,
    such as the LD linker, `gdb` is the debugger, and Eclipse is the IDE that we will
    be using.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`build-essential`是带有`gcc`和`g++`编译器以及其他实用程序（如make）的软件包；`binutils`有一些通用的实用程序，如LD链接器；`gdb`是调试器；Eclipse是我们将要使用的IDE。
- en: 'Let''s also install a few additional dependencies that will allow us to run
    some of the graphical (OpenGL) demos included with the CUDA Toolkit with this
    line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还安装一些额外的依赖项，这将允许我们使用以下命令运行CUDA工具包中包含的一些图形（OpenGL）演示：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now you should be good to go to install the CUDA Toolkit.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该可以安装CUDA工具包了。
- en: Setting up Visual Studio (Windows)
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上设置Visual Studio
- en: At the time of writing, only one version of Visual Studio appears to ingrate
    perfectly with both Python and the latest CUDA Toolkits—Visual Studio 2015; that
    is, Visual Studio version 14.0.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，只有一个版本的Visual Studio似乎完美地与Python和最新的CUDA工具包集成在一起——Visual Studio 2015；也就是说，Visual
    Studio版本14.0。
- en: While it may be possible to make a sub-installation of this under a later version
    of Visual Studio (for example, 2017), we would suggest to the reader that you
    directly install Visual Studio 2015 with C/C++ support onto your system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可能可以在较新版本的Visual Studio（例如2017）下进行子安装，但我们建议读者直接在系统上安装带有C/C++支持的Visual Studio
    2015。
- en: Visual Studio Community 2015, the free version of this software, can be downloaded
    at [https://visualstudio.microsoft.com/vs/older-downloads/](https://visualstudio.microsoft.com/vs/older-downloads/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Community 2015，这个软件的免费版本，可以在[https://visualstudio.microsoft.com/vs/older-downloads/](https://visualstudio.microsoft.com/vs/older-downloads/)下载。
- en: 'Here, we will do a minimalist installation, with only the necessary components
    for CUDA. We run the installation software, and select the Custom installation:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将进行最小化安装，只安装CUDA所需的组件。我们运行安装软件，并选择自定义安装：
- en: '![](assets/64390e7f-5b9c-4768-9d4e-b7b4116d57c7.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64390e7f-5b9c-4768-9d4e-b7b4116d57c7.png)'
- en: 'Click Next, then click the drop-down box for Programming Languages, and then
    choose Visual C++ (feel free to select other packages or programming languages
    if you want or need them for other purposes, but Visual C++ is all we will need
    for GPU programming):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击下一步，然后点击编程语言的下拉框，然后选择Visual C++（如果您需要其他包或编程语言，可以随意选择，但是对于GPU编程，我们只需要Visual
    C++）：
- en: '![](assets/63cef2a7-be52-499c-af90-810042581d5d.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/63cef2a7-be52-499c-af90-810042581d5d.png)'
- en: This should take some time to install. After this is complete, we will be ready
    to install the CUDA Toolkit.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个安装过程可能需要一些时间。完成后，我们将准备安装CUDA工具包。
- en: Installing the CUDA Toolkit
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装CUDA工具包
- en: Finally, we are beginning to get close to our goal! We now download our CUDA
    Toolkit by heading over to [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).[ ](https://developer.nvidia.com/cuda-downloads)Select
    the appropriate operating system and you will see several options. In the case
    of both Windows and Linux, there are both network and local installations. I tend
    to use the local installation option under both Windows and Linux, because I prefer
    to download the entire package up-front; if there are any network problems, then
    you can be assured they won't occur while you are installing the CUDA Toolkit.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们开始接近我们的目标！现在我们通过访问[https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)来下载我们的CUDA工具包。选择适当的操作系统，您将看到几个选项。对于Windows和Linux，都有网络和本地安装选项。我倾向于在Windows和Linux下都使用本地安装选项，因为我更喜欢一次性下载整个软件包；如果有任何网络问题，那么您可以确保在安装CUDA工具包时不会发生问题。
- en: Installing the CUDA Toolkit (Linux)
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装CUDA工具包（Linux）
- en: In the case of Linux users, you will see that there are choices for using a
    `.deb` package and a `.run` file; for most users, I would suggest going with the
    `.deb` file, since this will install any missing packages that CUDA requires automatically.
    The `.run` file installs outside of your system's **Advanced Package Tool **(**APT**)
    system, which effectively just copies the appropriate files to the system's `/usr`
    binary and library directories. If you don't want to interfere with your system's
    APT system or repositories, and have a good understanding of Linux, the `.run` file
    may be more appropriate. In either case, carefully follow the instructions given
    on the site about installing the package, which can vary slightly from one version
    to the next.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux用户，您将看到使用`.deb`包和`.run`文件的选择；对于大多数用户，我建议使用`.deb`文件，因为这将自动安装CUDA需要的任何缺少的软件包。`.run`文件安装在系统的**高级软件包工具**（APT）系统之外，它只是将适当的文件复制到系统的`/usr`二进制和库目录。如果您不想干扰系统的APT系统或存储库，并且对Linux有很好的理解，那么`.run`文件可能更合适。无论哪种情况，请仔细遵循网站上关于安装软件包的说明，这些说明可能会因版本而略有不同。
- en: 'After the package is finished installing, you may have to configure your `PATH`
    and `LD_SYSTEM_CONFIG` environment variables so that your system can find the
    appropriate binary executable and library files needed for CUDA. I would suggest
    doing this by appending the followiang lines to the end of your `.bashrc` file
    in your user directory. Open the `~/.bashrc` file with your favorite text editor,
    such as `gedit`, `nano`, `emacs`, or `vim`, and, at the very bottom of the file,
    add the following lines:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装包完成后，您可能需要配置您的`PATH`和`LD_SYSTEM_CONFIG`环境变量，以便您的系统可以找到CUDA所需的适当的二进制可执行文件和库文件。我建议您通过将以下行附加到您用户目录中的`.bashrc`文件的末尾来完成这个步骤。使用您喜欢的文本编辑器，如`gedit`、`nano`、`emacs`或`vim`打开`~/.bashrc`文件，然后在文件的最底部添加以下行：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the file and then exit the Terminal. You can now ensure that you've correctly
    installed the toolkit by opening a new Terminal and typing `nvcc --version` and
    then pressing *Enter*, which will give you the version information of the compiler
    for your toolkit. (`nvcc` is the command-line CUDA C compiler, which is analogous
    to the `gcc` compiler.)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件然后退出终端。您现在可以通过打开一个新的终端并输入`nvcc --version`然后按*Enter*来确保您已正确安装了工具包，这将给您工具包编译器的版本信息。（`nvcc`是命令行CUDA
    C编译器，类似于`gcc`编译器。）
- en: Installing the CUDA Toolkit (Windows)
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装CUDA Toolkit（Windows）
- en: In the case of Windows users, you can install the package by double-clicking
    on the `.exe` file and following all the on-screen prompts.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，您可以通过双击`.exe`文件并按照屏幕上的提示来安装包。
- en: Once the installation is complete, reset your system. We will now ensure that
    CUDA was installed correctly by checking the `nvcc` compiler. Under the Start
    menu, click on the `Visual Studio 2015` folder, and then click VS2015 x64 Native
    Tools Command Prompt. A Terminal window will pop up; now type `nvcc --version`
    and press *Enter*, which should give you the version information of the NVIDIA compiler.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，重置您的系统。我们现在将通过检查`nvcc`编译器来确保CUDA已正确安装。在开始菜单下，点击`Visual Studio 2015`文件夹，然后点击VS2015
    x64 Native Tools Command Prompt。一个终端窗口将弹出；现在输入`nvcc --version`并按*Enter*，这应该会给您NVIDIA编译器的版本信息。
- en: Setting up our Python environment for GPU programming
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为GPU编程设置我们的Python环境
- en: With our compilers, IDEs, and the CUDA Toolkit properly installed on our system,
    we now can set up an appropriate Python environment for GPU programming. There
    are many options here, but we explicitly recommend that you work with the Anaconda
    Python Distribution. Anaconda Python is a self-contained and user-friendly distribution
    that can be installed directly in your user directory, and which does not require
    any administrator or `sudo` level system access to install, use, or update.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的编译器、集成开发环境和CUDA工具包正确安装在我们的系统上，我们现在可以为GPU编程设置一个合适的Python环境。这里有很多选择，但我们明确建议您使用Anaconda
    Python Distribution。Anaconda Python是一个独立且用户友好的分发版，可以直接安装在您的用户目录中，而且不需要任何管理员或`sudo`级别的系统访问权限来安装、使用或更新。
- en: Keep in mind that Anaconda Python comes in two flavors—Python 2.7, and Python
    3\. Since Python 3 is currently not as well-supported for some of the libraries
    we will be using, we will be using Python 2.7 in this book, which still has a
    broad mainstream usage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Anaconda Python有两种版本——Python 2.7和Python 3。由于Python 3目前对我们将要使用的一些库的支持不是很好，我们将在本书中使用Python
    2.7，这仍然是广泛使用的。
- en: You can install Anaconda Python by going to [https://www.anaconda.com/download](https://www.anaconda.com/download),
    choosing your operating system, and then by choosing to download the Python 2.7
    version of the distribution. Follow the instructions given on the Anaconda site
    to install the distribution, which is relatively straightforward. We can now set
    up our local Python installation for GPU programming.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[https://www.anaconda.com/download](https://www.anaconda.com/download)来安装Anaconda
    Python，选择您的操作系统，然后选择下载分发版的Python 2.7版本。按照Anaconda网站上给出的说明安装分发版，这相对比较简单。现在我们可以为GPU编程设置本地Python安装。
- en: 'We will now set up what is arguably the most important Python package for this
    book: Andreas Kloeckner''s PyCUDA package.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将设置本书中可能是最重要的Python包：Andreas Kloeckner的PyCUDA包。
- en: Installing PyCUDA (Linux)
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyCUDA（Linux）
- en: Open up a command line in Linux. Ensure that your `PATH` variable is set up
    correctly to use the local Anaconda installation of Python (rather than the system-wide
    installation) by typing `which python` at the bash prompt and pressing *Enter*
    (Anaconda should have automatically configured your `.bashrc` during installation);
    this should tell you that the Python binary is in your local `~/anaconda2/bin` directory,
    rather than in the `/usr/bin` directory. If this isn't the case, open a text editor
    and put the line `export PATH="/home/${USER}/anaconda2/bin:${PATH}"` at the end
    of your `~/.bashrc` file, save this, open a new Terminal, and then check again.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中打开一个命令行。通过在bash提示符下输入`which python`并按*Enter*来确保您的`PATH`变量正确设置为使用本地Anaconda安装的Python（而不是系统范围的安装）（Anaconda应该在安装过程中自动配置您的`.bashrc`）；这应该告诉您Python二进制文件在您的本地`~/anaconda2/bin`目录中，而不是在`/usr/bin`目录中。如果不是这种情况，请打开一个文本编辑器，并在您的`~/.bashrc`文件的末尾放置以下行`export
    PATH="/home/${USER}/anaconda2/bin:${PATH}"`，保存后，打开一个新的终端，然后再次检查。
- en: There are several options for installation of PyCUDA. The easiest option is
    to install the latest stable version from the PyPI repository by typing `pip install
    pycuda`. You can also install the latest version of PyCUDA by following the instructions
    at the PyCUDA official website at [https://mathema.tician.de/software/pycuda/](https://mathema.tician.de/software/pycuda/).
    Please note that if you wish to re-install PyCUDA from a different source, be
    sure to uninstall it first with `pip uninstall pycuda`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种安装PyCUDA的选项。最简单的选项是从PyPI存储库安装最新稳定版本，方法是输入`pip install pycuda`。您还可以按照PyCUDA官方网站上的说明安装最新版本的PyCUDA，网址为[https://mathema.tician.de/software/pycuda/](https://mathema.tician.de/software/pycuda/)。请注意，如果您希望从不同的来源重新安装PyCUDA，请确保首先使用`pip
    uninstall pycuda`卸载它。
- en: Creating an environment launch script (Windows)
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个环境启动脚本（Windows）
- en: Windows users will need to be particularly careful that both their Visual Studio
    and Anaconda Python environment variables are set up correctly in order to use
    PyCUDA; otherwise, Python will not be able to find NVIDIA's `nvcc` CUDA compiler
    or Microsoft's `cl.exe` C++ compiler. Fortunately, batch scripts are included
    that will set up these environments for us automatically, but we will have to
    be careful that these are executed each and every time we want to do GPU programming.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户需要特别注意，他们的Visual Studio和Anaconda Python环境变量是否设置正确，以便使用PyCUDA；否则，Python将无法找到NVIDIA的`nvcc`
    CUDA编译器或Microsoft的`cl.exe` C++编译器。幸运的是，包含了批处理脚本，可以自动为我们设置这些环境，但我们必须小心，每次想要进行GPU编程时都要执行这些脚本。
- en: We will, therefore, create a batch script that will launch an appropriate IDE
    or command-line environment by calling these other two scripts in succession.
    (This script is also available at [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/2/launch-python-cuda-environment.bat](https://github.com/btuomanen/handsongpuprogramming/blob/master/2/launch-python-cuda-environment.bat).)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将创建一个批处理脚本，通过连续调用这两个脚本来启动适当的IDE或命令行环境。 （此脚本也可在[https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/2/launch-python-cuda-environment.bat](https://github.com/btuomanen/handsongpuprogramming/blob/master/2/launch-python-cuda-environment.bat)上找到。）
- en: 'Be sure to first open up Windows Notepad, and follow along:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必首先打开Windows记事本，并跟随操作：
- en: First, find where your `vcvars.bat` file for Visual Studio is; in the case of
    Visual Studio 2015, it is at `C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先找到您的Visual Studio的`vcvars.bat`文件的位置；对于Visual Studio 2015，它位于`C:\Program Files
    (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat`。
- en: 'Type the following line into your text editor, and then press *Enter*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中输入以下行，然后按*Enter*：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We now need to call the Anaconda's `activate.bat` script to set up the Anaconda
    Python environment variables; the standard path is `Anaconda2\Scripts\activate.bat`.
    We have to further indicate where the Anaconda libraries are with an argument
    to this script. In my case, the second line in my launch script would be `call
    "C:\Users\%username%\Anaconda2\Scripts\activate.bat" C:\Users\%username%\Anaconda2`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要调用Anaconda的`activate.bat`脚本来设置Anaconda Python环境变量；标准路径是`Anaconda2\Scripts\activate.bat`。我们还必须指示此脚本的参数是Anaconda库的位置。在我的情况下，我的启动脚本中的第二行将是`call
    "C:\Users\%username%\Anaconda2\Scripts\activate.bat" C:\Users\%username%\Anaconda2`。
- en: Finally, the last line of our batch script will launch whatever environment—IDE
    or command-line prompt—you prefer to program in, which will inherit all of the
    necessary environment and system variables the prior two scripts will set up.
    If you prefer the old standard DOS-style Command Prompt, this line should just
    be `cmd`. If you like to work from PowerShell, change this to `powershell`. It
    will be necessary to use the command line in some cases, particularly for accessing
    the command line `pip` and `conda` for updating your Python library.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的批处理脚本的最后一行将启动您喜欢的任何环境——IDE或命令行提示符，它将继承前两个脚本设置的所有必要环境和系统变量。如果您喜欢旧的标准DOS风格命令提示符，这行应该只是`cmd`。如果您喜欢从PowerShell工作，请将其更改为`powershell`。在某些情况下，特别是用于访问命令行`pip`和`conda`来更新Python库时，需要使用命令行。
- en: Finally, save this file to your desktop with the filename `launch-python-cuda-environment.bat`. You
    can now launch our Python GPU programming environment by double-clicking this
    file.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将此文件保存到桌面，并命名为`launch-python-cuda-environment.bat`。现在，您可以通过双击此文件来启动我们的Python
    GPU编程环境。
- en: (Keep in mind that if you wish to use the Jupyter Notebook or Spyder Python
    IDEs, you can simply launch these from the command line with `jupyter-notebook`
    or `spyder`, or alternatively, you can make a batch script that just replaces
    `cmd` with the appropriate IDE launch command.)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: （请记住，如果您希望使用Jupyter Notebook或Spyder Python IDE，您可以简单地通过`jupyter-notebook`或`spyder`从命令行启动它们，或者您可以制作一个批处理脚本，只需用适当的IDE启动命令替换`cmd`。）
- en: Installing PyCUDA (Windows)
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyCUDA（Windows）
- en: 'Due to the fact that most Python libraries are primarily written by and for
    Linux users, it is suggested that you install a pre-built PyCUDA wheel binary
    from Christoph Gohlke''s site at the following address: [https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda](https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda).
    Download a file of the from `pycuda-2017.1.1+cuda(VERSION)-cp27-cp27m-win_amd64.whl` where
    version is your CUDA version number. You can now install PyCUDA by typing the
    following on the command line, and replacing `pycuda.whl` with the full path and
    filename of your PyCUDA wheel:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数Python库主要是由Linux用户编写和为Linux用户编写的，建议您从Christoph Gohlke的网站上安装预构建的PyCUDA wheel二进制文件，网址为：[https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda](https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda)。下载一个文件，文件名为`pycuda-2017.1.1+cuda(VERSION)-cp27-cp27m-win_amd64.whl`，其中版本是您的CUDA版本号。现在，您可以通过在命令行中输入以下内容并用您的PyCUDA
    wheel的完整路径和文件名替换`pycuda.whl`来安装PyCUDA：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (Alternatively, you can try installing PyCUDA from the PyPI repository with
    `pip install pycuda` , or by following the instructions on the PyCUDA website.)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: （或者，您可以尝试使用`pip install pycuda`从PyPI存储库安装PyCUDA，或者按照PyCUDA网站上的说明操作。）
- en: Testing PyCUDA
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试PyCUDA
- en: Finally, we're at the point where we can see whether our GPU programming environment
    actually works. We will run a small program from the next chapter that will query
    our GPU and yield some relevant information about the model number, memory, number
    of cores, architecture, and so forth. Get the Python file (`deviceQuery.py`) from
    directory `3` in the repository, which is also available at [https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/3/deviceQuery.py](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/3/deviceQuery.py).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们到了可以看到我们的GPU编程环境是否真正起作用的时候。我们将运行下一章的一个小程序，该程序将查询我们的GPU并提供有关型号号码、内存、核心数量、架构等相关信息。从存储库中的目录`3`中获取Python文件（`deviceQuery.py`），也可以在[https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/3/deviceQuery.py](https://github.com/PacktPublishing/Hands-On-GPU-Programming-with-Python-and-CUDA/blob/master/3/deviceQuery.py)上找到。
- en: If you are using Windows, be sure to launch the GPU programming environment
    by launching the `.bat` file on our desktop we made in the last section. Otherwise,
    if you are using Linux, open a bash Terminal. Now type the following line and
    press *Enter—*`python deviceQuery.py`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，请确保通过在桌面上启动我们在上一节中创建的`.bat`文件来启动GPU编程环境。否则，如果您使用的是Linux，请打开一个bash终端。现在输入以下命令并按*Enter*键——`python
    deviceQuery.py`。
- en: 'This will output many lines of data, but the first few lines should indicate
    that your GPU has been detected by PyCUDA, and you should see the model number
    in the following line:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出许多行数据，但前几行应该表明PyCUDA已经检测到您的GPU，并且您应该在下一行看到型号号码：
- en: '![](assets/51a20697-a1c6-435b-95a0-9845a9506ab6.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/51a20697-a1c6-435b-95a0-9845a9506ab6.png)'
- en: Congratulations, you are now ready to embark upon the world of GPU programming!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您现在已经准备好进入GPU编程的世界了！
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Setting up your Python environment for GPU programming can be a very delicate
    process. The Anaconda Python 2.7 distribution is suggested for both Windows and
    Linux users for the purposes of this text. First, we should ensure that we have
    the correct hardware for GPU programming; generally speaking, a 64-bit Windows
    or Linux PC with 4 gigabytes of RAM and any entry-level NVIDIA GPU from 2016 or
    later will be sufficient for our ends. Windows users should be careful in using
    a version of Visual Studio that works well with both the CUDA Toolkit and Anaconda
    (such as VS 2015), while Linux users should be particularly careful in the installation
    of their GPU drivers, and set up the appropriate environment variables in their
    `.bashrc` file. Furthermore, Windows users should create an appropriate launch
    script that will set up their environment for GPU programming and should use a
    pre-compiled wheel file for the installation of the PyCUDA library.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为GPU编程设置Python环境可能是一个非常微妙的过程。本文建议Windows和Linux用户都使用Anaconda Python 2.7发行版。首先，我们应该确保我们有正确的硬件进行GPU编程；一般来说，64位Windows或Linux
    PC，带有4GB RAM和2016年或之后的任何入门级NVIDIA GPU将足够满足我们的需求。Windows用户应该注意使用一个既适用于CUDA工具包又适用于Anaconda的Visual
    Studio版本（如VS 2015），而Linux用户在安装GPU驱动程序时应特别小心，并在其`.bashrc`文件中设置适当的环境变量。此外，Windows用户应该创建一个适当的启动脚本，用于设置GPU编程环境，并应该使用预编译的PyCUDA库安装文件。
- en: Now, with our programming environment set up and in place, we will spend the
    next chapter learning the very basics of GPU programming. We will see how to write
    and read data to and from the GPU's memory, and how to write some very simple
    *elementwise* GPU functions in CUDA C. (If you have seen the classic 1980's film
    *The Karate Kid*, then you might think of the following chapter as the "wax on,
    wax off" of GPU programming.)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的编程环境已经设置好了，接下来的一章我们将学习GPU编程的基础知识。我们将看到如何将数据写入GPU的内存，以及如何在CUDA C中编写一些非常简单的*逐元素*GPU函数。（如果你看过经典的1980年代电影《功夫小子》，那么你可能会把下一章看作是GPU编程的“上蜡，下蜡”。）
- en: Questions
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Can we run CUDA on our main processor's built-in Intel HD GPU? What about on
    a discrete AMD Radeon GPU?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在主处理器内置的英特尔HD GPU上运行CUDA吗？离散的AMD Radeon GPU呢？
- en: Does this book use Python 2.7 or Python 3.7 for examples?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这本书的示例是使用Python 2.7还是Python 3.7？
- en: What program do we use in Windows to see what GPU hardware we have installed?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows中，我们使用什么程序来查看我们安装了什么GPU硬件？
- en: What command-line program do we use in Linux to see what GPU hardware we have
    installed?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux中，我们使用什么命令行程序来查看我们安装了什么GPU硬件？
- en: What is the command we use in Linux to determine how much memory our system
    has?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux中，我们使用什么命令来确定系统有多少内存？
- en: If we don't want to alter our Linux system's APT repository, should we use the
    `run` or `deb` installer for CUDA?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们不想改变我们的Linux系统的APT存储库，我们应该使用`run`还是`deb`安装程序来安装CUDA？
