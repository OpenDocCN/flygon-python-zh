- en: Filesystem and Directories
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统和目录
- en: 'In this chapter, we will cover following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Traversing folders—recursively traversing a path in the filesystem and inspecting
    its contents
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历文件夹-递归遍历文件系统中的路径并检查其内容
- en: Working with paths—building paths in a system-independent way
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理路径-以系统独立的方式构建路径
- en: Expanding filenames—finding all files that match a specific pattern
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展文件名-查找与特定模式匹配的所有文件
- en: Getting file information—detecting the properties of a file or directory
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取文件信息-检测文件或目录的属性
- en: Named temporary files—working with temporary files that you need to access from
    other processes too
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名临时文件-使用需要从其他进程访问的临时文件
- en: Memory and disk buffer—spooling a temporary buffer to disk if it's bigger than
    a threshold
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存和磁盘缓冲区-如果临时缓冲区大于阈值，则将其暂存到磁盘上
- en: Managing filename encoding—working with the encoding of filenames
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理文件名编码-处理文件名的编码
- en: Copying a directory—copying the content of a whole directory
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制目录-复制整个目录的内容
- en: Safely replacing a file's content—how to replace the content of a file safely
    in case of failures
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全地替换文件内容-在发生故障时如何安全地替换文件的内容
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Working with files and directories is natural with most software and something
    we, as users, do every day, but as a developer, you will quickly find that it
    can be more complex than expected, especially when multiple platforms have to
    be supported or encodings are involved.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文件和目录是大多数软件自然而然的，也是我们作为用户每天都在做的事情，但作为开发人员，您很快会发现它可能比预期的要复杂得多，特别是当需要支持多个平台或涉及编码时。
- en: The Python standard library has many powerful tools to work with files and directories.
    At first, it might be hard to spot those across the `os`, `shutil`, `stat`, and `glob`
    functions, but once you are aware of all the pieces, it's clear that the standard
    library provides a great set of tools to work with files and directories.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库有许多强大的工具可用于处理文件和目录。起初，可能很难在`os`、`shutil`、`stat`和`glob`函数中找到这些工具，但一旦您了解了所有这些工具，就会清楚地知道标准库提供了一套很好的工具来处理文件和目录。
- en: Traversing folders
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历文件夹
- en: When working with a path in the filesystem, it's common the need to find all
    files contained directly or in subfolders. Think about copying a directory or
    computing its size; in both cases, you will need to fetch the complete list of
    files included in the directory you want to copy, or for which you want to compute
    the size.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件系统中使用路径时，通常需要查找直接或子文件夹中包含的所有文件。想想复制一个目录或计算其大小；在这两种情况下，您都需要获取要复制的目录中包含的所有文件的完整列表，或者要计算大小的目录中包含的所有文件的完整列表。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps for this recipe are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱的步骤如下：
- en: 'The `os.walk` function in the `os` module is meant to traverse a directory
    recursively, its usage is not immediate, but with little effort, we can wrap it
    into a convenient generator of all the contained files:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`os`模块中的`os.walk`函数用于递归遍历目录，其使用方法并不直接，但稍加努力，我们可以将其包装成一个方便的生成器，列出所有包含的文件：'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we can just iterate over `traverse` and apply whatever operation we need
    on top of it:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以遍历`traverse`并对其进行任何操作：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `os.walk` function navigates the directory and all its subfolders. For
    each directory that it finds, it returns three values: the directory itself, the
    subdirectories it contains, and the files it contains. Then, it will move into
    the subdirectories of the directory it just provided and return the same three
    values for the subdirectory.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`os.walk`函数遍历目录及其所有子文件夹。对于它找到的每个目录，它返回三个值：目录本身、它包含的子目录和它包含的文件。然后，它将进入所提供的目录的子目录，并为子目录返回相同的三个值。'
- en: This means that in our recipe, `basepath` is always the current directory that
    is being inspected, `directories` are its subdirectories, and `files` are the
    files that it contains.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在我们的食谱中，`basepath`始终是正在检查的当前目录，`directories`是其子目录，`files`是它包含的文件。
- en: By iterating over the list of files contained within the current directory and
    joining their names with the directory path itself, we can get the path of all
    files contained in the directory. As `os.walk` will then move into all the subdirectories,
    we will be able to return all the files that are directly or indirectly within
    the required path.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过迭代当前目录中包含的文件列表，并将它们的名称与目录路径本身连接起来，我们可以获取目录中包含的所有文件的路径。由于`os.walk`将进入所有子目录，因此我们将能够返回直接或间接位于所需路径内的所有文件。
- en: Working with paths
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理路径
- en: Python was originally created as a system management language. It was originally
    meant to write scripts for the Unix system, so navigating the disk has always
    been one of the core parts of the language, but in the most recent versions of
    Python, this was extended further with the `pathlib` module, which makes it very
    convenient and easy to build paths that refer to files or directories, without
    having to care about the system we are running on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python最初是作为系统管理语言创建的。最初是为Unix系统编写脚本，因此在语言的核心部分之一始终是浏览磁盘，但在Python的最新版本中，这进一步扩展到了`pathlib`模块，它使得非常方便和容易地构建引用文件或目录的路径，而无需关心我们正在运行的系统。
- en: Since writing multiplatform software can be bothersome, it's very important
    to have intermediate layers that abstract the conventions of the underlying system
    and allow us to write code that will work everywhere.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于编写多平台软件可能很麻烦，因此非常重要的是有中间层来抽象底层系统的约定，并允许我们编写可以在任何地方运行的代码。
- en: Especially when working with paths, the differences between how Unix and Windows
    systems treating paths can be problematic. The fact that one system uses `/` and
    the other `\` to separate the parts of the path is bothersome by itself, but Windows
    also has the concept of drivers while Unix systems don't, so we need something
    that allows us to abstract these differences and manage paths easily.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在处理路径时，Unix和Windows系统处理路径的方式之间的差异可能会有问题。一个系统使用`/`，另一个使用`\`来分隔路径的部分本身就很麻烦，但Windows还有驱动器的概念，而Unix系统没有，因此我们需要一些东西来抽象这些差异并轻松管理路径。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps for this recipe:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此食谱的以下步骤：
- en: 'The `pathlib` library allows us to build paths from the parts that constitute
    it, by properly doing the right thing based on the system you are on:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pathlib`库允许我们根据构成它的部分构建路径，根据您所在的系统正确地执行正确的操作：'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The interesting part is that the same actions would lead to the same exact
    result on Windows, even though `path.resolve()` would have printed a slightly
    different result:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有趣的是，即使在Windows上进行相同的操作，也会得到完全相同的结果，即使`path.resolve()`会打印出稍微不同的结果：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once we have a `pathlib.Path` instance, we can even move around the filesystem
    by using the `/` operator:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们有了`pathlib.Path`实例，甚至可以使用`/`运算符在文件系统中移动：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous code works on both Windows and Linux/macOS and leads to the expected
    result, even though I wrote it on a Unix-like system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我是在类Unix系统上编写的，上述代码在Windows和Linux/macOS上都能正常工作并产生预期的结果。
- en: There's more...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`pathlib.Path` actually builds a different object depending on the system we
    are in. On POSIX systems, it will result in a `pathlib.PosixPath` object, while
    on Windows systems, it will lead to a `pathlib.WindowsPath` object.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`pathlib.Path`实际上会根据我们所在的系统构建不同的对象。在POSIX系统上，它将导致一个`pathlib.PosixPath`对象，而在Windows系统上，它将导致一个`pathlib.WindowsPath`对象。'
- en: It is not possible to build `pathlib.WindowsPath` on a POSIX system, because
    it's implemented on top of Windows system calls, which are not available on Unix
    systems. In case you need to work with Windows paths on a POSIX system (or with
    POSIX paths on a Windows system), you can rely on `pathlib.PureWindowsPath` and
    `pathlib.PurePosixPath`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在POSIX系统上无法构建`pathlib.WindowsPath`，因为它是基于Windows系统调用实现的，而这些调用在Unix系统上不可用。如果您需要在POSIX系统上使用Windows路径（或在Windows系统上使用POSIX路径），可以依赖于`pathlib.PureWindowsPath`和`pathlib.PurePosixPath`。
- en: Those two objects won't implement features to actually access the files (read,
    write, link, resolve absolute paths, and so on), but they will allow you to perform
    simple operations that are only related to manipulating the path itself.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个对象不会实现实际访问文件的功能（读取、写入、链接、解析绝对路径等），但它们将允许您执行与操作路径本身相关的简单操作。
- en: Expanding filenames
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展文件名
- en: In the everyday use of our system, we are used to providing paths, such as `*.py`,
    to identify all the Python files, so it's not a surprise that our users expect
    to be able to do the same when they provide one or more files to our software.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们系统的日常使用中，我们习惯于提供路径，例如`*.py`，以识别所有的Python文件，因此当我们的用户提供一个或多个文件给我们的软件时，他们能够做同样的事情并不奇怪。
- en: Usually, wildcards are expanded by the shell itself, but suppose you are reading
    them from a configuration file or you want to write a tool that clears the `.pyc`
    files (a cache of compiled Python bytecode) in your current project, then the
    Python standard library has what you need.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，通配符是由shell本身扩展的，但假设您从配置文件中读取它们，或者您想编写一个工具来清除当前项目中的`.pyc`文件（编译的Python字节码缓存），那么Python标准库中有您需要的内容。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps for this recipe are:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的步骤是：
- en: '`pathlib` is able to perform many operations on the path you provided. One
    of them is resolving wildcards:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pathlib`能够对您提供的路径执行许多操作。其中之一是解析通配符：'
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It also supports resolving wildcards recursively:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它还支持递归解析通配符：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Getting file information
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取文件信息
- en: When users provide a path you really don't know what the path refers to. Is
    it a file? Is it a directory? Does it even exist?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提供路径时，您真的不知道路径指的是什么。它是一个文件吗？是一个目录吗？它甚至存在吗？
- en: Retrieving file information allows us to fetch details about the provided path,
    such as whether it points to a file and how big that file is.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 检索文件信息允许我们获取有关提供的路径的详细信息，例如它是否指向文件以及该文件的大小。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps for this recipe:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此食谱的以下步骤：
- en: 'Using `.stat()` on any `pathlib.Path` will provide most details about a path:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对任何`pathlib.Path`使用`.stat()`将提供有关路径的大部分详细信息：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The returned details refer to:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的详细信息是指：
- en: '`st_mode`: File type, flags, and permissions'
  id: totrans-60
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_mode`: 文件类型、标志和权限'
- en: '`st_ino`: Filesystem node storing the file'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_ino`: 存储文件的文件系统节点'
- en: '`st_dev`: Device where the file is stored'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_dev`: 存储文件的设备'
- en: '`st_nlink`: Number of references (hyperlinks) to this file'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_nlink`: 对此文件的引用（超链接）的数量'
- en: '`st_uid`: User owning the file'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_uid`: 拥有文件的用户'
- en: '`st_gid`: Group owning the file'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_gid`: 拥有文件的组'
- en: '`st_size`: Size of the file in bytes'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_size`: 文件的大小（以字节为单位）'
- en: '`st_atime`: Last time the file was accessed'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_atime`: 文件上次访问的时间'
- en: '`st_mtime`: Last time the file was modified'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_mtime`: 文件上次修改的时间'
- en: '`st_ctime`: Time the file was created on Windows, time the metadata was modified
    on Unix'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st_ctime`: 文件在Windows上创建的时间，Unix上修改元数据的时间'
- en: 'If we want to see other details, such as whether the path exists or whether
    it''s a directory, we can rely on these specific methods:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要查看其他详细信息，例如路径是否存在或者它是否是一个目录，我们可以依赖于这些特定的方法：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Named temporary files
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名临时文件
- en: Usually when working with temporary files, we don't care where they are stored.
    We need to create them, store some content there, and get rid of them when we
    are done. Most of the time, we use temporary files when we want to store something
    that is too big to fit in memory, but sometimes you need to be able to provide
    a file to another tool or software, and a temporary file is a great way to avoid
    the need to know where to store such a file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在处理临时文件时，我们不关心它们存储在哪里。我们需要创建它们，在那里存储一些内容，并在完成后摆脱它们。大多数情况下，我们在想要存储一些太大而无法放入内存的东西时使用临时文件，但有时你需要能够提供一个文件给另一个工具或软件，临时文件是避免需要知道在哪里存储这样的文件的好方法。
- en: In that situation, we need to know the path that leads to the temporary file
    so that we can provide it to the other tool.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要知道通往临时文件的路径，以便我们可以将其提供给其他工具。
- en: That's where `tempfile.NamedTemporaryFile` can help. Like all other `tempfile`
    forms of temporary files, it will be created for us and will be deleted automatically
    as soon as we are done working with it, but different from the other types of
    temporary files, it will have a known path that we can provide to other programs
    who will be able to read and write from that file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`tempfile.NamedTemporaryFile`可以帮助的地方。与所有其他`tempfile`形式的临时文件一样，它将为我们创建，并且在我们完成工作后会自动删除，但与其他类型的临时文件不同，它将有一个已知的路径，我们可以提供给其他程序，这些程序将能够从该文件中读取和写入。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: '`tempfile.NamedTemporaryFile` will create the temporary file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`tempfile.NamedTemporaryFile`将创建临时文件：'
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The fact that the `.name` attribute leads to the full file path on disk allows
    us to provide it to other external programs:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`.name`属性导致完整的文件路径在磁盘上，这使我们能够将其提供给其他外部程序：'
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Memory and disk buffer
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存和磁盘缓冲
- en: Sometimes, we need to keep certain data in a buffer, such as a file we downloaded
    from the internet or some data we are generating on the fly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要将某些数据保留在缓冲区中，比如我们从互联网上下载的文件，或者我们动态生成的一些数据。
- en: As the size of such data is not always predictable, is usually not a good idea
    to keep it all in memory.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种数据的大小通常是不可预测的，通常不明智将其全部保存在内存中。
- en: If you are downloading a big 32 GB file from the internet that you need to process
    (such as decompress or parse), it will probably exhaust all your memory if you
    try to store it into a string before processing it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从互联网上下载一个32GB的大文件，需要处理它（如解压缩或解析），如果你在处理之前尝试将其存储到字符串中，它可能会耗尽你所有的内存。
- en: That's why it's usually a good idea to rely on `tempfile.SpooledTemporaryFile`,
    which will keep the content in memory until it reaches its maximum size and will
    then move it to a temporary file if it's bigger than the maximum allowed size.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么通常依赖`tempfile.SpooledTemporaryFile`通常是一个好主意，它将保留内容在内存中，直到达到最大大小，然后如果它比允许的最大大小更大，就将其移动到临时文件中。
- en: That way, we can have the benefit of keeping an in-memory buffer of our data,
    without the risk of exhausting all the memory, because as soon as the content
    is too big, it will be moved to disk.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以享受保留数据的内存缓冲区的好处，而不会因为内容太大而耗尽所有内存，因为一旦内容太大，它将被移动到磁盘上。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Like the other `tempfile` object, creating `SpooledTemporaryFile` is enough
    to make the temporary file available. The only additional part is to provide the
    maximum allowed size, `max_size=`, after which the content will be moved to disk:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他`tempfile`对象一样，创建`SpooledTemporaryFile`就足以使临时文件可用。唯一的额外部分是提供允许的最大大小，`max_size=`，在此之后内容将被移动到磁盘上：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`tempfile.SpooledTemporaryFile` has an `internal _file` property that keeps
    the real data stored in a `BytesIO` store until it can fit in memory, and then
    moves it to a real file once it gets bigger than `max_size`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`tempfile.SpooledTemporaryFile`有一个`内部_file`属性，它将真实数据存储在`BytesIO`存储中，直到它可以适应内存，然后一旦它比`max_size`更大，就将其移动到真实文件中。'
- en: 'You can easily see this behavior by printing the value of `_file` while you
    are writing data:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在写入数据时，你可以通过打印`_file`的值来轻松看到这种行为：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Managing filename encoding
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理文件名编码
- en: Working with filesystems in a reliable way is not as easy as it might seem.
    Our system must have a specific encoding to represent text and usually that means
    that everything we create is handled in that encoding, including filenames.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以可靠的方式使用文件系统并不像看起来那么容易。我们的系统必须有特定的编码来表示文本，通常这意味着我们创建的所有内容都是以该编码处理的，包括文件名。
- en: The problem is that there is no strong guarantee on the encoding of filenames.
    Suppose you attach an external hard drive, what's the encoding of filenames on
    that drive? Well, it will depend on the encoding the system had at the time the
    files were created.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于文件名的编码没有强有力的保证。假设你连接了一个外部硬盘，那个硬盘上的文件名的编码是什么？嗯，这将取决于文件创建时系统的编码。
- en: Usually, to cope with this problem, software tries the system encoding and if
    it fails, it prints some placeholders (have you ever seen a filename full of `?`
    just because your system couldn't understand the name of the file?), which usually
    allows us to see that there is a file, and in many cases even open it, even though
    we might not know how it's actually named.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，为了解决这个问题，软件会尝试系统编码，如果失败，它会打印一些占位符（你是否曾经看到过一个充满`?`的文件名，只是因为你的系统无法理解文件的名称？），这通常允许我们看到有一个文件，并且在许多情况下甚至打开它，尽管我们可能不知道它的实际名称。
- en: To make everything more complex, there is a big difference between Windows and
    Unix systems regarding how they treat filenames. On Unix systems, paths are fundamentally
    just bytes; you don't really care about their encoding as you just read and write
    a bunch of bytes. While on Windows, filenames are actually text.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使一切更加复杂，Windows和Unix系统在处理文件名时存在很大的差异。在Unix系统上，路径基本上只是字节；你不需要真正关心它们的编码，因为你只是读取和写入一堆字节。而在Windows上，文件名实际上是文本。
- en: In Python, filenames are usually stored as `str`. They are text that needs to
    be encoded/decoded somehow.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，文件名通常存储为`str`。它们是需要以某种方式进行编码/解码的文本。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Whenever we process a filename, we should decode it according to the expected
    filesystem encoding. If we fail (because it''s not stored in the expected encoding),
    we must still be able to put it into `str` without corrupting it, so that we can
    open that file even though we can''t read its name:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们处理文件名时，我们应该根据预期的文件系统编码对其进行解码。如果失败（因为它不是以预期的编码存储的），我们仍然必须能够将其放入`str`而不使其损坏，以便我们可以打开该文件，即使我们无法读取其名称：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`decode_filename` tries to do two things: first of all, it asks Python what
    the expected filesystem encoding according to the OS is. Once that''s known, it
    tries to decode the provided filename using that encoding. If it fails, it decodes
    it using `surrogateescape`.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`decode_filename`试图做两件事：首先，它询问Python根据操作系统预期的文件系统编码是什么。一旦知道了这一点，它就会尝试使用该编码解码提供的文件名。如果失败，它将使用`surrogateescape`进行解码。'
- en: What this actually means is *if you fail to decode it, decode it into fake characters
    that we are going to use just to be able to represent it as text*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上意味着*如果你无法解码它，就将其解码为假字符，我们将使用它来表示文本*。
- en: This is really convenient because that way we are able to manage the filename
    as text even thought we don't know its encoding, and when it is encoded back to
    bytes with `surrogateescape`, it will lead back to its original sequence of bytes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很方便，因为这样我们能够将文件名作为文本进行管理，即使我们不知道它的编码，当它使用`surrogateescape`编码回字节时，它将导致回到其原始字节序列。
- en: 'When the filename is encoded in the same encoding as our system, it''s easy
    to see how we are able to decode it to `str` and also print it to read its content:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件名以与我们的系统相同的编码进行编码时，很容易看出我们如何能够将其解码为`str`并打印它以读取其内容：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the encoding is instead one that is not our system encoding (that is, the
    file came from a very old external drive), we can''t really read what''s written
    inside, but we are still able to decode it to strings, so that we can keep it
    in a variable and provide it to any function that might need to work with that
    file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果编码实际上不是我们的系统编码（也就是说，文件来自一个非常古老的外部驱动器），我们实际上无法读取里面写的内容，但我们仍然能够将其解码为字符串，以便我们可以将其保存在一个变量中，并将其提供给任何可能需要处理该文件的函数：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`surrogateescape` means being able to tell Python *I don''t care whether the
    data is garbage, just pass the unknown bytes along as they are*.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`surrogateescape`意味着能够告诉Python*我不在乎数据是否是垃圾，只需原样传递未知的字节*。'
- en: Copying a directory
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制目录
- en: Making copies of a directory's contents is something we can do easily, but what
    if I told you that a tool such as `cp` (the command to copy files on GNU systems)
    is around 1,200 lines of code?
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 复制目录的内容是我们可以轻松做到的事情，但是如果我告诉你，像`cp`（在GNU系统上复制文件的命令）这样的工具大约有1200行代码呢？
- en: Obviously, the `cp` implementation is not Python-based, it has evolved over
    decades, and it takes care of far more than you probably need, but still rolling
    your own code to copy a directory recursively takes far more than you would expect.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，`cp`的实现不是基于Python的，它已经发展了几十年，它照顾的远远超出了你可能需要的，但是自己编写递归复制目录的代码所需的工作远远超出你的预期。
- en: Luckily for us, the Python standard library provides utilities to perform the
    most common operations out of the box and this is one of them.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Python标准库提供了实用程序，可以直接执行最常见的操作之一。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps for this recipe are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的步骤如下：
- en: 'The `copydir` function can rely on `shutil.copytree` to do most of the work:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`copydir`函数可以依赖于`shutil.copytree`来完成大部分工作：'
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we can easily use it to copy the contents of any directory and even limit
    it to only the relevant parts. We are going to copy a directory that contains
    three files, out of which we really only want to copy the `.pdf` file:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以轻松地使用它来复制任何目录的内容，甚至将其限制为只复制相关部分。我们将复制一个包含三个文件的目录，其中我们实际上只想复制`.pdf`文件：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Our destination doesn''t currently exist, so it contains nothing:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的目标目录目前不存在，因此它不包含任何内容：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once we do `copydir`, it will be created and contains what we expect:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们执行`copydir`，它将被创建并包含我们期望的内容：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, the target directory exists and contains the content we expect:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，目标目录存在并包含我们期望的内容：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`shutil.copytree` will retrieve the content of the provided directory through
    `os.listdir`. For every entry returned by `listdir`, it will check whether it''s
    a file or a directory.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`shutil.copytree`将通过`os.listdir`检索提供的目录的内容。对于`listdir`返回的每个条目，它将检查它是文件还是目录。'
- en: If it's a file, it will copy it through the `shutil.copy2` function (it's actually
    possible to replace the used function by providing a `copy_function` argument),
    if it's a directory, `copytree` itself is called recursively.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是文件，它将通过`shutil.copy2`函数进行复制（实际上可以通过提供`copy_function`参数来替换使用的函数），如果是目录，`copytree`本身将被递归调用。
- en: 'The `ignore` argument is then used to build a function that, once called, will
    return all the files that need to be ignored given a provided pattern:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`ignore`参数构建一个函数，一旦调用，将返回所有需要忽略的文件，给定一个提供的模式：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So, `shutil.copytree` will copy all the files apart from `ignore_patterns`,
    which will make it skip.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`shutil.copytree`将复制除`ignore_patterns`之外的所有文件，这将使其跳过。
- en: The last `ignore_dangling_symlinks=True` argument ensures that in the case of
    broken `symlinks`, we just skip the file instead of crashing.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`ignore_dangling_symlinks=True`参数确保在`symlinks`损坏的情况下，我们只是跳过文件而不是崩溃。
- en: Safely replacing file's content
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全地替换文件内容
- en: Replacing the content of a file is a very slow operation. Compared to replacing
    the content of a variable, it's usually a few times slower; when we write something
    to disk, it takes time before it's actually flushed and time before the content
    is actually written to disk. It's not an atomic operation, so if our software
    faces any issues while saving a file, there is a good chance that the file might
    end up being half-written and our users don't have a way to recover the consistent
    state of their data.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 替换文件的内容是一个非常缓慢的操作。与替换变量的内容相比，通常慢几倍；当我们将某些东西写入磁盘时，需要一些时间才能真正刷新，以及在内容实际写入磁盘之前需要一些时间。这不是一个原子操作，因此如果我们的软件在保存文件时遇到任何问题，文件可能会被写入一半，我们的用户无法恢复其数据的一致状态。
- en: There is a pattern commonly used to solve this kind of issue, which is based
    on the fact that writing a file is a slow, expensive, error-prone operation, but
    renaming a file is an atomic, fast, and cheap operation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通常有一种常用模式来解决这种问题，该模式基于写入文件是一个缓慢、昂贵、易出错的操作，但重命名文件是一个原子、快速、廉价的操作。
- en: How to do it...
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'You need to perform the following recipes:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要执行以下操作：
- en: 'Much like `open` can be used as a context manager, we can easily roll out a
    `safe_open` function that allows us to open a file for writing in a safe way:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像`open`可以用作上下文管理器一样，我们可以轻松地推出一个`safe_open`函数，以安全的方式打开文件进行写入：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using `safe_open` as a context manager allows us to write to the file pretty
    much like we would normally:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`safe_open`作为上下文管理器允许我们写入文件，就像我们通常会做的那样。
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And the content will be properly saved once we quit the context:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容将在退出上下文时正确保存：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The major difference is that in case of a crash in our software or a system
    failure while we are writing, we won''t end up with a half-written file, but we
    will preserve any previous state of the file. In this example, we crash midway
    through trying to write `Replace the hello world, expect to write some more`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要区别在于，如果我们的软件崩溃或在写入时发生系统故障，我们不会得到一个写入一半的文件，而是会保留文件的任何先前状态。在这个例子中，我们在尝试写入`替换hello
    world，期望写入更多`时中途崩溃：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With a normal `open`, the result would be just `"Replace the hello world, "`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用普通的`open`，结果将只是`"替换hello world，"`：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'While using `safe_open`, the file will only contain the new data if the whole
    write process succeeded:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用`safe_open`时，只有在整个写入过程成功时，文件才会包含新数据：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In all other cases, the file will still retain its previous state:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有其他情况下，文件仍将保留其先前的状态：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`safe_open` relies on `tempfile` to create a new file where the write operations
    actually happen. Any time we write to `f` in our context, we are actually writing
    to the temporary file.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`safe_open`依赖于`tempfile`来创建一个新文件，其中实际发生写操作。每当我们在上下文中写入`f`时，实际上是在临时文件中写入。'
- en: Then, only when the context exists (`exc_type` is none in `safe_open.__exit__`),
    we actually swap the old file with the new one we just wrote, using `os.rename`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只有当上下文存在时（`safe_open.__exit__`中的`exc_type`为none），我们才会使用`os.rename`将旧文件与我们刚刚写入的新文件进行交换。
- en: If everything works as expected, we should have the new file with all its content
    updated.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切如预期般运行，我们应该有新文件，并且所有内容都已更新。
- en: If any of the steps fails, we just write some or no data to a temporary file
    and get rid of it through `os.unlink`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何步骤失败，我们只需向临时文件写入一些或没有数据，并通过`os.unlink`将其丢弃。
- en: Our previous file, in this case, was never touched and thus still retains its
    previous state.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们以前的文件从未被触及，因此仍保留其先前的状态。
