- en: Publishing to Web Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布到Web服务
- en: At the heart of the IoT are web services that allow interaction with physical
    devices. In this chapter, we will explore the use of web services for the purposes
    of displaying sensory data from our Raspberry Pi. We will also look into Twilio,
    a text messaging service, and how we can use this service to send ourselves a
    text message from our Raspberry Pi.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网的核心是允许与物理设备交互的Web服务。在本章中，我们将探讨使用Web服务来显示来自树莓派的传感器数据的用途。我们还将研究Twilio，一个短信服务，以及我们如何使用此服务从树莓派发送短信给自己。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Publishing sensory data to cloud-based services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将传感器数据发布到基于云的服务
- en: Setting up an account for text message transmission
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为文本消息传输设置账户
- en: Project overview
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will write code to display our sensory data to an IoT dashboard.
    As well as this, we will also explore Twilio, a text messaging service. We will
    then put these two concepts together to enhance the home security dashboard that
    we built in [Chapter 9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml), *Building
    a Home Security Dashboard*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将编写代码将我们的传感器数据显示到IoT仪表板上。此外，我们还将探索Twilio，一个短信服务。然后，我们将把这两个概念结合起来，以增强我们在[第9章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)中构建的家庭安全仪表板。
- en: Getting started
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，需要以下内容：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派3型号（2015年或更新型号）
- en: A USB power supply
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB电源适配器
- en: A computer monitor
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个计算机显示器
- en: A USB keyboard
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB键盘
- en: A USB mouse
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB鼠标
- en: A breadboard
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Jumper wires
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: A DHT-11 temperature sensor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个DHT-11温度传感器
- en: A PIR sensor
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个PIR传感器
- en: A push-button (latching)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮（锁定）
- en: A key switch (optional)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按键开关（可选）
- en: Publishing sensory data to cloud-based services
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将传感器数据发布到基于云的服务
- en: In this section, we will publish sensory data to an online dashboard using the
    MQTT protocol. This will involve setting up an account with the ThingsBoard website
    and making use of the `demo` environment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用MQTT协议将传感器数据发布到在线仪表板。这将涉及在ThingsBoard网站上设置一个账户，并使用`demo`环境。
- en: Install the MQTT library
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装MQTT库
- en: 'We will use the MQTT protocol in order to communicate with the dashboard in
    ThingsBoard. To set up the library on the Raspberry Pi, do the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用MQTT协议与ThingsBoard仪表板进行通信。要在树莓派上设置库，请执行以下操作：
- en: Open a Terminal appliance from the main tool bar
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主工具栏打开终端设备
- en: Type `**sudo pip3 install pho-mqtt**`
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`**sudo pip3 install pho-mqtt**`
- en: You should see the library install
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到库已安装
- en: Set up an account and create a device
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个账户并创建一个设备
- en: 'To start, navigate to the ThingsBoard website at [www.thingsboard.io](http://www.thingsboard.io):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，转到ThingsBoard网站[www.thingsboard.io](http://www.thingsboard.io)：
- en: 'Click on the TRY IT NOW button at the top of the screen. Scroll down and click
    on the LIVE DEMO button under the Thing Board Community Edition section:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕顶部的TRY IT NOW按钮。向下滚动并在Thing Board Community Edition部分下点击LIVE DEMO按钮：
- en: '![](assets/99834e79-3ac3-46de-89c3-3c7b4db4d192.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/99834e79-3ac3-46de-89c3-3c7b4db4d192.png)'
- en: 'You will be presented with a sign-up window. Enter the appropriate information
    to set up an account. Once your account has been successfully set up, you will
    see a dialog showing the following:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个注册窗口。输入适当的信息设置一个账户。一旦您的账户成功设置，您将看到一个对话框显示以下内容：
- en: '![](assets/59f38928-a10e-466c-a456-09d642cd38a3.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/59f38928-a10e-466c-a456-09d642cd38a3.png)'
- en: 'Click on LOGIN to get into the app. After this, you should see a menu at the
    left-hand side of the screen:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击登录进入应用程序。之后，您应该在屏幕左侧看到一个菜单：
- en: '![](assets/ec514cbb-75e8-431b-92fa-02591dd5704c.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec514cbb-75e8-431b-92fa-02591dd5704c.png)'
- en: 'Click on DEVICES. Look for a round orange graphic with a plus sign at the bottom
    right-hand side of the screen, as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击DEVICES。在屏幕右下角，找到一个带加号的圆形橙色图形，如下所示：
- en: '![](assets/9d87136a-700e-4000-b7d6-183d75e5d0cc.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9d87136a-700e-4000-b7d6-183d75e5d0cc.png)'
- en: 'Click on this orange circle to add a new device. Type `Room Conditions` for
    the Name* and select default for the Device type* in the Add Device dialog. Do
    not select Is gateway. Click on ADD:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击这个橙色圆圈添加一个新设备。在添加设备对话框中，输入`Room Conditions`作为名称*，并选择默认作为设备类型*。不要选择Is gateway。点击ADD：
- en: '![](assets/853a76a0-1f4c-456a-9f12-433668ea6a8f.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/853a76a0-1f4c-456a-9f12-433668ea6a8f.png)'
- en: 'You should see a new box under your Devices, named Room Conditions:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该在您的设备下看到一个新的框，名称为Room Conditions：
- en: '![](assets/18e9ccb0-00e3-4284-b5ce-fcadb263d16e.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/18e9ccb0-00e3-4284-b5ce-fcadb263d16e.png)'
- en: 'Click on this box and a menu should slide from the right. Click on the COPY
    ACCESS TOKEN button to copy this token to your clipboard:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此框，然后会从右侧滑出一个菜单。点击COPY ACCESS TOKEN按钮将此令牌复制到剪贴板上：
- en: '![](assets/115adb70-987e-4e89-9eb4-f79a2aadefb8.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/115adb70-987e-4e89-9eb4-f79a2aadefb8.png)'
- en: What we have done here is set up a ThingsBoard account and a new device inside
    ThingsBoard. We will use this device to retrieve sensory information from our
    Raspberry Pi and make a dashboard of these values.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是设置ThingsBoard账户和ThingsBoard内的新设备。我们将使用此设备从树莓派检索传感信息，并制作这些值的仪表板。
- en: Reading sensory data and publishing to ThingsBoard
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取传感器数据并发布到ThingsBoard
- en: 'It''s now time to create our circuit and code. Install the DHT-11 sensor using
    GPIO pin 19 (refer to [Chapter 9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml),
    *Building a Home Security Dashboard*, if you are unsure of how to connect the
    DHT-11 sensor to the Raspberry Pi):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建我们的电路和代码了。使用GPIO引脚19安装DHT-11传感器（如果不确定如何将DHT-11传感器连接到树莓派，请参考[第9章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)，*构建家庭安全仪表板*）：
- en: 'Open up Thonny and create a new file called `dht11-mqtt.py`. Type the following
    into the file and run it. Be sure to paste in the access token from your clipboard:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Thonny并创建一个名为`dht11-mqtt.py`的新文件。在文件中输入以下内容并运行。确保粘贴从剪贴板中复制的访问令牌：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see an output in the shell similar to the following screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该在shell中看到类似以下截图的输出：
- en: '![](assets/b8f64a58-60a6-4d41-967e-0e21c3778318.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b8f64a58-60a6-4d41-967e-0e21c3778318.png)'
- en: There should be a new line every 10 seconds. As you can see, it's pretty hot
    and humid in the room.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每10秒应该有一个新行。正如您所看到的，房间里又热又潮。
- en: 'Let''s take a closer look at the preceding code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下前面的代码：
- en: 'Our `import` statements give us access to the modules needed for our code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`import`语句让我们可以访问代码所需的模块：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are already familiar with `sleep`, `Adafruit_DHT`, and `json`. The `Paho
    MQTT` library gives us access to the `client` object, which we will use to publish
    our sensory data to the dashboard.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经熟悉了`sleep`，`Adafruit_DHT`和`json`。`Paho MQTT`库让我们可以访问`client`对象，我们将使用它来将我们的传感器数据发布到仪表板。
- en: 'The next two lines in the code are used to set variables for the URL of the
    `demo` server and the access token we retrieved from our device previously. We
    require both of these values in order to connect to the MQTT server and publish
    our sensory data:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码中的接下来两行用于设置`demo`服务器的URL和我们之前从设备检索到的访问令牌的变量。我们需要这两个值才能连接到MQTT服务器并发布我们的传感器数据：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We define the `dht_sensor` variable as a `DHT11` object from the `Adafruit`
    library. And we use pin `19` for the sensor:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将`dht_sensor`变量定义为`Adafruit`库中的`DHT11`对象。我们使用传感器的引脚`19`：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We then define a `dictionary` object to store the sensory data that will be
    published to the MQTT server:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们定义一个`dictionary`对象来存储将发布到MQTT服务器的传感器数据：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We then create a `client` object of the `mqtt Client` type. The username and
    password is set with the `access_token` defined previously in the code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们创建一个`mqtt Client`类型的`client`对象。用户名和密码使用代码中先前定义的`access_token`设置：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The continuous `while` loop contains the code that reads the sensory data,
    and then publishes it to the MQTT server. The humidity and temperature are set
    by reading from the `read_retry` method, and we set the corresponding `sensor_data`
    dictionary values as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连续的`while`循环包含读取传感器数据的代码，然后将其发布到MQTT服务器。通过从`read_retry`方法读取湿度和温度，并将相应的`sensor_data`字典值设置如下：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following `client` code is the code responsible for publishing our sensory
    data to the MQTT server. We connect using the `connect` method of the `client`
    object passing in the host value, the port (default port), and a keepalive time
    of `20` seconds. Unlike many MQTT examples, we do not create a loop and look for
    a callback, as we are only interested in publishing the sensory value, and not
    subscribing to the topic. In this case, the topic we are publishing to is `v1/devices/me/telemetry`,
    as per the ThingsBoard documentation example code. We then disconnect from `client`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下`client`代码是负责将我们的传感器数据发布到MQTT服务器的代码。我们使用`client`对象的`connect`方法连接，传入主机值、端口（默认端口）和`20`秒的保持活动时间。与许多MQTT示例不同，我们不创建循环并寻找回调，因为我们只对发布传感器值感兴趣，而不是订阅主题。在这种情况下，我们要发布的主题是`v1/devices/me/telemetry`，如ThingsBoard文档示例代码所示。然后我们断开与`client`的连接：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will now create a dashboard in ThingsBoard to display the sensory values
    sent from our code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在ThingsBoard中创建一个仪表板，以显示从我们的代码发送的传感器值。
- en: Creating a dashboard in ThingsBoard
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在ThingsBoard中创建仪表板
- en: 'The following are the steps to add the humidity value to a dashboard:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将湿度值添加到仪表板的步骤：
- en: 'Navigate back to ThingsBoard and click on Devices, and then ROOM CONDITIONS.
    The side menu should slide from the right:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回ThingsBoard，单击“设备”，然后单击“ROOM CONDITIONS”。侧边菜单应该从右侧滑出：
- en: '![](assets/e4a0f8a8-5fb8-457e-89a9-d6db6d79d54a.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e4a0f8a8-5fb8-457e-89a9-d6db6d79d54a.png)'
- en: Click on the LATEST TELEMETRY tab.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“最新遥测”选项卡。
- en: 'You should see values for humidity and temperature, and the time when these
    values were last updated. Select humidity by clicking on the check box to the
    left. Now, click on SHOW ON WIDGET:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到湿度和温度的值，以及上次更新这些值的时间。通过单击左侧的复选框选择湿度。现在，单击“在小部件上显示”：
- en: '![](assets/d9de168d-ad4f-4b08-b757-c5d7553a3fd2.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d9de168d-ad4f-4b08-b757-c5d7553a3fd2.png)'
- en: 'Select the Current bundle to Analogue gauges and cycle through the gauges until
    you get to the humidity dial widget. Click on the ADD TO DASHBOARD button:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择当前捆绑到模拟表盘，并循环浏览表盘，直到找到湿度表盘小部件。单击“添加到仪表板”按钮：
- en: '![](assets/3d991f91-b3c7-4a34-b75c-a5aebe6bd90e.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d991f91-b3c7-4a34-b75c-a5aebe6bd90e.png)'
- en: 'Select Create new dashboard and type in `Room Conditions` as the name:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建新仪表板，并输入`Room Conditions`作为名称：
- en: '![](assets/7f4d0b0c-8d41-4ba4-8d7e-eca154a676ba.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f4d0b0c-8d41-4ba4-8d7e-eca154a676ba.png)'
- en: Do not select the Open dashboard checkbox. Click on the ADD button.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要选择“打开仪表板”复选框。单击“添加”按钮。
- en: 'Repeat the previous steps for the temperature value. Select a temperature widget,
    and add your widget to the Room Conditions dashboard. This time, select Open dashboard
    before clicking on ADD:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上述步骤以添加温度值。选择温度小部件，并将小部件添加到“Room Conditions”仪表板。这次，在单击“添加”之前选择“打开仪表板”：
- en: '![](assets/fa7423ba-e6b0-4d5c-ac23-d2d2a348952b.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fa7423ba-e6b0-4d5c-ac23-d2d2a348952b.png)'
- en: You should now see a dashboard with the humidity and temperature values shown
    in analogue dials.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该看到一个仪表板，其中显示了湿度和温度值，显示在模拟表盘上。
- en: Sharing your dashboard with a friend
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与朋友分享您的仪表板
- en: 'If you would like to make this dashboard public, so that others may see it,
    you need to do the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要将此仪表板公开，以便其他人可以看到它，您需要执行以下操作：
- en: 'Navigate to the dashboards screen by clicking on DASHBOARDS:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“DASHBOARDS”导航到仪表板屏幕：
- en: '![](assets/5ea867db-fe5f-48e6-aacd-5f3633c598de.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ea867db-fe5f-48e6-aacd-5f3633c598de.png)'
- en: 'Click on the Make dashboard public option:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“使仪表板公开”选项：
- en: '![](assets/bd1baa9b-615e-4340-8ed7-212823a62971.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bd1baa9b-615e-4340-8ed7-212823a62971.png)'
- en: 'You will see the dialog reading Dashboard is now public, as shown in the following
    screenshot. You may copy and paste the URL, or share it via social media:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到对话框显示“仪表板现在是公开的”，如下截图所示。您可以复制并粘贴URL，或通过社交媒体分享：
- en: '![](assets/10b1a040-1240-4aee-8848-b2c98cb8eb13.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/10b1a040-1240-4aee-8848-b2c98cb8eb13.png)'
- en: Setting up an account for text message transmission
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置用于文本消息传输的账户
- en: In this section, we will connect to a text message transmission service and
    send a text message from our Raspberry Pi to our phone. We will use this information,
    and what we've learned so far about publishing sensory information, to create
    an enhancement to our security dashboard in [Chapter 9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml),
    *Building a Home Security Dashboard*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将连接到一个文本消息传输服务，并从树莓派向我们的手机发送一条短信。我们将利用这些信息以及我们迄今为止关于发布感知信息的所学知识，来创建一个增强版的安全仪表板，位于[第
    9 章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)，“构建家庭安全仪表板”中。
- en: Setting up a Twilio account
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Twilio 账户
- en: 'Twilio is a service that gives software developers the ability to create and
    receive text and phone calls programmatically through the use of its web service
    APIs. Let''s start by setting up a Twilio account:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio 是一个服务，它为软件开发人员提供通过其网络服务 API 来编程创建和接收文本和电话通话的能力。让我们从设置 Twilio 账户开始：
- en: In a web browser, navigate to [www.twilio.com](http://www.twilio.com)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页浏览器中，导航至 [www.twilio.com](http://www.twilio.com)
- en: Click on the red sign up at the top-right corner of the page
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面右上角的红色注册按钮
- en: 'Enter the appropriate personal information and a password, and then select SMS, Arrival
    Alerts, and Python for the fields below the password:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入适当的个人信息和密码，然后选择短信、到达提醒和 Python 作为密码下面的字段：
- en: '![](assets/4dda7c52-477c-4c6e-b693-bcd26b0f1239.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4dda7c52-477c-4c6e-b693-bcd26b0f1239.png)'
- en: 'Provide a phone number to receive an authorization code via SMS, as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个电话号码，以便通过短信接收授权码，如下所示：
- en: '![](assets/1ce5138e-b3f3-4c70-aaee-1e3368e4aa3d.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1ce5138e-b3f3-4c70-aaee-1e3368e4aa3d.png)'
- en: 'Enter the authorization code you receive, as shown here:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您收到的授权码，如下所示：
- en: '![](assets/b4d3f813-f5e9-4206-808e-2cd1f811890a.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b4d3f813-f5e9-4206-808e-2cd1f811890a.png)'
- en: 'The next step is to name the project that you will be working on. We will name
    it `Doorbell`. Enter the name and click Continue:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是为您将要使用的项目命名。我们将其命名为“Doorbell”。输入名称并点击“继续”：
- en: '![](assets/85292270-6310-40e4-ade5-646e203a0415.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/85292270-6310-40e4-ade5-646e203a0415.png)'
- en: 'We need a phone number for our account in order to be able to interact with
    it. Click on Get a Number:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个账户的电话号码才能与其进行交互。点击获取号码：
- en: '![](assets/b9cf840a-56b8-44a5-a41d-deb6258174a9.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b9cf840a-56b8-44a5-a41d-deb6258174a9.png)'
- en: 'A number will be presented to you. If this number works for you, click on Choose
    this number:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将向您呈现一个号码。如果这个号码适合您，请点击“选择此号码”：
- en: '![](assets/f0c888ec-7c2f-4a32-99a1-426eac78c2fb.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f0c888ec-7c2f-4a32-99a1-426eac78c2fb.png)'
- en: 'You are now set up and ready to use Twilio:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在已经设置好并准备使用 Twilio：
- en: '![](assets/f8fcd1de-66d3-455f-8b87-d1f37e36f7bb.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8fcd1de-66d3-455f-8b87-d1f37e36f7bb.png)'
- en: Twilio is a paid service. You will be given an initial amount to work with.
    Please check the costs of using this service before creating your apps.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio 是一个付费服务。您将获得一个初始金额来使用。请在创建应用程序之前检查使用此服务的成本。
- en: Installing Twilio on our Raspberry Pi
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的树莓派上安装 Twilio
- en: 'To access Twilio from Python, we need to install the `twilio` library. Open
    up a Terminal and type in the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Python 访问 Twilio，我们需要安装“twilio”库。打开终端并输入以下内容：
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should see the progress of Twilio being installed in the Terminal.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在终端中看到 Twilio 安装的进度。
- en: Sending a text through Twilio
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 Twilio 发送短信
- en: 'Before sending a text, we need to get credentials. In your Twilio account,
    click on Settings | General, and scroll down to API Credentials:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送短信之前，我们需要获取凭据。在您的 Twilio 账户中，点击“设置”|“常规”，然后滚动到“API 凭据”：
- en: '![](assets/287a1ff0-1d05-4954-a6ca-33d3d1cef52a.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/287a1ff0-1d05-4954-a6ca-33d3d1cef52a.png)'
- en: 'We will use both the LIVE Credentials and TEST Credentials values. Open up
    Thonny and create a new file called `twilio-test.py`. Type the following code
    into the file and run it. Be sure to paste in the LIVE Credentials (please note
    that your account will be charged for sending a text):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 LIVE 凭据和 TEST 凭据的值。打开 Thonny 并创建一个名为“twilio-test.py”的新文件。在文件中输入以下代码并运行。确保粘贴
    LIVE 凭据（请注意，发送短信将收取您的账户费用）：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You should get a text on your cell phone, with the message `Twilio says hello!`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会在您的手机上收到一条消息“Twilio 问候！”的短信。
- en: Creating a new home security dashboard
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的家庭安全仪表板
- en: 'In [Chapter 9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml), *Building a Home
    Security Dashboard*, we created a home security dashboard using CherryPy. The
    power behind the IoT is the ability to build an application with devices, located
    anywhere in the world, that are connected to each other. We will take this idea
    to our home security dashboard. If not already assembled, build the home security
    dashboard with the temperature sensor from [Chapter 9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml),
    *Building a Home Security Dashboard*:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 9 章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)，“构建家庭安全仪表板”中，我们使用 CherryPy
    创建了一个家庭安全仪表板。物联网的强大之处在于能够构建一个连接到世界各地设备的应用程序。我们将把这个想法应用到我们的家庭安全仪表板上。如果尚未组装，请使用[第
    9 章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)，“构建家庭安全仪表板”中的温度传感器来构建家庭安全仪表板：
- en: 'We will start our code by encapsulating our sensory data in a `class` container.
    Open up Thonny and create a new file called `SensoryData.py`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过将我们的感知数据封装在一个“类”容器中来开始我们的代码。打开 Thonny 并创建一个名为“SensoryData.py”的新文件：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the program to test our sensors. There isn't anything here we haven't covered
    already. We are basically just testing out our circuit and sensors. You should
    see the sensory data print out in the shell.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '运行程序来测试我们的传感器。这里没有我们尚未涵盖的内容。基本上我们只是在测试我们的电路和传感器。您应该在 shell 中看到感知数据的打印。 '
- en: 'Now, let''s create our sensory dashboard. Open up Thonny and create a new file
    called `SensoryDashboard.py`. The code is as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的感知仪表板。打开 Thonny 并创建一个名为“SensoryDashboard.py”的新文件。代码如下：
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What we've done here is encapsulate the `dht-mqtt.py` file, from the previous
    code, in a `class` container. We instantiate our object with a `SensoryData` object
    in order to obtain data from our sensors. The `publishSensoryData()` method sends
    the sensory data to our MQTT dashboard. Notice how it returns the state of the
    motion sensor? We use this return value in our main loop to print out the value
    of the motion sensor. However, this return value will be more useful in our future
    code.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是将以前的代码中的`dht-mqtt.py`文件封装在一个`class`容器中。我们用一个`SensoryData`对象来实例化我们的对象，以便从传感器获取数据。`publishSensoryData()`方法将感官数据发送到我们的MQTT仪表板。注意它如何返回运动传感器的状态？我们在主循环中使用这个返回值来打印出运动传感器的值。然而，这个返回值在我们未来的代码中会更有用。
- en: 'Let''s add the motion sensor to our ThingsBoard dashboard:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将运动传感器添加到我们的ThingsBoard仪表板中：
- en: Open up ThingsBoard in a browser
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开ThingsBoard
- en: Click on the Devices menu
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击设备菜单
- en: Click on the Room Conditions device
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击房间条件设备
- en: Select LATEST TELEMETRY
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最新的遥测
- en: Select the Motion Detected value
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择检测到的运动值
- en: Click on SHOW ON WIDGET
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击小部件上的显示
- en: 'Under Cards, find the widget made up of a big orange square, as shown here:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在卡片下面，找到由一个大橙色方块组成的小部件，如下所示：
- en: '![](assets/6cfc62b4-a7ca-4364-8662-c59f77450cb0.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6cfc62b4-a7ca-4364-8662-c59f77450cb0.png)'
- en: Click on ADD TO DASHBOARD
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加到仪表板
- en: Select the existing Room Conditions dashboard
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择现有的房间条件仪表板
- en: Check off Open Dashboard
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中打开仪表板
- en: Click Add
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加
- en: 'You should see the new widget added to the Room Conditions dashboard. By clicking
    on the orange pencil icon at the bottom-right of the page, you are able to move
    and resize the widgets. Edit the widgets so they look like the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到新的小部件已添加到房间条件仪表板。通过点击页面右下角的橙色铅笔图标，您可以移动和调整小部件的大小。编辑小部件，使其看起来像以下的屏幕截图：
- en: '![](assets/f83cee48-8874-4e06-92e9-86ec54584e03.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f83cee48-8874-4e06-92e9-86ec54584e03.png)'
- en: What we have done here is recreate the first version of the home security dashboard
    from [Chapter 9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml), *Building a Home
    Security Dashboard*, with a more distributed architecture. No longer are we relying
    on our Raspberry Pi to serve up the sensory information via a CherryPy web page.
    We are able to reduce the role of our Raspberry Pi to a source of sensory information.
    As you can imagine, it is quite easy to use multiple Raspberry Pis with the same
    dashboard.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是重新创建[第9章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)中的家庭安全仪表板的第一个版本，*构建家庭安全仪表板*，并采用了更加分布式的架构。我们不再依赖于我们的树莓派通过CherryPy网页提供感官信息。我们能够将我们的树莓派的角色减少到感官信息的来源。正如您所能想象的，使用多个树莓派来使用相同的仪表板非常容易。
- en: Test out this new dashboard by moving near the PIR sensor. See if you can get
    the Motion Detected widget to change to `true`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过靠近PIR传感器来测试这个新的仪表板。看看能否使检测到运动的小部件变为`true`。
- en: 'To make our new home security dashboard even more distributed, let''s add the
    ability to send a text message whenever the PIR motion sensor is activated. Open
    up Thonny and create a new file called `SecurityDashboardDist.py`. The following
    is the code to insert into the file:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的新家庭安全仪表板更加分布式，让我们添加在PIR运动传感器激活时发送文本消息的功能。打开Thonny并创建一个名为`SecurityDashboardDist.py`的新文件。以下是要插入文件的代码：
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Utilizing the first version of the home security dashboard circuit from [Chapter
    9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml), *Building a Home Security Dashboard*,
    this code uses the key switch in order to arm the call to send out a text message
    if the motion sensor detects motion. With the key switch in the off position,
    you will get a message, reading `Alarm triggered but Not Armed`, whenever the
    motion sensor detects motion.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 利用[第9章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)中的家庭安全仪表板电路的第一个版本，*构建家庭安全仪表板*，这段代码使用钥匙开关来激活发送文本消息的呼叫，如果运动传感器检测到运动。当钥匙开关处于关闭位置时，每当运动传感器检测到运动时，您将收到一条消息，内容为`警报触发但未激活`。
- en: If not already turned on, turn on the key switch to arm the circuit. Activate
    the motion sensor by moving around. You should get a notification that a text
    message was sent. The SID of the message should show as well. You may have noticed
    that you didn't actually get a text message. This is due to the fact that the
    code defaults to the Twilio test environment. Before we turn on the live environment,
    let's go over the code.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果还没有打开，请打开钥匙开关以激活电路。通过四处移动来激活运动传感器。您应该会收到一条通知，说明已发送了一条文本消息。消息的SID也应该显示出来。您可能已经注意到，您实际上并没有收到一条文本消息。这是因为代码默认为Twilio测试环境。在我们打开实时环境之前，让我们先看一下代码。
- en: 'We start out by importing the libraries we need for our code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入我们代码所需的库：
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's not too much here that we haven't seen before; however, take note of
    the `SensoryData` and `SensoryDashboard` imports. As we have encapsulated the
    code to read sensory data, we can now just look at it as a black box. We know
    we need sensory data for our security dashboard, but we don't care how we get
    this data and where it will be displayed. `SensoryData` gives us access to the
    sensory data we need, and `SensoryDashboard` sends it off to a dashboard somewhere.
    We don't have to concern ourselves with these details in our `SecurityDashboardDist.py`
    code.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有太多我们以前没有见过的东西；然而，请注意`SensoryData`和`SensoryDashboard`的导入。由于我们已经封装了读取感官数据的代码，现在我们可以把它看作一个黑匣子。我们知道我们需要安全仪表板的感官数据，但我们不关心如何获取这些数据以及它将在哪里显示。`SensoryData`为我们提供了我们需要的感官数据，`SensoryDashboard`将其发送到某个仪表板。在我们的`SecurityDashboardDist.py`代码中，我们不必关心这些细节。
- en: 'We create a class called `SecurityDashboardDist` for our distributed security
    dashboard. It is important to distinguish our classes by their names, and to pick
    names that describe what the `class` is:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的分布式安全仪表板创建了一个名为`SecurityDashboardDist`的类。重要的是要通过它们的名称来区分我们的类，并选择描述`class`是什么的名称。
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After declaring some class variables that are accessible throughout the class,
    we then come to our class initialization method:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明了一些整个类都可以访问的类变量之后，我们来到了我们的类初始化方法：
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `initialization` method, we set our class scoped `test_env` variable
    (for the `test` environment). The default is `True`, meaning we have to conscientiously
    override the default in order to run the dashboard live. We use the `setEnvironment()`
    method to set `test_env`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在`initialization`方法中，我们设置了类范围的`test_env`变量（用于`test`环境）。默认值为`True`，这意味着我们必须有意地覆盖默认值才能运行实时仪表板。我们使用`setEnvironment()`方法来设置`test_env`：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `setEnvironment()` method sets up the class scoped `account_id` and `auth_token`
    values to either the test environment, or the live environment, depending on the
    value of `test_env`. We are basically just passing back the state of `test_env`
    with the `setEnvironment()` method, while setting up the variables we need to
    enable a test or live text message environment.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`setEnvironment()`方法根据`test_env`的值设置类范围的`account_id`和`auth_token`值，以便设置测试环境或实际环境。基本上，我们只是通过`setEnvironment()`方法传回`test_env`的状态，同时设置我们需要启用测试或实际短信环境的变量。'
- en: 'The `update_dashboard()` method makes the call to the sensors and sensory dashboard
    through the use of the `SensoryDashboard` object that we pass into the method.
    This here is the beauty of the object-oriented approach we have taken, as we do
    not need to concern ourselves with how the sensors are read or how the dashboard
    is updated. We only need to pass in a `SensoryDashboard` object to get this done:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`update_dashboard()`方法通过传入的`SensoryDashboard`对象调用传感器和感官仪表板。这里是我们采取的面向对象方法的美妙之处，因为我们不需要关心传感器是如何读取的或仪表板是如何更新的。我们只需要传入一个`SensoryDashboard`对象就可以完成这个任务。'
- en: '[PRE18]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `update_dashboard` method is also responsible for determining whether or
    not a text message will be sent, by checking on the status of the motion sensor.
    Do you remember how we returned the state of the motion sensor when we called
    the `publishSensoryData()` method on our `SensoryDashboard` class? This is where
    it comes in really handy. We can use this return value to determine whether or
    not we should send an alert. We don't have to check on the state of the motion
    sensor in our class at all, as it is easily available from the `SensoryDashboard`
    class.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`update_dashboard`方法还负责确定是否发送短信，通过检查运动传感器的状态。您还记得我们在调用`SensoryDashboard`类的`publishSensoryData()`方法时返回了运动传感器的状态吗？这就是它真正方便的地方。我们可以使用这个返回值来确定是否应该发送警报。我们根本不需要在我们的类中检查运动传感器的状态，因为它可以很容易地从`SensoryDashboard`类中获得。'
- en: 'The `send_alert()` method checks on the state of the switch in order to determine
    whether a text message should be sent:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`send_alert()`方法检查开关的状态，以确定是否发送短信：'
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You may be wondering why we are checking on the state of a sensor (a switch,
    in this case) here, as opposed to checking it from the `SensoryDashboard` class.
    The answer? We are building a home security dashboard by encapsulating a sensory
    data dashboard. There is no need for a switch in the `SensorDashboard` class,
    as it is not concerned with turning on and off the reading and transmitting of
    sensory data from the GPIO to the MQTT dashboard. The switch is the domain of
    a security system; in this case, the `SecurityDashboardDist` class.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你会想知道为什么我们在这里检查传感器（在这种情况下是开关）的状态，而不是从`SensoryDashboard`类中检查。答案是？我们正在通过封装传感数据仪表板来构建家庭安全仪表板。`SensorDashboard`类中不需要开关，因为它不涉及从GPIO到MQTT仪表板的传感数据的读取和传输。开关是安全系统的领域；在这种情况下是`SecurityDashboardDist`类。
- en: 'The heart of the `SecurityDasboardDist` class is the `sendTextMessage()` method,
    outlined here:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecurityDasboardDist`类的核心是`sendTextMessage()`方法，如下所述：'
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We use the `message_interval` method variable to set the duration of time between
    texts. We do not want to send a text message every time the motion sensor has
    detected motion. In our case, the minimum time left between texts is `600` seconds,
    or `10` minutes.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`message_interval`方法变量来设置短信之间的时间间隔。我们不希望每次运动传感器检测到运动时都发送短信。在我们的情况下，短信之间的最短时间为`600`秒，或`10`分钟。
- en: If this is the first time, or if it has been more than 10 minutes since the
    time that a text message was last sent, then the code sends the text message in
    either the test environment, or simply live. Take note of how the `15005550006`
    phone number is used for the test environment. Your Twilio number is required
    for the live environment, and your own phone number for the `to` field. For both
    the test and live environments, the `Alarm triggered and text message sent` message
    is returned, followed by the SID of the message. The difference is that you will
    not actually receive a text message (although there is a call to Twilio from the
    code).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是第一次，或者距离上次发送短信已经超过10分钟，那么代码将在测试环境或实际环境中发送短信。请注意`15005550006`电话号码在测试环境中的使用。实际环境需要您的Twilio号码，并且您自己的电话号码用于`to`字段。对于测试和实际环境，都会返回`触发警报并发送短信`的消息，然后是消息的SID。不同之处在于您实际上不会收到短信（尽管代码中有调用Twilio）。
- en: If it has been less than 10 minutes since the last time a text message was sent,
    then the message will read `Alarm triggered and text message sent less than 10
    minutes ago`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果距上次发送短信不到10分钟，则消息将显示`触发警报并发送短信不到10分钟`。
- en: 'In our main function, we create a `SecurityDashboardDist` object and call it
    `security_dashboard`. By not passing in anything, we allow the dashboard to be
    set up for the test environment by default:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主函数中，我们创建了一个`SecurityDashboardDist`对象，并将其命名为`security_dashboard`。通过不传入任何内容，我们允许默认情况下设置测试环境的仪表板：
- en: '[PRE21]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The continuous loop that follows creates a `SensoryData` and `SensoryDashboard`
    object every 5 seconds. The `SensoryData` object (`sensory_data`) is used to instantiate
    a `SensoryDashboard` object (`sensory_dashboard`), as it is the former that gives
    us the current sensory data, and the latter that creates the sensory dashboard.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 随后的连续循环每5秒创建一个`SensoryData`和`SensoryDashboard`对象。`SensoryData`对象（`sensory_data`）用于实例化`SensoryDashboard`对象（`sensory_dashboard`），因为前者提供当前的感官数据，后者创建感官仪表板。
- en: By naming our classes according to what they are, and our methods by what they
    do, the code becomes pretty self-explanatory.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过根据它们的名称命名我们的类，以及根据它们的功能命名我们的方法，代码变得相当自解释。
- en: We then pass this `SensoryDashboard` object (`sensory_dashboard`) to the `update_dashboard`
    method of the `SecurityDashboard` (`security_dashboard`). As the `update_dashboard`
    method returns a string, we are able to use it to print to our shell, and thus,
    see the status of our dashboard printed every 5 seconds. We keep the instantiation
    of the `SecurityDashboardDist` object out of the loop, as we only need to set
    the environment once.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将这个`SensoryDashboard`对象(`sensory_dashboard`)传递给`SecurityDashboard`(`security_dashboard`)的`update_dashboard`方法。由于`update_dashboard`方法返回一个字符串，我们可以用它来打印到我们的shell，从而看到我们的仪表板每5秒打印一次状态。我们将`SecurityDashboardDist`对象的实例化放在循环之外，因为我们只需要设置环境一次。
- en: 'Now that we understand the code, it''s time to run it in the live Twilio environment.
    Please note that the only part of the code that changes when we switch to live
    is the actual sending of text messages. To turn our dashboard into a live text-sending
    machine, simply change the first line of the main method to the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了代码，是时候在实际的Twilio环境中运行它了。请注意，当我们切换到实际环境时，代码中唯一改变的部分是实际发送短信。要将我们的仪表板变成一个实时发送短信的机器，只需将主方法的第一行更改为以下内容：
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: After completing this chapter, we should be very familiar with publishing sensory
    data to an IoT dashboard. We should also be familiar with sending text messages
    from our Raspberry Pi using the Twilio web service.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，我们应该非常熟悉将感应数据发布到物联网仪表板。我们还应该熟悉使用Twilio网络服务从树莓派发送短信。
- en: We will take a look at Bluetooth libraries in [Chapter 11](1668a45a-408f-4732-8643-623297983690.xhtml),
    *Creating a Doorbell Button Using Bluetooth*, before putting that information
    and the information we acquired in this chapter together to make an IoT doorbell.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第11章](1668a45a-408f-4732-8643-623297983690.xhtml)中查看蓝牙库，*使用蓝牙创建门铃按钮*，然后将这些信息和我们在本章中获得的信息结合起来，制作一个物联网门铃。
- en: Questions
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the name of the service we used to send text messages from our Raspberry
    Pi?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用来从树莓派发送短信的服务的名称是什么？
- en: True or false? We use a PIR sensor to read temperature and humidity values.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们使用PIR传感器来读取温度和湿度值。
- en: How do you create a dashboard in ThingsBoard?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在ThingsBoard中创建仪表板？
- en: True or false? We built our enhanced security dashboard by using a sensory dashboard.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们通过使用感应仪表板来构建我们的增强安全仪表板。
- en: What is the name of the library we use to read temperature and humidity sensory
    data?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用来读取温度和湿度感应数据的库的名称是什么？
- en: True or false? The library that we require to send text messages comes pre-installed
    with Raspbian.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们需要预先安装用于发送短信的库与Raspbian一起。
- en: When naming classes in our code, what do we try to do?
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码中命名类时，我们试图做什么？
- en: True or false? In order to change our environment from test to live, do we have
    to rewrite the entire code in our enhanced home security dashboard.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？为了将我们的环境从测试切换到实际，我们是否需要重写增强家庭安全仪表板中的整个代码。
- en: True or false? The `account_sid` number for our Twilio account is the same for
    the live environment as it is for the test environment.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们Twilio账户的`account_sid`号码在实际环境和测试环境中是相同的。
- en: Where do we create a `SecurityDashboardDist` object in our `SecurityDashboardDist.py`
    code?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`SecurityDashboardDist.py`代码中，我们在哪里创建了`SecurityDashboardDist`对象？
- en: Further reading
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To further your understanding of the technologies behind Twilio and ThingsBoard,
    please refer to the following links:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步了解Twilio和ThingsBoard背后的技术，请参考以下链接：
- en: The Twilio documentation:  [https://www.twilio.com/docs/quickstart](https://www.twilio.com/docs/quickstart)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twilio文档：[https://www.twilio.com/docs/quickstart](https://www.twilio.com/docs/quickstart)
- en: 'The documentation for ThingsBoard:'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ThingsBoard的文档：
- en: '[https://thingsboard.io/docs/](https://thingsboard.io/docs/)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://thingsboard.io/docs/](https://thingsboard.io/docs/)'
