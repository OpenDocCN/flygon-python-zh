- en: Putting It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容放在一起
- en: For our final act, we will get T.A.R.A.S to respond to control signals sent
    using MQTT from a JavaScript client. We will do this by modifying the code we
    have wrote up to this point. If you have been reading this book from the start,
    thank you for your perseverance. It has been a long journey to get here. We have
    finally made it. By the end of this chapter, we will have finished building the
    ultimate in IoT devices, an internet-controlled robot car.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最后一步，我们将让T.A.R.A.S响应使用JavaScript客户端发送的MQTT控制信号。我们将通过修改到目前为止编写的代码来实现这一点。如果您从头开始阅读本书，感谢您的毅力。这是一个漫长的旅程。我们终于做到了。在本章结束时，我们将完成构建物联网设备的终极目标，即一个可以通过互联网控制的机器人车。
- en: Buckle up (pun intended)—it's time to take T.A.R.A.S to the next level.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 系好安全带（双关语）-是时候将T.A.R.A.S提升到下一个级别了。
- en: 'In this chapter we will cover following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Build a JavaScript client to connect to our Raspberry Pi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个JavaScript客户端以连接到我们的树莓派
- en: JavaScript client to access our Robot Carʼs sensory data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript客户端以访问我们的机器人车的感知数据
- en: Enhance our JavaScript client to control our Robot Car
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强我们的JavaScript客户端以控制我们的机器人车
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: 'In this chapter, we will connect T.A.R.A.S to an MQTT Broker. Through the MQTT
    messages, we will control the movement of T.A.R.A.S as well as read from the distance
    sensor on T.A.R.A.S. The following is a diagram of what we are going to build:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将T.A.R.A.S连接到MQTT代理。通过MQTT消息，我们将控制T.A.R.A.S的移动，并从T.A.R.A.S的距离传感器中读取信息。以下是我们将要构建的图表：
- en: '![](assets/81f1811c-9a9e-42f9-b355-e13691cbb16d.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/81f1811c-9a9e-42f9-b355-e13691cbb16d.png)'
- en: We will start off by writing the HTML JavaScript Client (shown as **HTML Client**
    in the diagram) and use it to send and receive MQTT messages. We will then turn
    our attention to writing code on T.A.R.A.S to send and receive messages from the
    same MQTT Broker. We will use these messages to control T.A.R.A.S using a browser.
    Finally, we will livestream video from T.A.R.A.S using a browser as well.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编写HTML JavaScript客户端（在图表中显示为**HTML客户端**），并使用它发送和接收MQTT消息。然后，我们将把注意力转向编写T.A.R.A.S上的代码，以从相同的MQTT代理接收和发送消息。我们将使用这些消息来使用浏览器控制T.A.R.A.S。最后，我们还将使用浏览器从T.A.R.A.S实时传输视频。
- en: This project should take half a day to complete.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目应该需要半天的时间。
- en: Getting started
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，需要以下内容：
- en: A Raspberry Pi model 3 (2015 model or newer)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个树莓派3型（2015年或更新型号）
- en: A USB power supply
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB电源适配器
- en: A computer monitor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个计算机显示器
- en: A USB keyboard
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB键盘
- en: A USB mouse
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB鼠标
- en: A T.A.R.A.S robot car
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个T.A.R.A.S机器人车
- en: Building a JavaScript client to connect to our Raspberry Pi
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个JavaScript客户端以连接到我们的树莓派
- en: 'The following is a screenshot of the HTML JavaScript client we will build to
    control T.A.R.A.S over the network. The HTML JavaScript client won''t win any
    design awards, but it will serve as an excellent learning platform for sending
    robot control information over the internet:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将构建的HTML JavaScript客户端的屏幕截图，用于通过网络控制T.A.R.A.S。HTML JavaScript客户端可能不会赢得任何设计奖，但它将作为一个优秀的学习平台，用于通过互联网发送机器人控制信息。
- en: '![](assets/03b0f1b6-f68b-4d53-9ada-0d5ad736a6c1.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03b0f1b6-f68b-4d53-9ada-0d5ad736a6c1.png)'
- en: The big purple buttons are used to send `Forward` and `Backwards` commands to
    T.A.R.A.S. The smaller green buttons send `Turn Left` and `Turn Right` control
    information to T.A.R.A.S. The small silver buttons at the bottom allow us to take
    a picture using the camera from T.A.R.A.S, set off an alarm on T.A.R.A.S, and
    make T.A.R.A.S dance. The `Track Distance` button connects the HTML JavaScript
    client to distance information coming from T.A.R.A.S.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大紫色按钮用于向T.A.R.A.S发送“前进”和“后退”命令。较小的绿色按钮向T.A.R.A.S发送“左转”和“右转”控制信息。底部的小银色按钮允许我们使用T.A.R.A.S的摄像头拍照，触发T.A.R.A.S的警报，并让T.A.R.A.S跳舞。`跟踪距离`按钮将HTML
    JavaScript客户端连接到T.A.R.A.S传来的距离信息。
- en: We will track control information using the dashboard in CloudMQTT before we
    build a Python MQTT client for our Raspberry Pi.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为树莓派构建Python MQTT客户端之前，我们将使用CloudMQTT仪表板跟踪控制信息。
- en: Writing the HTML code
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写HTML代码
- en: 'We will start by writing the HTML code for our HTML JavaScript client. You
    may use a computer other than the Raspberry Pi:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先为我们的HTML JavaScript客户端编写HTML代码。您可以使用树莓派以外的计算机：
- en: Create a `project` folder on your computer and call it `HTML JavaScript Client`
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的计算机上创建一个名为`HTML JavaScript Client`的`project`文件夹
- en: Copy the Paho JavaScript library from [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building
    the JavaScript Client*, into the `project` folder
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[第17章](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml)中复制Paho JavaScript库，*构建JavaScript客户端*，到`project`文件夹中
- en: Using your favorite HTML editor, create a file called `index.html` and save
    it inside the folder you created in *step 1*
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的HTML编辑器，创建一个名为`index.html`的文件，并将其保存在*步骤1*中创建的文件夹中
- en: 'Type the following into `index.html` and save it again:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容输入到`index.html`中，然后再次保存：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before we can view `index.html` in a browser, we must create a `.css` file
    for the styles. We will also create a folder for our JavaScript file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以在浏览器中查看`index.html`之前，我们必须为样式创建一个`.css`文件。我们还将为我们的JavaScript文件创建一个文件夹：
- en: In your `project` folder, create a new folder and call it `styles`
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`project`文件夹中，创建一个新文件夹，并将其命名为`styles`
- en: Create another folder in the `project` folder and call it `scripts`
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`project`文件夹中创建另一个文件夹，并将其命名为`scripts`
- en: 'Your `project` directory should look the same as the following:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的`project`目录应该与以下内容相同：
- en: '![](assets/285b49bd-af91-4b65-a64a-2e12ece753d9.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/285b49bd-af91-4b65-a64a-2e12ece753d9.png)'
- en: Inside the `styles` folder, create a file called `styles.css` using an HTML
    editor
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`styles`文件夹中，使用HTML编辑器创建一个名为`styles.css`的文件
- en: 'Type the following into the `styles.css` file and save it:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容输入到`styles.css`文件中，然后保存：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Open up a browser and navigate to the `index.html` file in the `project` folder
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，导航到`project`文件夹中的`index.html`文件
- en: You should see the T.A.R.A.S robot car control dashboard
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到T.A.R.A.S机器人车控制仪表板
- en: 'Before we add the JavaScript code, let''s take a look at what we just wrote.
    We will start off by importing the resources we need. We will need the Paho MQTT
    library, an `index.js` file (which we haven''t wrote yet), and our `styles.css`
    file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加JavaScript代码之前，让我们看一下我们刚刚写的内容。我们将从导入我们需要的资源开始。我们需要Paho MQTT库、一个`index.js`文件（我们还没有写），以及我们的`styles.css`文件。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will then create a series of buttons which we will tie to functions in our
    soon-to-be-written `index.js` JavaScript file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一系列按钮，将这些按钮与我们即将编写的`index.js` JavaScript文件中的函数绑定：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since our buttons are pretty much similar, we will only discuss the first one.
    The first button is tied to the `moveForward` function in our JavaScript file
    through the `onclick` property. The style of the button is set by assigning `class`
    to `big_button`. We use the first button to move T.A.R.A.S forward.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的按钮几乎相似，我们只讨论第一个按钮。第一个按钮通过`onclick`属性绑定到我们JavaScript文件中的`moveForward`函数。按钮的样式通过将`class`分配给`big_button`来设置。我们使用第一个按钮来向前移动T.A.R.A.S。
- en: Writing the JavaScript code to communicate with our MQTT Broker
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写与我们的MQTT代理通信的JavaScript代码
- en: 'Now that we have our HTML and CSS files, let''s create the JavaScript file
    that will make the magic of MQTT happen:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了HTML和CSS文件，让我们创建一个JavaScript文件，让MQTT的魔力发生：
- en: Inside the `scripts` folder, create a file called `index.js` using an HTML editor.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scripts`文件夹中，使用HTML编辑器创建一个名为`index.js`的文件。
- en: 'Type the following into the `index.js` file and save it:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.js`文件中输入以下内容并保存：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I have left the values of my CloudMQTT instance in the code. Just as we did
    in [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building the JavaScript
    Client*, replace those values with the ones from your instance (`Server`, `Websockets
    Port`, `userName`, `password`).
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我已经在代码中留下了我的CloudMQTT实例的值。就像我们在[第17章](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml)中所做的那样，*构建JavaScript客户端*，用您实例的值（`服务器`、`Websockets端口`、`用户名`、`密码`）替换这些值。
- en: Navigate back to `index.html` in your browser and refresh the page.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中导航回到`index.html`并刷新页面。
- en: 'We now have our HTML JavaScript client in place. What we have essentially done
    is modify the `index.js` code from [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml), *Building
    the JavaScript Client*, so that we may send control messages to our MQTT Broker
    and ultimately our robot car:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了我们的HTML JavaScript客户端。我们所做的实质上是修改了[第17章](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml)中的`index.js`代码，*构建JavaScript客户端*，以便我们可以向我们的MQTT代理发送控制消息，最终控制我们的机器人车：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have changed the code in the previous example. The `moveForward` function
    creates a Paho MQTT Client named `client` with `Server` and `Websockets Port`
    connection information taken from our CloudMQTT instance. A callback handler to
    handle when the connection is lost is set to the `onConnectionLost` function.
    The `options` variable is created using our `userName` and `password` information,
    which was taken from our CloudMQTT instance. We set a successful connection to
    the MQTT Broker to the `sendMoveForwardMessage` function. We then connect to our
    client by passing in the `options` variable.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更改了上一个示例中的代码。`moveForward`函数创建了一个名为`client`的Paho MQTT客户端，其中包含从我们的CloudMQTT实例获取的`服务器`和`Websockets端口`连接信息。设置了一个回调处理程序来处理连接丢失时的情况，该处理程序设置为`onConnectionLost`函数。使用从我们的CloudMQTT实例获取的`userName`和`password`信息创建了`options`变量。我们将成功连接到MQTT代理设置为`sendMoveForwardMessage`函数。然后通过传入`options`变量连接到我们的客户端。
- en: The `sendMoveForwardMessage` function creates a new Paho MQTT message called
    `Forward`. This message is then assigned to the `RobotControl` topic and sent
    using our Paho MQTT Client object, `client`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`sendMoveForwardMessage`函数创建了一个名为`Forward`的新Paho MQTT消息。然后将此消息分配给`RobotControl`主题，并使用我们的Paho
    MQTT客户端对象`client`发送。'
- en: Functions to send messages to move backwards, turn right, turn left, take a
    picture, set off an alarm, and dance are written in a similar way to the `moveForward`
    function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 发送后退、右转、左转、拍照、触发警报和跳舞的消息的函数以类似的方式编写为`moveForward`函数。
- en: 'Now that we have the HTML JavaScript client for controlling T.A.R.A.S over
    the web built, let''s test it out using the `WEBSOCKETS UI` page on our CloudMQTT
    instance:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为控制T.A.R.A.S在网络上构建了HTML JavaScript客户端，让我们使用CloudMQTT实例上的`WEBSOCKETS UI`页面进行测试：
- en: Navigate back to your CloudMQTT account.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航回到您的CloudMQTT帐户。
- en: Select the instance where you obtained the server, user, password, and web sockets
    port connection information (in [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml),
    *Building the JavaScript Client*, we created the instance called `T.A.R.A.S`).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您获取服务器、用户、密码和Web套接字端口连接信息的实例（在[第17章](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml)中，*构建JavaScript客户端*，我们创建了名为`T.A.R.A.S`的实例）。
- en: Click on the WEBSOCKETS UI menu option on the left-hand side. You should get
    a notice on the right-hand side indicating a successful connection.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧的WEBSOCKETS UI菜单选项。您应该在右侧收到一个成功连接的通知。
- en: Navigate back to `index.html` and click on the Forward button.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航回到`index.html`并点击“前进”按钮。
- en: 'Now, navigate back to your CloudMQTT instance. You should see a new message
    in the `Received messages` list:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航回到您的CloudMQTT实例。您应该在“接收到的消息”列表中看到一条新消息：
- en: '![](assets/d27aef97-918d-4ec1-b8fa-ed685f711ea6.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d27aef97-918d-4ec1-b8fa-ed685f711ea6.png)'
- en: Congratulations! You have just connected a HTML JavaScript client to an MQTT
    Broker and sent a message. We will now develop another client on another device
    using a completely different programming language and then use that client to
    subscribe to the messages coming from our HTML JavaScript client.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚连接了一个HTML JavaScript客户端到一个MQTT代理并发送了一条消息。现在我们将在另一台设备上使用完全不同的编程语言开发另一个客户端，然后使用该客户端订阅来自我们的HTML
    JavaScript客户端的消息。
- en: Creating a JavaScript client to access our robot car's sensory data
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个JavaScript客户端来访问我们机器人车的感知数据
- en: 'The `index.js` file we created contains functions that subscribe our HTML JavaScript
    client to the `distance` topic:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的`index.js`文件包含订阅我们的HTML JavaScript客户端到`distance`主题的函数：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Similar to the code we wrote in [Chapter 17](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml),
    *Building the JavaScript Client*, the `subscribeDistanceData` function creates
    a Paho MQTT Client with the connection information from our CloudMQTT instance.
    Upon successful connection, the `onsubscribeDistanceDataSuccess` function is called,
    which subscribes `client` to the `distance` topic.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们在[第17章](b44cb570-263b-4f0b-9c3f-8efd9ace1e8a.xhtml)中编写的代码，*构建JavaScript客户端*，`subscribeDistanceData`函数创建了一个Paho
    MQTT客户端，其中包含来自CloudMQTT实例的连接信息。成功连接后，将调用`onsubscribeDistanceDataSuccess`函数，该函数将`client`订阅到`distance`主题。
- en: An alert is also created, telling us that the HTML JavaScript client is now
    subscribed to the `distance` topic.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 还创建了一个警报，告诉我们HTML JavaScript客户端现在已订阅了`distance`主题。
- en: Writing the code for T.A.R.A.S
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写T.A.R.A.S的代码
- en: 'We will now turn our attention back to our Raspberry Pi robot car and write
    Python code to communicate with our MQTT Broker and ultimately our HTML JavaScript
    client. The following code should be run directly from T.A.R.A.S. If you''d like
    to run T.A.R.A.S without tethers, use the USB power supply to power the Raspberry
    Pi and disconnect the HDMI cable once the following program is run:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把注意力转回到我们的树莓派机器人车上，并编写Python代码来与我们的MQTT代理通信，最终与我们的HTML JavaScript客户端通信。以下代码应直接从T.A.R.A.S运行。如果您想要无线运行T.A.R.A.S，请使用USB电源适配器为树莓派供电，并在运行以下程序后断开HDMI电缆：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny。
- en: Click on the New icon to create a new file.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件。
- en: 'Type the following code into the file:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入文件中：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the file as `MQTT-RobotControl.py`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`MQTT-RobotControl.py`。
- en: Run the code from Thonny.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Thonny运行代码。
- en: 'Navigate to the HTML JavaScript client and click on the Forward button:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到HTML JavaScript客户端，然后单击前进按钮：
- en: '![](assets/a3a9aa2f-9422-4ebf-9872-52f768cdc3d3.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3a9aa2f-9422-4ebf-9872-52f768cdc3d3.png)'
- en: T.A.R.A.S should move forward for one second and then stop.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: T.A.R.A.S应该向前移动一秒，然后停止。
- en: 'The small grey buttons at the bottom allow you to perform various tasks with
    T.A.R.A.S:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 底部的小灰色按钮允许您执行与T.A.R.A.S的各种任务：
- en: '![](assets/4c7e63b9-3ddf-430a-80ea-19c0822004f3.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4c7e63b9-3ddf-430a-80ea-19c0822004f3.png)'
- en: Explore the functionality of each of these buttons by clicking on them. The
    `Take Picture` button will take a picture and store it in the filesystem, `T.A.R.A.S
    Alarm` will sound the alarm on T.A.R.A.S, and `T.A.R.A.S Dance` will make T.A.R.A.S
    dance.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击这些按钮来探索每个按钮的功能。`Take Picture`按钮将拍照并将其存储在文件系统中，`T.A.R.A.S Alarm`将在T.A.R.A.S上触发警报，`T.A.R.A.S
    Dance`将使T.A.R.A.S跳舞。
- en: 'To subscribe to the `distance` data coming from the distance sensor on T.A.R.A.S,
    click on the Track Distance button:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要订阅来自T.A.R.A.S距离传感器的`distance`数据，请单击Track Distance按钮：
- en: '![](assets/2cc958d7-a0e0-4e21-bd37-36ea31d9c59e.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2cc958d7-a0e0-4e21-bd37-36ea31d9c59e.png)'
- en: 'After clicking on the Track Distance button, you should see a popup that tells
    you that your HTML JavaScript client is now subscribed to the `distance` data:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Track Distance按钮后，您应该会看到一个弹出窗口，告诉您HTML JavaScript客户端现在已订阅了`distance`数据：
- en: '![](assets/415dfa7a-89b4-48ad-8513-e091c2aa3d0e.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/415dfa7a-89b4-48ad-8513-e091c2aa3d0e.png)'
- en: Click Close to close out of the popup. You should now see distance data information
    from T.A.R.A.S displayed beside the Track Distance button.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击关闭以关闭弹出窗口。现在您应该看到T.A.R.A.S的距离数据信息显示在Track Distance按钮旁边。
- en: 'As with all the code we have written so far, we write it to be as simple and
    self-explanatory as possible. At the heart of our code is the `watch_mode` method:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与迄今为止我们编写的所有代码一样，我们的目标是使其尽可能简单和易于理解。我们代码的核心是`watch_mode`方法：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `watch_mode` method is the default method in our code. It is called immediately
    after the code is run and is called whenever another method completes. In `watch_mode`,
    we need to create a MQTT client object called `mqttc` and then use it to connect
    to our CloudMQTT instance. From there, we set the `on_message` callback to the `on_message` method.
    We then subscribe to the `RobotControl` topic. The while loop that follows calls
    the `loop` method of our MQTT client, `mqttc`. Since we've set the `on_message`
    callback, any time a message is received from the `RobotControl` topic, the program
    is taken out of the while loop and the `on_message` method of our code is executed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`watch_mode`方法是我们代码的默认方法。它在代码运行后立即调用，并在另一个方法完成时调用。在`watch_mode`中，我们需要创建一个名为`mqttc`的MQTT客户端对象，然后使用它连接到我们的CloudMQTT实例。从那里，我们将`on_message`回调设置为`on_message`方法。然后我们订阅`RobotControl`主题。随后的while循环调用我们的MQTT客户端`mqttc`的`loop`方法。由于我们已经设置了`on_message`回调，因此每当从`RobotControl`主题接收到消息时，程序都会退出while循环，并执行我们代码的`on_message`方法。'
- en: In `watch_mode`, the distance sensory information is published to the `distance`
    topic every 2 seconds. Since our HTML JavaScript client is set up to subscribe
    to messages on the `distance` topic, our HTML JavaScript client will update the
    `distance` information on the page every two seconds.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`watch_mode`中，每2秒将距离传感器信息发布到`distance`主题。由于我们的HTML JavaScript客户端已设置为订阅`distance`主题上的消息，因此我们的HTML
    JavaScript客户端将每两秒在页面上更新`distance`信息。
- en: Livestreaming videos from T.A.R.A.S
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从T.A.R.A.S直播视频。
- en: 'Amazing as it is to be able to control T.A.R.A.S from the web, it wouldn''t
    be of much use if we couldn''t see what what we were doing. Streaming live video
    from Raspberry Pi is actually quite simple if you install RPi-Cam-Web-Interface
    on your Raspberry Pi. Let''s do that now:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络上控制T.A.R.A.S是一件了不起的事情，但如果我们看不到我们在做什么，那就没什么用了。如果你在树莓派上安装RPi-Cam-Web-Interface，就可以很简单地从树莓派上直播视频。现在让我们来做这个：
- en: If you do not have `git` installed on your Raspberry Pi, please install it with
    `sudo apt-get install git` from a Terminal.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的树莓派上没有安装`git`，请在终端中使用`sudo apt-get install git`进行安装。
- en: Using the Terminal, get the installation files by running the `git clone https://github.com/silvanmelchior/RPi_Cam_Web_Interface.git` command.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用终端，通过运行`git clone https://github.com/silvanmelchior/RPi_Cam_Web_Interface.git`命令获取安装文件。
- en: Change directories with the `cd RPi_Cam_Web_Interface` command.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd RPi_Cam_Web_Interface`命令更改目录。
- en: Run the installer with the `./install.sh` command.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`./install.sh`命令运行安装程序。
- en: 'You should see the Configuration Options screen:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到配置选项屏幕：
- en: '![](assets/721fe07d-1a6c-410b-9453-b884580c6170.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/721fe07d-1a6c-410b-9453-b884580c6170.png)'
- en: Accept all the defaults by hitting *Tab* on your keyboard until the OK option
    is highlighted. Hit *Enter*.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在键盘上按*Tab*，接受所有默认设置，直到OK选项被突出显示。然后按*Enter*。
- en: 'Select Yes when you see the Start camera system now dialog:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在看到“现在启动摄像头系统”对话框时选择“是”：
- en: '![](assets/61bcc260-0ba5-4de2-90f1-5a8dd2685c95.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/61bcc260-0ba5-4de2-90f1-5a8dd2685c95.png)'
- en: We are now ready to livestream video from our Raspberry Pi (T.A.R.A.S). On another
    computer, open a browser and type in the address `http://<<ip address of your
    raspberry pi>>/html` (use `ifconfig` on your Raspberry Pi in order to find your
    IP address; in my case, the URL for video streaming is `http://192.168.0.31/html`).
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好从我们的树莓派（T.A.R.A.S）实时传输视频。在另一台计算机上，打开浏览器，输入地址`http://<<您的树莓派IP地址>>/html`（在您的树莓派上使用`ifconfig`来查找您的IP地址；在我的情况下，视频流的URL是`http://192.168.0.31/html`）。
- en: 'You should now see the video streaming player load into your browser with live
    video from your Raspberry Pi. The following is a screenshot of the livestream
    from T.A.R.A.S in my office, looking up at my drones on display:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该看到视频流播放器加载到您的浏览器中，并从您的树莓派实时播放视频。以下是我办公室T.A.R.A.S的直播截图，显示我的无人机：
- en: '![](assets/2c0a7d4a-e9e2-493f-b74b-0585dc0461dd.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c0a7d4a-e9e2-493f-b74b-0585dc0461dd.png)'
- en: The RPi-Cam-Web-Interface utility is an amazing tool. Take some time to experiment
    with the various options and functions that are available.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: RPi-Cam-Web-Interface实用程序是一个令人惊叹的工具。花些时间尝试一下可用的各种选项和功能。
- en: Enhancing our JavaScript client to control our robot car
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强我们的JavaScript客户端以控制我们的机器人小车
- en: As we've mentioned already, our HTML JavaScript client is the most attractive
    of interfaces. I designed it to be as simple and straightforward as possible in
    order to explain various concepts. But what if we want to take it to another level?
    The following is a list of JavaScript libraries that may be used to enhance our
    HTML JavaScript client.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，我们的HTML JavaScript客户端是最具吸引力的界面。我设计它尽可能简单直接，以便解释各种概念。但是，如果我们想把它提升到另一个水平呢？以下是一些可能用于增强我们的HTML
    JavaScript客户端的JavaScript库的列表。
- en: Nipple.js
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nipple.js
- en: 'Nipple.js ([https://www.bypeople.com/touch-screen-joystick/](https://www.bypeople.com/touch-screen-joystick/))
    is a JavaScript touchscreen joystick library that may be used in the control of
    robots. Nipple.js is basically an onscreen version of pointing stick controls
    found on some laptops:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Nipple.js ([https://www.bypeople.com/touch-screen-joystick/](https://www.bypeople.com/touch-screen-joystick/))是一个JavaScript触摸屏操纵杆库，可用于控制机器人。Nipple.js基本上是一种屏幕上的指向杆控制，类似于一些笔记本电脑上的控制。
- en: '![](assets/279a34fc-8690-419e-a37f-3216132c51a3.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/279a34fc-8690-419e-a37f-3216132c51a3.png)'
- en: If you are creating a JavaScript client for a touchscreen tablet or laptop,
    Nipple.js may be a good technology to build it on. Incorporating a technology
    such as Nipple.js into our design would require a fair bit of coding in order
    to translate the movements into messages that T.A.R.A.S would understand. A simple
    forward message might not suffice. The message may be something like `Forward-1-Left-2.3`
    and it would have to be parsed and information taken out to determine how the
    amount of time to turn the motor and which motors to move.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要为触摸屏平板电脑或笔记本电脑创建JavaScript客户端，Nipple.js可能是一个很好的构建技术。将Nipple.js等技术纳入我们的设计中，需要相当多的编码工作，以便将移动转换为T.A.R.A.S能理解的消息。简单的前进消息可能不够。消息可能是`Forward-1-Left-2.3`之类的，必须对其进行解析并提取信息，以确定转动电机的时间和移动哪些电机。
- en: HTML5 Gamepad API
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5 Gamepad API
- en: Would you like to connect a physical joystick to control our robot car? You
    may do so with the HTML5 Gamepad API ([https://www.w3.org/TR/gamepad/](https://www.w3.org/TR/gamepad/)).
    With the HTML5 Gamepad API, you may utilize your standard gaming joystick in web
    applications you build. Controlling your robot car may be as easy as playing your
    favorite video game with a HTML5 Gamepad API.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您想连接物理操纵杆来控制我们的机器人小车吗？您可以使用HTML5 Gamepad API ([https://www.w3.org/TR/gamepad/](https://www.w3.org/TR/gamepad/))。使用HTML5
    Gamepad API，您可以在构建的Web应用程序中使用标准游戏操纵杆。通过HTML5 Gamepad API控制您的机器人小车可能就像玩您最喜欢的视频游戏一样简单。
- en: Johnny-Five
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Johnny-Five
- en: Johnny-Five ([http://johnny-five.io](http://johnny-five.io)) is a JavaScript
    Robotic and IoT platform. It is a completely different platform than what we have
    developed our robot car on. Now that we have built our robot car from scratch
    and have coded our control code by hand, we may be interested in trying something
    new. Johnny-Five may be that next technology you decide to become an expert in.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Johnny-Five ([http://johnny-five.io](http://johnny-five.io))是一个JavaScript机器人和物联网平台。这是一个完全不同于我们为机器人小车开发的平台。现在我们已经从头开始构建了我们的机器人小车，并且已经手工编写了控制代码，我们可能有兴趣尝试一些新东西。Johnny-Five可能是您决定成为专家的下一个技术。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We've have done it! We've reached the end of our Raspberry Pi Internet of Things
    journey. In this chapter, we brought what we've learned together and created our
    own HTML JavaScript client that we used to control T.A.R.A.S using a web page.
    Our use of classes to control T.A.R.A.S made creating the control code relatively
    easy as we only had to call methods on the classes and not create control code
    from scratch.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做到了！我们已经完成了树莓派物联网之旅。在本章中，我们将所学知识整合在一起，并创建了自己的HTML JavaScript客户端，用于通过网页控制T.A.R.A.S。我们使用类来控制T.A.R.A.S，使得创建控制代码相对容易，因为我们只需要在类上调用方法，而不是从头开始创建控制代码。
- en: We touched briefly on how easy it is to stream live video from our Raspberry
    Pi. Although we did all of this to control a robot car over our network, it is
    not too hard to imagine how we may use what we've learned to build any number
    of different IoT projects using Raspberry Pi.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要介绍了如何轻松地从树莓派实时传输视频。尽管我们做所有这些是为了通过网络控制机器人小车，但不难想象我们可以利用所学知识来构建任意数量的不同物联网项目。
- en: We live in a very exciting time. Any one of us may build the next killer app
    using only our intellect and a few relatively inexpensive electronic components.
    If anything, I hope that I was able to inspire you to use the amazing Raspberry
    Pi computer to build your next great project.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活在一个非常激动人心的时代。我们中的任何一个人都可以仅凭我们的智慧和一些相对便宜的电子元件来构建下一个杀手级应用程序。如果可能的话，我希望我能激励您使用令人惊叹的树莓派计算机来构建您的下一个伟大项目。
- en: For those who are questioning how we may view this as an Internet of Things
    project when we are only using our local network, please do some research into
    how you can open up ports on your router to the outside world. This is not a task
    that should be taken lightly, though, as there are security concerns that you
    must address whenever you do something like that. Please note, too, however, that
    your Internet Service Provider may not be giving you a static IP address and thus
    anything you build to access your network from the outside will break every time
    your IP address changes (I once built a PHP page that checked my IP address periodically,
    stored the latest address, and had outside clients which would go to that PHP
    for the address instead of having it hardcoded).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些质疑我们如何将这视为物联网项目的人，当我们只使用我们的本地网络时，请研究一下如何在路由器上打开端口以连接外部世界。然而，这不是一项应该轻率对待的任务，因为在这样做时必须解决安全问题。请注意，您的互联网服务提供商可能没有为您提供静态IP地址，因此您构建的任何用于从外部访问您的网络的东西都会在IP地址更改时中断（我曾经构建过一个定期检查我的IP地址的PHP页面，存储最新地址，并有外部客户端会访问该PHP获取地址，而不是将其硬编码）。
- en: Questions
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which topic do we publish control-type messages to in our project?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们向哪个主题发布控制类型的消息？
- en: True or false? MQTT Broker and MQTT Server are words used to describe the same
    thing.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？MQTT Broker和MQTT Server是用来描述同一件事情的词语。
- en: True or false? T.A.R.A.S publishes and subscribes on the same MQTT topic.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？T.A.R.A.S在相同的MQTT主题上发布和订阅。
- en: What color are the big forward and backwards buttons in our HTML JavaScript
    client?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的HTML JavaScript客户端中的大前进和后退按钮是什么颜色？
- en: True or false? Using the HTML JavaScript client, we are able to remotely take
    a picture using the camera on T.A.R.A.S.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？使用HTML JavaScript客户端，我们能够远程使用T.A.R.A.S上的摄像头拍照。
- en: What is the name of the MQTT topic we use to subscribe to distance data coming
    from T.A.R.A.S?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用什么MQTT主题名称来订阅来自T.A.R.A.S的距离数据？
- en: True or false? Our HTML JavaScript client incorporates an award-winning UI design.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们的HTML JavaScript客户端采用了屡获殊荣的UI设计。
- en: True or false? Using our CloudMQTT account, we are able to view published messages
    in our instance.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？使用我们的CloudMQTT账户，我们能够查看我们实例中发布的消息。
- en: What is the name of the technology we use to livestream video from T.A.R.A.S?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用什么技术来从T.A.R.A.S进行视频直播？
- en: True or false? Johnny-Five is the name of a new fruit drink created by the Coca-Cola
    company.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？Johnny-Five是可口可乐公司推出的一种新果汁饮料。
- en: Further reading
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: We glossed over the RPi-Cam-Web-Interface web interface briefly when we set
    up live streaming on T.A.R.A.S. This web interface is quite amazing and a more in-depth
    understanding of it will only enhance our grasp of all of the things Raspberry
    Pi is capable of. Please visit [https://elinux.org/RPi-Cam-Web-Interface](https://elinux.org/RPi-Cam-Web-Interface)
    for more information.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在T.A.R.A.S上设置实时流时，我们简要地介绍了RPi-Cam-Web-Interface网页界面。这个网页界面非常惊人，对它的更深入了解只会增强我们对树莓派的所有可能性的理解。请访问[https://elinux.org/RPi-Cam-Web-Interface](https://elinux.org/RPi-Cam-Web-Interface)获取更多信息。
