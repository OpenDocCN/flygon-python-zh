["```py\nimport sys class Redirection(object):\n def __init__(self, in_obj, out_obj): self.input = in_obj self.output = out_obj def read_line(self): res = self.input.readline() self.output.write(res) return resif __name__ == '__main__':\n if not sys.stdin.isatty(): sys.stdin = Redirection(in_obj=sys.stdin, out_obj=sys.stdout) a = input('Enter a string: ') b = input('Enter another string: ') print ('Entered strings are: ', repr(a), 'and', repr(b)) \n```", "```py\n$ python3 redirection.py \n```", "```py\nOutput: Enter a string: hello Enter another string: python Entered strings are:  'hello' and 'python'\n```", "```py\nimport sys for n in sys.stdin:\n print ( int(n.strip())//2 ) \n```", "```py\n$ echo 15 | python3 accept_by_pipe.py Output: 7 \n```", "```py\n$ echo -e '15\\n45\\n20' | python3 accept_by_pipe.py Output: 7 22 10\n```", "```py\nHello World Hello Python\n```", "```py\ni = open('sample.txt','r')\no = open('sample_output.txt','w')\n\na = i.read()\no.write(a)\n```", "```py\n$ python3 accept_by_input_file.py $ cat sample_output.txt Hello World Hello Python\n```", "```py\nimport sys import paramiko import time ip_address = \"192.168.2.106\" username = \"student\" password = \"training\" ssh_client = paramiko.SSHClient() ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh_client.load_system_host_keys() ssh_client.connect(hostname=ip_address,\\\n username=username, password=password) print (\"Successful connection\", ip_address) ssh_client.invoke_shell() remote_connection = ssh_client.exec_command('cd Desktop; mkdir work\\n') remote_connection = ssh_client.exec_command('mkdir test_folder\\n') #print( remote_connection.read() ) ssh_client.close\n```", "```py\n$ python3 handling_password.py  Output: Successful connection 192.168.2.106\n```", "```py\npip3 install paramiko\n```", "```py\nimport subprocess subprocess.call([\"touch\", \"sample.txt\"]) subprocess.call([\"ls\"]) print(\"Sample file created\") subprocess.call([\"rm\", \"sample.txt\"]) \n```", "```py\nsubprocess.call([\"ls\"]) print(\"Sample file deleted\")\n```", "```py\n$ python3 execute_external_commands.py Output: 1.py     accept_by_pipe.py      sample_output.txt       sample.txt accept_by_input_file.py         execute_external_commands.py         output.txt        sample.py Sample.txt file created 1.py     accept_by_input_file.py         accept_by_pipe.py execute_external_commands.py  output.txt            sample_output.txt       sample.py Sample.txt file deleted\n```", "```py\nimport subprocess res = subprocess.run(['ls', '-1'], stdout=subprocess.PIPE,) print('returncode:', res.returncode) print(' {} bytes in stdout:\\n{}'.format(len(res.stdout), res.stdout.decode('utf-8'))) \n```", "```py\nstudent@ubuntu:~$ python3 capture_output.py \n```", "```py\nOutput: returncode: 0 191 bytes in stdout: 1.py accept_by_input_file.py accept_by_pipe.py execute_external_commands.py getpass_example.py ouput.txt output.txt password_prompt_again.py sample_output.txt sample.py capture_output.py\n```", "```py\nimport getpass try:\n p = getpass.getpass() except Exception as error:\n print('ERROR', error) else:\n print('Password entered:', p)\n```", "```py\n$ python3 no_prompt.py Output : Password: Password entered: abcd\n```", "```py\nimport getpass try:\n p = getpass.getpass(\"Enter your password: \") except Exception as error:\n print('ERROR', error) else:\n print('Password entered:', p)\n```", "```py\n$ python3 with_prompt.py Output: Enter your password: Password entered: abcd\n```", "```py\nimport getpass passwd = getpass.getpass(prompt='Enter your password: ') if passwd.lower() == '#pythonworld':\n print('Welcome!!') else:\n print('The password entered is incorrect!!')\n```", "```py\n$ python3 getpass_example.py Output: Enter your password: Welcome!!\n```", "```py\n$ python3 getpass_example.py Output: Enter your password: The password entered is incorrect!!\n```", "```py\nimport getpass user_name = getpass.getuser() print (\"User Name : %s\" % user_name) while True:\n passwd = getpass.getpass(\"Enter your Password : \") if passwd == '#pythonworld': print (\"Welcome!!!\") break else: print (\"The password you entered is incorrect.\")\n```", "```py\nstudent@ubuntu:~$ python3 password_prompt_again.py User Name : student Enter your Password : The password you entered is incorrect. Enter your Password : Welcome!!!\n```", "```py\n[bug_tracker] url = https://timesofindia.indiatimes.com/\n```", "```py\nfrom configparser import ConfigParser p = ConfigParser() p.read('read_simple.ini') print(p.get('bug_tracker', 'url'))\n```", "```py\n$ python3 read_config_file.py  Output: https://timesofindia.indiatimes.com/\n```", "```py\nfrom configparser import ConfigParser import glob p = ConfigParser() files = ['hello.ini', 'bye.ini', 'read_simple.ini', 'welcome.ini'] files_found = p.read(files) files_missing = set(files) - set(files_found) print('Files found:  ', sorted(files_found)) print('Files missing:  ', sorted(files_missing))\n```", "```py\n$ python3 read_many_config_file.py  Output Files found:   ['read_simple.ini'] Files missing:   ['bye.ini', 'hello.ini', 'welcome.ini']\n```", "```py\nimport logging LOG_FILENAME = 'log.txt' logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG,) logging.debug('This message should go to the log file') with open(LOG_FILENAME, 'rt') as f:\n prg = f.read() print('FILE:') print(prg)\n```", "```py\n$ python3 logging_example.py Output: FILE: DEBUG:root:This message should go to the log file\n```", "```py\n$ cat log.txt  Output: DEBUG:root:This message should go to the log file\n```", "```py\nimport logging import warnings logging.basicConfig(level=logging.INFO,) warnings.warn('This warning is not sent to the logs') logging.captureWarnings(True) warnings.warn('This warning is sent to the logs')\n```", "```py\n$ python3 logging_warnings_codes.py Output: logging_warnings_codes.py:6: UserWarning: This warning is not sent to the logs\n warnings.warn('This warning is not sent to the logs') WARNING:py.warnings:logging_warnings_codes.py:10: UserWarning: This warning is sent to the logs\n warnings.warn('This warning is sent to the logs')\n```", "```py\nimport warnings warnings.simplefilter('error', UserWarning) print('Before') warnings.warn('Write your warning message here') print('After')\n```", "```py\n$ python3 generate_warnings.py Output: Before: Traceback (most recent call last):\n File \"generate_warnings.py\", line 6, in <module> warnings.warn('Write your warning message here') UserWarning: Write your warning message here\n```", "```py\nimport resource import sys import signal import time def time_expired(n, stack):\n print('EXPIRED :', time.ctime()) raise SystemExit('(time ran out)') signal.signal(signal.SIGXCPU, time_expired) # Adjust the CPU time limit soft, hard = resource.getrlimit(resource.RLIMIT_CPU) print('Soft limit starts as  :', soft) resource.setrlimit(resource.RLIMIT_CPU, (10, hard)) soft, hard = resource.getrlimit(resource.RLIMIT_CPU) print('Soft limit changed to :', soft) print() # Consume some CPU time in a pointless exercise print('Starting:', time.ctime()) for i in range(200000):\n for i in range(200000): v = i * i # We should never make it this far print('Exiting :', time.ctime())\n```", "```py\n$ python3 put_cpu_limit.py Output: Soft limit starts as  : -1 Soft limit changed to : 10 Starting: Thu Sep  6 16:13:20 2018 EXPIRED : Thu Sep  6 16:13:31 2018 (time ran out)\n```", "```py\nimport webbrowser webbrowser.open('https://timesofindia.indiatimes.com/world')\n```", "```py\n$ python3 open_web.py Output:\nUrl mentioned in open() will be opened in your browser.\nwebbrowser \u2013 Command line interface\n```", "```py\n$ python3 -m webbrowser -n https://www.google.com/\n```", "```py\nimport os directory_name = 'abcd' print('Creating', directory_name) os.makedirs(directory_name) file_name = os.path.join(directory_name, 'sample_example.txt') print('Creating', file_name) with open(file_name, 'wt') as f:\n f.write('sample example file') print('Cleaning up') os.unlink(file_name) os.rmdir(directory_name)       # Will delete the directory\n```", "```py\n$ python3 os_dir_example.py Output: Creating abcd Creating abcd/sample_example.txt Cleaning up\n```", "```py\nimport os import sys print(sorted(os.listdir(sys.argv[1])))\n```", "```py\n$ python3 list_dir.py /home/student/ ['.ICEauthority', '.bash_history', '.bash_logout', '.bashrc', '.cache', '.config', '.gnupg', '.local', '.mozilla', '.pam_environment', '.profile', '.python_history', '.ssh', '.sudo_as_admin_successful', '.viminfo', '1.sh', '1.sh.x', '1.sh.x.c', 'Desktop', 'Documents', 'Downloads', 'Music', 'Pictures', 'Public', 'Templates', 'Videos', 'examples.desktop', 'execute_external_commands.py', 'log.txt', 'numbers.txt', 'python_learning', 'work']\n```", "```py\nimport os import shutil import time from sh import rsync def check_dir(os_dir):\n if not os.path.exists(os_dir): print (os_dir, \"does not exist.\") exit(1) def ask_for_confirm():\n ans = input(\"Do you want to Continue? yes/no\\n\") global con_exit if ans == 'yes': con_exit = 0 return con_exit elif ans == \"no\": con_exit = 1 return con_exit else:1 print (\"Answer with yes or no.\") ask_for_confirm() def delete_files(ending):\n for r, d, f in os.walk(backup_dir): for files in f: if files.endswith(\".\" + ending): os.remove(os.path.join(r, files)) backup_dir = input(\"Enter directory to backup\\n\")   # Enter directory name check_dir(backup_dir) print (backup_dir, \"saved.\") time.sleep(3) backup_to_dir= input(\"Where to backup?\\n\") check_dir(backup_to_dir) print (\"Doing the backup now!\") ask_for_confirm() if con_exit == 1:\n print (\"Aborting the backup process!\") exit(1) rsync(\"-auhv\", \"--delete\", \"--exclude=lost+found\", \"--exclude=/sys\", \"--exclude=/tmp\", \"--exclude=/proc\", \"--exclude=/mnt\", \"--exclude=/dev\", \"--exclude=/backup\", backup_dir, backup_to_dir)\n```", "```py\nstudent@ubuntu:~/work$ python3 take_backup.py Output : Enter directory to backup /home/student/work /home/student/work saved. Where to backup? /home/student/Desktop Doing the backup now! Do you want to Continue? yes/no yes\n```"]