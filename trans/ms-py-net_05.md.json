["```py\n    ---\n    - name: IOS Command Output\n      hosts: \"iosv-devices\"\n      gather_facts: false\n      connection: local\n      vars:\n        cli:\n          host: \"{{ ansible_host }}\"\n          username: \"{{ username }}\"\n          password: \"{{ password }}\"\n          transport: cli\n      tasks:\n        - name: show hostname\n          ios_command:\n            commands:\n              - show run | i hostname\n                provider: \"{{ cli }}\"\n            register: output\n        - name: show output\n          when: '\"iosv-2\" in \"{{ output.stdout }}\"'\n          debug:\n            msg: '{{ output }}'\n```", "```py\n    <skip>\n    TASK [show output]  \n    *************************************************************\n    skipping: [ios-r1]\n ok: [ios-r2] => {\n \"msg\": {\n \"changed\": false,\n \"stdout\": [\n \"hostname iosv-2\"\n ],\n \"stdout_lines\": [\n [\n \"hostname iosv-2\"\n ]\n ],\n \"warnings\": []\n }\n }\n    <skip>\n```", "```py\n    <skip> \n    tasks:\n      - name: show hostname\n        ios_command:\n          commands:\n            - show run | i hostname\n          provider: \"{{ cli }}\"\n        register: output\n      - name: config example\n        when: '\"iosv-2\" in \"{{ output.stdout }}\"'\n        ios_config:\n          lines:\n            - logging buffered 30000\n          provider: \"{{ cli }}\"\n```", "```py\n TASK [config example] \n **********************************************************\n skipping: [ios-r1]\n changed: [ios-r2] \n PLAY RECAP \n ***********************************************************\n ios-r1 : ok=1 changed=0 unreachable=0 failed=0\n ios-r2 : ok=2 changed=1 unreachable=0 failed=0\n```", "```py\nwhen: ansible_os_family == \"Debian\" and ansible_lsb.major_release|int >= 16\n```", "```py\n$ cat hosts\n[ios-devices]\niosv-1\niosv-2\n\n$ cat host_vars/iosv-1\n---\nansible_host: 172.16.1.20\nansible_user: cisco\nansible_ssh_pass: cisco\nansible_connection: network_cli\nansible_network_os: ios\nansbile_become: yes\nansible_become_method: enable\nansible_become_pass: cisco\n```", "```py\n$ cat my_playbook.yml\n---\n- name: Chapter 5 Ansible 2.5 network facts\n connection: network_cli\n gather_facts: false\n hosts: all\n tasks:\n - name: Gathering facts via ios_facts module\n ios_facts:\n when: ansible_network_os == 'ios'\n\n - name: Display certain facts\n debug:\n msg: \"The hostname is {{ ansible_net_hostname }} running {{ ansible_net_version }}\"\n\n - name: Display all facts for a host\n debug:\n var: hostvars['iosv-1']\n```", "```py\n$ ansible-playbook -i hosts my_playbook.yml\n\nPLAY [Chapter 5 Ansible 2.5 network facts] *************************************\n\nTASK [Gathering facts via ios_facts module] ************************************\nok: [iosv-2]\nok: [iosv-1]\n\nTASK [Display certain facts] ***************************************************\nok: [iosv-2] => {\n \"msg\": \"The hostname is iosv-2 running 15.6(3)M2\"\n}\nok: [iosv-1] => {\n \"msg\": \"The hostname is iosv-1 running 15.6(3)M2\"\n}\n```", "```py\nTASK [Display all facts for a host] ********************************************\nok: [iosv-1] => {\n \"hostvars['iosv-1']\": {\n \"ansbile_become\": true,\n \"ansible_become_method\": \"enable\",\n \"ansible_become_pass\": \"cisco\",\n \"ansible_check_mode\": false,\n \"ansible_connection\": \"network_cli\",\n \"ansible_diff_mode\": false,\n \"ansible_facts\": {\n \"net_all_ipv4_addresses\": [\n \"10.0.0.5\",\n \"172.16.1.20\",\n \"192.168.0.1\"\n ],\n \"net_all_ipv6_addresses\": [],\n \"net_filesystems\": [\n \"flash0:\"\n ],\n \"net_gather_subset\": [\n \"hardware\",\n \"default\",\n \"interfaces\"\n ],\n \"net_hostname\": \"iosv-1\",\n \"net_image\": \"flash0:/vios-adventerprisek9-m\",\n \"net_interfaces\": {\n \"GigabitEthernet0/0\": {\n \"bandwidth\": 1000000,\n \"description\": \"OOB Management\",\n \"duplex\": \"Full\",\n \"ipv4\": [\n {\n \"address\": \"172.16.1.20\",\n \"subnet\": \"24\"\n }\n[skip]\n```", "```py\n arista1#sh interfaces ethernet 1/3 | json\n {\n \"interfaces\": {\n \"Ethernet1/3\": {\n \"interfaceStatistics\": {\n <skip>\n \"outPktsRate\": 0.0\n },\n \"name\": \"Ethernet1/3\",\n \"interfaceStatus\": \"disabled\",\n \"autoNegotiate\": \"off\",\n <skip>\n }\n arista1#\n```", "```py\n    <skip>\n     tasks:\n       - name: \"sh int ethernet 1/3 | json\"\n         eos_command:\n           commands:\n             - \"show interface ethernet 1/3 | json\"\n           provider: \"{{ cli }}\"\n           waitfor:\n             - \"result[0].interfaces.Ethernet1/3.interfaceStatus eq \n    disabled\"\n         register: output\n       - name: show output\n         debug:\n           msg: \"Interface Disabled, Safe to Proceed\"\n```", "```py\n TASK [sh int ethernet 1/3 | json] \n **********************************************\n ok: [arista1]\n\n TASK [show output] \n *************************************************************\n ok: [arista1] => {\n \"msg\": \"Interface Disabled, Safe to Proceed\"\n }\n```", "```py\n TASK [sh int ethernet 1/3 | json] \n **********************************************\n fatal: [arista1]: FAILED! => {\"changed\": false, \"commands\": [\"show \n interface ethernet 1/3 | json | json\"], \"failed\": true, \"msg\": \n \"matched error in response: show interface ethernet 1/3 | json | \n jsonrn% Invalid input (privileged mode required)rn********1>\"}\n to retry, use: --limit \n @/home/echou/Master_Python_Networking/Chapter5/chapter5_3.retry\n\n PLAY RECAP \n ******************************************************************\n arista1 : ok=0 changed=0 unreachable=0 failed=1\n```", "```py\n      tasks:\n        - name: echo loop items\n          command: echo {{ item }}\n          with_items: ['r1', 'r2', 'r3', 'r4', 'r5']   \n```", "```py\nTASK [echo loop items] *********************************************************\nchanged: [192.168.199.185] => (item=r1)\nchanged: [192.168.199.185] => (item=r2)\nchanged: [192.168.199.185] => (item=r3)\nchanged: [192.168.199.185] => (item=r4)\nchanged: [192.168.199.185] => (item=r5)\n```", "```py\n tasks:\n   - name: add vlans\n     eos_config:\n       lines:\n           - vlan {{ item }}\n       provider: \"{{ cli }}\"\n     with_items:\n         - 100\n         - 200\n         - 300\n```", "```py\nvars:\n  vlan_numbers: [100, 200, 300]\n<skip>\ntasks:\n  - name: add vlans\n    eos_config:\n      lines:\n          - vlan {{ item }}\n      provider: \"{{ cli }}\"\n    with_items: \"{{ vlan_numbers }}\"\n```", "```py\n    <skip> \n    vars:\n       cli:\n         host: \"{{ ansible_host }}\"\n         username: \"{{ username }}\"\n         password: \"{{ password }}\"\n         transport: cli\n       vlans: {\n           \"100\": {\"description\": \"floor_1\", \"ip\": \"192.168.10.1\"},\n           \"200\": {\"description\": \"floor_2\", \"ip\": \"192.168.20.1\"}\n           \"300\": {\"description\": \"floor_3\", \"ip\": \"192.168.30.1\"}\n       }\n```", "```py\n     tasks:\n       - name: add vlans\n         nxos_config:\n           lines:\n             - vlan {{ item.key }}\n           provider: \"{{ cli }}\"\n         with_dict: \"{{ vlans }}\"\n```", "```py\n  - name: configure vlans\n    nxos_config:\n       lines:\n         - description {{ item.value.name }}\n         - ip address {{ item.value.ip }}/24\n       provider: \"{{ cli }}\"\n       parents: interface vlan {{ item.key }}\n    with_dict: \"{{ vlans }}\"\n```", "```py\nTASK [configure vlans] *********************************************************\nchanged: [nxos-r1] => (item={'key': u'300', 'value': {u'ip': u'192.168.30.1', u'name': u'floor_3'}})\nchanged: [nxos-r1] => (item={'key': u'200', 'value': {u'ip': u'192.168.20.1', u'name': u'floor_2'}})\nchanged: [nxos-r1] => (item={'key': u'100', 'value': {u'ip': u'192.168.10.1', u'name': u'floor_1'}})\n```", "```py\nnx-osv-1# sh run | i vlan\n<skip>\nvlan 1,10,100,200,300\nnx-osv-1#\n```", "```py\nnx-osv-1# sh run | section \"interface Vlan100\"\ninterface Vlan100\n description floor_1\n ip address 192.168.10.1/24\nnx-osv-1#\n```", "```py\n$ touch file1\n```", "```py\n---\n- name: Template Basic\n  hosts: localhost\n\n  tasks:\n    - name: copy one file to another\n      template:\n        src=./file1\n        dest=./file2\n```", "```py\n$ ansible-playbook chapter5_7.yml\n [WARNING]: provided hosts list is empty, only localhost is available\n<skip>\nTASK [copy one file to another] ************************************************\n\nchanged: [localhost]\n<skip>\n```", "```py\n    hostname {{ item.value.hostname }}\n    feature telnet\n    feature ospf\n    feature bgp\n    feature interface-vlan\n\n    username {{ item.value.username }} password {{ item.value.password \n    }} role network-operator\n```", "```py\n    ---\n    - name: Template Looping\n      hosts: localhost\n\n      vars:\n        nexus_devices: {\n          \"nx-osv-1\": {\"hostname\": \"nx-osv-1\", \"username\": \"cisco\", \n    \"password\": \"cisco\"}\n        }\n\n      tasks:\n        - name: create router configuration files\n          template:\n            src=./nxos.j2\n            dest=./{{ item.key }}.conf\n          with_dict: \"{{ nexus_devices }}\"\n```", "```py\n$ cat nx-osv-1.conf\nhostname nx-osv-1\n\nfeature telnet\nfeature ospf\nfeature bgp\nfeature interface-vlan\n\nusername cisco password cisco role network-operator\n```", "```py\n    {% for vlan_num in item.value.vlans %}\n    vlan {{ vlan_num }}\n    {% endfor %}\n\n    {% for vlan_interface in item.value.vlan_interfaces %}\n    interface {{ vlan_interface.int_num }}\n      ip address {{ vlan_interface.ip }}/24\n    {% endfor %}\n```", "```py\n   vars:\n     nexus_devices: {\n       \"nx-osv-1\": {\n       \"hostname\": \"nx-osv-1\",\n       \"username\": \"cisco\",\n       \"password\": \"cisco\",\n       \"vlans\": [100, 200, 300],\n       \"vlan_interfaces\": [\n          {\"int_num\": \"100\", \"ip\": \"192.168.10.1\"},\n          {\"int_num\": \"200\", \"ip\": \"192.168.20.1\"},\n          {\"int_num\": \"300\", \"ip\": \"192.168.30.1\"}\n        ]\n       }\n     }\n```", "```py\n    {% if item.value.netflow_enable %}\n    feature netflow\n    {% endif %}\n```", "```py\n    vars:\n      nexus_devices: {\n      <skip>\n             \"netflow_enable\": True\n      <skip>\n     }\n```", "```py\n    {% if item.value.l3_vlan_interfaces %}\n    {% for vlan_interface in item.value.vlan_interfaces %}\n    interface {{ vlan_interface.int_num }}\n     ip address {{ vlan_interface.ip }}/24\n    {% endfor %}\n    {% endif %}\n```", "```py\n     vars:\n       nexus_devices: {\n       <skip>\n         \"nx-osv-2\": {\n           \"hostname\": \"nx-osv-2\",\n           \"username\": \"cisco\",\n           \"password\": \"cisco\",\n           \"vlans\": [100, 200, 300],\n           \"l3_vlan_interfaces\": False,\n           \"netflow_enable\": False\n         }\n        <skip>\n     }\n```", "```py\n$ ansible-playbook chapter5_8.yml\n [WARNING]: provided hosts list is empty, only localhost is available. Note\nthat the implicit localhost does not match 'all'\n\nPLAY [Template Looping] ********************************************************\n\nTASK [Gathering Facts] *********************************************************\nok: [localhost]\n\nTASK [create router configuration files] ***************************************\nok: [localhost] => (item={'value': {u'username': u'cisco', u'password': u'cisco', u'hostname': u'nx-osv-2', u'netflow_enable': False, u'vlans': [100, 200, 300], u'l3_vlan_interfaces': False}, 'key': u'nx-osv-2'})\nok: [localhost] => (item={'value': {u'username': u'cisco', u'password': u'cisco', u'hostname': u'nx-osv-1', u'vlan_interfaces': [{u'int_num': u'100', u'ip': u'192.168.10.1'}, {u'int_num': u'200', u'ip': u'192.168.20.1'}, {u'int_num': u'300', u'ip': u'192.168.30.1'}], u'netflow_enable': True, u'vlans': [100, 200, 300], u'l3_vlan_interfaces': True}, 'key': u'nx-osv-1'})\n\nPLAY RECAP *********************************************************************\nlocalhost : ok=2 changed=0 unreachable=0 failed=0\n```", "```py\n$ cat nx-osv-1.conf\nhostname nx-osv-1\n\nfeature telnet\nfeature ospf\nfeature bgp\nfeature interface-vlan\n\nfeature netflow\n\nusername cisco password cisco role network-operator\n\nvlan 100\nvlan 200\nvlan 300\n\ninterface 100\n ip address 192.168.10.1/24\ninterface 200\n ip address 192.168.20.1/24\ninterface 300\n ip address 192.168.30.1/24\n\n$ cat nx-osv-2.conf\nhostname nx-osv-2\n\nfeature telnet\nfeature ospf\nfeature bgp\nfeature interface-vlan\n\nusername cisco password cisco role network-operator\n\nvlan 100\nvlan 200\nvlan 300\n```", "```py\n    vars:\n      nexus_devices: {\n        \"nx-osv-1\": {\n          \"hostname\": \"nx-osv-1\",\n          \"username\": \"cisco\",\n          \"password\": \"cisco\",\n          \"vlans\": [100, 200, 300],\n        <skip>\n        \"nx-osv-2\": {\n          \"hostname\": \"nx-osv-2\",\n          \"username\": \"cisco\",\n          \"password\": \"cisco\",\n          \"vlans\": [100, 200, 300],\n        <skip>\n```", "```py\n$ mkdir group_vars\n```", "```py\n$ cat group_vars/all\n---\nusername: cisco\npassword: cisco\n```", "```py\n    vars:\n      nexus_devices: {\n       \"nx-osv-1\": {\n          \"hostname\": \"nx-osv-1\",\n          \"username\": \"{{ username }}\",\n          \"password\": \"{{ password }}\",\n          \"vlans\": [100, 200, 300],\n        <skip>\n         \"nx-osv-2\": {\n          \"hostname\": \"nx-osv-2\",\n          \"username\": \"{{ username }}\",\n          \"password\": \"{{ password }}\",\n          \"vlans\": [100, 200, 300],\n        <skip>\n```", "```py\n$ mkdir host_vars\n```", "```py\n$ cat host_vars/localhost\n---\n\"nexus_devices\":\n \"nx-osv-1\":\n \"hostname\": \"nx-osv-1\"\n \"username\": \"{{ username }}\"\n \"password\": \"{{ password }}\"\n \"vlans\": [100, 200, 300]\n \"l3_vlan_interfaces\": True\n \"vlan_interfaces\": [\n {\"int_num\": \"100\", \"ip\": \"192.168.10.1\"},\n {\"int_num\": \"200\", \"ip\": \"192.168.20.1\"},\n {\"int_num\": \"300\", \"ip\": \"192.168.30.1\"}\n ]\n \"netflow_enable\": True\n\n \"nx-osv-2\":\n \"hostname\": \"nx-osv-2\"\n \"username\": \"{{ username }}\"\n \"password\": \"{{ password }}\"\n \"vlans\": [100, 200, 300]\n \"l3_vlan_interfaces\": False\n \"netflow_enable\": False\n```", "```py\n $ cat chapter5_9.yml\n ---\n - name: Ansible Group and Host Variables\n hosts: localhost\n\n tasks:\n - name: create router configuration files\n template:\n src=./nxos.j2\n dest=./{{ item.key }}.conf\n with_dict: \"{{ nexus_devices }}\"\n```", "```py\n$ ansible-vault create secret.yml\nVault password: <password>\n\n$ cat secret.yml\n$ANSIBLE_VAULT;1.1;AES256\n336564626462373962326635326361323639323635353630646665656430353261383737623<skip>653537333837383863636530356464623032333432386139303335663262\n3962\n```", "```py\n$ ansible-vault edit secret.yml \nVault password:\n\n$ ansible-vault view secret.yml \nVault password:\n```", "```py\n$ ansible-vault encrypt group_vars/all host_vars/localhost\nVault password:\nEncryption successful\n```", "```py\nERROR! Decryption failed on /home/echou/Master_Python_Networking/Chapter5/Vaults/group_vars/all\n```", "```py\n$ ansible-playbook chapter5_10.yml --ask-vault-pass\nVault password:\n```", "```py\n$ chmod 400 ~/.vault_password.txt\n$ ls -lia ~/.vault_password.txt \n809496 -r-------- 1 echou echou 9 Feb 18 12:17 /home/echou/.vault_password.txt\n```", "```py\n$ ansible-playbook chapter5_10.yml --vault-password-file ~/.vault_password.txt\n```", "```py\n$ ansible-vault encrypt_string\nNew Vault password:\nConfirm New Vault password:\nReading plaintext input from stdin. (ctrl-d to end input)\nnew_user_password\n!vault |\n $ANSIBLE_VAULT;1.1;AES256\n 616364386438393262623139623561613539656664383834643338323966623836343737373361326134663232623861313338383534613865303864616364380a626365393665316133616462643831653332663263643734363863666632636464636563616265303665626364636562316635636462323135663163663331320a62356361326639333165393962663962306630303761656435633966633437613030326633336438366264626464366138323666376239656633623233353832\n\nEncryption successful\n```", "```py\n    ---\n    - name: show output\n        debug:\n          var: output\n```", "```py\n    ---\n    - name: Ansible Group and Host Varibles\n      hosts: localhost\n\n      tasks:\n        - name: create router configuration files\n          template:\n            src=./nxos.j2\n            dest=./{{ item.key }}.conf\n          with_dict: \"{{ nexus_devices }}\"\n          register: output\n\n        - include: show_output.yml\n```", "```py\n    ---\n    - name: show users\n      hosts: localhost\n\n      tasks:\n        - name: show local users\n          command: who\n          register: output\n\n        - include: show_output.yml\n```", "```py\n\u251c\u2500\u2500 chapter5_12.yml\n\u251c\u2500\u2500 chapter5_13.yml\n\u251c\u2500\u2500 hosts\n\u2514\u2500\u2500 roles\n \u251c\u2500\u2500 cisco_nexus\n \u2502   \u251c\u2500\u2500 defaults\n \u2502   \u251c\u2500\u2500 files\n \u2502   \u251c\u2500\u2500 handlers\n \u2502   \u251c\u2500\u2500 meta\n \u2502   \u251c\u2500\u2500 tasks\n \u2502   \u2502   \u2514\u2500\u2500 main.yml\n \u2502   \u251c\u2500\u2500 templates\n \u2502   \u2514\u2500\u2500 vars\n \u2502       \u2514\u2500\u2500 main.yml\n \u2514\u2500\u2500 spines\n \u251c\u2500\u2500 defaults\n \u251c\u2500\u2500 files\n \u251c\u2500\u2500 handlers\n \u251c\u2500\u2500 tasks\n \u2502   \u2514\u2500\u2500 main.yml\n \u251c\u2500\u2500 templates\n \u2514\u2500\u2500 vars\n \u2514\u2500\u2500 main.yml\n```", "```py\n---\ncli:\n  host: \"{{ ansible_host }}\"\n  username: cisco\n  password: cisco\n  transport: cli\n```", "```py\n---\n- name: configure logging parameters\n  nxos_config:\n    lines:\n      - logging server 191.168.1.100\n      - logging event link-status default\n    provider: \"{{ cli }}\"\n```", "```py\n---\n- name: playbook for cisco_nexus role\n  hosts: \"cisco_nexus\"\n  gather_facts: false\n  connection: local\n\n  roles:\n    - cisco_nexus\n```", "```py\n---\n- name: change logging level\n  nxos_config:\n    lines:\n      - logging level local7 7\n    provider: \"{{ cli }}\"\n```", "```py\n---\n- name: playbook for spine role\n  hosts: \"spines\"\n  gather_facts: false\n  connection: local\n\n  roles:\n    - cisco_nexus\n    - spines\n```", "```py\nTASK [cisco_nexus : configure logging parameters] ******************************\nchanged: [nxos-r1]\n\nTASK [spines : change logging level] *******************************************\nok: [nxos-r1]\n```", "```py\n    import requests\n    import json\n\n    url='http://172.16.1.142/ins'\n    switchuser='cisco'\n    switchpassword='cisco'\n\n    myheaders={'content-type':'application/json-rpc'}\n    payload=[\n     {\n       \"jsonrpc\": \"2.0\",\n       \"method\": \"cli\",\n       \"params\": {\n         \"cmd\": \"show version\",\n         \"version\": 1.2\n       },\n       \"id\": 1\n     }\n    ]\n    response = requests.post(url,data=json.dumps(payload),   \n    headers=myheaders,auth=(switchuser,switchpassword)).json()\n\n    print(response['result']['body']['sys_ver_str'])\n```", "```py\n    version = response['result']['body']['sys_ver_str']\n    print json.dumps({\"version\": version})\n```", "```py\n$ ls -a library/\n. .. custom_module_1.py\n```", "```py\n    ---\n    - name: Your First Custom Module\n      hosts: localhost\n      gather_facts: false\n      connection: local\n\n      tasks:\n        - name: Show Version\n          action: custom_module_1\n          register: output\n\n        - debug:\n            var: output\n```", "```py\n$ ansible-playbook chapter5_14.yml\n [WARNING]: provided hosts list is empty, only localhost is available\n\nPLAY [Your First Custom Module] ************************************************\n\nTASK [Show Version] ************************************************************\nok: [localhost]\n\nTASK [debug] *******************************************************************\nok: [localhost] => {\n \"output\": {\n \"changed\": false,\n \"version\": \"7.3(0)D1(1)\"\n }\n}\n\nPLAY RECAP *********************************************************************\nlocalhost : ok=2 changed=0 unreachable=0 failed=0\n```", "```py\n    from ansible.module_utils.basic import AnsibleModule\n\n    if __name__ == '__main__':\n        main()\n```", "```py\n    def main():\n        module = AnsibleModule(\n          argument_spec = dict(\n          host = dict(required=True),\n          username = dict(required=True),\n          password = dict(required=True)\n      )\n    )\n```", "```py\n     device = module.params.get('host')\n     username = module.params.get('username')\n     password = module.params.get('password')\n\n     url='http://' + host + '/ins'\n     switchuser=username\n     switchpassword=password\n```", "```py\n    module.exit_json(changed=False, msg=str(data))\n```", "```py\n     tasks:\n       - name: Show Version\n         *action: custom_module_1 host=\"172.16.1.142\" username=\"cisco\"* \n *password=\"cisco\"*\n         register: output\n```"]