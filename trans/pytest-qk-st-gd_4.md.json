["```py\n\u03bb pip install <PLUGIN_NAME>\n```", "```py\n\u03bb pip install pytest-mock\n```", "```py\n\u03bb pytest -n 4\n```", "```py\n\u03bb pytest --cov=src\n...\n----------- coverage: platform win32, python 3.6.3-final-0 -----------\nName                  Stmts   Miss  Cover\n----------------------------------------\nsrc/series.py           108      5   96%\nsrc/tests/test_series    22      0  100%\n----------------------------------------\nTOTAL                   130      5   97%\n```", "```py\nimport getpass\n\ndef test_login_success(mocker):\n    mocked = mocker.patch.object(getpass, \"getpass\", \n                                 return_value=\"valid-pass\")\n    assert user_login(\"test-user\")\n    mocked.assert_called_with(\"enter password: \")\n```", "```py\n\u03bb pytest pytest-flakes.py --flake\n...\n============================= FAILURES ==============================\n__________________________ pyflakes-check ___________________________\nCH5\\pytest-flakes.py:1: UnusedImport\n'os' imported but unused\nCH5\\pytest-flakes.py:6: UndefinedName\nundefined name 'unknown'\n```", "```py\n@pytest.mark.asyncio\nasync def test_fetch_requests():\n    requests = await fetch_requests(\"example.com/api\")\n    assert len(requests) == 2\n```", "```py\n@pytest.mark.gen_test\ndef test_tornado(http_client):\n    url = \"https://docs.pytest.org/en/latest\"\n    response = yield http_client.fetch(url)\n    assert response.code == 200\n```", "```py\ndef test_fetch_series(postgresql):\n    cur = postgresql.cursor()\n    cur.execute('SELECT * FROM comedy_series;')\n    assert len(cur.fetchall()) == 5\n    cur.close()\n```", "```py\ndatabase:\n    image: postgres\n    environment:\n        POSTGRES_USERNAME: pytest-user\n        POSTGRES_PASSWORD: pytest-pass\n        POSTGRES_DB: test\n    image: regis:10 \n```", "```py\npytest --docker-services\n```", "```py\ndef test_visit_pytest(selenium):\n    selenium.get(\"https://docs.pytest.org/en/latest/\")\n    assert \"helps you write better programs\" in selenium.title\n    elem = selenium.find_element_by_link_text(\"Contents\")\n    elem.click()\n    assert \"Full pytest documentation\" in selenium.title\n```", "```py\n\u03bb pytest --html=report.html\n```", "```py\n\u03bb pytest bin/tests\n```", "```py\n\u03bb pytest --timeout=60\n```", "```py\n@pytest.mark.timeout(600)\ndef test_long_simulation():\n   ...\n```", "```py\ndef highest_rated(series):\n    return sorted(series, key=itemgetter(2))[-1][0]\n\ndef test_highest_rated():\n    series = [\n        (\"The Office\", 2005, 8.8),\n        (\"Scrubs\", 2001, 8.4),\n        (\"IT Crowd\", 2006, 8.5),\n        (\"Parks and Recreation\", 2009, 8.6),\n        (\"Seinfeld\", 1989, 8.9),\n    ]\n    assert highest_rated(series) == \"Seinfeld\"\n```", "```py\n\u03bb pytest --annotate-output=annotations.json\n```", "```py\n\u03bb pyannotate --type-info annotations.json -w\nRefactored test_series.py\n--- test_series.py (original)\n+++ test_series.py (refactored)\n@@ -1,11 +1,15 @@\n from operator import itemgetter\n+from typing import List\n+from typing import Tuple\n\n def highest_rated(series):\n+    # type: (List[Tuple[str, int, float]]) -> str\n return sorted(series, key=itemgetter(2))[-1][0]\n\n def test_highest_rated():\n+    # type: () -> None\n series = [\n (\"The Office\", 2005, 8.8),\n (\"Scrubs\", 2001, 8.4),\nFiles that were modified:\npytest-annotate.py\n```", "```py\ndef test_main_window(qtbot):\n    widget = MainWindow()\n    qtbot.addWidget(widget)\n\n    qtbot.mouseClick(widget.about_button, QtCore.Qt.LeftButton)\n    qtbot.waitUntil(widget.about_box.isVisible)\n    assert widget.about_box.text() == 'This is a GUI App'\n```", "```py\ntests/\n    test_series.py\n```", "```py\ntests/\n test_series/\n series.csv\n    test_series.py\n```", "```py\ndef test_ratings(datadir):\n    with open(datadir / \"series.csv\", \"r\", newline=\"\") as f:\n        data = list(csv.reader(f))\n    ...\n```", "```py\ndef test_obtain_series_asserts():\n    data = obtain_series()\n    assert data[0][\"name\"] == \"The Office\"\n    assert data[0][\"year\"] == 2005\n    assert data[0][\"rating\"] == 8.8\n    assert data[1][\"name\"] == \"Scrubs\"\n    assert data[1][\"year\"] == 2001\n    ...\n```", "```py\ndef test_obtain_series(data_regression):\n    data = obtain_series()\n    data_regression.check(data)\n```", "```py\n...\nE Failed: File not found in data directory, created:\nE - CH5\\test_series\\test_obtain_series.yml\n```", "```py\n- name: The Office\n  rating: 8.8\n  year: 2005\n- name: Scrubs\n  rating: 8.4\n  year: 2001\n- name: IT Crowd\n  rating: 8.5\n  year: 2006\n- name: Parks and Recreation\n  rating: 8.6\n  year: 2009\n- name: Seinfeld\n  rating: 8.9\n  year: 1989\n```", "```py\nE AssertionError: FILES DIFFER:\nE ---\nE\nE +++\nE\nE @@ -13,3 +13,6 @@\nE\nE  - name: Seinfeld\nE    rating: 8.9\nE    year: 1989\nE +- name: Rock and Morty\nE +  rating: 9.3\nE +  year: 2013\n```", "```py\nE Failed: Files differ and --force-regen set, regenerating file at:\nE - CH5\\test_series\\test_obtain_series.yml\n```"]