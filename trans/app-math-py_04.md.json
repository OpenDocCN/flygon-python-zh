["```py\n          python3.8 -m pip install pymc3 \n\n```", "```py\nrng = np.random.default_rng(12345) \n# changing seed for repeatability\n```", "```py\ndata = np.arange(15)\nprobabilities = np.array(\n    [0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05, 0.025,\n    0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025]\n)\n```", "```py\nassert round(sum(probabilities), 10) == 1.0, \\\n    \"Probabilities must sum to 1\"\n```", "```py\nselected = rng.choice(data, p=probabilities, replace=True)\n# 0\n```", "```py\nselected_array = rng.choice(data, p=probabilities, replace=True, size=(5, 5))\n#array([[ 1, 6, 4, 1, 1],\n#       [ 2, 0, 4, 12, 0],\n#       [12, 4, 0, 1, 10],\n#       [ 4, 1, 5, 0, 0],\n#       [ 0, 1, 1, 0, 7]])\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345) # changing seed for reproducibility\n```", "```py\nrandom_floats = rng.random(size=(5, 5))\n# array([[0.22733602, 0.31675834, 0.79736546, 0.67625467, 0.39110955],\n#        [0.33281393, 0.59830875, 0.18673419, 0.67275604, 0.94180287],\n#        [0.24824571, 0.94888115, 0.66723745, 0.09589794, 0.44183967],\n#        [0.88647992, 0.6974535 , 0.32647286, 0.73392816, 0.22013496],\n#        [0.08159457, 0.1598956 , 0.34010018, 0.46519315, 0.26642103]])\n```", "```py\nrandom_ints = rng.integers(1, 20, endpoint=True, size=10)\n# array([12, 17, 10, 4, 1, 3, 2, 2, 3, 12])\n```", "```py\ndist = rng.random(size=1000)\n```", "```py\nfig, ax = plt.subplots()\nax.hist(dist)\nax.set_title(\"Histogram of random numbers\")\nax.set_xlabel(\"Value\")\nax.set_ylabel(\"Density\")\n```", "```py\nfrom numpy import random\n```", "```py\nseed_seq = random.SeedSequence()\n```", "```py\nprint(seed_seq.entropy)\n\u200b\u200b# 9219863422733683567749127389169034574\n```", "```py\nbit_gen = random.MT19937(seed_seq)\n```", "```py\nrng = random.Generator(bit_gen)\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\nmu = 5.0 # mean value\nsigma = 3.0 # standard deviation\nrands = rng.normal(loc=mu, scale=sigma, size=10000)\n```", "```py\nfig, ax = plt.subplots()\nax.hist(rands, bins=20)\nax.set_title(\"Histogram of normally distributed data\")\nax.set_xlabel(\"Value\")\nax.set_ylabel(\"Density\")\n```", "```py\ndef normal_dist_curve(x):\n    return 10000*np.exp(-0.5*((x-\n        mu)/sigma)**2)/(sigma*np.sqrt(2*np.pi))\n```", "```py\nx_range = np.linspace(-5, 15)\ny = normal_dist_curve(x_range)\nax.plot(x_range, y, \"k--\")\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n\n```", "```py\nrate = 4.0\ninter_arrival_times = rng.exponential(scale=1./rate, size=50)\n```", "```py\narrivals = np.add.accumulate(inter_arrival_times)\ncount = np.arange(50)\n```", "```py\nfig1, ax1 = plt.subplots()\nax1.step(arrivals, count, where=\"post\")\nax1.set_xlabel(\"Time\")\nax1.set_ylabel(\"Number of arrivals\")\nax1.set_title(\"Arrivals over time\")\n```", "```py\nfrom scipy.special import factorial\nN = np.arange(15)\ndef probability(events, time=1, param=rate):\n    return ((param*time)**events/factorial(events))*np.exp(-\n       param*time)\n```", "```py\nfig2, ax2 = plt.subplots()\nax2.plot(N, probability(N), \"k\", label=\"True distribution\")\nax2.set_xlabel(\"Number of arrivals in 1 time unit\")\nax2.set_ylabel(\"Probability\")\nax2.set_title(\"Probability distribution\")\n```", "```py\nestimated_scale = np.mean(inter_arrival_times)\nestimated_rate = 1.0/estimated_scale\n```", "```py\nax2.plot(N, probability(N, param=estimated_rate), \"k--\", label=\"Estimated distribution\")\nax2.legend()\n```", "```py\nfrom scipy.stats import beta as beta_dist\nbeta_pdf = beta_dist.pdf\n```", "```py\nprior_alpha = 25\nprior_beta = 75\nargs = (prior_alpha, prior_beta)\nprior_over_33, err = sp.integrate.quad(beta_pdf, 0.33, 1, args=args)\nprint(\"Prior probability\", prior_over_33)\n# 0.037830787030165056\n```", "```py\nobserved_successes = 122\nobserved_failures = 257\n```", "```py\nposterior_alpha = prior_alpha + observed_successes\nposterior_beta = prior_beta + observed_failures\n```", "```py\nargs = (posterior_alpha, posterior_beta)\nposterior_over_33, err2 = sp.integrate.quad(beta_pdf, 0.33, 1,\n   args=args)\nprint(\"Posterior probability\", posterior_over_33)\n# 0.13686193416281017\n```", "```py\np = np.linspace(0, 1, 500)\nprior_dist = beta_pdf(p, prior_alpha, prior_beta)\nposterior_dist = beta_pdf(p, posterior_alpha, posterior_beta)\n```", "```py\nfig, ax = plt.subplots()\nax.plot(p, prior_dist, \"k--\", label=\"Prior\")\nax.plot(p, posterior_dist, \"k\", label=\"Posterior\")\nax.legend()\nax.set_xlabel(\"Success rate\")\nax.set_ylabel(\"Density\")\nax.set_title(\"Prior and posterior distributions for success rate\")\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\ndef underlying(x, params):\n    return params[0]*x**2 + params[1]*x + params[2]\n```", "```py\nsize = 100\ntrue_params = [2, -7, 6]\n```", "```py\nx_vals = np.linspace(-5, 5, size)\nraw_model = underlying(x_vals, true_params)\nnoise = rng.normal(loc=0.0, scale=10.0, size=size)\nsample = raw_model + noise\n```", "```py\nfig1, ax1 = plt.subplots()\nax1.scatter(x_vals, sample, label=\"Sampled data\")\nax1.plot(x_vals, raw_model, \"k--\", label=\"Underlying model\")\nax1.set_title(\"Sampled data\")\nax1.set_xlabel(\"x\")\nax1.set_ylabel(\"y\")\n```", "```py\nimport pymc3 as pm\n```", "```py\nwith pm.Model() as model:\n    params = pm.Normal(\"params\", mu=1, sigma=1, shape=3)\n```", "```py\ny = underlying(x_vals, params)\ny_obs = pm.Normal(\"y_obs\", mu=y, sigma=2, observed=sample)\n```", "```py\ntrace = pm.sample(cores=4)\n```", "```py\nfig2, axs2 = plt.subplots(1, 3, tight_layout=True)\npm.plot_posterior(trace, ax=axs2)\n```", "```py\nestimated_params = trace[\"params\"].mean(axis=0)\nprint(\"Estimated parameters\", estimated_params)\n# Estimated parameters [ 2.03213559 -7.0957161 5.27045299]\n```", "```py\nestimated = underlying(x_vals, estimated_params)\nfig3, ax3 = plt.subplots()\nax3.plot(x_vals, raw_model, \"k\", label=\"True model\")\nax3.plot(x_vals, estimated, \"k--\", label=\"Estimated model\")\nax3.set_title(\"Plot of true and estimated models\")\nax3.set_xlabel(\"x\")\nax3.set_ylabel(\"y\")\nax3.legend()\n```", "```py\nimport numpy as np\nfrom numpy.random import default_rng\n\ndef estimate_pi(n_points=10000):\n    rng = default_rng()\n    points = rng.uniform(-1, 1, size=(2, n_points))\n    inside = np.less(points[0, :]**2 + points[1, :]**2, 1)\n    return 4.0*inside.sum() / n_points\n```", "```py\nestimate_pi()  # 3.14224\n```", "```py\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\nfrom statistics import mean\n\nwith ProcessPoolExecutor() as pool:\n    fts = [pool.submit(estimate_pi) for _ in range(100)]\n    results = list(ft.result() for ft in as_completed(fts))\n\nprint(mean(results))\n```"]