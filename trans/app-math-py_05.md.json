["```py\n          python3.8 -m pip install networkx\n\n```", "```py\nimport networkx as nx\n```", "```py\nimport networkx as nx\n```", "```py\nG = nx.Graph()\n```", "```py\nG.add_node(1)\nG.add_node(2)\n```", "```py\nG.add_nodes_from([3, 4, 5, 6])\n```", "```py\nG.add_edge(1, 2)  # edge from 1 to 2\nG.add_edges_from([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (5, 6)])\n```", "```py\nprint(G.nodes)\nprint(G.edges)\n# [1, 2, 3, 4, 5, 6]\n# [(1, 2), (2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (5, 6)]\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\nG = nx.Graph()\n\nG.add_nodes_from(range(1, 7))\nG.add_edges_from([\n    (1, 2), (2, 3), (3, 4), (3, 5), \n    (3, 6), (4, 5), (5, 6)\n])\n```", "```py\nfig, ax = plt.subplots()\n```", "```py\nlayout = nx.shell_layout(G)\n```", "```py\nnx.draw(G, ax=ax, pos=layout, with_labels=True)\nax.set_title(\"Simple network drawing\")\n```", "```py\nG = nx.Graph()\nG.add_nodes_from(range(10))\nG.add_edges_from([\n    (0, 1), (1, 2), (2, 3), (2, 4), \n    (2, 5), (3, 4), (4, 5), (6, 7),\n    (6, 8), (6, 9), (7, 8), (8, 9)\n])\n```", "```py\nfig, ax = plt.subplots()\nnx.draw_circular(G, ax=ax, with_labels=True)\nax.set_title(\"Simple network\")\n```", "```py\nprint(nx.info(G))\n# Name: \n# Type: Graph\n# Number of nodes: 10\n# Number of edges: 12\n# Average degree: 2.4000\n```", "```py\nfor i in [0, 2, 7]:\n    degree = G.degree[i]\n    print(f\"Degree of {i}: {degree}\")\n# Degree of 0: 1\n# Degree of 2: 4\n# Degree of 7: 2\n```", "```py\ncomponents = list(nx.connected_components(G))\nprint(components)\n# [{0, 1, 2, 3, 4, 5}, {8, 9, 6, 7}]\n```", "```py\ndensity = nx.density(G)\nprint(\"Density\", density)\n# Density 0.26666666666666666\n```", "```py\nis_planar, _ = nx.check_planarity(G)\nprint(\"Is planar\", is_planar)\n# Is planar True\n```", "```py\nG = nx.dense_gnm_random_graph(5, 5, seed=12345)\n```", "```py\nmatrix = nx.adjacency_matrix(G).todense()\nprint(matrix)\n# [[0 0 1 0 0]\n#  [0 0 1 1 0]\n#  [1 1 0 0 1]\n#  [0 1 0 0 1]\n#  [0 0 1 1 0]]\n```", "```py\npaths_len_4 = np.linalg.matrix_power(matrix, 4)\nprint(paths_len_4)\n# [[ 3 5  0  0 5]\n#  [ 5 9  0  0 9]\n#  [ 0 0 13 10 0]\n#  [ 0 0 10  8 0]\n#  [ 5 9  0  0 9]]\n```", "```py\nG = nx.DiGraph()\n```", "```py\nG.add_nodes_from(range(5))\n```", "```py\nG.add_edge(0, 1, weight=1.0)\nG.add_weighted_edges_from([\n    (1, 2, 0.5), (1, 3, 2.0), (2, 3, 0.3), (3, 2, 0.3),\n    (2, 4, 1.2), (3, 4, 0.8)\n])\n```", "```py\nfig, ax = plt.subplots()\npos = {0: (-1, 0), 1: (0, 0), 2: (1, 1), 3: (1, -1), 4: (2, 0)}\nnx.draw(G, ax=ax, pos=pos, with_labels=True)\nax.set_title(\"Weighted, directed network\")\n```", "```py\nadj_mat = nx.adjacency_matrix(G).todense()\nprint(adj_mat)\n# [[0\\. 1\\. 0\\. 0\\. 0\\. ]\n# [0\\. 0\\. 0.5 2\\. 0\\. ]\n# [0\\. 0\\. 0\\. 0.3 1.2]\n# [0\\. 0\\. 0.3 0\\. 0.8]\n# [0\\. 0\\. 0\\. 0\\. 0\\. ]]\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345) # seed for reproducibility\n```", "```py\nG = nx.gnm_random_graph(10, 17, seed=12345)\n```", "```py\nfig, ax = plt.subplots()\nnx.draw_circular(G, ax=ax, with_labels=True)\nax.set_title(\"Random network for shortest path finding\")\n```", "```py\nfor u, v in G.edges:\n    G.edges[u, v][\"weight\"] = rng.integers(5, 15)\n```", "```py\npath = nx.shortest_path(G, 7, 9, weight=\"weight\")\nprint(path)\n# [7, 5, 2, 9]\n```", "```py\nlength = nx.shortest_path_length(G, 7, 9, weight=\"weight\")\nprint(\"Length\", length)\n# Length 32\n```", "```py\nG = nx.Graph()\ncomplete_part = nx.complete_graph(4)\ncycle_part = nx.cycle_graph(range(4, 9))\nG.update(complete_part)\nG.update(cycle_part)\nG.add_edges_from([(0, 8), (3, 4)])\n```", "```py\nfig, ax = plt.subplots()\nnx.draw_circular(G, ax=ax, with_labels=True)\nax.set_title(\"Network with different clustering behavior\")\n```", "```py\ncluster_coeffs = nx.clustering(G)\n```", "```py\nfor i in [0, 2, 6]:\n    print(f\"Node {i}, clustering {cluster_coeffs[i]}\")\n# Node 0, clustering 0.5\n# Node 2, clustering 1.0\n# Node 6, clustering 0\n```", "```py\nav_clustering = nx.average_clustering(G)\nprint(av_clustering)\n# 0.3333333333333333\n```", "```py\nG = nx.complete_graph(3)\nG.add_nodes_from(range(3, 7))\nG.add_edges_from([\n    (2, 3), (2, 4), (2, 6), (0, 3), (0, 6), (1, 6),\n    (1, 5), (2, 5), (4, 5)\n])\n```", "```py\nfig, ax = plt.subplots()\nnx.draw_circular(G, ax=ax, with_labels=True)\nax.set_title(\"Scheduling network\")\n```", "```py\ncoloring = nx.greedy_color(G)\nprint(\"Coloring\", coloring)\n# Coloring {2: 0, 0: 1, 1: 2, 5: 1, 6: 3, 3: 2, 4: 2}\n```", "```py\ndifferent_colors = set(coloring.values())\nprint(\"Different colors\", different_colors)\n# Different colors {0, 1, 2, 3}\n```", "```py\nG = nx.gnm_random_graph(15, 22, seed=12345)\n```", "```py\nfig, ax = plt.subplots()\npos = nx.circular_layout(G)\nnx.draw(G, pos=pos, ax=ax, with_labels=True)\nax.set_title(\"Network with minimum spanning tree overlaid\")\n```", "```py\nmin_span_tree = nx.minimum_spanning_tree(G)\nprint(list(min_span_tree.edges))\n# [(0, 13), (0, 7), (0, 5), (1, 13), (1, 11),\n#   (2, 5), (2, 9), (2, 8), (2, 3), (2, 12),\n#   (3, 4), (4, 6), (5, 14), (8, 10)]\n```", "```py\nnx.draw_networkx_edges(min_span_tree, pos=pos, ax=ax, width=1.5,\n   edge_color=\"r\")\n```", "```py\ndominating_set = nx.dominating_set(G)\nprint(\"Dominating set\", dominating_set)\n# Dominating set {0, 1, 2, 4, 10, 14}\n```"]