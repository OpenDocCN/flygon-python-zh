["```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Basic canvas\")\n\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.label = tk.Label(self)\n        self.canvas.bind(\"<Motion>\", self.mouse_motion)\n\n        self.canvas.pack()\n        self.label.pack()\n\n    def mouse_motion(self, event):\n        x, y = event.x, event.y\n        text = \"Mouse position: ({}, {})\".format(x, y)\n        self.label.config(text=text)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n    def __init__(self):\n        # ...\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.label = tk.Label(self)\n        self.canvas.bind(\"<Motion>\", self.mouse_motion)\n```", "```py\n    def mouse_motion(self, event):\n        x, y = event.x, event.y\n text = \"Mouse position: ({}, {})\".format(x, y)\n        self.label.config(text=text)\n```", "```py\nimport tkinter as tk\n\nclass LineForm(tk.LabelFrame):\n    # ...\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Basic canvas\")\n\n        self.line_start = None\n        self.form = LineForm(self)\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.canvas.bind(\"<Button-1>\", self.draw)\n\n        self.form.pack(side=tk.LEFT, padx=10, pady=10)\n        self.canvas.pack(side=tk.LEFT)\n\n    def draw(self, event):\n        x, y = event.x, event.y\n        if not self.line_start:\n            self.line_start = (x, y)\n        else:\n            x_origin, y_origin = self.line_start\n            self.line_start = None\n            line = (x_origin, y_origin, x, y)\n            arrow = self.form.get_arrow()\n            color = self.form.get_color()\n            width = self.form.get_width()\n            self.canvas.create_line(*line, arrow=arrow,\n                                    fill=color, width=width)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n    def __init__(self):\n        # ...\n\n        self.line_start = None\n        self.form = LineForm(self)\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.canvas.bind(\"<Button-1>\", self.draw)\n```", "```py\n    def draw(self, event):\n x, y = event.x, event.y\n if not self.line_start:\n self.line_start = (x, y)\n        else:\n            # ...\n```", "```py\n    def draw(self, event):\n        x, y = event.x, event.y\n        if not self.line_start:\n            # ...\n        else:\n            x_origin, y_origin = self.line_start\n self.line_start = None\n line = (x_origin, y_origin, x, y)\n self.canvas.create_line(*line)\n text = \"Line drawn from ({}, {}) to ({}, {})\".format(*line)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Canvas text items\")\n        self.geometry(\"300x100\")\n\n        self.var = tk.StringVar()\n        self.entry = tk.Entry(self, textvariable=self.var)\n        self.canvas = tk.Canvas(self, bg=\"white\")\n\n        self.entry.pack(pady=5)\n        self.canvas.pack()\n        self.update()\n\n        w, h = self.canvas.winfo_width(), self.canvas.winfo_height()\n        options = { \"font\": \"courier\", \"fill\": \"blue\",\n                    \"activefill\": \"red\" }\n        self.text_id = self.canvas.create_text((w/2, h/2), **options)\n        self.var.trace(\"w\", self.write_text)\n\n    def write_text(self, *args):\n        self.canvas.itemconfig(self.text_id, text=self.var.get())\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n        self.var = tk.StringVar()\n        self.entry = tk.Entry(self, textvariable=self.var)\n        self.canvas = tk.Canvas(self, bg=\"white\")\n```", "```py\n        self.entry.pack(pady=5)\n        self.canvas.pack()\n        self.update()\n```", "```py\n        w, h = self.canvas.winfo_width(), self.canvas.winfo_height()\n        options = { \"font\": \"courier\", \"fill\": \"blue\",\n                    \"activefill\": \"red\" }\n        self.text_id = self.canvas.create_text((w/2, h/2), **options)\n        self.var.trace(\"w\", self.write_text)\n```", "```py\n    def write_text(self, *args):\n        self.canvas.itemconfig(self.text_id, text=self.var.get())\n```", "```py\n        # ...\n        options = { \"font\": \"courier\", \"fill\": \"blue\",\n                    \"activefill\": \"red\", \"anchor\": tk.NW }\n        self.text_id = self.canvas.create_text((0, 0), **options)\n```", "```py\n        # ...\n        options = { \"font\": \"courier\", \"fill\": \"blue\",\n                    \"activefill\": \"red\", \"width\": 70 }\n        self.text_id = self.canvas.create_text((w/2, h/2), **options)\n```", "```py\nimport tkinter as tk\nfrom functools import partial\n\nclass App(tk.Tk):\n    shapes = (\"rectangle\", \"oval\", \"arc\")\n    def __init__(self):\n        super().__init__()\n        self.title(\"Drawing standard items\")\n\n        self.start = None\n        self.shape = None\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        frame = tk.Frame(self)\n        for shape in self.shapes:\n            btn = tk.Button(frame, text=shape.capitalize())\n            btn.config(command=partial(self.set_selection, btn, shape))\n            btn.pack(side=tk.LEFT, expand=True, fill=tk.BOTH)\n\n        self.canvas.bind(\"<Button-1>\", self.draw_item)\n        self.canvas.pack()\n        frame.pack(fill=tk.BOTH)\n\n    def set_selection(self, widget, shape):\n        for w in widget.master.winfo_children():\n            w.config(relief=tk.RAISED)\n        widget.config(relief=tk.SUNKEN)\n        self.shape = shape\n\n    def draw_item(self, event):\n        x, y = event.x, event.y\n        if not self.start:\n            self.start = (x, y)\n        else:\n            x_origin, y_origin = self.start\n            self.start = None\n            bbox = (x_origin, y_origin, x, y)\n            if self.shape == \"rectangle\":\n                self.canvas.create_rectangle(*bbox, fill=\"blue\",\n                                             activefill=\"yellow\")\n            elif self.shape == \"oval\":\n                self.canvas.create_oval(*bbox, fill=\"red\",\n                                        activefill=\"yellow\")\n            elif self.shape == \"arc\":\n                self.canvas.create_arc(*bbox, fill=\"green\",\n                                       activefill=\"yellow\")\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n        for shape in self.shapes:\n            btn = tk.Button(frame, text=shape.capitalize())\n            btn.config(command=partial(self.set_selection, btn, shape))\n            btn.pack(side=tk.LEFT, expand=True, fill=tk.BOTH)\n```", "```py\n    def set_selection(self, widget, shape):\n        for w in widget.master.winfo_children():\n            w.config(relief=tk.RAISED)\n        widget.config(relief=tk.SUNKEN)\n        self.shape = shape\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Finding canvas items\")\n\n        self.current = None\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.canvas.bind(\"<Motion>\", self.mouse_motion)\n        self.canvas.pack()\n\n        self.update()\n        w = self.canvas.winfo_width()\n        h = self.canvas.winfo_height()\n        positions = [(60, 60), (w-60, 60), (60, h-60), (w-60, h-60)]\n        for x, y in positions:\n            self.canvas.create_rectangle(x-10, y-10, x+10, y+10,\n                                         fill=\"blue\")\n\n    def mouse_motion(self, event):\n        self.canvas.itemconfig(self.current, fill=\"blue\")\n        self.current = self.canvas.find_closest(event.x, event.y)\n        self.canvas.itemconfig(self.current, fill=\"yellow\")\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n        self.current = None\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.canvas.bind(\"<Motion>\", self.mouse_motion)\n        self.canvas.pack()\n```", "```py\n        self.update()\n        w = self.canvas.winfo_width()\n        h = self.canvas.winfo_height()\n        positions = [(60, 60), (w-60, 60), (60, h-60), (w-60, h-60)]\n        for x, y in positions:\n            self.canvas.create_rectangle(x-10, y-10, x+10, y+10,\n                                         fill=\"blue\")\n```", "```py\n    def mouse_motion(self, event):\n        self.canvas.itemconfig(self.current, fill=\"blue\")\n        self.current = self.canvas.find_closest(event.x, event.y)\n        self.canvas.itemconfig(self.current, fill=\"yellow\")\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Moving canvas items\")\n\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.canvas.pack()\n        self.update()\n        self.width = self.canvas.winfo_width()\n        self.height = self.canvas.winfo_height()\n\n        self.item = self.canvas.create_rectangle(30, 30, 60, 60,\n                                                 fill=\"blue\")\n        self.pressed_keys = {}\n        self.bind(\"<KeyPress>\", self.key_press)\n        self.bind(\"<KeyRelease>\", self.key_release)\n        self.process_movements()\n\n    def key_press(self, event):\n        self.pressed_keys[event.keysym] = True\n\n    def key_release(self, event):\n        self.pressed_keys.pop(event.keysym, None)\n\n    def process_movements(self):\n        off_x, off_y = 0, 0\n        speed = 3\n        if 'Right' in self.pressed_keys:\n            off_x += speed\n        if 'Left' in self.pressed_keys:\n            off_x -= speed\n        if 'Down' in self.pressed_keys:\n            off_y += speed\n        if 'Up' in self.pressed_keys:\n            off_y -= speed\n\n        x0, y0, x1, y1 = self.canvas.coords(self.item)\n        pos_x = x0 + (x1 - x0) / 2 + off_x\n        pos_y = y0 + (y1 - y0) / 2 + off_y\n        if 0 <= pos_x <= self.width and 0 <= pos_y <= self.height:\n            self.canvas.move(self.item, off_x, off_y)\n\n        self.after(10, self.process_movements)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n    def __init__(self):\n        # ...\n        self.pressed_keys = {}\n        self.bind(\"<KeyPress>\", self.key_press)\n        self.bind(\"<KeyRelease>\", self.key_release)\n\n    def key_press(self, event):\n        self.pressed_keys[event.keysym] = True\n\n    def key_release(self, event):\n        self.pressed_keys.pop(event.keysym, None)\n```", "```py\n    def process_movements(self):\n        off_x, off_y = 0, 0\n        speed = 3\n        if 'Right' in self.pressed_keys:\n            off_x += speed\n        if 'Left' in self.pressed_keys:\n            off_x -= speed\n        if 'Down' in self.pressed_keys:\n            off_y += speed\n        if 'Up' in self.pressed_keys:\n            off_y -= speed\n```", "```py\n        x0, y0, x1, y1 = self.canvas.coords(self.item)\n        pos_x = x0 + (x1 - x0) / 2 + off_x\n        pos_y = y0 + (y1 - y0) / 2 + off_y\n```", "```py\n        if 0 <= pos_x <= self.width and 0 <= pos_y <= self.height:\n            self.canvas.move(self.item, off_x, off_y)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Detecting collisions between items\")\n\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.canvas.pack()\n        self.update()\n self.width = w = self.canvas.winfo_width()\n self.height = h = self.canvas.winfo_height()\n\n pos = (w/2 - 15, h/2 - 15, w/2 + 15, h/2 + 15)\n self.item = self.canvas.create_rectangle(*pos, fill=\"blue\") \n positions = [(60, 60), (w-60, 60), (60, h-60), (w-60, h-60)]\n for x, y in positions:\n self.canvas.create_rectangle(x-10, y-10, x+10, y+10,\n fill=\"green\")\n\n        self.pressed_keys = {}\n        self.bind(\"<KeyPress>\", self.key_press)\n        self.bind(\"<KeyRelease>\", self.key_release)\n        self.process_movements()\n\n    def key_press(self, event):\n        self.pressed_keys[event.keysym] = True\n\n    def key_release(self, event):\n        self.pressed_keys.pop(event.keysym, None)\n\n    def process_movements(self):\n all_items = self.canvas.find_all()\n for item in filter(lambda i: i is not self.item, all_items):\n self.canvas.itemconfig(item, fill=\"green\")\n\n x0, y0, x1, y1 = self.canvas.coords(self.item)\n items = self.canvas.find_overlapping(x0, y0, x1, y1)\n for item in filter(lambda i: i is not self.item, items):\n self.canvas.itemconfig(item, fill=\"yellow\")\n\n        off_x, off_y = 0, 0\n        speed = 3\n        if 'Right' in self.pressed_keys:\n            off_x += speed\n        if 'Left' in self.pressed_keys:\n            off_x -= speed\n        if 'Down' in self.pressed_keys:\n            off_y += speed\n        if 'Up' in self.pressed_keys:\n            off_y -= speed\n\n        pos_x = x0 + (x1 - x0) / 2 + off_x\n        pos_y = y0 + (y1 - y0) / 2 + off_y\n        if 0 <= pos_x <= self.width and 0 <= pos_y <= self.height:\n            self.canvas.move(self.item, off_x, off_y)\n\n        self.after(10, self.process_movements)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n    def process_movements(self):\n all_items = self.canvas.find_all()\n for item in filter(lambda i: i != self.item, all_items):\n self.canvas.itemconfig(item, fill=\"green\")\n```", "```py\n    def process_movements(self):\n        # ...\n\n x0, y0, x1, y1 = self.canvas.coords(self.item)\n items = self.canvas.find_overlapping(x0, y0, x1, y1)\n for item in filter(lambda i: i != self.item, items):\n self.canvas.itemconfig(item, fill=\"yellow\")\n```", "```py\nimport random\nimport tkinter as tk\n\nclass App(tk.Tk):\n    colors = (\"red\", \"yellow\", \"green\", \"blue\", \"orange\")\n\n    def __init__(self):\n        super().__init__()\n        self.title(\"Removing canvas items\")\n\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        frame = tk.Frame(self)\n        generate_btn = tk.Button(frame, text=\"Generate items\",\n                                 command=self.generate_items)\n        clear_btn = tk.Button(frame, text=\"Clear items\",\n                              command=self.clear_items)\n\n        self.canvas.pack()\n        frame.pack(fill=tk.BOTH)\n        generate_btn.pack(side=tk.LEFT, expand=True, fill=tk.BOTH)\n        clear_btn.pack(side=tk.LEFT, expand=True, fill=tk.BOTH)\n\n        self.update()\n        self.width = self.canvas.winfo_width()\n        self.height = self.canvas.winfo_height()\n\n        self.canvas.bind(\"<Button-1>\", self.on_click)\n        self.generate_items()\n\n    def on_click(self, event):\n        item = self.canvas.find_withtag(tk.CURRENT)\n        self.canvas.delete(item)\n\n    def generate_items(self):\n        self.clear_items()\n        for _ in range(10):\n            x = random.randint(0, self.width)\n            y = random.randint(0, self.height)\n            color = random.choice(self.colors)\n            self.canvas.create_oval(x, y, x + 20, y + 20, fill=color)\n\n    def clear_items(self):\n        self.canvas.delete(tk.ALL)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n    def on_click(self, event):\n        item = self.canvas.find_withtag(tk.CURRENT)\n        self.canvas.delete(item)\n```", "```py\n    def clear_items(self):\n        self.canvas.delete(tk.ALL)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Drag and drop\")\n\n        self.dnd_item = None\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.canvas.pack()\n\n        self.canvas.create_rectangle(30, 30, 60, 60, fill=\"green\",\n                                     tags=\"draggable\")\n        self.canvas.create_oval(120, 120, 150, 150, fill=\"red\",\n                                tags=\"draggable\")\n        self.canvas.tag_bind(\"draggable\", \"<ButtonPress-1>\",\n                             self.button_press)\n        self.canvas.tag_bind(\"draggable\", \"<Button1-Motion>\",\n                             self.button_motion)\n\n    def button_press(self, event):\n        item = self.canvas.find_withtag(tk.CURRENT)\n        self.dnd_item = (item, event.x, event.y)\n\n    def button_motion(self, event):\n        x, y = event.x, event.y\n        item, x0, y0 = self.dnd_item\n        self.canvas.move(item, x - x0, y - y0)\n        self.dnd_item = (item, x, y)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n        self.canvas.tag_bind(\"draggable\", \"<ButtonPress-1>\",\n                             self.button_press)\n        self.canvas.tag_bind(\"draggable\", \"<Button1-Motion>\",\n                             self.button_motion)\n```", "```py\n    def button_press(self, event):\n        item = self.canvas.find_withtag(tk.CURRENT)\n        self.dnd_item = (item, event.x, event.y)\n```", "```py\n    def button_motion(self, event):\n        x, y = event.x, event.y\n        item, x0, y0 = self.dnd_item\n        self.canvas.move(item, x - x0, y - y0)\n        self.dnd_item = (item, x, y)\n```", "```py\nfinal_x, final_y = pos_x + off_x, pos_y + off_y\nif 0 <= final_x <= canvas_width and 0 <= final_y <= canvas_height:\n     canvas.move(item, off_x, off_y)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Basic canvas\")\n\n        self.line_start = None\n        self.form = LineForm(self)\n        self.render_btn = tk.Button(self, text=\"Render canvas\",\n                                    command=self.render_canvas)\n        self.canvas = tk.Canvas(self, bg=\"white\")\n        self.canvas.bind(\"<Button-1>\", self.draw)\n\n        self.form.grid(row=0, column=0, padx=10, pady=10)\n        self.render_btn.grid(row=1, column=0)\n        self.canvas.grid(row=0, column=1, rowspan=2)\n\n    def draw(self, event):\n        # ...\n\n    def render_canvas(self):\n        self.canvas.postscript(file=\"output.ps\", colormode=\"color\")\n```", "```py\n    def render_canvas(self):\n        self.canvas.postscript(file=\"output.ps\", colormode=\"color\")\n```", "```py\nimport os\nimport subprocess\nimport tkinter as tk\n\nclass App(tk.Tk):\n    # ...\n\n    def render_canvas(self):\n        output_filename = \"output.ps\"\n        self.canvas.postscript(file=output_filename, colormode=\"color\")\n process = subprocess.run([\"ps2pdf\", output_filename, \"output.pdf\"],\n shell=True)\n os.remove(output_filename)\n```"]