- en: Getting Started with Tkinter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Tkinter
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Structuring a Tkinter application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Tkinter应用程序
- en: Working with buttons
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用按钮
- en: Creating text entries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文本输入
- en: Tracing text changes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪文本更改
- en: Validating a text entry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证文本输入
- en: Selecting numerical values
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择数值
- en: Creating selections with radio buttons
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单选按钮创建选择
- en: Implementing switches with checkboxes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用复选框实现开关
- en: Displaying a list of items
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示项目列表
- en: Handling mouse and keyboard events
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理鼠标和键盘事件
- en: Setting the main window's icon, title, and size
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置主窗口的图标、标题和大小
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Thanks to its clear syntax and the wide ecosystem of libraries and tools, Python
    has become a popular and general-purpose programming language. From web development
    to **Natural Language Processing** (**NLP**), you can easily find an open source
    library that fits the need of your application domain, and in the last instance,
    you can always use any of the modules included in the Python standard library.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其清晰的语法和广泛的库和工具生态系统，Python已经成为一种流行的通用编程语言。从Web开发到自然语言处理（NLP），您可以轻松找到一个符合您应用领域需求的开源库，最后，您总是可以使用Python标准库中包含的任何模块。
- en: 'The standard library follows the "batteries-included" philosophy, which means
    that it contains a large collection of utilities: regular expressions, mathematical
    functions, networking, and so on. The standard **Graphical User Interface** (**GUI**)
    package of this library is **Tkinter**, a thin object-oriented layer on top of
    Tcl/Tk.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库遵循“电池包含”哲学，这意味着它包含了大量的实用程序：正则表达式、数学函数、网络等。该库的标准图形用户界面（GUI）包是Tkinter，它是Tcl/Tk的一个薄的面向对象的层。
- en: Starting from Python 3, the `Tkinter` module was renamed to `tkinter` (with
    a lowercase **t**). It also affects to the `tkinter.ttk` and `tkinter.tix` extensions.
    We will dive into the `tkinter.ttk` module in the last chapter of this book, since
    the `tkinter.tix` module is officially deprecated.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从Python 3开始，`Tkinter`模块被重命名为`tkinter`（小写的t）。它也影响到`tkinter.ttk`和`tkinter.tix`扩展。我们将在本书的最后一章深入探讨`tkinter.ttk`模块，因为`tkinter.tix`模块已经正式弃用。
- en: In this chapter, we will explore several patterns for some basic classes of
    the `tkinter` module and some methods that are common to all widget subclasses.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索`tkinter`模块的一些基本类的几种模式以及所有小部件子类共有的一些方法。
- en: Structuring a Tkinter application
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Tkinter应用程序
- en: One of the main advantages of making applications with Tkinter is that it is
    very easy to set up a basic GUI with a script of a few lines. As the programs
    get more complex, it becomes more difficult to separate logically each part, so
    an organized structure will help us to keep our code clean.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Tkinter制作应用程序的主要优势之一是，使用几行脚本非常容易设置基本GUI。随着程序变得更加复杂，逻辑上分离每个部分变得更加困难，因此有组织的结构将帮助我们保持代码整洁。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will take the following program as an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以以下程序为例：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It creates a main window with a button that prints `Hello, Tkinter!` in the
    console each time it is clicked. The button is placed with a padding of 120px
    in the horizontal axis and 30px in the vertical axis. The last statement starts
    the main loop, which processes user events and updates the GUI until the main
    window is destroyed:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建一个带有按钮的主窗口，每次点击按钮时都会在控制台中打印`Hello, Tkinter!`。按钮在水平轴上以120px的填充和垂直轴上以30px的填充放置。最后一条语句启动主循环，处理用户事件并更新GUI，直到主窗口被销毁：
- en: '![](images/0b2f562d-e318-40c4-9a0c-2190012897ce.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](images/0b2f562d-e318-40c4-9a0c-2190012897ce.png)'
- en: You can execute the program and verify that it is working as expected. However,
    all our variables are defined in the global namespace, and the more widgets you
    add, the more difficult it becomes to reason about the parts where they are used.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以执行该程序并验证它是否按预期工作。但是，所有我们的变量都是在全局命名空间中定义的，添加的小部件越多，理清它们的使用部分就变得越困难。
- en: Wildcard imports (`from ... import *`) are strongly discouraged in production
    code because they pollute your global namespace—we only used them here to illustrate
    an anti-pattern that can be commonly seen in online examples.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产代码中，强烈不建议使用通配符导入（`from ... import *`），因为它们会污染全局命名空间——我们只是在这里使用它们来说明一个常见的反模式，这在在线示例中经常见到。
- en: These maintainability issues can be addressed with basic OOP techniques, which
    are considered good practice in all types of Python programs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可维护性问题可以通过基本的面向对象编程技术来解决，在所有类型的Python程序中都被认为是良好的实践。
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To improve the modularity of our simple program, we will define a class that
    wraps our global variables:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改进我们简单程序的模块化，我们将定义一个包装我们全局变量的类：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, each variable is enclosed in a specific scope, including the `command`
    function, which is moved as a separate method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个变量都被封装在特定的范围内，包括`command`函数，它被移动为一个单独的方法。
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: First, we replaced the wildcard import with the `import ... as` syntax to have
    better control over our global namespace.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们用`import ... as`语法替换了通配符导入，以便更好地控制我们的全局命名空间。
- en: 'Then, we defined our `App` class as a `Tk` subclass, which now is referenced
    via the `tk` namespace. To properly initialize the base class, we will call the
    `__init__` method of the `Tk` class with the built-in `super()` function. This
    corresponds to the following lines:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将我们的`App`类定义为`Tk`子类，现在通过`tk`命名空间引用。为了正确初始化基类，我们将使用内置的`super()`函数调用`Tk`类的`__init__`方法。这对应以下行：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we have a reference to the `App` instance with the `self` variable, so
    we will add all the Button widget as an attribute of our class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了对`App`实例的引用，使用`self`变量，所以我们将把所有的按钮小部件作为我们类的属性添加。
- en: Although it may look overkill for such a simple program, this refactoring will
    help us to reason about each part, the button instantiation is separated from
    the callback that gets executed when it is clicked, and the application bootstrapping
    is moved to the `if __name__ == "__main__"` block, which is a common practice
    in executable Python scripts.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对于这样一个简单的程序来说可能看起来有点过度，但这种重构将帮助我们理清每个部分，按钮实例化与单击时执行的回调分开，应用程序引导被移动到`if __name__
    == "__main__"`块中，这是可执行Python脚本中的常见做法。
- en: We will follow this convention through all the code samples, so you can take
    this template as the starting point of any larger application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循这个约定通过所有的代码示例，所以您可以将这个模板作为任何更大应用程序的起点。
- en: There's more...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We subclassed the `Tk` class in our example, but it is also common to subclass
    other widget classes. We did this to reproduce the same statements that we had
    before we refactored the code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们对`Tk`类进行了子类化，但通常也会对其他小部件类进行子类化。我们这样做是为了重现在重构代码之前的相同语句。
- en: However, it may be more convenient to subclass `Frame` or `Toplevel` in larger
    programs, such as those with multiple windows. This is because a Tkinter application
    should have only one `Tk` instance, and the system creates one automatically if
    you instantiate a widget before you create the `Tk` instance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在更大的程序中，比如有多个窗口的程序中，可能更方便地对`Frame`或`Toplevel`进行子类化。这是因为Tkinter应用程序应该只有一个`Tk`实例，如果在创建`Tk`实例之前实例化小部件，系统会自动创建一个`Tk`实例。
- en: Keep in mind that this decision does not affect the structure of our `App` class
    since all widget classes have a `mainloop` method that internally starts the `Tk`
    main loop.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个决定不会影响我们的`App`类的结构，因为所有的小部件类都有一个`mainloop`方法，它在内部启动`Tk`主循环。
- en: Working with buttons
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用按钮
- en: Button widgets represent a clickable item of your GUI applications. They typically
    use a text or an image indicating the action that will be performed when clicked.
    Tkinter allows you to easily configure this functionality with some standard options
    of the `Button` widget class.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮小部件表示GUI应用程序中可点击的项目。它们通常使用文本或指示单击时将执行的操作的图像。Tkinter允许您使用`Button`小部件类的一些标准选项轻松配置此功能。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following contains a button with an image that gets disabled when clicked
    and a list of buttons with the different types of available reliefs:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下包含一个带有图像的按钮，单击后会被禁用，并带有不同类型可用的relief的按钮列表：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The purpose of this program is to show several configuration options that can
    be used when creating a Button widget.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序的目的是显示在创建按钮小部件时可以使用的几个配置选项。
- en: 'After executing the preceding code, you will get the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上述代码后，您将得到以下输出：
- en: '![](images/972eaa5e-75fd-46c8-88be-f6fc9b648bb5.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](images/972eaa5e-75fd-46c8-88be-f6fc9b648bb5.png)'
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The most basic way of instantiation of `Button` is using the `text` option to
    set the button label and the command option that references the function to be
    invoked when the button is clicked.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`Button`实例化的最基本方法是使用`text`选项设置按钮标签和引用在按钮被点击时要调用的函数的`command`选项。'
- en: 'In out example, we also added `PhotoImage` via the `image` option, which takes
    precedence over the *text* string. The `compound` option serves to combine image
    and text in the same button, determining the position where the image is placed.
    It accepts the following constants as valid values: `CENTER`, `BOTTOM`, `LEFT`,
    `RIGHT`, and `TOP`.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们还通过`image`选项添加了`PhotoImage`，它优先于*text*字符串。`compound`选项用于在同一个按钮中组合图像和文本，确定图像放置的位置。它接受以下常量作为有效值：`CENTER`、`BOTTOM`、`LEFT`、`RIGHT`和`TOP`。
- en: The second row of buttons is created with a list comprehension, using the list
    of `RELIEF` values. The label of each button corresponds to the name of the constant,
    so you can note the difference in the appearance of each button.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行按钮是用列表推导式创建的，使用了`RELIEF`值的列表。每个按钮的标签对应于常量的名称，因此您可以注意到每个按钮外观上的差异。
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We used an attribute to keep a reference to our `PhotoImage` instance, even
    though we are not using it outside our `__init__` method. The reason is that images
    are cleared when they are garbage collected, which will happen if we declare it
    as a local variable and the method exists.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个属性来保留对我们的`PhotoImage`实例的引用，即使我们在`__init__`方法之外没有使用它。原因是图像在垃圾收集时会被清除，如果我们将其声明为局部变量并且方法存在，则会发生这种情况。
- en: To avoid this, always remember to keep a reference to each `PhotoImage` object
    as long as the window where it is shown is still alive.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，始终记住在窗口仍然存在时保留对每个`PhotoImage`对象的引用。
- en: Creating text entries
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文本输入框
- en: The Entry widget represents a text input displayed in a single line. Along with
    the `Label` and `Button` classes, it is one of the most commonly used Tkinter
    classes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Entry小部件表示以单行显示的文本输入。它与`Label`和`Button`类一样，是Tkinter类中最常用的类之一。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This example shows how to create a login form with two entry instances for
    the `username` and `password` fields. Each character of `password` is displayed
    as an asterisk to avoid showing it in clear text:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例演示了如何创建一个登录表单，其中有两个输入框实例用于`username`和`password`字段。`password`的每个字符都显示为星号，以避免以明文显示它：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `Log in` button prints the values in the console, whereas the `Clear` button
    removes the content of both entries and returns the focus to the entry for `username`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`Log in`按钮在控制台中打印值，而`Clear`按钮删除两个输入框的内容，并将焦点返回到`username`的输入框：'
- en: '![](images/21860bf1-fad4-4dc9-9f33-8b60bc599fbe.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](images/21860bf1-fad4-4dc9-9f33-8b60bc599fbe.png)'
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Entry widgets are instantiated using the parent window or frame as the first
    argument and a set of optional keyword arguments to configure additional options.
    We did not specify any options for the entry corresponding to the `username` field.
    To keep the password secret, we specify the `show` argument with the string `"*"`,
    which will display each typed character as an asterisk.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用父窗口或框架作为第一个参数实例化Entry小部件，并使用一组可选关键字参数来配置其他选项。我们没有为对应`username`字段的条目指定任何选项。为了保持密码的机密性，我们使用字符串`"*"`指定`show`参数，它将显示每个键入的字符为星号。
- en: With the `get()` method, we will retrieve the current text as a string. This
    is used in the `print_login` method to show the entries' content in the standard
    output.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`get()`方法，我们将检索当前文本作为字符串。这在`print_login`方法中用于在标准输出中显示条目的内容。
- en: The `delete()` method takes two arguments that indicate the range of the characters
    that should be deleted. Keep in mind that the indices start at the position 0,
    and they do not include the character at the end of the range. If only one argument
    is passed, it deletes the character at that position.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete()`方法接受两个参数，指示应删除的字符范围。请记住，索引从位置0开始，并且不包括范围末尾的字符。如果只传递一个参数，它将删除该位置的字符。'
- en: In the `clear_form()` method, we delete from index 0 to the constant `END`,
    which means that the whole content is removed. Finally, we set the focus to the
    `username` entry.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`clear_form()`方法中，我们从索引0删除到常量`END`，这意味着整个内容被删除。最后，我们将焦点设置为`username`条目。
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The content of an Entry widget can be modified programmatically with the `insert()`
    method, which takes two arguments:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`insert()`方法以编程方式修改Entry小部件的内容，该方法接受两个参数：
- en: '`index`: The position to insert the text; note that entry positions are 0-indexed'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：要插入文本的位置；请注意，条目位置是从0开始的'
- en: '`string`: The text to insert'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`：要插入的文本'
- en: 'A common pattern to reset the content of an entry with a default value can
    be achieved with a combination of `delete()` and `insert()`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`delete()`和`insert()`的组合可以实现重置条目内容为默认值的常见模式：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Another pattern is to append the text in the current position of the text cursor.
    Here, you can use the `INSERT` constant instead of having to calculate the numerical
    index:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种模式是在文本光标的当前位置追加文本。在这里，您可以使用`INSERT`常量，而不必计算数值索引：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Like the `Button` class, the `Entry` class also accepts the `relief` and `state`
    options to modify its border style and state. Keep in mind that calls to `delete()`
    and `insert()` are ignored when the state is `"disabled"` or `"readonly"`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Button`类一样，`Entry`类还接受`relief`和`state`选项来修改其边框样式和状态。请注意，在状态为`"disabled"`或`"readonly"`时，对`delete()`和`insert()`的调用将被忽略。
- en: See also
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Tracing text changes* recipe
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*跟踪文本更改*配方'
- en: The *Validating a text entry* recipe
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*验证文本输入*配方'
- en: Tracing text changes
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪文本更改
- en: '`Tk` variables allow your applications to get notified when an input changes
    its value. There are four variable classes in `Tkinter`: `BooleanVar`, `DoubleVar`,
    `IntVar`, and `StringVar`. Each one wraps the value of the corresponding Python
    type, which should match the type of the input widget attached to the variable.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tk`变量允许您的应用程序在输入更改其值时得到通知。`Tkinter`中有四个变量类：`BooleanVar`、`DoubleVar`、`IntVar`和`StringVar`。每个类都包装了相应Python类型的值，该值应与附加到变量的输入小部件的类型匹配。'
- en: This feature is particularly useful if you want to automatically update certain
    parts of your application based on the current state of some input widgets.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望根据某些输入小部件的当前状态自动更新应用程序的某些部分，则此功能特别有用。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the following example, we will associate a `StringVar` instance to our entry
    with the `textvariable` option; this variable traces write operations with the
    `show_message()` method as callback:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将使用`textvariable`选项将`StringVar`实例与我们的条目关联；此变量跟踪写操作，并使用`show_message()`方法作为回调：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you type something into the Entry widget, the label updates its text with
    a message composed with the `Tk` variable value. For instance, if you type the
    word `Phara`, the label will show `Hello, Phara!`. If the entry is empty, the
    label will not show any text. To show you how to modify the variable''s content
    programmatically, we added a button that clears the entry when you click on it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Entry小部件中输入内容时，标签将使用由`Tk`变量值组成的消息更新其文本。例如，如果您输入单词`Phara`，标签将显示`Hello, Phara!`。如果输入为空，标签将不显示任何文本。为了向您展示如何以编程方式修改变量的内容，我们添加了一个按钮，当您单击它时清除条目：
- en: '![](images/93325b8b-dbe1-4415-a4a2-855233a38797.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](images/93325b8b-dbe1-4415-a4a2-855233a38797.png)'
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first lines of our application constructor instantiate `StringVar` and
    attach a callback to the write mode. The valid mode values are as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序构造函数的前几行实例化了`StringVar`并将回调附加到写入模式。有效的模式值如下：
- en: '`"w"`: Called when the variable is written'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"w"`：在写入变量时调用'
- en: '`"r"`: Called when the variable is read'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"r"`：在读取变量时调用'
- en: '`"u"` (for *unset*): Called when the variable is deleted'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"u"`（对于*unset*）：在删除变量时调用'
- en: 'When invoked, the callback function receives three arguments: the internal
    variable name, an empty string (it is used in other types of `Tk` variables),
    and the mode that triggered the operation. By declaring the method with `*args`,
    we make these arguments optional, because we are not using any of these values
    within the callback.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用时，回调函数接收三个参数：内部变量名称，空字符串（在其他类型的`Tk`变量中使用），以及触发操作的模式。通过使用`*args`声明方法，我们使这些参数变为可选，因为我们在回调中没有使用这些值。
- en: The `get()` method of `Tk` wrappers returns the current value of the variable,
    and the `set()` method updates its value. They also notify the corresponding observers,
    so both modifying the entry's content through the GUI or clicking on the Clear button will
    trigger the call to the `show_message()` method.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tk`包装器的`get()`方法返回变量的当前值，`set()`方法更新其值。它们还通知相应的观察者，因此通过GUI修改输入内容或单击“清除”按钮都将触发对`show_message()`方法的调用。'
- en: There's more...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Tk variables are optional for `Entry` widgets, but they are necessary for other
    widget classes to work correctly, such as the `Checkbutton` and `Radiobutton`
    classes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Entry`小部件，Tk变量是可选的，但对于其他小部件类（例如`Checkbutton`和`Radiobutton`类）来说，它们是必要的，以便正确工作。
- en: See also
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating selections with radio buttons* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用单选按钮创建选择*食谱'
- en: The *Implementing switches with checkboxes* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用复选框实现开关*食谱'
- en: Validating a text entry
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证文本输入
- en: Typically, text inputs represent fields that follow certain validation rules,
    such as having a maximum length or matching a specific format. Some applications
    allow typing any kind of content into these fields and trigger the validation
    when the whole form is submitted.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，文本输入代表遵循某些验证规则的字段，例如具有最大长度或匹配特定格式。一些应用程序允许在这些字段中键入任何类型的内容，并在提交整个表单时触发验证。
- en: Under some circumstances, we want to prevent users from typing invalid content
    into a text field. We will take a look at how to implement this behavior using
    the validation options of the Entry widget.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们希望阻止用户将无效内容输入文本字段。我们将看看如何使用Entry小部件的验证选项来实现此行为。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following application shows how to validate an entry using regular expressions:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用程序显示了如何使用正则表达式验证输入：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you run this script and type a non-alphanumeric character in the Entry widget,
    it will keep the same content and print the error message. This will also happen
    when you try to type more than 10 valid characters since the regular expression
    also limits the content's length.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行此脚本并在Entry小部件中键入非字母数字字符，则它将保持相同的内容并打印错误消息。当您尝试键入超过10个有效字符时，也会发生这种情况，因为正则表达式还限制了内容的长度。
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: With the `validate` option set to `"key"`, we will activate the entry validation
    that gets triggered on any content modification. The value is `"none"` by default,
    which means that there is no validation.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将`validate`选项设置为`“key”`，我们将激活在任何内容修改时触发的输入验证。默认情况下，该值为`“none”`，这意味着没有验证。
- en: Other possible values are `"focusin"` and `"focusout"`, which validate when
    the widget gets or loses the focus, respectively, or simply `"focus"` to validate
    in both cases. Alternatively, we can use the `"all"` value to validate in all
    situations.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可能的值是`“focusin”`和`“focusout”`，分别在小部件获得或失去焦点时进行验证，或者简单地使用`“focus”`在两种情况下进行验证。或者，我们可以使用`“all”`值在所有情况下进行验证。
- en: The `validatecommand` function is called each time the validation is triggered,
    and it should return `true` if the new content is valid, and `false` otherwise.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`validatecommand`函数在每次触发验证时调用，如果新内容有效，则应返回`true`，否则返回`false`。'
- en: 'Since we need more information to determine whether the content is valid or
    not, we create a Tcl wrapper around our Python function using the `register` method
    of the `Widget` class. Then, you can add the percent substitution for each parameter
    that will be passed to the Python function. Finally, we will group these values
    as a Python tuple. This corresponds to the following line from our example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要更多信息来确定内容是否有效，我们使用`Widget`类的`register`方法创建了一个围绕Python函数的Tcl包装器。然后，您可以为将传递给Python函数的每个参数添加百分比替换。最后，我们将这些值分组为Python元组。这对应于我们示例中的以下行：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In general, you can use any of the following substitutions:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，您可以使用以下任何一个替换：
- en: '`%d`: Type of action; 1 for insertion, 0 for deletion, and -1 otherwise'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％d`：操作类型；插入为1，删除为0，否则为-1'
- en: '`%i`: Index of the string being inserted or deleted'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％i`：正在插入或删除的字符串的索引'
- en: '`%P`: Value of the entry if the modification is allowed'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％P`：如果允许修改，则输入的值'
- en: '`%s`: Value of the entry before the modification'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％s`：修改前的输入值'
- en: '`%S`: String content that is being inserted or deleted'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％S`：正在插入或删除的字符串内容'
- en: '`%v`: The type of validation currently set'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％v`：当前设置的验证类型'
- en: '`%V`: Type of validation that triggered the action'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％V`：触发操作的验证类型'
- en: '`%W`: The name of the Entry widget'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％W`：Entry小部件的名称'
- en: The `invalidcommand` option takes a function that is invoked when `validatecommand`
    returns `false`. The same percent substitutions can be applied to this option,
    but in our example, we directly passed the `print_error()` method of our class.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`invalidcommand`选项接受一个在`validatecommand`返回`false`时调用的函数。这个选项也可以应用相同的百分比替换，但在我们的示例中，我们直接传递了我们类的`print_error()`方法。'
- en: There's more...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Tcl/Tk documentation suggests not mixing the `validatecommand` and the `textvariable`
    options since setting an invalid value to the `Tk` variable will turn off validation.
    The same occurs if the `validatecommand` function do not return a Boolean value.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Tcl/Tk文档建议不要混合`validatecommand`和`textvariable`选项，因为将无效值设置为`Tk`变量将关闭验证。如果`validatecommand`函数不返回布尔值，也会发生同样的情况。
- en: In case you are not familiar with the `re` module, you can check out the detailed
    introduction to regular expressions in the official Python documentation at[ https://docs.python.org/3.6/howto/regex.html](https://docs.python.org/3.6/howto/regex.html).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉`re`模块，可以在官方Python文档的[https://docs.python.org/3.6/howto/regex.html](https://docs.python.org/3.6/howto/regex.html)中查看有关正则表达式的详细介绍。
- en: See also
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating text entries* recipe
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建文本输入*食谱'
- en: Selecting numerical values
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择数值
- en: Previous recipes cover how to work with text inputs; we may want to enforce
    some inputs to contain only numerical values. This is the use case for the `Spinbox`
    and `Scale` classes—both widgets allow users to select a numerical value from
    a range or a list of valid options, but there are several differences in the way
    they are displayed and configured.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的食谱介绍了如何处理文本输入；我们可能希望强制某些输入只包含数字值。这是`Spinbox`和`Scale`类的用例——这两个小部件允许用户从范围或有效选项列表中选择数值，但它们在显示和配置方式上有几个不同之处。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This program has `Spinbox` and `Scale` for selecting an integer value from
    `0` to `5`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序具有用于从`0`到`5`选择整数值的`Spinbox`和`Scale`：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding code, for debugging purposes, we added a button that prints
    the value of each widget when you click on it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，出于调试目的，我们添加了一个按钮，当您单击它时，它会打印每个小部件的值：
- en: '![](images/61eb247c-f98a-4874-a756-96f2985bb7f6.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](images/61eb247c-f98a-4874-a756-96f2985bb7f6.png)'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Both classes accept the `from_` and `to` options to indicate the range of valid
    values—the trailing underscore is necessary because the `from` option was originally
    defined in Tcl/Tk, but it is a reserved keyword in Python.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个类都接受`from_`和`to`选项，以指示有效值的范围——由于`from`选项最初是在Tcl/Tk中定义的，但它在Python中是一个保留关键字，因此需要添加下划线。
- en: A handy functionality of the `Scale` class is the `resolution` option, which
    sets the precision of the rounding. For instance, a resolution of 0.2 will allow
    the user to select the values 0.0, 0.2, 0.4, and so on. The value of this option
    is 1 by default, so the widget rounds all values to the nearest integer.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`Scale`类的一个方便功能是`resolution`选项，它设置了舍入的精度。例如，分辨率为0.2将允许用户选择值0.0、0.2、0.4等。此选项的默认值为1，因此小部件将所有值舍入到最接近的整数。'
- en: As usual, the value of each widget can be retrieved with the `get()` method.
    An important difference is that `Spinbox` returns the number as a string, whereas
    `Scale` returns an integer value or a float value if the rounding accepts decimal
    values.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，可以使用`get()`方法检索每个小部件的值。一个重要的区别是，`Spinbox`将数字作为字符串返回，而`Scale`返回一个整数值，如果舍入接受小数值，则返回一个浮点值。
- en: There's more...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `Spinbox` class has a similar configuration to the Entry widget, such as
    the `textvariable` and `validate` options. You can apply all these patterns to
    spinboxes with the main difference that it restricts to numerical values.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spinbox`类具有与Entry小部件类似的配置，例如`textvariable`和`validate`选项。您可以将所有这些模式应用于旋转框，主要区别在于它限制为数值。'
- en: See also
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Tracing text changes* recipe
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*跟踪文本更改*食谱'
- en: Creating selections with radio buttons
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单选按钮创建选择
- en: With the Radiobutton widget, you can let the user select among several options.
    This pattern works well for a relatively small number of mutually exclusive choices.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Radiobutton小部件，您可以让用户在多个选项中进行选择。这种模式适用于相对较少的互斥选择。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: You can connect multiple `Radiobutton` instances using a Tkinter variable so
    that when you click on a non-selected option, it will deselect whatever other
    option was previously selected.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Tkinter变量连接多个`Radiobutton`实例，以便当您单击未选择的选项时，它将取消选择先前选择的任何其他选项。
- en: 'In the following program, we created three radio buttons for the `Red`, `Green`,
    and `Blue` options. Each time you click on a radio button, it prints the lowercase
    name of the corresponding color:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的程序中，我们为`Red`，`Green`和`Blue`选项创建了三个单选按钮。每次单击单选按钮时，它都会打印相应颜色的小写名称：
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you run this script, it will display the application with the Red radio
    button already selected:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行此脚本，它将显示已选择红色单选按钮的应用程序：
- en: '![](images/69c23add-531e-4e7c-ab29-ee12aa28deff.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](images/69c23add-531e-4e7c-ab29-ee12aa28deff.png)'
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To avoid repeating the code of the `Radiobutton` initialization, we defined
    a utility method that is called from a list comprehension. We unpacked the values
    of each tuple of the `COLORS` list and then passed these local variables as options
    to `Radiobutton`. Remember to try to not repeat yourself whenever possible.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免重复`Radiobutton`初始化的代码，我们定义了一个实用方法，该方法从列表推导中调用。我们解压了`COLORS`列表的每个元组的值，然后将这些局部变量作为选项传递给`Radiobutton`。请记住，尽可能尝试不要重复自己。
- en: Since `StringVar` is shared among all the `Radiobutton` instances, they are
    automatically connected, and we force the user to select only one choice.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`StringVar`在所有`Radiobutton`实例之间共享，它们会自动连接，并且我们强制用户只能选择一个选项。
- en: There's more...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We set a default value of `"red"` in our program; however, what would happen
    if we omit this line, and the value of `StringVar` does not match any of the radio
    button values? It will match the default value of the `tristatevalue` option,
    which is the empty string. This causes the widget to display in a special "tri-state"
    or indeterminate mode. Although this option can be modified with the `config()`
    method, a better practice is to set a sensible default value so the variable is
    initialized in a valid state.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在程序中设置了默认值为`"red"`；但是，如果我们省略此行，且`StringVar`的值与任何单选按钮的值都不匹配会发生什么？它将匹配`tristatevalue`选项的默认值，即空字符串。这会导致小部件显示在特殊的“三态”或不确定模式下。虽然可以使用`config()`方法修改此选项，但最好的做法是设置一个明智的默认值，以便变量以有效状态初始化。
- en: Implementing switches with checkboxes
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用复选框实现开关
- en: Choices between two alternatives are typically implemented with checkboxes and
    lists of options where each choice is independent from the rest. As we will see
    in the next example, these concepts can be implemented using the Checkbutton widget.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用复选框和选项列表实现两个选择之间的选择，其中每个选择与其余选择无关。正如我们将在下一个示例中看到的，这些概念可以使用Checkbutton小部件来实现。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following application shows how to create Checkbutton, which must be connected
    to an `IntVar` variable to be able to inspect the button state:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用程序显示了如何创建Checkbutton，它必须连接到`IntVar`变量才能检查按钮状态：
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding code, we simply printed the value of the widget each time
    it is clicked:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们只是在每次单击小部件时打印小部件的值：
- en: '![](images/a667f326-09f7-49c0-bd84-aa4b43f73390.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](images/a667f326-09f7-49c0-bd84-aa4b43f73390.png)'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Like the Button widget, the Checkbutton also accepts the `command` and `text`
    options.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 与Button小部件一样，Checkbutton也接受`command`和`text`选项。
- en: With the `onvalue` and `offvalue` options, we can specify the values used when
    the button is on and off. We use an integer variable because these values are
    **1** and **0** by default, respectively; however, you can also set them to any
    other integer values.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`onvalue`和`offvalue`选项，我们可以指定按钮打开和关闭时使用的值。我们使用整数变量，因为默认情况下这些值分别为**1**和**0**；但是，您也可以将它们设置为任何其他整数值。
- en: There's more...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'With Checkbuttons, it is also possible to use other variable types:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Checkbuttons，也可以使用其他变量类型：
- en: '[PRE13]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The only restriction is to match `onvalue` and `offvalue` with the type of the
    Tkinter variable; in this case, since `"ON"` and `"OFF"` are strings, the variable
    should be a `StringVar`. Otherwise, the Tcl interpreter will raise an error when
    trying to set the corresponding value of a different type.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的限制是要将`onvalue`和`offvalue`与Tkinter变量的类型匹配；在这种情况下，由于`"ON"`和`"OFF"`是字符串，因此变量应该是`StringVar`。否则，当尝试设置不同类型的相应值时，Tcl解释器将引发错误。
- en: See also
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Tracing text changes* recipe
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*跟踪文本更改*的方法'
- en: The *Creating selections with radio buttons* recipe
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用单选按钮创建选择*的方法'
- en: Displaying a list of items
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示项目列表
- en: The Listbox widget contains text items that can be selected by the user with
    the mouse or keyboard. This selection can be individual or multiple, depending
    on the widget configuration.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Listbox小部件包含用户可以使用鼠标或键盘选择的文本项。这种选择可以是单个的或多个的，这取决于小部件的配置。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following program creates a list selection with the days of the week. There
    is a button to print the actual selection and a list of buttons to change the
    selection mode:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序创建了一个星期几的列表选择。有一个按钮来打印实际选择，以及一个按钮列表来更改选择模式：
- en: '[PRE14]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can try out changing the mode of selection and printing the selected items:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试更改选择模式并打印所选项目：
- en: '![](images/f8530d3e-efbd-4789-b518-48e43e5de8b5.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](images/f8530d3e-efbd-4789-b518-48e43e5de8b5.png)'
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We create an empty Listbox object and add all the text items with the `insert()`
    method. The 0 index indicates that the items should be added at the beginning
    of the list. In the following code snippet, we unpacked the `DAYS` list, but individual
    items can be appended at the end with the `END` constant:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个空的Listbox对象，并使用`insert()`方法添加所有文本项。0索引表示应在列表的开头添加项目。在下面的代码片段中，我们解包了`DAYS`列表，但是可以使用`END`常量将单独的项目附加到末尾：
- en: '[PRE15]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The current selection is retrieved using the `curselection()` method. It returns
    the indices of the selected items to transform them to the corresponding text
    items we called the `get()` method for each index in a comprehension list. Finally,
    the list is printed in the standard output for debugging purposes.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`curselection()`方法检索当前选择。它返回所选项目的索引，以便将它们转换为相应的文本项目，我们为每个索引调用了`get()`方法。最后，为了调试目的，列表将被打印在标准输出中。
- en: 'In our example, the `selectmode` option can be changed programmatically to
    explore the different behaviors, as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`selectmode`选项可以通过编程方式进行更改，以探索不同的行为，如下所示：
- en: '`SINGLE`: Single choice'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SINGLE`：单选'
- en: '`BROWSE`: Single choice that can be moved with the up and down keys'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BROWSE`：可以使用上下键移动的单选'
- en: '`MULTIPLE`: Multiple choice'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MULTIPLE`：多选'
- en: '`EXTENDED`: Multiple choice with ranges that can be selected with the *Shift*
    and *Ctrl* keys'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXTENDED`：使用*Shift*和*Ctrl*键选择范围的多选'
- en: There's more...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If the number of text items is large enough, it may be necessary to add a vertical
    scroll bar. You can easily connect it using the `yscrollcommand` option. In our
    example, we can wrap both widgets in a frame to keep the same layout. Remember
    to specify the `fill` option when packing the scroll so that it fills the available
    space in the *y* axis:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文本项的数量足够大，可能需要添加垂直滚动条。您可以使用`yscrollcommand`选项轻松连接它。在我们的示例中，我们可以将两个小部件都包装在一个框架中，以保持相同的布局。记得在打包滚动条时指定`fill`选项，以便在*y*轴上填充可用空间。
- en: '[PRE16]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Similarly, there is a `xscrollcommand` option for the horizontal axis.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于水平轴，还有一个`xscrollcommand`选项。
- en: See also
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating selections with radio buttons* recipe
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用单选按钮创建选择*的方法'
- en: Handling mouse and keyboard events
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理鼠标和键盘事件
- en: Being able to react to events is one of the most basic but important topics
    in GUI application development since it determines how users can interact with
    the program.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 能够对事件做出反应是GUI应用程序开发中最基本但最重要的主题之一，因为它决定了用户如何与程序进行交互。
- en: Pressing keys of the keyboard and clicking on items with the mouse are some
    common types of events, which are automatically handled in some Tkinter classes.
    For instance, this behavior is already implemented on the `command` option of
    the `Button` widget class, which invokes the specified callback function.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 按键盘上的键和用鼠标点击项目是一些常见的事件类型，在一些Tkinter类中会自动处理。例如，这种行为已经在`Button`小部件类的`command`选项上实现，它调用指定的回调函数。
- en: Some events can get triggered without user interaction, such as changing the
    input focus programmatically from one widget to another.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有些事件可以在没有用户交互的情况下触发，例如从一个小部件到另一个小部件的程序性输入焦点更改。
- en: How to do it...
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'You can attach an event binding to a widget using the `bind` method. The following
    example binds some mouse events to a `Frame` instance:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`bind`方法将事件绑定到小部件。以下示例将一些鼠标事件绑定到`Frame`实例：
- en: '[PRE17]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: All events are handled by the `print_event()` method of our class, which prints
    the type of event and the position of the mouse in the console. You can try it
    out by clicking on the green frame with the mouse, and moving it around while
    it starts printing the event messages.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 所有事件都由我们的类的`print_event()`方法处理，该方法在控制台中打印事件类型和鼠标位置。您可以通过单击鼠标上的绿色框架并在开始打印事件消息时将其移动来尝试它。
- en: 'The following example contains an Entry widget with a couple of bindings; one
    for the event that gets triggered when the entry gets the focus, and another for
    all the key press events:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例包含一个带有一对绑定的Entry小部件；一个用于在输入框获得焦点时触发的事件，另一个用于所有按键事件：
- en: '[PRE18]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The first message this program will output is the `FocusIn` event when you set
    the focus on the Entry widget. If you try it out, you will see that it will also
    show the events of keys that do not correspond to non-printable characters, such
    as arrow keys or the return key.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序将输出的第一条消息是当您将焦点设置在Entry小部件上时的`FocusIn`事件。如果您尝试一下，您会发现它还会显示与不可打印字符不对应的键的事件，比如箭头键或回车键。
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `bind` method is defined in the `widget` class and takes three arguments,
    an event `sequence`, a `callback` function, and an optional `add` string:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`bind`方法在`widget`类中定义，并接受三个参数，一个事件`sequence`，一个`callback`函数和一个可选的`add`字符串：'
- en: '[PRE19]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `sequence` string uses the `<modifier-type-detail>` syntax.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`sequence`字符串使用`<modifier-type-detail>`的语法。'
- en: 'In first place, modifiers are optional and allow you to specify additional
    combinations to the general type of the event:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，修饰符是可选的，允许您指定事件的一般类型的其他组合：
- en: '`Shift`: When the user presses the *Shift* key'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Shift`: 当用户按下*Shift*键时'
- en: '`Alt`: When the user presses the *Alt* key'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Alt`: 当用户按下*Alt*键时'
- en: '`Control`: When the user presses the *Ctrl* key'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`控制`: 当用户按下*Ctrl*键时'
- en: '`Lock`: When the user presses the *Shift* lock'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Lock`: 当用户按下*Shift*锁定时'
- en: '`Double`: When the event happens twice in quick succession'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Double`: 当事件快速连续发生两次时'
- en: '`Triple`: When the event happens thrice in quick succession'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Triple`: 当事件快速连续发生三次时'
- en: 'Event types determine the general type of event:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 事件类型确定事件的一般类型：
- en: '`ButtonPress` or `Button`: Event generated when a mouse button is pressed'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ButtonPress`或`Button`: 鼠标按钮按下时生成的事件'
- en: '`ButtonRelease`: Event generated when a mouse button is released'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ButtonRelease`: 鼠标按钮释放时生成的事件'
- en: '`Enter`: Event generated when you move the mouse over a widget'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Enter`: 当鼠标移动到小部件上时生成的事件'
- en: '`Leave`: Event generated when the mouse pointer leaves a widget'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Leave`: 当鼠标指针离开小部件时生成的事件'
- en: '`FocusIn`: Event generated when the widget gets the input focus'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FocusIn`: 当小部件获得输入焦点时生成的事件'
- en: '`FocusOut`: Event generated when the widget loses the input focus'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FocusOut`: 当小部件失去输入焦点时生成的事件'
- en: '`KeyPress` or `Key`: Event generated when a key is pressed'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyPress`或`Key`: 按下键时生成的事件'
- en: '`KeyRelease`: Event generated when a key is released'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyRelease`: 松开键时生成的事件'
- en: '`Motion`: Event generated when the mouse is moved'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Motion`: 鼠标移动时生成的事件'
- en: 'The detail is also optional and serves to indicate the mouse button or key:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息也是可选的，用于指示鼠标按钮或键：
- en: For mouse events, 1 is the left button, 2 is the middle button, and 3 is the
    right button.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于鼠标事件，1是左按钮，2是中间按钮，3是右按钮。
- en: For keyboard events, it is the key character. Special keys use the key symbol;
    some common examples are return, *Tab*, *Esc*, up, down, right, left, *Backspace*,
    and function keys (from *F1* to *F12*).
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于键盘事件，它是键字符。特殊键使用键符号；一些常见的示例是回车、*Tab*、*Esc*、上、下、右、左、*Backspace*和功能键（从*F1*到*F12*）。
- en: 'The `callback` function takes an event parameter. For mouse events, it has
    the following attributes:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`callback`函数接受一个事件参数。对于鼠标事件，它具有以下属性：'
- en: '`x` and `y`: Current mouse position in pixels'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x`和`y`: 当前鼠标位置（以像素为单位）'
- en: '`x_root` and `y_root`: Same as `x` and `y`, but relative to the left-upper
    corner of the screen'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x_root`和`y_root`: 与`x`和`y`相同，但相对于屏幕左上角'
- en: '`num`: Mouse button number'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num`: 鼠标按钮编号'
- en: 'For keyboard events, it contains these attributes:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对于键盘事件，它包含这些属性：
- en: '`char`: Pressed character code as a string'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`char`: 按下的字符代码作为字符串'
- en: '`keysym`: Pressed key symbol'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keysym`: 按下的键符号'
- en: '`keycode`: Pressed key code'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keycode`: 按下的键码'
- en: In both cases, the event has the `widget` attribute, referencing the instance
    that generated the event, and `type`, which specifies the event type.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，事件都有`widget`属性，引用生成事件的实例，以及`type`，指定事件类型。
- en: We strongly recommend that you define methods for the `callback` functions since
    you will also have the reference to the class instance, and therefore you can
    easily access each of the `widget` attributes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您为`callback`函数定义方法，因为您还将拥有对类实例的引用，因此您可以轻松访问每个`widget`属性。
- en: Finally, the `add` parameter can be `''`, to replace the `callback` function
    if there was a previous binding, or `'+'` to add the callback and preserve the
    old ones.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`add`参数可以是`''`，以替换`callback`函数（如果有先前的绑定），或者是`'+'`，以添加回调并保留旧的回调。
- en: There's more...
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Apart from the event types described here, there are also other types that may
    be useful in some scenarios, such as the `<Destroy>` event that is generated when
    a widget is destroyed or the `<Configure>` event that is sent when the size or
    position of the widget changes.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这里描述的事件类型之外，还有其他类型，在某些情况下可能会有用，比如当小部件被销毁时生成的`<Destroy>`事件，或者当小部件的大小或位置发生变化时发送的`<Configure>`事件。
- en: You can check out the Tcl/Tk documentation for a complete list of event types
    at [https://www.tcl.tk/man/tcl/TkCmd/bind.htm#M7](https://www.tcl.tk/man/tcl/TkCmd/bind.htm#M7).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看Tcl/Tk文档，了解事件类型的完整列表[https://www.tcl.tk/man/tcl/TkCmd/bind.htm#M7](https://www.tcl.tk/man/tcl/TkCmd/bind.htm#M7)。
- en: See also
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Structuring a Tkinter application* recipe
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建Tkinter应用程序*的配方'
- en: Setting the main window's icon, title, and size
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置主窗口的图标、标题和大小
- en: The `Tk` instance differs from normal widgets in the way that it is configured,
    so we will explore some basic methods that allow us to customize how it is displayed.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tk`实例与普通小部件不同，它的配置方式也不同，因此我们将探讨一些基本方法，允许我们自定义它的显示方式。'
- en: How to do it...
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'This snippet creates a main window with a custom title and icon. It has 400px
    of width by 200px of height, with a separation of 10px in each axis to the upper-left
    corner of the screen:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个带有自定义标题和图标的主窗口。它的宽度为400像素，高度为200像素，与屏幕左上角的每个轴向的间隔为10像素：
- en: '[PRE20]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This program assumes that you have a valid ICO file called `python.ico` in the
    same directory where the script is placed and executed.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序假定您在脚本所在的目录中有一个名为`python.ico`的有效ICO文件。
- en: How it works...
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The methods `title()` and `iconbitmap()` of the `Tk` class are very self-descriptive—the
    first one sets the window title, whereas the second one takes the path to the
    icon that is associated to the window.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tk`类的`title()`和`iconbitmap()`方法非常自描述——第一个设置窗口标题，而第二个接受与窗口关联的图标的路径。'
- en: 'The `geometry()` method configures the size of the window with a string that
    follows the following pattern:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`geometry()`方法使用遵循以下模式的字符串配置窗口的大小：'
- en: '*{width}x{height}+{offset_x}+{offset_y}*'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '*{width}x{height}+{offset_x}+{offset_y}*'
- en: In case you add more secondary windows to your application, these methods are
    also available in the `Toplevel` class.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您向应用程序添加更多的辅助窗口，这些方法也适用于`Toplevel`类。
- en: There's more...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want to make the application fullscreen, replace the call to the `geometry()`
    method with `self.state("zoomed")`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使应用程序全屏，将对`geometry()`方法的调用替换为`self.state("zoomed")`。
