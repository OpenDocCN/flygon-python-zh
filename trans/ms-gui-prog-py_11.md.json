["```py\nCREATE TABLE coffees (\n        id  INTEGER PRIMARY KEY,\n        coffee_brand TEXT NOT NULL,\n        coffee_name TEXT NOT NULL,\n        UNIQUE(coffee_brand, coffee_name)\n        );\n```", "```py\nCREATE TABLE roasts (\n        id INTEGER PRIMARY KEY,\n        description TEXT NOT NULL UNIQUE,\n        color TEXT NOT NULL UNIQUE\n        );\n\nCREATE TABLE coffees (\n        id  INTEGER PRIMARY KEY,\n        coffee_brand TEXT NOT NULL,\n        coffee_name TEXT NOT NULL,\n        roast_id INTEGER REFERENCES roasts(id),\n        UNIQUE(coffee_brand, coffee_name)\n        );\n\nCREATE TABLE reviews (\n        id INTEGER PRIMARY KEY,\n        coffee_id REFERENCES coffees(id),\n        reviewer TEXT NOT NULL,\n        review_date DATE NOT NULL DEFAULT CURRENT_DATE,\n        review TEXT NOT NULL\n        );\n```", "```py\nINSERT INTO table_name(column1, column2, ...)\n    VALUES (value1, value2, ...), (value3, value4, ...);\n```", "```py\nINSERT INTO roasts(description, color) VALUES\n    ('Light', '#FFD99B'),\n    ('Medium', '#947E5A'),\n    ('Dark', '#473C2B'),\n    ('Burnt to a Crisp', '#000000');\n```", "```py\nINSERT INTO coffees(coffee_brand, coffee_name, roast_id) VALUES\n    ('Dumpy''s Donuts', 'Breakfast Blend', 2),\n    ('Boise''s Better than Average', 'Italian Roast', 3),\n    ('Strawbunks', 'Sumatra', 2),\n    ('Chartreuse Hillock', 'Pumpkin Spice', 1),\n    ('Strawbunks', 'Espresso', 3),\n    ('9 o''clock', 'Original Decaf', 2);\n```", "```py\nINSERT INTO coffees(coffee_brand, coffee_name, roast_id) VALUES\n    ('Minwell House', 'Instant', 48);\n```", "```py\nUPDATE coffees SET roast_id = 4 WHERE id = 2;\n```", "```py\nUPDATE coffees SET roast_id = roast_id + 1\n    WHERE coffee_brand LIKE 'Strawbunks';\n```", "```py\nSELECT reviewer, review_date\nFROM reviews\nWHERE  review_date > '2019-03-01'\nORDER BY reviewer DESC;\n```", "```py\nSELECT coffees.coffee_brand,\n    coffees.coffee_name,\n    roasts.description AS roast,\n    COUNT(reviews.id) AS reviews\nFROM coffees\n    JOIN roasts ON coffees.roast_id = roasts.id\n    LEFT OUTER JOIN reviews ON reviews.coffee_id = coffees.id\nGROUP BY coffee_brand, coffee_name, roast\nORDER BY reviews DESC;\n```", "```py\nSELECT coffees.coffee_brand, coffees.coffee_name\nFROM coffees\n    JOIN (\n    SELECT * FROM roasts WHERE id > (\n        SELECT id FROM roasts WHERE description = 'Medium'\n            )) AS dark_roasts\n    ON coffees.roast_id = dark_roasts.id\nWHERE coffees.id IN (\n    SELECT coffee_id FROM reviews WHERE reviewer = 'Maxwell');\n```", "```py\n    (SELECT * FROM roasts WHERE id > (\n        SELECT id FROM roasts WHERE description = 'Medium'\n            )) AS dark_roasts\n```", "```py\n        SELECT id FROM roasts WHERE description = 'Medium'\n```", "```py\n    SELECT coffee_id FROM reviews WHERE reviewer = 'Maxwell'\n```", "```py\nfrom PyQt5 import QtSql as qts\n```", "```py\nclass CoffeeForm(qtw.QWidget):\n\n    def __init__(self, roasts):\n        super().__init__()\n        self.setLayout(qtw.QFormLayout())\n        self.coffee_brand = qtw.QLineEdit()\n        self.layout().addRow('Brand: ', self.coffee_brand)\n        self.coffee_name = qtw.QLineEdit()\n        self.layout().addRow('Name: ', self.coffee_name)\n        self.roast = qtw.QComboBox()\n        self.roast.addItems(roasts)\n        self.layout().addRow('Roast: ', self.roast)\n        self.reviews = qtw.QTableWidget(columnCount=3)\n        self.reviews.horizontalHeader().setSectionResizeMode(\n            2, qtw.QHeaderView.Stretch)\n        self.layout().addRow(self.reviews)\n```", "```py\n    def show_coffee(self, coffee_data, reviews):\n        self.coffee_brand.setText(coffee_data.get('coffee_brand'))\n        self.coffee_name.setText(coffee_data.get('coffee_name'))\n        self.roast.setCurrentIndex(coffee_data.get('roast_id'))\n        self.reviews.clear()\n        self.reviews.setHorizontalHeaderLabels(\n            ['Reviewer', 'Date', 'Review'])\n        self.reviews.setRowCount(len(reviews))\n        for i, review in enumerate(reviews):\n            for j, value in enumerate(review):\n                self.reviews.setItem(i, j, qtw.QTableWidgetItem(value))\n```", "```py\n        self.stack = qtw.QStackedWidget()\n        self.setCentralWidget(self.stack)\n```", "```py\n        self.db = qts.QSqlDatabase.addDatabase('QSQLITE')\n```", "```py\n        self.db.setDatabaseName('coffee.db')\n```", "```py\n        if not self.db.open():\n            error = self.db.lastError().text()\n            qtw.QMessageBox.critical(\n                None, 'DB Connection Error',\n                'Could not open database file: '\n                f'{error}')\n            sys.exit(1)\n```", "```py\n        required_tables = {'roasts', 'coffees', 'reviews'}\n        tables = self.db.tables()\n        missing_tables = required_tables - set(tables)\n        if missing_tables:\n            qtw.QMessageBox.critica(\n                None, 'DB Integrity Error'\n                'Missing tables, please repair DB: '\n                f'{missing_tables}')\n            sys.exit(1)\n```", "```py\n        query = self.db.exec('SELECT count(*) FROM coffees')\n```", "```py\n        query.next()\n        count = query.value(0)\n        print(f'There are {count} coffees in the database.')\n```", "```py\n        query = self.db.exec('SELECT * FROM roasts ORDER BY id')\n        roasts = []\n        while query.next():\n            roasts.append(query.value(1))\n```", "```py\n        self.coffee_form = CoffeeForm(roasts)\n        self.stack.addWidget(self.coffee_form)\n```", "```py\n    def show_coffee(self, coffee_id):\n        query = self.db.exec(f'SELECT * FROM coffees WHERE id={coffee_id}')\n```", "```py\n0; DELETE FROM coffees;\n```", "```py\nSELECT * FROM coffees WHERE id=0; DELETE FROM coffees;\n```", "```py\n        query1 = qts.QSqlQuery(self.db)\n        query1.prepare('SELECT * FROM coffees WHERE id=:id')\n        query1.bindValue(':id', coffee_id)\n        query1.exec()\n```", "```py\n        query1.next()\n        coffee = {\n            'id': query1.value(0),\n            'coffee_brand': query1.value(1),\n            'coffee_name': query1.value(2),\n            'roast_id': query1.value(3)\n        }\n```", "```py\n        query2 = qts.QSqlQuery()\n        query2.prepare('SELECT * FROM reviews WHERE coffee_id=:id')\n        query2.bindValue(':id', coffee_id)\n        query2.exec()\n        reviews = []\n        while query2.next():\n            reviews.append((\n                query2.value('reviewer'),\n                query2.value('review_date'),\n                query2.value('review')\n            ))\n```", "```py\n        self.coffee_form.show_coffee(coffee, reviews)\n        self.stack.setCurrentWidget(self.coffee_form)\n```", "```py\n      query.prepare('SELECT * from :table ORDER BY :column')\n```", "```py\n        coffees = qts.QSqlQueryModel()\n        coffees.setQuery(\n            \"SELECT id, coffee_brand, coffee_name AS coffee \"\n            \"FROM coffees ORDER BY id\")\n```", "```py\n        self.coffee_list = qtw.QTableView()\n        self.coffee_list.setModel(coffees)\n        self.stack.addWidget(self.coffee_list)\n        self.stack.setCurrentWidget(self.coffee_list)\n```", "```py\n        coffees.setHeaderData(1, qtc.Qt.Horizontal, 'Brand')\n        coffees.setHeaderData(2, qtc.Qt.Horizontal, 'Product')\n```", "```py\n        navigation = self.addToolBar(\"Navigation\")\n        navigation.addAction(\n            \"Back to list\",\n            lambda: self.stack.setCurrentWidget(self.coffee_list))\n```", "```py\n    def get_id_for_row(self, index):\n        index = index.siblingAtColumn(0)\n        coffee_id = self.coffee_list.model().data(index)\n        return coffee_id\n```", "```py\n        self.coffee_list.doubleClicked.connect(\n            lambda x: self.show_coffee(self.get_id_for_row(x)))\n```", "```py\nself.reviews_model = qts.QSqlTableModel()\nself.reviews_model.setTable('reviews')\n```", "```py\nself.coffees_model = qts.QSqlRelationalTableModel()\nself.coffees_model.setTable('coffees')\n```", "```py\n        self.coffees_model.setRelation(\n            self.coffees_model.fieldIndex('roast_id'),\n            qts.QSqlRelation('roasts', 'id', 'description')\n        )\n```", "```py\nself.mapper.model().select()\n```", "```py\n        self.coffee_list = qtw.QTableView()\n        self.coffee_list.setModel(self.coffees_model)\n```", "```py\n        toolbar = self.addToolBar('Controls')\n        toolbar.addAction('Delete Coffee(s)', self.delete_coffee)\n        toolbar.addAction('Add Coffee', self.add_coffee)\n```", "```py\n    def delete_coffee(self):\n        selected = self.coffee_list.selectedIndexes()\n        for index in selected or []:\n            self.coffees_model.removeRow(index.row())\n\n    def add_coffee(self):\n        self.stack.setCurrentWidget(self.coffee_list)\n        self.coffees_model.insertRows(\n            self.coffees_model.rowCount(), 1)\n```", "```py\nself.coffee_list.setItemDelegate(qts.QSqlRelationalDelegate())\n```", "```py\nclass CoffeeForm(qtw.QWidget):\n\n    def __init__(self, coffees_model, reviews_model):\n        super().__init__()\n        self.setLayout(qtw.QFormLayout())\n        self.coffee_brand = qtw.QLineEdit()\n        self.layout().addRow('Brand: ', self.coffee_brand)\n        self.coffee_name = qtw.QLineEdit()\n        self.layout().addRow('Name: ', self.coffee_name)\n        self.roast = qtw.QComboBox()\n        self.layout().addRow('Roast: ', self.roast)\n```", "```py\n        self.mapper = qtw.QDataWidgetMapper(self)\n        self.mapper.setModel(coffees_model)\n        self.mapper.setItemDelegate(\n            qts.QSqlRelationalDelegate(self))\n```", "```py\n        self.mapper.addMapping(\n            self.coffee_brand,\n            coffees_model.fieldIndex('coffee_brand')\n        )\n        self.mapper.addMapping(\n            self.coffee_name,\n            coffees_model.fieldIndex('coffee_name')\n        )\n        self.mapper.addMapping(\n            self.roast,\n            coffees_model.fieldIndex('description')\n        )\n```", "```py\n        roasts_model = coffees_model.relationModel(\n            self.coffees_model.fieldIndex('description'))\n        self.roast.setModel(roasts_model)\n        self.roast.setModelColumn(1)\n```", "```py\n    def show_coffee(self, coffee_index):\n        self.mapper.setCurrentIndex(coffee_index.row())\n```", "```py\n        self.coffee_form = CoffeeForm(\n            self.coffees_model,\n            self.reviews_model\n        )\n        self.stack.addWidget(self.coffee_form)\n        self.coffee_list.doubleClicked.connect(\n            self.coffee_form.show_coffee)\n        self.coffee_list.doubleClicked.connect(\n            lambda: self.stack.setCurrentWidget(self.coffee_form))\n```", "```py\ntoolbar.addAction(\"Back to list\", self.show_list)\n```", "```py\ndef show_list(self):\n    self.coffee_list.resizeColumnsToContents()\n    self.coffee_list.resizeRowsToContents()\n    self.stack.setCurrentWidget(self.coffee_list)\n```", "```py\n        self.reviews = qtw.QTableView()\n        self.layout().addRow(self.reviews)\n        self.reviews.setModel(reviews_model)\n```", "```py\n        self.reviews.hideColumn(0)\n        self.reviews.hideColumn(1)\n        self.reviews.horizontalHeader().setSectionResizeMode(\n            4, qtw.QHeaderView.Stretch)\n```", "```py\n        id_index = coffee_index.siblingAtColumn(0)\n        self.coffee_id = int(self.coffees_model.data(id_index))\n        self.reviews.model().setFilter(f'coffee_id = {self.coffee_id}')\n        self.reviews.model().setSort(3, qtc.Qt.DescendingOrder)\n        self.reviews.model().select()\n        self.reviews.resizeRowsToContents()\n        self.reviews.resizeColumnsToContents()\n```", "```py\nclass DateDelegate(qtw.QStyledItemDelegate):\n\n    def createEditor(self, parent, option, proxyModelIndex):\n        date_inp = qtw.QDateEdit(parent, calendarPopup=True)\n        return date_inp\n```", "```py\n        self.dateDelegate = DateDelegate()\n        self.reviews.setItemDelegateForColumn(\n            reviews_model.fieldIndex('review_date'),\n            self.dateDelegate)\n```", "```py\n        self.new_review = qtw.QPushButton(\n            'New Review', clicked=self.add_review)\n        self.delete_review = qtw.QPushButton(\n            'Delete Review', clicked=self.delete_review)\n        self.layout().addRow(self.new_review, self.delete_review)\n```", "```py\n    def delete_review(self):\n        for index in self.reviews.selectedIndexes() or []:\n            self.reviews.model().removeRow(index.row())\n        self.reviews.model().select()\n```", "```py\n    def add_review(self):\n        reviews_model = self.reviews.model()\n        new_row = reviews_model.record()\n        defaults = {\n            'coffee_id': self.coffee_id,\n            'review_date': qtc.QDate.currentDate(),\n            'reviewer': '',\n            'review': ''\n        }\n        for field, value in defaults.items():\n            index = reviews_model.fieldIndex(field)\n            new_row.setValue(index, value)\n```", "```py\n        inserted = reviews_model.insertRecord(-1, new_row)\n        if not inserted:\n            error = reviews_model.lastError().text()\n            print(f\"Insert Failed: {error}\")\n        reviews_model.select()\n```", "```py\nDELETE * FROM my_table IF category_id == 12;\n```", "```py\nINSERT INTO flavors(name) VALUES ('hazelnut', 'vanilla', 'caramel', 'onion');\n```", "```py\ndata = {'brand': 'generic', 'name': 'cheap coffee',\n    'roast': 'light'}\n# Your code here:\n```", "```py\nflavor_model = qts.QSqlTableModel()\nflavor_model.setTable('flavors')\nflavor_table = qtw.QTableView()\nflavor_table.setModel(flavor_model)\nmainform.layout().addWidget(flavor_table)\n```", "```py\ndef do_search(self, text):\n    self.sql_table_model.setFilter(f'description={text}')\n    self.sql_table_model.select()\n```"]