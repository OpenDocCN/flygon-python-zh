- en: Making a Gardener Robot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作园丁机器人
- en: All right my friends, you have understood some of the basics of input and output;
    now it's the time to make something to which we can hand over some of our daily
    responsibilities. This robot might not really look like a robot, but trust me,
    it will make your life easier. Most of all the plants in your garden will be blessing
    you for making it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，朋友们，你已经了解了一些输入和输出的基础知识；现在是时候制作一些我们可以交出一些日常责任的东西了。这个机器人可能看起来并不像一个机器人，但相信我，它会让你的生活更轻松。最重要的是，你花园中的大部分植物都会因为你的制作而祝福你。
- en: 'We will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Working with solenoids
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与电磁阀一起工作
- en: Making the robot
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作机器人
- en: Making it more intelligent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使它更智能
- en: Making it truly intelligent
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使它真正智能
- en: Working with solenoids
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与电磁阀一起工作
- en: What we are going to make is an automation system that will water your plants
    whenever they need it. So technically, once it is set up, you don't really have
    to worry ever about watering your green creatures. Whether you are at your home,
    at the office, or on a vacation, this will keep doing its job no matter what.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是一个自动系统，它会在植物需要时给它们浇水。所以从技术上讲，一旦它建立起来，你就不用担心给你的绿色生物浇水了。无论你是在家里、在办公室还是度假，它都会不管任何情况下继续工作。
- en: 'Now, you must be wondering how it will water the plants, so let me tell you,
    for every problem in this world, there exists a solution. In our case, that solution
    is called a solenoid valve. What it essentially does is switch the flow of liquids.
    There are various solenoid valves available in the market; some of the identifying
    features are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你一定在想它是如何给植物浇水的，所以让我告诉你，对于这个世界上的每个问题，都存在一个解决方案。在我们的情况下，这个解决方案被称为电磁阀。它的基本作用是切换液体的流动。市场上有各种各样的电磁阀；一些识别特征如下：
- en: '**Size**: They come in various sizes such as half an inch, three quarters of
    an inch, 1 inch, and so on. This basically will determine the flow rate of the
    solenoid valve.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尺寸**：它们有各种尺寸，如半英寸、四分之三英寸、1英寸等。这基本上将决定电磁阀的流量。'
- en: '**Medium**: Whether it is meant for fluid, gas, vapor, and so on.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**介质**：无论是液体、气体、蒸汽等。'
- en: '**Normal condition**:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常状态**：'
- en: '**Normally opened**: This valve will allow the flow of liquids in the off state—when
    no power is supplied to the valve'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通常打开**：这个阀门在关闭状态下会允许液体流动——当阀门没有供电时'
- en: '**Normally closed**: This valve will stop the flow of liquids in the off state—when
    no power is supplied to the valve'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通常关闭**：这个阀门在关闭状态下会阻止液体流动——当阀门没有供电时'
- en: '**Number of ways**: A simple valve will have an inlet and an outlet. So, when
    it is open, it will allow the liquid to flow from the inlet to the outlet. However,
    there can be other types of valve such as a three-way valve which might have two
    outlets and one inlet. It would regulate where the flow of the liquid would happen.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方式数量**：一个简单的阀门会有一个进口和一个出口。所以，当它打开时，它会允许液体从进口流向出口。然而，还可以有其他类型的阀门，比如三通阀，可能有两个出口和一个进口。它会调节液体的流动方向。'
- en: There can be some more specifics in terms of the valves as well, but for now
    that's all we need to know. One thing to notice about the solenoid valve is that
    these valves can either be opened or closed. Achieving any state in between or
    controlling flow via these valves is not possible. For this we can use a servo
    valve or motor valve. But as of now, we don't need it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 阀门的一些具体细节也可能会有所不同，但目前我们只需要知道这些。关于电磁阀要注意的一点是，这些阀门可以打开或关闭。无法实现这些阀门之间的任何状态或通过这些阀门控制流动。为此，我们可以使用伺服阀或电动阀。但目前我们不需要。
- en: What we will be using in this chapter is a half inch valve for water/fluid,
    which is normally closed. When you look closely at this valve you will see that
    it operates at 12 volts and the current consumption is close to 1 amp. This is
    a lot of current for Raspberry Pi. The upper limit of current that Raspberry Pi
    can provide per pin is about 50 milliamp. So if we connect this valve to Raspberry
    Pi then it's surely not going to work.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个半英寸的水/液体阀，它通常是关闭的。当你仔细看这个阀时，你会发现它在12伏特下运行，电流消耗接近1安培。这对树莓派来说是很大的电流。树莓派每个引脚可以提供的电流上限约为50毫安。所以如果我们把这个阀接到树莓派上，它肯定不会工作。
- en: What do we do now? The answer to this question is a relay. The basic job of
    a relay is to re-lay the circuits. Basically, it's an electronically controlled
    switch. The basic job of a relay is to switch devices that have a higher current/voltage
    consumption than what can be given by a controlling unit on and off. This is a
    fairly simple device, as you can see in the diagram. There are two circuits. One
    is depicted in blue, which is a low voltage and low current circuit. This circuit
    is powering up a coil. The other circuit is depicted in red and black. This circuit
    is a high voltage, high current circuit.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在该怎么办？这个问题的答案是继电器。继电器的基本工作是重新布置电路。基本上，它是一个电子控制开关。继电器的基本工作是打开和关闭具有比控制单元提供的更高电流/电压消耗的设备。这是一个相当简单的设备，正如你在图中所看到的。有两个电路。一个是蓝色的，是低电压和低电流电路。这个电路正在给线圈供电。另一个电路是红色和黑色的。这个电路是高电压、高电流电路。
- en: 'In the initial stages, as you can see, the high voltage high current circuit
    is not complete and the oven will not work:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始阶段，正如你所看到的，高电压高电流电路不完整，烤箱不会工作：
- en: '![](Images/0045c276-12d5-466a-b712-5ae02a54e2e6.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0045c276-12d5-466a-b712-5ae02a54e2e6.png)'
- en: 'Now, in this second diagram, you can see that the blue circuit is connected
    to the 5V power source and that the coil is energized. Whenever a coil gets energized,
    it forms an electromagnet and attracts the metal leaf of the high power circuit
    to make the circuit complete, hence powering up the oven:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这第二个图中，你可以看到蓝色电路连接到5V电源，线圈被激活。每当线圈被激活，它就形成一个电磁铁，吸引高功率电路的金属片，使电路完整，从而给烤箱供电：
- en: '![](Images/761c5221-8448-48a8-a7d4-3bd0e7711f4b.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/761c5221-8448-48a8-a7d4-3bd0e7711f4b.png)'
- en: This is how a solenoid works. The consumption of the coil is hardly a few milliamps,
    hence it is very easy to actuate a coil via a micro-controller. This in turn makes
    a contact between the final circuit.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是电磁阀的工作原理。线圈的消耗几乎只有几毫安，因此通过微控制器驱动线圈非常容易。这反过来使得最终电路之间产生接触。
- en: 'There are various kinds of relays available on the market; some of the identifying
    features are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有各种类型的继电器；一些识别特征如下：
- en: '**Max output voltage**: The maximum voltage that it can handle'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大输出电压：它可以处理的最大电压
- en: '**Maximum output current**: The maximum current that it can bear for any output
    device connected to it'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大输出电流：它可以承受的连接到它的任何输出设备的最大电流
- en: '**Signal voltage**: The voltage that it requires switch the components on or
    off'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号电压：它需要开关组件的电压
- en: '**Normal condition**:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常条件：
- en: '**Normal off**: This will not allow any current to flow until the time the
    signal is not received'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常关闭：这将不允许任何电流流动，直到接收到信号为止
- en: '**Normal on**: It will allow the current to flow until the time the signal
    is not received'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常开启：它将允许电流流动，直到接收到信号为止
- en: Now, coming back to our gardening robot, the solenoid attached to it will be
    working on 1 amp and 12V, so any relay which can supply equal to or more than
    1 amp and 12V would work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我们的园艺机器人，连接到它的电磁阀将在1安培和12V上工作，因此任何可以提供等于或大于1安培和12V的继电器都可以工作。
- en: Commonly, the relays available on the market are 120V and 12 amp DC. One important
    thing to remember is that there will be two separate ratings for AC and DC voltage
    and current. As our solenoid will be working at 12V, we will only be considering
    the DC upper limit.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，市场上可用的继电器是120V和12安培直流。要记住的一件重要事情是交流电压和直流电压和电流将有两个单独的等级。由于我们的电磁阀将在12V下工作，我们只考虑直流的上限。
- en: Making the robot
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作机器人
- en: 'Now, let''s get down to making the robot. Firstly, you need to make the water
    connection from the tap to the solenoid and from the solenoid to the sprinkler.
    You also have to make the connection, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始制作机器人。首先，您需要从水龙头到电磁阀的水管连接，从电磁阀到洒水器的连接。您还需要进行以下连接：
- en: '![](Images/a2fe556c-551e-4c36-a0bd-eeafc2fcea3c.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a2fe556c-551e-4c36-a0bd-eeafc2fcea3c.png)'
- en: 'Now let''s start programming. We will be interfacing a soil moisture sensor
    in this robot. The job of this sensor is to determine the amount of water in the
    soil. By determining this, we can understand if the garden needs water or not.
    This soil moisture sensor is an analogue sensor, hence we will be using an ADC
    to convert the analogue reading to Pi-understandable digital values. So let''s
    get going:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始编程。在这个机器人中，我们将接口一个土壤湿度传感器。该传感器的工作是确定土壤中的水量。通过确定这一点，我们可以了解花园是否需要水。这个土壤湿度传感器是一个模拟传感器，因此我们将使用ADC将模拟读数转换为树莓派可理解的数字值。所以让我们开始吧：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before you run this code, let''s understand what it is actually doing:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此代码之前，让我们先了解它实际上在做什么：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`moisture_percentage = 20` is the percentage that will act as a threshold;
    if the moisture level in the soil becomes less than 20% then your garden needs
    water. It is this condition that your robot will keep looking for; once this condition
    is met then appropriate action can be taken. This percentage can also be changed
    to `30`, `40`, or any other value as per your garden''s needs:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`moisture_percentage = 20`是一个阈值百分比；如果土壤中的湿度水平低于20%，那么您的花园就需要水。这是您的机器人将继续寻找的条件；一旦满足这个条件，就可以采取适当的行动。这个百分比也可以根据您花园的需要更改为`30`、`40`或其他任何值：'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The ADC is a 16-bit device—there are 16 binary digits that can represent a
    value. Hence, the value can be between `0` and `2^(15)` or, in other words, between
    `0` and `32768`. Now, it is simple math that for every percentage of moisture
    the ADC will give the following reading: `32768/100`, or `327.68`. Hence, to find
    out the percentage of moisture in the soil, we would have to divide the actual
    value given by the ADC by `327.68`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ADC是一个16位设备——有16个二进制数字可以表示一个值。因此，该值可以在`0`和`2^(15)`之间，换句话说，可以在`0`和`32768`之间。现在，很简单的数学，对于每个百分比的湿度，ADC将给出以下读数：`32768/100`，或`327.68`。因此，要找出土壤中的湿度百分比，我们需要将ADC给出的实际值除以`327.68`。
- en: The rest of the code is fairly simple and, once you go through it, it won't
    be very hard for you to understand.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的代码非常简单，一旦您阅读它，您就不会很难理解。
- en: Making it more intelligent
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使其更智能
- en: Congratulations on making your first robot! But did you notice one problem?
    The robot we made was continuously looking for a moisture value and, as soon as
    it noticed that the moisture value was low, it suddenly pumped water and made
    sure that the humidity of the soil was always more than 20%. However, this is
    not required. In general, we water the garden once or twice a day. If we water
    it more then it might not be good for the plants.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 祝贺您制作了您的第一个机器人！但您是否注意到了一个问题？我们制作的机器人一直在寻找湿度值，一旦注意到湿度值偏低，它就会突然泵水，并确保土壤的湿度始终高于20%。然而，这是不必要的。一般来说，我们每天浇水一两次。如果我们浇水更多，那对植物可能不利。
- en: So, let's go ahead and make it slightly more intelligent and make it water the
    plants only when the moisture level is low at a certain time. This time, we won't
    need to make any changes to the hardware; we simply need to tweak the code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续使它稍微更智能化，并且只在特定时间土壤湿度低时给植物浇水。这一次，我们不需要对硬件进行任何更改；我们只需要微调代码。
- en: 'Let''s go ahead and upload the following code, and then see what exactly happens:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续上传以下代码，然后看看到底发生了什么：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code might look a little alien to you, but trust me, it is as simple as
    it can get. Let''s see what''s happening step by step:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可能对您来说有点陌生，但相信我，它就是这么简单。让我们一步一步地看看发生了什么：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This line of code is importing daytime instances from the date time library.
    This is a library which is by default in Python. All we need to do is to call
    it. Now, what it does is that without any hustle and bustle, it helps us determine
    the time within our code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码是从日期时间库中导入日期时间实例。这是Python中默认的一个库。我们只需要调用它。它的作用是在我们的代码中轻松确定时间。
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are several times when we have to do something over and over again. These
    sets of code can be a few repetitive lines or multiple pages of code. Hence, rewriting
    that code doesn't make sense at all. We can create a function. In this function,
    we can define what will happen whenever it is called. Here in this line, we have
    created a function by the name of `check_moisture()`; now, whenever this function
    is called within a program, there will be a set of activities that will be performed.
    The set of activities that will be performed is defined by the user. So, whenever
    we write `def`, then it means that we are defining a function; thereafter, we
    write the name of the function that needs to be defined.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们必须一遍又一遍地做一些事情。这些代码集可以是几行重复的代码，也可以是多页的代码。因此，重写那些代码毫无意义。我们可以创建一个函数。在这个函数中，我们可以定义每次调用时会发生什么。在这行代码中，我们创建了一个名为`check_moisture()`的函数；现在，每当程序中调用这个函数时，将执行一系列活动。将要执行的一系列活动由用户定义。因此，每当我们写`def`时，就意味着我们正在定义一个函数；然后，我们写出需要定义的函数的名称。
- en: 'Once done, then whatever we write in the indentation following it will be done
    once the function is called. Do remember that whenever we call or define a function,
    it is denoted by an open and a closed `()` bracket at the end of the name of the
    function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，然后我们在缩进中写的任何内容都将在调用函数时执行。请记住，每当我们调用或定义一个函数时，函数名称的末尾都有一个开放和关闭的`()`括号表示：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`adc.get_last_result()` is a function of `adc`. The activity it does is to
    simply take the result from the pin defined earlier (pin number `0`) and fetch
    the reading to a variable `moisture_value`. So, after the line `moisture_value`
    will be the reading of the pin number `0` of the ADC or, in other words, the reading
    of the moisture sensor:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`adc.get_last_result()`是`adc`的一个函数。它的功能是简单地从之前定义的引脚（引脚号为`0`）获取结果，并将读数存储到变量`moisture_value`中。因此，在`moisture_value`之后将是ADC引脚号`0`的读数，或者换句话说，是湿度传感器的读数。'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The code `datetime` is an instance and a method of `.now()`. What this function
    does is that it updates the time. Now, the `date time.now()` has updated all the
    parameters of date and time which includes the hours, minutes, seconds, and even
    the date. It is up to us whether we want all of it or any specific part of the
    date and time. At present, we want to put the value of hours in the variable `H`,
    hence we are using a `.strftime(''%H'')` method. `strftime` stands for string
    format of time. So whatever value it outputs is in string format. `(''%H'') `
    means that it will give us the value of the hours only. Similarly, we can also
    get the time in minutes by using `(''%M'')` and `(''%S)`. We can also get the
    value of the date, month, and year with the following syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代码`datetime`是`.now()`的一个实例和方法。这个函数的作用是更新时间。现在，`datetime.now()`已经更新了日期和时间的所有参数，包括小时、分钟、秒，甚至日期。我们可以选择是否要全部或者日期和时间的任何特定部分。目前，我们想要将小时的值放入变量`H`中，因此我们使用了`.strftime('%H')`方法。`strftime`代表时间的字符串格式。因此，它输出的任何值都是以字符串格式。`('%H')`表示它只会给我们小时的值。同样，我们也可以使用`('%M')`和`('%S)`来获取分钟的时间。我们还可以使用以下语法获取日期、月份和年份的值：
- en: For getting the date:  `('%d')`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取日期：`('%d')`
- en: For getting the month: `('%m')`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取月份：`('%m')`
- en: For getting the year:  `('%Y')`
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取年份：`('%Y')`
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding condition, we are checking if the time is 7 o'clock or not;
    further, we are also checking if the time is less than or equal to 10 minutes
    or not. So this piece of code will only run the statement in the `if` statement
    when the time is `7` hours and between `0` and `10` minutes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的条件中，我们正在检查时间是否为7点；此外，我们还在检查时间是否小于或等于10分钟。因此，只有当时间为7小时并且在0到10分钟之间时，此代码段才会运行`if`语句中的语句。
- en: One thing to particularly note is that we have used an `and` between both the
    conditions, hence it will only run the code inside it once both the statements
    are absolutely true. There are some other statements we can use inside it, as
    well, such as `or`, in which case it will run the code if either of the statements
    is true.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 特别要注意的一点是，我们在两个条件之间使用了`and`，因此只有在两个语句都绝对为真时才会运行其中的代码。我们还可以在其中使用一些其他语句，比如`or`，在这种情况下，如果其中一个语句为真，它将运行代码。
- en: 'If we replace `and` with `or` in this `if` statement, then it will run the
    code for every 0 to 10 minutes of every hour and will run the code continuously
    for the entire time between 7:00 a.m. and 7:59 a.m.:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这个`if`语句中用`or`替换`and`，那么它将在每个小时的0到10分钟内运行代码，并且将在上午7:00到7:59之间的整个时间内连续运行代码：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you may remember, previously we defined a function by the name of `check_moisture()`.
    While defining that function, we had also defined the set of activities that would
    happen every time this function is called.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能记得的，之前我们定义了一个名为`check_moisture()`的函数。在定义该函数时，我们还定义了每次调用该函数时将发生的一系列活动。
- en: Now is the time to call that function. As soon as the program reaches this end
    of the code, it will execute the set of activities that was earlier defined in
    the function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是调用该函数的时候了。一旦程序到达代码的末尾，它将执行之前在函数中定义的一系列活动。
- en: So there we have it. Now, as soon as you run this code, it will wait for the
    time defined by you in the program. Once the specific time has been reached, then
    it will check for the moisture. If the moisture is less than the set value then
    it will start to water the plants until the time the moisture reaches above that
    threshold.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们就是这样。现在，一旦你运行这段代码，它将等待程序中定义的时间。一旦达到特定的时间，它将检查湿度。如果湿度低于设定值，它将开始给植物浇水，直到湿度超过阈值为止。
- en: Making it truly intelligent
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真正智能化
- en: Amazing work! We have started building things that are smarter than us by ourselves.
    But now we want to take it a step further and make it even smarter than us—that's
    what robots are here for. Not only to do what we do but to do all that in a better
    way.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 了不起的工作！我们已经开始自己建造比我们更聪明的东西。但现在我们想要更进一步，让它比我们更聪明——这就是机器人存在的意义。不仅仅是做我们做的事情，而是以更好的方式做所有这些。
- en: So, what can we improve? Well, we do not require a lot of water on a chilly
    winter day, but when it's summertime we need way more than what we drink in winter.
    The same thing happens with plants as well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们能做些什么改进呢？在寒冷的冬天，我们不需要太多的水，但在夏天，我们需要比冬天喝的水多得多。植物也是一样的情况。
- en: In winter, the amount of water they need is way less. Furthermore, even the
    rate of evaporation of water in the soil is slower. Hence, in both the conditions,
    we need to supply varying amounts of water to the garden. The question is, how
    do we do that?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在冬天，它们需要的水量要少得多。此外，土壤中的水蒸发速度也较慢。因此，在这两种情况下，我们需要向花园供应不同数量的水。问题是，我们该如何做到呢？
- en: Well, firstly, to know if it's hot or cold outside we require a sensor. We will
    be using a sensor named DHT11\. It is a cheap yet robust sensor that gives us
    the readings of both the temperature and humidity. The best part is, it is super
    cheap at a rate of around $2.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要知道外面是热还是冷，我们需要一个传感器。我们将使用一个名为DHT11的传感器。这是一个便宜但坚固的传感器，可以给我们提供温度和湿度的读数。最好的部分是，它的价格非常便宜，大约2美元。
- en: It has four pins. But if you presume that it will work to I2C protocols, then
    you would be wrong. It has its own data transfer methodology. It is good to have
    one single protocol for all the sensors, but often you will also find that there
    are various sensors or devices which work on a different or an altogether new
    protocol. DHT11 is one such sensor. In this case, we have the choice of either
    understanding the entire methodology of communication or to simply get the library
    from the manufacturer and use it at our disposal. At present we will be opting
    for the latter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 它有四个引脚。但是，如果你认为它将适用于I2C协议，那么你就错了。它有自己的数据传输方法。拥有一个单一的协议来处理所有传感器是很好的，但通常你也会发现有各种传感器或设备使用不同或全新的协议。DHT11就是这样的传感器。在这种情况下，我们可以选择要么理解整个通信方法，要么简单地从制造商那里获取库并随时使用。目前我们将选择后者。
- en: 'Now let''s see what the pins of the DHT11 look like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看DHT11的引脚是什么样子的：
- en: '![](Images/ca6928e6-75fe-41ad-b639-20471e708ddb.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ca6928e6-75fe-41ad-b639-20471e708ddb.png)'
- en: What you can see here is that there is only one signal pin which will do all
    the communication digitally. There are two pins for power and one of the pin is
    not in use. I.e. there is no significant purpose of the pin. It might be there
    just for soldering or for future use. This sensor works on a 5V supply and only
    needs a few milliamps, hence we can simply power it up by using Raspberry Pi.
    Now, for the data communication, we will connect the signal pin to GPIO pin number
    `4`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这里只有一个信号引脚，它将完成所有数字通信。有两个电源引脚，其中一个引脚没有使用。也就是说，这个引脚没有明显的用途。它可能只是用于焊接或将来使用。这个传感器使用5V电源，只需要几毫安，因此我们可以通过树莓派来为其供电。现在，对于数据通信，我们将把信号引脚连接到GPIO引脚号`4`。
- en: Before we start writing the code, let's first install the libraries for the
    communication between DHT11 and Raspberry Pi. We have done this before with the
    library of ADS1115, but in this one there are a few little tricks that we need
    to take care of. So let's get started.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，让我们先安装DHT11和树莓派之间的通信库。我们之前已经在ADS1115的库中做过这个，但在这个库中有一些小技巧需要我们注意。所以让我们开始吧。
- en: 'Firstly, we need to make sure that the operating system of your Raspberry Pi
    is up to date. So connect Raspberry Pi to the internet, open the command prompt
    in Raspberry Pi, and type the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保你的树莓派操作系统是最新的。所以将树莓派连接到互联网，打开树莓派的命令提示符，输入以下命令：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command will update the raspbian OS of your Raspberry Pi automatically. Then
    go ahead and type in this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将自动更新你的树莓派的raspbian操作系统。然后继续输入这个命令：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this command, we are installing the following packages:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个命令中，我们正在安装以下软件包：
- en: '`build-essential`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build-essential`'
- en: '`python-dev`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-dev`'
- en: '`python-openssl`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-openssl`'
- en: You must be wondering why we are installing all of these. Well, to cut a long
    story short, these are the dependencies for the library that we are about to install
    for the communication of DHT11\. We will not be able to use the library if these
    packages are not installed on Raspberry Pi.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定在想为什么我们要安装所有这些。好吧，长话短说，这些是我们即将安装的DHT11通信库的依赖项。如果这些软件包没有安装在树莓派上，我们将无法使用该库。
- en: 'Finally, we have to install the library; this is a generic library in which
    the function of communicating with the DHT11 sensor is also available. This should
    suffice for our needs of easy communication. Here is the command to install it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须安装库；这是一个通用库，其中还包括与DHT11传感器通信的功能。这应该足以满足我们的简单通信需求。以下是安装它的命令：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'All right then, we are good to go. Our system is ready to talk to DHT11\. Let''s
    first just see if what we have done up until now works the way we want. To do
    that, connect the DHT11 as follows; you can leave the rest of the components such
    as the solenoid and the soil humidity sensor connected as they are. They should
    not interfere. Now upload the the following code in Pi:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们准备好了。我们的系统已经准备好与DHT11进行通信。让我们首先看看我们到目前为止所做的是否按我们想要的方式工作。为了做到这一点，按照以下方式连接DHT11；你可以将其他组件如电磁阀和土壤湿度传感器连接好。它们不应该干扰。现在在树莓派上上传以下代码：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once you upload this code, you will see readings of the sensor on your screen.
    This code is simply providing you with the raw readings of the sensor. This code
    is super simple and everything written here will be well understood by you, except
    for a few lines of the code, which are:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你上传了这段代码，你将在屏幕上看到传感器的读数。这段代码只是简单地为你提供传感器的原始读数。这段代码非常简单，你会理解其中的一切，除了一些代码行，其中包括：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this line of the code, we are importing the `Adafruit_DHT` library in our
    code. This is the same library that will be used to communicate with the DHT11
    sensor:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的这一行中，我们在代码中导入了`Adafruit_DHT`库。这是与DHT11传感器通信的相同库。
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are different versions of DHT available, such as DHT11, DHT22, and so
    on. We need to tell the program which sensor we are using. Hence, we have allotted
    a value to the variable sensor. Later, you will see how we will be using it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: DHT有不同的版本，如DHT11、DHT22等。我们需要告诉程序我们使用的是哪种传感器。因此，我们已经为变量传感器分配了一个值。稍后，你将看到我们将如何使用它：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this line, we are assigning the value `4` to a variable called `pin`. This
    variable will be used to tell the program on which pin of the Raspberry Pi we
    have connected the DHT11:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们将值4赋给一个名为`pin`的变量。这个变量将用于告诉程序我们已经连接了DHT11的树莓派引脚。
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this line, we are using a method of the `Adafruit` library named `Adafruit_DHT.read_retry()`.
    Now, what this does is that it reads the DHT sensor and gives the reading of the
    sensor to the variables `humidity` and `temperature`. One thing to note is that
    the DHT11 gives a reading which is updated every 2 seconds. Hence, the readings
    that you will be receiving will be refresh after every 2 seconds.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们使用了`Adafruit`库的一个方法，名为`Adafruit_DHT.read_retry()`。现在，它的作用是读取DHT传感器，并将传感器的读数给变量`humidity`和`temperature`。需要注意的一点是，DHT11每2秒更新一次读数。因此，你将在每2秒后收到更新的读数。
- en: 'Once this code is through, then we can be sure that the sensor is working the
    way we want. Finally, the time has come to integrate all of the sensors together
    and make an entirely intelligent robot. As the solenoid, humidity sensor, and
    temperature sensors are already connected, all we need to do is to upload the
    code over to Pi and see the magic:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这段代码完成，我们就可以确信传感器正在按我们想要的方式工作。最后，是时候将所有传感器整合在一起，制作一个完全智能的机器人了。由于电磁阀、湿度传感器和温度传感器已经连接好，我们所需要做的就是将代码上传到树莓派上，然后看魔法发生。
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Pretty long code, right? It might look so, but once you write it line by line,
    you will certainly understand that it might be longer than all the code we have
    written so far, but it''s anything but complex. You might have understood most
    of the program, however let me explain a few new things that we have used here:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 代码很长，对吧？看起来是这样，但是一旦你逐行编写它，你肯定会明白，它可能比我们迄今为止编写的所有代码都长，但它一点也不复杂。你可能已经理解了大部分程序，但是让我解释一下我们在这里使用的一些新东西：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this line, we are defining a function named `check_moisture()`. Previously,
    if you remember, while we were making the function `check_moisture`, we were basically
    checking if the moisture value was either more or less than 20%. What if we have
    to check the moisture for 30%, 40%, and 50%? Would we make a separate function
    for that?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们定义了一个名为`check_moisture()`的函数。以前，如果你还记得，当我们制作`check_moisture`函数时，我们基本上是在检查湿度值是否大于或小于20％。如果我们需要检查30％、40％和50％的湿度怎么办？我们会为此制作一个单独的函数吗？
- en: Obviously not! What we do is we pass an argument to the function,  an argument
    is basically a variable placed within the brackets of the function. Now we can
    assign values to this variable for, for example, `check_moisture(30)`—now the
    value of the `m` will be `30` during the time that function is executing. Then
    again, if you call it as `check_moisture(40)` then the value of that `m` would
    be `40`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 显然不是！我们所做的是向函数传递一个参数，参数基本上是放在函数括号内的变量。现在我们可以为这个变量分配值，例如`check_moisture(30)`-现在在执行该函数时`m`的值将为30。然后，如果再次调用`check_moisture(40)`，那么`m`的值将为40。
- en: 'Now, as you can see, we are comparing values of `m` throughout the function:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以看到我们在整个函数中比较`m`的值。
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `if` statement will be checking the value of the `m` which is assigned while
    calling the function. This makes our job very easy and simple.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: if语句将检查调用函数时分配的“m”的值。这使我们的工作变得非常简单。
- en: 'Let''s see what the rest of the program is doing:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看程序的其余部分在做什么：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Every time the desired time is reached it will go ahead and check for the temperature.
    If the temperature is less than `15` it will call the function `check_moisture `
    with the value of the argument as `20`. Hence, if the moisture is less than 20%,
    then the water will be fed to the garden:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 每当达到所需的时间，它将继续检查温度。如果温度低于15度，它将调用函数`check_moisture`并将参数值设为20。因此，如果湿度低于20％，则会给花园浇水。
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `elif` or the `else if` statement is used after an `if` statement. This
    in common words means that if the previous `if` statement is not true, then it
    will check for this `if` statement. So, in the preceding line it will check if
    the temperature is between `15` and `28` degrees Celsius. If that is true, then
    it will check the moisture of the soil. The argument to the function is `30` in
    this line. Hence, it will check if the moisture is less than `30`. If so, then
    it will supply the water to the garden:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`elif`或`else if`语句在`if`语句之后使用。通俗地说，这意味着如果前面的`if`语句不成立，它将检查这个`if`语句。因此，在前一行中，它将检查温度是否在15到28摄氏度之间。如果是，它将检查土壤的湿度。在这一行中，函数的参数是30。因此，它将检查湿度是否低于30。如果是，它将给花园供水。'
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Similarly, in this line of code we are checking the temperature, and if it is
    equal to or more than `28` degrees Celsius then it will pass the value `40` as
    an argument to the function `check_moisture`. Hence this time it will check for
    moisture if it is `28` or more than that.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在这行代码中，我们正在检查温度，如果温度等于或超过`28`摄氏度，那么它将把值`40`作为参数传递给函数`check_moisture`。因此，这次它将检查湿度是否达到或超过`28`。
- en: As you can see, now the system will be checking the ambient temperature and,
    based on that, the amount of water to the plants is regulated. The best part is
    that it is consistent and will provide the right amount of water needed by the
    plants.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，现在系统将检查环境温度，并根据此调节植物所需的水量。最好的部分是它是一致的，并将提供植物所需的正确水量。
- en: The values mentioned in this entire chapter are simply assumed values. I would
    strongly recommend to tweak it based on where you live and what kind of plants
    you have in your garden to get the best out of the system.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中提到的数值仅为假设值。我强烈建议根据您所在地区和您花园中种植的植物来调整数值，以便系统发挥最佳效果。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered certain topics such as solenoid integration and
    soil humidity sensors to build a robot that waters your backyard garden automatically.
    Next up, we will cover the basics of motors.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了一些主题，如电磁阀集成和土壤湿度传感器，以构建一个可以自动给您的后院花园浇水的机器人。接下来，我们将介绍电机的基础知识。
