["```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport shodan\nimport re\n\nclass ShodanSearch:\n    \"\"\" Class for search in Shodan \"\"\"\n    def __init__(self,API_KEY):\n        self.api =  shodan.Shodan(API_KEY)    \n\n    def search(self,search):\n        \"\"\" Search from the search string\"\"\"\n        try:\n            result = self.api.search(str(search))\n            return result\n        except Exception as e:\n            print 'Exception: %s' % e\n            result = []\n            return result\n```", "```py\ndef get_host_info(self,IP):\n\"\"\" Get the information that may have shodan on an IP\"\"\n    try:\n        host = self.api.host(IP)\n        return host\n    except Exception as e:\n        print 'Exception: %s' % e\n        host = []\n        return host\n```", "```py\nimport shodan\nimport re\nsites =[]\nshodanKeyString = 'v4YpsPUJ3wjDxEqywwu6aF5OZKWj8kik'\nshodanApi = shodan.Shodan(shodanKeyString)\nresults = shodanApi.search(\"port: 21 Anonymous user logged in\")\nprint \"hosts number: \" + str(len( results['matches']))\nfor match in results['matches']:\n    if match['ip_str'] is not None:\n        print match['ip_str']\n        sites.append(match['ip_str'])\n```", "```py\nimport socket\nimport argparse\nimport re\nparser = argparse.ArgumentParser(description='Get banner server')\n# Main arguments\nparser.add_argument(\"-target\", dest=\"target\", help=\"target IP\", required=True)\nparser.add_argument(\"-port\", dest=\"port\", help=\"port\", type=int, required=True)\nparsed_args = parser.parse_args()\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect((parsed_args.target, parsed_args.port))\nsock.settimeout(2)\nhttp_get = b\"GET / HTTP/1.1\\nHost: \"+parsed_args.target+\"\\n\\n\"\ndata = ''\ntry:\n    sock.sendall(http_get)\n    data = sock.recvfrom(1024)\n    data = data[0]\n    print data\n    headers = data.splitlines()\n    #  use regular expressions to look for server header\n    for header in headers:\n        if re.search('Server:', header):\n            print(header)\nexcept socket.error:\n    print (\"Socket error\", socket.errno)\nfinally:\n    sock.close()\n```", "```py\n>>> import pythonwhois\n>>> whois = pythonwhois.get_whois(domain)\n>>> for key in whois.keys():\n>>  print \"%s : %s \\n\" %(key, whois[key])\n```", "```py\n>>> whois = pythonwhois.net.get_root_server(domain)\n```", "```py\n>>> whois = pythonwhois.net.get_whois_raw(domain)\n```", "```py\nif len(sys.argv) != 2:\n    print \u201c[-] usage python PythonWhoisExample.py <domain_name>\u201d\n    sys.exit()\nprint sys.argv[1]\nwhois = pythonwhois.get_whois(sys.argv[1])\nfor key in whois.keys():\n    print \u201c[+] %s : %s \\n\u201d %(key, whois[key])\nwhois = pythonwhois.net.get_root_server(sys.argv[1])\nprint whois\nwhois = pythonwhois.net.get_whois_raw(sys.argv[1])\nprint whois\n```", "```py\n$ pip install dnspython\n```", "```py\nimport dns\nimport dns.resolver\n```", "```py\nimport dns.resolver\nanswers = dns.resolver.query('python.org', 'A')\nfor rdata in answers:\n    print('IP', rdata.to_text())\n```", "```py\ndomain1= dns.name.from_text('domain1')\ndomain2= dns.name.from_text('domain2')\ndomain1.is_subdomain(domain2)\n```", "```py\nimport dns.reversename\ndomain = dns.reversename.from_address(\"ip_address\")\n```", "```py\nimport dns.reversename\nip = dns.reversename.to_address(\"domain\")\n```", "```py\nimport dns.reversename\n\nname = dns.reversename.from_address(\"ip_address\")\nprint name\nprint dns.reversename.to_address(name)\n```", "```py\nimport dns\nimport dns.resolver\nimport dns.query\nimport dns.zone\nimport dns.name\nimport dns.reversename\nimport sys\n\nif len(sys.argv) != 2:\n    print \"[-] usage python DNSPythonExample.py <domain_name>\"\n    sys.exit()\n\ndomain = sys.argv[1]\nansIPV4,ansMX,ansNS,ansIPV6=(dns.resolver.query(domain,'A'), dns.resolver.query(domain,'MX'),\ndns.resolver.query(domain, 'NS'),\ndns.resolver.query(domain, 'AAAA'))\n\nprint('Name Servers: %s' % ansNS.response.to_text())\nprint('Name Servers: %s' %[x.to_text() for x in ansNS])\nprint('Ipv4 addresses: %s' %[x.to_text() for x in ansIPV4])\nprint('Ipv4 addresses: %s' % ansIPV4.response.to_text())\nprint('Ipv6 addresses: %s' %[x.to_text() for x in ansIPV6])\nprint('Ipv6 addresses: %s' % ansIPV6.response.to_text())\nprint('Mail Servers: %s' % ansMX.response.to_text())\nfor data in ansMX:\n    print('Mailserver', data.exchange.to_text(), 'has preference', data.preference)\n```", "```py\nfrom pywebfuzz import fuzzdb\n```", "```py\nlogins = fuzzdb.Discovery.PredictableRes.Logins\n```", "```py\nfrom pywebfuzz import fuzzdb\nimport requests\n\nlogins = fuzzdb.Discovery.PredictableRes.Logins\ndomain = \"http://testphp.vulnweb.com\"\n  for login in logins:\n print(\"Testing... \"+ domain + login)\n response = requests.get(domain + login)\n if response.status_code == 200:\n print(\"Login Resource detected: \" +login)\n```", "```py\nhttpMethods= fuzzdb.attack_payloads.http_protocol.http_protocol_methods\n```", "```py\nfrom pywebfuzz import fuzzdb\nimport requests\nhttpMethods= fuzzdb.attack_payloads.http_protocol.http_protocol_methods\ndomain = \"http://www.google.com\" for method in httpMethods:\n    print(\"Testing... \"+ domain +\"/\"+ method)\n    response = requests.get(domain, method)\n    if response.status_code not in range(400,599):\n        print(\" Method Allowed: \" + method)\n```", "```py\ntomcat = fuzzdb.Discovery. PredictableRes.ApacheTomcat\n```", "```py\nfuzzdb.attack_payloads.sql_injection.detect.GenericBlind\n```", "```py\nfrom pywebfuzz import fuzzdb\nimport requests\n\nmysql_attacks= fuzzdb.attack_payloads.sql_injection.detect.MySQL\n\ndomain = \"http://testphp.vulnweb.com/listproducts.php?cat=\"\n\nfor attack in mysql_attacks:\n    print \"Testing... \"+ domain + attack\n    response = requests.get(domain + attack)\n    if \"mysql\" in response.text.lower(): \n        print(\"Injectable MySQL detected\")\n        print(\"Attack string: \"+attack)\n```", "```py\nfrom pywebfuzz import fuzzdb ldap_values=fuzzdb.attack_payloads.ldap.ldap_injection\n```"]