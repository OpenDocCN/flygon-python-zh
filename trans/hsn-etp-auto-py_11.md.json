["```py\nimport platform\nsystem = platform.system() print(system)\n```", "```py\nimport platform\nfrom pprint import pprint\nuname = platform.uname() pprint(uname)\n```", "```py\n#!/usr/bin/python __author__ = \"Bassim Aly\" __EMAIL__ = \"basim.alyy@gmail.com\"   import platform\n```", "```py\ndef check_feature(feature,string):\n  if feature in string.lower():\n  return True\n  else:\n  return False   def get_value_from_string(key,string):\n  value = \"NONE\"\n  for line in string.split(\"\\n\"):\n  if key in line:\n  value = line.split(\":\")[1].strip()\n  return value\n```", "```py\ncpu_features = [] with open('/proc/cpuinfo') as cpus:\n  cpu_data = cpus.read()\n  num_of_cpus = cpu_data.count(\"processor\")\n  cpu_features.append(\"Number of Processors: {0}\".format(num_of_cpus))\n  one_processor_data = cpu_data.split(\"processor\")[1]\n print one_processor_data\n    if check_feature(\"vmx\",one_processor_data):\n  cpu_features.append(\"CPU Virtualization: enabled\")\n  if check_feature(\"cpu_meltdown\",one_processor_data):\n  cpu_features.append(\"Known Bugs: CPU Metldown \")\n  model_name = get_value_from_string(\"model name \",one_processor_data)\n  cpu_features.append(\"Model Name: {0}\".format(model_name))    cpu_mhz = get_value_from_string(\"cpu MHz\",one_processor_data)\n  cpu_features.append(\"CPU MHz: {0}\".format((cpu_mhz)))   memory_features = [] with open('/proc/meminfo') as memory:\n  memory_data = memory.read()\n  total_memory = get_value_from_string(\"MemTotal\",memory_data).replace(\" kB\",\"\")\n  free_memory = get_value_from_string(\"MemFree\",memory_data).replace(\" kB\",\"\")\n  swap_memory = get_value_from_string(\"SwapTotal\",memory_data).replace(\" kB\",\"\")\n  total_memory_in_gb = \"Total Memory in GB: {0}\".format(int(total_memory)/1024)\n  free_memory_in_gb = \"Free Memory in GB: {0}\".format(int(free_memory)/1024)\n  swap_memory_in_gb = \"SWAP Memory in GB: {0}\".format(int(swap_memory)/1024)\n  memory_features = [total_memory_in_gb,free_memory_in_gb,swap_memory_in_gb]  \n```", "```py\nprint(\"============System Information============\")   print(\"\"\" System Type: {0} Hostname: {1} Kernel Version: {2} System Version: {3} Machine Architecture: {4} Python version: {5} \"\"\".format(platform.system(),\n  platform.uname()[1],\n  platform.uname()[2],\n  platform.version(),\n  platform.machine(),\n  platform.python_version()))     print(\"============CPU Information============\") print(\"\\n\".join(cpu_features))     print(\"============Memory Information============\") print(\"\\n\".join(memory_features))\n```", "```py\n#!/usr/bin/python __author__ = \"Bassim Aly\" __EMAIL__ = \"basim.alyy@gmail.com\"   import smtplib\nimp        ort platform\n```", "```py\ndef check_feature(feature,string):\n  if feature in string.lower():\n  return True\n  else:\n  return False   def get_value_from_string(key,string):\n  value = \"NONE\"\n  for line in string.split(\"\\n\"):\n  if key in line:\n  value = line.split(\":\")[1].strip()\n  return value\n```", "```py\ncpu_features = [] with open('/proc/cpuinfo') as cpus:\n  cpu_data = cpus.read()\n  num_of_cpus = cpu_data.count(\"processor\")\n  cpu_features.append(\"Number of Processors: {0}\".format(num_of_cpus))\n  one_processor_data = cpu_data.split(\"processor\")[1]\n if check_feature(\"vmx\",one_processor_data):\n  cpu_features.append(\"CPU Virtualization: enabled\")\n  if check_feature(\"cpu_meltdown\",one_processor_data):\n  cpu_features.append(\"Known Bugs: CPU Metldown \")\n  model_name = get_value_from_string(\"model name \",one_processor_data)\n  cpu_features.append(\"Model Name: {0}\".format(model_name))    cpu_mhz = get_value_from_string(\"cpu MHz\",one_processor_data)\n  cpu_features.append(\"CPU MHz: {0}\".format((cpu_mhz)))   memory_features = [] with open('/proc/meminfo') as memory:\n  memory_data = memory.read()\n  total_memory = get_value_from_string(\"MemTotal\",memory_data).replace(\" kB\",\"\")\n  free_memory = get_value_from_string(\"MemFree\",memory_data).replace(\" kB\",\"\")\n  swap_memory = get_value_from_string(\"SwapTotal\",memory_data).replace(\" kB\",\"\")\n  total_memory_in_gb = \"Total Memory in GB: {0}\".format(int(total_memory)/1024)\n  free_memory_in_gb = \"Free Memory in GB: {0}\".format(int(free_memory)/1024)\n  swap_memory_in_gb = \"SWAP Memory in GB: {0}\".format(int(swap_memory)/1024)\n  memory_features = [total_memory_in_gb,free_memory_in_gb,swap_memory_in_gb]   Data_Sent_in_Email = \"\" Header = \"\"\"From: PythonEnterpriseAutomationBot <basim.alyy@gmail.com> To: To Administrator <basim.alyy@gmail.com> Subject: Monitoring System Report   \"\"\" Data_Sent_in_Email += Header\nData_Sent_in_Email +=\"============System Information============\"   Data_Sent_in_Email +=\"\"\" System Type: {0} Hostname: {1} Kernel Version: {2} System Version: {3} Machine Architecture: {4} Python version: {5} \"\"\".format(platform.system(),\n  platform.uname()[1],\n  platform.uname()[2],\n  platform.version(),\n  platform.machine(),\n  platform.python_version())     Data_Sent_in_Email +=\"============CPU Information============\\n\" Data_Sent_in_Email +=\"\\n\".join(cpu_features)     Data_Sent_in_Email +=\"\\n============Memory Information============\\n\" Data_Sent_in_Email +=\"\\n\".join(memory_features)  \n```", "```py\nfromaddr = 'yyyyyyyyyyy@gmail.com' toaddrs  = 'basim.alyy@gmail.com' username = 'yyyyyyyyyyy@gmail.com' password = 'xxxxxxxxxx' server = smtplib.SMTP('smtp.gmail.com:587') server.ehlo() server.starttls() server.login(username,password)   server.sendmail(fromaddr, toaddrs, Data_Sent_in_Email) server.quit()\n```", "```py\nfrom datetime import datetime\ntime_now = datetime.now() time_now_string = time_now.strftime(\"%Y-%m-%d %H:%M:%S\")\nData_Sent_in_Email += \"====Time Now is {0}====\\n\".format(time_now_string) \n```", "```py\ncrontab -l\n```", "```py\n0 21 * * 5 /path/to/command\n```", "```py\n0 0 * * * /path/to/command\n```", "```py\n*/5 * * * * /path/to/command\n```", "```py\n30 7 * * * /usr/bin/python /root/Send_Email.py\n```", "```py\nansible all -m copy -a \"src=~/id_rsa dest=~/.ssh/id_rsa mode=0600\"\n```", "```py\n--- - hosts: localhost\n  tasks:\n    - name: create a username\n      user:\n        name: bassem\n        password: \"$crypted_value$\"\n        groups:\n          - root\n        state: present\n        shell: /bin/bash\n        createhome: yes\n  home: /home/bassem\n```", "```py\n- hosts: localhost\n  tasks:\n    - name: create user on windows machine\n      win_user:\n        name: bassem\n        password: 'access123'\n  password_never_expires: true\n  account_disabled: no\n  account_locked: no\n  password_expired: no\n  state: present\n        groups:\n          - Administrators\n          - Users\n```"]