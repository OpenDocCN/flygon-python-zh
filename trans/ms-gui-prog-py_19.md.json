["```py\n$ pip install --user PyQtWebEngine\n```", "```py\nfrom PyQt5 import QtWebEngineWidgets as qtwe\n```", "```py\n        navigation = self.addToolBar('Navigation')\n        style = self.style()\n        self.back = navigation.addAction('Back')\n        self.back.setIcon(style.standardIcon(style.SP_ArrowBack))\n        self.forward = navigation.addAction('Forward')\n        self.forward.setIcon(style.standardIcon(style.SP_ArrowForward))\n        self.reload = navigation.addAction('Reload')\n        self.reload.setIcon(style.standardIcon(style.SP_BrowserReload))\n        self.stop = navigation.addAction('Stop')\n        self.stop.setIcon(style.standardIcon(style.SP_BrowserStop))\n        self.urlbar = qtw.QLineEdit()\n        navigation.addWidget(self.urlbar)\n        self.go = navigation.addAction('Go')\n        self.go.setIcon(style.standardIcon(style.SP_DialogOkButton))\n```", "```py\n        webview = qtwe.QWebEngineView()\n        self.setCentralWidget(webview)\n```", "```py\n        webview.load(qtc.QUrl('http://www.alandmoore.com'))\n```", "```py\n        self.go.triggered.connect(lambda: webview.load(\n            qtc.QUrl(self.urlbar.text())))\n```", "```py\n        self.back.triggered.connect(webview.back)\n        self.forward.triggered.connect(webview.forward)\n        self.reload.triggered.connect(webview.reload)\n        self.stop.triggered.connect(webview.stop)\n```", "```py\n        self.tabs = qtw.QTabWidget(\n            tabsClosable=True, movable=True)\n        self.tabs.tabCloseRequested.connect(self.tabs.removeTab)\n        self.new = qtw.QPushButton('New')\n        self.tabs.setCornerWidget(self.new)\n        self.setCentralWidget(self.tabs)\n```", "```py\n    def add_tab(self, *args):\n        webview = qtwe.QWebEngineView()\n        tab_index = self.tabs.addTab(webview, 'New Tab')\n```", "```py\n        webview.urlChanged.connect(\n            lambda x: self.tabs.setTabText(tab_index, x.toString()))\n        webview.urlChanged.connect(\n            lambda x: self.urlbar.setText(x.toString()))\n```", "```py\n        webview.setHtml(\n            '<h1>Blank Tab</h1><p>It is a blank tab!</p>',\n            qtc.QUrl('about:blank'))\n```", "```py\n    def on_back(self):\n        self.tabs.currentWidget().back()\n\n    def on_forward(self):\n        self.tabs.currentWidget().forward()\n\n    def on_reload(self):\n        self.tabs.currentWidget().reload()\n\n    def on_stop(self):\n        self.tabs.currentWidget().stop()\n\n    def on_go(self):\n        self.tabs.currentWidget().load(\n            qtc.QUrl(self.urlbar.text()))\n```", "```py\n        self.back.triggered.connect(self.on_back)\n        self.forward.triggered.connect(self.on_forward)\n        self.reload.triggered.connect(self.on_reload)\n        self.stop.triggered.connect(self.on_stop)\n        self.go.triggered.connect(self.on_go)\n        self.urlbar.returnPressed.connect(self.on_go)\n        self.new.clicked.connect(self.add_tab)\n```", "```py\n        webview.createWindow = self.add_tab\n        return webview\n```", "```py\n        self.profile = qtwe.QWebEngineProfile()\n```", "```py\n        page = qtwe.QWebEnginePage(self.profile)\n        webview.setPage(page)\n```", "```py\n        history_dock = qtw.QDockWidget('History')\n        self.addDockWidget(qtc.Qt.RightDockWidgetArea, history_dock)\n        self.history_list = qtw.QListWidget()\n        history_dock.setWidget(self.history_list)\n```", "```py\n        self.tabs.currentChanged.connect(self.update_history)\n```", "```py\n    def update_history(self, *args):\n        self.history_list.clear()\n        webview = self.tabs.currentWidget()\n        if webview:\n            history = webview.history()\n            for history_item in reversed(history.items()):\n                list_item = qtw.QListWidgetItem()\n                list_item.setData(\n                    qtc.Qt.DisplayRole, history_item.url())\n                self.history_list.addItem(list_item)\n```", "```py\n        webview.urlChanged.connect(self.update_history)\n```", "```py\n    def navigate_history(self, item):\n        qurl = item.data(qtc.Qt.DisplayRole)\n        if self.tabs.currentWidget():\n            self.tabs.currentWidget().load(qurl)\n```", "```py\n        self.history_list.itemDoubleClicked.connect(\n            self.navigate_history)\n```", "```py\n        settings = qtwe.QWebEngineSettings.defaultSettings()\n```", "```py\n        # The web needs more drama:\n        settings.setFontFamily(\n            qtwe.QWebEngineSettings.SansSerifFont, 'Impact')\n```", "```py\n        settings.setAttribute(\n            qtwe.QWebEngineSettings.PluginsEnabled, True)\n```", "```py\n        find_dock = qtw.QDockWidget('Search')\n        self.addDockWidget(qtc.Qt.BottomDockWidgetArea, find_dock)\n        self.find_text = qtw.QLineEdit()\n        find_dock.setWidget(self.find_text)\n        self.find_text.textChanged.connect(self.text_search)\n```", "```py\nfunction highlight_selection(){\n    let tag = document.createElement('found');\n    tag.style.backgroundColor = 'lightgreen';\n    window.getSelection().getRangeAt(0).surroundContents(tag);}\n\nfunction highlight_term(term){\n    let found_tags = document.getElementsByTagName(\"found\");\n    while (found_tags.length > 0){\n        found_tags[0].outerHTML = found_tags[0].innerHTML;}\n    while (window.find(term)){highlight_selection();}\n    while (window.find(term, false, true)){highlight_selection();}}\n```", "```py\n        with open('finder.js', 'r') as fh:\n            self.finder_js = fh.read()\n```", "```py\n    def text_search(self, term):\n        term = term.replace('\"', '')\n        page = self.tabs.currentWidget().page()\n        page.runJavaScript(self.finder_js)\n        js = f'highlight_term(\"{term}\");'\n        page.runJavaScript(js)\n```", "```py\n        self.finder_script = qtwe.QWebEngineScript()\n        self.finder_script.setSourceCode(self.finder_js)\n```", "```py\n        self.finder_script.setWorldId(qtwe.QWebEngineScript.MainWorld)\n```", "```py\n        page.scripts().insert(self.finder_script)\n```", "```py\n    def text_search(self, term):\n        page = self.tabs.currentWidget().page()\n        js = f'highlight_term(\"{term}\");'\n        page.runJavaScript(js)\n```", "```py\nfunction highlight_term(term){\n    //cleanup\n    let found_tags = document.getElementsByTagName(\"found\");\n    while (found_tags.length > 0){\n        found_tags[0].outerHTML = found_tags[0].innerHTML;}\n    let matches = 0\n    //search forward and backward\n    while (window.find(term)){\n        highlight_selection();\n        matches++;\n    }\n    while (window.find(term, false, true)){\n        highlight_selection();\n        matches++;\n    }\n    return matches;\n}\n```", "```py\n    def text_search(self, term):\n        term = term.replace('\"', '')\n        page = self.tabs.currentWidget().page()\n        js = f'highlight_term(\"{term}\");'\n        page.runJavaScript(js, self.match_count)\n```", "```py\n    def match_count(self, count):\n        if count:\n            self.statusBar().showMessage(f'{count} matches ')\n        else:\n            self.statusBar().clearMessage()\n```", "```py\n   from PyQt5 import QtWebEngine as qtwe\n   w = qtwe.QWebEngineView()\n```", "```py\n   class UrlBar(qtw.QLineEdit):\n\n       url_request = qtc.pyqtSignal(str)\n\n       def __init__(self):\n           super().__init__()\n           self.returnPressed.connect(self.request)\n\n       def request(self):\n           self.url_request.emit(self.text())\n\n   mywebview = qtwe.QWebEngineView()\n   myurlbar = UrlBar()\n   myurlbar.url_request(mywebview.load)\n```", "```py\n   class WebView(qtwe.QWebEngineView):\n\n       def createWindow(self, _):\n\n           return self\n```"]