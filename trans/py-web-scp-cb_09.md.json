["```py\npython api.py\n```", "```py\nStarting the job listing API\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\nStarting the job listing API\n * Debugger is active!\n * Debugger pin code: 362-310-034\n```", "```py\ncurl localhost:5000/joblisting/1\n```", "```py\n{\n \"YouRequestedJobWithId\": \"1\"\n}\n```", "```py\nfrom flask import Flask\nfrom flask_restful import Resource, Api\n```", "```py\napp = Flask(__name__)\napi = Api(app)\n```", "```py\nclass JobListing(Resource):\n    def get(self, job_listing_id):\n        print(\"Request for job listing with id: \" + job_listing_id)\n        return {'YouRequestedJobWithId': job_listing_id}\n```", "```py\napi.add_resource(JobListing, '/', '/joblisting/<string:job_listing_id>')\n```", "```py\nif __name__ == '__main__':\n    print(\"Starting the job listing API\")\n    app.run(debug=True)\n```", "```py\ndef get_job_listing(job_listing_id):\n    print(\"Got a request for a job listing with id: \" + job_listing_id)\n\n    req = requests.get(\"https://stackoverflow.com/jobs/\" + job_listing_id)\n    content = req.text\n\n    bs = BeautifulSoup(content, \"lxml\")\n    script_tag = bs.find(\"script\", {\"type\": \"application/ld+json\"})\n\n    job_listing_contents = json.loads(script_tag.contents[0])\n    desc_bs = BeautifulSoup(job_listing_contents[\"description\"], \"lxml\")\n    just_text = desc_bs.find_all(text=True)\n\n    joined = ' '.join(just_text)\n    tokens = word_tokenize(joined)\n\n    stop_list = stopwords.words('english')\n    with_no_stops = [word for word in tokens if word.lower() not in stop_list]\n    two_grammed = tech_2grams(with_no_stops)\n    cleaned = remove_punctuation(two_grammed)\n\n    result = {\n        \"ID\": job_listing_id,\n        \"JSON\": job_listing_contents,\n        \"TextOnly\": just_text,\n        \"CleanedWords\": cleaned\n    }\n\n    return json.dumps(result)\n```", "```py\nfrom flask import Flask\nfrom flask_restful import Resource, Api\nfrom sojobs.scraping import get_job_listing_info\n\napp = Flask(__name__)\napi = Api(app)\n\nclass JobListing(Resource):\n    def get(self, job_listing_id):\n        print(\"Request for job listing with id: \" + job_listing_id)\n        listing = get_job_listing_info(job_listing_id)\n        print(\"Got the following listing as a response: \" + listing)\n        return listing\n\napi.add_resource(JobListing, '/', '/joblisting/<string:job_listing_id>')\n\nif __name__ == '__main__':\n    print(\"Starting the job listing API\")\n    app.run(debug=True)\n```", "```py\ncurl localhost:5000/joblisting/122517\n```", "```py\n\"{\\\"ID\\\": \\\"122517\\\", \\\"JSON\\\": {\\\"@context\\\": \\\"http://schema.org\\\", \\\"@type\\\": \\\"JobPosting\\\", \\\"title\\\": \\\"SpaceX Enterprise Software Engineer, Full Stack\\\", \\\"skills\\\": [\\\"c#\\\", \\\"sql\\\", \\\"javascript\\\", \\\"asp.net\\\", \\\"angularjs\\\"], \\\"description\\\": \\\"<h2>About this job</h2>\\\\r\\\\n<p><span>Location options: <strong>Paid relocation</strong></span><br/><span>Job type: <strong>Permanent</strong></span><br/><span>Experience level: <strong>Mid-Level, Senior</strong></span><br/><span>Role: <strong>Full Stack Developer</strong></span><br/><span>Industry: <strong>Aerospace, Information Technology, Web Development</strong></span><br/><span>Company size: <strong>1k-5k people</strong></span><br/><span>Company type: <strong>Private</strong></span><br/></p><br/><br/><h2>Technologies</h2> <p>c#, sql, javascr\n```", "```py\ndef get_job_listing_skills(job_listing_id):\n    print(\"Got a request for a job listing skills with id: \" + job_listing_id)\n\n    req = requests.get(\"https://stackoverflow.com/jobs/\" + job_listing_id)\n    content = req.text\n\n    bs = BeautifulSoup(content, \"lxml\")\n    script_tag = bs.find(\"script\", {\"type\": \"application/ld+json\"})\n\n    job_listing_contents = json.loads(script_tag.contents[0])\n    skills = job_listing_contents['skills']\n\n    return json.dumps(skills)\n```", "```py\nclass JobListingSkills(Resource):\n    def get(self, job_listing_id):\n        print(\"Request for job listing's skills with id: \" + job_listing_id)\n        skills = get_job_listing_skills(job_listing_id)\n        print(\"Got the following skills as a response: \" + skills)\n        return skills\n```", "```py\napi.add_resource(JobListingSkills, '/', '/joblisting/<string:job_listing_id>/skills')\n```", "```py\ncurl localhost:5000/joblisting/122517/skills\n```", "```py\n\"[\\\"c#\\\", \\\"sql\\\", \\\"javascript\\\", \\\"asp.net\\\", \\\"angularjs\\\"]\"\n```", "```py\ncurl 127.0.0.1:9200?pretty\n```", "```py\n{\n \"name\": \"KHhxNlz\",\n \"cluster_name\": \"elasticsearch\",\n \"cluster_uuid\": \"fA1qyp78TB623C8IKXgT4g\",\n \"version\": {\n \"number\": \"6.1.1\",\n \"build_hash\": \"bd92e7f\",\n \"build_date\": \"2017-12-17T20:23:25.338Z\",\n \"build_snapshot\": false,\n \"lucene_version\": \"7.1.0\",\n \"minimum_wire_compatibility_version\": \"5.6.0\",\n \"minimum_index_compatibility_version\": \"5.0.0\"\n },\n \"tagline\": \"You Know, for Search\"\n}\n```", "```py\nfrom elasticsearch import Elasticsearch\n```", "```py\nclass JobListing(Resource):\n    def get(self, job_listing_id):\n        print(\"Request for job listing with id: \" + job_listing_id)\n        listing = get_job_listing_info(job_listing_id)\n\n        es = Elasticsearch()\n        es.index(index='joblistings', doc_type='job-listing', id=job_listing_id, body=listing)\n\n        print(\"Got the following listing as a response: \" + listing)\n        return listing\n```", "```py\ncurl localhost:9200/joblistings\n```", "```py\n{\"error\":{\"root_cause\":[{\"type\":\"index_not_found_exception\",\"reason\":\"no such index\",\"resource.type\":\"index_or_alias\",\"resource.id\":\"joblistings\",\"index_uuid\":\"_na_\",\"index\":\"joblistings\"}],\"type\":\"index_not_found_exception\",\"reason\":\"no such index\",\"resource.type\":\"index_or_alias\",\"resource.id\":\"joblistings\",\"index_uuid\":\"_na_\",\"index\":\"joblistings\"},\"status\":404}\n```", "```py\ncurl localhost:9200/joblistings\n```", "```py\n{\n \"joblistings\": {\n  \"aliases\": {},\n  \"mappings\": {\n   \"job-listing\": {\n     \"properties\": {\n       \"CleanedWords\" {\n         \"type\": \"text\",\n         \"fields\": {\n           \"keyword\": {\n           \"type\": \"keyword\",\n           \"ignore_above\": 256\n          }\n        }\n       },\n     \"ID\": {\n       \"type\": \"text\",\n       \"fields\": {\n         \"keyword\": {\n         \"type\": \"keyword\",\n         \"ignore_above\": 256\n        }\n      }\n    },\n```", "```py\ncurl localhost:9200/joblistings/job-listing/122517\n```", "```py\n{\n \"_index\": \"joblistings\",\n \"_type\": \"job-listing\",\n \"_id\": \"122517\",\n \"_version\": 1,\n \"found\": true,\n \"_source\": {\n  \"ID\": \"122517\",\n  \"JSON\": {\n   \"@context\": \"http://schema.org\",\n   \"@type\": \"JobPosting\",\n   \"title\": \"SpaceX Enterprise Software Engineer, Full Stack\",\n   \"skills\": [\n    \"c#\",\n    \"sql\",\n    \"javascript\",\n    \"asp.net\",\n    \"angularjs\"\n  ],\n  \"description\": \"<h2>About this job</h2>\\r\\n<p><span>Location options: <strong>Paid relocation</strong></span><br/><span>Job type: <strong>Permanent</strong></span><br/><span>Experience level: <strong>Mid-Level,\n```", "```py\nes.index(index='joblistings', doc_type='job-listing', id=job_listing_id, body=listing)\n```", "```py\n{\n \"_index\": \"joblistings\",\n \"_type\": \"job-listing\",\n \"_id\": \"122517\",\n```", "```py\n    \"_version\": 1,\n```", "```py\n \"JSON\": {\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"JobPosting\",\n  \"title\": \"SpaceX Enterprise Software Engineer, Full Stack\",\n  \"skills\": [\n   \"c#\",\n   \"sql\",\n   \"javascript\",\n   \"asp.net\",\n   \"angularjs\"\n  ],\n```", "```py\n \"CleanedWords\": [\n  \"job\",\n  \"Location\",\n  \"options\",\n  \"Paid relocation\",\n  \"Job\",\n  \"type\",\n  \"Permanent\",\n  \"Experience\",\n  \"level\",\n```", "```py\nclass JobListing(Resource):\n    def get(self, job_listing_id):\n        print(\"Request for job listing with id: \" + job_listing_id)\n\n        es = Elasticsearch()\n        if (es.exists(index='joblistings', doc_type='job-listing', id=job_listing_id)):\n            print('Found the document in ElasticSearch')\n            doc =  es.get(index='joblistings', doc_type='job-listing', id=job_listing_id)\n            return doc['_source']\n\n        listing = get_job_listing_info(job_listing_id)\n        es.index(index='joblistings', doc_type='job-listing', id=job_listing_id, body=listing)\n\n        print(\"Got the following listing as a response: \" + listing)\n        return listing\n```", "```py\nclass JobListingSkills(Resource):\n    def get(self, job_listing_id):\n        print(\"Request for job listing's skills with id: \" + job_listing_id)\n\n        es = Elasticsearch()\n        if (es.exists(index='joblistings', doc_type='job-listing', id=job_listing_id)):\n            print('Found the document in ElasticSearch')\n            doc =  es.get(index='joblistings', doc_type='job-listing', id=job_listing_id)\n            return doc['_source']['JSON']['skills']\n\n        skills = get_job_listing_skills(job_listing_id)\n\n        print(\"Got the following skills as a response: \" + skills)\n        return skills\n```"]