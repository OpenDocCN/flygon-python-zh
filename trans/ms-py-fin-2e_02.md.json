["```py\n$ python --version\nPython 3.7.0\n```", "```py\n$ pip install virtualenv\n```", "```py\n$ cd my_project_folder\n$ virtualenv my_venv\n```", "```py\n$ source my_venv/bin/activate\n```", "```py\n$ my_project_folder\\my_venv\\Scripts\\activate\n```", "```py\n$ pip install jupyter\n```", "```py\n$ jupyter notebook \n... \nCopy/paste this URL into your browser when you connect for the first time, to login with a token: \n http://127.0.0.1:8888/?token=27a16ee4d6042a53f6e31161449efcf7e71418f23e17549d\n```", "```py\n>> import this\nThe Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. \nSimple is better than complex. \nComplex is better than complicated. \nFlat is better than nested. \nSparse is better than dense. \nReadability counts. \nSpecial cases aren't special enough to break the rules. \nAlthough practicality beats purity. \nErrors should never pass silently. \nUnless explicitly silenced. \nIn the face of ambiguity, refuse the temptation to guess. \nThere should be one-- and preferably only one --obvious way to do it. \nAlthough that way may not be obvious at first unless you're Dutch. \nNow is better than never. \nAlthough never is often better than *right* now. \nIf the implementation is hard to explain, it's a bad idea. \nIf the implementation is easy to explain, it may be a good idea. \nNamespaces are one honking great idea -- let's do more of those!\n```", "```py\n$ pip install quandl numpy pandas matplotlib\n```", "```py\n>>> import pandas\n>>> pandas.__version__'0.23.3'\n```", "```py\nIn [ ]:\n    import quandl\n\n    # Replace with your own Quandl API key\n    QUANDL_API_KEY = 'BCzkk3NDWt7H9yjzx-DY' \n    quandl.ApiConfig.api_key = QUANDL_API_KEY\n    df = quandl.get('EURONEXT/ABN')\n```", "```py\nIn [ ]: \n    df.head()\nOut[ ]: \n                 Open   High     Low   Last      Volume      Turnover\n    Date                                                             \n    2015-11-20  18.18  18.43  18.000  18.35  38392898.0  7.003281e+08\n    2015-11-23  18.45  18.70  18.215  18.61   3352514.0  6.186446e+07\n    2015-11-24  18.70  18.80  18.370  18.80   4871901.0  8.994087e+07\n    2015-11-25  18.85  19.50  18.770  19.45   4802607.0  9.153862e+07\n    2015-11-26  19.48  19.67  19.410  19.43   1648481.0  3.220713e+07\n\nIn [ ]:\n    df.tail()\nOut[ ]:\n                 Open   High    Low   Last     Volume      Turnover\n    Date                                                           \n    2018-08-06  23.50  23.59  23.29  23.34  1126371.0  2.634333e+07\n    2018-08-07  23.59  23.60  23.31  23.33  1785613.0  4.177652e+07\n    2018-08-08  24.00  24.39  23.83  24.14  4165320.0  1.007085e+08\n    2018-08-09  24.40  24.46  24.16  24.37  2422470.0  5.895752e+07\n    2018-08-10  23.70  23.94  23.28  23.51  3951850.0  9.336493e+07\n```", "```py\nIn [ ]:\n    %matplotlib inline\n    import matplotlib.pyplot as plt\n\n    df.plot();\n```", "```py\nIn [ ]:\n    prices = df['Last']\n    volumes = df['Volume']\n```", "```py\nIn [ ]:\n    prices.head()\nOut[ ]:\n    Date\n    2015-11-20    18.35\n    2015-11-23    18.61\n    2015-11-24    18.80\n    2015-11-25    19.45\n    2015-11-26    19.43\n    Name: Last, dtype: float64\n\nIn [ ]:\n    volumes.tail()\nOut[ ]:   \n    Date\n    2018-08-03    1252024.0\n    2018-08-06    1126371.0\n    2018-08-07    1785613.0\n    2018-08-08    4165320.0\n    2018-08-09    2422470.0\n    Name: Volume, dtype: float64\n```", "```py\nIn [ ]:\n    # The top plot consisting of daily closing prices\n    top = plt.subplot2grid((4, 4), (0, 0), rowspan=3, colspan=4)\n    top.plot(prices.index, prices, label='Last')\n    plt.title('ABN Last Price from 2015 - 2018')\n    plt.legend(loc=2)\n\n    # The bottom plot consisting of daily trading volume\n    bottom = plt.subplot2grid((4, 4), (3,0), rowspan=1, colspan=4)\n    bottom.bar(volumes.index, volumes)\n    plt.title('ABN Daily Trading Volume')\n\n    plt.gcf().set_size_inches(12, 8)\n    plt.subplots_adjust(hspace=0.75)\n```", "```py\n$ pip install mpl-finance\n```", "```py\nIn [ ]:\n    %matplotlib inline\n    import quandl\n    from mpl_finance import candlestick_ohlc\n    import matplotlib.dates as mdates\n    import matplotlib.pyplot as plt\n\n    quandl.ApiConfig.api_key = QUANDL_API_KEY\n    df_subset = quandl.get('EURONEXT/ABN', \n                           start_date='2018-07-01', \n                           end_date='2018-07-31')\n\n    df_subset['Date'] = df_subset.index.map(mdates.date2num)\n    df_ohlc = df_subset[['Date','Open', 'High', 'Low', 'Last']]\n\n    figure, ax = plt.subplots(figsize = (8,4))\n    formatter = mdates.DateFormatter('%Y-%m-%d')\n    ax.xaxis.set_major_formatter(formatter)\n    candlestick_ohlc(ax, \n                     df_ohlc.values, \n                     width=0.8, \n                     colorup='green', \n                     colordown='red')\n    plt.show()\n```", "```py\nIn [ ]:\n     %matplotlib inline\n     import quandl\n\n     quandl.ApiConfig.api_key = QUANDL_API_KEY\n     df = quandl.get('EURONEXT/ABN.4')\n     daily_changes = df.pct_change(periods=1)\n     daily_changes.plot();\n```", "```py\nIn [ ]:\n    df_cumsum = daily_changes.cumsum()\n    df_cumsum.plot();\n```", "```py\nIn [ ]:\n    daily_changes.hist(bins=50, figsize=(8, 4));\n```", "```py\nIn [ ]:\n    daily_changes.describe()\nOut[ ]:\n                 Last\n    count  692.000000\n    mean     0.000499\n    std      0.016701\n    min     -0.125527\n    25%     -0.007992\n    50%      0.000584\n    75%      0.008777\n    max      0.059123\n```", "```py\nIn [ ]:\n    df_filled = df.asfreq('D', method='ffill')\n    df_returns = df_filled.pct_change()\n    df_std = df_returns.rolling(window=30, min_periods=30).std()\n    df_std.plot();\n```", "```py\nIn [ ]:\n    %matplotlib inline\n    import quandl\n    from scipy import stats\n    from scipy.stats import probplot\n\n    quandl.ApiConfig.api_key = QUANDL_API_KEY\n    df = quandl.get('EURONEXT/ABN.4')\n    daily_changes = df.pct_change(periods=1).dropna()\n\n    figure = plt.figure(figsize=(8,4))\n    ax = figure.add_subplot(111)\n    stats.probplot(daily_changes['Last'], dist='norm', plot=ax)\n    plt.show();\n```", "```py\nIn [ ]:\n    %matplotlib inline\n    import quandl\n\n    quandl.ApiConfig.api_key = QUANDL_API_KEY\n    df = quandl.get(['EURONEXT/ABN.4', \n                     'EURONEXT/SANTA.4', \n                     'EURONEXT/KA.4'], \n                    collapse='monthly', \n                    start_date='2016-01-01', \n                    end_date='2017-12-31')\n    df.plot();\n```", "```py\nIn [ ]:\n    df.pct_change().corr()\nOut[ ]:\n                           EURONEXT/ABN - Last ... EURONEXT/KA - Last\n    EURONEXT/ABN - Last               1.000000 ...           0.096238\n    EURONEXT/SANTA - Last             0.809824 ...           0.058095\n    EURONEXT/KA - Last                0.096238 ...           1.000000\n```", "```py\nIn [ ]:\n    %matplotlib inline\n    import quandl\n\n    quandl.ApiConfig.api_key = QUANDL_API_KEY\n    df = quandl.get(['EURONEXT/ABN.4', 'EURONEXT/SANTA.4'], \n                    start_date='2016-01-01', \n                    end_date='2017-12-31')\n\n    df_filled = df.asfreq('D', method='ffill')\n    daily_changes= df_filled.pct_change()\n    abn_returns = daily_changes['EURONEXT/ABN - Last']\n    santa_returns = daily_changes['EURONEXT/SANTA - Last']\n    window = int(len(df_filled.index)/2)\n    df_corrs = abn_returns\\\n        .rolling(window=window, min_periods=window)\\\n        .corr(other=santa_returns)\n        .dropna()\n    df_corrs.plot(figsize=(12,8));\n```", "```py\nIn [ ]:\n    %matplotlib inline\n    import quandl\n    import pandas as pd\n\n    quandl.ApiConfig.api_key = QUANDL_API_KEY\n    df = quandl.get('EURONEXT/ABN.4')\n\n    df_filled = df.asfreq('D', method='ffill')\n    df_last = df['Last']\n\n    series_short = df_last.rolling(window=5, min_periods=5).mean()\n    series_long = df_last.rolling(window=30, min_periods=30).mean()\n\n    df_sma = pd.DataFrame(columns=['short', 'long'])\n    df_sma['short'] = series_short\n    df_sma['long'] = series_long\n    df_sma.plot(figsize=(12, 8));\n```", "```py\nIn [ ]:\n    %matplotlib inline\n    import quandl\n    import pandas as pd\n\n    quandl.ApiConfig.api_key = QUANDL_API_KEY\n    df = quandl.get('EURONEXT/ABN.4')\n\n    df_filled = df.asfreq('D', method='ffill')\n    df_last = df['Last']\n\n    series_short = df_last.ewm(span=5).mean()\n    series_long = df_last.ewm(span=30).mean()\n\n    df_sma = pd.DataFrame(columns=['short', 'long'])\n    df_sma['short'] = series_short\n    df_sma['long'] = series_long\n    df_sma.plot(figsize=(12, 8));\n```"]