["```py\n$ sudo pip3 install Adafruit_DHT\n```", "```py\n$ sudo apt install python3-pyqt5\n```", "```py\n$ sudo apt install python3-pyqt5.qtsql python3-pyqt5.qtmultimedia python3-pyqt5.qtchart python3-pyqt5.qtwebengine\n```", "```py\n$ apt search pyqt5\n```", "```py\nfrom RPi import GPIO\n```", "```py\nclass ThreeColorLed():\n    \"\"\"Represents a three color LED circuit\"\"\"\n\n    def __init__(self, red, green, blue, pinmode=GPIO.BOARD, freq=50):\n        GPIO.setmode(pinmode)\n```", "```py\n        self.pins = {\n            \"red\": red,\n            \"green\": green,\n            \"blue\": blue\n            }\n        for pin in self.pins.values():\n            GPIO.setup(pin, GPIO.OUT)\n```", "```py\n        # Turn all on and all off\n        for pin in self.pins.values():\n            GPIO.output(pin, GPIO.HIGH)\n            GPIO.output(pin, GPIO.LOW)\n```", "```py\n        self.pwms = dict([\n             (name, GPIO.PWM(pin, freq))\n             for name, pin in self.pins.items()\n            ])\n```", "```py\n        for pwm in self.pwms.values():\n            pwm.start(0)\n```", "```py\n    @staticmethod\n    def convert(val):\n        val = abs(val)\n        val = val//2.55\n        val %= 101\n        return val\n```", "```py\n    def set_color(self, red, green, blue):\n        \"\"\"Set color using RGB color values of 0-255\"\"\"\n        self.pwms['red'].ChangeDutyCycle(self.convert(red))\n        self.pwms['green'].ChangeDutyCycle(self.convert(green))\n        self.pwms['blue'].ChangeDutyCycle(self.convert(blue))\n```", "```py\n    def cleanup(self):\n        GPIO.cleanup()\n```", "```py\n        self.tcl = ThreeColorLed(8, 10, 12)\n```", "```py\n        ccd = qtw.QColorDialog()\n        ccd.setOptions(\n            qtw.QColorDialog.NoButtons\n            | qtw.QColorDialog.DontUseNativeDialog)\n        ccd.currentColorChanged.connect(self.set_color)\n        self.setCentralWidget(ccd)\n```", "```py\n    def set_color(self, color):\n        self.tcl.set_color(color.red(), color.green(), color.blue())\n```", "```py\nimport Adafruit_DHT\nfrom RPi import GPIO\n```", "```py\nSENSOR_MODEL = 11\nGPIO.setmode(GPIO.BCM)\n```", "```py\nclass SensorInterface(qtc.QObject):\n\n    temperature = qtc.pyqtSignal(float)\n    humidity = qtc.pyqtSignal(float)\n    read_time = qtc.pyqtSignal(qtc.QTime)\n```", "```py\n    def __init__(self, pin, sensor_model, fahrenheit=False):\n        super().__init__()\n        self.pin = pin\n        self.model = sensor_model\n        self.fahrenheit = fahrenheit\n```", "```py\n    @qtc.pyqtSlot()\n    def take_reading(self):\n        h, t = Adafruit_DHT.read_retry(self.model, self.pin)\n        if self.fahrenheit:\n            t = ((9/5) * t) + 32\n        self.temperature.emit(t)\n        self.humidity.emit(h)\n        self.read_time.emit(qtc.QTime.currentTime())\n```", "```py\n        widget = qtw.QWidget()\n        widget.setLayout(qtw.QFormLayout())\n        self.setCentralWidget(widget)\n```", "```py\n        p = widget.palette()\n        p.setColor(qtg.QPalette.WindowText, qtg.QColor('cyan'))\n        p.setColor(qtg.QPalette.Window, qtg.QColor('navy'))\n        p.setColor(qtg.QPalette.Button, qtg.QColor('#335'))\n        p.setColor(qtg.QPalette.ButtonText, qtg.QColor('cyan'))\n        self.setPalette(p)\n```", "```py\n        tempview = qtw.QLCDNumber()\n        humview = qtw.QLCDNumber()\n        tempview.setSegmentStyle(qtw.QLCDNumber.Flat)\n        humview.setSegmentStyle(qtw.QLCDNumber.Flat)\n        widget.layout().addRow('Temperature', tempview)\n        widget.layout().addRow('Humidity', humview)\n```", "```py\n        self.sensor = SensorInterface(4, SENSOR_MODEL, True)\n        self.sensor_thread = qtc.QThread()\n        self.sensor.moveToThread(self.sensor_thread)\n        self.sensor_thread.start()\n```", "```py\n        self.sensor.temperature.connect(tempview.display)\n        self.sensor.humidity.connect(humview.display)\n        self.sensor.read_time.connect(self.show_time)\n```", "```py\n    def show_time(self, qtime):\n        self.statusBar().showMessage(\n            f'Read at {qtime.toString(\"HH:mm:ss\")}')\n```", "```py\n        self.timer = qtc.QTimer(interval=(60000))\n        self.timer.timeout.connect(self.sensor.take_reading)\n        self.timer.start()\n```", "```py\n        readbutton = qtw.QPushButton('Read Now')\n        widget.layout().addRow(readbutton)\n        readbutton.clicked.connect(self.sensor.take_reading)\n```", "```py\nclass HWButton(qtc.QObject):\n\n    button_press = qtc.pyqtSignal()\n```", "```py\n    def __init__(self, pin):\n        super().__init__()\n        self.pin = pin\n        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)\n```", "```py\n       self.pressed = GPIO.input(self.pin) == GPIO.LOW\n```", "```py\n    def check(self):\n        pressed = GPIO.input(self.pin) == GPIO.LOW\n        if pressed != self.pressed:\n            if pressed:\n                self.button_press.emit()\n            self.pressed = pressed\n```", "```py\n        self.timer = qtc.QTimer(interval=50, timeout=self.check)\n        self.timer.start()\n```", "```py\n        # Comment out timer code\n        #self.timer = qtc.QTimer(interval=50, timeout=self.check)\n        #self.timer.start()\n        GPIO.add_event_detect(\n            self.pin,\n            GPIO.RISING,\n            callback=self.on_event_detect)\n```", "```py\n    def on_event_detect(self, *args):\n        self.button_press.emit()\n```", "```py\n        self.hwbutton = HWButton(8)\n        self.hwbutton.button_press.connect(self.sensor.take_reading)\n```", "```py\n   GPIO.setmode(GPIO.BCM)\n   GPIO.setup(8, GPIO.OUT)\n   GPIO.output(8, 1)\n```", "```py\n   GPIO.setmode(GPIO.BOARD)\n   GPIO.setup(12, GPIO.OUT)\n   GPIO.output(12, 0.5)\n```", "```py\n   class MotionSensor(qtc.QObject):\n\n       detection = qtc.pyqtSignal()\n\n       def __init__(self):\n           super().__init__()\n           GPIO.setmode(GPIO.BOARD)\n           GPIO.setup(8, GPIO.IN)\n           self.state = GPIO.input(8)\n\n       def check(self):\n           state = GPIO.input(8)\n           if state and state != self.state:\n               detection.emit()\n           self.state = state\n```"]