["```py\nfrom socket import*\nimport socket\n\n#create a TCP socket (SOCK_STREAM)\ns = socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0)\nprint('Socket created')\n```", "```py\nimport socket\nimport sys \n\nif __name__ == '__main__':\n\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    except socket.error as err:\n        print(\"Failed to crate a socket\")\n        print(\"Reason: %s\" %str(err))\n        sys.exit();\n\n    print('Socket created')\n\n    target_host = input(\"Enter the target host name to connect: \")\n    target_port = input(\"Enter the target port: \") \n\n    try:\n        sock.connect((target_host, int(target_port)))\n        print(\"Socket Connected to %s on port: %s\" %(target_host, target_port))\n    sock.shutdown(2)\n    except socket.error as err:\n        print(\"Failed to connect to %s on port %s\" %(target_host, target_port))\n        print(\"Reason: %s\" %str(err))\n        sys.exit();\n```", "```py\n**# python 7_1_tcp_client_socket.py**\n**Socket created**\n**Enter the target host name to connect: 'www.python.org'**\n**Enter the target port: 80**\n**Socket Connected to www.python.org on port: 80**\n\n```", "```py\n**# python 7_1_tcp_client_socket.py**\n**Socket created**\n**Enter the target host name to connect: www.asgdfdfdkflakslalalasdsdsds.invalid**\n**Enter the target port: 80**\n**Failed to connect to www.asgdfdfdkflakslalalasdsdsds.invalid on port 80**\n**Reason: [Errno -2] Name or service not known**\n\n```", "```py\nimport socket\n\nHOST = 'www.linux.org' # or 'localhost'\nPORT = 80\nBUFSIZ = 4096\nADDR = (HOST, PORT)\n\nif __name__ == '__main__':\n    client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_sock.connect(ADDR)\n\n    while True:\n        data = 'GET / HTTP/1.0\\r\\n\\r\\n'\n        if not data:\n            break\n        client_sock.send(data.encode('utf-8'))\n        data = client_sock.recv(BUFSIZ)\n        if not data:\n            break\n        print(data.decode('utf-8'))\n\n    client_sock.close()\n```", "```py\n**# python 7_2_simple_tcp_client.py**\n**HTTP/1.1 200 OK**\n**Date: Sat, 07 Mar 2015 16:23:02 GMT**\n**Server: Apache**\n**Last-Modified: Mon, 17 Feb 2014 03:19:34 GMT**\n**Accept-Ranges: bytes**\n**Content-Length: 111**\n**Connection: close**\n**Content-Type: text/html**\n\n**<html><head><META HTTP-EQUIV=\"refresh\" CONTENT=\"0;URL=/cgi- sys/defaultwebpage.cgi\"></head><body></body></html>**\n\n```", "```py\nimport socket\nfrom time import ctime\n\nHOST = 'localhost'\nPORT = 12345\nBUFSIZ = 1024\nADDR = (HOST, PORT)\n\nif __name__ == '__main__':\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(ADDR)\n    server_socket.listen(5)\n    server_socket.setsockopt( socket.SOL_SOCKET, socket.SO_REUSEADDR, 1 )\n\n    while True:\n        print('Server waiting for connection...')\n        client_sock, addr = server_socket.accept()\n        print('Client connected from: ', addr)\n\n        while True:\n            data = client_sock.recv(BUFSIZ)\n            if not data or data.decode('utf-8') == 'END':\n                break\n            print(\"Received from client: %s\" % data.decode('utf- 8'))\n            print(\"Sending the server time to client: %s\"  %ctime())\n            try:\n                client_sock.send(bytes(ctime(), 'utf-8'))\n            except KeyboardInterrupt:\n                print(\"Exited by user\")\n        client_sock.close()\n    server_socket.close()\n```", "```py\nimport socket\n\nHOST = 'localhost'\nPORT = 12345\nBUFSIZ = 256\n\nif __name__ == '__main__':\n    client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    host = input(\"Enter hostname [%s]: \" %HOST) or HOST\n    port = input(\"Enter port [%s]: \" %PORT) or PORT\n\n    sock_addr = (host, int(port))\n    client_sock.connect(sock_addr)\n\n    payload = 'GET TIME'\n    try:\n        while True:\n            client_sock.send(payload.encode('utf-8'))\n            data = client_sock.recv(BUFSIZ)\n            print(repr(data))\n            more = input(\"Want to send more data to server[y/n] :\")\n            if more.lower() == 'y':\n               payload = input(\"Enter payload: \")\n            else:\n                break\n    except KeyboardInterrupt:\n        print(\"Exited by user\") \n\n    client_sock.close()\n```", "```py\n**# python 7_3_tcp_server.py** \n**Server waiting for connection...**\n**Client connected from:  ('127.0.0.1', 59961)**\n**Received from client: GET TIME**\n\n**Sending the server time to client: Sun Mar 15 12:09:16 2015**\n**Server waiting for connection...**\n\n```", "```py\n**# python 7_4_tcp_client_socket_send_data.py** \n**Enter hostname [www.linux.org]: localhost**\n**Enter port [80]: 12345**\n**b'Sun Mar 15 12:09:16 2015'**\n**Want to send more data to server[y/n] :n**\n\n```", "```py\nfrom socket import socket, AF_INET, SOCK_DGRAM\nmaxsize = 4096\n\nsock = socket(AF_INET,SOCK_DGRAM)\nsock.bind(('',12345))\nwhile True:    \n  data, addr = sock.recvfrom(maxsize)\n    resp = \"UDP server sending data\"    \n  sock.sendto(resp,addr)\n```", "```py\nfrom socket import socket, AF_INET, SOCK_DGRAM\n\nMAX_SIZE = 4096\nPORT = 12345\n\nif __name__ == '__main__':\n    sock = socket(AF_INET,SOCK_DGRAM)\n    msg = \"Hello UDP server\"\n    sock.sendto(msg.encode(),('', PORT))\n    data, addr = sock.recvfrom(MAX_SIZE)\n    print(\"Server says:\")\n    print(repr(data))\n```", "```py\nimport sshtunnel\nfrom getpass import getpass\n\nssh_host = '192.168.56.101'\nssh_port = 22\nssh_user = 'YOUR_SSH_USERNAME'\n\nREMOTE_HOST = '192.168.56.101'\nREMOTE_PORT = 21\n\nfrom sshtunnel import SSHTunnelForwarder\nssh_password = getpass('Enter YOUR_SSH_PASSWORD: ')\n\nserver = SSHTunnelForwarder(\n    ssh_address=(ssh_host, ssh_port),\n    ssh_username=ssh_user,\n    ssh_password=ssh_password,\n    remote_bind_address=(REMOTE_HOST, REMOTE_PORT))\n\nserver.start()\nprint('Connect the remote service via local port: %s'  %server.local_bind_port)\n# work with FTP SERVICE via the `server.local_bind_port.\ntry:\n    while True:\n        pass\nexcept KeyboardInterrupt:\n    print(\"Exiting user user request.\\n\")\n    server.stop()\n```", "```py\n**$ ftp <localhost> <local_bind_port>**\n\n```", "```py\nimport socket\n\nif __name__ == '__main__':\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.setblocking(0)\n    sock.settimeout(0.5)\n    sock.bind((\"127.0.0.1\", 0))\n\n    socket_address =sock.getsockname()\n    print(\"Asynchronous socket server launched on socket: %s\" %str(socket_address))\n    while(1):\n        sock.listen(1)\n```", "```py\nimport socket\nimport ssl\nfrom ssl import wrap_socket, CERT_NONE, PROTOCOL_TLSv1, SSLError\nfrom ssl import SSLContext\nfrom ssl import HAS_SNI\n\nfrom pprint import pprint\n\nTARGET_HOST = 'www.google.com'\nSSL_PORT = 443\n# Use the path of CA certificate file in your system\nCA_CERT_PATH = '/usr/local/lib/python3.3/dist- packages/requests/cacert.pem'\n\ndef ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None, ca_certs=None, server_hostname=None, ssl_version=None):\n\n    context = SSLContext(ssl_version)\n    context.verify_mode = cert_reqs\n\n    if ca_certs:\n        try:\n            context.load_verify_locations(ca_certs)\n        except Exception as e:\n            raise SSLError(e)\n\n    if certfile:\n        context.load_cert_chain(certfile, keyfile)\n\n    if HAS_SNI:  # OpenSSL enabled SNI\n        return context.wrap_socket(sock, server_hostname=server_hostname)\n\n    return context.wrap_socket(sock)\n\nif __name__ == '__main__':\n    hostname = input(\"Enter target host:\") or TARGET_HOST\n    client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_sock.connect((hostname, 443))\n\n    ssl_socket = ssl_wrap_socket(client_sock, ssl_version=PROTOCOL_TLSv1, cert_reqs=ssl.CERT_REQUIRED, ca_certs=CA_CERT_PATH, server_hostname=hostname)\n\n    print(\"Extracting remote host certificate details:\")\n    cert = ssl_socket.getpeercert()\n    pprint(cert)\n    if not cert or ('commonName', TARGET_HOST) not in cert['subject'][4]:\n        raise Exception(\"Invalid SSL cert for host %s. Check if this is a man-in-the-middle attack!\" )\n    ssl_socket.write('GET / \\n'.encode('utf-8'))\n    #pprint(ssl_socket .recv(1024).split(b\"\\r\\n\"))\n    ssl_socket.close()\n    client_sock.close()\n```", "```py\ncontext = ssl.create_default_context(Purpose.SERVER_AUTH)\n```", "```py\nimport socket\nimport ssl\n\nSSL_SERVER_PORT = 8000\n\nif __name__ == '__main__':\n    server_socket = socket.socket()\n    server_socket.bind(('', SSL_SERVER_PORT))\n    server_socket.listen(5)\n    print(\"Waiting for ssl client on port %s\" %SSL_SERVER_PORT)\n    newsocket, fromaddr = server_socket.accept()\n    # Generate your server's  public certificate and private key pairs.\n    ssl_conn = ssl.wrap_socket(newsocket, server_side=True, certfile=\"server.crt\", keyfile=\"server.key\", ssl_version=ssl.PROTOCOL_TLSv1)\n    print(ssl_conn.read())\n    ssl_conn.write('200 OK\\r\\n\\r\\n'.encode())\n    print(\"Served ssl client. Exiting...\")\n    ssl_conn.close()\n    server_socket.close()\n```", "```py\nfrom socket import socket\nimport ssl\n\nfrom pprint import pprint\n\nTARGET_HOST ='localhost'\nTARGET_PORT = 8000\nCA_CERT_PATH = 'server.crt'\n\nif __name__ == '__main__':\n\n    sock = socket()\n    ssl_conn = ssl.wrap_socket(sock, cert_reqs=ssl.CERT_REQUIRED, ssl_version=ssl.PROTOCOL_TLSv1, ca_certs=CA_CERT_PATH)\n    target_host = TARGET_HOST \n    target_port = TARGET_PORT \n    ssl_conn.connect((target_host, int(target_port)))\n    # get remote cert\n    cert = ssl_conn.getpeercert()\n    print(\"Checking server certificate\")\n    pprint(cert)\n    if not cert or ssl.match_hostname(cert, target_host):\n        raise Exception(\"Invalid SSL cert for host %s. Check if this is a man-in-the-middle attack!\" %target_host )\n    print(\"Server certificate OK.\\n Sending some custom request... GET \")\n    ssl_conn.write('GET / \\n'.encode('utf-8'))\n    print(\"Response received from server:\")\n    print(ssl_conn.read())\n    ssl_conn.close()\n```"]