- en: Basic Networking - Socket Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本网络 - 套接字编程
- en: 'In this chapter, you will learn about sockets and three internet protocols:
    `http`, `ftplib`, and `urllib`. You will also learn about the `socket` module
    in Python, which is used for networking. `http` is a package that is used for
    working with the **Hypertext Transfer Protocol** (**HTTP**). The `ftplib` module
    is used for performing automated FTP-related work. `urllib` is a package that
    handles URL-related work.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习套接字和三种互联网协议：`http`，`ftplib`和`urllib`。您还将学习Python中用于网络的`socket`模块。`http`是一个用于处理**超文本传输协议**（**HTTP**）的包。`ftplib`模块用于执行自动化的与FTP相关的工作。`urllib`是一个处理与URL相关的工作的包。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Sockets
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 套接字
- en: The `http` package
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http`包'
- en: The `ftplib` module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ftplib`模块'
- en: The `urllib` package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib`包'
- en: Sockets
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 套接字
- en: In this section, we are going to learn about sockets. We are going to use Python's
    socket module. Sockets are endpoints for communication between machines, whether
    locally or across the internet. The socket module has a socket class, which is
    used to handle the data channel. It also has functions for network-related tasks.
    To use the functionality of the socket module, we first need to import the socket
    module.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习套接字。我们将使用Python的socket模块。套接字是用于机器之间通信的端点，无论是在本地还是通过互联网。套接字模块有一个套接字类，用于处理数据通道。它还具有用于网络相关任务的函数。要使用套接字模块的功能，我们首先需要导入套接字模块。
- en: 'Let''s see how to create a socket. The socket class has a socket function,
    with two arguments: `address_family` and `socket type`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建套接字。套接字类有一个套接字函数，带有两个参数：`address_family` 和 `socket类型`。
- en: 'The following is the syntax:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是语法：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`address_family` controls the OSI network layer protocol.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`address_family` 控制OSI网络层协议。'
- en: '**`socket type`** controls the transport layer protocol.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**`socket类型`** 控制传输层协议。'
- en: 'Python supports three address families: `AF_INET`, `AF_INET6`, and `AF_UNIX`.
    The most commonly used is `AF_INET`, which is used for internet addressing. `AF_INET6`
    is used for IPv6 internet addressing. `AF_UNIX` is used for **Unix Domain Sockets**
    (**UDS**), which is an inter-process communication protocol.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持三种地址族：`AF_INET`，`AF_INET6`和`AF_UNIX`。最常用的是`AF_INET`，用于互联网寻址。`AF_INET6`用于IPv6互联网寻址。`AF_UNIX`用于**Unix域套接字**（**UDS**），这是一种进程间通信协议。
- en: 'There are two socket types: `SOCK_DGRAM` and `SOCK_STREAM`. The `SOCK_DGRAM` socket
    type is used for message-oriented datagram transport; these are associated with
    the UDP. Datagram sockets deliver individual messages. `SOCK_STREAM` is used for
    stream-oriented transport; these are associated with TCP. Stream sockets provide
    byte streams between the client and server.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种套接字类型：`SOCK_DGRAM` 和 `SOCK_STREAM`。`SOCK_DGRAM` 套接字类型用于面向消息的数据报传输；这些与UDP相关联。数据报套接字传递单个消息。`SOCK_STREAM`
    用于面向流的传输；这些与TCP相关联。流套接字在客户端和服务器之间提供字节流。
- en: 'Sockets can be configured as server and client sockets. When both TCP/IP sockets
    are connected, communication will be bi-directional. Now we are going explore
    an example of client-server communication. We will create two scripts: `server.py`
    and `client.py`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字可以配置为服务器套接字和客户端套接字。当TCP/IP套接字都连接时，通信将是双向的。现在我们将探讨一个客户端-服务器通信的示例。我们将创建两个脚本：`server.py`和`client.py`。
- en: 'The `server.py` script is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`server.py`脚本如下：'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we will write a script for the client.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将为客户端编写一个脚本。
- en: 'The `client.py` script is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`client.py`脚本如下：'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we will run these two programs in two different Terminals. In the first
    Terminal, we'll run `server.py`, and in the second terminal, run `client.py`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在两个不同的终端中运行这两个程序。在第一个终端中，我们将运行`server.py`，在第二个终端中，运行`client.py`。
- en: 'The output will be as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '| **Terminal 1:** `python3 server.py` | **Terminal 2:** `python3 client.py`
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **终端1：** `python3 server.py` | **终端2：** `python3 client.py` |'
- en: '| `student@ubuntu:~/work$ python3 server.py``Connection from: (''127.0.0.1'',
    35120)``from connected user: Hello from client`` -> Hello from server !` | `student@ubuntu:~/work$
    python3 client.py``-> Hello from client``Received from server: Hello from server
    !`` ->` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `student@ubuntu:~/work$ python3 server.py``连接来自：（''127.0.0.1''，35120）``来自连接的用户：来自客户端的问候`` ->
    来自服务器的问候！` | `student@ubuntu:~/work$ python3 client.py``-> 来自客户端的问候``从服务器接收：来自服务器的问候！`` ->`
    |'
- en: The http package
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: http包
- en: 'In this section, we are going to learn about the `http` package. The `http`
    package has four modules:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`http`包。`http`包有四个模块：
- en: '`http.client`: This is a low-level HTTP protocol client'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.client`：这是一个低级HTTP协议客户端'
- en: '`http.server`: This contains basic HTTP server classes'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.server`：这包含基本的HTTP服务器类'
- en: '`http.cookies`: This is used for implementing state management with cookies'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.cookies`：这用于使用cookie实现状态管理'
- en: '`http.cookiejar`: This module provides cookie persistence'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http.cookiejar`：此模块提供cookie持久性'
- en: In this section, we are going to learn about the `http.client` and `http.server`
    modules.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`http.client`和`http.server`模块。
- en: The http.client module
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: http.client模块
- en: 'We are going to see two `http` requests: `GET` and `POST`. We are also going
    to make an `http` connection.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到两个`http`请求：`GET` 和 `POST`。我们还将建立一个`http`连接。
- en: 'First, we are going explore an example of making an `http` connection. For
    that, create a `make_connection.py` script and write the following content in
    it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将探讨一个创建`http`连接的示例。为此，创建一个`make_connection.py`脚本，并在其中编写以下内容：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding example, we made a connection with the URL mentioned on port
    80 for a specific timeout.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用了指定超时的端口80上的URL建立了连接。
- en: 'Now we will see the `http` `GET` request method; using this `GET` request method,
    we will see an example where we get a response code as well as a header list.
    Create a `get_example.py` script and write the following content in it:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到`http`的`GET`请求方法；使用这个`GET`请求方法，我们将看到一个示例，其中我们获得响应代码以及头列表。创建一个`get_example.py`脚本，并在其中编写以下内容：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the script as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output should be as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, we used `HTTPSConnection`, as the website is served
    over the `HTTPS` protocol. You can use `HTTPSConnection` or `HTTPConnection`,
    depending on the website you use. We provided a URL and checked the status with
    the connection object. After that, we got a header list. This header list contains
    information regarding the type of data sent back from the server. The `getheaders()` method
    will get list of headers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了`HTTPSConnection`，因为该网站是通过`HTTPS`协议提供的。您可以根据您使用的网站使用`HTTPSConnection`或`HTTPConnection`。我们提供了一个URL，并使用连接对象检查了状态。之后，我们得到了一个标题列表。这个标题列表包含了从服务器返回的数据类型的信息。`getheaders()`方法将获取标题列表。
- en: 'Now we will see an example of a `POST` request. We can post data to the URL
    using `HTTP POST`. For that, create a `post_example.py` script and write following
    content in it:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到一个`POST`请求的示例。我们可以使用`HTTP POST`将数据发布到URL。为此，创建一个`post_example.py`脚本，并在其中写入以下内容：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the script as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should get the following output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding example, we first created an `HTTPSConnection` object. Next,
    we created a `post_text` object, which posts `Hello World`. After that, we wrote
    a `POST` request, to which we received a response.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们首先创建了一个`HTTPSConnection`对象。接下来，我们创建了一个`post_text`对象，它发布了`Hello World`。之后，我们写了一个`POST`请求，得到了一个响应。
- en: The http.server module
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: http.server模块
- en: 'In this section, we are going to learn about a module from the `http` package,
    the `http.server` module. This module defines the classes used for implementing
    `HTTP` servers. It has two methods: `GET` and `HEAD`. By using this module, we
    can share files over a network. You can run the `http` server on any port. Make
    sure the port number is greater than `1024`. The default port number is `8000`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`http`包中的一个模块，即`http.server`模块。这个模块定义了用于实现`HTTP`服务器的类。它有两种方法：`GET`和`HEAD`。通过使用这个模块，我们可以在网络上共享文件。您可以在任何端口上运行`http`服务器。确保端口号大于`1024`。默认端口号是`8000`。
- en: You can use `http.server` as follows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下方式使用`http.server`。
- en: 'First, navigate to your desired directory and run the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到您想要的目录，然后运行以下命令：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now open your browser and write `localhost:9000` in your address bar and press
    *Enter*. You will get the output following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开您的浏览器，在地址栏中输入`localhost:9000`，然后按*Enter*。您将得到以下输出：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The ftplib module
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ftplib模块
- en: '`ftplib` is a module in Python that provides all the functionality needed to
    perform various actions over the FTP protocol. `ftplib` contains the FTP client
    class, as well as some helper functions. Using this module, we can easily connect
    to an FTP server to retrieve multiple files and process them. By importing the `ftplib`
    module, we can use all the functionality it provides.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`ftplib`是Python中的一个模块，它提供了执行FTP协议的各种操作所需的所有功能。`ftplib`包含FTP客户端类，以及一些辅助函数。使用这个模块，我们可以轻松地连接到FTP服务器，检索多个文件并处理它们。通过导入`ftplib`模块，我们可以使用它提供的所有功能。'
- en: In this section, we are going to cover how to do FTP transfers by using the `ftplib`
    module. We are going see various FTP objects.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何使用`ftplib`模块进行FTP传输。我们将看到各种FTP对象。
- en: Downloading files
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载文件
- en: 'In this section, we are going to learn about downloading files from another
    machine using `ftplib`. For that, create a `get_ftp_files.py` script and write
    the following content in it:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用`ftplib`模块从另一台机器下载文件。为此，创建一个`get_ftp_files.py`脚本，并在其中写入以下内容：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the script as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You should get the following output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding example, we retrieved multiple files from the host by using
    the `ftplib` module. First, we mentioned the IP address, username, and password
    of the other machine. To get all the files from the host, we used the `ftp.nlst()`
    function, and to download those files to our computer, we used the `ftp.retrbinary()`
    function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用`ftplib`模块从主机检索了多个文件。首先，我们提到了另一台机器的IP地址、用户名和密码。为了从主机获取所有文件，我们使用了`ftp.nlst()`函数，为了将这些文件下载到我们的计算机，我们使用了`ftp.retrbinary()`函数。
- en: 'Getting a welcome message using getwelcome():'
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用getwelcome()获取欢迎消息：
- en: Once an initial connection is established, a server usually returns a welcome
    message. This message comes via the `getwelcome()` function, and sometimes includes
    disclaimers or helpful information that may be relevant to the user.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立了初始连接，服务器通常会返回一个欢迎消息。这条消息通过`getwelcome()`函数传递，有时包括免责声明或对用户相关的有用信息。
- en: 'Now we will see an example of `getwelcome()`. Create a `get_welcome_msg.py` script
    and write the following content in it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到一个`getwelcome()`的示例。创建一个`get_welcome_msg.py`脚本，并在其中写入以下内容：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the script as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, we first mentioned the IP address, username, and password
    of the other machine. We used the `getwelcome()` function to get information after
    the initial connection was established.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先提到了另一台机器的IP地址、用户名和密码。我们使用了`getwelcome()`函数在建立初始连接后获取信息。
- en: Sending commands to the server using the sendcmd() function
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用sendcmd()函数向服务器发送命令
- en: In this section, we are going to learn about the `sendcmd()` function. We can
    use the `sendcmd()` function to send a simple `string` command to the server to
    get the String response. The client can send FTP commands such as `STAT`, `PWD`,
    `RETR`, and `STOR`. The `ftplib` module has multiple methods that can wrap these
    commands. The commands can be sent using the `sendcmd()` or `voidcmd()` methods.
    As an example, we are going to send a `STAT` command to check the status of a
    server.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`sendcmd()`函数。我们可以使用`sendcmd()`函数向服务器发送一个简单的`string`命令以获取字符串响应。客户端可以发送FTP命令，如`STAT`、`PWD`、`RETR`和`STOR`。`ftplib`模块有多个方法可以包装这些命令。这些命令可以使用`sendcmd()`或`voidcmd()`方法发送。例如，我们将发送一个`STAT`命令来检查服务器的状态。
- en: 'Create a `send_command.py` script and write the following content in it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`send_command.py`脚本，并在其中写入以下内容：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the script as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本如下：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You will get the following output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we first mentioned the IP address, username, and password
    of the other machine. Next, we used the `sendcmd()` method for the `STAT` command
    to the other machine. Then, we used `sendcmd()` for the `PWD` command.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们首先提到了另一台机器的IP地址，用户名和密码。接下来，我们使用`sendcmd()`方法发送`STAT`命令到另一台机器。然后，我们使用`sendcmd()`发送`PWD`命令。
- en: The urllib package
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: urllib包
- en: Like `http`, `urllib` is also a package that has various modules for working
    with URLs. The `urllib` module allows you to access several websites via your
    script. We can also download data, parse data, modify headers, and more using
    this module.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 像`http`一样，`urllib`也是一个包，其中包含用于处理URL的各种模块。`urllib`模块允许您通过脚本访问多个网站。我们还可以使用该模块下载数据，解析数据，修改标头等。
- en: '`urllib` has a few different modules, which are listed here:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`urllib`有一些不同的模块，列在这里：'
- en: '`urllib.request`: This is used for opening and reading URLs.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib.request`：用于打开和读取URL。'
- en: '`urllib.error`: This contains exceptions raised by `urllib.request`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib.error`：包含`urllib.request`引发的异常。'
- en: '`urllib.parse`: This is used for parsing URLs.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib.parse`：用于解析URL。'
- en: '`urllib.robotparser`: This is used for parsing `robots.txt` files.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urllib.robotparser`：用于解析`robots.txt`文件。'
- en: In this section, we are going to learn about opening a URL using `urllib` and
    how to read `html` files from the URL. We are going to see a simple example of
    the use of `urllib`. We will import `urllib.requests`. Then we assign the opening
    of the URL to a variable, then we will use a `.read()` command to read the data
    from the URL.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用`urllib`打开URL以及如何从URL读取`html`文件。我们将看到一个简单的`urllib`使用示例。我们将导入`urllib.requests`。然后我们将打开URL的操作赋给一个变量，然后我们将使用`.read()`命令从URL读取数据。
- en: 'Create a `url_requests_example.py` script and write the following content in
    it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`url_requests_example.py`脚本，并在其中写入以下内容：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the script as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本如下：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here is the output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding example, we used the `read()` method, which returns the byte
    array. This prints the HTML data returned by the `Imdb` home page in a non-human-readable
    format, but we can use the HTML parser to extract some useful information from
    it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用了`read()`方法，该方法返回字节数组。这会以非人类可读的格式打印`Imdb`主页返回的HTML数据，但我们可以使用HTML解析器从中提取一些有用的信息。
- en: Python urllib response headers
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python urllib响应标头
- en: 'We can get response headers by calling the `info()` function on the response
    object. This returns a dictionary, so we can also extract specific header data
    from the response. Create a `url_response_header.py` script and write the following
    content in it:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在响应对象上调用`info()`函数来获取响应标头。这将返回一个字典，因此我们还可以从响应中提取特定的标头数据。创建一个`url_response_header.py`脚本，并在其中写入以下内容：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the script as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本如下：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here is the output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned about sockets, which are used for bi-directional
    client-server communication. We learned about three internet modules: `http`,
    `ftplib`, and `urllib`. The `http` package has modules for the client and server: `http.client`
    and `http.server` respectively. Using `ftplib`, we downloaded files from another
    machine. We also looked at welcome messages and sending `send` commands.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了套接字，用于双向客户端-服务器通信。我们学习了三个互联网模块：`http`，`ftplib`和`urllib`。`http`包具有客户端和服务器的模块：`http.client`和`http.server`。使用`ftplib`，我们从另一台机器下载文件。我们还查看了欢迎消息和发送`send`命令。
- en: In the next chapter, we'll be covering building and sending emails. We will
    learn about message formats and adding multimedia content. Also, we are going
    to learn about SMTP, POP, and IMAP servers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍构建和发送电子邮件。我们将学习有关消息格式和添加多媒体内容。此外，我们将学习有关SMTP，POP和IMAP服务器的知识。
- en: Questions
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is socket programming?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是套接字编程？
- en: What is RPC?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是RPC？
- en: What are the different ways to import to user-defined modules or files?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入用户定义模块或文件的不同方式是什么？
- en: What is the difference between a list and a tuple ?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表和元组之间有什么区别？
- en: Can we have duplicate keys in a dictionary?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字典中是否可以有重复的键？
- en: What are the differences between the `urllib`, `urllib2`, and `requests` modules?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`urllib`，`urllib2`和`requests`模块之间有什么区别？'
- en: Further reading
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '`ftplib` documentation: [https://docs.python.org/3/library/ftplib.html](https://docs.python.org/3/library/ftplib.html)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ftplib`文档：[https://docs.python.org/3/library/ftplib.html](https://docs.python.org/3/library/ftplib.html)'
- en: '`xmlrpc` documentation: [https://docs.python.org/3/library/xmlrpc.html](https://docs.python.org/3/library/xmlrpc.html)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlrpc`文档：[https://docs.python.org/3/library/xmlrpc.html](https://docs.python.org/3/library/xmlrpc.html)'
