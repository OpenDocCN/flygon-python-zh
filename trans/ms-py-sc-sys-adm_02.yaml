- en: Debugging and Profiling Python Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和分析Python脚本
- en: Debugging and profiling play an important role in Python development. The debugger
    helps programmers to analyze the complete code. The debugger sets the breakpoints
    whereas the profilers run our code and give us the details of the execution time.
    The profilers will identify the bottlenecks in your programs. In this chapter,
    we'll learn about the `pdb` Python debugger, `cProfile` module, and `timeit` module
    to time the execution of Python code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试和分析在Python开发中扮演重要角色。调试器帮助程序员分析完整的代码。调试器设置断点，而分析器运行我们的代码并提供执行时间的详细信息。分析器将识别程序中的瓶颈。在本章中，我们将学习`pdb`
    Python调试器、`cProfile`模块和`timeit`模块来计算Python代码的执行时间。
- en: 'In this chapter, you''ll learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Python debugging techniques
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python调试技术
- en: Error handling (exception handling)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理（异常处理）
- en: Debugger tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试器工具
- en: Debugging basic program crashes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试基本程序崩溃
- en: Profiling and timing programs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析和计时程序
- en: Making programs run faster
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使程序运行更快
- en: What is debugging?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是调试？
- en: Debugging is a process that resolves the issues that occur in your code and
    prevent your software from running properly. In Python, debugging is very easy.
    The Python debugger sets conditional breakpoints and debugs the source code one
    line at a time. We'll debug our Python scripts using a `pdb` module that's present
    in the Python standard library.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是解决代码中出现的问题并防止软件正常运行的过程。在Python中，调试非常容易。Python调试器设置条件断点，并逐行调试源代码。我们将使用Python标准库中的`pdb`模块来调试我们的Python脚本。
- en: Python debugging techniques
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python调试技术
- en: 'To better debug a Python program, various techniques are available. We''re
    going to look at four techniques for Python debugging:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地调试Python程序，有各种技术可用。我们将看一下Python调试的四种技术：
- en: '`print()` statement: This is the simplest way of knowing what''s exactly happening
    so you can check what has been executed.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print()`语句：这是了解发生了什么的最简单方法，因此您可以检查已执行了什么。'
- en: '**`logging`**: This is like a `print` statement but with more contextual information
    so you can understand it fully.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`logging`**：这类似于`print`语句，但提供更多上下文信息，以便您可以完全理解。'
- en: '**`pdb`** debugger: This is a commonly used debugging technique. The advantage
    of using `pdb` is that you can use `pdb` from the command line, within an interpreter,
    and within a program.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pdb`调试器：这是一种常用的调试技术。使用`pdb`的优势是可以从命令行、在解释器内和在程序内部使用`pdb`。'
- en: 'IDE debugger: IDE has an integrated debugger. It allows developers to execute
    their code and then the developer can inspect while the program executes.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE调试器：IDE具有集成的调试器。它允许开发人员执行其代码，然后开发人员可以在程序执行时进行检查。
- en: Error handling (exception handling)
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理（异常处理）
- en: In this section, we're going to learn how Python handles exceptions. But first,
    what is an exception? An exception is an error that occurs during program execution.
    Whenever any error occurs, Python generates an exception that will be handled
    using a `try…except` block. Some exceptions can't be handled by programs so they
    result in error messages. Now, we are going to see some exception examples.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python如何处理异常。但首先，什么是异常？异常是程序执行过程中发生的错误。每当发生任何错误时，Python都会生成一个异常，该异常将使用`try…except`块进行处理。有些异常无法由程序处理，因此会导致错误消息。现在，我们将看一些异常示例。
- en: 'In your Terminal, start the `python3` interactive console and we will see some
    exception examples:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端中，启动`python3`交互式控制台，我们将看到一些异常示例：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These are some examples of exceptions. Now, we will see how we can handle the
    exceptions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些异常示例。现在，我们将看看如何处理这些异常。
- en: Whenever errors occur in your Python program, exceptions are raised. We can
    also forcefully raise an exception using `raise` keyword.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您的Python程序发生错误时，都会引发异常。我们还可以使用`raise`关键字强制引发异常。
- en: Now we are going to see a `try…except` block that handles an exception. In the `try`
    block, we will write a code that may generate an exception. In the `except` block,
    we will write a solution for that exception.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到一个处理异常的`try…except`块。在`try`块中，我们将编写可能生成异常的代码。在`except`块中，我们将为该异常编写解决方案。
- en: 'The syntax for `try…except` is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`try…except`的语法如下：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A `try` block can have multiple except statements. We can handle specific exceptions
    also by entering the exception name after the `except` keyword. The syntax for
    handling a specific exception is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`try`块可以有多个except语句。我们还可以在`except`关键字后输入异常名称来处理特定异常。处理特定异常的语法如下：'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are going to create an `exception_example.py` script to catch `ZeroDivisionError`**.**
    Write the following code in your script:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`exception_example.py`脚本来捕获`ZeroDivisionError`。在您的脚本中编写以下代码：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the script as follows and you will get the following output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行脚本，您将获得以下输出：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Debuggers tools
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试工具
- en: 'There are many debugging tools supported in Python:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持许多调试工具：
- en: '`winpdb`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`winpdb`'
- en: '`pydev`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pydev`'
- en: '`pydb`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pydb`'
- en: '`pdb`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pdb`'
- en: '`gdb`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gdb`'
- en: '`pyDebug`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyDebug`'
- en: In this section, we are going to learn about `pdb` Python debugger. `pdb` module
    is a part of Python's standard library and is always available to use.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`pdb` Python调试器。`pdb`模块是Python标准库的一部分，始终可供使用。
- en: The pdb debugger
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pdb调试器
- en: The `pdb` module is used to debug Python programs. Python programs use `pdb`
    interactive source code debugger to debug the programs. `pdb` sets breakpoints
    and inspects the stack frames, and lists the source code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`pdb`模块用于调试Python程序。Python程序使用`pdb`交互式源代码调试器来调试程序。`pdb`设置断点并检查堆栈帧，并列出源代码。'
- en: 'Now we will learn about how we can use the `pdb` debugger. There are three
    ways to use this debugger:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将学习如何使用`pdb`调试器。有三种使用此调试器的方法：
- en: Within an interpreter
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在解释器内
- en: From a command line
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行
- en: Within a Python script
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python脚本内
- en: 'We are going to create a `pdb_example.py` script and add the following content
    in that script:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`pdb_example.py`脚本，并在该脚本中添加以下内容：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using this script as an example to learn Python debugging, we will see how we
    can start the debugger in detail.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此脚本作为学习Python调试的示例，我们将详细了解如何启动调试器。
- en: Within an interpreter
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在解释器中
- en: To start the debugger from the Python interactive console, we are using `run()`
    or `runeval()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Python交互式控制台启动调试器，我们使用`run()`或`runeval()`。
- en: 'Start your `python3` interactive console. Run the following command to start
    the console:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 启动您的`python3`交互式控制台。运行以下命令启动控制台：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Import our `pdb_example` script name and the `pdb` module. Now, we are going
    to use `run()` and we are passing a string expression as an argument to `run()`
    that will be evaluated by the Python interpreter itself:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 导入我们的`pdb_example`脚本名称和`pdb`模块。现在，我们将使用`run()`，并将一个字符串表达式作为参数传递给`run()`，该表达式将由Python解释器自身进行评估：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To continue debugging, enter `continue` after the (`Pdb`) prompt and press *Enter*.
    If you want to know the options we can use in this, then after the (`Pdb`) prompt
    press the *Tab *key twice.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续调试，在（`Pdb`）提示后输入`continue`，然后按*Enter*。如果想要了解我们可以在其中使用的选项，那么在（`Pdb`）提示后按两次*Tab*键。
- en: 'Now, after entering `continue`, we will get the output as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在输入`continue`后，我们将得到以下输出：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From a command line
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行
- en: 'The simplest and most straightforward way to run a debugger is from a command
    line. Our program will act as input to the debugger. You can use the debugger
    from command line as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行调试器的最简单和最直接的方法。我们的程序将作为调试器的输入。您可以按以下方式从命令行使用调试器：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you run the debugger from the command line, source code will be loaded
    and it will stop the execution on the first line it finds. Enter `continue` to
    continue the debugging. Here''s the output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从命令行运行调试器时，将加载源代码，并且它将在找到的第一行上停止执行。输入`continue`以继续调试。以下是输出：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Within a Python script
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python脚本中
- en: The previous two techniques will start the debugger at the beginning of a Python
    program. But this third technique is best for long-running processes. To start
    the debugger within a script, use `set_trace()`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种技术将在Python程序的开头启动调试器。但是这第三种技术最适合长时间运行的进程。要在脚本中启动调试器，请使用`set_trace()`。
- en: 'Now, modify your `pdb_example.py` file as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按以下方式修改您的`pdb_example.py`文件：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, run the program as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按以下方式运行程序：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`set_trace()` is a Python function, therefore you can call it at any point
    in your program.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_trace()`是一个Python函数，因此您可以在程序的任何地方调用它。'
- en: So, these are the three ways by which you can start a debugger.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些是您可以启动调试器的三种方式。
- en: Debugging basic program crashes
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试基本程序崩溃
- en: In this section, we are going to see the trace module. The trace module helps
    in tracing the program execution. So, whenever your Python program crashes, we
    can understand where it crashes. We can use trace module by importing it into
    your script as well as from the command line.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到跟踪模块。跟踪模块有助于跟踪程序的执行。因此，每当您的Python程序崩溃时，我们都可以了解它崩溃的位置。我们可以通过将其导入到脚本中以及从命令行中使用跟踪模块。
- en: 'Now, we will create a script named `trace_example.py` and write the following
    content in the script:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个名为`trace_example.py`的脚本，并在脚本中写入以下内容：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output will be as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: So, by using `trace --trace` at the command line, the developer can trace the
    program line-by-line. So, whenever the  program crashes, the developer will know
    the instance where it crashes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过在命令行中使用`trace --trace`，开发人员可以逐行跟踪程序。因此，每当程序崩溃时，开发人员都将知道它崩溃的位置。
- en: Profiling and timing programs
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对程序进行分析和计时
- en: Profiling a Python program means measuring an execution time of a program. It
    measures the time spent in each function. Python's `cProfile` module is used for
    profiling a Python program.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对Python程序进行分析意味着测量程序的执行时间。它测量了每个函数中花费的时间。Python的`cProfile`模块用于对Python程序进行分析。
- en: The cProfile module
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: cProfile模块
- en: As discussed previously, profiling means measuring the execution time of a program.
    We are going to use the `cProfile` Python module for profiling a program.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，分析意味着测量程序的执行时间。我们将使用`cProfile` Python模块对程序进行分析。
- en: 'Now, we will write a `cprof_example.py` script and write the following code
    in it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个`cprof_example.py`脚本，并在其中写入以下代码：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the program and you will see the output as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，您将看到以下输出：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So, using `cProfile`, all functions that are called will get printed with the
    time spent on each function. Now, we will see what these column headings mean:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用`cProfile`，所有调用的函数都将打印出每个函数所花费的时间。现在，我们将看看这些列标题的含义：
- en: '`ncalls`:Number of calls'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ncalls`：调用次数'
- en: '**`tottime`**:Total time spent in the given function'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`tottime`**: 在给定函数中花费的总时间'
- en: '`percall`: Quotient of `tottime` divided by `ncalls`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percall`：`tottime`除以`ncalls`的商'
- en: '`cumtime`: Cumulative time spent in this and all `subfunctions`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cumtime`：在此及所有`子函数`中花费的累计时间'
- en: '`percall`: Quotient of `cumtime` divided by primitive calls'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percall`：`cumtime`除以原始调用的商'
- en: '`filename:lineno(function)`: Provides the respective data of each function'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filename:lineno(function)`: 提供每个函数的相应数据'
- en: timeit
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: timeit
- en: '`timeit` is a Python module used to time small parts of your Python script.
    You can call `timeit` from the command line as well as import the `timeit` module
    into your script. We are going to write a script to time a piece of code. Create
    a `timeit_example.py` script and write the following content into it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`timeit`是一个用于计时Python脚本的Python模块。您可以从命令行调用`timeit`，也可以将`timeit`模块导入到您的脚本中。我们将编写一个脚本来计时一段代码。创建一个`timeit_example.py`脚本，并将以下内容写入其中：'
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using `timeit`, we can decide what piece of code we want to measure the performance
    of. So, we can easily define the setup code as well as the code snippet on which
    we want to perform the test separately. The main code runs 1 million times, which
    is the default time, whereas the setup code runs only once.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`timeit`，我们可以决定要测量性能的代码片段。因此，我们可以轻松地分别定义设置代码以及要执行测试的代码片段。主要代码运行100万次，这是默认时间，而设置代码只运行一次。
- en: Making programs run faster
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使程序运行更快
- en: 'There are various ways to make your Python programs run faster, such as the
    following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种方法可以使您的Python程序运行更快，例如以下方法：
- en: Profile your code so you can identify the bottlenecks
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对代码进行分析，以便识别瓶颈
- en: Use built-in functions and libraries so the interpreter doesn't need to execute
    loops
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置函数和库，这样解释器就不需要执行循环。
- en: Avoid using globals as Python is very slow in accessing global variables
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用全局变量，因为Python在访问全局变量时非常慢
- en: Use existing packages
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现有包
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the importance of debugging and profiling
    programs. We learned what the different techniques available for debugging are.
    We learned about the `pdb` Python debugger and how to handle exceptions. We learned
    about how to use the `cProfile` and `timeit` modules of Python while profiling
    and timing our scripts. We also learned how to make your scripts run faster.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了调试和分析程序的重要性。我们了解了调试的不同技术。我们学习了`pdb` Python调试器以及如何处理异常。我们学习了如何在分析和计时我们的脚本时使用Python的`cProfile`和`timeit`模块。我们还学习了如何使您的脚本运行更快。
- en: In the next chapter, we are going to learn about unit testing in Python. We
    are going to learn about creating and using unit tests.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Python中的单元测试。我们将学习如何创建和使用单元测试。
- en: Questions
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: To debug a program, which module is used?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调试程序时，使用哪个模块？
- en: Check how to use `ipython` along with all aliases and magic functions.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看如何使用`ipython`以及所有别名和魔术函数。
- en: What is **Global interpreted lock** (**GIL**)?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是**全局解释器锁**（**GIL**）？
- en: What is the purpose of the `PYTHONSTARTUP`, `PYTHONCASEOK`, `PYTHONHOME`, and `PYTHONSTARTUP`
    environment variables?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PYTHONSTARTUP`，`PYTHONCASEOK`，`PYTHONHOME`和`PYTHONSTARTUP`环境变量的目的是什么？'
- en: What is the output of the following code? a) `[0]`, b) `[1]`, c) `[1, 0]`, d)
    `[0, 1]`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码的输出是什么？ a) `[0]`，b) `[1]`，c) `[1, 0]`，d) `[0, 1]`。
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Which of the following is an invalid variable?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是无效的变量？
- en: a) `my_string_1`
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: a) `my_string_1`
- en: b) `1st_string`
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: b) `1st_string`
- en: c) `foo`
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: c) `foo`
- en: d) `_`
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: d) `_`
- en: Further reading
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'How to handle GIL problems in python: [https://realpython.com/python-gil/](https://realpython.com/python-gil/)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何解决Python中的GIL问题：[https://realpython.com/python-gil/](https://realpython.com/python-gil/)
- en: 'Check how to use `pdb` module in command line: [https://fedoramagazine.org/getting-started-python-debugger/](https://fedoramagazine.org/getting-started-python-debugger/)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看如何在命令行中使用`pdb`模块：[https://fedoramagazine.org/getting-started-python-debugger/](https://fedoramagazine.org/getting-started-python-debugger/)
