["```py\nsudo apt-get install python-pip nmap\nsudo pip install python-nmap\n```", "```py\nimport nmap\nnm = nmap.PortScanner()\nresults = nm.scan('192.168.56.101', '1-80','-sV')\n```", "```py\nnmap['192.168.56.101'].state()\n```", "```py\nfor host in nmap.all_hosts():\n    print('Host : %s (%s)' % (host, nmap[host].hostname()))\n    print('State : %s' % nmap[host].state())\n```", "```py\nnm.scaninfo()\n```", "```py\nfor proto in nmap[host].all_protocols():\n    print('Protocol : %s' % proto)\nlistport = nmap[host]['tcp'].keys()\nlistport.sort()\nfor port in listport:\n    print('port : %s\\tstate : %s' % (port,nmap[host][proto][port]['state']))\n```", "```py\n#!/usr/bin/python\n\n#import nmap module\nimport nmap\n\n#initialize portScanner                       \nnm = nmap.PortScanner()\n\n# we ask the user for the host that we are going to scan\nhost_scan = raw_input('Host scan: ')\nwhile host_scan == \"\":\n    host_scan = raw_input('Host scan: ')\n\n#execute scan in portlist\nportlist=\"21,22,23,25,80,8080\"\nnm.scan(hosts=host_scan, arguments='-n -p'+portlist)\n\n#show nmap command\nprint nm.command_line()\n\nhosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]\n#write in scan.txt file\nfile = open('scan.txt', 'w')\nfor host, status in hosts_list:\n    print host, status\n    file.write(host+'\\n')\n\n#show state for each port\narray_portlist=portlist.split(',')\nfor port in array_portlist:\nstate= nm[host_scan]['tcp'][int(port)]['state']\n    print \"Port:\"+str(port)+\" \"+\"State:\"+state\n    file.write(\"Port:\"+str(port)+\" \"+\"State:\"+state+'\\n')\n\n#close file\nfile.close()\n```", "```py\nimport optparse, nmap\n\nclass NmapScanner:\n\n    def __init__(self):\n        self.nmsc = nmap.PortScanner()\n\n    def nmapScan(self, host, port):\n        self.nmsc.scan(host, port)\n        self.state = self.nmsc[host]['tcp'][int(port)]['state']\n        print \" [+] \"+ host + \" tcp/\" + port + \" \" + self.state\n\ndef main():\n    parser = optparse.OptionParser(\"usage%prog \" + \"-H <target host> -p <target port>\")\n    parser.add_option('-H', dest = 'host', type = 'string', help = 'Please, specify the target host.')\n    parser.add_option('-p', dest = 'ports', type = 'string', help = 'Please, specify the target port(s) separated by comma.')\n    (options, args) = parser.parse_args()\n\n    if (options.host == None) | (options.ports == None):\n        print '[-] You must specify a target host and a target port(s).'\n        exit(0)\n    host = options.host\n    ports = options.ports.split(',')\n\n    for port in ports:\n        NmapScanner().nmapScan(host, port)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\npython NmapScanner.py -h\n```", "```py\ndef nmapScanJSONGenerate(self, host, ports):\n    try:\n        print \"Checking ports \"+ str(ports) +\" ..........\"\n        self.nmsc.scan(host, ports)\n\n        # Command info\n        print \"[*] Execuing command: %s\" % self.nmsc.command_line()\n\n        print self.nmsc.csv()\n        results = {} \n\n        for x in self.nmsc.csv().split(\"\\n\")[1:-1]:\n            splited_line = x.split(\";\")\n            host = splited_line[0]\n            proto = splited_line[1]\n            port = splited_line[2]\n            state = splited_line[4]\n\n            try:\n                if state == \"open\":\n                    results[host].append({proto: port})\n            except KeyError:\n                results[host] = []\n                results[host].append({proto: port})\n\n        # Store info\n        file_info = \"scan_%s.json\" % host\n        with open(file_info, \"w\") as file_json:\n            json.dump(results, file_json)\n\n         print \"[*] File '%s' was generated with scan results\" % file_info \n\n except Exception,e:\n     print e\n print \"Error to connect with \" + host + \" for port scanning\" \n     pass\n```", "```py\nimport nmap\n\nnmasync = nmap.PortScannerAsync()\n\ndef callback_result(host, scan_result):\n    print host, scan_result\n\nnmasync.scan(hosts='127.0.0.1', arguments='-sP', callback=callback_result)\nwhile nmasync.still_scanning():\n    print(\"Waiting >>>\")\n    nmasync.wait(2)\n```", "```py\nimport optparse, nmap\nimport json\nimport argparse\n\ndef callbackMySql(host, result):\n    try:\n        script = result['scan'][host]['tcp'][3306]['script']\n        print \"Command line\"+ result['nmap']['command_line']\n        for key, value in script.items():\n            print 'Script {0} --> {1}'.format(key, value)\n    except KeyError:\n        # Key is not present\n        pass\n\nclass NmapScannerAsync:\n\n def __init__(self):\n        self.nmsync = nmap.PortScanner()\n        self.nmasync = nmap.PortScannerAsync()\n\n    def scanning(self):\n        while self.nmasync.still_scanning():\n            self.nmasync.wait(5)\n```", "```py\ndef nmapScan(self, hostname, port):\n        try:\n            print \"Checking port \"+ port +\" ..........\"\n            self.nmsync.scan(hostname, port)\n            self.state = self.nmsync[hostname]['tcp'][int(port)]['state']\n            print \" [+] \"+ hostname + \" tcp/\" + port + \" \" + self.state \n            #mysql\n            if (port=='3306') and self.nmsync[hostname]['tcp'][int(port)]['state']=='open':\n                print 'Checking MYSQL port with nmap scripts......'\n                #scripts for mysql:3306 open\n                print 'Checking mysql-audit.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-audit.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-brute.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-brute.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-databases.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-databases.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-databases.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-dump-hashes.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-dump-hashes.nse.....'                                           self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-empty-password.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-enum.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-enum.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-info.nse\".....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-info.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-query.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-query.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-users.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-users.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-variables.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-variables.nse\",callback=callbackMySql)\n                self.scanning()\n\n                print 'Checking mysql-vuln-cve2012-2122.nse.....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p3306 --script mysql-vuln-cve2012-2122.nse\",callback=callbackMySql)\n                self.scanning()\n\n    except Exception,e:\n        print str(e)\n        print \"Error to connect with \" + hostname + \" for port scanning\"\n        pass\n\n```", "```py\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='Nmap scanner async')\n    # Main arguments\n    parser.add_argument(\"-target\", dest=\"target\", help=\"target IP / domain\", required=True)\n    parser.add_argument(\"-ports\", dest=\"ports\", help=\"Please, specify the target port(s) separated by comma[80,8080 by default]\", default=\"80,8080\")\n    parsed_args = parser.parse_args()   \n    port_list = parsed_args.ports.split(',')\n    ip = parsed_args.target\n    for port in port_list:\n        NmapScannerAsync().nmapScan(ip, port)\n```", "```py\nnmap -f -sS -sV --script auth 192.168.56.101\n```", "```py\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\nimport optparse, nmap\nimport json\nimport argparse\n\ndef callbackFTP(host, result):\n    try:\n        script = result['scan'][host]['tcp'][21]['script']\n        print \"Command line\"+ result['nmap']['command_line']\n        for key, value in script.items():\n            print 'Script {0} --> {1}'.format(key, value)\n    except KeyError:\n        # Key is not present\n        pass\n\nclass NmapScannerAsyncFTP:\n\n    def __init__(self):\n        self.nmsync = nmap.PortScanner()\n        self.nmasync = nmap.PortScannerAsync()\n\n    def scanning(self):\n        while self.nmasync.still_scanning():\n            self.nmasync.wait(5)\n```", "```py\n\n    def nmapScanAsync(self, hostname, port):\n        try:\n            print \"Checking port \"+ port +\" ..........\"\n            self.nmsync.scan(hostname, port)\n            self.state = self.nmsync[hostname]['tcp'][int(port)]['state']\n            print \" [+] \"+ hostname + \" tcp/\" + port + \" \" + self.state \n\n             #FTP\n             if (port=='21') and self.nmsync[hostname]['tcp'][int(port)]['state']=='open':\n                print 'Checking ftp port with nmap scripts......'\n                #scripts for ftp:21 open\n                print 'Checking ftp-anon.nse .....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p21 --script ftp-anon.nse\",callback=callbackFTP)\n                self.scanning()\n                print 'Checking ftp-bounce.nse .....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p21 --script ftp-bounce.nse\",callback=callbackFTP)\n                self.scanning()\n                print 'Checking ftp-brute.nse .....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p21 --script ftp-brute.nse\",callback=callbackFTP)\n                self.scanning()\n                print 'Checking ftp-libopie.nse .....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p21 --script ftp-libopie.nse\",callback=callbackFTP)\n                self.scanning()\n                print 'Checking ftp-proftpd-backdoor.nse .....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p21 --script ftp-proftpd-backdoor.nse\",callback=callbackFTP)\n                self.scanning()\n                print 'Checking ftp-vsftpd-backdoor.nse .....'\n                self.nmasync.scan(hostname,arguments=\"-A -sV -p21 --script ftp-vsftpd-backdoor.nse\",callback=callbackFTP)\n                self.scanning()\n\n    except Exception,e:\n        print str(e)\n        print \"Error to connect with \" + hostname + \" for port scanning\" \n        pass\n\n```", "```py\nif __name__ == \"__main__\":\n\n    parser = argparse.ArgumentParser(description='Nmap scanner async')\n    # Main arguments\n    parser.add_argument(\"-target\", dest=\"target\", help=\"target IP / domain\", required=True)\n    parser.add_argument(\"-ports\", dest=\"ports\", help=\"Please, specify the target port(s) separated by comma[80,8080 by default]\", default=\"80,8080\")\n\n    parsed_args = parser.parse_args()\n\n    port_list = parsed_args.ports.split(',')\n\n    ip = parsed_args.target\n\n    for port in port_list:\n        NmapScannerAsyncFTP().nmapScanAsync(ip, port)\n```", "```py\npython NmapScannerAsync.py -target 192.168.56.101 -ports 21\n```"]