["```py\n            valid_inputs = {\"yes\", \"y\", \"no\", \"n\"} \n            answer = None \n            while answer not in valid_inputs: \n                answer = input(\"Continue? [y, n] \").lower() \n\n    ```", "```py\n     **>>> valid_inputs = {\"yes\", \"y\", \"no\", \"n\"} \n          >>> valid_inputs.add(\"y\") \n          >>> valid_inputs  \n          {'no', 'y', 'n', 'yes'}** \n\n    ```", "```py\n     **>>> month_name_list = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \n          ...    \"May\", \"Jun\", \"Jul\", \"Aug\", \n          ...    \"Sep\", \"Oct\", \"Nov\", \"Dec\"] \n          >>> month_name_list[8] \n          \"Sep\" \n          >>> month_name_list.index(\"Feb\") \n          1** \n\n    ```", "```py\n     **>>> scheme = {\"Crimson\": (220, 14, 60), \n          ... \"DarkCyan\": (0, 139, 139), \n          ... \"Yellow\": (255, 255, 00)} \n          >>> scheme['Crimson'] \n          (220, 14, 60)** \n\n    ```", "```py\n **>>> import pathlib \n>>> home = pathlib.Path('source') \n>>> for path in home.glob('*/index.rst'): \n...     print(path.stat().st_size, path.parent) \n2353 source/ch_01_numbers_strings_and_tuples \n2889 source/ch_02_statements_and_syntax \n2195 source/ch_03_functions \n3094 source/ch_04_built_in_data_structures_list_tuple_set_dict \n725 source/ch_05_user_inputs_and_outputs \n1099 source/ch_06_basics_of_classes_and_objects \n690 source/ch_07_more_advanced_class_design \n1207 source/ch_08_functional_programming_features \n926 source/ch_09_input_output_physical_format_logical_layout \n758 source/ch_10_statistical_programming_and_linear_regression \n615 source/ch_11_testing \n521 source/ch_12_web_services \n1320 source/ch_13_application_integration** \n\n```", "```py\n          **[2353, 2889, 2195, 3094, 725, \n          1099, 690, 1207, 926, 758, \n          615, 521, 1320]** \n\n    ```", "```py\n     **>>> file_sizes = []** \n\n    ```", "```py\n     **>>> home = pathlib.Path('source') \n          >>> for path in home.glob('*/index.rst'): \n          ...     file_sizes.append(path.stat().st_size) \n          >>> print(file_sizes) \n          [2353, 2889, 2195, 3094, 725, 1099, 690,\n          1207, 926, 758, 615, 521, 1320] \n          >>> print(sum(file_sizes)) \n          18392** \n\n    ```", "```py\n            for path in home.glob('*/index.rst') \n\n    ```", "```py\n            path.stat().st_size \n                for path in home.glob('*/index.rst') \n\n    ```", "```py\n **>>> [path.stat().st_size \n...    for path in home.glob('*/index.rst')] \n[2353, 2889, 2195, 3094, 725, 1099, 690, 1207, 926, 758, 615, 521, 1320]** \n\n```", "```py\n            path.stat().st_size \n                for path in home.glob('*/index.rst') \n\n    ```", "```py\n **>>> list(path.stat().st_size \n...    for path in home.glob('*/index.rst')) \n[2353, 2889, 2195, 3094, 725, 1099, 690, 1207, 926, 758, 615, 521, 1320]** \n\n```", "```py\n    some_list = [None for i in range(100)] \n\n```", "```py\n **>>> sizes = list(path.stat().st_size \n...    for path in home.glob('*/index.rst')) \n>>> sum(sizes) \n18392 \n>>> max(sizes) \n3094 \n>>> min(sizes) \n521 \n>>> from statistics import mean \n>>> round(mean(sizes), 3) \n1414.769** \n\n```", "```py\n **>>> sizes.index(min(sizes)) \n11** \n\n```", "```py\n **>>> ch1 = list(path.stat().st_size \n...    for path in home.glob('ch_01*/*.rst')) \n>>> ch2 = list(path.stat().st_size \n...    for path in home.glob('ch_02*/*.rst')) \n>>> len(ch1) \n13 \n>>> len(ch2) \n12 \n>>> final = ch1 + ch2 \n>>> len(final) \n25 \n>>> sum(final) \n104898** \n\n```", "```py\n **>>> final_ex = [] \n>>> final_ex.extend(ch1) \n>>> final_ex.extend(ch2) \n>>> len(final_ex) \n25 \n>>> sum(final_ex) \n104898** \n\n```", "```py\n **>>> p = [3, 5, 11, 13] \n>>> p.insert(0, 2) \n>>> p \n[2, 3, 5, 11, 13] \n>>> p.insert(3, 7) \n>>> p \n[2, 3, 5, 7, 11, 13]** \n\n```", "```py\n **>>> from pathlib import Path \n>>> import csv \n>>> with Path('code/fuel.csv').open() as source_file: \n...    reader = csv.reader(source_file) \n...    log_rows = list(reader) \n>>> log_rows[0] \n['date', 'engine on', 'fuel height'] \n>>> log_rows[-1] \n['', \"choppy -- anchor in jackson's creek\", '']** \n\n```", "```py\n     **>>> head, tail = log_rows[:4], log_rows[4:] \n          >>> head[0] \n          ['date', 'engine on', 'fuel height'] \n          >>> head[-1] \n          ['', '', ''] \n          >>> tail[0] \n          ['10/25/13', '08:24:00 AM', '29'] \n          >>> tail[-1] \n          ['', \"choppy -- anchor in jackson's creek\", '']** \n\n    ```", "```py\n     **>>> tail[0::3] \n          [['10/25/13', '08:24:00 AM', '29'],\n           ['10/26/13', '09:12:00 AM', '27']]** \n\n    ```", "```py\n     **>>> tail[1::3] \n          [['', '01:15:00 PM', '27'], ['', '06:25:00 PM', '22']]** \n\n    ```", "```py\n     **>>> list( zip(tail[0::3], tail[1::3]) )  \n          [(['10/25/13', '08:24:00 AM', '29'], ['', '01:15:00 PM', '27']), \n           (['10/26/13', '09:12:00 AM', '27'], ['', '06:25:00 PM', '22'])]** \n\n    ```", "```py\n     **>>> paired_rows = list( zip(tail[0::3], tail[1::3]) ) \n          >>> [a+b for a,b in paired_rows]  \n          [['10/25/13', '08:24:00 AM', '29', '', '01:15:00 PM', '27'], \n           ['10/26/13', '09:12:00 AM', '27', '', '06:25:00 PM', '22']]** \n\n    ```", "```py\n **>>> from pathlib import Path \n>>> import csv \n>>> with Path('code/fuel.csv').open() as source_file: \n...    reader = csv.reader(source_file) \n...    log_rows = list(reader) \n>>> log_rows[0] \n['date', 'engine on', 'fuel height'] \n>>> log_rows[-1] \n['', \"choppy -- anchor in jackson's creek\", '']** \n\n```", "```py\n **>>> tail = log_rows.copy()** \n\n```", "```py\n **>>> del tail[:4] \n>>> tail[0] \n['10/25/13', '08:24:00 AM', '29'] \n>>> tail[-1] \n['', \"choppy -- anchor in jackson's creek\", '']** \n\n```", "```py\n **>>> row = ['10/25/13', '08:24:00 AM', '29', '', '01:15:00 PM', '27']** \n\n```", "```py\n **>>> row.remove('') \n>>> row \n['10/25/13', '08:24:00 AM', '29', '01:15:00 PM', '27']** \n\n```", "```py\n **>>> row = ['10/25/13', '08:24:00 AM', '29', '', '01:15:00 PM', '27']** \n\n```", "```py\n **>>> target_position = row.index('') \n>>> target_position \n3 \n>>> row.pop(target_position) \n'' \n>>> row \n['10/25/13', '08:24:00 AM', '29', '01:15:00 PM', '27']** \n\n```", "```py\n     **>>> def number_column(row, column=2): \n          ...    try: \n          ...        float(row[column]) \n          ...        return True \n          ...    except ValueError: \n          ...        return False** \n\n    ```", "```py\n     **>>> tail_rows = list(filter(number_column, log_rows)) \n          >>> len(tail_rows) \n          4 \n          >>> tail_rows[0] \n          ['10/25/13', '08:24:00 AM', '29'] \n          >>> tail_rows[-1] \n          ['', '06:25:00 PM', '22']** \n\n    ```", "```py\n **>>> row = ['', '06:25:00 PM', '22'] \n>>> del row[3]  \nTraceback (most recent call last): \n  File \"<pyshell#38>\", line 1, in <module> \n    del row[3] \nIndexError: list assignment index out of range** \n\n```", "```py\n **>>> data_items = [1, 1, 2, 3, 5, 8, 10, \n...    13, 21, 34, 36, 55] \n>>> for f in data_items: \n...    if f%2 == 0: data_items.remove(f) \n>>> data_items \n[1, 1, 3, 5, 10, 13, 21, 36, 55]** \n\n```", "```py\n            for f in data_items[:]: \n\n    ```", "```py\n     **>>> data_items = [1, 1, 2, 3, 5, 8, 10, \n          ...    13, 21, 34, 36, 55] \n          >>> position = 0 \n          >>> while position != len(data_items): \n          ...    f= data_items[position] \n          ...    if f%2 == 0: \n          ...        data_items.remove(f) \n          ...    else: \n          ...        position += 1 \n          >>> data_items \n          [1, 1, 3, 5, 13, 21, 55]** \n\n    ```", "```py\n **>>> week = 13 \n>>> day = 2 \n>>> hour = 7 \n>>> minute = 53 \n>>> second = 19 \n>>> t_s = (((week*7+day)*24+hour)*60+minute)*60+second \n>>> t_s \n8063599** \n\n```", "```py\n **>>> t_s = 8063599 \n>>> fields = [] \n>>> for b in 60, 60, 24, 7: \n...    t_s, f = divmod(t_s, b) \n...    fields.append(f) \n>>> fields.append(t_s) \n>>> fields \n[19, 53, 7, 2, 13]** \n\n```", "```py\n **>>> fields_copy1 = fields.copy() \n>>> fields_copy1.reverse() \n>>> fields_copy1 \n[13, 2, 7, 53, 19]** \n\n```", "```py\n **>>> fields_copy2 = fields[::-1] \n>>> fields_copy2 \n[13, 2, 7, 53, 19]** \n\n```", "```py\n **>>> import random \n>>> def arrival1(n=8): \n...     while True: \n...         yield random.randrange(n)** \n\n```", "```py\n **>>> def samples(limit, generator): \n...     for n, value in enumerate(generator): \n...         if n == limit: break \n...         yield value** \n\n```", "```py\n **>>> random.seed(1) \n>>> list(samples(10, arrival1())) \n[2, 1, 4, 1, 7, 7, 7, 6, 3, 1]** \n\n```", "```py\n **>>> from fractions import Fraction \n>>> def expected(n=8): \n...     return n * sum(Fraction(1,(i+1)) for i in range(n))** \n\n```", "```py\n **>>> expected(8) \nFraction(761, 35) \n>>> round(float(expected(8))) \n22** \n\n```", "```py\n    def coupon_collector(n, data): \n        count, collection = 0, set() \n        for item in data: \n            count += 1 \n            collection.add(item) \n            if len(collection) == n: \n                yield count \n                count, collection = 0, set() \n\n```", "```py\n    from statistics import mean \n    expected_time = float(expected(n)) \n    data = samples(100, arrival1()) \n    wait_times = list(coupon_collector(n, data)) \n    average_time = mean(wait_times) \n\n```", "```py\n **>>> collection = set() \n>>> collection.add(1) \n>>> collection \n{1}** \n\n```", "```py\n **>>> collection.add(1) \n>>> collection \n{1} \n>>> 1 in collection \nTrue** \n\n```", "```py\n **>>> collection \n{1} \n>>> item = 3 \n>>> collection.union( {item} ) \n{1, 3} \n>>> collection \n{1}** \n\n```", "```py\n **>>> collection = collection | {item} \n>>> collection \n{1, 3}** \n\n```", "```py\n **>>> collection.update( {4} ) \n>>> collection \n{1, 3, 4}** \n\n```", "```py\n **>>> log = ''' \n... [2016-03-05T09:29:31-05:00] INFO: Processing ruby_block[print IP] action run (@recipe_files::/home/slott/ch4/deploy.rb line 9) \n... [2016-03-05T09:29:31-05:00] INFO: Installed IP: 111.222.111.222 \n... [2016-03-05T09:29:31-05:00] INFO: ruby_block[print IP] called \n... \n...  - execute the ruby block print IP \n... [2016-03-05T09:29:31-05:00] INFO: Chef Run complete in 23.233811181 seconds \n... \n... Running handlers: \n... [2016-03-05T09:29:31-05:00] INFO: Running report handlers \n... Running handlers complete \n... [2016-03-05T09:29:31-05:00] INFO: Report handlers complete \n... Chef Client finished, 2/2 resources updated in 29.233811181 seconds \n... '''** \n\n```", "```py\n **>>> import re \n>>> pattern = re.compile(r\"IP: \\d+\\.\\d+\\.\\d+\\.\\d+\") \n>>> matches = set( pattern.findall(log) ) \n>>> matches \n{'IP: 111.222.111.222'}** \n\n```", "```py\n     **>>> to_be_ignored = {'IP: 0.0.0.0', 'IP: 1.2.3.4'}** \n\n    ```", "```py\n     **>>> matches = {'IP: 111.222.111.222', 'IP: 1.2.3.4'}** \n\n    ```", "```py\n     **>>> matches - to_be_ignored \n          {'IP: 111.222.111.222'} \n          >>> matches.difference(to_be_ignored) \n          {'IP: 111.222.111.222'}** \n\n    ```", "```py\n **>>> valid_matches = matches - to_be_ignored \n>>> valid_matches \n{'IP: 111.222.111.222'}** \n\n```", "```py\n **>>> valid_matches = matches.copy() \n>>> valid_matches.difference_update( to_be_ignored ) \n>>> valid_matches \n{'IP: 111.222.111.222'}** \n\n```", "```py\n **>>> valid_matches = matches.copy() \n>>> for item in to_be_ignored: \n...    if item in valid_matches: \n...        valid_matches.remove(item) \n>>> valid_matches \n{'IP: 111.222.111.222'}** \n\n```", "```py\n **>>> def arrival2(n=8): \n...     p = 0 \n...     while True: \n...         step = random.choice([-1,0,+1]) \n...         p += step \n...         yield abs(p) % n** \n\n```", "```py\n>>> import random \n>>> from ch04_r06 import samples, arrival2 \n>>> random.seed(1) \n>>> list( samples(10, arrival2(8)) ) \n[1, 0, 1, 1, 2, 2, 2, 2, 1, 1] \n\n```", "```py\n            histogram = {} \n\n    ```", "```py\n    for customer in source: \n        if customer not in histogram: \n            histogram[customer]= 0 \n        histogram[customer] += 1 \n\n```", "```py\n    histogram[customer] += 1 \n\n```", "```py\n    histogram[customer] = histogram[customer] + 1 \n\n```", "```py\n    histogram = {} \n    for customer in source: \n        histogram.setdefault(customer, 0) \n        histogram[customer] += 1 \n\n```", "```py\n    from collections import defaultdict \n    def summarize_3(source): \n        histogram = defaultdict(int) \n        for item in source: \n            histogram[item] += 1 \n        return histogram \n\n```", "```py\n **>>> from collections import Counter \n>>> def summarize_4(source): \n...    histogram = Counter(source) \n...    return histogram** \n\n```", "```py\n **>>> import random \n>>> from pprint import pprint \n>>> random.seed(1) \n>>> histogram = summarize_4(samples(1000, arrival2(8))) \n>>> pprint(histogram) \nCounter({1: 150, 0: 130, 2: 129, 4: 128, 5: 127, 6: 118, 3: 117, 7: 101})** \n\n```", "```py\n **>>> for key in sorted(histogram): \n...    print(key, histogram[key]) \n0 130 \n1 150 \n2 129 \n3 117 \n4 128 \n5 127 \n6 118 \n7 101** \n\n```", "```py\n            working_bets = {} \n\n    ```", "```py\n            working_bets[bet_name] = bet_amount \n\n    ```", "```py\n            del working_bets['come odds'] \n\n    ```", "```py\n    amount = working_bets.pop('come odds') \n\n```", "```py\n    working_bets[\"come\"] = 1 \n    working_bets[\"come\"] = None \n\n```", "```py\n    for bet_name in working_bets: \n        print(bet_name, working_bets[bet_name]) \n\n```", "```py\n **>>> from pathlib import Path \n>>> import csv \n>>> data_path = Path('code/craps.csv') \n>>> with data_path.open() as data_file: \n...     reader = csv.DictReader(data_file) \n...     data = list(reader) \n>>> for row in data:  \n...    print(row) \n{'most': '6', 'least': '0', 'final': '5'} \n{'most': '0', 'least': '-4', 'final': '-3'} \n{'most': '1', 'least': '-3', 'final': '-1'} \n{'most': '4', 'least': '0', 'final': '3'}** \n\n```", "```py\n            ((name, raw_row[name]) for name in reader.fieldnames) \n\n    ```", "```py\n     **>>> from collections import OrderedDict \n          >>> with data_path.open() as data_file: \n          ...     reader = csv.DictReader(data_file) \n          ...     for raw_row in reader: \n          ...         column_sequence = ((name, raw_row[name]) \n          ...            for name in reader.fieldnames) \n          ...         good_row = OrderedDict(column_sequence) \n          ...         print(good_row) \n          OrderedDict([('final', '5'), ('least', '0'), ('most', '6')]) \n          OrderedDict([('final', '-3'), ('least', '-4'), ('most', '0')]) \n          OrderedDict([('final', '-1'), ('least', '-3'), ('most', '1')]) \n          OrderedDict([('final', '3'), ('least', '0'), ('most', '4')])** \n\n    ```", "```py\n    OrderedDict((name, raw_row[name]) for name in reader.fieldnames) \n\n```", "```py\n **>>> {\"Poe\", \"E\", \"Near\", \"A\", \"Raven\"}  \n{'E', 'Poe', 'Raven', 'Near', 'A'}** \n\n```", "```py\n **>>> words = set( \n... '''Beautiful is better than ugly. \n... Explicit is better than implicit. \n... Simple is better than complex. \n... Complex is better than complicated. \n... '''.replace('.', ' ').split()) \n>>> words  \n{'complicated', 'Simple', 'ugly', 'implicit', 'Beautiful', \n'complex', 'is', 'Explicit', 'better', 'Complex', 'than'}** \n\n```", "```py\n **>>> list(sorted(words))  \n['Beautiful', 'Complex', 'Explicit', 'Simple', 'better', \n'complex', 'complicated', 'implicit', 'is', 'than', 'ugly']** \n\n```", "```py\n    list(sorted(some_dictionary.items())) \n\n```", "```py\n **>>> mutable = [1, 1, 2, 3, 5, 8]** \n\n **>>> immutable = (5, 8, 13, 21)** \n\n```", "```py\n     **>>> mutable_b = mutable \n          >>> immutable_b = immutable** \n\n    ```", "```py\n     **>>> mutable_b is mutable \n          True \n          >>> immutable_b is immutable \n          True** \n\n    ```", "```py\n     **>>> mutable += [mutable[-2] + mutable[-1]]** \n\n    ```", "```py\n     **>>> immutable += (immutable[-2] + immutable[-1],)** \n\n    ```", "```py\n     **>>> mutable_b \n          [1, 1, 2, 3, 5, 8, 13] \n          >>> mutable is mutable_b \n          True \n          >>> immutable_b \n          (5, 8, 13, 21) \n          >>> immutable \n          (5, 8, 13, 21, 34)** \n\n    ```", "```py\n **>>> a = 355 \n>>> a += 113** \n\n```", "```py\n **>>> a = a + 113** \n\n```", "```py\n    a = b \n\n```", "```py\n **>>> some_dict = {'a': [1, 1, 2, 3]} \n>>> another_dict = some_dict.copy()** \n\n```", "```py\n **>>> another_dict \n{'a': [1, 1, 2, 3]}** \n\n```", "```py\n **>>> some_dict['a'].append(5) \n>>> another_dict \n{'a': [1, 1, 2, 3, 5]}** \n\n```", "```py\n **>>> id(some_dict['a']) == id(another_dict['a']) \nTrue** \n\n```", "```py\n **>>> some_list = [[2, 3, 5], [7, 11, 13]] \n>>> another_list = some_list.copy() \n>>> some_list is another_list \nFalse \n>>> some_list[0] is another_list[0] \nTrue** \n\n```", "```py\n     **>>> import copy** \n\n    ```", "```py\n     **>>> some_dict = {'a': [1, 1, 2, 3]} \n          >>> another_dict = copy.deepcopy(some_dict)** \n\n    ```", "```py\n **>>> some_dict['a'].append(5) \n>>> some_dict \n{'a': [1, 1, 2, 3, 5]} \n>>> another_dict \n{'a': [1, 1, 2, 3]}** \n\n```", "```py\n **>>> id(some_dict['a']) == id(another_dict['a']) \nFalse** \n\n```", "```py\n **>>> copy_of_list = [item for item in some_list] \n>>> copy_of_dict = {key:value for key, value in some_dict.items()}** \n\n```", "```py\n    immutable = (numbers.Number, tuple, str, bytes) \n    def deepcopy_list(some_list: \n        copy = [] \n        for item in some_list: \n            if isinstance(item, immutable): \n                copy.append(item) \n            else: \n                copy.append(deepcopy(item)) \n\n```", "```py\n    a = [1, 2, 3] \n    a.append(a) \n\n```", "```py\n **>>> from collections import Counter \n>>> from random import randint, seed \n>>> def gather_stats(n, samples=1000, summary=Counter()): \n...     summary.update( \n...         sum(randint(1,6) for d in range(n)) \n...             for _ in range(samples)) \n...     return summary** \n\n```", "```py\n **>>> seed(1) \n>>> s1 = gather_stats(2) \n>>> s1 \nCounter({7: 168, 6: 147, 8: 136, 9: 114, 5: 110, 10: 77, 11: 71, 4: 70, 3: 52, 12: 29, 2: 26})** \n\n```", "```py\n **>>> seed(1) \n>>> mc = Counter() \n>>> gather_stats(2, summary=mc)  \nCounter... \n>>> mc \nCounter({7: 168, 6: 147, 8: 136, 9: 114, 5: 110, 10: 77, 11: 71, 4: 70, 3: 52, 12: 29, 2: 26})** \n\n```", "```py\n **>>> seed(1) \n>>> s3 = gather_stats(2) \n>>> s3 \nCounter({7: 336, 6: 294, 8: 272, 9: 228, 5: 220, 10: 154, 11: 142, 4: 140, 3: 104, 12: 58, 2: 52})** \n\n```", "```py\n **>>> s1 is s3 \nTrue** \n\n```", "```py\n **>>> s1 \nCounter({7: 336, 6: 294, 8: 272, 9: 228, 5: 220, 10: 154, 11: 142, 4: 140, 3: 104, 12: 58, 2: 52})** \n\n```", "```py\n            def gather_stats(n, samples=1000, summary=None): \n\n    ```", "```py\n            if summary is None: summary = Counter() \n\n    ```", "```py\n    def create_stats(n, samples=1000): \n        return update_stats(n, samples, Counter()) \n    def update_stats(n, samples=1000, summary): \n        summary.update( \n            sum(randint(1,6) for d in range(n)) \n                for _ in range(samples)) \n\n```", "```py\n **>>> def gather_stats(n, samples=1000, summary_func=lambda x:Counter(x)): \n...     summary = summary_func( \n...         sum(randint(1,6) for d in range(n)) \n...             for _ in range(samples)) \n...     return summary** \n\n```", "```py\n **>>> seed(1) \n>>> gather_stats(2, 12, summary_func=list) \n[7, 4, 5, 8, 10, 3, 5, 8, 6, 10, 9, 7]** \n\n```", "```py\n **>>> seed(1) \n>>> gather_stats(2, 12) \nCounter({5: 2, 7: 2, 8: 2, 10: 2, 3: 1, 4: 1, 6: 1, 9: 1})** \n\n```"]