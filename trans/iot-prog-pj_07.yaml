- en: Setting Up a Raspberry Pi Web Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置树莓派Web服务器
- en: We will begin our journey to create an IoT home security dashboard by learning
    how to use the CherryPy web server framework. Our chapter will start by introducing
    **CherryPy**. We will go through a few examples before we create an HTML weather
    dashboard using a modified version of our `CurrentWeather` class from [Chapter
    4](626664bb-0130-46d1-b431-682994472fc1.xhtml), *Subscribing to Web Services*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过学习如何使用CherryPy web服务器框架来开始创建IoT家庭安全仪表板的旅程。我们的章节将从介绍CherryPy开始。在我们创建一个修改版本的`CurrentWeather`类的HTML天气仪表板之前，我们将通过一些示例进行学习。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing CherryPy—a minimalist Python Web framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍CherryPy——一个极简的Python Web框架
- en: Creating a simple web page using CherryPy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CherryPy创建一个简单的网页
- en: Knowledge required to complete this chapter
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成本章所需的知识
- en: The reader should have a working knowledge of Python in order to complete this
    chapter. A basic understanding of HTML, including CSS, is also required to complete
    the project in this chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该具有Python的工作知识才能完成本章。还需要基本了解HTML，包括CSS，才能完成本章的项目。
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will build an HTML weather dashboard using the CherryPy
    and Bootstrap frameworks. Intimate knowledge of these frameworks is not required
    to complete the project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用CherryPy和Bootstrap框架构建HTML天气仪表板。不需要对这些框架有深入的了解就可以完成项目。
- en: This project should take a couple of hours to complete.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目应该需要几个小时来完成。
- en: Getting started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，需要以下内容：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi Model 3（2015年或更新型号）
- en: A USB power supply
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB电源适配器
- en: A computer monitor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个计算机显示器
- en: A USB keyboard
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB键盘
- en: A USB mouse
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB鼠标
- en: Introducing CherryPy – a minimalist Python web framework
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍CherryPy——一个极简的Python Web框架
- en: For our project, we will use the CherryPy Python library (be aware that it is
    CherryPy with a "y", not CherryPi with an "i").
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们将使用CherryPy Python库（请注意，它是带有"y"的CherryPy，而不是带有"i"的CherryPi）。
- en: What is CherryPy?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是CherryPy？
- en: According to their website, CherryPy is a Pythonic, object-oriented web framework.
    CherryPy gives developers the power to build web applications as if they were
    building any object-oriented Python program. In true Python style, CherryPy programs
    have less code and are developed in less time than other web frameworks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根据他们的网站，CherryPy是一个Pythonic的面向对象的Web框架。CherryPy使开发人员能够构建Web应用程序，就像他们构建任何面向对象的Python程序一样。按照Python的风格，CherryPy程序的代码更少，开发时间比其他Web框架短。
- en: Who uses CherryPy?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁在使用CherryPy？
- en: 'Some of the companies that use CherryPy include the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些使用CherryPy的公司包括以下内容：
- en: '**Netflix**: Netflix uses CherryPy in its infrastructure through RESTful API
    calls. Other Python libraries used by Netflix include Bottle and SciPy.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix：Netflix通过RESTful API调用在其基础设施中使用CherryPy。Netflix使用的其他Python库包括Bottle和SciPy。
- en: '**Hulu**: CherryPy is used for some of Hulu''s projects.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hulu：CherryPy被用于Hulu的一些项目。
- en: '**Indigo Domotics**: Indigo Domotics is a home automation company that uses
    the CherryPy framework.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Indigo Domotics：Indigo Domotics是一家使用CherryPy框架的家庭自动化公司。
- en: Installing CherryPy
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装CherryPy
- en: We will use Python's `pip3` package management system to install CherryPy.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python的`pip3`软件包管理系统来安装CherryPy。
- en: A package management system is a program that helps install and configure applications.
    It can also carry out upgrades and uninstalls.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包管理系统是一个帮助安装和配置应用程序的程序。它还可以进行升级和卸载。
- en: 'To do this, open up a Terminal window and type in the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，打开一个终端窗口，输入以下内容：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Hit *Enter*. You should see the following in the Terminal:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Enter*。您应该在终端中看到以下内容：
- en: '![](assets/2fe0a193-759c-49b0-9c82-57ce1f5766dc.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2fe0a193-759c-49b0-9c82-57ce1f5766dc.png)'
- en: 'In Thonny, go to Tools | Manage Packages. You should see that CherryPy is now
    installed, as shown here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中，转到工具|管理包。您应该看到CherryPy现在已安装，如下所示：
- en: '![](assets/7f7232a1-86e0-4f95-ab6b-c8c9c3cb45a2.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f7232a1-86e0-4f95-ab6b-c8c9c3cb45a2.png)'
- en: Creating a simple web page using CherryPy
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CherryPy创建一个简单的网页
- en: To get started, let's build the most basic of programs with CherryPy. By this,
    I mean, of course, the ubiquitous `Hello World` program that we will use to say
    `Hello Raspberry Pi!`. We will work through a few examples before we build a dashboard
    to display weather data using a modified version of the `CurrentWeather` class
    from [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml), *Subscribing to
    Web Services*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始，让我们用CherryPy构建最基本的程序。我指的当然是无处不在的`Hello World`程序，我们将用它来说`Hello Raspberry
    Pi!`。在我们构建一个仪表板来显示天气数据之前，我们将通过一些示例进行学习，使用[第4章](626664bb-0130-46d1-b431-682994472fc1.xhtml)中的`CurrentWeather`类的修改版本，*订阅Web服务*。
- en: Hello Raspberry Pi!
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello Raspberry Pi!
- en: 'To build the `Hello Raspberry Pi!` web page, do the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建`Hello Raspberry Pi!`网页，执行以下操作：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单|编程|Thonny Python IDE中打开Thonny。
- en: Click on the New icon to create a new file.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件。
- en: 'Type the following:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Ensure that the line, `cherrypy.quickstart(HelloWorld())`, is inline with the
    `import` and `class` statements.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保行`cherrypy.quickstart(HelloWorld())`与`import`和`class`语句一致。
- en: Save the file as `HelloRaspberryPi.py`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`HelloRaspberryPi.py`。
- en: Run the file by clicking on the green `Run current script` button.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击绿色的`Run current script`按钮运行文件。
- en: 'You should see the CherryPy web server starting up as indicated in the shell:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到CherryPy web服务器正在终端中启动：
- en: '![](assets/ecbc3a89-f763-46b3-bbde-b32f6e46aa04.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ecbc3a89-f763-46b3-bbde-b32f6e46aa04.png)'
- en: From the output to the shell you should be able to observe the ip address and
    port that CherryPy is running on, `http://127.0.0.1:8080`. You may recognize the
    ip address as the loopback address. CherryPy uses the port `8080`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端输出中，您应该能够观察到CherryPy正在运行的IP地址和端口，`http://127.0.0.1:8080`。您可能会认出IP地址是环回地址。CherryPy使用端口`8080`。
- en: 'Open a web browser on your Raspberry Pi and type in the address from the previous
    step:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在树莓派上打开一个网络浏览器，并在地址栏中输入上一步的地址：
- en: '![](assets/8f293187-5738-4253-8d25-32b1172d5aac.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8f293187-5738-4253-8d25-32b1172d5aac.png)'
- en: Congratulations, you have just turned your humble Raspberry Pi into a web server.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您刚刚将您的谦卑的树莓派变成了一个网络服务器。
- en: If you are like me, you probably didn't think a web server could be created
    with such little code. CherryPy basically focuses on one task, which is to take
    in an HTTP request and turn it into a Python method.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您和我一样，您可能没有想到一个网络服务器可以用如此少的代码创建。CherryPy基本上专注于一个任务，那就是接收HTTP请求并将其转换为Python方法。
- en: So how does it work? The decorator in our `HelloWorld` class, `@cherrypy.expose`, exposes
    the method index that happens to correspond to the root of the web server. When
    we load our web page using the loopback address (`127.0.0.1`) and port that CherryPy
    is running on (`8080`), the `index` method is served up as the page. In our code
    we simply return the string `Hello Raspberry Pi!` which is then displayed as our
    web page.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它是如何工作的呢？我们的`HelloWorld`类中的装饰器`@cherrypy.expose`公开了恰好对应于网络服务器根目录的`index`方法。当我们使用回环地址（`127.0.0.1`）和CherryPy正在运行的端口（`8080`）加载我们的网页时，`index`方法将作为页面提供。在我们的代码中，我们只是返回字符串`Hello
    Raspberry Pi!`，然后它就会显示为我们的网页。
- en: The loopback address is an IP number used as the software loopback interface
    of a machine. This number is generally `127.0.0.1`. This address is not physically
    connected to a network and is used often to test the installation of a web server
    installed on the same machine.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 回环地址是用作机器软件回环接口的IP号码。这个号码通常是`127.0.0.1`。这个地址并没有物理连接到网络，通常用于测试安装在同一台机器上的网络服务器。
- en: Say hello to myFriend
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向myFriend问好
- en: 'So what happens if we expose another method in our Python code? We can check
    that easily by using the decorator before a method. Let''s write some code to
    do this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们在Python代码中公开另一个方法会发生什么呢？我们可以通过在方法之前使用装饰器轻松地检查到这一点。让我们编写一些代码来做到这一点：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny。
- en: Click on the New icon to create a new file.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新建图标创建一个新文件。
- en: 'Type the following:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the file as `SayHello.py`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`SayHello.py`。
- en: Stop and start the CherryPy server by clicking on the Interrupt/Reset button,
    and then the Run current script button.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击中断/重置按钮，然后单击运行当前脚本按钮来停止和启动CherryPy服务器。
- en: Now, type the following into your browser's address bar and press *Enter*:` http://127.0.0.1:8080/sayHello`
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，输入以下内容到您的浏览器的地址栏中，然后按*Enter*：`http://127.0.0.1:8080/sayHello`
- en: 'You should see the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下内容：
- en: '![](assets/41a50c34-5bce-48d0-817a-40f6cfed119b.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/41a50c34-5bce-48d0-817a-40f6cfed119b.png)'
- en: So what did we do differently this time? For starters, we didn't just access
    the root of our server. We added `/sayHello` to our URL. Usually, when we do that
    on a web server, we are directed to a subfolder. In this case, we are taken to
    the method in our `HelloWorld` class, called `sayHello()`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们做了什么不同的事情？首先，我们不只是访问了服务器的根目录。我们在URL中添加了`/sayHello`。通常，当我们在网络服务器上这样做时，我们会被引导到一个子文件夹。在这种情况下，我们被带到了我们的`HelloWorld`类中的`sayHello()`方法。
- en: 'If we look closely at the `sayHello()` method, we can see that it takes a parameter
    called `myFriend`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细看`sayHello()`方法，我们会发现它接受一个名为`myFriend`的参数：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see that the `myFriend` parameter has a default value of `my Friend`.
    So, when we run CherryPy and navigate to the URL at `http://127.0.0.1:8080/sayHello`,
    the `sayHello` method is called and the `"Hello " + my friend` string is returned.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`myFriend`参数的默认值是`my Friend`。因此，当我们运行CherryPy并导航到`http://127.0.0.1:8080/sayHello`的URL时，将调用`sayHello`方法，并返回`"Hello
    " + my friend`字符串。
- en: Now, type the following into the the address box and hit *Enter*: `http://127.0.0.1:8080/sayHello?myFriend=Raspberry%20Pi`
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下内容输入到地址栏中，然后按*Enter*：`http://127.0.0.1:8080/sayHello?myFriend=Raspberry%20Pi`
- en: In this URL, we set the value of `myFriend` to `Raspberry%20Pi` (the `%20` is
    used instead of a space). We should get the same result as our first example.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个URL中，我们将`myFriend`的值设置为`Raspberry%20Pi`（使用`%20`代替空格）。我们应该得到与我们的第一个示例相同的结果。
- en: As we can see, it is very easy to connect Python methods to an HTML output.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，将Python方法连接到HTML输出非常容易。
- en: What about static pages?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态页面呢？
- en: Static pages were at one time ubiquitous with the internet. Simple links between
    static pages made up what was considered a web site at the time. A lot has changed
    since then, however, being able to serve up a simple HTML page is still a basic
    requirement of a web server framework.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 静态页面曾经是互联网上随处可见的。静态页面之间的简单链接构成了当时被认为是一个网站的内容。然而，自那时以来发生了很多变化，但是能够提供一个简单的HTML页面仍然是网络服务器框架的基本要求。
- en: 'So, how would we would do that with CherryPy? It''s pretty simple actually.
    We simply open a static HTML page in a method and return it. Let''s have CherryPy
    serve up a static page by doing the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何在CherryPy中做到这一点呢？实际上很简单。我们只需在一个方法中打开一个静态HTML页面并返回它。让我们通过以下方式让CherryPy提供一个静态页面：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny。
- en: Click on the New icon to create a new file.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新建图标创建一个新文件。
- en: 'Type the following:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file as `static.html`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`static.html`。
- en: In Thonny click on the New icon to create a new file in the same directory as
    `static.html`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Thonny中点击新建图标，在与`static.html`相同的目录中创建一个新文件。
- en: 'Type the following:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the file as `StaticPage.py`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`StaticPage.py`。
- en: If CherryPy is still running stop it by clicking on the red button.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果CherryPy仍在运行，请单击红色按钮停止它。
- en: Run the file `StaticPage.py` to start CherryPy.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行文件`StaticPage.py`以启动CherryPy。
- en: You should see CherryPy starting up as indicated in the shell.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到CherryPy正在启动，如终端中所示。
- en: To view our new static web page, open up a web browser on the Raspberry Pi and
    type the following into the address bar: `http://127.0.0.1:8080`
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看我们的新静态网页，请在树莓派上打开一个网络浏览器，并在地址栏中输入以下内容：`http://127.0.0.1:8080`
- en: 'You should see the static page displayed:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到静态页面显示出来了：
- en: '![](assets/6418ac8e-b97b-49d3-9c72-7edc6d83348f.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6418ac8e-b97b-49d3-9c72-7edc6d83348f.png)'
- en: So what did we do here? We changed our `index` method so that it returned an
    open `static.html` file with the line return `open ('static.html')`. This opened
    up `static.html` in our browser as our index (or `http://127.0.0.1:8080/index`).
    Note that trying to type in the page name `static.html` in the url (`http://127.0.0.1:8080/static.html`)
    will not work. CherryPy serves up the content based on the method name. In this
    case the method name is index, which is the default.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们在这里做了什么呢？我们修改了我们的`index`方法，使其返回一个打开的`static.html`文件，带有`return open('static.html')`这一行。这将在我们的浏览器中打开`static.html`作为我们的索引（或`http://127.0.0.1:8080/index`）。请注意，尝试在url中输入页面名称`static.html`（`http://127.0.0.1:8080/static.html`）将不起作用。CherryPy根据方法名提供内容。在这种情况下，方法名是index，这是默认值。
- en: HTML weather dashboard
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML天气仪表板
- en: Now it's time to add what we learned from the previous chapters. Let's revisit
    the `CurrentWeather` class from [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml),
    *Subscribing to Web Servic**es*. We will rename it `WeatherData`, as this name
    is more appropriate for this project, and change it a little bit.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候添加我们从之前章节学到的知识了。让我们重新访问[第4章](626664bb-0130-46d1-b431-682994472fc1.xhtml)中的`CurrentWeather`类，*订阅Web服务*。我们将把它重命名为`WeatherData`，因为这个名字更适合这个项目，并稍微修改一下。
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny
- en: Click on the New icon to create a new file
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件
- en: 'Type the following:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save the file as `WeatherData.py`
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`WeatherData.py`
- en: Run the code
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: 'You should see the weather for London, England printed in the following shell:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该在以下shell中看到伦敦，英格兰的天气：
- en: '![](assets/88d68f15-1946-4c56-9a03-d4549b87e934.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/88d68f15-1946-4c56-9a03-d4549b87e934.png)'
- en: 'Let''s take a look at the code. Basically `WeatherData.py` is exactly the same
    as `CurrentWeather.py` from [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml),
    *Subscribing to Web Servic**es*, but with an extra method called `getTime`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码。基本上`WeatherData.py`与[第4章](626664bb-0130-46d1-b431-682994472fc1.xhtml)中的`CurrentWeather.py`完全相同，但多了一个名为`getTime`的额外方法：
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We use this method to return the time when the call is made to the weather web
    service for use in our web page.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这种方法返回调用天气Web服务时的时间，以便在我们的网页中使用。
- en: 'We will now use CherryPy and the [Bootstrap](https://getbootstrap.com) framework
    to create our dashboard. To do this do the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用CherryPy和[Bootstrap](https://getbootstrap.com)框架来创建我们的仪表板。要做到这一点，请执行以下操作：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny
- en: Click on the New icon to create a new file
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件
- en: 'Type the following (pay particular attention to the quotation marks):'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容（特别注意引号）：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save the file as `WeatherDashboardHTML.py`
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`WeatherDashboardHTML.py`
- en: This may look like a whole lot of code—and it is. If we break it down, though,
    it's not really that complicated. Basically, we are using CherryPy to return an
    HTML string, which will be served up in the root of our URL through the `index` method.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来是一大堆代码 - 而且确实是。不过，如果我们把它分解一下，实际上并不是那么复杂。基本上，我们使用CherryPy返回一个HTML字符串，这个字符串将通过`index`方法在我们的URL根目录中提供。
- en: 'Before we can do that, we instantiate the `WeatherDashboardHTML` class by passing
    in a `WeatherData` object. We give this `WeatherData` object the name `currentWeather`,
    as shown in the `init` (class constructor) method:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以这样做之前，我们通过传入一个`WeatherData`对象来实例化`WeatherDashboardHTML`类。我们给这个`WeatherData`对象起名为`currentWeather`，就像`init`（类构造函数）方法中所示的那样：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'CherryPy serves up the `index` method by printing out an HTML string that is
    sprinkled with parameters from our `currentWeather` object. We are using the Bootstrap
    component library in our HTML code. We add it by incorporating the standard Bootstrap
    boilerplate code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy通过打印一个HTML字符串来提供`index`方法，该字符串中包含来自我们`currentWeather`对象的参数。我们在我们的HTML代码中使用了Bootstrap组件库。我们通过合并标准的Bootstrap样板代码来添加它：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We use the Bootstrap `card` component as our content container. `card` allows
    us to create a header, body, and footer:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Bootstrap的`card`组件作为我们的内容容器。`card`允许我们创建一个标题、正文和页脚：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The header section of the `card` component features the name of the city. We
    use the `getCity` method from our `currentWeather` object to get the name of the
    city:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`card`组件的标题部分显示了城市的名称。我们使用我们的`currentWeather`对象的`getCity`方法来获取城市的名称。'
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the body section of the `card` component, we create a row with three columns.
    Each column contains a title (`<h5>`), as well as data pulled from our `WeatherData`
    object, called `currentWeather`. You can see the title, `Temperature`, with the
    temperature value pulled from the `currentWeather` method, `getTemperature`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`card`组件的正文部分，我们创建了一个具有三列的行。每列包含一个标题（`<h5>`），以及从我们的`WeatherData`对象`currentWeather`中提取的数据。您可以看到标题`Temperature`，以及从`currentWeather`方法`getTemperature`中提取的温度值：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For the footer we simply return the instantiation time of the `currentWeather`
    object. We will take this time as the time the weather information was checked
    from our program.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于页脚，我们只需返回`currentWeather`对象的实例化时间。我们将这个时间作为我们的程序从中检查天气信息的时间。
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Our style section at the top allows us to customize the look of our dashboard. We
    create a CSS class, called `element-box`, in order to create a silver (`#C8C8C8`)
    rounded corner box around our weather parameters. We also limit the width of the
    card (and thus the dashboard) to `600px`. Lastly, we put a margin of `10px` around
    the columns, so that the rounded boxes do not touch each other:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在顶部的样式部分允许我们自定义我们的仪表板的外观。我们创建了一个CSS类，称为`element-box`，以便在我们的天气参数周围创建一个银色（`#C8C8C8`）的圆角框。我们还限制了卡片（因此也是仪表板）的宽度为`600px`。最后，我们在列周围放置了`10px`的边距，以便圆角框不会彼此接触：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Our `main` method at the bottom instantiates a `WeatherData` class as an object,
    called `currentWeather`. In our example, we are using data from the city of `Paris`.
    Our code then passes the `currentWeather` object to the `cherrypy.quickstart()`
    method, as shown here:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在底部的`main`方法中将`WeatherData`类实例化为一个名为`currentWeather`的对象。在我们的示例中，我们使用来自`Paris`城市的数据。然后我们的代码将`currentWeather`对象传递给`cherrypy.quickstart()`方法，如下所示：
- en: '[PRE16]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Stop and start the CherryPy server while on the `WeatherDashboardHTML.py` file.
    If you do not have any errors in your code, you should see something similar to
    the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`WeatherDashboardHTML.py`文件上停止和启动CherryPy服务器。如果您的代码没有任何错误，您应该会看到类似以下的内容：
- en: '![](assets/ce7db347-f9c2-4e2b-a938-903edd69a563.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ce7db347-f9c2-4e2b-a938-903edd69a563.png)'
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we turned our Raspberry Pi into a web server using the CherryPy
    HTTP framework. With its minimalist architecture, CherryPy allows the developer
    to set up a web-enabled Python program in a very short time.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用CherryPy HTTP框架将我们的树莓派变成了一个Web服务器。凭借其简约的架构，CherryPy允许开发者在很短的时间内建立一个支持Web的Python程序。
- en: We started this chapter by installing CherryPy on our Raspberry Pi. After a
    few simple examples, we built an HTML weather dashboard by modifying and utilizing
    the web service code that we wrote in [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml),
    *Subscribing to Web Services*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章开始时在树莓派上安装了CherryPy。经过几个简单的示例后，我们通过修改和利用我们在[第4章](626664bb-0130-46d1-b431-682994472fc1.xhtml)中编写的Web服务代码，构建了一个HTML天气仪表盘。
- en: In the coming chapters, we will use the knowledge we gained in this chapter
    to build an IoT home security dashboard.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将利用本章学到的知识来构建一个物联网家庭安全仪表盘。
- en: Questions
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: True or false? It's CherryPi, not CherryPy.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: True或false？它是CherryPi，而不是CherryPy。
- en: True or false? CherryPy is used by Netflix.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: True或false？Netflix使用CherryPy。
- en: How do we tell CherryPy that we want to expose a method?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何告诉CherryPy我们想要公开一个方法？
- en: True or false? CherryPy requires many lines of boilerplate code.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: True或false？CherryPy需要很多样板代码。
- en: Why do we rename our `CurrentWeather` class to `WeatherData`?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为什么将我们的`CurrentWeather`类重命名为`WeatherData`？
- en: True or false? The default port used by CherryPy is `8888`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: True或false？CherryPy使用的默认端口是`8888`。
- en: Why do we add a margin to our `col` CSS class?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为什么要向我们的`col` CSS类添加边距？
- en: Which method from our `WeatherData` class do we use to get the image URL of
    the current weather conditions?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`WeatherData`类中使用哪个方法来获取当前天气状况的图片URL？
- en: Which Bootstrap component do we use as our content container?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪个Bootstrap组件作为我们的内容容器？
- en: True or false? In our example, it is sunny and hot in London.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: True或false？在我们的示例中，伦敦是晴天和炎热的。
- en: Further reading
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多阅读
- en: In this chapter, we only scratched the surface of the CherryPy and Bootstrap
    frameworks. Further reading can be found at the CherryPy website, available at
    [www.cherrypy.org](http://www.cherrypy.org), and Bootstrap's site, at [https://getbootstrap.com](https://getbootstrap.com).
    This is recommended to improve the developer's knowledge of these powerful frameworks.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只是浅尝了一下CherryPy和Bootstrap框架。更多阅读材料可以在CherryPy网站上找到，网址为[www.cherrypy.org](http://www.cherrypy.org)，以及Bootstrap的网站，网址为[https://getbootstrap.com](https://getbootstrap.com)。建议开发者通过阅读来提高对这些强大框架的了解。
