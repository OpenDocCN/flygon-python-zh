["```py\nsudo -u postgres createuser -sP myusername\nsudo -u postgres createdb -O myusername mydatabasename\npsql -d mydatabasename -U myusername\n```", "```py\npip install --user psycopg2-binary\n```", "```py\nCREATE TABLE musicians (id SERIAL PRIMARY KEY, name TEXT NOT NULL, born DATE, died DATE CHECK(died > born));\n```", "```py\nINSERT INTO musicians (name, born, died) VALUES ('Robert Fripp', '1946-05-16', NULL),   ('Keith Emerson', '1944-11-02', '2016-03-11'), ('Greg Lake', '1947-11-10', '2016-12-7'),   ('Bill Bruford', '1949-05-17', NULL), ('David Gilmour', '1946-03-06', NULL);\n```", "```py\nCREATE TABLE instruments (id SERIAL PRIMARY KEY, name TEXT NOT NULL);\nINSERT INTO instruments (name) VALUES ('bass'), ('drums'), ('guitar'), ('keyboards');\n```", "```py\nALTER TABLE musicians ADD COLUMN main_instrument INT REFERENCES instruments(id);\n```", "```py\nSELECT name FROM musicians;\n```", "```py\nSELECT * FROM musicians;\n```", "```py\nSELECT name FROM musicians WHERE died IS NULL;\n```", "```py\nSELECT name FROM musicians WHERE born < '1945-01-01' AND died IS NULL;\n```", "```py\nSELECT name, age(born), (died - born)/365 AS \"age at death\" FROM musicians ORDER BY born DESC;\n```", "```py\nDELETE FROM instruments WHERE id=4;\n```", "```py\nUPDATE musicians SET main_instrument=3 WHERE id=1;\nUPDATE musicians SET main_instrument=2 WHERE name='Bill Bruford';\n```", "```py\nUPDATE musicians SET main_instrument=4, name='Keith Noel Emerson' WHERE name LIKE 'Keith%';\n```", "```py\nUPDATE musicians SET main_instrument=1 WHERE LOWER(name) LIKE '%lake';\n```", "```py\nUPDATE musicians SET main_instrument=(SELECT id FROM instruments WHERE name='guitar') WHERE name IN ('Robert Fripp', 'David Gilmour');\n```", "```py\nSELECT name FROM musicians WHERE main_instrument IN (SELECT id FROM instruments WHERE name like '%r%')\n```", "```py\nSELECT name FROM (SELECT * FROM musicians WHERE died IS NULL) AS living_musicians;\n```", "```py\nSELECT musicians.name, instruments.name as main_instrument FROM musicians JOIN instruments ON musicians.main_instrument = instruments.id;\n```", "```py\nSELECT instruments.name AS instrument, musicians.name AS musician FROM instruments JOIN musicians ON musicians.main_instrument = instruments.id;\n```", "```py\nSELECT instruments.name AS instrument, count(musicians.id) as musicians FROM instruments JOIN musicians ON musicians.main_instrument = instruments.id GROUP BY instruments.name;\n```", "```py\nCREATE TABLE bands (id SERIAL PRIMARY KEY, name TEXT NOT NULL);\nINSERT INTO bands(name) VALUES ('ABWH'), ('ELP'), ('King Crimson'), ('Pink Floyd'), ('Yes');\n```", "```py\nCREATE TABLE musicians_bands (musician_id INT REFERENCES musicians(id), band_id INT REFERENCES bands(id), PRIMARY KEY (musician_id, band_id));\nINSERT INTO musicians_bands(musician_id, band_id) VALUES (1, 3), (2, 2), (3, 2), (3, 3), (4, 1), (4, 2), (4, 5), (5,4);\n```", "```py\nSELECT musicians.name, array_agg(bands.name) AS bands FROM musicians JOIN musicians_bands ON musicians.id = musicians_bands.musician_id JOIN bands ON bands.id = musicians_bands.band_id GROUP BY musicians.name ORDER BY musicians.name ASC;\n```", "```py\nCREATE TABLE labs (id CHAR(1) PRIMARY KEY);\nCREATE TABLE lab_techs (id SMALLINT PRIMARY KEY, name VARCHAR(512) UNIQUE NOT NULL);\nCREATE TABLE plots (lab_id CHAR(1) NOT NULL REFERENCES labs(id), \n    plot SMALLINT NOT NULL, current_seed_sample CHAR(6), \n    PRIMARY KEY(lab_id, plot), \n    CONSTRAINT valid_plot CHECK (plot BETWEEN 1 AND 20));\n```", "```py\nCREATE TABLE lab_checks(\n    date DATE NOT NULL, time TIME NOT NULL, \n    lab_id CHAR(1) NOT NULL REFERENCES labs(id), \n    lab_tech_id SMALLINT NOT NULL REFERENCES lab_techs(id), \n    PRIMARY KEY(date, time, lab_id));\n```", "```py\nCREATE TABLE plot_checks(date DATE NOT NULL, time TIME NOT NULL,\nlab_id CHAR(1) NOT NULL REFERENCES labs(id), plot SMALLINT NOT NULL,\n```", "```py\nPRIMARY KEY(date, time, lab_id, plot),\nFOREIGN KEY(date, time, lab_id)\n    REFERENCES lab_checks(date, time, lab_id),\nFOREIGN KEY(lab_id, plot) REFERENCES plots(lab_id, plot),\n```", "```py\nseed_sample CHAR(6) NOT NULL, \nhumidity NUMERIC(4, 2) CHECK (humidity BETWEEN 0.5 AND 52.0),\nlight NUMERIC(5, 2) CHECK (light BETWEEN 0 AND 100),\ntemperature NUMERIC(4, 2) CHECK (temperature BETWEEN 4 AND 40),\nequipment_fault BOOLEAN NOT NULL,\nblossoms SMALLINT NOT NULL CHECK (blossoms BETWEEN 0 AND 1000),\nplants SMALLINT NOT NULL CHECK (plants BETWEEN 0 AND 20),\nfruit SMALLINT NOT NULL CHECK (fruit BETWEEN 0 AND 1000),\nmax_height NUMERIC(6, 2) NOT NULL CHECK (max_height BETWEEN 0 AND 1000),\nmin_height NUMERIC(6, 2) NOT NULL CHECK (min_height BETWEEN 0 AND 1000),\nmedian_height NUMERIC(6, 2) NOT NULL \n    CHECK (median_height BETWEEN min_height AND max_height),\nnotes TEXT);\n```", "```py\nCREATE VIEW data_record_view AS (\n```", "```py\nSELECT pc.date AS \"Date\", to_char(pc.time, 'FMHH24:MI') AS \"Time\",\n    lt.name AS \"Technician\", pc.lab_id AS \"Lab\", pc.plot AS \"Plot\",\n    pc.seed_sample AS \"Seed sample\", pc.humidity AS \"Humidity\",\n    pc.light AS \"Light\", pc.temperature AS \"Temperature\",\n    pc.plants AS \"Plants\", pc.blossoms AS \"Blossoms\", pc.fruit AS \n    \"Fruit\",\n    pc.max_height AS \"Max Height\", pc.min_height AS \"Min Height\",\n    pc.median_height AS \"Median Height\", pc.notes AS \"Notes\"\nFROM plot_checks AS pc JOIN lab_checks AS lc ON pc.lab_id = lc.lab_id AND pc.date = lc.date AND pc.time = lc.time JOIN lab_techs AS lt ON lc.lab_tech_id = lt.id);\n```", "```py\nimport psycopg2 as pg\nfrom psycopg2.extras import DictCursor\n```", "```py\nclass SQLModel:\n    fields = {\n        ...\n        \"Technician\": {'req': True, 'type': FT.string_list, \n                       'values': []},\n        \"Lab\": {'req': True, 'type': FT.string_list, 'values': []},\n        \"Plot\": {'req': True, 'type': FT.string_list,'values': []},\n\n```", "```py\n    def __init__(self, host, database, user, password):\n        self.connection = pg.connect(host=host, database=database,\n            user=user, password=password, cursor_factory=DictCursor)\n\n        techs = self.query(\"SELECT * FROM lab_techs ORDER BY name\")\n        labs = self.query(\"SELECT id FROM labs ORDER BY id\")\n        plots = self.query(\n        \"SELECT DISTINCT plot FROM plots ORDER BY plot\")\n        self.fields['Technician']['values'] = [x['name'] for x in \n        techs]\n        self.fields['Lab']['values'] = [x['id'] for x in labs]\n        self.fields['Plot']['values'] = [str(x['plot']) for x in plots]\n```", "```py\n    def query(self, query, parameters=None):\n        cursor = self.connection.cursor()\n        try:\n            cursor.execute(query, parameters)\n        except (pg.Error) as e:\n            self.connection.rollback()\n            raise e\n        else:\n            self.connection.commit()\n            if cursor.description is not None:\n                return cursor.fetchall()\n```", "```py\n    def get_all_records(self, all_dates=False):\n        query = ('SELECT * FROM data_record_view '\n            'WHERE NOT %(all_dates)s OR \"Date\" = CURRENT_DATE '\n            'ORDER BY \"Date\", \"Time\", \"Lab\", \"Plot\"')\n        return self.query(query, {'all_dates': all_dates})\n```", "```py\ndef get_record(self, date, time, lab, plot):\n    query = ('SELECT * FROM data_record_view '\n        'WHERE \"Date\" = %(date)s AND \"Time\" = %(time)s '\n        'AND \"Lab\" = %(lab)s AND \"Plot\" = %(plot)s')\n    result = self.query(\n        query, {\"date\": date, \"time\": time, \"lab\": lab, \"plot\": plot})\n    return result[0] if result else {}\n```", "```py\n    def get_lab_check(self, date, time, lab):\n        query = ('SELECT date, time, lab_id, lab_tech_id, '\n            'lt.name as lab_tech FROM lab_checks JOIN lab_techs lt '\n            'ON lab_checks.lab_tech_id = lt.id WHERE '\n            'lab_id = %(lab)s AND date = %(date)s AND time = %(time)s')\n        results = self.query(\n            query, {'date': date, 'time': time, 'lab': lab})\n        return results[0] if results else {}\n```", "```py\n    lc_update_query = ('UPDATE lab_checks SET lab_tech_id = '\n        '(SELECT id FROM lab_techs WHERE name = %(Technician)s) '\n        'WHERE date=%(Date)s AND time=%(Time)s AND lab_id=%(Lab)s')\n    lc_insert_query = ('INSERT INTO lab_checks VALUES (%(Date)s, \n        '%(Time)s, %(Lab)s,(SELECT id FROM lab_techs '\n        'WHERE name=%(Technician)s))')\n```", "```py\n    pc_update_query = (\n        'UPDATE plot_checks SET seed_sample = %(Seed sample)s, '\n        'humidity = %(Humidity)s, light = %(Light)s, '\n        'temperature = %(Temperature)s, '\n        'equipment_fault = %(Equipment Fault)s, '\n        'blossoms = %(Blossoms)s, plants = %(Plants)s, '\n        'fruit = %(Fruit)s, max_height = %(Max Height)s, '\n        'min_height = %(Min Height)s, median_height = '\n        '%(Median Height)s, notes = %(Notes)s '\n        'WHERE date=%(Date)s AND time=%(Time)s '\n        'AND lab_id=%(Lab)s AND plot=%(Plot)s')\n\n    pc_insert_query = (\n        'INSERT INTO plot_checks VALUES (%(Date)s, %(Time)s, %(Lab)s,'\n        ' %(Plot)s, %(Seed sample)s, %(Humidity)s, %(Light)s,'\n        ' %(Temperature)s, %(Equipment Fault)s, %(Blossoms)s,'\n        ' %(Plants)s, %(Fruit)s, %(Max Height)s, %(Min Height)s,'\n        ' %(Median Height)s, %(Notes)s)')\n```", "```py\n    def save_record(self, record):\n        date = record['Date']\n        time = record['Time']\n        lab = record['Lab']\n        plot = record['Plot']\n```", "```py\n        if self.get_lab_check(date, time, lab):\n            lc_query = self.lc_update_query\n        else:\n            lc_query = self.lc_insert_query\n        if self.get_record(date, time, lab, plot):\n            pc_query = self.pc_update_query\n        else:\n            pc_query = self.pc_insert_query\n```", "```py\n        self.query(lc_query, record)\n        self.query(pc_query, record)\n```", "```py\n        if self.get_record(date, time, lab, plot):\n            pc_query = self.pc_update_query\n            self.last_write = 'update'\n        else:\n            pc_query = self.pc_insert_query\n            self.last_write = 'insert'\n```", "```py\n    def get_current_seed_sample(self, lab, plot):\n        result = self.query('SELECT current_seed_sample FROM plots '\n            'WHERE lab_id=%(lab)s AND plot=%(plot)s',\n            {'lab': lab, 'plot': plot})\n        return result[0]['current_seed_sample'] if result else ''\n```", "```py\n    variables = {\n        ...\n        'db_host': {'type': 'str', 'value': 'localhost'},\n        'db_name': {'type': 'str', 'value': 'abq'}\n```", "```py\nfrom tkinter.simpledialog import Dialog\n```", "```py\nclass LoginDialog(Dialog):\n\n    def __init__(self, parent, title, error=''):\n        self.pw = tk.StringVar()\n        self.user = tk.StringVar()\n        self.error = tk.StringVar(value=error)\n        super().__init__(parent, title=title)\n```", "```py\n    def body(self, parent):\n        lf = tk.Frame(self)\n        ttk.Label(lf, text='Login to ABQ', font='Sans 20').grid()\n```", "```py\n        if self.error.get():\n            tk.Label(lf, textvariable=self.error,\n                     bg='darkred', fg='white').grid()\n```", "```py\n        ttk.Label(lf, text='User name:').grid()\n        self.username_inp = ttk.Entry(lf, textvariable=self.user)\n        self.username_inp.grid()\n        ttk.Label(lf, text='Password:').grid()\n        self.password_inp = ttk.Entry(lf, show='*', \n        textvariable=self.pw)\n        self.password_inp.grid()\n        lf.pack()\n        return self.username_inp\n```", "```py\n        def apply(self):\n            self.result = (self.user.get(), self.pw.get())\n```", "```py\n        def database_login(self):\n            error = ''\n            db_host = self.settings['db_host'].get()\n            db_name = self.settings['db_name'].get()\n            title = \"Login to {} at {}\".format(db_name, db_host)\n```", "```py\n        while True:\n            login = v.LoginDialog(self, title, error)\n            if not login.result:\n                break\n```", "```py\n        else:\n            username, password = login.result\n            try:\n                self.data_model = m.SQLModel(\n                 db_host, db_name, username, password)\n            except m.pg.OperationalError:\n                error = \"Login Failed\"\n            else:\n                break\n```", "```py\n        self.database_login()\n        if not hasattr(self, 'data_model'):\n            self.destroy()\n            return\n```", "```py\n        # Delete this line:\n        self.data_model = m.CSVModel(filename=self.filename.get())\n```", "```py\n        # The data record form\n        self.recordform = v.DataRecordForm(\n            self, self.data_model.fields, self.settings, \n            self.callbacks)\n```", "```py\n    def open_record(self, rowkey=None):\n        if rowkey is None:\n        # ...etc\n```", "```py\n        record = self.data_model.get_record(*rowkey)\n```", "```py\n        data = self.recordform.get()\n        try:\n            self.data_model.save_record(data)\n```", "```py\n        key = (data['Date'], data['Time'], data['Lab'], data['Plot'])\n        if self.data_model.last_write == 'update':\n            self.updated_rows.append(key)\n        else:\n            self.inserted_rows.append(key)\n        self.populate_recordlist()\n        if self.data_model.last_write == 'insert':\n            self.recordform.reset()\n```", "```py\n    def get_current_seed_sample(self, *args):\n        if not (hasattr(self, 'recordform')\n            and self.settings['autofill sheet data'].get()):\n            return\n        data = self.recordform.get()\n        plot = data['Plot']\n        lab = data['Lab']\n        if plot and lab:\n            seed = self.data_model.get_current_seed_sample(lab, plot)\n            self.recordform.inputs['Seed sample'].set(seed)\n```", "```py\n    def get_tech_for_lab_check(self, *args):\n        if not (hasattr(self, 'recordform')\n            and self.settings['autofill sheet data'].get()):\n            return\n        data = self.recordform.get()\n        date = data['Date']\n        time = data['Time']\n        lab = data['Lab']\n\n        if all([date, time, lab]):\n            check = self.data_model.get_lab_check(date, time, lab)\n            tech = check['lab_tech'] if check else ''\n            self.recordform.inputs['Technician'].set(tech)\n```", "```py\n        for field in ('Lab', 'Plot'):\n            self.inputs[field].variable.trace(\n                'w', self.callbacks['get_seed_sample'])\n        for field in ('Date', 'Time', 'Lab'):\n            self.inputs[field].variable.trace(\n                'w', self.callbacks['get_check_tech'])\n```", "```py\n        self.record_label.config(\n            text='Record for Lab {2}, Plot {3} at {0} {1}'\n            .format(*rowkey))\n```", "```py\n    def focus_next_empty(self):\n        for labelwidget in self.inputs.values():\n            if (labelwidget.get() == ''):\n                labelwidget.input.focus()\n                break\n```", "```py\nself.treeview.config(show='headings')\n```", "```py\n        for rowdata in rows:\n            rowkey = (str(rowdata['Date']), rowdata['Time'],\n            rowdata['Lab'], str(rowdata['Plot']))\n            values = [rowdata[key] for key in valuekeys]\n```", "```py\n        if self.inserted and rowkey in self.inserted:\n            tag = 'inserted'\n        elif self.updated and rowkey in self.updated:\n            tag = 'updated'\n        else:\n            tag = ''\n```", "```py\n        stringkey = '{}|{}|{}|{}'.format(*rowkey)\n```", "```py\n        self.treeview.insert('', 'end', iid=stringkey,\n            text=stringkey, values=values, tag=tag)\n```", "```py\n        if len(rows) > 0:\n            firstrow = self.treeview.identify_row(0)\n            self.treeview.focus_set()\n            self.treeview.selection_set(firstrow)\n            self.treeview.focus(firstrow)\n```", "```py\n        self.callbacks['on_open_record'](selected_id.split('|'))\n```"]