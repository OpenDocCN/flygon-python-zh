["```py\n    FinalStatusDocument\n    ReceivedInventoryItemName\n\n```", "```py\n    measured_height_value\n    estimated_weight_value\n    scheduled_delivery_date\n    location_code\n\n```", "```py\n     **>>> circumference_diameter_ratio = 355/113** \n\n     **>>> target_color_name = 'FireBrick'** \n\n     **>>> target_color_rgb = (178, 34, 34)** \n\n    ```", "```py\n **>>> target_color_name = first_color_name = 'FireBrick'** \n\n```", "```py\n **>>> id(target_color_name) == id(first_color_name)** \n\n **True** \n\n```", "```py\n **>>> total_count = 0** \n\n **>>> total_count += 5** \n\n **>>> total_count += 6** \n\n **>>> total_count** \n\n **11** \n\n```", "```py\n **>>> import this** \n\n```", "```py\n     **>>> 2** \n\n     **2** \n\n    ```", "```py\n     **>>> 0xff** \n\n     **255** \n\n    ```", "```py\n     **>>> b'\\xfe'** \n\n     **b'\\xfe'** \n\n    ```", "```py\n     **>>> 2**2048** \n\n     **323...656** \n\n    ```", "```py\n **>>> import math** \n\n **>>> math.factorial(52)** \n\n **80658175170943878571660636856403766975289505440883277824000000000000** \n\n```", "```py\n **>>> import sys** \n\n **>>> import math** \n\n **>>> math.log(sys.maxsize, 2)** \n\n **63.0** \n\n **>>> sys.int_info** \n\n **sys.int_info(bits_per_digit=30, sizeof_digit=4)** \n\n```", "```py\n **>>> id(1)** \n\n **4297537952** \n\n **>>> id(2)** \n\n **4297537984** \n\n **>>> a=1+1** \n\n **>>> id(a)** \n\n **4297537984** \n\n```", "```py\n **>>> len(str(2**2048))** \n\n **617** \n\n```", "```py\n **>>> xor = 0b0011 ^ 0b0101** \n\n **>>> bin(xor)** \n\n **'0b110'** \n\n```", "```py\n **>>> composite_byte = 0b01101100** \n\n **>>> bottom_6_mask =  0b00111111** \n\n **>>> bin(composite_byte >> 6)** \n\n **'0b1'** \n\n **>>> bin(composite_byte & bottom_6_mask)** \n\n **'0b101100'** \n\n```", "```py\n     **>>> from decimal import Decimal** \n\n    ```", "```py\n     **>>> from decimal import Decimal** \n\n     **>>> tax_rate = Decimal('7.25')/Decimal(100)** \n\n     **>>> purchase_amount = Decimal('2.95')** \n\n     **>>> tax_rate * purchase_amount** \n\n     **Decimal('0.213875')** \n\n    ```", "```py\n     **>>> penny=Decimal('0.01')** \n\n    ```", "```py\n     **>>> total_amount = purchase_amount + tax_rate*purchase_amount** \n\n     **>>> total_amount.quantize(penny)** \n\n     **Decimal('3.16')** \n\n    ```", "```py\n **>>> import decimal** \n\n **>>> total_amount.quantize(penny, decimal.ROUND_UP)** \n\n **Decimal('3.17')** \n\n```", "```py\n     **>>> from fractions import Fraction** \n\n    ```", "```py\n     **>>> from fractions import Fraction** \n\n     **>>> sugar_cups = Fraction('2.5')** \n\n     **>>> scale_factor = Fraction(5/8)** \n\n     **>>> sugar_cups * scale_factor** \n\n     **Fraction(25, 16)** \n\n    ```", "```py\n **>>> Fraction(24,16)** \n\n **Fraction(3, 2)** \n\n```", "```py\n     **>>> (19/155)*(155/19)** \n\n     **0.9999999999999999** \n\n    ```", "```py\n     **>>> answer= (19/155)*(155/19)** \n\n     **>>> round(answer, 3)\n          1.0** \n\n    ```", "```py\n     **>>> 1-answer** \n\n     **1.1102230246251565e-16** \n\n    ```", "```py\n **>>> float(total_amount)** \n\n **3.163875** \n\n **>>> float(sugar_cups * scale_factor)** \n\n **1.5625** \n\n```", "```py\n **>>> Fraction(19/155)** \n\n **Fraction(8832866365939553, 72057594037927936)** \n\n **>>> Decimal(19/155)** \n\n **Decimal('0.12258064516129031640279123394066118635237216949462890625')** \n\n```", "```py\n **>>> 8.066e+67** \n\n **8.066e+67** \n\n```", "```py\n **>>> 6737037547376141/2**53*2**226** \n\n **8.066e+67** \n\n```", "```py\n **>>> import math** \n\n **>>> math.frexp(8.066E+67)** \n\n **(0.7479614202861186, 226)** \n\n```", "```py\n **>>> (19/155)*(155/19) == 1.0** \n\n **False** \n\n **>>> math.isclose((19/155)*(155/19), 1)** \n\n **True** \n\n```", "```py\n **>>> math.sqrt(-2)** \n\n **Traceback (most recent call last):** \n\n **File \"<stdin>\", line 1, in <module>** \n\n **ValueError: math domain error** \n\n **>>> cmath.sqrt(-2)** \n\n **1.4142135623730951j** \n\n```", "```py\n     **>>> total_seconds = 7385** \n\n     **>>> hours = total_seconds//3600** \n\n     **>>> remaining_seconds = total_seconds % 3600** \n\n    ```", "```py\n     **>>> minutes = remaining_seconds//60** \n\n     **>>> seconds = remaining_seconds % 60** \n\n     **>>> hours, minutes, seconds** \n\n     **(2, 3, 5)** \n\n    ```", "```py\n     **>>> total_seconds = 7385** \n\n     **>>> hours, remaining_seconds = divmod(total_seconds, 3600)** \n\n    ```", "```py\n     **>>> minutes, seconds = divmod(remaining_seconds, 60)** \n\n     **>>> hours, minutes, seconds** \n\n     **(2, 3, 5)** \n\n    ```", "```py\n **>>> total_seconds = 7385** \n\n **>>> hours = total_seconds / 3600** \n\n **>>> round(hours,4)** \n\n **2.0514** \n\n```", "```py\n     **>>> from fractions import Fraction** \n\n     **>>> total_seconds = Fraction(7385)** \n\n    ```", "```py\n     **>>> hours = total_seconds / 3600** \n\n     **>>> hours** \n\n     **Fraction(1477, 720)** \n\n    ```", "```py\n     **>>> round(float(hours),4)** \n\n     **2.0514** \n\n    ```", "```py\n     **>>> 7358.0 // 3600.0** \n\n     **2.0** \n\n    ```", "```py\n **>>> from __future__ import division** \n\n```", "```py\n **>>> title = \"Recipe 5: Rewriting, and the Immutable String\"** \n\n **>>> title[8]= ''** \n\n **Traceback (most recent call last):** \n\n **File \"<stdin>\", line 1, in <module>** \n\n **TypeError: 'str' object does not support item assignment** \n\n```", "```py\n **>>> title = \"Recipe 5: Rewriting, and the Immutable String\"** \n\n```", "```py\n    some_string = some_string.method()\n\n```", "```py\n    some_string = some_string[:chop_here]\n\n```", "```py\n     **>>> colon_position = title.index(':')** \n\n    ```", "```py\n     **>>> discard_text, post_colon_text = title[:colon_position], title[colon_position+1:]** \n\n     **>>> discard_text** \n\n     **'Recipe 5'** \n\n     **>>> post_colon_text** \n\n     **' Rewriting, and the Immutable String'** \n\n    ```", "```py\n **>>> pre_colon_text, _, post_colon_text = title.partition(':')** \n\n **>>> pre_colon_text** \n\n **'Recipe 5'** \n\n **>>> post_colon_text** \n\n **' Rewriting, and the Immutable String'** \n\n```", "```py\n **>>> post_colon_text = post_colon_text.replace(' ', '_')** \n\n **>>> post_colon_text = post_colon_text.replace(',', '_')** \n\n **>>> post_colon_text** \n\n **'_Rewriting__and_the_Immutable_String'** \n\n```", "```py\n **>>> from string import whitespace, punctuation** \n\n **>>> for character in whitespace + punctuation:** \n\n **...     post_colon_text = post_colon_text.replace(character, '_')** \n\n **>>> post_colon_text** \n\n **'_Rewriting__and_the_Immutable_String'** \n\n```", "```py\n **>>> post_colon_text = post_colon_text.lower()** \n\n```", "```py\n **>>> post_colon_text = post_colon_text.strip('_')** \n\n```", "```py\n **>>> while '__' in post_colon_text:** \n\n **...    post_colon_text = post_colon_text.replace('__', '_')** \n\n```", "```py\n **>>> id(post_colon_text)** \n\n **4346207968** \n\n **>>> post_colon_text = post_colon_text.replace('_','-')** \n\n **>>> id(post_colon_text)** \n\n **4346205488** \n\n```", "```py\n **>>> 'some word'.isnumeric()** \n\n **False** \n\n **>>> '1298'.isnumeric()** \n\n **True** \n\n```", "```py\n **>>> ingredient = \"Kumquat: 2 cups\"** \n\n```", "```py\n     **(ingredient words): (amount digits) (unit words)** \n\n    ```", "```py\n     **>>> import re** \n\n    ```", "```py\n     **>>> pattern_text = r'(?P<ingredient>\\w+):\\s+(?P<amount>\\d+)\\s+(?P<unit>\\w+)'** \n\n    ```", "```py\n     **>>> pattern = re.compile(pattern_text)** \n\n    ```", "```py\n     **>>> match = pattern.match(ingredient)** \n\n     **>>> match is None** \n\n     **False** \n\n     **>>> match.groups()** \n\n     **('Kumquat', '2', 'cups')** \n\n    ```", "```py\n     **>>> match.group('ingredient')** \n\n     **'Kumquat'** \n\n     **>>> match.group('amount')** \n\n     **'2'** \n\n     **>>> match.group('unit')** \n\n     **'cups'** \n\n    ```", "```py\n    (?P<name>\\w+)\\s*[=:]\\s*(?P<value>.*)\n\n```", "```py\n    size = 12 \n    weight: 14\n\n```", "```py\n **>>> ingredient_pattern = re.compile(** \n\n **... r'(?P<ingredient>\\w+):\\s+' # name of the ingredient up to the \":\"** \n\n **... r'(?P<amount>\\d+)\\s+'      # amount, all digits up to a space** \n\n **... r'(?P<unit>\\w+)'           # units, alphanumeric characters** \n\n **... )** \n\n```", "```py\n **>>> id = \"IAD\"** \n\n **>>> location = \"Dulles Intl Airport\"** \n\n **>>> max_temp = 32** \n\n **>>> min_temp = 13** \n\n **>>> precipitation = 0.4** \n\n```", "```py\n **IAD : Dulles Intl Airport : 32 / 13 / 0.40** \n\n```", "```py\n     **'{id} : {location} : {max_temp} / {min_temp} / {precipitation}'** \n\n    ```", "```py\n     **'{id:s}  : {location:s} : {max_temp:d} / {min_temp:d} / {precipitation:f}'** \n\n    ```", "```py\n     **'{id:3d}  : {location:19s} : {max_temp:3d} / {min_temp:3d} / {precipitation:5.2f}'** \n\n    ```", "```py\n     **>>> '{id:3s}  : {location:19s} :  {max_temp:3d} / {min_temp:3d} / {precipitation:5.2f}'.format(** \n\n     **... id=id, location=location, max_temp=max_temp,** \n\n     **... min_temp=min_temp, precipitation=precipitation** \n\n     **... )** \n\n     **'IAD  : Dulles Intl Airport :   32 /  13 /  0.40'** \n\n    ```", "```py\n **>>> data = dict(** \n\n **... id=id, location=location, max_temp=max_temp,** \n\n **... min_temp=min_temp, precipitation=precipitation** \n\n **... )** \n\n **>>> '{id:3s}  : {location:19s} :  {max_temp:3d} / {min_temp:3d} / {precipitation:5.2f}'.format_map(data)** \n\n **'IAD  : Dulles Intl Airport :   32 /  13 /  0.40'** \n\n```", "```py\n **>>> '{id:3s}  : {location:19s} :  {max_temp:3d} / {min_temp:3d} / {precipitation:5.2f}'.format_map(** \n\n **...    vars()** \n\n **... )** \n\n **'IAD  : Dulles Intl Airport :   32 /  13 /  0.40'** \n\n```", "```py\n **print(\"some_variable={some_variable!r}\".format_map(vars()))** \n\n```", "```py\n **>>> class Summary:** \n\n **...     def __init__(self, id, location, min_temp, max_temp, precipitation):** \n\n **...         self.id= id** \n\n **...         self.location= location** \n\n **...         self.min_temp= min_temp** \n\n **...         self.max_temp= max_temp** \n\n **...         self.precipitation= precipitation** \n\n **...     def __str__(self):** \n\n **...         return '{id:3s}  : {location:19s} :  {max_temp:3d} / {min_temp:3d} / {precipitation:5.2f}'.format_map(** \n\n **...             vars(self)** \n\n **...         )** \n\n **>>> s= Summary('IAD', 'Dulles Intl Airport', 13, 32, 0.4)** \n\n **>>> print(s)** \n\n **IAD  : Dulles Intl Airport :   32 /  13 /  0.40** \n\n```", "```py\n **>>> title = \"Recipe 5: Rewriting an Immutable String\"** \n\n```", "```py\n **>>> from string import whitespace, punctuation** \n\n```", "```py\n     **>>> title_list = list(title)** \n\n    ```", "```py\n     **>>> colon_position = title_list.index(':')** \n\n    ```", "```py\n     **>>> del title_list[:colon_position+1]** \n\n    ```", "```py\n     **>>> for position in range(len(title_list)):** \n\n     **...    if title_list[position] in whitespace+punctuation:** \n\n     **...        title_list[position]= '_'** \n\n    ```", "```py\n     **>>> title = ''.join(title_list)** \n\n     **>>> title** \n\n     **'_Rewriting_an_Immutable_String'** \n\n    ```", "```py\n **>>> title_list.insert(0, 'prefix')** \n\n **>>> ''.join(title_list)** \n\n **'prefix_Rewriting_an_Immutable_String'** \n\n```", "```py\n **chcp 65001** \n\n```", "```py\n **'HELLO'** \n\n```", "```py\n **'\\u0048\\u0045\\u004c\\u004c\\u004f'** \n\n```", "```py\n     **export PYTHONIOENCODING=UTF-8** \n\n    ```", "```py\n     **python3.5** \n\n    ```", "```py\n     **>>> with open('some_file.txt', 'w', encoding='utf-8') as output:** \n\n     **...     print( 'You drew \\U0001F000', file=output )** \n\n     **>>> with open('some_file.txt', 'r', encoding='utf-8') as input:** \n\n     **...     text = input.read()** \n\n     **>>> text** \n\n     **'You drew \ufffd'** \n\n    ```", "```py\n **>>> string_bytes = 'You drew \\U0001F000'.encode('utf-8')** \n\n **>>> string_bytes** \n\n **b'You drew \\xf0\\x9f\\x80\\x80'** \n\n```", "```py\n **>>> 'You drew \\U0001F000'.encode('ascii')** \n\n **Traceback (most recent call last):** \n\n **File \"<stdin>\", line 1, in <module>** \n\n **UnicodeEncodeError: 'ascii' codec can't encode character '\\U0001f000' in position 9: ordinal not in range(128)** \n\n```", "```py\n **>>> import urllib.request** \n\n **>>> warnings_uri= 'http://www.nws.noaa.gov/view/national.php?prod=SMW&sid=AKQ'** \n\n **>>> with urllib.request.urlopen(warnings_uri) as source:** \n\n **...     warnings_text= source.read()** \n\n```", "```py\n **curl -O http://www.nws.noaa.gov/view/national.php?prod=SMW&sid=AKQ** \n\n **mv national.php\\?prod\\=SMW AKQ.html** \n\n```", "```py\n **>>> warnings_text[:80]** \n\n **b'<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.or'** \n\n```", "```py\n     **<?xml version=\"1.0\" encoding=\"UTF-8\"?>** \n\n    ```", "```py\n     **Content-Type: text/html; charset=ISO-8859-4** \n\n    ```", "```py\n     **<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">** \n\n    ```", "```py\n     **>>> document = forecast_text.decode(\"UTF-8\")** \n\n     **>>> document[:80]** \n\n     **'<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.or'** \n\n    ```", "```py\n **>>> import re** \n\n **>>> title_pattern = re.compile(r\"\\<h3\\>(.*?)\\</h3\\>\")** \n\n **>>> title_pattern.search( document )** \n\n **<_sre.SRE_Match object; span=(3438, 3489), match='<h3>There are no products active at this time.</h>** \n\n```", "```py\n **>>> ingredient = \"Kumquat: 2 cups\"** \n\n```", "```py\n **>>> import re** \n\n **>>> ingredient_pattern = re.compile(r'(?P<ingredient>\\w+):\\s+(?P<amount>\\d+)\\s+(?P<unit>\\w+)')** \n\n **>>> match = ingredient_pattern.match( ingredient )** \n\n **>>> match.groups()** \n\n **('Kumquat', '2', 'cups')** \n\n```", "```py\n     **>>> from fractions import Fraction** \n\n     **>>> my_data = ('Rice', Fraction(1/4), 'cups')** \n\n    ```", "```py\n **>>> one_tuple = ('item', )** \n\n **>>> len(one_tuple)** \n\n **1** \n\n```", "```py\n>>> 355,\n(355,)\n```", "```py\n     **>>> my_data[1]** \n\n     **Fraction(1, 4)** \n\n    ```", "```py\n     **>>> ingredient, amount, unit = my_data** \n\n     **>>> ingredient** \n\n     **'Rice'** \n\n     **>>> unit** \n\n     **'cups'** \n\n    ```", "```py\n **>>> t = ('Kumquat', '2', 'cups')** \n\n```", "```py\n     **>>> len(t)** \n\n     **3** \n\n    ```", "```py\n     **>>> t.count('2')** \n\n     **1** \n\n    ```", "```py\n     **>>> t.index('cups')** \n\n     **2** \n\n     **>>> t[2]** \n\n     **'cups'** \n\n    ```", "```py\n     **>>> t.index('Rice')** \n\n     **Traceback (most recent call last):** \n\n     **File \"<stdin>\", line 1, in <module>** \n\n     **ValueError: tuple.index(x): x not in tuple** \n\n    ```", "```py\n     **>>> 'Rice' in t** \n\n     **False** \n\n    ```"]