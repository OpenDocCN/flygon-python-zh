["```py\n. twittervotes/bin/activate\n```", "```py\ntwittervotes\n\u251c\u2500\u2500 core\n\u2502   \u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 twitter\n\u2514\u2500\u2500 templates\n```", "```py\nFlask==0.12.2\noauth2==1.9.0.post1\nPyYAML==3.12\nrequests==2.18.4\nRx==1.6.0\n```", "```py\nconsumer_key: '<replace with your consumer_key>'\nconsumer_secret: '<replace with your consumer secret>'\nrequest_token_url: 'https://api.twitter.com/oauth/request_token'\nauthorize_url: 'https://api.twitter.com/oauth/authorize'\naccess_token_url: 'https://api.twitter.com/oauth/access_token'\napi_version: '1.1'\nsearch_endpoint: 'https://api.twitter.com/1.1/search/tweets.json'\n```", "```py\nfrom collections import namedtuple\n\nConfig = namedtuple('Config', ['consumer_key',\n                               'consumer_secret',\n                               'request_token_url',\n                               'access_token_url',\n                               'authorize_url',\n                               'api_version',\n                               'search_endpoint', ])\n```", "```py\nfrom .models import Config\n```", "```py\nimport os\nimport yaml\n\nfrom .models import Config\n```", "```py\ndef _read_yaml_file(filename, cls):\n    core_dir = os.path.dirname(os.path.abspath(__file__))\n    file_path = os.path.join(core_dir, '..', filename)\n\n    with open(file_path, mode='r', encoding='UTF-8') as file:\n        config = yaml.load(file)\n        return cls(**config)\n```", "```py\ncore_dir = os.path.dirname(os.path.abspath(__file__)) will return\n```", "```py\nConfig(\n    consumer_key: ''\n    consumer_secret: ''\n    app_only_auth: 'https://api.twitter.com/oauth2/token'\n    request_token_url: 'https://api.twitter.com/oauth/request_token'\n    authorize_url: 'https://api.twitter.com/oauth/authorize'\n    access_token_url: 'https://api.twitter.com/oauth/access_token'\n    api_version: '1.1'\n    search_endpoint: '')\n```", "```py\ndef read_config():\n    try:\n        return _read_yaml_file('config.yaml', Config)\n    except IOError as e:\n        print(\"\"\" Error: couldn\\'t file the configuration file \n        `config.yaml`\n        'on your current directory.\n\n        Default format is:',\n\n        consumer_key: 'your_consumer_key'\n        consumer_secret: 'your_consumer_secret'\n        request_token_url: \n        'https://api.twitter.com/oauth/request_token'\n        access_token_url:  \n        'https://api.twitter.com/oauth/access_token'\n        authorize_url: 'https://api.twitter.com/oauth/authorize'\n        api_version: '1.1'\n        search_endpoint: ''\n        \"\"\")\n        raise\n```", "```py\nfrom .config import read_config\n```", "```py\nRequestToken = namedtuple('RequestToken', ['oauth_token',\n                                         'oauth_token_secret',\n                                        'oauth_callback_confirmed'])\n```", "```py\nfrom .models import RequestToken\n```", "```py\n<html>\n    <head>\n    </head>\n    <body>\n       <a href=\"{{link}}\"> Click here to authorize </a>\n    </body>\n</html>\n```", "```py\nfrom urllib.parse import parse_qsl\n\nimport yaml\n\nfrom flask import Flask\nfrom flask import render_template\nfrom flask import request\n\nimport oauth2 as oauth\n\nfrom core import read_config\nfrom core.models import RequestToken\n```", "```py\napp = Flask(__name__)\n\nclient = None\nconsumer = None\nreq_token = None\n```", "```py\ndef get_oauth_token(config):\n\n    global consumer\n    global client\n    global req_token\n\n    consumer = oauth.Consumer(config.consumer_key, \n     config.consumer_secret)\n    client = oauth.Client(consumer)\n\n    resp, content = client.request(config.request_token_url, 'GET')\n\n    if resp['status'] != '200':\n        raise Exception(\"Invalid response \n        {}\".format(resp['status']))\n\n    request_token = dict(parse_qsl(content.decode('utf-8')))\n\n    req_token = RequestToken(**request_token)\n```", "```py\n@app.route('/')\ndef home():\n\n    config = read_config()\n\n    get_oauth_token(config)\n\n    url = f'{config.authorize_url}?oauth_token=\n    {req_token.oauth_token}'\n\n    return render_template('index.html', link=url)\n```", "```py\n@app.route('/callback')\ndef callback():\n\n    global req_token\n    global consumer\n\n    config = read_config()\n\n    oauth_verifier = request.args.get('oauth_verifier', '')\n\n    token = oauth.Token(req_token.oauth_token,\n                        req_token.oauth_token_secret)\n\n    token.set_verifier(oauth_verifier)\n\n    client = oauth.Client(consumer, token)\n\n    resp, content = client.request(config.access_token_url, 'POST')\n    access_token = dict(parse_qsl(content.decode('utf-8')))\n\n    with open('.twitterauth', 'w') as req_auth:\n        file_content = yaml.dump(access_token, \n        default_flow_style=False)\n        req_auth.write(file_content)\n\n    return 'All set! You can close the browser window and stop the \n    server.'\n```", "```py\noauth_token: 31******95-**************************rt*****io\noauth_token_secret: NZH***************************************ze8v\nscreen_name: the8bitcoder\nuser_id: '31******95'\nx_auth_expires: '0'\n```", "```py\nif __name__ == '__main__':\n    app.run(host='localhost', port=3000)\n```", "```py\nRequestAuth = namedtuple('RequestAuth', ['oauth_token',\n                                         'oauth_token_secret',\n                                         'user_id',\n                                         'screen_name',\n                                         'x_auth_expires', ])\n```", "```py\nfrom .models import RequestAuth\n```", "```py\nfrom .models import RequestAuth\n```", "```py\ndef read_reqauth():\n    try:\n        return _read_yaml_file('.twitterauth', RequestAuth)\n    except IOError as e:\n        print(('It seems like you have not authorized the  \n        application.\\n'\n               'In order to use your twitter data, please run the '\n               'auth.py first.'))\n```", "```py\noauth_token: 31*******5-KNAbN***********************K40\noauth_token_secret: d**************************************Y3\nscreen_name: the8bitcoder\nuser_id: '31******95'\nx_auth_expires: '0'\n```", "```py\nclass Hashtag:\n    def __init__(self, name):\n        self.name = name\n        self.total = 0\n  self.refresh_url = None\n```", "```py\nrefresh_url': '?since_id=963341767532834817&q=%23python&result_type=mixed&include_entities=1\n```", "```py\nfrom .hashtag import Hashtag\n```", "```py\nimport oauth2 as oauth\nimport time\nfrom urllib.parse import parse_qsl\nimport json\n\nimport requests\n\nfrom .config import read_config\nfrom .config import read_reqauth\n```", "```py\ndef prepare_request(url, url_params):\n    reqconfig = read_reqauth()\n    config = read_config()\n\n    token = oauth.Token(\n        key=reqconfig.oauth_token,\n        secret=reqconfig.oauth_token_secret)\n\n    consumer = oauth.Consumer(\n        key=config.consumer_key,\n        secret=config.consumer_secret)\n\n    params = {\n        'oauth_version': \"1.0\",\n        'oauth_nonce': oauth.generate_nonce(),\n        'oauth_timestamp': str(int(time.time()))\n    }\n\n    params['oauth_token'] = token.key\n    params['oauth_consumer_key'] = consumer.key\n\n    params.update(url_params)\n\n    req = oauth.Request(method=\"GET\", url=url, parameters=params)\n\n    signature_method = oauth.SignatureMethod_HMAC_SHA1()\n    req.sign_request(signature_method, consumer, token)\n\n    return req.to_url()\n```", "```py\ndef execute_request(hashtag):\n    config = read_config()\n\n if hashtag.refresh_url:\n        refresh_url = hashtag.refresh_url[1:]\n        url_params = dict(parse_qsl(refresh_url))\n else:\n        url_params = {\n            'q': f'#{hashtag.name}',\n            'result_type': 'mixed'\n  }\n\n    url = prepare_request(config.search_endpoint, url_params)\n\n    data = requests.get(url)\n\n    results = json.loads(data.text)\n\n    return (hashtag, results, )\n```", "```py\n'param1=1&param2=2&param3=3'\n```", "```py\n[('param1', '1'), ('param2', '2'), ('param3', '3')]\n```", "```py\n{'param1': '1', 'param2': '2', 'param3': '3'}\n```", "```py\nrefresh_url': '?since_id=963341767532834817&q=%23python&result_type=mixed&include_entities=1\n```", "```py\nfrom .request import execute_request\n```", "```py\nimport os\nimport logging\nfrom logging.config import fileConfig\n\ndef get_logger():\n    core_dir = os.path.dirname(os.path.abspath(__file__))\n    file_path = os.path.join(core_dir, '..', 'logconfig.ini')\n    fileConfig(file_path)\n    return logging.getLogger('twitterVotesLogger')\n```", "```py\n[loggers]\nkeys=root,twitterVotesLogger\n\n[handlers]\nkeys=consoleHandler\n\n[formatters]\nkeys=simpleFormatter\n\n[logger_root]\nlevel=INFO\nhandlers=consoleHandler\n\n[logger_twitterVotesLogger]\nlevel=INFO\nhandlers=consoleHandler\nqualname=twitterVotesLogger\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=INFO\nformatter=simpleFormatter\nargs=(sys.stdout,)\n\n[formatter_simpleFormatter]\nformat=[%(levelname)s] %(asctime)s - %(message)s\ndatefmt=%Y-%m-%d %H:%M:%S\n```", "```py\nfrom argparse import ArgumentParser\n\nfrom .app_logger import get_logger\n```", "```py\ndef validated_args(args):\n\n    logger = get_logger()\n\n    unique_hashtags = list(set(args.hashtags))\n\n    if len(unique_hashtags) < len(args.hashtags):\n        logger.info(('Some hashtags passed as arguments were '\n                     'duplicated and are going to be ignored'))\n\n        args.hashtags = unique_hashtags\n\n    if len(args.hashtags) > 4:\n        logger.error('Voting app accepts only 4 hashtags at the \n        time')\n        args.hashtags = args.hashtags[:4]\n\n    return args\n```", "```py\ndef parse_commandline_args():\n    argparser = ArgumentParser(\n        prog='twittervoting',\n        description='Collect votes using twitter hashtags.')\n\n    required = argparser.add_argument_group('require arguments')\n\n    required.add_argument(\n        '-ht', '--hashtags',\n        nargs='+',\n        required=True,\n        dest='hashtags',\n        help=('Space separated list specifying the '\n 'hashtags that will be used for the voting.\\n'\n 'Type the hashtags without the hash symbol.'))\n\n    args = argparser.parse_args()\n\n    return validated_args(args)\n```", "```py\n--hashtags item1 item2 item3\n```", "```py\nfrom .cmdline_parser import parse_commandline_args\n```", "```py\nfrom .hashtag import Hashtag\n\nclass HashtagStatsManager:\n\n    def __init__(self, hashtags):\n\n        if not hashtags:\n            raise AttributeError('hashtags must be provided')\n\n        self._hashtags = {hashtag: Hashtag(hashtag) for hashtag in \n         hashtags}\n\n    def update(self, data):\n\n        hashtag, results = data\n\n        metadata = results.get('search_metadata')\n        refresh_url = metadata.get('refresh_url')\n        statuses = results.get('statuses')\n\n        total = len(statuses)\n\n        if total > 0:\n            self._hashtags.get(hashtag.name).total += total\n            self._hashtags.get(hashtag.name).refresh_url = \n            refresh_url\n\n    @property\n    def hashtags(self):\n        return self._hashtags\n```", "```py\nfrom .hashtagstats_manager import HashtagStatsManager\n```", "```py\nimport concurrent.futures\n\nfrom rx import Observable\n\nclass Runner:\n\n    def __init__(self, on_success, on_error, on_complete):\n        self._on_success = on_success\n        self._on_error = on_error\n        self._on_complete = on_complete\n\n    def exec(self, func, items):\n\n        observables = []\n\n        with concurrent.futures.ProcessPoolExecutor() as executor:\n            for item in items.values():\n                _future = executor.submit(func, item)\n                observables.append(Observable.from_future(_future))\n\n        all_observables = Observable.merge(observables)\n\n        all_observables.subscribe(self._on_success,\n                                  self._on_error,\n                                  self._on_complete)\n```", "```py\nfrom .runner import Runner\n```", "```py\nfrom core import parse_commandline_args\nfrom core import execute_request\nfrom core import Runner\n\nfrom core.twitter import HashtagStatsManager\n\nfrom tkinter import Tk\nfrom tkinter import Frame\nfrom tkinter import Label\nfrom tkinter import StringVar\nfrom tkinter.ttk import Button\n```", "```py\nclass Application(Frame):\n\n    def __init__(self, hashtags=[], master=None):\n        super().__init__(master)\n\n        self._manager = HashtagStatsManager(hashtags)\n\n        self._runner = Runner(self._on_success,\n                              self._on_error,\n                              self._on_complete)\n\n        self._items = {hashtag: StringVar() for hashtag in hashtags}\n        self.set_header()\n        self.create_labels()\n        self.pack()\n\n        self.button = Button(self, style='start.TButton', \n                             text='Update',\n                             command=self._fetch_data)\n        self.button.pack(side=\"bottom\")\n```", "```py\ndef set_header(self):\n    title = Label(self,\n                  text='Voting for hasthags',\n                  font=(\"Helvetica\", 24),\n                  height=4)\n    title.pack()\n```", "```py\ndef create_labels(self):\n    for key, value in self._items.items():\n        label = Label(self,\n                      textvariable=value,\n                      font=(\"Helvetica\", 20), height=3)\n        label.pack()\n        self._items[key].set(f'#{key}\\nNumber of votes: 0')\n```", "```py\ndef _update_label(self, data):\n    hashtag, result = data\n\n    total = self._manager.hashtags.get(hashtag.name).total\n\n    self._items[hashtag.name].set(\n        f'#{hashtag.name}\\nNumber of votes: {total}')\n```", "```py\ndef _fetch_data(self):\n    self._runner.exec(execute_request,\n                      self._manager.hashtags)\n```", "```py\ndef _on_error(self, error_message):\n    raise Exception(error_message)\n```", "```py\ndef _on_success(self, data):\n    hashtag, _ = data\n    self._manager.update(data)\n    self._update_label(data)\n```", "```py\ndef _on_complete(self):\n    pass\n```", "```py\ndef start_app(args):\n    root = Tk()\n\n    app = Application(hashtags=args.hashtags, master=root)\n    app.master.title(\"Twitter votes\")\n    app.master.geometry(\"400x700+100+100\")\n    app.mainloop()\n```", "```py\ndef main():\n    args = parse_commandline_args()\n    start_app(args)\n\nif __name__ == '__main__':\n    main()\n```", "```py\npython app.py --help\n```", "```py\npython app.py --hashtags debian ubuntu arch\n```"]