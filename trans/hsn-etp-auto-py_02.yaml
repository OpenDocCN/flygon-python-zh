- en: Common Libraries Used in Automation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化中常用的库
- en: This chapter will walk you through how Python packages are structured and the
    common libraries used today to automate the system and network infrastructure.
    There's a long growing list of Python packages that cover network automation,
    system administration, and managing public and private clouds.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将带您了解Python包的结构以及今天用于自动化系统和网络基础设施的常见库。有一个不断增长的Python包列表，涵盖了网络自动化、系统管理以及管理公共和私有云的功能。
- en: Also, it's important to understand how to access the module source code and
    how the small pieces inside the Python package are related to each other so we
    can modify the code, add or remove features, and share the code again with the
    community.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，重要的是要理解如何访问模块源代码，以及Python包中的小部分如何相互关联，这样我们就可以修改代码，添加或删除功能，并再次与社区分享代码。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding Python packages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Python包
- en: Common Python libraries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的Python库
- en: Accessing module source code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问模块源代码
- en: Understanding Python packages
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Python包
- en: Python core code is actually small by design to maintain simplicity. Most functionalities
    will be through adding third-party packages and modules.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python核心代码实际上是小而简单的。大部分功能都是通过添加第三方包和模块来实现的。
- en: Module is a Python file that contains functions, statements, and classes that
    will be used inside your code. The first thing to do is `import` the module then
    start to use its functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是一个包含函数、语句和类的Python文件，将在您的代码中使用。首先要做的是`import`模块，然后开始使用它的函数。
- en: 'On other hand, a **package** collects related modules connected to each other
    and puts them in a single hierarchy. Some large packages such as `matplotlib`
    or `django` have hundreds of modules inside them, and developers usually categorize
    the related modules into a sub-directories. For example, the `netmiko` package
    contains multiple sub-directories and each one contains modules to connect to
    network devices from different vendors:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，一个**包**会收集相关的模块并将它们放在一个层次结构中。一些大型包，如`matplotlib`或`django`，其中包含数百个模块，开发人员通常会将相关的模块分类到子目录中。例如，`netmiko`包包含多个子目录，每个子目录包含连接到不同供应商的网络设备的模块：
- en: '![](../images/00031.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00031.jpeg)'
- en: Doing that gives the package maintainer the flexibility to add or remove features
    from each module without breaking the global package operation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可以让包的维护者灵活地向每个模块添加或删除功能，而不会破坏全局包的操作。
- en: Package search paths
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包搜索路径
- en: Typically, Python searches for modules in some specific system paths. You can
    print these paths by importing the `sys` module and printing the `sys.path`. This
    will actually return the strings inside the `PYTHONPATH` environment variable
    and inside the operating system; notice the result is just a normal Python list.
    You can add more paths to the search scope using a list function such as `insert()`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，Python会在一些特定的系统路径中搜索模块。您可以通过导入`sys`模块并打印`sys.path`来打印这些路径。这实际上会返回`PYTHONPATH`环境变量和操作系统中的字符串；请注意结果只是一个普通的Python列表。您可以使用列表函数（如`insert()`）添加更多路径到搜索范围。
- en: 'However, it''s better to install the packages in the default search paths so
    the code won''t break when you share it with other developers:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最好是将包安装在默认搜索路径中，这样当与其他开发人员共享代码时，代码不会出错：
- en: '![](../images/00032.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00032.jpeg)'
- en: 'A simple package structure with a single module will be something like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的包结构，只有一个模块，会是这样的：
- en: '![](../images/00033.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00033.jpeg)'
- en: The `__init__` file inside each package (in the global directory or in the sub-directory)
    will tell the Python interpreter that this directory is a Python package, and
    each file ending with `.py` will be a module file, which could be imported inside
    your code. The second function of the `init` file is to execute any code inside
    it once the package is imported. However, most developers leave it empty and just
    use it to mark the directory as a Python package.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个包中的`__init__`文件（在全局目录或子目录中）会告诉Python解释器这个目录是一个Python包，每个以`.py`结尾的文件都是一个模块文件，可以在你的代码中导入。`init`文件的第二个功能是一旦导入包，就执行其中的任何代码。然而，大多数开发人员会将其留空，只是用它来标记目录为Python包。
- en: Common Python libraries
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的Python库
- en: In the next sections, we will explore the common Python libraries used for network,
    system, and cloud automation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨用于网络、系统和云自动化的常见Python库。
- en: Network Python Libraries
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络Python库
- en: Network environments nowadays contain multiple devices from many vendors, and
    each device plays a different role. Design and automation frameworks for network
    devices are essential to network engineers in order to automate repeated tasks
    and enhance the way they usually do their job, while reducing human errors. Large
    enterprises and service providers usually tend to design a workflow that can automate
    different network tasks and improve network resiliency and agility. The workflow
    contains a series of related tasks that together form a process or a workflow
    that will be executed when there's a change needed on the network.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如今的网络环境中包含来自许多供应商的多个设备，每个设备扮演不同的角色。设计和自动化网络设备的框架对于网络工程师来说至关重要，可以自动执行重复的任务，提高他们通常完成工作的方式，同时减少人为错误。大型企业和服务提供商通常倾向于设计一个能够自动执行不同网络任务并提高网络弹性和灵活性的工作流程。这个工作流程包含一系列相关的任务，共同形成一个流程或工作流程，当网络需要变更时将被执行。
- en: 'Some of the tasks that could be performed by a network automation framework
    without human intervention are:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 网络自动化框架可以在无需人工干预的情况下执行一些任务：
- en: Root cause analysis for the problem
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题的根本原因分析
- en: Checking and updating the device operating system
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查和更新设备操作系统
- en: Discovering the topology and relationships between nodes
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现节点之间的拓扑和关系
- en: Security audits and compliance reporting
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全审计和合规性报告
- en: Installing and withdrawing routes from the network device based on the application
    needs
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据应用程序需求从网络设备安装和撤销路由
- en: Managing device configuration and rollback
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理设备配置和回滚
- en: 'Here are some Python libraries that are used to automate network devices:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于自动化网络设备的一些Python库：
- en: '| **Network Library** | **Description** | **Link** |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **网络库** | **描述** | **链接** |'
- en: '| Netmiko | A multi-vendor library that supports SSHing and Telnet for network
    devices and executes commands on it. Support includes Cisco, Arista, Juniper,
    HP, Ciena, and many other vendors. | [https://github.com/ktbyers/netmiko](https://github.com/ktbyers/netmiko)
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Netmiko | 一个支持SSH和Telnet的多供应商库，用于在网络设备上执行命令。支持的供应商包括Cisco、Arista、Juniper、HP、Ciena和许多其他供应商。|
    [https://github.com/ktbyers/netmiko](https://github.com/ktbyers/netmiko) |'
- en: '| NAPALM | A Python library that works as a wrapper for the official Vendor
    API. It provides  abstraction methods that connect to devices from multiple vendors
    and extract information from it while returning the output in an structured format.
    This can be easily processed by software. | [https://github.com/napalm-automation/napalm](https://github.com/napalm-automation/napalm)
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| NAPALM | 一个Python库，作为官方供应商API的包装器工作。它提供了连接到多个供应商设备并从中提取信息的抽象方法，同时以结构化格式返回输出。这可以很容易地被软件处理。|
    [https://github.com/napalm-automation/napalm](https://github.com/napalm-automation/napalm)
    |'
- en: '| PyEZ | A Python library used to manage and automate Juniper devices. It can
    perform CRUD operation on the device from the Python client. Also, it can retrieve
    facts about the device such as the management IP, serial number, and version.
    The returned output will be in JSON or XML format. | [https://github.com/Juniper/py-junos-eznc](https://github.com/Juniper/py-junos-eznc)
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| PyEZ | 用于管理和自动化Juniper设备的Python库。它可以从Python客户端对设备执行CRUD操作。此外，它可以检索有关设备的信息，如管理IP、序列号和版本。返回的输出将以JSON或XML格式呈现。|
    [https://github.com/Juniper/py-junos-eznc](https://github.com/Juniper/py-junos-eznc)
    |'
- en: '| infoblox-client | A Python client used to interact with infoblox NIOS over
    the interface, based on a REST called WAPI. | [https://github.com/infobloxopen/infoblox-client](https://github.com/infobloxopen/infoblox-client)
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| infoblox-client | 用于基于REST称为WAPI与infoblox NIOS进行交互的Python客户端。| [https://github.com/infobloxopen/infoblox-client](https://github.com/infobloxopen/infoblox-client)
    |'
- en: '| NX-API | A Cisco Nexus (some platforms only) series API that exposes the
    CLI through HTTP and HTTPS. You can enter a show command in the provided sandbox
    portal and it will be converted to an API call to the device and will return the
    output in JSON and XML format. | [https://developer.cisco.com/docs/nx-os/#!working-with-nx-api-cli](https://developer.cisco.com/docs/nx-os/#!working-with-nx-api-cli)
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| NX-API | 一个Cisco Nexus（仅限某些平台）系列API，通过HTTP和HTTPS公开CLI。您可以在提供的沙箱门户中输入show命令，它将被转换为对设备的API调用，并以JSON和XML格式返回输出。|
    [https://developer.cisco.com/docs/nx-os/#!working-with-nx-api-cli](https://developer.cisco.com/docs/nx-os/#!working-with-nx-api-cli)
    |'
- en: '| pyeapi | A Python library that acts as a wrapper around the Arista EOS eAPI
    and is used to configure Arista EOS devices. The library supports eAPI calls over
    HTTP and HTTPs. | [https://github.com/arista-eosplus/pyeapi](https://github.com/arista-eosplus/pyeapi)
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| pyeapi | 一个Python库，作为Arista EOS eAPI的包装器，用于配置Arista EOS设备。该库支持通过HTTP和HTTPs进行eAPI调用。|
    [https://github.com/arista-eosplus/pyeapi](https://github.com/arista-eosplus/pyeapi)
    |'
- en: '| netaddr | A Python library for working with network addresses such as IPv4,
    IPv6, and layer 2 addresses (MAC addresses). It can iterate, slice, sort, and
    summarize the IP block. | [https://github.com/drkjam/netaddr](https://github.com/drkjam/netaddr)
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| netaddr | 用于处理IPv4、IPv6和第2层地址（MAC地址）的Python库。它可以迭代、切片、排序和总结IP块。| [https://github.com/drkjam/netaddr](https://github.com/drkjam/netaddr)
    |'
- en: '| ciscoconfparse | A Python library that is able to parse a Cisco IOS-style
    configuration and returns the output in a structured format. The library also
    provides support for device configuration based on brace-delimited configurations
    such as Juniper and F5. | [https://github.com/mpenning/ciscoconfparse](https://github.com/mpenning/ciscoconfparse)
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| ciscoconfparse | 一个能够解析Cisco IOS风格配置并以结构化格式返回输出的Python库。该库还支持基于大括号分隔的配置的设备配置，如Juniper和F5。|
    [https://github.com/mpenning/ciscoconfparse](https://github.com/mpenning/ciscoconfparse)
    |'
- en: '| NSoT | A database for tracking the inventory and metadata of network devices.
    It provides a frontend GUI based on Python Django. The backend is based on SQLite
    database where the data is stored. Also, it provides the API interface for the
    inventory using pynsot bindings. | [https://github.com/dropbox/nsot](https://github.com/dropbox/nsot)
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| NSoT | 用于跟踪网络设备库存和元数据的数据库。它提供了一个基于Python Django的前端GUI。后端基于SQLite数据库存储数据。此外，它提供了使用pynsot绑定的库存的API接口。|
    [https://github.com/dropbox/nsot](https://github.com/dropbox/nsot) |'
- en: '| Nornir | A new automation framework based on Python and consumed directly
    from Python code without a need to have custom  **DSL** (**Domain Specific Language**).
    The Python code is called runbook and contains a set of tasks that can run against
    the devices stored in the inventory (supports also Ansible inventory format).
    The tasks can utilize other libraries (such as NAPALM) to get information or configure
    the devices. | [https://github.com/nornir-automation/nornir](https://github.com/nornir-automation/nornir)
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| Nornir | 一个基于Python的新的自动化框架，可以直接从Python代码中使用，无需自定义**DSL**（**领域特定语言**）。Python代码称为runbook，包含一组可以针对存储在库存中的设备运行的任务（还支持Ansible库存格式）。任务可以利用其他库（如NAPALM）来获取信息或配置设备。|
    [https://github.com/nornir-automation/nornir](https://github.com/nornir-automation/nornir)
    |'
- en: System and cloud Python libraries
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统和云Python库
- en: 'Here are some of the python packages that can be used for both system and cloud
    administration. Public cloud providers such as **Amazon Web Services** (**AWS**)
    and Google tend to provide open and standard access to their resources in order
    to be easily integrated with the organization DevOps model. Phases like continuous
    integration, testing, and deployment require *continuous* access to infrastructure
    (either virtualized or bare metal servers) in order to complete the code life
    cycle. This can''t be done manually and needs to be automated:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可用于系统和云管理的Python软件包。像**Amazon Web Services**（**AWS**）和Google这样的公共云提供商倾向于以开放和标准的方式访问其资源，以便与组织的DevOps模型轻松集成。像持续集成、测试和部署这样的阶段需要对基础设施（虚拟化或裸金属服务器）进行*持续*访问，以完成代码生命周期。这无法手动完成，需要自动化：
- en: '| **Library** | **Description** | **Link** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **库** | **描述** | **链接** |'
- en: '| ConfigParser | Python standard library to parse and work with the INI files.
    | [https://github.com/python/cpython/blob/master/Lib/configparser.py](https://github.com/python/cpython/blob/master/Lib/configparser.py)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| ConfigParser | 用于解析和处理INI文件的Python标准库。 | [https://github.com/python/cpython/blob/master/Lib/configparser.py](https://github.com/python/cpython/blob/master/Lib/configparser.py)
    |'
- en: '| Paramiko | Paramiko is a Python (2.7, 3.4+) implementation of the SSHv2 protocol,
    providing both client and server functionality. | [https://github.com/paramiko/paramiko](https://github.com/paramiko/paramiko)
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| Paramiko | Paramiko是SSHv2协议的Python（2.7、3.4+）实现，提供客户端和服务器功能。 | [https://github.com/paramiko/paramiko](https://github.com/paramiko/paramiko)
    |'
- en: '| Pandas | A library providing high-performance, easy-to-use data structures
    and data analysis tools. | [https://github.com/pandas-dev/pandas](https://github.com/pandas-dev/pandas)
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Pandas | 提供高性能、易于使用的数据结构和数据分析工具的库。 | [https://github.com/pandas-dev/pandas](https://github.com/pandas-dev/pandas)
    |'
- en: '| `boto3` | Offifical Python interface that manages different AWS operations,
    such as creating EC2 instances and  S3 storage. | [https://github.com/boto/boto3](https://github.com/boto/boto3)
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `boto3` | 官方Python接口，用于管理不同的AWS操作，例如创建EC2实例和S3存储。 | [https://github.com/boto/boto3](https://github.com/boto/boto3)
    |'
- en: '| `google-api-python-client` | Google official API client library for Google
    Cloud Platform. | [https://github.com/google/google-api-python-client](https://github.com/google/google-api-python-client)
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `google-api-python-client` | Google Cloud Platform的官方API客户端库。 | [https://github.com/google/google-api-python-client](https://github.com/google/google-api-python-client)
    |'
- en: '| `pyVmomi` | The official Python SDK from VMWare that manages ESXi and vCenter.
    | [https://github.com/vmware/pyvmomi](https://github.com/vmware/pyvmomi) |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `pyVmomi` | 来自VMWare的官方Python SDK，用于管理ESXi和vCenter。 | [https://github.com/vmware/pyvmomi](https://github.com/vmware/pyvmomi)
    |'
- en: '| PyMYSQL | A pure python MySQL driver to work with MySQL DBMS. | [https://github.com/PyMySQL/PyMySQL](https://github.com/PyMySQL/PyMySQL)
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| PyMYSQL | 用于与MySQL DBMS一起工作的纯Python MySQL驱动程序。 | [https://github.com/PyMySQL/PyMySQL](https://github.com/PyMySQL/PyMySQL)
    |'
- en: '| Psycopg | The PostgresSQL adapter for python which conforms to DP-API 2.0
    standard. | [http://initd.org/psycopg/](http://initd.org/psycopg/) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| Psycopg | 适用于Python的PostgresSQL适配器，符合DP-API 2.0标准。 | [http://initd.org/psycopg/](http://initd.org/psycopg/)
    |'
- en: '| Django | A high-level open source web framework based on Python. The framework
    follows the **MVT** (**Model, View, and Template**) architecture design for building
    web applications without the hassle of web development and common security mistakes.
    | [https://www.djangoproject.com/](https://www.djangoproject.com/) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| Django | 基于Python的高级开源Web框架。该框架遵循**MVT**（**Model, View, and Template**）架构设计，用于构建Web应用程序，无需进行Web开发和常见安全错误。
    | [https://www.djangoproject.com/](https://www.djangoproject.com/) |'
- en: '| Fabric | A simple Python tool for  executing commands and software deployments
    on remote devices based on SSH. | [https://github.com/fabric/fabric](https://github.com/fabric/fabric)
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Fabric | 用于在基于SSH的远程设备上执行命令和软件部署的简单Python工具。 | [https://github.com/fabric/fabric](https://github.com/fabric/fabric)
    |'
- en: '| SCAPY | A brilliant Python-based packet manipulation that is able to handle
    a wide range of protocols and can build packets with any combination of network
    layers; it can also send them on the wire. | [https://github.com/secdev/scapy](https://github.com/secdev/scapy)
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| SCAPY | 一个出色的基于Python的数据包操作工具，能够处理各种协议，并可以使用任意组合的网络层构建数据包；它还可以将它们发送到网络上。
    | [https://github.com/secdev/scapy](https://github.com/secdev/scapy) |'
- en: '| Selenium | A python library used to automate web-browser tasks and web-acceptance
    testing. The library works with Selenium webdrivers for Firefox, Chrome, and Internet
    Explorer to run tests on web browsers. | [https://pypi.org/project/selenium/](https://pypi.org/project/selenium/)
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| Selenium | 用于自动化Web浏览器任务和Web验收测试的Python库。该库与Firefox、Chrome和Internet Explorer的Selenium
    Webdriver一起工作，以在Web浏览器上运行测试。 | [https://pypi.org/project/selenium/](https://pypi.org/project/selenium/)
    |'
- en: 'You can find more of the python packages categorized into different areas at
    the following link: [https://github.com/vinta/awesome-python](https://github.com/vinta/awesome-python).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到更多按不同领域分类的Python软件包：[https://github.com/vinta/awesome-python](https://github.com/vinta/awesome-python)。
- en: Accessing module source code
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问模块源代码
- en: 'You can access the source code of any module that you use in two ways. First,
    go to the `module` page at [github.com](https://github.com/) and view all the
    files, releases, commits, and issues in one place, as in the following screenshot.
    I have read access to all shared code via the `netmiko` module maintainer and
    can see a full list of commits and file contents:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以两种方式访问您使用的任何模块的源代码。首先，转到[github.com](https://github.com/)上的`module`页面，查看所有文件、发布、提交和问题，就像下面的截图一样。我通过`netmiko`模块的维护者具有对所有共享代码的读取权限，并可以查看完整的提交列表和文件内容：
- en: '![](../images/00034.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00034.jpeg)'
- en: 'The second method is to install the package itself in the Python site-package
    directory using `pip` or PyCharm GUI. What `pip` actually does is it goes to GitHub
    and downloads the module content and runs `setup.py` to install and register the
    module. You can see the module files, but this time you have full read/write access
    on all files and you can change the original code. For example, the following
    code leverages the `netmiko` library to connect to a Cisco device and execute
    the `show arp` command on it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是使用`pip`或PyCharm GUI将包本身安装到Python站点包目录中。`pip`实际上的操作是到GitHub下载模块内容并运行`setup.py`来安装和注册模块。你可以看到模块文件，但这次你对所有文件都有完全的读写权限，可以更改原始代码。例如，以下代码利用`netmiko`库连接到思科设备并在其上执行`show
    arp`命令：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If I want to see the netmiko source code, I can go either to site-packages
    where the netmiko library installed and list all files *or* I can use *Ctrl* and
    left-click on the module name in PyCharm. This will open the source code in a
    new tab:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想看netmiko源代码，我可以去安装netmiko库的site-packages并列出所有文件*或*我可以在PyCharm中使用*Ctrl*和左键单击模块名称。这将在新标签中打开源代码：
- en: '![](../images/00035.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00035.jpeg)'
- en: Visualizing Python code
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化Python代码
- en: Ever wondered how a Python custom module or class is manufactured? How does
    the developer write the Python code and glue it together to create this nice and
    amazing *x* module? What's going on under the hood?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否想知道Python自定义模块或类是如何制造的？开发人员如何编写Python代码并将其粘合在一起以创建这个漂亮而惊人的*x*模块？底层发生了什么？
- en: Documentation is a good start, of course, but we all know that it's not usually
    updated with every new step or detail that the developer added.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是一个很好的开始，当然，我们都知道它通常不会随着每一步或开发人员添加的每一个细节而更新。
- en: For example, we all know the powerful netmiko library created and maintained
    by Kirk Byers ([https://github.com/ktbyers/netmiko](https://github.com/ktbyers/netmiko))
    that leverages another popular SSH library called Paramiko ([http://www.paramiko.org/](http://www.paramiko.org/)).
    But we don't understand the details and how the classes are related to each other.
    If you need to understand the magic behind netmiko (or any other library) in order
    to process the request and return the result, please follow the next steps (requires
    PyCharm professional edition).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们都知道由Kirk Byers创建和维护的强大的netmiko库（[https://github.com/ktbyers/netmiko](https://github.com/ktbyers/netmiko)），它利用了另一个名为Paramiko的流行SSH库（[http://www.paramiko.org/](http://www.paramiko.org/)）。但我们不了解细节以及这些类之间的关系。如果你需要了解netmiko（或任何其他库）背后的魔力，以便处理请求并返回结果，请按照以下步骤（需要PyCharm专业版）。
- en: Code visualization and inspection in PyCharm is not supported in PyCharm community
    edition and is only supported in the professional version.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm中的代码可视化和检查不受PyCharm社区版支持，只有专业版支持。
- en: 'Following are the steps you need to follow:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你需要遵循的步骤：
- en: Go to the netmiko module source code inside the Python library location folder
    (usually `C:\Python27\Lib\site-packages` on Windows or `/usr/local/lib/pyhon2.7/dist-packages`
    on Linux) and open the file from PyCharm.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Python库位置文件夹中的netmiko模块源代码（通常在Windows上为`C:\Python27\Lib\site-packages`或在Linux上为`/usr/local/lib/pyhon2.7/dist-packages`）并从PyCharm中打开文件。
- en: 'Right-click on the module name that appears in the address bar and choose Diagrams
    | Show Diagram. Select Python class diagram from the pop-up window:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击地址栏中出现的模块名称，选择Diagram | Show Diagram。从弹出窗口中选择Python类图：
- en: '![](../images/00036.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00036.jpeg)'
- en: 'PyCharm will start to build the dependency tree between all classes and files
    in the `netmiko` module and then will show it in the same window. Note this process
    may require some time depending on your computer memory. Also, it''s better to
    save the graph as an external image to view it:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm将开始在`netmiko`模块中的所有类和文件之间构建依赖树，然后在同一个窗口中显示它。请注意，这个过程可能需要一些时间，具体取决于你的计算机内存。此外，最好将图表保存为外部图像以查看：
- en: '![](../images/00037.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00037.jpeg)'
- en: Based on the resulting graph, you can see that Netmiko is supporting a lot of
    vendors such as HP Comware, entrasys, Cisco ASA, Force10, Arista, Avaya, and so
    on, and all of these classes are are inheriting from the                     
        `netmiko.cisco_base_connection.CicsoSSHConnection` parent class (I think this
    is because they use the same SSH style as Cisco). This in turn inherits from another
    big parent class called `netmiko.cisco_base_connection.BaseConnection`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 根据生成的图表，你可以看到Netmiko支持许多供应商，如HP Comware，entrasys，Cisco ASA，Force10，Arista，Avaya等，所有这些类都继承自`netmiko.cisco_base_connection.CicsoSSHConnection`父类（我认为这是因为它们使用与思科相同的SSH风格）。这又继承自另一个名为`netmiko.cisco_base_connection.BaseConnection`的大父类。
- en: 'Also, you can see that Juniper has its own class (`netmiko.juniper.juniper_ssh.JuniperSSH`)
    that connects directly to the big parent. Finally, we connect to the parent of
    all parents in python: the `Object` class (remember everything in Python is an
    object in the end).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以看到Juniper有自己的类（`netmiko.juniper.juniper_ssh.JuniperSSH`），它直接连接到大父类。最后，我们连接到Python中所有父类的父类：`Object`类（记住最终在Python中的一切都是对象）。
- en: You can find a lot of interesting things such as an *SCP transfer* class and *SNMP*
    class, and with each one you will find the methods and parameters used to initialize
    the class.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以找到很多有趣的东西，比如*SCP传输*类和*SNMP*类，每个类都会列出用于初始化该类的方法和参数。
- en: 'So the `ConnectHandler` method is primarily used to check the `device_type`
    availability in the vendor classes and, based on returned data, it will use the
    corresponding SSH class:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`ConnectHandler`方法主要用于检查供应商类中的`device_type`可用性，并根据返回的数据使用相应的SSH类：
- en: '![](../images/00038.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00038.jpeg)'
- en: Another way to visualize your code is to see exactly which modules and functions
    are being hit during code execution. This is called profiling and it allows you
    to examine the functions during runtime.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化代码的另一种方法是查看代码执行期间实际命中的模块和函数。这称为分析，它允许你在运行时检查函数。
- en: 'First, you need to write your code as usual and then right-click on an empty
    space and select profile instead of running the code as normal:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要像往常一样编写您的代码，然后右键单击空白处，选择“profile”而不是像平常一样运行代码：
- en: '![](../images/00039.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00039.jpeg)'
- en: 'Wait for the code to be executed. This time PyCharm will inspect each file
    that is called from your code and generate the *call graph* for the execution
    so you can easily know which files and functions are used and count the execution
    time for each one:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 等待代码执行。这次，PyCharm将检查从您的代码调用的每个文件，并为执行生成*调用图*，这样您就可以轻松地知道使用了哪些文件和函数，并计算每个文件的执行时间：
- en: '![](../images/00040.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00040.jpeg)'
- en: As you can see in the previous graph, our code in `profile_code.py` (bottom
    of the graph) will call the `ConnectHandler()`  function which in turn will execute `__init__.py`,
    and execution will continue. On the graph's left side, you can see all files that
    it touched during your code execution.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上一个图表中所看到的，我们在`profile_code.py`中的代码（图表底部）将调用`ConnectHandler()`函数，而后者将执行`__init__.py`，并且执行将继续。在图表的左侧，您可以看到在代码执行期间触及的所有文件。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored some of most popular network, system, and cloud
    packages provided in Python. Also, we learned how to access the module source
    code and to visualize it for better understanding of the internal code. We looked
    at the call flow for code while running. In the next chapter, we will start building
    a lab environment and apply our code to it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Python提供的一些最受欢迎的网络、系统和云包。此外，我们学习了如何访问模块源代码，并将其可视化，以更好地理解内部代码。我们查看了代码运行时的调用流程。在下一章中，我们将开始构建实验环境，并将我们的代码应用于其中。
