- en: Statistics Gathering and Reporting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计数据收集和报告
- en: In this chapter, you will learn about the advanced Python libraries used in
    statistics for scientific calculations. You are going to learn about the NumPY,
    Pandas, Matplotlib, and Plotly modules of Python. You will learn about the data
    visualization techniques and also how to plot the gathered data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习有关用于科学计算的统计学中使用的高级Python库。您将学习有关Python的NumPY、Pandas、Matplotlib和Plotly模块。您将学习有关数据可视化技术，以及如何绘制收集到的数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: NumPY module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPY模块
- en: Pandas module
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas模块
- en: Data visualization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据可视化
- en: NumPY module
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPY模块
- en: NumPY is a Python module that provides efficient operations on arrays. NumPY
    is the fundamental package for scientific computing with Python. This package
    is commonly used for Python data analysis. A NumPY array is a grid of multiple
    values.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: NumPY是一个提供数组高效操作的Python模块。NumPY是Python科学计算的基本包。这个包通常用于Python数据分析。NumPY数组是多个值的网格。
- en: 'Install NumPY by running the following command in your Terminal:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中运行以下命令来安装NumPY：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We are going to use this `numpy` library to do operations on a `numpy` array.
    Now we are going to see how to create `numpy` arrays. For that, create a script
    called `simple_array.py` and write following code in it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`numpy`库对`numpy`数组进行操作。现在我们将看看如何创建`numpy`数组。为此，请创建一个名为`simple_array.py`的脚本，并在其中编写以下代码：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the script and you will get the following output:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, we have imported the `numpy` library as `np` to use
    `numpy` functionality. Then we created a simple list, which we converted into
    an array and for that we used the **`np.array()`** function**.** Finally, we printed
    the `numpy` array with type to easily understand a normal array and a `numpy`
    array .
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们导入了`numpy`库作为`np`来使用`numpy`的功能。然后我们创建了一个简单的列表，将其转换为数组，我们使用了**`np.array()`**函数**。**最后，我们打印了带有类型的`numpy`数组，以便更容易理解普通数组和`numpy`数组。
- en: 'The previous example was of a single dimensional array. Now we are going to
    look at an example of a multi-dimensional array. For that, we that we have to
    create another list. Let''s  look at another example. Create a script called `mult_dim_array.py`
    and write the following content in it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个例子是单维数组的例子。现在我们将看一个多维数组的例子。为此，我们必须创建另一个列表。让我们看另一个例子。创建一个名为`mult_dim_array.py`的脚本，并在其中编写以下内容：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the script and you will get the following output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding example, we imported the `numpy` module. After that, we created
    two lists: `my_list1` and `my_list2`. Then we made another list of lists (`my_list1`
    and `my_list2`) and applied the `np.array()` function on the list (`my_lists`)
    and stored it in an object called `my_array`. Finally, we printed the `numpy`
    array.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们导入了`numpy`模块。之后，我们创建了两个列表：`my_list1`和`my_list2`。然后我们创建了另一个列表的列表（`my_list1`和`my_list2`），并在列表（`my_lists`）上应用了`np.array()`函数，并将其存储在一个名为`my_array`的对象中。最后，我们打印了`numpy`数组。
- en: 'Now, we are going to look at more operations that can be done with an array.
    We are going to study how to know the size as well as the data type of our created
    array; that is, `my_array`. For that, we just have to apply the `shape()` function
    and we will get the `size` of the array and `dtype()` function to know the `data
    type` of the array on our created array. Let''s look at an example of this. Create
    a script called `size_and_dtype.py` and write the following in it:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一下可以对数组进行的更多操作。我们将学习如何知道我们创建的数组`my_array`的大小和数据类型；也就是说，应用`shape()`函数我们将得到数组的`size`，应用`dtype()`函数我们将知道数组的`数据类型`。让我们看一个例子。创建一个名为`size_and_dtype.py`的脚本，并在其中编写以下内容：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the script and you will get the following output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, we applied the shape function as `my_array.shape`
    to get the size of our array. The output was `(2, 4)`. Then we applied the `dtype`
    function as `my_array.dtype` on the array and the output was `int64`**.**
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们应用了`shape`函数`my_array.shape`来获取数组的大小。输出是`(2, 4)`。然后我们在数组上应用了`dtype`函数`my_array.dtype`，输出是`int64`**。**
- en: Now, we are going to look at some examples of special case arrays.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一些特殊情况数组的例子。
- en: 'First, we will make an array with all zeros using the `np.zeros()` function,
    as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用`np.zeros()`函数创建一个所有值为零的数组，如下所示：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After making the array with all zeros, we are going to make the array with
    all 1''s using the `np.ones()` function of `numpy`, as shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建所有值为零的数组之后，我们将使用`numpy`的`np.ones()`函数创建所有值为1的数组，如下所示：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`np.ones((5,5))` creates an array of `5*5` with all values being `1`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ones((5,5))`创建一个所有值为`1`的`5*5`数组。'
- en: 'Now, we are going to make an empty array using the `np.empty()` function of
    `numpy`, as shown here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`numpy`的`np.empty()`函数创建一个空数组，如下所示：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`np.empty()` does not set the array values to zero, like the `np.zeros()` function
    does. Therefore, it may be faster. Besides, it requires the user to enter all
    the values manually in the array and should therefore be used with caution.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.empty()`不会像`np.zeros()`函数一样将数组值设置为零。因此，它可能更快。此外，它要求用户在数组中手动输入所有值，因此应谨慎使用。'
- en: 'Now, let''s see how to make an identity array using the `np.eye()` function,
    which results in the array with its diagonal value `1`, as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用`np.eye()`函数创建一个对角线值为`1`的单位矩阵，如下所示：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we are going to see the `range` function, which is used to create an array
    using the `np.arange()` function of `numpy`, as shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一下`range`函数，它用于使用`numpy`的`np.arange()`函数创建数组，如下所示：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`The np.arange(10)` function creates the array of range `0-9`. We defined the
    range value `10`, and because of that, the array index value starts with `0`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.arange(10)`函数创建了范围为`0-9`的数组。我们定义了范围值`10`，因此数组索引值从`0`开始。'
- en: Using arrays and scalars
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数组和标量
- en: 'In this section, we are going to look at various arithmetic operations on arrays
    using `numpy`. For that, first we will create a multidimensional array, as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一下使用`numpy`进行数组的各种算术运算。首先，我们将创建一个多维数组，如下所示：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we imported the `numpy` module to use the `numpy` functionality, and then
    we imported the `__future__` module that will take care of floats. After that,
    we created a two dimensional array, `arr`, to perform various operations on it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了`numpy`模块来使用`numpy`的功能，然后我们导入了`__future__`模块，它将处理浮点数。之后，我们创建了一个二维数组`arr`，对其进行各种操作。
- en: 'Now, let''s look at some arithmetic operations on arrays. First, we will study
    the multiplication of arrays, as shown here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下对数组的一些算术运算。首先，我们将学习数组的乘法，如下所示：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding multiplication operation**,** we multiplied the `arr` array
    twice to get a multiplied array. You can also multiply two different arrays.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的乘法操作中，我们将`arr`数组乘以两次以得到一个乘法数组。您也可以将两个不同的数组相乘。
- en: 'Now, we are going to look at a subtraction operation on an array, as shown
    here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一下对数组进行减法操作，如下所示：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As shown in the preceding example, we just use the  `**-**` operator to do the
    subtraction of two arrays. After the subtraction of the arrays, we got the resultant
    array, as shown in the preceding code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的例子所示，我们只需使用`**-**`运算符来对两个数组进行减法。在减法操作之后，我们得到了结果数组，如前面的代码所示。
- en: 'Now we are going to look at arithmetic operations on arrays with scalars. Let''s
    look at some operations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下对标量进行数组的算术运算。让我们看一些操作：
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, we divided `1` by our array and got the output. Remember,
    we imported the `__future__` module, which is actually useful for such operations,
    to take care of float values in the array.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们将`1`除以我们的数组并得到了输出。请记住，我们导入了`__future__`模块，它实际上对这样的操作非常有用，可以处理数组中的浮点值。
- en: 'Now we will look at the exponential operation on the `numpy` array, as shown
    here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下`numpy`数组的指数运算，如下所示：
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding example, we took a cube of our array and it gave the output
    as the cube of each value in the array.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们对数组取了立方，并得到了每个值的立方作为输出。
- en: Array indexing
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组索引
- en: The indexing of arrays is done using an array as an index. With an index array,
    a copy of the original array is returned. `numpy` arrays can be indexed using
    any other sequence or by using any other array, excluding tuples. The last element
    in the array can be indexed by `-1` and the second last element can be indexed
    by `-2`, and so on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组作为索引来对数组进行索引。使用索引数组，将返回原始数组的副本。`numpy`数组可以使用任何其他序列或使用任何其他数组进行索引，但不包括元组。数组中的最后一个元素可以通过`-1`进行索引，倒数第二个元素可以通过`-2`进行索引，依此类推。
- en: 'So, to perform indexing operations on the  array, first we create a new `numpy`
    array and for that we are going to use the `range()` function to create the array,
    as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要对数组进行索引操作，首先我们创建一个新的`numpy`数组，为此我们将使用`range()`函数来创建数组，如下所示：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding example, we created the array `arr` with the range `16`; that
    is, `0-15`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们创建了范围为`16`（即`0-15`）的数组`arr`。
- en: 'Now, we are going to perform a different indexing operation on array `arr`.
    First, let''s get the value in the array at a particular index:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对数组`arr`执行不同的索引操作。首先，让我们获取数组中特定索引处的值：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding example, we accessed the array by its index value and after
    passing the index number to the array `arr`, the array returned the value `7`,
    which is the particular indexed number that we pass.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们通过其索引值访问了数组，并在将索引号传递给数组`arr`后，数组返回了值`7`，这是我们传递的特定索引号。
- en: 'After getting the value at a particular index, we are going to get values in
    a range. Let''s look at the following example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取特定索引处的值之后，我们将获取一定范围内的值。让我们看下面的例子：
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding example, first we accessed the array and got values in a range
    of (`2-10`). As a result, it shows the output as `array([2, 3, 4, 5, 6, 7, 8,
    9])`. In the second term, `arr[2:10:2]`, it actually states that access array
    in the range of `2-10` in the interval of two step. The syntax of this kind of
    indexing is `arr[_start_value_:_stop_value_:_steps_]`. So, as the output of second
    term, we get `array([2, 4, 6, 8])`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，首先我们访问了数组并得到了范围为（`2-10`）的值。结果显示为`array([2, 3, 4, 5, 6, 7, 8, 9])`。在第二个术语中，`arr[2:10:2]`，实际上是指定在范围`2-10`内以两步的间隔访问数组。这种索引的语法是`arr[_start_value_:_stop_value_:_steps_]`。因此，第二个术语的输出是`array([2,
    4, 6, 8])`。
- en: 'We can also get values in the array from the index until the end, as show in
    the following example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从索引值开始获取数组中的值直到末尾，如下例所示：
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As we seen in the preceding example, we accessed the values in the array from
    the 5th index value until the end. As a result, we got the output as `array([
    5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上面的例子中看到的，我们从第5个索引值开始访问数组中的值直到末尾。结果，我们得到的输出是`array([ 5,  6,  7,  8,  9,
    10, 11, 12, 13, 14, 15])`。
- en: 'Now we are going to look at slicing of the `numpy` array. In slicing, we actually
    take some part of our original array and store it in a specified array name. Let''s
    look at an example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下`numpy`数组的切片。在切片中，我们实际上是取原始数组的一部分并将其存储在指定的数组名称中。让我们看一个例子：
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding example, we take slice of the original array. As a result,
    we got a slice of the array with values `0,1,2,…..,7`. We can also give updated
    values to the slice of the array. Let''s look at an an example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们对原始数组进行了切片。结果，我们得到了一个包含值`0,1,2,…..,7`的数组切片。我们还可以给数组切片赋予更新后的值。让我们看一个例子：
- en: '[PRE25]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the the preceding example, we set all values in the array slice to `29,`.
    But the important thing while assigning values to the array slice is that the
    value assigned to the slice will also get assigned to the original set of the
    array.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们将数组切片中的所有值设置为`29`。但在为数组切片分配值时，重要的是分配给切片的值也将分配给数组的原始集合。
- en: 'Let''s see the result after giving values to the slice of the array and the
    effect on our original array:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看给数组的切片赋值后的结果，以及对我们原始数组的影响：
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, we are going to look at another operation; that is, copying the array.
    The difference between slicing and copying of arrays is that when we do the slicing
    of the array, the changes made are going to be applied on the original array.
    When we get a copy of the array, it gives an explicit copy of the original array.
    Therefore, the changes applied onto the copy of the array do not affect the original
    array. So let''s look at an example of copying an array:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看另一个操作；即，复制数组。对数组进行切片和复制的区别在于，当我们对数组进行切片时，所做的更改将应用于原始数组。当我们获得数组的副本时，它会给出原始数组的显式副本。因此，对数组的副本应用的更改不会影响原始数组。所以让我们看一个复制数组的例子：
- en: '[PRE27]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding example, we just take a copy of the original array. For that,
    we use the `array_name.copy()` function and the output is the copy the original
    array.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们只是复制了原始数组。为此，我们使用了`array_name.copy()`函数，输出是原始数组的副本。
- en: Indexing a 2D array
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对二维数组进行索引
- en: A 2D array is an array of arrays. In this, the position of the data element
    normally refers to two indices instead of one and it represents the table with
    rows and columns of data. Now we are going to do indexing of such a type of arrays.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 二维数组是一个数组的数组。在这种情况下，数据元素的位置通常是指两个索引而不是一个，并且它表示具有行和列数据的表。现在我们将对这种类型的数组进行索引。
- en: 'So, let''s look at an example of a 2D array:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们来看一个二维数组的例子：
- en: '[PRE28]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the preceding example, we created a 2D array named `td_array`. After creating
    an array, we printed `td_array`. Now we are also going to fetch the values in
    `td_array` through indexing. Let''s look at an example to access values through
    indexing:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们创建了一个名为`td_array`的二维数组。创建数组后，我们打印了`td_array`。现在我们还将通过索引获取`td_array`中的值。让我们看一个通过索引访问值的例子：
- en: '[PRE29]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the preceding example, we accessed the first index value of the array and
    we got the output. In such a type of indexing, when we access the value, we get
    the whole array. Instead of getting the whole array, we can also get access to
    particular value. Let''s look at an example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们访问了数组的第一个索引值，并得到了输出。在这种类型的索引中，当我们访问值时，我们得到整个数组。除了获取整个数组，我们还可以访问特定的值。让我们来看一个例子：
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding example, we accessed `td_array` by passing two values for the
    row and column. As seen in the output, we got the value `8`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们通过传递两个值来访问`td_array`的行和列。如输出所示，我们得到了值`8`。
- en: 'We can also set up the two-dimensional array in a different way. First, set
    our 2D array with increased length. Let''s set the length to `10`. So, for that,
    we create a sample array with all zeros in it and, after that, we are going to
    put values in it. Let''s look at an example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以以不同的方式设置二维数组。首先，将我们的二维数组长度增加。让我们将长度设置为`10`。因此，为此，我们创建一个所有元素都是零的示例数组，然后我们将在其中放入值。让我们看一个例子：
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding example, we created one two-dimensional array with the length
    `10` by `10`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们创建了一个长度为`10`乘以`10`的二维数组。
- en: 'Now let''s do some fancy indexing on it, as shown in the following example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在其中进行一些花式索引，如下例所示：
- en: '[PRE32]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding example, we fetch particular index values. So, in the result,
    we got the output.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们获取了特定的索引值。因此，在结果中，我们得到了输出。
- en: Universal array functions
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用数组函数
- en: 'Universal functions perform the operations on all the elements in a `numpy`
    array. Now, we are going to look at an example to perform multiple universal functions
    on an array. First, we are going to take the square root of the array. Create
    a script called `sqrt_array.py` and write the following content in it:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数对`numpy`数组中的所有元素执行操作。现在，我们将看一个例子，对数组执行多个通用函数。首先，我们将对数组进行平方根处理。创建一个名为`sqrt_array.py`的脚本，并在其中写入以下内容：
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Run the script and you will get the following output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你会得到以下输出：
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE35]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the preceding example, we created one simple array using range as a function
    of `numpy`. Then we applied the `sqrt()` function on the generated array to get
    the square root of the array. After taking the square root of the array, we are
    going to apply another universal function on the array, which is the exponential
    `exp()` function. Let''s look at an example. Create a script called `expo_array.py`
    and write the following content in it:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用`numpy`的`range`函数创建了一个简单的数组。然后我们对生成的数组应用了`sqrt()`函数，以获得数组的平方根。在获取数组的平方根后，我们将对数组应用另一个通用函数，即指数`exp()`函数。让我们看一个例子。创建一个名为`expo_array.py`的脚本，并在其中写入以下内容：
- en: '[PRE36]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the script and you will get the following output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你会得到以下输出：
- en: '[PRE37]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE38]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding example, we created one simple array using the `range` function
    of `numpy`. Then we applied the  `exp()` function on the generated array to get
    the exponential of the array.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用`numpy`的`range`函数创建了一个简单的数组。然后我们对生成的数组应用了`exp()`函数，以获得数组的指数。
- en: Pandas module
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas模块
- en: In this section, we are going to learn about the pandas module. The pandas module
    provides fast and flexible data structures that are designed for working with
    structured and time series data. The pandas module is used for data analysis.
    The pandas module is built on packages such as NumPY and Matplotlib and gives
    us a place to do most of our analysis and visualization work in. To use the functionality
    of this module, you must import it first.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关pandas模块的知识。pandas模块提供了快速灵活的数据结构，专为处理结构化和时间序列数据而设计。pandas模块用于数据分析。pandas模块是建立在NumPY和Matplotlib等包之上的，并为我们提供了大部分分析和可视化工作的场所。要使用此模块的功能，您必须首先导入它。
- en: 'First, install the following packages that we need in our examples by running
    the following commands:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过运行以下命令安装我们示例中需要的以下软件包：
- en: '[PRE39]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here, we are going to look at some examples of using the pandas module. We
    will learn about two data structures: Series and DataFrames. We are also going
    to see how we can read the data from a `csv` file using pandas.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看一些使用pandas模块的例子。我们将学习两种数据结构：系列和数据框。我们还将看到如何使用pandas从`csv`文件中读取数据。
- en: Series
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系列
- en: 'The pandas series is a one-dimensional array. It can hold any data type. The
    labels are referred to as the index. Now, we are going to look at an example of
    series without declaring an index and series with declaring an index. First, we
    will look at an example of series without declaring an index. For that, create
    a script called  `series_without_index.py` and write the following content in
    it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: pandas系列是一维数组。它可以容纳任何数据类型。标签被称为索引。现在，我们将看一个不声明索引的系列和声明索引的系列的例子。首先，我们将看一个不声明索引的系列的例子。为此，请创建一个名为`series_without_index.py`的脚本，并在其中写入以下内容：
- en: '[PRE40]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Run the script and you will get the following output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE41]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output is as follows :'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE42]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the preceding example, we learned about series without declaring an index.
    First, we imported two modules: pandas and `numpy`. Next, we created the `s_data`
    object that will store the series data. In that series, we created a list and
    instead of declaring an index, we provided the name attribute, which will give
    a name to the list, and then we printed the data. In the output, the left column
    is your index for the data. Even if we never provide the index, pandas will give
    it implicitly. The index will always start from `0`. Underneath the columns is
    the name of our series and the data type of the values.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们学习了不声明索引的系列。首先，我们导入了两个模块：pandas和`numpy`。接下来，我们创建了将存储系列数据的`s_data`对象。在该系列中，我们创建了一个列表，而不是声明索引，我们提供了name属性，该属性将为列表提供一个名称，然后我们打印了数据。在输出中，左列是数据的索引。即使我们从未提供索引，pandas也会隐式地给出。索引将始终从`0`开始。在列的下方是我们系列的名称和值的数据类型。
- en: 'Now, we are going to look at an example of a series when declaring an index.
    Here we are also going to perform indexing and slicing operations. For that, create
    a script called `series_with_index.py` and write the following content in it:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个声明索引的系列的例子。在这里，我们还将执行索引和切片操作。为此，请创建一个名为`series_with_index.py`的脚本，并在其中写入以下内容：
- en: '[PRE43]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Run the script and you will get the following output:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE44]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In the preceding example, we provided an index value for our data in the `index`
    attribute. In the output, the left column is the index values that we provided.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们为数据在`index`属性中提供了索引值。在输出中，左列是我们提供的索引值。
- en: DataFrames
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据框
- en: In this section, we are going to learn about pandas DataFrames. DataFrames are
    two-dimensional labeled data structures that have columns and may be of different
    data types. DataFrames are similar to SQL tables or a spreadsheet. They are the
    most common object when working with pandas.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关pandas数据框的知识。数据框是具有列并且可能是不同数据类型的二维标记数据结构。数据框类似于SQL表或电子表格。在使用pandas时，它们是最常见的对象。
- en: 'Now, we are going to look at an example of reading data from a `csv` file into
    a DataFrame. For that, you must have a `csv` file present in your system. If you
    don''t have a `csv` file in your system, create a file named `employee.csv`, as
    follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个例子，从`csv`文件中读取数据到DataFrame中。为此，您必须在系统中有一个`csv`文件。如果您的系统中没有`csv`文件，请按以下方式创建一个名为`employee.csv`的文件：
- en: '[PRE45]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, we are going to read this `csv` file into a DataFrame. For that, create
    a script called `read_csv_dataframe.py` and write the following content in it:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把这个`csv`文件读入DataFrame中。为此，请创建一个名为`read_csv_dataframe.py`的脚本，并在其中写入以下内容：
- en: '[PRE46]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Run the script and you will get the following output:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE47]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In the preceding example, we first created a `csv` file called `employee.csv`.
    We are using the pandas module to create data frames. The goal is to read that
    `csv` file into the DataFrame. Next, we created a `df` object and we are reading
    the contents of a `csv` file into it. Next we are printing a DataFrame. Here,
    we used the `head()` and `tail()` methods to get the particular number of lines
    of data. We specified `head(3)`, which means we are printing the first three lines
    of data. We also specified `tail(1)`, which means we are printing the last line
    of data.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们首先创建了一个名为`employee.csv`的`csv`文件。我们使用pandas模块创建数据框。目标是将`csv`文件读入DataFrame中。接下来，我们创建了一个`df`对象，并将`csv`文件的内容读入其中。接下来我们打印一个DataFrame。在这里，我们使用`head()`和`tail()`方法来获取特定数量的数据行。我们指定了`head(3)`，这意味着我们打印了前三行数据。我们还指定了`tail(1)`，这意味着我们打印了最后一行数据。
- en: Data visualization
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据可视化
- en: 'Data visualization is the term that describes the efforts in understanding
    the significance of data, placing it in a visual manner. In this section, we are
    going to look at the following data visualization techniques:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化是描述理解数据重要性并以可视化方式放置数据的努力的术语。在本节中，我们将看一下以下数据可视化技术：
- en: Matplotlib
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib
- en: Plotly
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Plotly
- en: Matplotlib
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib
- en: Matplotlib is the data visualization library in Python and it allows us to generate
    plots, histograms, power spectra, bar charts, error charts, scatter plots, and
    so on, using a few lines of code. Matplotlib usually make things easier and the
    hardest things possible.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib是Python中的数据可视化库，它允许我们使用几行代码生成图表、直方图、功率谱、条形图、误差图、散点图等。Matplotlib通常使事情变得更容易，最困难的事情也变得可能。
- en: To use `matplotlib` in your Python program, first we have to install `matplotlib`.
    Run the following command in your Terminal to install `matplotlib:`
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的Python程序中使用`matplotlib`，首先我们必须安装`matplotlib`。在您的终端中运行以下命令来安装`matplotlib`：
- en: '[PRE48]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, you have to install one more package, `tkinter`, for graphical representations.
    Install it using the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您还必须安装另一个包`tkinter`，用于图形表示。使用以下命令安装它：
- en: '[PRE49]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now that `matplotlib` is installed in your system, we will look at some examples.
    While plotting, there are two important components: figures and axes. The figure
    is the container that acts as the window on which everything is drawn. It can
    have various types of independent figures. The axis is the area where you can
    plot your data and any labels associated with it. Axes consist of an `x` axis
    and a `y` axis.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用`plt.figure()`函数在不同的画布上绘制东西。之后，我们使用`plt.plot()`函数。这个函数有不同的参数，对于绘制图表很有用。在上面的例子中，我们使用了一些参数；即`x1`，`x2`，`y1`和`y2`。这些是用于绘制的相应轴点。
- en: 'Now, we are going to look at some examples of `matplotlib`. Let''s start with
    a simple example. Create a script called `simple_plot.py` and write the following
    content in it:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一些`matplotlib`的例子。让我们从一个简单的例子开始。创建一个名为`simple_plot.py`的脚本，并在其中写入以下内容：
- en: '[PRE50]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Run the script and you will get the following output:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE51]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The output is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/8d8b8572-e237-441f-8089-399fd0396d31.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8d8b8572-e237-441f-8089-399fd0396d31.jpg)'
- en: In the preceding example, we imported two modules, `matplotlib` and `numpy`, to
    visualize the data as well as to create the arrays *x* and *y*, respectively.
    After this, we plotted two arrays as `plt.plot(x,y)`. Then we added a title and
    labels to the plot using the `xlabel()`, `ylabel()`, and `title()` functions,
    and to display this plotting, we used the `plt.show()` function. Because we are
    using Matplotlib within a Python script, don't forget to add `plt.show()` at the
    end line to display your plot.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们导入了两个模块，`matplotlib`和`numpy`，来可视化数据以及分别创建数组*x*和*y*。之后，我们将两个数组绘制为`plt.plot(x,y)`。然后我们使用`xlabel()`，`ylabel()`和`title()`函数向图表添加标题和标签，并使用`plt.show()`函数显示这个绘图。因为我们在Python脚本中使用Matplotlib，不要忘记在最后一行添加`plt.show()`来显示您的绘图。
- en: Now we are going to create two arrays to display two lines of curves in the
    plot and we are going to apply style to both the curves. In the following example,
    we will use the `ggplot` style to plot the graph. `ggplot` is a system used for
    creating graphics declaratively, and is based on the grammar of graphics. To plot
    `ghraph`, we just provide the data and then tell `ggplot` how to map variables
    and what graphical primitives to use, and it takes care of the details. In most
    cases, we start with the `ggplot()` style.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建两个数组来显示绘图中的两行曲线，并且我们将对这两条曲线应用样式。在下面的例子中，我们将使用`ggplot`样式来绘制图表。`ggplot`是一个用于声明性创建图形的系统，基于图形语法。要绘制`ghraph`，我们只需提供数据，然后告诉`ggplot`如何映射变量以及使用什么图形原语，它会处理细节。在大多数情况下，我们从`ggplot()`样式开始。
- en: 'Now, create a script called `simple_plot2.py` and write the following content
    in it:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`simple_plot2.py`的脚本，并在其中写入以下内容：
- en: '[PRE52]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Run the script and you will get the following output:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE53]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The output is as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/09c2cf1c-e276-414d-a383-6a884b35eb22.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: 现在`matplotlib`已经安装在您的系统中，我们将看一些例子。在绘图时，有两个重要的组件：图和轴。图是充当绘制所有内容的窗口的容器。它可以有各种类型的独立图。轴是您可以绘制数据和与之相关的任何标签的区域。轴由一个`x`轴和一个`y`轴组成。
- en: In the preceding example, first we imported the required module, and then we
    used the `ggplot` style to plot the graph.  We created two sets of array; that
    is,  `x1`, `y1` and `x2`, `y2`. Then we used the subplot function, `plt.subplot()`,
    because it allows us to plot different things within the same canvas. You can
    also use the `plt.figure()` function instead of `plt.subplot(),` if you want to
    display these two plots on a different canvas.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，首先我们导入了所需的模块，然后我们使用`ggplot`样式来绘制图表。我们创建了两组数组；即`x1`，`y1`和`x2`，`y2`。然后我们使用subplot函数`plt.subplot()`，因为它允许我们在同一画布中绘制不同的东西。如果您想要在不同的画布上显示这两个图，您也可以使用`plt.figure()`函数而不是`plt.subplot()`。
- en: 'Now, we are going to see how to plot the arrays using the `plt.figure()` function
    and save our generated figure using Matplotlib. You can save them in different
    formats, such as `png`, `jpg`, `pdf`, and so on, by using the `savefig()` method.
    We''ll save the preceding figure in a file named `my_sample_plot.jpg`. Now, we
    will look at an example. For that, create a script called `simple_plot3.py` and
    write the following content in it:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE54]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Run the script and you will get the following output:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE55]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output is as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/a92750b5-5c24-45f9-a017-f463bba4d645.jpg)![](assets/8b8221ae-82a7-4746-a89c-5364f14e95d2.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a92750b5-5c24-45f9-a017-f463bba4d645.jpg)![](assets/8b8221ae-82a7-4746-a89c-5364f14e95d2.jpg)'
- en: In the preceding example, we used the `plt.figure()` function to plot the things
    on a different canvas.  After that, we used the `plt.plot()` function. This function
    has different arguments, which are useful to plot the graph. In the preceding
    example, we used some of arguments; that is `x1`, `x2`, `y1`,and `y2`. These are
    the respective axis points used to plot.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一下如何使用`plt.figure()`函数绘制数组并使用Matplotlib保存生成的图。您可以使用`savefig()`方法将它们保存为不同的格式，如`png`，`jpg`，`pdf`等。我们将把前面的图保存在一个名为`my_sample_plot.jpg`的文件中。现在，我们将看一个例子。为此，创建一个名为`simple_plot3.py`的脚本，并在其中写入以下内容：
- en: Then we  used the `color` argument to provide a particular color to the graph
    line and, in the third argument, we used `linewidth`, which decides the width
    of the graph line. After that, we also used the `savefig()` method to save our
    figure in a particular image format. You can check them in your current directory
    (if you did not mention the path) where you run your Python script.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`color`参数为图形线条提供特定的颜色，并且在第三个参数中，我们使用`linewidth`，它决定了图形线条的宽度。之后，我们还使用了`savefig()`方法来以特定的图像格式保存我们的图。您可以在运行Python脚本的当前目录中检查它们（如果您没有指定路径）。
- en: 'You can open those images by directly accessing that directory or you can also
    use following method to open those generated images using `matplotlib`. Now, we
    will look at an example to open saved figures. For that, create a script called `open_image.py`
    and write the following content in it:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过直接访问该目录来打开这些图像，或者您也可以使用以下方法使用`matplotlib`来打开这些生成的图像。现在，我们将看一个打开保存的图的示例。为此，请创建一个名为`open_image.py`的脚本，并在其中写入以下内容：
- en: '[PRE56]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Run the script and you will get the following output:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE57]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The output is as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/5f61279d-d859-4627-9969-958d6ba9cd1a.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f61279d-d859-4627-9969-958d6ba9cd1a.jpg)'
- en: In the preceding example, we used the `imshow()` function of Matplotlib to open
    the saved image of the figure.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用了Matplotlib的`imshow()`函数来打开图的保存图像。
- en: Now, we will look at different types of plots. Matplotlib allows us to create
    different types of plots to deal with data in arrays, such as histograms, scatter
    plots, bar charts, and so on. The use of different kinds of plots depends on the
    purpose of the data visualization. Let's look at some of these plots.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一些不同类型的图。Matplotlib允许我们创建不同类型的图来处理数组中的数据，如直方图、散点图、条形图等。使用不同类型的图取决于数据可视化的目的。让我们看一些这些图。
- en: Histograms
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直方图
- en: 'This type of plot helps us to examine the distribution of  numerical data in
    such a way that you are unable to make do with mean or median alone. We are going
    to use the `hist()` method to create a simple histogram. Let''s look at an example
    to create a simple histogram. For that, create a script called `histogram_example.py`
    and write the following content in it:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的图表帮助我们以一种无法仅仅使用均值或中位数来应付的方式来检查数值数据的分布。我们将使用`hist()`方法来创建一个简单的直方图。让我们看一个创建简单直方图的例子。为此，请创建一个名为`histogram_example.py`的脚本，并在其中写入以下内容：
- en: '[PRE58]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Run the script and you will get the following output:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE59]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The output is as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/eb702ea3-c0ab-469d-8aa9-07e1dd69fd78.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb702ea3-c0ab-469d-8aa9-07e1dd69fd78.jpg)'
- en: In the preceding example, we created an array of random numbers using `numpy`.
    Then we plotted that numerical data using the `plt.hist()` method.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用`numpy`创建了一组随机数。然后，我们使用`plt.hist()`方法绘制了这些数值数据。
- en: Scatter plots
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散点图
- en: 'This type of plot shows us the data as a collection of points. It offers a
    convenient way to visualize how numeric values are related. It also helps us to
    understand the relationships between multiple variables. We are going to use the `scatter()`
    method to plot the data in a scatter plot. In a scatter plot, the position of
    points depends on its `x` and `y` axis values; that is, two-dimensional values,
    so each value in a dataset is a position in either the horizontal or the vertical
    dimension. Let''s look at an example of a scatter plot. Create a script called `scatterplot_example.py`
    and write the following content in it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的图表将数据显示为一组点。它提供了一种方便的方式来可视化数值值的关系。它还帮助我们理解多个变量之间的关系。我们将使用`scatter()`方法来绘制散点图中的数据。在散点图中，点的位置取决于其`x`和`y`轴的值；也就是说，数据集中的每个值都是水平或垂直维度中的一个位置。让我们看一个散点图的例子。创建一个名为`scatterplot_example.py`的脚本，并在其中写入以下内容：
- en: '[PRE60]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Run the script and you will get the following output:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE61]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The output is as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/985d2b20-6987-46b5-a513-fcd962fd61de.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/985d2b20-6987-46b5-a513-fcd962fd61de.jpg)'
- en: In the preceding example, we got values of `x` and `y`. Then we plotted those
    values using the `plt.scatter()` method to get a scatter plot for the `x` and
    `y` values.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们得到了`x`和`y`的值。然后，我们使用`plt.scatter()`方法来绘制这些值，以获得`x`和`y`值的散点图。
- en: Bar charts
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条形图
- en: 'A bar chart is a chart that represents your data in rectangular bars. You can
    plot them vertically or horizontally. Create a script called  `bar_chart.py` and
    write the following content in it:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图是用矩形条表示数据的图表。您可以将它们垂直或水平绘制。创建一个名为`bar_chart.py`的脚本，并在其中写入以下内容：
- en: '[PRE62]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Run the script and you will get the following output:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE63]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The output is as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/692d75ea-6b6f-4e8b-8290-2f3c9c654f2b.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/692d75ea-6b6f-4e8b-8290-2f3c9c654f2b.jpg)'
- en: 'In the preceding example, we have two sets of values: `x1`, `y1` and `x2`,
    `y2`. After getting the numerical data, we used the `plt.bar()` method to plot
    the bar chart for the present data.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们有两组值：`x1`，`y1`和`x2`，`y2`。在获得数值数据后，我们使用`plt.bar()`方法来绘制当前数据的条形图。
- en: There are multiple techniques available to plot the data. Among them, there
    are a few techniques or methods of data visualization using `matplotlib`, which
    we have seen. We can also perform such operations using another tool of data visualization: `plotly`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种技术可用于绘制数据。其中，有几种使用`matplotlib`进行数据可视化的技术或方法，我们已经看到了。我们还可以使用另一种数据可视化工具`plotly`来执行这些操作。
- en: Plotly
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Plotly
- en: Plotly is an interactive, open source graphing library in Python. It is a charting
    library that provides over 30 chart types, such as scientific charts, 3D graphs,
    statistical charts, financial charts, and more.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly是Python中的一个交互式、开源的绘图库。它是一个图表库，提供了30多种图表类型，如科学图表、3D图形、统计图表、金融图表等。
- en: 'To use `plotly` in Python, first we have to install it in our system. To install
    `plotly`, run the following command in your Terminal:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中使用`plotly`，首先我们必须在系统中安装它。要安装`plotly`，请在您的终端中运行以下命令：
- en: '[PRE64]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We can use `plotly` online as well as offline. For online usage, you need to
    have a `plotly` account and after that you need to set up your credentials in
    Python:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在线和离线使用`plotly`。对于在线使用，你需要有一个`plotly`账户，之后你需要在Python中设置你的凭据：
- en: '[PRE65]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: To use `plotly` offline, we need to use the `plotly` function:  `plotly.offline.plot()`
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要离线使用`plotly`，我们需要使用`plotly`函数：`plotly.offline.plot()`
- en: 'In this section, we are going to use plotly offline. Now, we are going to look
    at a simple example. For that, create a script called `sample_plotly.py` and write
    the following content in it:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用plotly离线。现在，我们将看一个简单的例子。为此，创建一个名为`sample_plotly.py`的脚本，并在其中写入以下内容：
- en: '[PRE66]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Run the preceding script as `sample_plotly.py`. You will get the following
    output:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的脚本命名为`sample_plotly.py`运行。你将得到以下输出：
- en: '[PRE67]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The output is as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/d639864a-5006-48d1-bbc5-9772566cc3b5.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d639864a-5006-48d1-bbc5-9772566cc3b5.jpg)'
- en: 'In the preceding example, we imported the `plotly` module and then we set `plotly`
    for offline use. We put arguments in it, which are useful to plot a graph. In
    the example, we used some of arguments: `data` and `layout`. In the `data` argument,
    we define the scatter function with `x` and `y` arrays, which have values to plot
    over the `x` and `y` axes, respectively. Then we use the `layout` argument, in
    which we define the layout function to provide the title for the graph. The output
    of the preceding program is saved as an HTML file and gets opened in your default
    browser. This HTML file is in the same directory as your script.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们导入了`plotly`模块，然后将`plotly`设置为离线使用。我们在其中放入了一些有用于绘制图表的参数。在例子中，我们使用了一些参数：`data`和`layout`。在`data`参数中，我们使用散点函数定义了`x`和`y`数组，这些数组具有要在`x`和`y`轴上绘制的值。然后我们使用`layout`参数，在其中我们定义了布局函数以为图表提供标题。前面程序的输出保存为HTML文件，并在默认浏览器中打开。这个HTML文件与你的脚本在同一个目录中。
- en: Now let's look at some different types of charts for visualizing the data. So,
    first, we are going to start with the scatter plot.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一些不同类型的图表来可视化数据。所以，首先，我们将从散点图开始。
- en: Scatter plots
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 散点图
- en: 'Create a script called `scatter_plot_plotly.py` and write the following content
    in it:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`scatter_plot_plotly.py`的脚本，并在其中写入以下内容：
- en: '[PRE68]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Run the script and you will get the following output:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你将得到以下输出：
- en: '[PRE69]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The output is as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/728d2983-9f6e-4a22-8a99-1ce9a9e585bd.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/728d2983-9f6e-4a22-8a99-1ce9a9e585bd.jpg)'
- en: In the preceding example, we imported `plotly` and then created random data
    by using `numpy` and, for that, import the `numpy` module in your script. After
    generating the dataset, we created one object named `trace` and inserted our numerical
    data in it to be scattered. Then, finally, we place the data in the `trace` object
    into the `plotly.offline.plot()` function to get the scatter plot of data. Like
    our first sample graph, the output of this example is also saved in HTML format
    and displayed in your default web browser.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们导入了`plotly`，然后通过使用`numpy`创建了随机数据，并在脚本中导入了`numpy`模块。生成数据集后，我们创建了一个名为`trace`的对象，并将我们的数值数据插入其中以进行散点。最后，我们将`trace`对象中的数据放入`plotly.offline.plot()`函数中，以获得数据的散点图。与我们的第一个示例图一样，这个例子的输出也以HTML格式保存，并显示在默认的网络浏览器中。
- en: Line scatter plots
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线散点图
- en: 'We can also create some more informative plots, such as a line scatter plot.
    Let''s look at an example. Create a script called `line_scatter_plot.py` and write
    the following content in it:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建一些更有信息量的图表，比如线散点图。让我们看一个例子。创建一个名为`line_scatter_plot.py`的脚本，并在其中写入以下内容：
- en: '[PRE70]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Run the script and you will get the following output:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你将得到以下输出：
- en: '[PRE71]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The output is as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/61d2fa81-8592-4c5a-95ad-d68670ca8126.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/61d2fa81-8592-4c5a-95ad-d68670ca8126.jpg)'
- en: In the preceding example, we imported `plotly`, as well as the `numpy` module.
    Then we generated some random values for the  x-axis and also for three different
    y-axes. After that, we put that data in the created `trace` object and, finally,
    put that dataset in plotly's offline function. Then we get the output in the format
    of scatter as well as line. The output file of this example is saved with the
    name `line_scatter_plot.html` in your current directory.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们导入了`plotly`，以及`numpy`模块。然后我们为x轴生成了一些随机值，也为三个不同的y轴生成了随机值。之后，我们将这些数据放入创建的`trace`对象中，最后将该数据集放入plotly的离线函数中。然后我们得到了散点和线的格式的输出。这个例子的输出文件以`line_scatter_plot.html`的名称保存在你当前的目录中。
- en: Box plots
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 箱线图
- en: 'The box plot is usually informative and also helpful, especially when you have
    too much to show with very less data. Let''s look at an example. Create a script
    called `plotly_box_plot.py` and write the following content in it:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 箱线图通常是有信息量的，也很有帮助，特别是当你有太多要展示但数据很少的时候。让我们看一个例子。创建一个名为`plotly_box_plot.py`的脚本，并在其中写入以下内容：
- en: '[PRE72]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Run the script and you will get the following output:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你将得到以下输出：
- en: '[PRE73]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The output is as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/976d4c5a-f03e-4eb3-93d3-39456e5e1a92.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/976d4c5a-f03e-4eb3-93d3-39456e5e1a92.jpg)'
- en: In the preceding example, we imported `plotly`, as well as the `numpy` module.
    Then we declared N as the total number boxes in the box plot and generated an
    array of rainbow colors by fixing the saturation and lightness of the HSL representation
    of color and marching around the hue. Each box is represented by a dictionary
    that contains the data, the type, and the color. We use list comprehension to
    describe N boxes, each with a different color and with different randomly generated
    data. After that, we format the layout of the output and plot the data through
    the offline `plotly` function.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们导入了`plotly`，以及`numpy`模块。然后我们声明N为箱线图中的总箱数，并通过固定颜色的饱和度和亮度以及围绕色调进行变化，生成了一个彩虹颜色的数组。每个箱子由一个包含数据、类型和颜色的字典表示。我们使用列表推导来描述N个不同颜色的箱子，每个箱子都有不同的随机生成的数据。之后，我们格式化输出的布局并通过离线的`plotly`函数绘制数据。
- en: Contour plots
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等高线图
- en: 'The contour plot is most commonly used as a scientific plot and used a lot
    while showing heat map data. Let''s look at an example of a contour plot. Create
    a script called `contour_plotly.py` and write the following content in it:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 轮廓图通常用作科学图，并在显示热图数据时经常使用。让我们看一个轮廓图的例子。创建一个名为`contour_plotly.py`的脚本，并在其中写入以下内容：
- en: '[PRE74]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Run the script and you will get the following output:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE75]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The output is as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](assets/5ddc9f4d-947e-426e-ad4a-a6fa45c5a213.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ddc9f4d-947e-426e-ad4a-a6fa45c5a213.jpg)'
- en: In the preceding example, we took a dataset and applied the `contour()` function
    on it. Then we appended that contour data in `data_set` and, finally, applied
    the `plotly` function on the data to get the output. These are some techniques
    from plotly to plot data in a visual manner.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们取了一个数据集，并对其应用了`contour()`函数。然后我们将轮廓数据附加到`data_set`中，并最终对数据应用了`plotly`函数以获得输出。这些是plotly中用于以可视方式绘制数据的一些技术。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned about the NumPY and Pandas modules, as well as
    data visualization techniques. In the NumPY module section, we learned about indexing
    and slicing the array and the universal array function. In the pandas module section,
    we learned about Series and DataFrames. We also learned how to read a `csv` file
    into a DataFrame. In data visualization, we learned about the  libraries in Python,
    which are used for data visualization: `matplotlib` and `plotly`.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了NumPY和Pandas模块，以及数据可视化技术。在NumPY模块部分，我们学习了数组的索引和切片以及通用数组函数。在pandas模块部分，我们学习了Series和DataFrames。我们还学习了如何将`csv`文件读入DataFrame。在数据可视化中，我们学习了Python中用于数据可视化的库：`matplotlib`和`plotly`。
- en: In the next chapter, you will learn about MySQL and SQLite database administrations.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关MySQL和SQLite数据库管理的知识。
- en: Questions
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a NumPy array?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是NumPy数组？
- en: What is the output of the following code snippet?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段的输出是什么？
- en: '[PRE76]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: How do you sum a small array faster than `np.sum`?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何比`np.sum`更快地对小数组求和？
- en: How do you delete indices, rows, or columns from a Pandas DataFrame?
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从Pandas DataFrame中删除索引、行或列？
- en: How do you write a Pandas DataFrame to a file?
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将Pandas DataFrame写入文件？
- en: What is NaN in pandas ?
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pandas中的NaN是什么？
- en: How do you remove duplicates from a pandas DataFrame ?
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从pandas DataFrame中删除重复项？
- en: How do you change the size of figures drawn with Matplotlib?
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何更改使用Matplotlib绘制的图形的大小？
- en: What are the alternatives available for plotting graphs using Python ?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中绘制图形的可用替代方法是什么？
- en: Further reading
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 10 minutes to pandas documentation: [https://pandas.pydata.org/pandas-docs/stable/](https://pandas.pydata.org/pandas-docs/stable/)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10分钟到pandas文档：[https://pandas.pydata.org/pandas-docs/stable/](https://pandas.pydata.org/pandas-docs/stable/)
- en: NumPy tutorial: [https://docs.scipy.org/doc/numpy/user/quickstart.html](https://docs.scipy.org/doc/numpy/user/quickstart.html)
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy教程：[https://docs.scipy.org/doc/numpy/user/quickstart.html](https://docs.scipy.org/doc/numpy/user/quickstart.html)
- en: Graph plotting using plotly: [https://plot.ly/d3-js-for-python-and-pandas-charts/](https://plot.ly/d3-js-for-python-and-pandas-charts/)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用plotly进行图形绘制：[https://plot.ly/d3-js-for-python-and-pandas-charts/](https://plot.ly/d3-js-for-python-and-pandas-charts/)
