- en: Machine Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习
- en: Robots and computers from its primitive days to even right now are being programmed
    to do a set of activities. These activities can be very large. Hence, to develop
    complex programs, there is a need for a lot of software engineers who work day
    and night to achieve a certain functionality. This is workable when the problem
    is well defined. But what about situations when the problem is also way complex?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从原始时代到现在，机器人和计算机都被编程来执行一系列活动。这些活动可能非常庞大。因此，为了开发复杂的程序，需要大量的软件工程师，他们日夜工作以实现某种功能。当问题定义明确时，这是可行的。但是当问题也变得非常复杂时呢？
- en: Learning is something that has made us humans what we are. Our experiences molded
    us to adapt to situations in a better and a more efficient way. Every time we
    do something, we know more. This makes us better at doing that task over a period
    of time. It is said practice makes a man perfect, and it is learning through doing
    things again and again that makes us better.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学习是使我们成为人类的东西。我们的经验使我们能够以更好和更有效的方式适应各种情况。每次我们做某事，我们都会学到更多。这使我们在一段时间内更擅长做这项任务。俗话说熟能生巧，通过一遍又一遍地做事情来学习，使我们变得更好。
- en: However, let us step back and define what learning is? I would like to quote
    Google here according to it, *It is a knowledge acquired through study, experience
    or being taught*. So, learning is basically a way of acquiring information from
    our surroundings to understand a process and its nature.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，让我们退一步来定义学习是什么？我想引用Google的说法，根据它的说法，*学习是通过学习、经验或教导获得的知识*。因此，学习基本上是一种从我们周围获取信息以理解过程及其性质的方式。
- en: Now, you must be thinking, wait a minute, haven't we made our system learn a
    lot of vision data in previous chapters when we were making the guard robot. You
    would be absolutely correct to think so. However, the learning can be done in
    different ways. What may work for one kind of problem can be futile for some other
    kind of problem. Hence, there are various types of learning algorithms and their
    principles. In this chapter, we will be focusing on an algorithm named **k-nearest
    neighbor**. It's named the **lazy algorithm**. I love this algorithm personally
    for classification. Why? Because technically there is no training phase. How?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会想，等一下，在之前的章节中，当我们制作守卫机器人时，我们已经让我们的系统学习了很多视觉数据。你的想法是完全正确的。然而，学习可以通过不同的方式进行。对一个问题有效的方法对另一种问题可能是无效的。因此，有各种类型的学习算法和原则。在本章中，我们将专注于一种名为**k最近邻**的算法。它被称为**懒惰算法**。我个人喜欢这个算法用于分类。为什么？因为从技术上讲，它没有训练阶段。怎么做？
- en: k-nearest neighbor is actually a smart algorithm. Rather than computing a regression
    of data provided and do a lot of mathematics calculations, it simply takes a structured
    data from the dataset provided. Whenever there is new data that has come in for
    prediction, then it simply searches the closest *k* match of the data provided
    by the user to the database based on its classification given. So, in this chapter,
    we will learn how this algorithm will work and how we can use it to make our home
    smart.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: k最近邻实际上是一个聪明的算法。它不是计算所提供数据的回归并进行大量的数学计算，而是简单地从提供的数据集中获取结构化数据。每当有新的数据输入进行预测时，它只是根据用户提供的数据在数据库中搜索最接近的*k*匹配数据，基于其给定的分类。因此，在本章中，我们将学习这个算法将如何工作，以及我们如何使用它来使我们的家变得智能。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Making a dataset
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作数据集
- en: Prediction using dataset
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据集进行预测
- en: Making your home learn
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让你的家学习
- en: Home learning and automation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 家庭学习和自动化
- en: Making a dataset
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作数据集
- en: We would now have to make a dummy dataset so that the machine learning algorithm
    can predict based on that data what should be done.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要制作一个虚拟数据集，以便机器学习算法可以根据该数据预测应该做什么。
- en: To make a dataset, we need to understand what data is being considered. In this
    chapter, we will be making a machine learning algorithm based on time and the
    temperature to predict whether the fan should be on or off. Hence, there are at
    least two things that should be provided by us to the system one being `Temperature`,
    and the other would be `Time` so that the prediction can take place. But one thing
    to remember is that we are talking about a supervised learning algorithm, so to
    train the model, we need to also give the outcome of `Temperature` and `Time`
    onto the state of the fan. Here, the state of the fan would be either on or off.
    Hence, we can depict it using `0` or `1`. Now let's go ahead and make a dataset
    by ourselves.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作数据集，我们需要了解正在考虑的数据是什么。在本章中，我们将基于时间和温度制作一个机器学习算法，以预测风扇应该开启还是关闭。因此，我们至少需要向系统提供两样东西，一样是“温度”，另一样是“时间”，以便进行预测。但要记住的一件事是，我们正在谈论一个监督学习算法，因此为了训练模型，我们还需要将“温度”和“时间”的结果提供给风扇的状态。在这里，风扇的状态可以是开启或关闭。因此，我们可以用`0`或`1`来表示。现在让我们继续自己制作一个数据集。
- en: 'Now, to make a dataset, you simply have to open Microsoft Excel and start writing
    the dataset as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要制作数据集，你只需打开Microsoft Excel并开始编写数据集如下：
- en: '![](Images/d136c76b-b6e8-462f-bb2a-69702c1da791.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d136c76b-b6e8-462f-bb2a-69702c1da791.png)'
- en: It is always better to have a dataset of more than 20 sets of data. Also, its
    important that the data has a distinct characteristic and its not random data.
    For example, in the preceding case, you can see that at `12.44` when the temperature
    is `28`, the fan will be on; however, at the same time, when the time is `12.13`
    and temperature is `21`, then the fan is off.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最好拥有超过20组数据的数据集。此外，数据具有明显的特征并且不是随机数据是很重要的。例如，在前面的案例中，你可以看到在温度为`28`时，时间为`12.44`时，风扇将开启；然而，在同一时间，当时间为`12.13`且温度为`21`时，风扇是关闭的。
- en: Once you have created a dataset, then you must save it with the name `dataset` in
    the CSV format. There may be some users who would not use a Microsoft Excel, in
    which case you can write the data with the same format in text editor and finally
    save it in the CSV format.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据集后，您必须以CSV格式将其保存为名为`dataset`的文件。可能有一些用户不使用Microsoft Excel，在这种情况下，您可以在文本编辑器中以相同格式编写数据，最后以CSV格式保存。
- en: Once you have the `dataset.csv` files, then you must go ahead and copy them
    into the place where you will be saving the upcoming code. Once you are done,
    then we can move on to the next step.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了`dataset.csv`文件，那么您必须继续将它们复制到您将保存即将到来的代码的地方。完成后，我们可以继续下一步。
- en: Remember that the better the quality of data, the better the learning process.
    So you may take some time and carefully craft your dataset so that it does make
    sense.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，数据的质量越好，学习过程就越好。因此，您可能需要花一些时间来精心制作数据集，以便它确实有意义。
- en: Predicting using a dataset
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据集进行预测
- en: 'Without much talking, let''s take a look at the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不多说了，让我们看看以下代码：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, let''s see what we are doing here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们看看我们在这里做了什么：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We are importing `numpy` to our program; this helps us handle lists and matrices:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`numpy`导入到我们的程序中；这有助于我们处理列表和矩阵：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, we are importing a library named `pandas`; this helps us read files in
    comma-separated values or in other words, CSV files. We will be using CSV files
    to store our data and access it for learning process:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在导入一个名为`pandas`的库；这有助于我们读取逗号分隔值或者叫CSV文件。我们将使用CSV文件来存储我们的数据并访问它进行学习过程：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we are importing `KneighborsClassifier` from the library `sklearn`. `sklearn`
    itself is a huge library; hence, we are importing only a part of it as we will
    not be using all of it in this program:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从`sklearn`库中导入`KneighborsClassifier`。`sklearn`本身是一个庞大的库；因此，我们只导入其中的一部分，因为在这个程序中我们不会使用全部内容：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we are giving value to variable `knn` wherein the value would be `KNeighborsClassifer(n_neighbors
    =5)`; what this means is that it is using the `KneighborsClassifer()` function
    with the argument as `n_neighbors=5`. This argument tells the `KneighborsClassifer`
    function that we will be having five neighbors in the algorithm. Further to this
    using this declaration, the whole function can be called using `knn`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在给变量`knn`赋值，其中值将是`KNeighborsClassifer(n_neighbors =5)`；这意味着它正在使用`KneighborsClassifer()`函数，并将参数设置为`n_neighbors=5`。这个参数告诉`KneighborsClassifer`函数算法中将有五个邻居。进一步使用这个声明，整个函数可以使用`knn`来调用：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we are providing value to a variable called `data` and the value passed
    is `pd.read_csv(''dataset.csv'')`; what this means is that whenever `data` is
    called, then a `pd.read_csv()` function from the `pandas` library will be called.
    The purpose of this function is to read data from the CSV files. Here, the argument
    passed is `dataset.csv`; hence, it is indicating which data would be read by the
    function. In our case, it will read from a file name: `dataset.csv`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为名为`data`的变量提供值，传递的值是`pd.read_csv('dataset.csv')`；这意味着每当调用`data`时，将调用`pandas`库中的`pd.read_csv()`函数。这个函数的目的是从CSV文件中读取数据。在这里，传递的参数是`dataset.csv`；因此，它指示函数将从一个名为`dataset.csv`的文件中读取数据：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the following line, we are passing value to the variable `x`, and the value
    being passed is `np.array(data[[''Time, ''Temp'']])`. Now the `np.array` function
    to make an array through the `numpy` library. This array will store the data by
    the name of `Time` and `Temp`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行中，我们为变量`x`传递值，传递的值是`np.array(data[['Time, 'Temp']])`。现在，`np.array`函数通过`numpy`库创建一个数组。这个数组将存储名为`Time`和`Temp`的数据：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Just like the previous time, we are storing `State` in an array made through
    the `numpy` library `.ravel()` function at the end would transpose the array.
    This is done so that the mathematical functions can be done between two arrays—`x`
    and `y`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上一次一样，我们将`State`存储在通过`numpy`库的`.ravel()`函数创建的数组中，最后会转置数组。这样做是为了使两个数组`x`和`y`之间可以进行数学运算：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this small line, we are using the function from the `knn` library called `fit()`
    what it is doing is fitting the model using the `x` as the primary data and `y`
    as the output resultant data:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一小行中，我们使用了`knn`库中的`fit()`函数，它的作用是使用`x`作为主要数据，`y`作为输出结果数据来拟合模型：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this line, we are requesting the data from the user. In the first line, we
    will be printing `Enter time` and thereafter wait for user to enter the time.
    After user has entered the time, it will be stored in the variable named `time`.
    Once that is done, then it would move on to the next line; the code and it would
    print `Enter temp` once that is prompted to the user it would wait for data to
    be collected. Once data is fetched by the user, it will store that data in the
    variable called `temp:`
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们正在向用户请求数据。在第一行，我们将打印`输入时间`，然后等待用户输入时间。用户输入时间后，它将被存储在名为`time`的变量中。一旦完成，它将继续下一行；代码将打印`输入温度`，一旦提示用户输入温度，它将等待数据被收集。一旦用户收集到数据，它将把数据存储在名为`temp`的变量中：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, we are making an empty list by the name of `data`; this list will be
    used for calculating the resultant state of the output. As all the machine learning
    algorithm is working in list data type. Hence, the input must be given for decision
    in the form of a list itself:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在创建一个名为`data`的空列表；这个列表将用于计算输出的结果状态。由于所有的机器学习算法都是以列表数据类型工作的。因此，决策的输入必须以列表的形式给出：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we are adding data to the list that we just created with the name `data`.
    First, `time` will be added, followed by `temp`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在向我们刚刚创建的名为`data`的列表中添加数据。首先添加`time`，然后是`temp`：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once that is done, a function named `predict` from the `knn` algorithm will
    be used to predict the output based on the list provided with the name of `data`.
    The output of the prediction algorithm is fetched to a variable by the name  `a`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，将使用`knn`算法中的名为`predict`的函数来根据提供的名为`data`的列表来预测输出。预测算法的输出将被提取到一个名为`a`的变量中：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finally, once the prediction is done, then we would read the value of   `a` and
    remember that all the data I/O is happening in the form of lists. Hence, the data
    output given by the prediction algorithm would also be in the list format. Hence,
    we are printing the first element of the list.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦预测完成，我们将读取`a`的值，并记住所有的数据I/O都是以列表的形式进行的。因此，预测算法给出的数据输出也将以列表格式呈现。因此，我们打印列表的第一个元素。
- en: This output will predict which state will be of the fan according to the dataset
    given by the user. So, go ahead and give a temperature and a time and let the
    system predict the outcome for you. See if it works fine or not. If it doesn't,
    then try adding some more datasets to the CSV files or see whether the values
    in the dataset actually make any sense. I am sure that you end up with a wonderful
    predictive system.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出将根据用户提供的数据集预测风扇的状态。因此，继续输入温度和时间，让系统为您预测结果。看看它是否正常工作。如果不正常，那么尝试向CSV文件添加更多数据集，或者查看数据集中的值是否真的有意义。我相信您最终会得到一个出色的预测系统。
- en: Making your home learn
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让您的家学习
- en: 'Once this constitution is done, go ahead and wire it up, as shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个构想完成了，继续将其连接起来，如下所示：
- en: '![](Images/b6b1a2eb-d4ae-4138-a36c-2feb1b73e5cc.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b6b1a2eb-d4ae-4138-a36c-2feb1b73e5cc.png)'
- en: 'Once that is set, it is time for us to write the following code on to our Raspberry
    Pi:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好之后，是时候将以下代码写入我们的树莓派了：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s see what we have done here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们在这里做了什么：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this line of the code, we have assigned the value `open("dataset.csv", "a+")`
    to the variable `f`. Thereafter, the `open()` function will open the file that
    is passed on to its argument, which in our case is `dataset.csv`; the argument `a+`
    stands for appending the value at the end of the CSV file. Hence, what this line
    will do is to open the file `dataset.csv` and add a value that we will pass later
    on:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这行代码中，我们将值`open("dataset.csv", "a+")`赋给变量`f`。然后，`open()`函数将打开传递给它的文件，我们的情况下是`dataset.csv`；参数`a+`表示将值附加到CSV文件的末尾。因此，这行代码将打开文件`dataset.csv`并添加我们稍后将传递的值：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are declaring an empty string by the name of `data`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过名称`data`声明了一个空字符串：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We are adding values of hours and minutes to the string, separated by a dot
    in between for differentiation. Hence, the data will look like `HH.MM`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在将小时和分钟的值添加到字符串中，用点号分隔以进行区分。因此，数据看起来像`HH.MM`：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We are using this line to read the humidity and temperature reading from the
    DHT 11 sensor and the values that would be passed on to the variables `humidity`
    and `temperature`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用这行代码从DHT 11传感器读取湿度和温度读数，并将这些值传递给变量`humidity`和`temperature`：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once the data is read, we are adding temperature to the variable `data` as
    well. Hence, now the data would look like this `HH.MM` and `TT.TT`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据被读取，我们也将温度添加到变量`data`中。因此，现在数据看起来像这样`HH.MM`和`TT.TT`：
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here, we have defined different types of states which are corresponding to
    the switch combinations. The table for it is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了不同类型的状态，这些状态对应于开关组合。其表格如下：
- en: '| **Switch 1** | **Switch 2** | **State** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **开关1** | **开关2** | **状态** |'
- en: '| `0` | `0` | `0` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `0` | `0` |'
- en: '| `0` | `1` | `1` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `1` | `1` |'
- en: '| `1` | `0` | `2` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `0` | `2` |'
- en: '| `1` | `1` | `3` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `1` | `3` |'
- en: 'Hence, by the value of state, we can understand which switch would be turned
    on and which would be turned off:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过状态的值，我们可以了解哪个开关将被打开，哪个将被关闭：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, the value of state is also added to the variable named `data`. Now,
    finally, the data would look like `HH.MM`, `TT.TT`, and `S`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，状态的值也被添加到名为`data`的变量中。现在，最终，数据看起来像`HH.MM`，`TT.TT`和`S`：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, using the `write()` function, we are writing the value of data to the file
    that we have already defined by the value `f` earlier.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`write()`函数，我们正在将数据的值写入到我们之前定义的文件中，该文件的值为`f`。
- en: 'Hence, with every single switch on or off, the data would be collected, and
    the value would be recorded with the time stamp in that file. This data can then
    be used to predict the state of the home at any given time without any intervention:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次开关打开或关闭时，数据都将被收集，并且该值将以时间戳记录在文件中。这些数据随后可以用于在任何给定时间预测家庭的状态，而无需任何干预：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, we are comparing the state with the `prev_state` as you can see in our
    program. The previous state is calculated at the start of our program. So, if
    there is any change in the state of the system, then the value of `prev_state`
    and `state` would be different. This will lead to the `if` statement to be true.
    When that happens, the data would be written onto our file using the `write()`
    function. The argument passed is the value that needs to be written. Finally,
    the value of count is increased by `1`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在将状态与`prev_state`进行比较，您可以在我们的程序中看到。先前的状态是在程序开始时计算的。因此，如果系统的状态发生任何变化，那么`prev_state`和`state`的值将不同。这将导致`if`语句为真。当发生这种情况时，数据将使用`write()`函数写入到我们的文件中。传递的参数是需要写入的值。最后，计数的值增加了`1`。
- en: Once this is left running for a few hours or may be days, then it would collect
    some really useful data regarding your switching pattern of the lights and fan.
    Thereafter, this data can be fetched to the previous program wherein it would
    be able to to take its own decision based on the time and temperature.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个程序运行了几个小时或者可能是几天，它将收集关于灯光和风扇开关模式的一些非常有用的数据。此后，这些数据可以被获取到之前的程序中，程序将能够根据时间和温度做出自己的决定。
- en: Home learning and automation
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 家庭学习和自动化
- en: 'Now that in the previous section we have understood how the learning works,
    it''s time to use this concept to make a robot that will automatically understand
    how we function and make decisions. Based on our decisions, the system will judge
    what should be done. But this time, rather than giving a set of data by the user,
    let''s make this program create the data for itself. Once the data seems sufficient
    for itself to function. So, without much explanation, let''s get right into it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在前面的部分中，我们已经了解了学习的工作原理，现在是时候利用这个概念制作一个能够自动理解我们的功能并做出决策的机器人了。基于我们的决定，系统将判断应该做什么。但这一次，而不是由用户提供一组数据，让这个程序自己创建数据。一旦数据对自己的功能似乎足够，那么，不用太多的解释，让我们直接开始吧：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now let''s see what we have done here. In this program, the first part of the
    program inside the condition `while count < 200:` is exactly the same as what
    we have done in the last code. So, it is just doing the things according to the
    user, and at the same time, it''s taking in the values from the users to understand
    their working behavior:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看我们在这里做了什么。在这个程序中，条件`while count < 200:`内的程序的第一部分与我们在上一个代码中所做的完全相同。所以，它只是根据用户的要求做事情，同时，它正在从用户那里获取值以了解他们的工作行为：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Thereafter, we have the second part of the code that will start to execute
    when the count is beyond `200` that is inside the preceding loop:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，当计数超过`200`时，代码的第二部分将开始执行，这是在前面的循环内部：
- en: '[PRE26]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this line, we are forming an empty string by the name of time where we would
    be storing the value of time:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们正在形成一个名为time的空字符串，我们将在其中存储时间的值：
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We are storing the values of time into the variable named `H` and `M`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将时间的值存储到名为`H`和`M`的变量中：
- en: '[PRE28]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We are now storing the value of time in the string `time`. This would include
    both hours and minutes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将时间的值存储在字符串`time`中。这将包括小时和分钟：
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For the sake of ease of calculations and reducing the computing load on the
    system, we are reducing the size of the temperature variable . We are doing it
    by removing the decimal places. To do that `TT.TT`; we are simply eliminating
    the decimal point and converting it into integer. This is done by the function
    named `int()`. The value of temperature in `int` will be stored in the variable
    named `temp`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化计算并减少系统的计算负载，我们正在减小温度变量的大小。我们通过去掉小数位来做到这一点。为了做到这一点`TT.TT`，我们只是消除小数点并将其转换为整数。这是通过名为`int()`的函数完成的。温度的整数值将存储在名为`temp`的变量中：
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, we are adding the value of the time and the temperature to a list named `test_set`
    if you look in the program, then you will see the declaration of an empty set
    in the mid of the program. So, now this `test_set` has the value of `time` and `temp`, which
    can be further used by the prediction algorithm to predict the state:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将时间和温度的值添加到名为`test_set`的列表中，如果您查看程序，那么您将看到程序中间声明了一个空集。所以，现在这个`test_set`有了`time`和`temp`的值，这可以进一步被预测算法用来预测状态：
- en: '[PRE31]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Using the simple function named `predict()` from the `knn` function, we can
    predict the value of the state. All we need to do is to pass on the data or `test_set`
    list over to the predict function. The output of this function will be a list
    that will be stored in a variable named `a`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名为`predict()`的简单函数从`knn`函数中，我们可以预测状态的值。我们只需要将数据或`test_set`列表传递给预测函数。这个函数的输出将是一个存储在变量`a`中的列表：
- en: '[PRE32]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The value of `Out` will be set to the first element of the list `a`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Out`的值将设置为列表`a`的第一个元素：'
- en: '[PRE33]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Using the preceding code block, we are able to switch on the light and fans
    selectively based on the state predicted by the algorithm. Hence, using this,
    the program would be able to automatically predict and switch on or off the light
    and the fans without your intervention.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码块，我们能够根据算法预测的状态有选择地打开灯和风扇。因此，使用这个，程序将能够自动预测并打开或关闭灯和风扇，无需您的干预。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we understood how machine learning works even without learning.
    We understood how datasets can be provided, and we can create a new dataset using
    the existing system. Finally, we understood how the system can work seamlessly
    to collect data, learn from that data, and finally, provide the input.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了即使没有学习，机器学习是如何工作的。我们了解了如何提供数据集，并且可以使用现有系统创建新的数据集。最后，我们了解了系统如何无缝地收集数据，从数据中学习，最终提供输入。
