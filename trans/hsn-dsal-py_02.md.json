["```py\n>>> a=4; b=5   # Operator (=) assigns the value to variable\n>>>print(a, \"is of type\", type(a))\n4 is of type \n<class 'int'>\n>>> 9/5  \n1.8\n>>>c= b/a  *# division returns a floating point number* *>>>* print(c, \"is of type\", type(c))\n1.25 is of type <class 'float'>\n>>> c   # No need to explicitly declare the datatype\n1.25\n```", "```py\n>>> a=4; b=5   \n>>>d= b//a\n*>>>* print(d, \"is of type\", type(d))1 is of type <class 'int'>\n>>>7/5  # true division\n1.4\n>>> -7//5  # floor division operator\n-2\n```", "```py\n>>> a=7; b=5 \n>>> e= b**a  # The operator (**)calculates power \n>>>e\n78125\n>>>a%b\n2\n```", "```py\n>>> f=3+5j\n>>>print(f, \"is of type\", type(f))(3+5j) is of type <class 'complex'>\n>>> f.real\n3.0\n>>> f.imag\n5.0\n>>> f*2   # multiplication\n(6+10j)\n>>> f+3  # addition\n(6+5j)\n>>> f -1  # subtraction\n(2+5j)  \n```", "```py\n>>>bool(2)\nTrue\n>>>bool(-2)\nTrue\n>>>bool(0)\nFalse\n```", "```py\n>>>See_boolean = (4 * 3 > 10) and (6 + 5 >= 11)\n>>>print(See_boolean)\nTrue\n>>>if (See_boolean):\n...    print(\"Boolean expression returned True\")\n   else:\n...  print(\"Boolean expression returned False\")\n...\n\nBoolean expression returned True\n```", "```py\n>>> 1-0.9\n0.09999999999999998\n>>> 1-0.9==.1\nFalse\n```", "```py\n>>> import decimal\n>>> x=decimal.Decimal(3.14)\n>>> y=decimal.Decimal(2.74)\n>>> x*y\nDecimal('8.603600000000001010036498883')\n>>> decimal.getcontext().prec=4\n>>> x*y\nDecimal('8.604')\n```", "```py\n>>> import fractions\n>>> fractions.Fraction(3,4)\nFraction(3, 4)\n>>> fractions.Fraction(0.5)\nFraction(1, 2)\n>>> fractions.Fraction(\"0.25\") \nFraction(1, 4)\n```", "```py\n>>> x=[1,2,3]\n>>> y=[1,2,3]\n>>> x==y  # test equivalence \nTrue\n>>> x is y   # test object identity\nFalse\n>>> x=y   # assignment\n>>> x is y\nTrue\n```", "```py\n>>>list() # an empty list   \n>>>list1 = [1,2,3, 4]\n>>>list1.append(1)  # append value 1 at the end of the list\n>>>list1\n[1, 2, 3, 4, 1]\n>>>list2 = list1 *2    \n[1, 2, 3, 4, 1, 1, 2, 3, 4, 1]\n>>> min(list1)\n1\n>>> max(list1)\n4\n>>>list1.insert(0,2)  # insert an value 2 at index 0\n>>> list1\n[2, 1, 2, 3, 4, 1]\n>>>list1.reverse()\n>>> list1\n[1, 4, 3, 2, 1, 2]\n>>>list2=[11,12]\n>>>list1.extend(list2)\n>>> list1\n[1, 4, 3, 2, 1, 2, 11, 12]\n>>>sum(list1)\n36\n>>> len(list1)\n8\n>>> list1.sort()\n>>> list1\n[1, 1, 2, 2, 3, 4, 11, 12]\n>>>list1.remove(12)   #remove value 12 form the list\n>>> list1\n[1, 1, 2, 2, 3, 4, 11]\n```", "```py\n>>> t= tuple()   # create an empty tuple\n>>> type(t)\n<class 'tuple'>\n>>> t=('a',)  # create a tuple with 1 element\n>>> t\n('a',)\n>>> print('type is ',type(t))\ntype is  <class 'tuple'>\n>>> tpl=('a','b','c')\n>>> tpl('a', 'b', 'c')\n>>> tuple('sequence')\n('s', 'e', 'q', 'u', 'e', 'n', 'c', 'e')\n>>> x,y,z= tpl   #multiple assignment \n>>> x\n'a'\n>>> y\n'b'\n>>> z\n'c'\n>>> 'a' in tpl  # Membership can be tested\nTrue\n>>> 'z' in tpl\nFalse\n```", "```py\n>>> tupl = 1, 2,3,4,5  # braces are optional\n>>>print(\"tuple value at index 1 is \", tupl[1])\ntuple value at index 1 is  2\n>>> print(\"tuple[1:3] is \", tupl[1:3])\ntuple[1:3] is (2, 3)\n>>>tupl2 = (11, 12,13)\n>>>tupl3= tupl + tupl2   # tuple concatenation\n>>> tupl3\n(1, 2, 3, 4, 5, 11, 12, 13)\n>>> tupl*2      # repetition for tuples\n(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n>>> 5 in tupl    # membership test\nTrue\n>>> tupl[-1]     # negative indexing\n5\n>>> len(tupl)   # length function for tuple\n5\n>>> max(tupl)\n5\n>>> min(tupl)\n1\n>>> tupl[1] = 5 # modification in tuple is not allowed.\nTraceback (most recent call last):  \n  File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>>print (tupl== tupl2)\nFalse\n>>>print (tupl>tupl2)\nFalse\n```", "```py\n>>> l = ['one','two']\n>>> x,y = l\n('one', 'two')\n>>> x,y = y,x\n>>> x,y\n('two', 'one')\n```", "```py\n>>>a= {'Monday':1,'Tuesday':2,'Wednesday':3} #creates a dictionary \n>>>b =dict({'Monday':1 , 'Tuesday': 2, 'Wednesday': 3})\n>>> b\n{'Monday': 1, 'Tuesday': 2, 'Wednesday': 3}\n>>> c= dict(zip(['Monday','Tuesday','Wednesday'], [1,2,3]))\n>>> c={'Monday': 1, 'Tuesday': 2, 'Wednesday': 3}\n>>> d= dict([('Monday',1), ('Tuesday',2), ('Wednesday',3)])\n>>>d\n{'Monday': 1, 'Tuesday': 2, 'Wednesday': 3}\n```", "```py\n>>>d['Thursday']=4     #add an item\n>>>d.update({'Friday':5,'Saturday':6})  #add multiple items\n>>>d\n{'Monday': 1, 'Tuesday': 2, 'Wednesday': 3, 'Thursday': 4, 'Friday': 5, 'Saturday': 6}\n>>>'Wednesday' in d  # membership test (only in keys)\nTrue\n>>>5 in d       # membership do not check in values\nFalse\n\n```", "```py\n>>> dict(zip('packt', range(5)))\n{'p': 0, 'a': 1, 'c': 2, 'k': 3, 't': 4}\n>>> a = dict(zip('packt', range(5)))\n>>> len(a)   # length of dictionary a\n5\n>>> a['c']  # to check the value of a key\n2\n>>> a.pop('a')  \n1\n>>> a{'p': 0, 'c': 2, 'k': 3, 't': 4}\n>>> b= a.copy()   # make a copy of the dictionary\n>>> b\n{'p': 0, 'c': 2, 'k': 3, 't': 4}\n>>> a.keys()\ndict_keys(['p', 'c', 'k', 't'])\n>>> a.values()\ndict_values([0, 2, 3, 4])\n>>> a.items()\ndict_items([('p', 0), ('c', 2), ('k', 3), ('t', 4)])\n>>> a.update({'a':1})   # add an item in the dictionary\n>>> a{'p': 0, 'c': 2, 'k': 3, 't': 4, 'a': 1}\n>>> a.update(a=22)  # update the value of key 'a'\n>>> a{'p': 0, 'c': 2, 'k': 3, 't': 4, 'a': 22}\n\n```", "```py\n>>> d = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6} \n>>> sorted(list(d)) \n['five', 'four', 'one', 'six', 'three', 'two']  \n>>> sorted(list(d.values())) \n[1, 2, 3, 4, 5, 6] \n\n```", "```py\nd2={'one':'uno','two':'deux','three':'trois','four':'quatre','five':'cinq','six':'six'}\n```", "```py\ndef corder(string): \n    return (string[len(string)-1])\n```", "```py\ndef wordcount(fname):  \n   try: \n        fhand=open(fname) \n   except:\n        print('File can not be opened') \n        exit() \n\n   count=dict() \n   for line in fhand: \n        words=line.split() \n        for word in words: \n            if word not in count: \n                count[word]=1  \n            else: \n                count[word]+=1 \n   return(count)\n\n```", "```py\ncount=wordcount('alice.txt') \nfiltered={key:value for key, value in count.items() if value <20 and value>16 }\n```", "```py\n{'once': 18, 'eyes': 18, 'There': 19, 'this,': 17, 'before': 19, 'take': 18, 'tried': 18, 'even': 17, 'things': 19, 'sort': 17, 'her,': 18, '`And': 17, 'sat': 17, '`But': 19, \"it,'\": 18, 'cried': 18, '`Oh,': 19, 'and,': 19, \"`I'm\": 19, 'voice': 17, 'being': 19, 'till': 19, 'Mouse': 17, '`but': 19, 'Queen,': 17}\n```", "```py\n>>> s1 = set()\n>>> s1.add(1)\n>>> s1.add(2)\n>>> s1.add(3)\n>>> s1.add(4)\n>>> s1\n{1, 2, 3, 4}\n>>> s1.remove(4)\n>>> s1\n{1, 2, 3}\n>>> s1.discard(3)\n>>> s1\n{1, 2}\n>>>s1.clear()\n>>>s1\nset()\n```", "```py\ndq2=deque([],maxlen=3) \nfor i in range(6):\n    dq2.append(i) \n    print(dq2)\n```", "```py\n>>> import collections\n>>> dict1= {'a':1, 'b':2, 'c':3}\n>>> dict2 = {'d':4, 'e':5}\n>>> chainmap = collections.ChainMap(dict1, dict2)  # linking two dictionaries\n>>> chainmap\nChainMap({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5})\n>>> chainmap.maps\n[{'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}]\n>>> chainmap.values\n<bound method Mapping.values of ChainMap({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5})\n>>>> chainmap['b']   #accessing values \n2\n>>> chainmap['e']\n5\n```", "```py\n>>> from collections import ChainMap\n>>> defaults= {'theme':'Default','language':'eng','showIndex':True, 'showFooter':True}\n>>> cm= ChainMap(defaults)   #creates a chainMap with defaults configuration\n>>> cm.maps[{'theme': 'Default', 'language': 'eng', 'showIndex': True, 'showFooter': True}]\n>>> cm.values()\nValuesView(ChainMap({'theme': 'Default', 'language': 'eng', 'showIndex': True, 'showFooter': True}))\n>>> cm2= cm.new_child({'theme':'bluesky'}) # create a new chainMap with a child that overrides the parent.\n>>> cm2['theme']  #returns the overridden theme'bluesky'\n>>> cm2.pop('theme')  # removes the child theme value\n'bluesky' \n>>> cm2['theme']\n'Default'\n>>> cm2.maps[{}, {'theme': 'Default', 'language': 'eng', 'showIndex': True, 'showFooter': True}]\n>>> cm2.parents\nChainMap({'theme': 'Default', 'language': 'eng', 'showIndex': True, 'showFooter': True})\n```", "```py\n>>> from collections import Counter\n>>> Counter('anysequence')\nCounter({'e': 3, 'n': 2, 'a': 1, 'y': 1, 's': 1, 'q': 1, 'u': 1, 'c': 1})\n>>> c1 = Counter('anysequence')\n>>> c2= Counter({'a':1, 'c': 1, 'e':3})\n>>> c3= Counter(a=1, c= 1, e=3)\n>>> c1\nCounter({'e': 3, 'n': 2, 'a': 1, 'y': 1, 's': 1, 'q': 1, 'u': 1, 'c': 1})\n>>> c2\nCounter({'e': 3, 'a': 1, 'c': 1})\n>>> c3\nCounter({'e': 3, 'a': 1, 'c': 1})\n```", "```py\n>>> from collections import Counter\n>>> ct = Counter()  # creates an empty counter object\n>>> ct\nCounter()\n>>> ct.update('abca') # populates the object\n>>> ct\nCounter({'a': 2, 'b': 1, 'c': 1})\n>>> ct.update({'a':3}) # update the count of 'a'\n>>> ct\nCounter({'a': 5, 'b': 1, 'c': 1})\n>>> for item in ct:\n ...  print('%s: %d' % (item, ct[item]))\n ...\na: 5\nb: 1\nc: 1\n```", "```py\n>>> ct\nCounter({'a': 5, 'b': 1, 'c': 1})\n>>> ct['x']\n0\n>>> ct.update({'a':-3, 'b':-2, 'e':2})\n>>> ct\nCounter({'a': 2, 'e': 2, 'c': 1, 'b': -1})\n>>>sorted(ct.elements())\n['a', 'a', 'c', 'e', 'e']\n```", "```py\n>>> ct.most_common()\n[('a', 2), ('e', 2), ('c', 1), ('b', -1)]\n>>> ct.subtract({'e':2})\n>>> ct\nCounter({'a': 2, 'c': 1, 'e': 0, 'b': -1})\n```", "```py\n>>> import collections\n>>> od1=  collections.OrderedDict()\n>>> od1['one'] = 1\n>>> od1['two'] = 2\n>>> od2 =  collections.OrderedDict()\n>>> od2['two'] = 2\n>>> od2['one'] = 1\n>>> od1==od2\nFalse\n```", "```py\n>>> kvs = [('three',3), ('four',4), ('five',5)]\n>>> od1.update(kvs)\n>>> od1\nOrderedDict([('one', 1), ('two', 2), ('three', 3), ('four', 4), ('five', 5)])\n>>> for k, v in od1.items(): print(k, v)\n```", "```py\n...\none 1\ntwo 2\nthree 3\nfour 4\nfive 5\n```", "```py\n>>> od3 = collections.OrderedDict(sorted(od1.items(), key= lambda t : (4*t[1])- t[1]**2))\n>>>od3\nOrderedDict([('five', 5), ('four', 4), ('one', 1), ('three', 3), ('two', 2)])\n>>> od3.values() \nodict_values([5, 4, 1, 3, 2])\n```", "```py\n>>> from collections import defaultdict\n>>> dd = defaultdict(int)\n>>> words = str.split('red blue green red yellow blue red green green red')\n>>> for word in words: dd[word] +=1\n...\n>>> dd\ndefaultdict(<class 'int'>, {'red': 4, 'blue': 2, 'green': 3, 'yellow': 1})\n\n```", "```py\ndef isprimary(c):\n     if (c=='red') or (c=='blue') or (c=='green'): \n         return True \n     else: \n         return False\n```", "```py\n>>> from collections import namedtuple\n>>> space = namedtuple('space', 'x y z')\n>>> s1= space(x=2.0, y=4.0, z=10) # we can also use space(2.0,4.0, 10)\n>>> s1\nspace(x=2.0, y=4.0, z=10)\n>>> s1.x * s1.y * s1.z   # calculate the volume\n80.0\n```", "```py\n>>> sl = [4,5,6]\n>>> space._make(sl)\nspace(x=4, y=5, z=6)\n>>> s1._1\n4\n```", "```py\n>>> s1._asdict()\nOrderedDict([('x', 3), ('_1', 4), ('z', 5)])\n>>> s1._replace(x=7, z=9)\nspace2(x=7, _1=4, z=9)\n>>> space._fields\n('x', 'y', 'z')\n>>> space._fields_defaults\n{}\n```", "```py\n>>> import array\n>>> ba = array.array('i', range(10**6))\n>>> bl = list(range(10**6))\n>>> import sys\n>>> 100*sys.getsizeof(ba)/sys.getsizeof(bl)\n90.92989871246161\n```"]