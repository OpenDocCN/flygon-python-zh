["```py\nimport argparse\n\ndef main(number, other_number):\n    result = number * other_number\n    print(f'The result is {result}')\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-n1', type=int, help='A number', default=1)\n    parser.add_argument('-n2', type=int, help='Another number', default=1)\n\n    args = parser.parse_args()\n\n    main(args.n1, args.n2)\n```", "```py\nimport argparse\nimport configparser\n\ndef main(number, other_number):\n    result = number * other_number\n    print(f'The result is {result}')\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-n1', type=int, help='A number', default=1)\n    parser.add_argument('-n2', type=int, help='Another number', default=1)\n\n    parser.add_argument('--config', '-c', type=argparse.FileType('r'),\n                        help='config file')\n\n    args = parser.parse_args()\n    if args.config:\n        config = configparser.ConfigParser()\n        config.read_file(args.config)\n        # Transforming values into integers\n        args.n1 = int(config['DEFAULT']['n1'])\n        args.n2 = int(config['DEFAULT']['n2'])\n\n    main(args.n1, args.n2)\n```", "```py\n[ARGUMENTS]\nn1=5\nn2=7\n```", "```py\n$ python3 prepare_task_step2.py -c config.ini\nThe result is 35\n$ python3 prepare_task_step2.py -c config.ini -n1 2 -n2 3\nThe result is 35\n```", "```py\nimport argparse\nimport sys\nimport configparser\n\ndef main(number, other_number, output):\n    result = number * other_number\n    print(f'The result is {result}', file=output)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-n1', type=int, help='A number', default=1)\n    parser.add_argument('-n2', type=int, help='Another number', default=1)\n\n    parser.add_argument('--config', '-c', type=argparse.FileType('r'),\n                        help='config file')\n    parser.add_argument('-o', dest='output', type=argparse.FileType('w'),\n                        help='output file',\n                        default=sys.stdout)\n\n    args = parser.parse_args()\n    if args.config:\n        config = configparser.ConfigParser()\n        config.read_file(args.config)\n        # Transforming values into integers\n        args.n1 = int(config['DEFAULT']['n1'])\n        args.n2 = int(config['DEFAULT']['n2'])\n\n    main(args.n1, args.n2, args.output)\n```", "```py\n$ python3 prepare_task_step5.py -n1 3 -n2 5 -o result.txt\n$ cat result.txt\nThe result is 15\n$ python3 prepare_task_step5.py -c config.ini -o result2.txt\n$ cat result2.txt\nThe result is 35\n```", "```py\nconfig = configparser.ConfigParser()\nconfig.read_file(file)\n```", "```py\n$ python3 prepare_task_step5.py -c config.ini\nThe result is 35\n$ python3 prepare_task_step5.py -c config.ini -o result.txt\n$ cat result.txt\nThe result is 35\n```", "```py\nPyYAML==3.12\n```", "```py\nimport yaml\nimport argparse\nimport sys\n\ndef main(number, other_number, output):\n    result = number * other_number\n    print(f'The result is {result}', file=output)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-n1', type=int, help='A number', default=1)\n    parser.add_argument('-n2', type=int, help='Another number', default=1)\n\n    parser.add_argument('-c', dest='config', type=argparse.FileType('r'),\n help='config file in YAML format',\n default=None)\n    parser.add_argument('-o', dest='output', type=argparse.FileType('w'),\n                        help='output file',\n                        default=sys.stdout)\n\n    args = parser.parse_args()\n    if args.config:\n        config = yaml.load(args.config)\n        # No need to transform values\n        args.n1 = config['ARGUMENTS']['n1']\n        args.n2 = config['ARGUMENTS']['n2']\n\n    main(args.n1, args.n2, args.output)\n```", "```py\nARGUMENTS:\n    n1: 7\n    n2: 4\n```", "```py\n$ python3 prepare_task_yaml.py -c config.yaml\nThe result is 28\n\n```", "```py\nimport argparse\nimport sys\nfrom datetime import datetime\nimport configparser\n\ndef main(number, other_number, output):\n    result = number * other_number\n    print(f'[{datetime.utcnow().isoformat()}] The result is {result}', \n          file=output)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--config', '-c', type=argparse.FileType('r'),\n                        help='config file',\n                        default='/etc/automate.ini')\n    parser.add_argument('-o', dest='output', type=argparse.FileType('a'),\n                        help='output file',\n                        default=sys.stdout)\n\n    args = parser.parse_args()\n    if args.config:\n        config = configparser.ConfigParser()\n        config.read_file(args.config)\n        # Transforming values into integers\n        args.n1 = int(config['DEFAULT']['n1'])\n        args.n2 = int(config['DEFAULT']['n2'])\n\n    main(args.n1, args.n2, args.output)\n```", "```py\n$ python3 cron.py\n[2018-05-15 22:22:31.436912] The result is 35\n$ python3 cron.py -o /path/automate.log\n$ cat /path/automate.log\n[2018-05-15 22:28:08.833272] The result is 35\n```", "```py\n$ which python\n/your/path/.venv/bin/python\n```", "```py\n$ /your/path/.venv/bin/python /your/path/cron.py -o /path/automate.log\n$ /your/path/.venv/bin/python /your/path/cron.py -o /path/automate.log\n\n```", "```py\n$ cat /path/automate.log\n[2018-05-15 22:28:08.833272] The result is 35\n[2018-05-15 22:28:10.510743] The result is 35\n```", "```py\n$ crontab -e\n\n*/5 * * * * /your/path/.venv/bin/python /your/path/cron.py -o /path/automate.log\n```", "```py\n$ contab -l\n*/5 * * * * /your/path/.venv/bin/python /your/path/cron.py -o /path/automate.log\n```", "```py\n$ tail -F /path/automate.log\n[2018-05-17 21:20:00.611540] The result is 35\n[2018-05-17 21:25:01.174835] The result is 35\n[2018-05-17 21:30:00.886452] The result is 35\n```", "```py\n* * * * * *\n| | | | | | \n| | | | | +-- Year              (range: 1900-3000)\n| | | | +---- Day of the Week   (range: 1-7, 1 standing for Monday)\n| | | +------ Month of the Year (range: 1-12)\n| | +-------- Day of the Month  (range: 1-31)\n| +---------- Hour              (range: 0-23)\n+------------ Minute            (range: 0-59)\n```", "```py\n30  15 * * * * means \"every day at 15:30\"\n30   * * * * * means \"every hour, at 30 minutes\"\n0,30 * * * * * means \"every hour, at 0 minutes and 30 minutes\"\n*/30 * * * * * means \"every half hour\"\n0    0 * * 1 * means \"every Monday at 00:00\"\n```", "```py\nYou have mail.\n$\n```", "```py\n$ mail\nMail version 8.1 6/6/93\\. Type ? for help.\n\"/var/mail/jaime\": 1 message 1 new\n>N 1 jaime@Jaimes-iMac-5K Thu May 17 21:15 19/914 \"Cron <jaime@Jaimes-iM\"\n? 1\nMessage 1:\n...\n/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/Resources/Python.app/Contents/MacOS/Python: can't open file 'cron.py': [Errno 2] No such file or directory\n```", "```py\nimport argparse\nimport sys\n\ndef main(number, other_number, output):\n    result = number / other_number\n    print(f'The result is {result}', file=output)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-n1', type=int, help='A number', default=1)\n    parser.add_argument('-n2', type=int, help='Another number', default=1)      \n    parser.add_argument('-o', dest='output', type=argparse.FileType('w'),\n                        help='output file', default=sys.stdout)\n\n    args = parser.parse_args()\n\n    main(args.n1, args.n2, args.output)\n```", "```py\n$ python3 task_with_error_handling_step1.py -n1 3 -n2 2\nThe result is 1.5\n$ python3 task_with_error_handling_step1.py -n1 25 -n2 5\nThe result is 5.0\n```", "```py\n$ python task_with_error_handling_step1.py -n1 5 -n2 1 -o result.txt\n$ cat result.txt\nThe result is 5.0\n$ python task_with_error_handling_step1.py -n1 5 -n2 0 -o result.txt\nTraceback (most recent call last):\n File \"task_with_error_handling_step1.py\", line 20, in <module>\n main(args.n1, args.n2, args.output)\n File \"task_with_error_handling_step1.py\", line 6, in main\n result = number / other_number\nZeroDivisionError: division by zero\n$ cat result.txt\n```", "```py\nimport logging\nimport sys\nimport logging\n\nLOG_FORMAT = '%(asctime)s %(name)s %(levelname)s %(message)s'\nLOG_LEVEL = logging.DEBUG\n\ndef main(number, other_number, output):\n    logging.info(f'Dividing {number} between {other_number}')\n    result = number / other_number\n    print(f'The result is {result}', file=output)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-n1', type=int, help='A number', default=1)\n    parser.add_argument('-n2', type=int, help='Another number', default=1)\n\n    parser.add_argument('-o', dest='output', type=argparse.FileType('w'),\n                        help='output file', default=sys.stdout)\n    parser.add_argument('-l', dest='log', type=str, help='log file',\n                        default=None)\n\n    args = parser.parse_args()\n    if args.log:\n        logging.basicConfig(format=LOG_FORMAT, filename=args.log,\n                            level=LOG_LEVEL)\n    else:\n        logging.basicConfig(format=LOG_FORMAT, level=LOG_LEVEL)\n\n    try:\n        main(args.n1, args.n2, args.output)\n    except Exception as exc:\n        logging.exception(\"Error running task\")\n        exit(1)\n```", "```py\n$ python3 task_with_error_handling_step4.py -n1 5 -n2 0\n2018-05-19 14:25:28,849 root INFO Dividing 5 between 0\n2018-05-19 14:25:28,849 root ERROR division by zero\nTraceback (most recent call last):\n File \"task_with_error_handling_step4.py\", line 31, in <module>\n main(args.n1, args.n2, args.output)\n File \"task_with_error_handling_step4.py\", line 10, in main\n result = number / other_number\nZeroDivisionError: division by zero\n$ python3 task_with_error_handling_step4.py -n1 5 -n2 0 -l error.log\n$ python3 task_with_error_handling_step4.py -n1 5 -n2 0 -l error.log\n$ cat error.log\n2018-05-19 14:26:15,376 root INFO Dividing 5 between 0\n2018-05-19 14:26:15,376 root ERROR division by zero\nTraceback (most recent call last):\n File \"task_with_error_handling_step4.py\", line 33, in <module>\n main(args.n1, args.n2, args.output)\n File \"task_with_error_handling_step4.py\", line 11, in main\n result = number / other_number\nZeroDivisionError: division by zero\n2018-05-19 14:26:19,960 root INFO Dividing 5 between 0\n2018-05-19 14:26:19,961 root ERROR division by zero\nTraceback (most recent call last):\n File \"task_with_error_handling_step4.py\", line 33, in <module>\n main(args.n1, args.n2, args.output)\n File \"task_with_error_handling_step4.py\", line 11, in main\n result = number / other_number\nZeroDivisionError: division by zero\n```", "```py\n    try:\n        main(...)\n    except Exception as exc:\n        # Something went wrong\n        logging.exception(\"Error running task\")\n        exit(1)\n```", "```py\n>>> import logging\n>>> logging.basicConfig(level=logging.INFO)\n>>> logging.warning('a warning message')\nWARNING:root:a warning message\n>>> logging.info('an info message')\nINFO:root:an info message\n>>> logging.debug('a debug message')\n>>>\n```", "```py\ntry:\n    main(args.n1, args.n2, args.output)\nexcept Exception as exc:\n    logging.exception(exc)\n    print('There has been an error. Check the logs', file=args.output)\n```", "```py\nimport argparse\nimport configparser\n\nimport smtplib \nfrom email.message import EmailMessage\n\ndef main(to_email, server, port, from_email, password):\n    print(f'With love, from {from_email} to {to_email}')\n\n    # Create the message\n    subject = 'With love, from ME to YOU'\n    text = '''This is an example test'''\n    msg = EmailMessage()\n    msg.set_content(text)\n    msg['Subject'] = subject\n    msg['From'] = from_email\n    msg['To'] = to_email\n\n    # Open communication and send\n    server = smtplib.SMTP_SSL(server, port)\n    server.login(from_email, password)\n    server.send_message(msg)\n    server.quit()\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('email', type=str, help='destination email')\n    parser.add_argument('-c', dest='config', type=argparse.FileType('r'),\n                        help='config file', default=None)\n\n    args = parser.parse_args()\n    if not args.config:\n        print('Error, a config file is required')\n        parser.print_help()\n        exit(1)\n\n    config = configparser.ConfigParser()\n    config.read_file(args.config)\n\n    main(args.email,\n         server=config['DEFAULT']['server'],\n         port=config['DEFAULT']['port'],\n         from_email=config['DEFAULT']['email'],\n         password=config['DEFAULT']['password'])\n```", "```py\n[DEFAULT]\nemail = EMAIL@gmail.com\nserver = smtp.gmail.com\nport = 465\npassword = PASSWORD\n```", "```py\n$ chmod 600 email_config.ini\n```", "```py\n$ python3 email_task.py -c email_config.ini destination_email@server.com\n```", "```py\nmessage['To'] = ','.join(recipients)\n```", "```py\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.image import MIMEImage message = MIMEMultipart()\npart1 = MIMEText('some text', 'plain')\nmessage.attach(part1)\nwith open('path/image', 'rb') as image:\n part2 = MIMEImage(image.read()) message.attach(part2)\n```"]