["```py\n          python3.8 -m pip install numpy matplotlib shapely scikit-image\n\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom matplotlib.collections import PatchCollection\n```", "```py\ndata = np.loadtxt(\"swisscheese-grid-10411.csv\")\n```", "```py\nfig, ax = plt.subplots()\nouter = Circle((0.0, 0.0), 1.0, zorder=0, fc=\"k\")\nax.add_patch(outer)\n```", "```py\ncol = PatchCollection(\n    (Circle((x, y), r) for x, y, r in data),\n    facecolor=\"white\", zorder=1, linewidth=0.2, \n    ls=\"-\", ec=\"k\"\n)\nax.add_collection(col)\n```", "```py\nax.set_xlim((-1.1, 1.1))\nax.set_ylim((-1.1, 1.1))\nax.set_axis_off()\n```", "```py\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n```", "```py\nfrom shapely.geometry import Polygon, Point\n```", "```py\npolygon = Polygon(\n    [(0, 2), (-1, 1), (-0.5, -1), (0.5, -1), (1, 1)],\n)\n```", "```py\nfig, ax = plt.subplots()\npoly_patch = mpl.patches.Polygon(polygon.exterior, ec=\"k\", \n   lw=\"1\", alpha=0.5)\nax.add_patch(poly_patch)\nax.set(xlim=(-1.05, 1.05), ylim=(-1.05, 2.05))\nax.set_axis_off()\n```", "```py\np1 = Point(0.0, 0.0)\np2 = Point(-1.0, -0.75)\n```", "```py\nax.plot(0.0, 0.0, \"k*\")\nax.annotate(\"p1\", (0.0, 0.0), (0.05, 0.0))\nax.plot(-0.8, -0.75, \"k*\")\nax.annotate(\"p2\", (-0.8, -0.75), (-0.8 + 0.05, -0.75))\n\n```", "```py\nprint(\"p1 inside polygon?\", polygon.contains(p1))\nprint(\"p2 inside polygon?\", polygon.contains(p2))\n```", "```py\nimport matplotlib.pyplot as plt\nfrom skimage.io import imread\nfrom skimage.feature import canny\n```", "```py\nimage = imread(\"mandelbrot.png\", as_gray=True)\n```", "```py\nedges = canny(image, sigma=0.5)\n```", "```py\nfig, ax = plt.subplots()\nax.imshow(edges, cmap=\"gray_r\")\nax.set_axis_off()\n```", "```py\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\n```", "```py\nfrom shapely.geometry import Polygon\nfrom shapely.ops import triangulate\n```", "```py\npolygon = Polygon(\n    [(2.0, 1.0), (2.0, 1.5), (-4.0, 1.5), (-4.0, 0.5), \n       (-3.0, -1.5), (0.0, -1.5), (1.0, -2.0), (1.0, -0.5), \n         (0.0, -1.0), (-0.5, -1.0), (-0.5, 1.0)],\n\n    holes=[np.array([[-1.5, -0.5], [-1.5, 0.5], [-2.5, 0.5], \n       [-2.5, -0.5]])]\n)\n```", "```py\nfig, ax = plt.subplots()\nplt_poly = mpl.patches.Polygon(polygon.exterior, \n   ec=\"k\", lw=\"1\", alpha=0.5, zorder=0)\nax.add_patch(plt_poly)\nplt_hole = mpl.patches.Polygon(polygon.interiors[0], \n   ec=\"k\", fc=\"w\")\nax.add_patch(plt_hole)\nax.set(xlim=(-4.05, 2.05), ylim=(-2.05, 1.55))\nax.set_axis_off()\n```", "```py\ntriangles = triangulate(polygon)\n```", "```py\nfiltered = filter(lambda p: polygon.contains(p), triangles) \n```", "```py\npatches = map(lambda p: mpl.patches.Polygon(p.exterior), filtered)\ncol = mpl.collections.PatchCollection(patches, fc=\"none\", ec=\"k\")\n```", "```py\nax.add_collection(col)\n```", "```py\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\nfrom shapely.geometry import MultiPoint\n```", "```py\nraw_points = rng.uniform(-1.0, 1.0, size=(50, 2))\n```", "```py\nfig, ax = plt.subplots()\nax.plot(raw_points[:, 0], raw_points[:, 1], \"k.\")\nax.set_axis_off()\n```", "```py\npoints = MultiPoint(raw_points)\n```", "```py\nconvex_hull = points.convex_hull\n```", "```py\npatch = mpl.patches.Polygon(convex_hull.exterior, alpha=0.5,\n   ec=\"k\", lw=1.2)\n```", "```py\nax.add_patch(patch)\n```", "```py\nfrom math import comb as binom\nimport matplotlib.pyplot as plt\nimport numpy as np\n```", "```py\nclass Bezier:\n    def __init__(self, *points):\n        self.points = points\n        self.nodes = n = len(points) - 1\n        self.degree = l = points[0].size\n```", "```py\n        self.coeffs = [binom(n, i)*p.reshape((l, 1)) for i, \n           p in enumerate(points)]\n```", "```py\n    def __call__(self, t):\n        n = self.nodes\n```", "```py\n        t = t.reshape((1, t.size))\n```", "```py\n        vals = [c @ (t**i)*(1-t)**(n-i) for i, \n           c in enumerate(self.coeffs)]\n```", "```py\n       return np.sum(vals, axis=0)\n```", "```py\np1 = np.array([0.0, 0.0])\np2 = np.array([0.0, 1.0])\np3 = np.array([1.0, 1.0])\np4 = np.array([1.0, 3.0])\n```", "```py\nfig, ax = plt.subplots()\nax.plot([0.0, 0.0, 1.0, 1.0], [0.0, 1.0, 1.0, 3.0], \"*--k\")\nax.set(xlabel=\"x\", ylabel=\"y\", title=\"Bezier curve with \n    4 nodes, degree 3\")\n```", "```py\nb_curve = Bezier(p1, p2, p3, p4)\n```", "```py\nt = np.linspace(0, 1)\nv = b_curve(t)\n```", "```py\nax.plot(v[0,:], v[1, :])\n```", "```py\nbinom(n, i)*p.reshape((l, 1))\n```", "```py\nc @ (t**i)*(1-t)**(n-i)\n```"]