["```py\nvar1 = 1 \nvar2 = 2 \nvar1,var2 = var2,var1\n>>> print (var1,var2)\n>>> 2 1\n```", "```py\n#Pass 1 of Bubble Sort\nlastElementIndex = len(list)-1 \nprint(0,list) \nfor idx in range(lastElementIndex):                 \n                    if list[idx]>list[idx+1]:                                                                             list[idx],list[idx+1]=list[idx+1],list[idx]                                         \nprint(idx+1,list)\n```", "```py\ndef InsertionSort(list):        \n    for i in range(1, len(list)):             \n        j = i-1             \n        element_next = list[i]             \n\n        while (list[j] > element_next) and (j >= 0):                 \n            list[j+1] = list[j]                 \n            j=j-1                 \n        list[j+1] = element_next\n    return list\n```", "```py\nmergeSort(list, start, end) \n    if(start < end) \n        midPoint = (end - start) / 2 + start           \n        mergeSort(list, start, midPoint)             \n        mergeSort(list, midPoint + 1, start)         \n        merge(list, start, midPoint, end) \n```", "```py\ndef ShellSort(list):     \n    distance = len(list) // 2     \n    while distance > 0:         \n        for i in range(distance, len(list)):             \n            temp = input_list[i]             \n            j = i \n# Sort the sub list for this distance \n           while j >= distance and list[j - distance] > temp: \n              list[j] = list[j - distance] \n              j = j-distance            \n          list[j] = temp \n# Reduce the distance for the next element         \n        distance = distance//2\n    return list\n```", "```py\ndef SelectionSort(list):     \n    for fill_slot in range(len(list) - 1, 0, -1):         \n        max_index = 0         \n        for location in range(1, fill_slot + 1):             \n            if list[location] > list[max_index]:                 \n                max_index = location         \n        list[fill_slot],list[max_index] = list[max_index],list[fill_slot]\n```", "```py\ndef LinearSearch(list, item):     \n    index = 0     \n    found = False \n# Match the value with each data element     \n    while index < len(list) and found is False:         \n        if list[index] == item:             \n            found = True         \n    else:             \n        index = index + 1     \n  return found\n```", "```py\ndef BinarySearch(list, item): \n   first = 0 \n   last = len(list)-1 \n   found = False \n\nwhile first<=last and not found:         \n    midpoint = (first + last)//2         \n    if list[midpoint] == item:             \n        found = True         \n    else:             \n        if item < list[midpoint]:                 \n            last = midpoint-1             \n        else:                 \n            first = midpoint+1     \nreturn found\n```", "```py\n\ndef IntPolsearch(list,x ):     \n    idx0 = 0     \n    idxn = (len(list) - 1)     \n    found = False     \n    while idx0 <= idxn and x >= list[idx0] and x <= list[idxn]: \n    # Find the mid point         \n         mid = idx0 +int(((float(idxn - idx0)/( list[idxn] - list[idx0])) * ( x - list[idx0]))) \n # Compare the value at mid point with search value \n         if list[mid] == x: \n            found = True             \n            return found         \n    if list[mid] < x:             \n            idx0 = mid + 1     \nreturn found\n```"]