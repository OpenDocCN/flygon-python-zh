["```py\n$ echo \"mistune==0.8.3\" >> requirements.txt\n$ echo \"jinja2==2.20\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import mistune\n>>> import jinja2\n```", "```py\n>>> with open('email_template.md') as md_file:\n...     markdown = md_file.read()\n\n>>> with open('email_styling.html') as styling_file:\n...     styling = styling_file.read()\n```", "```py\n>>> data = {'name': 'Seamus'}\n```", "```py\n>>> text = markdown.format(**data)\n```", "```py\n>>> html_content = mistune.markdown(text)\n>>> html = jinja2.Template(styling).render(content=html_content)\n```", "```py\n>>> with open('text_version.txt', 'w') as fp:\n...     fp.write(text)\n>>> with open('html_version.html', 'w') as fp:\n...     fp.write(html)\n```", "```py\n$ cat text_version.txt\nHi Seamus:\n\nThis is an email talking about **things**\n\n### Very important info\n\n1\\. One thing\n2\\. Other thing\n3\\. Some extra detail\n\nBest regards,\n\n  *The email team*\n```", "```py\n>>> import base64\n>>> with open(\"image.png\",'rb') as file:\n... encoded_data = base64.b64encode(file) >>> print \"<img src='data:image/png;base64,{data}'/>\".format(data=encoded_data)\n```", "```py\n>>> import smtplib\n>>> from email.mime.multipart import MIMEMultipart\n>>> from email.mime.text import MIMEText\n```", "```py\n>>> USER = 'your.account@gmail.com'\n>>> PASSWORD = 'YourPassword'\n>>> sent_from = USER\n>>> send_to = [USER]\n```", "```py\n>>> text = \"Hi!\\nThis is the text version linking to https://www.packtpub.com/\\nCheers!\"\n>>> html = \"\"\"<html><head></head><body>\n... <p>Hi!<br>\n... This is the HTML version linking to <a href=\"https://www.packtpub.com/\">Packt</a><br>\n... </p>\n... </body></html>\n\"\"\"\n```", "```py\n>>> msg = MIMEMultipart('alternative')\n>>> msg['Subject'] = 'An interesting email'\n>>> msg['From'] = sent_from\n>>> msg['To'] = ', '.join(send_to)\n```", "```py\n>>> part_plain = MIMEText(text, 'plain')\n>>> part_html = MIMEText(html, 'html')\n>>> msg.attach(part_plain)\n>>> msg.attach(part_html)\n```", "```py\n>>> with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:\n...     server.login(USER, PASSWORD)\n...     server.sendmail(sent_from, send_to, msg.as_string())\n```", "```py\n with smtplib.SMTP('smtp.gmail.com', 587) as server:\n    server.starttls()\n    server.login(USER, PASSWORD)\n    server.sendmail(sent_from, send_to, msg.as_string())\n```", "```py\n>>> import imaplib\n>>> import email\n>>> from email.parser import BytesParser, Parser\n>>> from email.policy import default\n```", "```py\n>>> USER = 'your.account@gmail.com'\n>>> PASSWORD = 'YourPassword'\n```", "```py\n>>> mail = imaplib.IMAP4_SSL('imap.gmail.com')\n>>> mail.login(USER, PASSWORD)\n```", "```py\n>>> mail.select('inbox')\n```", "```py\n>>> result, data = mail.uid('search', None, 'ALL')\n>>> latest_email_uid = data[0].split()[-1]\n>>> result, data = mail.uid('fetch', latest_email_uid, '(RFC822)')\n>>> raw_email = data[0][1]\n```", "```py\n>>> email_message = BytesParser(policy=default).parsebytes(raw_email)\n```", "```py\n>>> email_message['subject']\n'[Ref ABCDEF] Subject: Product A'\n>>> email.utils.parseaddr(email_message['From'])\n('Sender name', 'sender@gmail.com')\n```", "```py\n>>> email_type = email_message.get_content_maintype()\n>>> if email_type == 'multipart':\n...     for part in email_message.get_payload():\n...         if part.get_content_type() == 'text/plain':\n...             payload = part.get_payload()\n... elif email_type == 'text':\n...     payload = email_message.get_payload()\n>>> print(payload)\nHi:\n\n  I'm having difficulties getting into my account. What was the URL, again?\n\n  Thanks!\n    A confuser customer\n```", "```py\nimport datetime\nsince = (datetime.date.today() - datetime.timedelta(days=1)).strftime(\"%d-%b-%Y\")\nresult, data = mail.uid('search', None, f'(SENTSINCE {since})')\n```", "```py\n>>> import re\n>>> re.search(r'\\[Ref (\\w+)] Subject: (\\w+)', '[Ref ABCDEF] Subject: Product A').groups()\n('ABCDEF', 'Product') \n```", "```py\n$ echo \"requests==2.18.3\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import requests\n```", "```py\n>>> API = 'your secret key'\n>>> BASE = 'https://<dc>.api.mailchimp.com/3.0'\n>>> auth = ('user', API)\n```", "```py\n>>> url = f'{BASE}/lists'\n>>> response = requests.get(url, auth=auth)\n>>> result = response.json()\n```", "```py\n>>> LIST_NAME = 'Your list name'\n>>> this_list = [l for l in result['lists'] if l['name'] == LIST_NAME][0]\n>>> list_url = [l['href'] for l in this_list['_links'] if l['rel'] == 'self'][0]\n```", "```py\n>>> response = requests.get(list_url, auth=auth)\n>>> result = response.json()\n>>> result['stats']\n{'member_count': 1, 'unsubscribe_count': 0, 'cleaned_count': 0, ...}\n>>> members_url = [l['href'] for l in result['_links'] if l['rel'] == 'members'][0]\n```", "```py\n>>> response = requests.get(members_url, json=new_member, auth=auth)\n>>> result = response.json()\n>>> len(result['members'])\n1\n```", "```py\n>>> new_member = {\n    'email_address': 'test@test.com',\n    'status': 'subscribed',\n}\n>>> response = requests.post(members_url, json=new_member, auth=auth)\n```", "```py\n>>> response = requests.post(members_url, json=new_member, auth=auth)\n>>> result = response.json()\n>>> len(result['members'])\n2\n```", "```py\n$ echo \"requests==2.18.3\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import requests\n```", "```py\n>>> KEY = 'YOUR-SECRET-KEY'\n>>> DOMAIN = 'YOUR-DOMAIN.mailgun.org'\n>>> TO = 'YOUR-AUTHORISED-RECEIVER'\n```", "```py\n\n>>> FROM = f'sender@{DOMAIN}'\n>>> auth = ('api', KEY)\n```", "```py\n>>> text = \"Hi!\\nThis is the text version linking to https://www.packtpub.com/\\nCheers!\"\n>>> html = '''<html><head></head><body>\n...     <p>Hi!<br>\n...        This is the HTML version linking to <a href=\"https://www.packtpub.com/\">Packt</a><br>\n...     </p>  \n...   </body></html>'''\n```", "```py\n>>> data = {\n...     'from': f'Sender <{FROM}>',\n...     'to': f'Jaime Buelta <{TO}>',\n...     'subject': 'An interesting email!',\n...     'text': text,\n...     'html': html,\n... }\n```", "```py\n>>> response = requests.post(f\"https://api.mailgun.net/v3/{DOMAIN}/messages\", auth=auth, data=data)\n>>> response.json()\n{'id': '<YOUR-ID.mailgun.org>', 'message': 'Queued. Thank you.'}\n```", "```py\n>>> response_events = requests.get(f'https://api.mailgun.net/v3/{DOMAIN}/events', auth=auth)\n>>> response_events.json()['items'][0]['recipient'] == TO\nTrue\n>>> response_events.json()['items'][0]['event']\n'delivered'\n```", "```py\nattachments = [(\"attachment\", (\"attachment1.jpg\", open(\"image.jpg\",\"rb\").read())),\n               (\"attachment\", (\"attachment2.txt\", open(\"text.txt\",\"rb\").read()))]\nresponse = requests.post(f\"https://api.mailgun.net/v3/{DOMAIN}/messages\",\n                         auth=auth, files=attachments, data=data)\n```", "```py\nimport datetime\nimport email.utils\ndelivery_time = datetime.datetime.now() + datetime.timedelta(days=1)\ndata = {\n    ...\n    'o:deliverytime': email.utils.format_datetime(delivery_time),\n}\n```", "```py\n$ echo \"twilio==6.16.1\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> from twilio.rest import Client\n```", "```py\n>>> ACCOUNT_SID = 'Your account SID'\n>>> AUTH_TOKEN = 'Your secret token'\n>>> FROM = '+353 12 345 6789'\n```", "```py\n>>> client = Client(ACCOUNT_SID, AUTH_TOKEN)\n```", "```py\n>>> message = client.messages.create(body='This is a test message from Python!', \n                                     from_=FROM, \n                                     to='+your authorised number')\n```", "```py\nclient.messages.create(body='An MMS message',\n                       media_url='http://my.image.com/image.png', \n                       from_=FROM, \n                       to='+your authorised number')\n```", "```py\navailable_numbers = client.available_phone_numbers(\"IE\").local.list()\nnumber = available_numbers[0]\nnew_number = client.incoming_phone_numbers.create(phone_number=number.phone_number)\n```", "```py\n$ heroku login\nEnter your Heroku credentials.\nEmail: your.user@server.com\nPassword:\n```", "```py\n$ echo \"twilio\" >> requirements.txt\n```", "```py\n$ git add .\n$ git commit -m 'first commit'\n```", "```py\n$ heroku create\nCreating app... done, \u2b22 SERVICE-NAME-12345\nhttps://service-name-12345.herokuapp.com/ | https://git.heroku.com/service-name-12345.git\n```", "```py\n$ git push heroku master\n...\nremote: Verifying deploy... done.\nTo https://git.heroku.com/service-name-12345.git\n b6cd95a..367a994 master -> master\n```", "```py\n$ curl https://service-name-12345.herokuapp.com/\nAll working!\n```", "```py\n...\n@app.route('/')\ndef homepage():\n    return 'All working!'\n\n@app.route(\"/sms\", methods=['GET', 'POST'])\ndef sms_reply():\n    from_number = request.form['From']\n    body = request.form['Body']\n    resp = MessagingResponse()\n    msg = (f'Awwwww! Thanks so much for your message {from_number}, '\n           f'\"{body}\" to you too.')\n\n    resp.message(msg)\n    return str(resp)\n...\n```", "```py\napp = Flask(__name__)\napp.secret_key = b'somethingreallysecret!!!!'\n... \n@app.route(\"/sms\", methods=['GET', 'POST'])\ndef sms_reply():\n    from_number = request.form['From']\n    last_message = session.get('MESSAGE', None)\n    body = request.form['Body']\n    resp = MessagingResponse()\n    msg = (f'Awwwww! Thanks so much for your message {from_number}, '\n           f'\"{body}\" to you too. ')\n    if last_message:\n        msg += f'Not so long ago you said \"{last_message}\" to me..'\n    session['MESSAGE'] = body\n    resp.message(msg)\n    return str(resp)\n```", "```py\n$ echo \"telepot==12.7\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\nTOKEN = '<YOUR TOKEN>'\n```", "```py\n$ python telegram_bot.py\n```", "```py\nIMPORTS\n\nTOKEN\n\n# Define the information to return per command\ndef get_help():\ndef get_offers():\ndef get_events():\nCOMMANDS = {\n    'help': get_help,\n    'offers': get_offers,\n    'events': get_events,\n}\n\nclass MarketingBot(telepot.helper.ChatHandler):\n...\n\n# Create and start the bot\n\n```", "```py\ndef on_chat_message(self, msg):\n    # If the data sent is not test, return an error\n    content_type, chat_type, chat_id = telepot.glance(msg)\n    if content_type != 'text':\n        self.sender.sendMessage(\"I don't understand you. \"\n                                \"Please type 'help' for options\")\n        return\n\n    # Make the commands case insensitive\n    command = msg['text'].lower()\n```", "```py\n\n    if command not in COMMANDS:\n        self.sender.sendMessage(\"I don't understand you. \"\n                                \"Please type 'help' for options\")\n        return\n\n    message = COMMANDS[command]()\n    self.sender.sendMessage(message)\n```", "```py\nfrom telepot.namedtuple import ReplyKeyboardMarkup, KeyboardButton\nkeys = [[KeyboardButton(text=text)] for text in COMMANDS]\nKEYBOARD = ReplyKeyboardMarkup(keyboard=keys)\n```", "```py\n message = COMMANDS[command]()\n self.sender.sendMessage(message, reply_markup=KEYBOARD)\n```"]