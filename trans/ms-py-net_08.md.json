["```py\n$ sudo apt-get -y install graphviz\n```", "```py\n$ dot -V\ndot - graphviz version 2.38.0 (20140413.2041)~\n```", "```py\n$ sudo pip install graphviz #Python 2\n$ sudo pip3 install graphviz\n\n$ python3\nPython 3.5.2 (default, Nov 23 2017, 16:37:01)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import graphviz\n>>> graphviz.__version__\n'0.8.4'\n>>> exit() \n```", "```py\n$ cat chapter8_gv_1.gv\ngraph my_network {\n core -- distribution;\n distribution -- access1;\n distribution -- access2;\n}\n```", "```py\n$ dot -Tpng chapter8_gv_1.gv -o output/chapter8_gv_1.png\n```", "```py\n$ cat chapter8_gv_2.gv\ndigraph my_network {\n node [shape=box];\n size = \"50 30\";\n core -> distribution [label=\"2x10G\"];\n distribution -> access1 [label=\"1G\"];\n distribution -> access2 [label=\"1G\"];\n}\n```", "```py\n$ dot -Tpdf chapter8_gv_2.gv -o output/chapter8_gv_2.pdf\n```", "```py\n$ python3\nPython 3.5.2 (default, Nov 17 2016, 17:05:23)\n>>> from graphviz import Digraph\n>>> my_graph = Digraph(comment=\"My Network\")\n>>> my_graph.node(\"core\")\n>>> my_graph.node(\"distribution\")\n>>> my_graph.node(\"access1\")\n>>> my_graph.node(\"access2\")\n>>> my_graph.edge(\"core\", \"distribution\")\n>>> my_graph.edge(\"distribution\", \"access1\")\n>>> my_graph.edge(\"distribution\", \"access2\")\n```", "```py\n>>> print(my_graph.source)\n// My Network\ndigraph {\n core\n distribution\n access1\n access2\n core -> distribution\n distribution -> access1\n distribution -> access2\n} \n```", "```py\n>>> my_graph.render(\"output/chapter8_gv_3.gv\")\n'output/chapter8_gv_3.gv.pdf'\n```", "```py\n$ cat hosts\n[devices]\nr1 ansible_hostname=172.16.1.218\nr2 ansible_hostname=172.16.1.219\nr3 ansible_hostname=172.16.1.220\nr5-tor ansible_hostname=172.16.1.221\nr6-edge ansible_hostname=172.16.1.222\n```", "```py\n<skip>\n vars:\n   cli:\n     host: \"{{ ansible_hostname }}\"\n     username: cisco\n     password: cisco\n     transport: cli tasks:\n  - name: enable LLDP run\n       ios_config:\n         lines: lldp run\n         provider: \"{{ cli }}\"\n<skip>\n```", "```py\n$ ansible-playbook -i hosts cisco_config_lldp.yml\n\nPLAY [Enable LLDP] ***********************************************************\n...\nPLAY RECAP *********************************************************************\nr1 : ok=2 changed=1 unreachable=0 failed=0\nr2 : ok=2 changed=1 unreachable=0 failed=0\nr3 : ok=2 changed=1 unreachable=0 failed=0\nr5-tor : ok=2 changed=1 unreachable=0 failed=0\nr6-edge : ok=2 changed=1 unreachable=0 failed=0\n\n## SSH to R1 for verification\nr1#show lldp neighbors\n\nCapability codes: (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other\n\nDevice ID Local Intf Hold-time Capability Port ID\nr2.virl.info Gi0/0 120 R Gi0/0\nr3.virl.info Gi0/0 120 R Gi0/0\nr5-tor.virl.info Gi0/0 120 R Gi0/0\nr5-tor.virl.info Gi0/1 120 R Gi0/1\nr6-edge.virl.info Gi0/2 120 R Gi0/1\nr6-edge.virl.info Gi0/0 120 R Gi0/0\n\nTotal entries displayed: 6\n```", "```py\n<skip>\n tasks:\n   - name: Query for LLDP Neighbors\n     ios_command:\n       commands: show lldp neighbors\n       provider: \"{{ cli }}\"\n<skip>\n```", "```py\n$ ls -l tmp/\ntotal 20\n-rw-rw-r-- 1 echou echou 630 Mar 13 17:12 r1_lldp_output.txt\n-rw-rw-r-- 1 echou echou 630 Mar 13 17:12 r2_lldp_output.txt\n-rw-rw-r-- 1 echou echou 701 Mar 12 12:28 r3_lldp_output.txt\n-rw-rw-r-- 1 echou echou 772 Mar 12 12:28 r5-tor_lldp_output.txt\n-rw-rw-r-- 1 echou echou 630 Mar 13 17:12 r6-edge_lldp_output.txt\n```", "```py\n$ cat tmp/r1_lldp_output.txt\n\n[[\"Capability codes:\", \" (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device\", \" (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other\", \"\", \"Device ID Local Intf Hold-time Capability Port ID\", \"r2.virl.info Gi0/0 120 R Gi0/0\", \"r3.virl.info Gi0/0 120 R Gi0/0\", \"r5-tor.virl.info Gi0/0 120 R Gi0/0\", \"r5-tor.virl.info Gi0/1 120 R Gi0/1\", \"r6-edge.virl.info Gi0/0 120 R Gi0/0\", \"\", \"Total entries displayed: 5\", \"\"]]\n```", "```py\nimport glob, re\nfrom graphviz import Digraph, Source\npattern = re.compile('Gi0/[1234]')\ndevice_lldp_neighbors = []\n```", "```py\ndevice: r1\n neighbors: r5-tor\n neighbors: r6-edge\ndevice: r5-tor\n neighbors: r2\n neighbors: r3\n neighbors: r1\ndevice: r2\n neighbors: r5-tor\n neighbors: r6-edge\ndevice: r3\n neighbors: r5-tor\n neighbors: r6-edge\ndevice: r6-edge\n neighbors: r2\n neighbors: r3\n neighbors: r1\n```", "```py\nEdges: [('r1', 'r5-tor'), ('r1', 'r6-edge'), ('r5-tor', 'r2'), ('r5-tor', 'r3'), ('r5-tor', 'r1'), ('r2', 'r5-tor'), ('r2', 'r6-edge'), ('r3', 'r5-tor'), ('r3', 'r6-edge'), ('r6-edge', 'r2'), ('r6-edge', 'r3'), ('r6-edge', 'r1')]\n```", "```py\nmy_graph = Digraph(\"My_Network\")\n<skip>\n# construct the edge relationships\nfor neighbors in device_lldp_neighbors:\n    node1, node2 = neighbors\n    my_graph.edge(node1, node2)\n```", "```py\ndigraph My_Network {\n   r1 -> \"r5-tor\"\n   r1 -> \"r6-edge\"\n   \"r5-tor\" -> r2\n   \"r5-tor\" -> r3\n   \"r5-tor\" -> r1\n   r2 -> \"r5-tor\"\n   r2 -> \"r6-edge\"\n   r3 -> \"r5-tor\"\n   r3 -> \"r6-edge\"\n   \"r6-edge\" -> r2\n   \"r6-edge\" -> r3\n   \"r6-edge\" -> r1\n}\n```", "```py\nsource = my_graph.source\noriginal_text = \"digraph My_Network {\"\nnew_text = 'digraph My_Network {n{rank=same Client \"r6-edge\"}n{rank=same r1 r2 r3}n'\nnew_source = source.replace(original_text, new_text)\nnew_graph = Source(new_source)new_graph.render(\"output/chapter8_lldp_graph.gv\")\n```", "```py\ndigraph My_Network {\n{rank=same Client \"r6-edge\"}\n{rank=same r1 r2 r3}\n                Client -> \"r6-edge\"\n                \"r5-tor\" -> Server\n                r1 -> \"r5-tor\"\n                r1 -> \"r6-edge\"\n                \"r5-tor\" -> r2\n                \"r5-tor\" -> r3\n                \"r5-tor\" -> r1\n                r2 -> \"r5-tor\"\n                r2 -> \"r6-edge\"\n                r3 -> \"r5-tor\"\n                r3 -> \"r6-edge\"\n               \"r6-edge\" -> r2\n               \"r6-edge\" -> r3\n               \"r6-edge\" -> r1\n}\n```", "```py\n  tasks:\n    - name: Query for LLDP Neighbors\n      ios_command:\n        commands: show lldp neighbors\n        provider: \"{{ cli }}\"\n\n      register: output\n\n    - name: show output\n      debug:\n        var: output\n\n    - name: copy output to file\n      copy: content=\"{{ output.stdout_lines }}\" dest=\"./tmp/{{ inventory_hostname }}_lldp_output.txt\"\n\n    - name: Execute Python script to render output\n      command: ./cisco_graph_lldp.py\n```", "```py\nr6-edge#sh lldp neighbors\n...\nDevice ID Local Intf Hold-time Capability Port ID\nr2.virl.info Gi0/0 120 R Gi0/0\nr3.virl.info Gi0/3 120 R Gi0/2\nr3.virl.info Gi0/0 120 R Gi0/0\nr5-tor.virl.info Gi0/0 120 R Gi0/0\nr1.virl.info Gi0/0 120 R Gi0/0\n\nTotal entries displayed: 5\n```", "```py\ncisco@Server:~$ python3 -m http.server\nServing HTTP on 0.0.0.0 port 8000 ...\n```", "```py\nsudo apt-get install python-pip python3-pip\nsudo pip install requests\nsudo pip3 install requests\n\n$ cat http_get.py\nimport requests, time\nwhile True:\n r = requests.get('http://10.0.0.5:8000')\n print(r.text)\n time.sleep(5)\n```", "```py\ncisco@Client:~$ python3 http_get.py\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"><html>\n<title>Directory listing for /</title>\n<body>\n...\n</body>\n</html>\n```", "```py\ncisco@Server:~$ python3 -m http.server\nServing HTTP on 0.0.0.0 port 8000 ...\n10.0.0.9 - - [15/Mar/2017 08:28:29] \"GET / HTTP/1.1\" 200 -\n10.0.0.9 - - [15/Mar/2017 08:28:34] \"GET / HTTP/1.1\" 200 -\n```", "```py\n!\nip flow-export version 5\nip flow-export destination 172.16.1.173 9995 vrf Mgmt-intf\n!\ninterface GigabitEthernet0/4\n description to Client\n ip address 10.0.0.10 255.255.255.252\n ip flow ingress\n ip flow egress\n...\n!\n```", "```py\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.bind(('0.0.0.0', 9995))\n```", "```py\nwhile True:\n        buf, addr = sock.recvfrom(1500)\n```", "```py\n(version, count) = struct.unpack('!HH',buf[0:4])\n```", "```py\n (sys_uptime, unix_secs, unix_nsecs, flow_sequence) = struct.unpack('!IIII', buf[4:20])\n (engine_type, engine_id, sampling_interval) = struct.unpack('!BBH', buf[20:24])\n```", "```py\nfor i in range(0, count):\n    try:\n        base = SIZE_OF_HEADER+(i*SIZE_OF_RECORD)\n        data = struct.unpack('!IIIIHH',buf[base+16:base+36])\n        input_int, output_int = struct.unpack('!HH', buf[base+12:base+16])\n        nfdata[i] = {}\n        nfdata[i]['saddr'] = inet_ntoa(buf[base+0:base+4])\n        nfdata[i]['daddr'] = inet_ntoa(buf[base+4:base+8])\n        nfdata[i]['pcount'] = data[0]\n        nfdata[i]['bcount'] = data[1]\n...\n```", "```py\nHeaders:\nNetFlow Version: 5\nFlow Count: 9\nSystem Uptime: 290826756\nEpoch Time in seconds: 1489636168\nEpoch Time in nanoseconds: 401224368\nSequence counter of total flow: 77616\n0 192.168.0.1:26828 -> 192.168.0.5:179 1 packts 40 bytes\n1 10.0.0.9:52912 -> 10.0.0.5:8000 6 packts 487 bytes\n2 10.0.0.9:52912 -> 10.0.0.5:8000 6 packts 487 bytes\n3 10.0.0.5:8000 -> 10.0.0.9:52912 5 packts 973 bytes\n4 10.0.0.5:8000 -> 10.0.0.9:52912 5 packts 973 bytes\n5 10.0.0.9:52913 -> 10.0.0.5:8000 6 packts 487 bytes\n6 10.0.0.9:52913 -> 10.0.0.5:8000 6 packts 487 bytes\n7 10.0.0.5:8000 -> 10.0.0.9:52913 5 packts 973 bytes\n8 10.0.0.5:8000 -> 10.0.0.9:52913 5 packts 973 bytes\n```", "```py\n$ sudo apt-get install ntop\n```", "```py\n!\nip flow-export version 5\nip flow-export destination 172.16.1.173 5556 vrf Mgmt-intf\n!\n```", "```py\n!\ninterface GigabitEthernet0/0\n...\n ip flow ingress\n ip flow egress\n...\n```", "```py\n$ ansible-playbook -i hosts cisco_config_netflow.yml\n\nTASK [configure netflow export station] ****************************************\nchanged: [r1]\nchanged: [r3]\nchanged: [r2]\nchanged: [r5-tor]\nchanged: [r6-edge]\n\nTASK [configure flow export on Gi0/0] ******************************************\nchanged: [r2]\nchanged: [r1]\nchanged: [r6-edge]\nchanged: [r5-tor]\nchanged: [r3]\n...\nPLAY RECAP *********************************************************************\nr1 : ok=4 changed=4 unreachable=0 failed=0\nr2 : ok=4 changed=4 unreachable=0 failed=0\nr3 : ok=4 changed=4 unreachable=0 failed=0\nr5-tor : ok=6 changed=6 unreachable=0 failed=0\nr6-edge : ok=6 changed=6 unreachable=0 failed=0\n\n##Checking r2 for NetFlow configuration\nr2#sh run | i flow\n ip flow ingress\n ip flow egress\n ip flow ingress\n ip flow egress\n ip flow ingress\n ip flow egress\nip flow-export version 5\nip flow-export destination 172.16.1.173 5556 vrf Mgmt-intf \n```", "```py\n$ pwd\n/usr/share/ntop/python\n```", "```py\n# Import modules for CGI handling\nimport cgi, cgitb\nimport ntop\n\n# Parse URL\ncgitb.enable();\n```", "```py\nform = cgi.FieldStorage();\nname = form.getvalue('Name', default=\"Eric\")\n\nversion = ntop.version()\nos = ntop.os()\nuptime = ntop.uptime()\n\nntop.printHTMLHeader('Mastering Python Networking', 1, 0)\nntop.sendString(\"Hello, \"+ name +\"<br>\")\nntop.sendString(\"Ntop Information: %s %s %s\" % (version, os, uptime))\nntop.printHTMLFooter()\n```", "```py\nimport ntop, interface, json\n\nifnames = []\ntry:\n    for i in range(interface.numInterfaces()):\n        ifnames.append(interface.name(i))\n\nexcept Exception as inst:\n    print type(inst) # the exception instance\n    print inst.args # arguments stored in .args\n    print inst # __str__ allows args to printed directly\n...\n```", "```py\nNexus-2# sh run | i sflow\nfeature sflow\nsflow max-sampled-size 256\nsflow counter-poll-interval 10\nsflow collector-ip 192.168.199.185 vrf management\nsflow agent-ip 192.168.199.148\nsflow data-source interface Ethernet1/48\n```", "```py\n$ wget http://www.inmon.com/bin/sflowtool-3.22.tar.gz\n$ tar -xvzf sflowtool-3.22.tar.gz\n$ cd sflowtool-3.22/\n$ ./configure\n$ make\n$ sudo make install\n```", "```py\n$ sflowtool\nstartDatagram =================================\ndatagramSourceIP 192.168.199.148\ndatagramSize 88\nunixSecondsUTC 1489727283\ndatagramVersion 5\nagentSubId 100\nagent 192.168.199.148\npacketSequenceNo 5250248\nsysUpTime 4017060520\nsamplesInPacket 1\nstartSample ----------------------\nsampleType_tag 0:4\nsampleType COUNTERSSAMPLE\nsampleSequenceNo 2503508\nsourceId 2:1\ncounterBlock_tag 0:1001\n5s_cpu 0.00\n1m_cpu 21.00\n5m_cpu 20.80\ntotal_memory_bytes 3997478912\nfree_memory_bytes 1083838464\nendSample ----------------------\nendDatagram =================================\n```", "```py\nimport sys, re\nfor line in iter(sys.stdin.readline, ''):\n    if re.search('agent ', line):\n        print(line.strip())\n```", "```py\n$ sflowtool | python3 chapter8_sflowtool_1.py\nagent 192.168.199.148\nagent 192.168.199.148\n```", "```py\n$ sflowtool --help\n...\ntcpdump output:\n   -t - (output in binary tcpdump(1) format)\n   -r file - (read binary tcpdump(1) format)\n   -x - (remove all IPV4 content)\n   -z pad - (extend tcpdump pkthdr with this many zeros\n                          e.g. try -z 8 for tcpdump on Red Hat Linux 6.2)\n\nNetFlow output:\n -c hostname_or_IP - (netflow collector host)\n -d port - (netflow collector UDP port)\n -e - (netflow collector peer_as (default = origin_as))\n -s - (disable scaling of netflow output by sampling rate)\n -S - spoof source of netflow packets to input agent IP\n```", "```py\n$ sudo apt-get install default-jre\n$ java -version\nopenjdk version \"1.8.0_121\"\nOpenJDK Runtime Environment (build 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13)\nOpenJDK 64-Bit Server VM (build 25.121-b13, mixed mode)\n```", "```py\n$ wget http://www.inmon.com/products/sFlow-RT/sflow-rt.tar.gz\n$ tar -xvzf sflow-rt.tar.gz\n$ cd sflow-rt/\n$ ./start.sh\n2017-03-17T09:35:01-0700 INFO: Listening, sFlow port 6343\n2017-03-17T09:35:02-0700 INFO: Listening, HTTP port 8008\n```", "```py\n>>> import requests\n>>> r = requests.get(\"http://192.168.199.185:8008/version\")\n>>> r.text\n'2.0-r1180'\n>>> r = requests.get(\"http://192.168.199.185:8008/agents/json\")\n>>> r.text\n'{\"192.168.199.148\": {n \"sFlowDatagramsLost\": 0,n \"sFlowDatagramSource\": [\"192.168.199.148\"],n \"firstSeen\": 2195541,n \"sFlowFlowDuplicateSamples\": 0,n \"sFlowDatagramsReceived\": 441,n \"sFlowCounterDatasources\": 2,n \"sFlowFlowOutOfOrderSamples\": 0,n \"sFlowFlowSamples\": 0,n \"sFlowDatagramsOutOfOrder\": 0,n \"uptime\": 4060470520,n \"sFlowCounterDuplicateSamples\": 0,n \"lastSeen\": 3631,n \"sFlowDatagramsDuplicates\": 0,n \"sFlowFlowDrops\": 0,n \"sFlowFlowLostSamples\": 0,n \"sFlowCounterSamples\": 438,n \"sFlowCounterLostSamples\": 0,n \"sFlowFlowDatasources\": 0,n \"sFlowCounterOutOfOrderSamples\": 0n}}'\n```", "```py\ninput {\n  file {\n    type => \"network_log\"\n    path => \"path to your network log file\"\n }\n}\nfilter {\n  if [type] == \"network_log\" {\n  }\n}\noutput {\n  stdout { codec => rubydebug }\n  elasticsearch {\n  index => \"logstash_network_log-%{+YYYY.MM.dd}\"\n  hosts => [\"http://<instance>.<region>.es.amazonaws.com\"]\n  }\n}\n```", "```py\n#!/usr/env/bin python\n\n#https://www.spamhaus.org/drop/drop.txt\n\nimport logging, pprint, re\nimport requests, json, datetime\nfrom collections import OrderedDict\n\n#logging configuration\nlogging.basicConfig(filename='./tmp/spamhaus_drop_list.log', level=logging.INFO, format='%(asctime)s %(message)s', datefmt='%b %d %I:%M:%S')\n```", "```py\nhost = 'python_networking'\nprocess = 'spamhause_drop_list'\n\nr = requests.get('https://www.spamhaus.org/drop/drop.txt')\nresult = r.text.strip()\n\ntimeInUTC = datetime.datetime.utcnow().isoformat()\nItem = OrderedDict()\nItem[\"Time\"] = timeInUTC\n```", "```py\nfor line in result.split('n'):\n    if re.match('^;', line) or line == 'r': # comments\n        next\n    else:\n       ip, record_number = line.split(\";\")\n       logging.warning(host + ' ' + process + ': ' + 'src_ip=' + ip.split(\"/\")[0] + ' record_number=' + record_number.strip())\n```", "```py\n$ cat tmp/spamhaus_drop_list.log\n...\nJul 14 11:35:26 python_networking spamhause_drop_list: src_ip=212.92.127.0 record_number=SBL352250\nJul 14 11:35:26 python_networking spamhause_drop_list: src_ip=216.47.96.0 record_number=SBL125132\nJul 14 11:35:26 python_networking spamhause_drop_list: src_ip=223.0.0.0 record_number=SBL230805\nJul 14 11:35:26 python_networking spamhause_drop_list: src_ip=223.169.0.0 record_number=SBL208009\n...\n```", "```py\ninput {\n  file {\n    type => \"network_log\"\n    path => \"path to your network log file\"\n }\n  file {\n    type => \"spamhaus_drop_list\"\n    path => \"/home/echou/Master_Python_Networking/Chapter8/tmp/spamhaus_drop_list.log\"\n }\n}\n```", "```py\nfilter { \n  if [type] == \"spamhaus_drop_list\" {\n     grok {\n       match => [ \"message\", \"%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{NOTSPACE:process} src_ip=%{IP:src_ip} %{NOTSPACE:record_number}.*\"]\n       add_tag => [\"spamhaus_drop_list\"]\n     }\n  }\n}\n```"]