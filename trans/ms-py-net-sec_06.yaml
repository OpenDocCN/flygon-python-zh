- en: Gathering Information from Servers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从服务器中收集信息
- en: Throughout this chapter, we will look at the main modules that allow us to extract
    information that the servers expose in a public way. With the tools we have discussed,
    we can get information that may be useful for later phases of our pentesting or
    audit process. We will see tools such as Shodan and Banner Grabbing, getting information
    for DNS servers with the `DNSPython` module, and Fuzzing processing with the `pywebfuzz`
    module.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究主要模块，这些模块允许我们提取服务器以公开方式暴露的信息。通过我们讨论过的工具，我们可以获取可能对我们的渗透测试或审计过程的后续阶段有用的信息。我们将看到诸如Shodan和Banner
    Grabbing之类的工具，使用`DNSPython`模块获取DNS服务器的信息，以及使用`pywebfuzz`模块进行模糊处理。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to gathering information
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集信息的介绍
- en: The `Shodan` package as a tool to extract information from servers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Shodan`包作为从服务器中提取信息的工具'
- en: The `Shodan` package as a tool for applying filters and searching in Shodan
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Shodan`包作为应用过滤器和在Shodan中搜索的工具'
- en: How to extract banner information from servers through the `socket` module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过`socket`模块从服务器中提取横幅信息
- en: The `DNSPython` module as a tool for extracting information from DNS servers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DNSPython`模块作为从DNS服务器中提取信息的工具'
- en: The `pywebfuzz` module as a tool for obtaining possible vulnerable addresses
    on specific servers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pywebfuzz`模块作为获取特定服务器上可能存在的漏洞地址的工具'
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Examples and source code for this chapter are available in GitHub repository
    in the `chapter 6` folder: [https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例和源代码可在GitHub存储库的`chapter 6`文件夹中找到：[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)。
- en: You will need to install Python on your local machine, and some basic knowledge
    about TCP protocol and requests is required.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在本地计算机上安装Python，并且需要一些关于TCP协议和请求的基本知识。
- en: Introduction to gathering information
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集信息的介绍
- en: The process of collecting information can be automated using both modules that
    are installed by default in the Python distribution and external modules that
    are installed in a simple way. Some of the modules that we will see allow us to
    extract information from servers and services that are running – information such
    as domain names and banners.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 收集信息的过程可以使用Python分发中默认安装的模块和简单安装的外部模块来自动化。我们将看到的一些模块允许我们提取服务器和服务的信息，例如域名和横幅。
- en: 'There are many ways to gather information from servers:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以从服务器中收集信息：
- en: We can use Shodan to extract information from public servers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用Shodan从公共服务器中提取信息
- en: We can use the `socket` module to extract banner information from public and
    private servers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用`socket`模块从公共和私人服务器中提取横幅信息
- en: We can use the `DNSPython` module to extract information from DNS servers
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用`DNSPython`模块从DNS服务器中提取信息
- en: We can use the `pywebfuzz` module to obtain possible vulnerabilities
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用`pywebfuzz`模块获取可能的漏洞
- en: Extracting information from servers with Shodan
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Shodan从服务器中提取信息
- en: In this section, you will learn the basics of Shodan for obtaining information
    from port scanning, banner servers, and operating system versions. Instead of
    indexing the web content, it indexes information about headers, banners, and operating
    system versions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习使用Shodan从端口扫描、横幅服务器和操作系统版本中获取信息的基础知识。它不是索引网页内容，而是索引有关标头、横幅和操作系统版本的信息。
- en: Introduction to Shodan
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shodan的介绍
- en: Shodan is an acronym for Sentient Hyper-Optimized Data Access Network. Unlike
    traditional search engines that crawl the web to display results, Shodan attempts
    to grab data from ports. The free version provides 50 results. If you know how
    to use it creatively, you can discover the vulnerabilities of a web server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Shodan是Sentient Hyper-Optimized Data Access Network的缩写。与传统的搜索引擎不同，Shodan尝试从端口中获取数据。免费版本提供50个结果。如果你知道如何创造性地使用它，你可以发现Web服务器的漏洞。
- en: Shodan is a search engine that lets you find specific information from routers,
    servers, and any device with an IP address. All the information that we can extract
    from this service is public.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Shodan是一个搜索引擎，可以让您从路由器、服务器和任何具有IP地址的设备中找到特定信息。我们可以从这项服务中提取的所有信息都是公开的。
- en: Shodan indexes a large amount of data, which is really helpful when searching
    for specific devices that happen to be connected to the internet. All information
    that we can extract from this service is public.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Shodan索引了大量的数据，这在搜索连接到互联网的特定设备时非常有帮助。我们可以从这项服务中提取的所有信息都是公开的。
- en: With Shodan, we also have available a REST API for making searches, scans, and
    queries: [https://developer.shodan.io/api](https://developer.shodan.io/api).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Shodan，我们还可以使用REST API进行搜索、扫描和查询：[https://developer.shodan.io/api](https://developer.shodan.io/api)。
- en: Accessing Shodan services
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问Shodan服务
- en: Shodan is a search engine that is responsible for tracking servers and various
    types of devices on the internet (for example, IP cameras), and extracting useful
    information about services that are running on those targets.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Shodan是一个搜索引擎，负责跟踪互联网上的服务器和各种类型的设备（例如IP摄像头），并提取有关这些目标上运行的服务的有用信息。
- en: Unlike other search engines, Shodan does not search for web content, it searches
    for information about the server from the headers of HTTP requests, such as operating
    system, banners, server type, and versions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他搜索引擎不同，Shodan不搜索网页内容，而是从HTTP请求的标头中搜索有关服务器的信息，例如操作系统、横幅、服务器类型和版本。
- en: Shodan works in a very similar way to the search engines on the internet, with
    the difference being that it does not index the contents of the found servers,
    but the headers and banners returned by the services.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Shodan的工作方式与互联网上的搜索引擎非常相似，不同之处在于它不索引找到的服务器的内容，而是索引服务返回的标头和横幅。
- en: It is known as the "Google of hackers," because it allows us to perform searches
    by applying different types of filters to recover servers that use a specific
    protocol.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它被称为“黑客的谷歌”，因为它允许我们通过应用不同类型的筛选器进行搜索，以恢复使用特定协议的服务器。
- en: To use Shodan from Python programmatically, it is necessary to have an account
    in Shodan with a Developer Shodan Key, in this way, it allows Python developers
    to automate the searches in their services through its API. If we register as
    developers, we obtain `SHODAN_API_KEY`, which we will use from our scripts in
    Python to perform the same searches that can be done through the [https://developer.shodan.io](https://developer.shodan.io) service.
    If we register as developers, in addition to being able to obtain the `API_KEY`,
    we have other advantages, such as obtaining more results or using search filters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Python以编程方式使用Shodan，需要在Shodan中拥有一个带有开发人员Shodan密钥的帐户，这样可以让Python开发人员通过其API自动化搜索其服务。如果我们注册为开发人员，我们会获得`SHODAN_API_KEY`，我们将在Python脚本中使用它来执行与[https://developer.shodan.io](https://developer.shodan.io)服务相同的搜索。如果我们注册为开发人员，除了能够获得`API_KEY`之外，我们还有其他优势，比如获得更多结果或使用搜索筛选器。
- en: 'We also have some options for developers that allow us to discover Shodan services:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一些供开发人员使用的选项，可以让我们发现Shodan服务：
- en: '![](assets/64c53d0e-3b41-4761-a549-b76241dadd99.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64c53d0e-3b41-4761-a549-b76241dadd99.png)'
- en: To install the `Python` module, we can run the `pip install shodan` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`Python`模块，可以运行`pip install shodan`命令。
- en: Shodan also has a REST API to make requests to its services, which you can find
    at [https://developer.shodan.io/api](https://developer.shodan.io/api).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Shodan还有一个REST API，可以向其服务发出请求，您可以在[https://developer.shodan.io/api](https://developer.shodan.io/api)找到。
- en: '![](assets/e0b54dc4-0fae-482c-aa4d-f7d9a68dd32d.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e0b54dc4-0fae-482c-aa4d-f7d9a68dd32d.png)'
- en: For example, if we want to perform a search, we can use the `/shodan/host/` endpoint
    search.To make the requests correctly, it is necessary to indicate the `API_KEY`
    that we obtained when we registered.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想进行搜索，我们可以使用`/shodan/host/`端点搜索。为了正确地进行请求，需要指定我们注册时获得的`API_KEY`。
- en: For example, with this request, we obtain the search results with the "apache"
    search, which returns a response in JSON format: [https://api.shodan.io/shodan/host/search?key=<your_api_key>&query=apache](https://api.shodan.io/shodan/host/search?key=v4YpsPUJ3wjDxEqywwu6aF5OZKWj8kik&query=apache).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过这个请求，我们可以获得带有“apache”搜索的搜索结果，返回JSON格式的响应：[https://api.shodan.io/shodan/host/search?key=<your_api_key>&query=apache](https://api.shodan.io/shodan/host/search?key=v4YpsPUJ3wjDxEqywwu6aF5OZKWj8kik&query=apache)。
- en: 'You can find more information in the official documentation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档中找到更多信息：
- en: '![](assets/cce092a9-3099-4371-91b9-0d940c6855e0.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cce092a9-3099-4371-91b9-0d940c6855e0.png)'
- en: Shodan filters
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shodan筛选器
- en: 'Shodan has a series of special filters that allow us to optimize search results.
    Among the filters, we can highlight:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Shodan有一系列特殊的筛选器，可以让我们优化搜索结果。在这些筛选器中，我们可以突出显示：
- en: '**after/before**: Filters the results by date'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**after/before**：按日期筛选结果'
- en: '**country**: Filters the results by two-digit country code'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**country**：按两位国家代码筛选结果'
- en: '**city**: Filters the results by city'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**city**：通过城市筛选结果'
- en: '**geo**: Filters the results by latitude/longitude'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**geo**：通过纬度/经度筛选结果'
- en: '**hostname**: Filters the results by host or domain name'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hostname**：通过主机名或域名筛选结果'
- en: '**net**: Filters the results by a specific range of IPs or a network segment'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**net**：通过特定范围的IP或网络段筛选结果'
- en: '**os**: Performs a search for a specific operating system'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**os**：执行特定操作系统的搜索'
- en: '**port**: Allows us to filter by port number'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**port**：允许我们按端口号筛选'
- en: You can find more information about shodan filters at [http://www.shodanhq.com/help/filters](http://www.shodanhq.com/help/filters).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.shodanhq.com/help/filters](http://www.shodanhq.com/help/filters)找到更多关于shodan筛选器的信息。
- en: Shodan search with python
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shodan搜索与Python
- en: With the `search` function offered by the Python API, you can search in the
    same way that you can with the web interface. If we execute the following example
    from the Python interpreter, we see that if we look for the "apache" string, we
    get 15,684,960 results.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Python API提供的`search`函数，可以以与Web界面相同的方式进行搜索。如果我们从Python解释器执行以下示例，我们会发现如果搜索“apache”字符串，我们会得到15,684,960个结果。
- en: 'Here, we can see the total results and the execution of the `Shodan` module
    from the interpreter:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到总结果和从解释器执行的`Shodan`模块：
- en: '![](assets/1d719031-9e79-4c2e-94a7-5dc5972ab966.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1d719031-9e79-4c2e-94a7-5dc5972ab966.png)'
- en: We can also create our own class (**ShodanSearch**), which has the `__init__` method
    to initialize the Shodan object from `API_KEY` that we obtained when we registered.
    We can also have a method to search for the search string by parameter and call
    the search method of shodan's API.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建自己的类（**ShodanSearch**），该类具有`__init__`方法，用于初始化我们注册时获得的`API_KEY`的Shodan对象。我们还可以有一个方法，通过参数搜索搜索字符串，并调用shodan的API的搜索方法。
- en: 'You can find the following code in the `ShodanSearch.py` file in the shodan
    folder on the github repository:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在github存储库的shodan文件夹中的`ShodanSearch.py`文件中找到以下代码：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Performing searches by a given host
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过给定主机执行搜索
- en: 'In this example, executed from the Python interpreter, we can see that with
    the `shodan.host()` method, it is possible to obtain information from a certain
    IP, such as country, city, service provider, servers, or versions:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，从Python解释器执行，我们可以看到使用`shodan.host()`方法，可以获取特定IP的信息，比如国家、城市、服务提供商、服务器或版本：
- en: '![](assets/64355c0a-012a-4927-abfc-6a9980492d62.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64355c0a-012a-4927-abfc-6a9980492d62.png)'
- en: 'We can go in details with **data array** where we can get more information
    about **ISP**, **location, latitude, and longitude**:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过**数据数组**进行详细了解，其中可以获取更多关于**ISP**、**位置、纬度和经度**的信息：
- en: '![](assets/f89dfd7f-41eb-436a-af00-0cc0c66bf1c2.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f89dfd7f-41eb-436a-af00-0cc0c66bf1c2.png)'
- en: 'In the previously defined `ShodanSearch` class, we could define a method that
    is passed by the IP parameter of the host and call the `host ()` method of the
    shodan API:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前定义的`ShodanSearch`类中，我们可以定义一个方法，该方法通过主机的IP参数传递，并调用shodan API的`host()`方法：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `ShodanSearch` script accepts a search string and the IP address of the
    host:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`ShodanSearch`脚本接受搜索字符串和主机的IP地址：'
- en: '![](assets/ddf0845c-4e96-4e66-a02d-7f13067e2c86.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ddf0845c-4e96-4e66-a02d-7f13067e2c86.png)'
- en: 'In this example execution, we are testing the IP address 22.253.135.79 to obtain
    all public information from this server:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例执行中，我们正在测试IP地址22.253.135.79，以获取此服务器的所有公共信息：
- en: '**`python .\ShodanSearch.py -h 23.253.135.79`**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**`python .\ShodanSearch.py -h 23.253.135.79`**'
- en: '![](assets/c0ab91b6-103b-4a65-abb4-cf9c4c2194e1.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c0ab91b6-103b-4a65-abb4-cf9c4c2194e1.png)'
- en: Searching for FTP servers
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索FTP服务器
- en: You can perform a search for servers that have an FTP access with an anonymous
    user and can be accessed without a username and password.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以搜索具有匿名用户的FTP访问权限并且可以在没有用户名和密码的情况下访问的服务器。
- en: 'If we perform the search with the "**port: 21 Anonymous user logged in**" string,
    we obtain those vulnerable FTP servers:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用“**端口：21匿名用户登录**”字符串进行搜索，我们将获得那些易受攻击的FTP服务器：
- en: '![](assets/81811d2e-2261-434f-b97b-ab5d020a7767.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/81811d2e-2261-434f-b97b-ab5d020a7767.png)'
- en: This script allows you to obtain a list of IP addresses in servers that allow
    FTP access anonymously.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本允许您获取允许匿名FTP访问的服务器中的IP地址列表。
- en: 'You can find the following code in the`ShodanSearch_FTP_Vulnerable.py` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`ShodanSearch_FTP_Vulnerable.py`文件中找到以下代码：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the execution of the previous script, we obtain an IP address list with
    servers that are vulnerable to anonymous login in ftp service:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行上述脚本，我们获得了一个IP地址列表，其中包含容易受到匿名登录FTP服务的服务器：
- en: '![](assets/fa6007ba-a01f-4818-ac2a-5b62be918960.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fa6007ba-a01f-4818-ac2a-5b62be918960.png)'
- en: Using python to obtain server information
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python获取服务器信息
- en: In this section, you will learn the basics of obtaining banners and whois information
    from servers with socket and `python-whois` modules.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习使用套接字和`python-whois`模块从服务器获取横幅和whois信息的基础知识。
- en: Extracting servers banners with python
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python提取服务器横幅
- en: Banners expose information related with the name of the web server and the version
    that is running on the server. Some expose the backend technology (PHP, Java,
    Python) used and its version. The production version could have public or non-public
    failures, so it is always a good practice to test the banners that return the
    servers that we have publicly exposed, to see whether they expose some type of
    information that we do not want to be public.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 横幅显示与Web服务器的名称和正在运行的版本相关的信息。有些暴露了使用的后端技术（PHP、Java、Python）及其版本。生产版本可能存在公共或非公共的故障，因此测试公开暴露的服务器返回的横幅是否暴露了我们不希望公开的某些信息，这总是一个很好的做法。
- en: Using the standard Python libraries, it is possible to create a simple program
    that connects to a server and captures the banner of the service included in the
    response to the request. The simplest way to obtain the banner of a server is
    by using the `socket` module**.** We can send a get request and get the response
    through the `recvfrom()` method, which would return a tuple with the result.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准的Python库，可以创建一个简单的程序，连接到服务器并捕获响应中包含的服务的横幅。获取服务器横幅的最简单方法是使用`socket`模块。我们可以通过`recvfrom()`方法发送一个get请求并获取响应，该方法将返回一个带有结果的元组。
- en: 'You can find the following code in the `BannerServer.py` file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`BannerServer.py`文件中找到以下代码：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The previous script accepts the **target** and the **port** as **parameters**:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本接受**目标**和**端口**作为**参数**：
- en: '![](assets/b52f0624-d259-4b14-9aa8-08109c1110ea.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b52f0624-d259-4b14-9aa8-08109c1110ea.png)'
- en: 'In this case, we obtain the web server version on port 80:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们获得了端口80上的Web服务器版本：
- en: '`**python .\BannerServer.py -target www.google.com -port 80**`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`**python .\BannerServer.py -target www.google.com -port 80**`'
- en: '![](assets/9a3bcd8a-75d9-4f68-82eb-90a05b492014.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9a3bcd8a-75d9-4f68-82eb-90a05b492014.png)'
- en: Finding whois information about a server
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找有关服务器的whois信息
- en: We can use the WHOIS protocol to see who is the registered owner of the domain
    name. There is a `Python` module, called python-whois, for this protocol, documented
    at [https://pypi.python.org/pypi/python-whois](https://pypi.python.org/pypi/python-whois),
    which can be installed via pip using the `pip install python-whois` command.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用WHOIS协议来查看域名的注册所有者。有一个名为python-whois的Python模块，用于此协议，文档位于[https://pypi.python.org/pypi/python-whois](https://pypi.python.org/pypi/python-whois)，可以使用`pip
    install python-whois`命令安装。
- en: 'For example, if we want to query the names of servers and the owner of a certain
    domain, we can do them through the `get_whois()` method. This method returns a
    dictionary structure (`key-> value`):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想查询某个域的服务器名称和所有者，我们可以通过`get_whois()`方法来查询。该方法返回一个字典结构（`键->值`）。
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the `pythonwhois.net.get_root_server()` method, it is possible to recover
    the root server for a given domain:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pythonwhois.net.get_root_server()`方法，可以恢复给定域的根服务器：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the `pythonwhois.net.get_whois_raw()` method, it is possible to retrieve
    all the information for a given domain:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pythonwhois.net.get_whois_raw()`方法，可以检索给定域的所有信息：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the following script we see a complete example where we pass the domain as
    parameter from which we are going to extract information.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的脚本中，我们看到一个完整的示例，我们从中提取信息的域作为参数传递。
- en: 'You can find the following code in the`PythonWhoisExample.py` file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`PythonWhoisExample.py`文件中找到以下代码：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Getting information on dns servers with DNSPython
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DNSPython获取DNS服务器信息
- en: In this section, we will create a DNS client in Python, and see how this client
    will obtain information about name servers, mail servers, and IPV4/IPV6 addresses.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Python中创建一个DNS客户端，并查看此客户端将如何获取有关名称服务器、邮件服务器和IPV4/IPV6地址的信息。
- en: DNS protocol
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS协议
- en: DNS stands for Domain Name Server, the domain name service used to link IP addresses
    with domain names. DNS is a globally-distributed database of mappings between
    hostnames and IP addresses. It is an open and hierarchical system with many organizations
    choosing to run their own DNS servers.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: DNS代表域名服务器，域名服务用于将IP地址与域名链接起来。 DNS是一个全球分布的映射主机名和IP地址的数据库。 它是一个开放和分层的系统，许多组织选择运行自己的DNS服务器。
- en: 'The DNS protocol is used for different purposes. The most common are:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: DNS协议用于不同的目的。 最常见的是：
- en: '**Names resolution:** Given the complete name of a host, it can obtain its
    IP address.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称解析：给定主机的完整名称，可以获取其IP地址。
- en: '**Reverse address resolution:** It is the reverse mechanism to the previous
    one. It can, given an IP address, obtain the name associated with it.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向地址解析：这是与上一个相反的机制。 它可以根据IP地址获取与之关联的名称。
- en: '**Mail servers resolution:** Given a mail server domain name (for example,
    gmail.com), it can obtain the server through which communication is performed (for
    example, gmail-smtp-in.l.google.com).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邮件服务器解析：给定邮件服务器域名（例如gmail.com），可以通过它来进行通信的服务器（例如gmail-smtp-in.l.google.com）。
- en: 'DNS is also a protocol that devices use to query DNS servers for resolving
    hostnames to IP addresses (and vice-versa). The `nslookup` tool comes with most
    Linux and Windows systems, and it lets us query DNS on the command line. Here,
    we determined that the python.org host has the IPv4 address `23.253.135.79`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: DNS还是设备用于查询DNS服务器以将主机名解析为IP地址（反之亦然）的协议。 `nslookup`工具附带大多数Linux和Windows系统，并且它允许我们在命令行上查询DNS。
    在这里，我们确定python.org主机具有IPv4地址`23.253.135.79`：
- en: '`$ nslookup python.org`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ nslookup python.org`'
- en: 'This is the address resolution for the python.org domain:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是python.org域的地址解析：
- en: '![](assets/bc740de9-7a55-40d3-accb-1884f928fb65.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc740de9-7a55-40d3-accb-1884f928fb65.png)'
- en: DNS servers
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNS服务器
- en: Humans are much better at remembering names to relate to objects than long sequences
    of numbers. It is much easier to remember the google.com domain than the IP. In
    addition, the IP address can change by movements in the network infrastructure,
    while the domain name remains the same.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 人类更擅长记住与对象相关的名称，而不是长序列的数字。 记住google.com域名比IP地址要容易得多。 此外，IP地址可能会因网络基础设施的变动而发生变化，而域名保持不变。
- en: Its operation is based on the use of a distributed and hierarchical database
    in which domain names and IP addresses are stored, as well as the ability to provide
    mail-server location services.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 它的操作基于使用分布式和分层数据库，其中存储了域名和IP地址，以及提供邮件服务器位置服务的能力。
- en: 'DNS servers are located in the application layer and usually use port 53 (UDP).
    When a client sends a DNS packet to perform some type of query, you must send
    the type of record you want to query. Some of the most-used records are:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: DNS服务器位于应用层，通常使用端口53（UDP）。 当客户端发送DNS数据包以执行某种类型的查询时，必须发送要查询的记录类型。 一些最常用的记录是：
- en: '**A: **Allows you to consult the IPv4 address'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A：允许您查询IPv4地址
- en: '**AAAA:** Allows you to consult the IPv6 address'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AAAA：允许您查询IPv6地址
- en: '**MX:** Allows you to consult the mail servers'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MX：允许您查询邮件服务器
- en: '**NS: **Allows you to consult the name of the server (Name Server)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NS：允许您查询服务器的名称（名称服务器）
- en: '**TXT:** Allows you to consult information in text format'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TXT：允许您以文本格式查询信息
- en: The DNSPython module
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DNSPython模块
- en: DnsPython is an open source library written in Python that allows operations
    to query records against DNS servers. It allows access to high and low level.
    At high level allows queries to DNS records and at low level allows the direct
    manipulation of zones, names, and registers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: DnsPython是一个用Python编写的开源库，允许对DNS服务器进行查询记录操作。 它允许访问高级和低级。 在高级别允许查询DNS记录，而在低级别允许直接操作区域，名称和寄存器。
- en: A few DNS client libraries are available from PyPI. We will focus on the `dnspython`
    library, which is available at [http://www.dnspython.org](http://www.dnspython.org).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: PyPI提供了一些DNS客户端库。 我们将重点关注`dnspython`库，该库可在[http://www.dnspython.org](http://www.dnspython.org)上找到。
- en: The installation can be done either using the python repository or by downloading
    the github source code ([https://github.com/rthalley/dnspython](https://github.com/rthalley/dnspython))
    and running the `setup.py` install file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 安装可以通过python存储库或通过下载github源代码（[https://github.com/rthalley/dnspython](https://github.com/rthalley/dnspython)）并运行`setup.py`安装文件来完成。
- en: 'You can install this library by using either the `easy_install` command or
    the `pip` command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`easy_install`命令或`pip`命令安装此库：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The main packages for this module are:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块的主要包括：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The information that we can obtain from a specific domain is:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从特定域名获取的信息是：
- en: '**Records for mail servers**: ansMX = dns.resolver.query(‘domain’,’MX’)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邮件服务器记录：ansMX = dns.resolver.query（'domain'，'MX'）
- en: '**Records for name servers** :ansNS = dns.resolver.query(‘domain’,’NS’)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称服务器记录：ansNS = dns.resolver.query（'domain'，'NS'）
- en: '**Records for IPV4 addresses** :ansipv4 = dns.resolver.query(‘domain’,’A’)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPV4地址记录：ansipv4 = dns.resolver.query（'domain'，'A'）
- en: '**Records for IPV6 addresses** :ansipv6 = dns.resolver.query(‘domain’,’AAAA’)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPV6地址记录：ansipv6 = dns.resolver.query（'domain'，'AAAA'）
- en: 'In this example, we are making a simple query regarding the IP address of a
    host with the `dns.resolver` submodule:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们正在对具有`dns.resolver`子模块的主机的IP地址进行简单查询：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can check whether one domain is the **subdomain** of another with the `is_subdomain()`
    method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`is_subdomain（）`方法检查一个域是否是另一个域的**子域**：
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Obtain a domain name from an IP address:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从IP地址获取域名：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Obtain an IP from a domain name:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从域名获取IP：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you want to make a **reverse look-up**, you need to use the `dns.reversename`
    submodule, as shown in the following example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要进行**反向查找**，需要使用`dns.reversename`子模块，如下例所示：
- en: 'You can find the following code in the`DNSPython-reverse-lookup.py` file:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`DNSPython-reverse-lookup.py`文件中找到以下代码：
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this complete example, we pass as a parameter the domain from which we want
    to extract information.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个完整的示例中，我们将域作为参数传递，从中提取信息。
- en: 'You can find the following code in the `DNSPythonServer_info.py` file:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`DNSPythonServer_info.py`文件中找到以下代码：
- en: '[PRE15]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For example, if we try to get information from the python.org domain, we get
    the following results.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们尝试从python.org域获取信息，我们会得到以下结果。
- en: 'With the previous script, we can get NameServers from the python.org domain:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上一个脚本，我们可以从python.org域中获取NameServers：
- en: '![](assets/1924876b-2efb-4126-a3e6-06b75175d6e1.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1924876b-2efb-4126-a3e6-06b75175d6e1.png)'
- en: 'In this screenshot we can see **IPV4 and IPV6 addresses** resolution from python.org:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到从python.org解析出的**IPV4和IPV6地址**：
- en: '![](assets/948e0d86-308e-4b28-a7e9-581c5a719d3b.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/948e0d86-308e-4b28-a7e9-581c5a719d3b.png)'
- en: 'In this screenshot we can see **Mailservers** resolution from `python.org`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到从`python.org`解析出的**邮件服务器**：
- en: '![](assets/546541b0-aea9-4f57-a64d-21422822a1f7.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/546541b0-aea9-4f57-a64d-21422822a1f7.png)'
- en: Getting vulnerable addresses in servers with Fuzzing
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模糊测试获取服务器中的易受攻击的地址
- en: In this section, we will learn about the fuzzing process and how we can use
    this practice with python projects to obtain URLs and addresses vulnerable to
    attackers.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关模糊测试过程以及如何使用此实践与Python项目来获取容易受到攻击者攻击的URL和地址。
- en: The Fuzzing process
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模糊测试过程
- en: A fuzzer is a program where we have a file that contains URLs that can be predictable
    for a specific application or servers. Basically, we do a request for each predictable
    URL, and if we see that the response is OK, it means that we have found a URL
    that is not public or is hidden, but later we see that we can access it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊器是一个程序，其中包含可以针对特定应用程序或服务器可预测的URL的文件。基本上，我们对每个可预测的URL进行请求，如果我们看到响应正常，这意味着我们找到了一个不公开或隐藏的URL，但后来我们发现我们可以访问它。
- en: Like most exploitable conditions, the fuzzing process is only useful against
    systems that improperly sanitize input, or that take more data than they can handle.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数可利用的条件一样，模糊测试过程只对不正确地对输入进行消毒或接受超出其处理能力的数据的系统有用。
- en: 'In general, the fuzzing process consists of the following **phases**:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，模糊测试过程包括以下**阶段**：
- en: '**Identifying the target**: To fuzz an application, we have to identify the
    target application.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别目标**：要对应用程序进行模糊测试，我们必须确定目标应用程序。'
- en: '**Identifying inputs**: The vulnerability exists because the target application
    accepts a malformed input and processes it without sanitizing.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别输入**：漏洞存在是因为目标应用程序接受了格式不正确的输入并在未经消毒的情况下处理它。'
- en: '**Creating fuzz data**: After getting all the input parameters, we have to
    create invalid input data to send to the target application.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建模糊数据**：在获取所有输入参数后，我们必须创建无效的输入数据发送到目标应用程序。'
- en: '**Fuzzing**: After creating the fuzz data, we have to send it to the target
    application. We can use the fuzz data for monitoring exceptions when calling services.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模糊测试**：创建模糊数据后，我们必须将其发送到目标应用程序。我们可以使用模糊数据来监视调用服务时的异常。'
- en: '**Determining exploitability**: After fuzzing, we have to check the input that
    caused a crash.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定可利用性**：模糊测试后，我们必须检查导致崩溃的输入。'
- en: The FuzzDB project
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FuzzDB项目
- en: FuzzDB is a project where we find a set of folders that contain patterns of
    known attacks that have been collected in multiple tests of pentesting, mainly
    in web environments: [https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: FuzzDB是一个项目，其中我们可以找到一组包含已在多次渗透测试中收集的已知攻击模式的文件夹，主要是在Web环境中：[https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb)。
- en: 'The FuzzDB categories are separated into different directories that contain
    predictable resource-location patterns, patterns to detect vulnerabilities with
    malicious payloads or vulnerable routes:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: FuzzDB类别分为不同的目录，这些目录包含可预测的资源位置模式、用于检测带有恶意有效负载或易受攻击的路由的模式：
- en: '![](assets/f74dd986-38d2-4cda-9888-b16e47fa734f.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f74dd986-38d2-4cda-9888-b16e47fa734f.png)'
- en: Fuzzing with python with pywebfuzz
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pywebfuzz进行模糊测试
- en: pywebfuzz is a Python module to assist in the identification of vulnerabilities
    in web applications through brute-force methods, and provides resources for testing
    vulnerabilities in servers and web applications such as apache server, jboss,
    and databases.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: pywebfuzz是一个Python模块，通过暴力方法帮助识别Web应用程序中的漏洞，并提供测试服务器和Web应用程序（如apache服务器、jboss和数据库）漏洞的资源。
- en: One of the objectives of the project is to facilitate the testing of web applications.
    The pywebfuzz project provides values and logic to test users, passwords, and
    codes against web applications.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的目标之一是简化对Web应用程序的测试。pywebfuzz项目提供了用于测试用户、密码和代码与Web应用程序的值和逻辑。
- en: In Python, we find the `pywebfuzz` module, where we have a set of classes that
    allow access to the FuzzDB directories and use their payloads.The structure of
    classes created in PyWebFuzz is organized by different attack schemes; these schemes
    represent the different payloads available in FuzzDB.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们找到`pywebfuzz`模块，其中有一组类，允许访问FuzzDB目录并使用它们的有效负载。PyWebFuzz中创建的类结构是按不同的攻击方案组织的；这些方案代表FuzzDB中可用的不同有效负载。
- en: It has a class structure that is responsible for reading the files available
    in FuzzDB, so that later, we can use them from Python in our scripts.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个类结构，负责读取FuzzDB中可用的文件，以便稍后我们可以在Python中使用它们在我们的脚本中。
- en: 'First, we need to import the `fuzzdb` module:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要导入`fuzzdb`模块：
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For example, if we want to search for login pages on a server we can use the `fuzzdb.Discovery.PredictableRes.Logins`
    module:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想在服务器上搜索登录页面，我们可以使用`fuzzdb.Discovery.PredictableRes.Logins`模块：
- en: '[PRE17]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This returns a list of predictable resources, where each element corresponds
    to a URL that, if it exists in the web server, can be vulnerable:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个可预测资源的列表，其中每个元素对应于Web服务器中存在的URL，可能是易受攻击的：
- en: '![](assets/67c1c29f-5f68-4ad9-852d-a763e089e12c.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/67c1c29f-5f68-4ad9-852d-a763e089e12c.png)'
- en: We can make a script in Python where, given a URL that we are analyzing, we
    can test the connection to each of the login routes, and if the request returns
    a code `200`, the pages has been found in the server.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Python中编写一个脚本，在分析的URL给定的情况下，我们可以测试连接到每个登录路由，如果请求返回代码`200`，则页面已在服务器中找到。
- en: In this script, we can obtain predictable URLs, such as login, admin, administrator,
    and default page, and for each combination domain + predictable URL we verify
    the status code returned.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在此脚本中，我们可以获取可预测的URL，例如登录、管理员、管理员和默认页面，对于每个组合域+可预测的URL，我们验证返回的状态代码。
- en: 'You can find the following code in the `demofuzzdb.py` fileinside `pywebfuzz_folder`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`pywebfuzz_folder`内的`demofuzzdb.py`文件中找到以下代码：
- en: '[PRE18]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also obtain the HTTP methods supported by the server:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以获取服务器支持的HTTP方法：
- en: '[PRE19]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of the previous command from the python interpreter shows the available
    HTTP methods:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 从python解释器的先前命令的输出显示了可用的HTTP方法：
- en: '![](assets/8674b58d-92e1-4f44-b6a2-27eaae40d3fa.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8674b58d-92e1-4f44-b6a2-27eaae40d3fa.png)'
- en: 'You can find the following code in the `demofuzzdb2.py`file inside `pywebfuzz_folder`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`pywebfuzz_folder`内的`demofuzzdb2.py`文件中找到以下代码：
- en: '[PRE20]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There is a module that allows you to search for predictable resources on an
    Apache tomcat server:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个模块允许您在Apache tomcat服务器上搜索可预测的资源：
- en: '[PRE21]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This submodule allows you to obtain strings to detect SQL injection vulnerabilities
    :'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此子模块允许您获取字符串以检测SQL注入漏洞：
- en: '[PRE22]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In this screen capture, we can see the execution of the `fuzzdb sql_injection`
    module:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，我们可以看到`fuzzdb sql_injection`模块的执行：
- en: '![](assets/97ebbc4b-840a-4b52-84a1-eda6490ebeba.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/97ebbc4b-840a-4b52-84a1-eda6490ebeba.png)'
- en: The information returned in this case matches that found in the GitHub repository
    of the project. [https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/sql-injection/detect](https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/sql-injection/detect)
    contains many files for detecting situations of SQL injection, for example, we
    can find the **GenericBlind.txt** file, which contains the same strings that the
    module returns from Python.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下返回的信息与项目的GitHub存储库中找到的信息相匹配。[https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/sql-injection/detect](https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/sql-injection/detect)包含许多用于检测SQL注入情况的文件，例如，我们可以找到**GenericBlind.txt**文件，其中包含与Python模块返回的相同字符串。
- en: 'In the GitHub repository, we see some files depending the SQL attack and the
    database type we are testing:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub存储库中，我们看到一些文件取决于我们正在测试的SQL攻击和数据库类型：
- en: '![](assets/1107a246-1469-4197-8a84-cdf0fe899375.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1107a246-1469-4197-8a84-cdf0fe899375.png)'
- en: We can also find other files for testing SQL injection in MySQL databases: [https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/sql-injection/detect/MySQL.txt](https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/sql-injection/detect/MySQL.txt).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以找到其他用于测试MySQL数据库中SQL注入的文件：[https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/sql-injection/detect/MySQL.txt](https://github.com/fuzzdb-project/fuzzdb/blob/master/attack/sql-injection/detect/MySQL.txt)。
- en: 'In the `Mysql.txt` file, we can see all available attack vectors to discover
    an SQL injection vulnerability:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Mysql.txt`文件中，我们可以看到所有可用的攻击向量，以发现SQL注入漏洞：
- en: '![](assets/f3866661-f9d6-4654-b485-30ff8e20c8af.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f3866661-f9d6-4654-b485-30ff8e20c8af.png)'
- en: 'We can use the previous file to detect a SQL injection vulnerability in a specific
    site: testphp.vulnweb.com.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用先前的文件来检测特定站点中的SQL注入漏洞：testphp.vulnweb.com。
- en: 'You can find the following code in the `demofuzz_sql.py` file inside pywebfuzz_folder:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`pywebfuzz_folder`内的`demofuzz_sql.py`文件中找到以下代码：
- en: '[PRE23]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The execution of the previous script shows the output:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 先前脚本的执行显示了输出：
- en: '![](assets/5035d6a0-6ff4-41a0-ad90-2cc3ada3e8bf.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5035d6a0-6ff4-41a0-ad90-2cc3ada3e8bf.png)'
- en: 'The following example would create a Python list that contains all of the values
    from fuzzdb for LDAP Injection:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将创建一个包含来自fuzzdb的所有值的Python列表，用于LDAP注入：
- en: '[PRE24]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now the `ldap_values` variable would be a Python dictionary containing the values
    from fuzzdb’s `ldap_injection` file. You could then iterate over the top of this
    variable with your tests.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`ldap_values`变量将是一个包含来自fuzzdb的`ldap_injection`文件的Python字典。然后，您可以使用您的测试迭代此变量的顶部。
- en: We can find ldap folder inside the fuzzbd project: [https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/ldap](https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/ldap).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在fuzzbd项目中找到ldap文件夹：[https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/ldap](https://github.com/fuzzdb-project/fuzzdb/tree/master/attack/ldap)。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: One of the objectives of this chapter has been to learn about the modules that
    allow us to extract information that the servers expose in a public way. With
    the tools we have discussed, we can get enough information that may be useful
    for later phases of our pentesting or audit process.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标之一是了解允许我们提取服务器以公开方式暴露的信息的模块。使用我们讨论过的工具，我们可以获得足够的信息，这些信息可能对我们的后续渗透测试或审计过程有用。
- en: In the next [chapter](321a63e9-bf32-449a-9673-4991ab97234f.xhtml), we will explore
    the python programming packages that interact with the FTP, SSH, and SNMP servers.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个[章节](321a63e9-bf32-449a-9673-4991ab97234f.xhtml)中，我们将探讨与FTP、SSH和SNMP服务器交互的python编程包。
- en: Questions
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What do we need to access the Shodan developer API?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要什么来访问Shodan开发者API？
- en: Which method should be called in the shodan API to obtain information about
    a given host and what data structure does that method return?
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该在shodan API中调用哪个方法以获取有关给定主机的信息，该方法返回什么数据结构？
- en: Which module can be used to obtain the banner of a server?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个模块可以用来获取服务器的横幅？
- en: Which method should be called and what parameters should be passed to obtain
    the IPv6 address records with the `DNSPython` module?
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该调用哪个方法并传递什么参数来获取`DNSPython`模块中的IPv6地址记录？
- en: Which method should be called and what parameters should be passed to obtain
    the records for mail servers with the `DNSPython` module?
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该调用哪个方法并传递什么参数以获取`DNSPython`模块中邮件服务器的记录？
- en: Which method should be called and what parameters should be passed to obtain
    the records for name servers with the `DNSPython` module?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`DNSPython`模块应调用哪个方法以及应传递哪些参数以获取名称服务器的记录？
- en: Which project contains files and folders that contain patterns of known attacks
    that have been collected in various pentesting tests on web applications?
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个项目包含文件和文件夹，其中包含在各种网页应用程序的渗透测试中收集的已知攻击模式？
- en: Which module should be used to look for login pages on a server that may be
    vulnerable?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应使用哪个模块来查找可能易受攻击的服务器上的登录页面？
- en: Which `FuzzDB` project module allows us to obtain strings to detect SQL injection-type
    vulnerabilities?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FuzzDB`项目模块允许我们获取字符串以检测SQL注入类型的漏洞是哪个？'
- en: What port do DNS servers use to resolve requests for mail server names?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DNS服务器用于解析邮件服务器名称的请求的端口是多少？
- en: Further reading
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In these links, you will find more information about the mentioned tools and
    official python documentation for some of the commented modules:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些链接中，您将找到有关上述工具的更多信息以及一些被评论模块的官方Python文档：
- en: '[https://developer.shodan.io/api](https://developer.shodan.io/api)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.shodan.io/api](https://developer.shodan.io/api)'
- en: '[http://www.dnspython.org](http://www.dnspython.org)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.dnspython.org](http://www.dnspython.org)'
- en: You can create your own DNS server with the python `dnslib` module: [https://pypi.org/project/dnslib/](https://pypi.org/project/dnslib/)
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用python `dnslib`模块创建自己的DNS服务器：[https://pypi.org/project/dnslib/](https://pypi.org/project/dnslib/)
- en: '[https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb).'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb).'
- en: In the Python ecosystem, we can find other fuzzers, such as **wfuzz**.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python生态系统中，我们可以找到其他模糊器，例如**wfuzz**。
- en: Wfuzz is a web-application security-fuzzer tool that you can use from the command
    line or programmatically with the Python library: [https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Wfuzz是一个Web应用程序安全模糊测试工具，您可以从命令行或使用Python库进行编程：[https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz)。
- en: Official documentation is available at [http://wfuzz.readthedocs.io](http://wfuzz.readthedocs.io/).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档可在[http://wfuzz.readthedocs.io](http://wfuzz.readthedocs.io/)找到。
- en: 'Projects examples that use the `python Shodan` module:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`python Shodan`模块的项目示例：
- en: '[https://www.programcreek.com/python/example/107467/shodan.Shodan](https://www.programcreek.com/python/example/107467/shodan.Shodan)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.programcreek.com/python/example/107467/shodan.Shodan](https://www.programcreek.com/python/example/107467/shodan.Shodan)'
- en: '[https://github.com/NullArray/Shogun](https://github.com/NullArray/Shogun)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/NullArray/Shogun](https://github.com/NullArray/Shogun)'
- en: '[https://github.com/RussianOtter/networking/blob/master/8oScanner.py](https://github.com/RussianOtter/networking/blob/master/8oScanner.py)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/RussianOtter/networking/blob/master/8oScanner.py](https://github.com/RussianOtter/networking/blob/master/8oScanner.py)'
- en: '[https://github.com/Va5c0/Shodan_cmd](https://github.com/Va5c0/Shodan_cmd)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/Va5c0/Shodan_cmd](https://github.com/Va5c0/Shodan_cmd)'
- en: '[https://github.com/sjorsng/osint-combinerhttps://github.com/carnal0wnage/pentesty_scripts](https://github.com/sjorsng/osint-combinerhttps://github.com/carnal0wnage/pentesty_scripts)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/sjorsng/osint-combinerhttps://github.com/carnal0wnage/pentesty_scripts](https://github.com/sjorsng/osint-combinerhttps://github.com/carnal0wnage/pentesty_scripts)'
- en: '[https://github.com/ffmancera/pentesting-multitool](https://github.com/ffmancera/pentesting-multitool)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ffmancera/pentesting-multitool](https://github.com/ffmancera/pentesting-multitool)'
- en: '[https://github.com/ninj4c0d3r/ShodanCli](https://github.com/ninj4c0d3r/ShodanCli)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ninj4c0d3r/ShodanCli](https://github.com/ninj4c0d3r/ShodanCli)'
- en: If we are interested in find web directories without bruteforce process, we
    can use this tool called `dirhunt`, basically is a web crawler optimized for search
    and analyze directories in a website.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有兴趣在没有暴力破解过程的情况下查找网页目录，我们可以使用名为`dirhunt`的工具，基本上是一个用于搜索和分析网站中目录的网络爬虫。
- en: '[https://github.com/Nekmo/dirhunt](https://github.com/Nekmo/dirhunt)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/Nekmo/dirhunt](https://github.com/Nekmo/dirhunt)'
- en: You can install it with command `**pip install dirhunt**`
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用命令`**pip install dirhunt**`来安装它
- en: This tool supports Python version 2.7 & 3.x but Python 3.x is recommended
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具支持Python 2.7版本和3.x版本，但建议使用Python 3.x
