["```py\npip install nltk\n```", "```py\nimport nltk nltk.download() showing info https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml\n```", "```py\nfrom nltk.tokenize import sent_tokenize\n```", "```py\nwith open('sentence1.txt', 'r') as myfile:\n  data=myfile.read().replace('\\n', '')\n```", "```py\nsentences = sent_tokenize(data)   for s in sentences:\n  print(s)\n```", "```py\nWe are seeking developers with demonstrable experience in: ASP.NET, C#, SQL Server, and AngularJS.\nWe are a fast-paced, highly iterative team that has to adapt quickly as our factory grows.\nWe need people who are comfortable tackling new problems, innovating solutions, and interacting with every facet of the company on a daily basis.\nCreative, motivated, able to take responsibility and support the applications you create.\nHelp us get rockets out the door faster!\n```", "```py\nMichaels-iMac-2:~ michaelheydt$ ls ~/nltk_data/tokenizers/punkt PY3   finnish.pickle  portuguese.pickle README   french.pickle  slovene.pickle czech.pickle  german.pickle  spanish.pickle danish.pickle  greek.pickle  swedish.pickle dutch.pickle  italian.pickle  turkish.pickle english.pickle  norwegian.pickle estonian.pickle  polish.pickle\n```", "```py\nsentences = sent_tokenize(data, language=\"german\") \n```", "```py\nprint(first_sentence.split())\n['We', 'are', 'seeking', 'developers', 'with', 'demonstrable', 'experience', 'in:', 'ASP.NET,', 'C#,', 'SQL', 'Server,', 'and', 'AngularJS.'] \n```", "```py\nfrom nltk.tokenize import word_tokenize, regexp_tokenize, wordpunct_tokenize, blankline_tokenize\n```", "```py\nprint(word_tokenize(first_sentence))\n['We', 'are', 'seeking', 'developers', 'with', 'demonstrable', 'experience', 'in', ':', 'ASP.NET', ',', 'C', '#', ',', 'SQL', 'Server', ',', 'and', 'AngularJS', '.'] \n```", "```py\nprint(regexp_tokenize(first_sentence, pattern='\\w+')) ['We', 'are', 'seeking', 'developers', 'with', 'demonstrable', 'experience', 'in', 'ASP', 'NET', 'C', 'SQL', 'Server', 'and', 'AngularJS']\n```", "```py\nprint(wordpunct_tokenize(first_sentence))\n['We', 'are', 'seeking', 'developers', 'with', 'demonstrable', 'experience', 'in', ':', 'ASP', '.', 'NET', ',', 'C', '#,', 'SQL', 'Server', ',', 'and', 'AngularJS', '.']\n```", "```py\nprint(blankline_tokenize(first_sentence))\n['We are seeking developers with demonstrable experience in: ASP.NET, C#, SQL Server, and AngularJS.']\n```", "```py\n>>> from nltk.stem import PorterStemmer\n>>> pst = PorterStemmer() >>> pst.stem('fishing') 'fish'\n```", "```py\npst = PorterStemmer() lst = LancasterStemmer() print(\"Stemming results:\")   for token in regexp_tokenize(sentences[0], pattern='\\w+'):\n  print(token, pst.stem(token), lst.stem(token))\n```", "```py\nStemming results:\nWe We we\nare are ar\nseeking seek seek\ndevelopers develop develop\nwith with with\ndemonstrable demonstr demonst\nexperience experi expery\nin in in\nASP asp asp\nNET net net\nC C c\nSQL sql sql\nServer server serv\nand and and\nAngularJS angularj angulars\n```", "```py\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.lancaster import LancasterStemmer\nfrom nltk.stem import WordNetLemmatizer\n\npst = PorterStemmer() lst = LancasterStemmer() wnl = WordNetLemmatizer()   print(\"Stemming / lemmatization results\") for token in regexp_tokenize(sentences[0], pattern='\\w+'):\n  print(token, pst.stem(token), lst.stem(token), wnl.lemmatize(token))\n```", "```py\nStemming / lemmatization results\nWe We we We\nare are ar are\nseeking seek seek seeking\ndevelopers develop develop developer\nwith with with with\ndemonstrable demonstr demonst demonstrable\nexperience experi expery experience\nin in in in\nASP asp asp ASP\nNET net net NET\nC C c C\nSQL sql sql SQL\nServer server serv Server\nand and and and\nAngularJS angularj angulars AngularJS\n```", "```py\n>>> from nltk.corpus import stopwords\n```", "```py\n>>> stoplist = stopwords.words('english')\n```", "```py\n>>> len(stoplist) 153\n```", "```py\n>>> stoplist\n ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', 'couldn', 'didn', 'doesn', 'hadn', 'hasn', 'haven', 'isn', 'ma', 'mightn', 'mustn', 'needn', 'shan', 'shouldn', 'wasn', 'weren', 'won', 'wouldn']\n```", "```py\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.tokenize import regexp_tokenize\nfrom nltk.corpus import stopwords\n\nwith open('sentence1.txt', 'r') as myfile:\n  data = myfile.read().replace('\\n', '')   sentences = sent_tokenize(data) first_sentence = sentences[0]   print(\"Original sentence:\") print(first_sentence)\n```", "```py\nOriginal sentence:\nWe are seeking developers with demonstrable experience in: ASP.NET, C#, SQL Server, and AngularJS.\n```", "```py\ntokenized = regexp_tokenize(first_sentence, '\\w+') print(\"Tokenized:\", tokenized)\n```", "```py\nTokenized: ['We', 'are', 'seeking', 'developers', 'with', 'demonstrable', 'experience', 'in', 'ASP', 'NET', 'C', 'SQL', 'Server', 'and', 'AngularJS']\n```", "```py\nstoplist = stopwords.words('english') cleaned = [word for word in tokenized if word not in stoplist] print(\"Cleaned:\", cleaned)\n```", "```py\nCleaned: ['We', 'seeking', 'developers', 'demonstrable', 'experience', 'ASP', 'NET', 'C', 'SQL', 'Server', 'AngularJS']\n```", "```py\nfrom nltk.probabilities import FreqDist\nfrom nltk.tokenize import regexp_tokenize\nfrom nltk.corpus import stopwords\n```", "```py\nwith open('wotw.txt', 'r') as file:\n  data = file.read() tokens = [word.lower() for word in regexp_tokenize(data, '\\w+')] stoplist = stopwords.words('english') without_stops = [word for word in tokens if word not in stoplist]\n```", "```py\nfreq_dist = FreqDist(without_stops)\n```", "```py\nprint('Number of words: %s' % len(freq_dist)) for key in freq_dist.keys():\n  print(key, freq_dist[key])\n**Number of words: 6613\nshall 8\ndwell 1\nworlds 2\ninhabited 1\nlords 1\nworld 26\nthings 64**\n```", "```py\nprint(freq_dist.most_common(10))\n[('one', 201), ('upon', 172), ('said', 166), ('martians', 164), ('people', 159), ('came', 151), ('towards', 129), ('saw', 129), ('man', 126), ('time', 122)] \n```", "```py\nprint(freq_dist.most_common()[-10:])\n[('bitten', 1), ('gibber', 1), ('fiercer', 1), ('paler', 1), ('uglier', 1), ('distortions', 1), ('haunting', 1), ('mockery', 1), ('beds', 1), ('seers', 1)]\n```", "```py\ndist_1 = [item[0] for item in freq_dist.items() if item[1] == 1] print(len(dist_1), dist_1)\n\n3224 ['dwell', 'inhabited', 'lords', 'kepler', 'quoted', 'eve', 'mortal', 'scrutinised', 'studied', 'scrutinise', 'multiply', 'complacency', 'globe', 'infusoria', ...\n```", "```py\nwith open('wotw.txt', 'r') as file:\n  data = file.read()   tokens = [word.lower() for word in regexp_tokenize(data, '\\w+')] stoplist = stopwords.words('english') without_stops = [word for word in tokens if word not in stoplist]   freq_dist = FreqDist(without_stops)   print('Number of words: %s' % len(freq_dist))   # all words with one occurrence dist = [item[0] for item in freq_dist.items() if item[1] <= 2] print(len(dist)) not_rare = [word for word in without_stops if word not in dist]   freq_dist2 = FreqDist(not_rare) print(len(freq_dist2))\n```", "```py\nNumber of words: 6613\n4361\n2252\n```", "```py\nshort_word_len = 3 short_words = [word for word in freq_dist.keys() if len(word) <= short_word_len] print('Distinct # of words of len <= %s: %s' % (short_word_len, len(short_words))) \n```", "```py\nDistinct # of words of len <= 3: 184\n```", "```py\nunshort_words = [word for word in freq_dist.keys() if len(word) > short_word_len] print('Distinct # of word > len %s: %s' % (short_word_len, len(unshort_words)))\n```", "```py\nDistinct # of word > len 3: 6429\n```", "```py\n>>> content = \"Strong programming experience in C#, ASP.NET/MVC, JavaScript/jQuery and SQL Server\" >>> tokenized = word_tokenize(content) >>> stop_list = stopwords.words('english') >>> cleaned = [word for word in tokenized if word not in stop_list] >>> print(cleaned)\n['Strong', 'programming', 'experience', 'C', '#', ',', 'ASP.NET/MVC', ',', 'JavaScript/jQuery', 'SQL', 'Server'] \n```", "```py\n>>> punctuation_marks = [':', ',', '.', \"``\", \"''\", '(', ')', '-', '!', '#'] >>> tokens_cleaned = [word for word in cleaned if word not in punctuation_marks] >>> print(tokens_cleaned)\n['Strong', 'programming', 'experience', 'C', 'ASP.NET/MVC', 'JavaScript/jQuery', 'SQL', 'Server']\n```", "```py\ndef remove_punctuation(tokens):\n  punctuation = [':', ',', '.', \"``\", \"''\", '(', ')', '-', '!', '#']\n  return [token for token in tokens if token not in punctuation]\n```", "```py\n>>> word_tokenize(\"C#\") ['C', '#']\n```", "```py\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n\nwith open('job-snippet.txt', 'r') as file:\n  data = file.read()   tokens = [word.lower() for word in word_tokenize(data)] stoplist = stopwords.words('english') without_stops = [word for word in tokens if word not in stoplist] print(without_stops)\n```", "```py\n['seeking', 'developers', 'demonstrable', 'experience', ':', 'asp.net', ',', 'c', '#', ',', 'sql', 'server', ',', 'angularjs', '.', 'fast-paced', ',', 'highly', 'iterative', 'team', 'adapt', 'quickly', 'factory', 'grows', '.']\n```", "```py\ngrams = {\n  \"c\": [{\"#\": \"\"}],\n  \"sql\": [{\"server\": \" \"}],\n  \"fast\": [{\"paced\": \"-\"}],\n  \"highly\": [{\"iterative\": \" \"}],\n  \"adapt\": [{\"quickly\": \" \"}],\n  \"demonstrable\": [{\"experience\", \" \"}]\n}\n```", "```py\ndef build_2grams(tokens, patterns):\n  results = []\n  left_token = None\n for i, t in enumerate(tokens):\n  if left_token is None:\n  left_token = t\n            continue    right_token = t\n\n        if left_token.lower() in patterns:\n  right = patterns[left_token.lower()]\n  if right_token.lower() in right:\n  results.append(left_token + right[right_token.lower()] + right_token)\n  left_token = None\n else:\n  results.append(left_token)\n  else:\n  results.append(left_token)\n  left_token = right_token\n\n    if left_token is not None:\n  results.append(left_token)\n  return results\n```", "```py\ngrams = {\n  'c': {'#': ''} } print(build_2grams(['C'], grams)) print(build_2grams(['#'], grams)) print(build_2grams(['C', '#'], grams)) print(build_2grams(['c', '#'], grams))\n```", "```py\n['C']\n['#']\n['C#']\n['c#']\n```", "```py\ngrams = {\n  \"c\": {\"#\": \"\"},\n  \"sql\": {\"server\": \" \"},\n  \"fast\": {\"paced\": \"-\"},\n  \"highly\": {\"iterative\": \" \"},\n  \"adapt\": {\"quickly\": \" \"},\n  \"demonstrable\": {\"experience\": \" \"},\n  \"full\": {\"stack\": \" \"},\n  \"enterprise\": {\"software\": \" \"},\n  \"bachelor\": {\"s\": \"'\"},\n  \"computer\": {\"science\": \" \"},\n  \"data\": {\"science\": \" \"},\n  \"current\": {\"trends\": \" \"},\n  \"real\": {\"world\": \" \"},\n  \"paid\": {\"relocation\": \" \"},\n  \"web\": {\"server\": \" \"},\n  \"relational\": {\"database\": \" \"},\n  \"no\": {\"sql\": \" \"} }   with open('job-snippet.txt', 'r') as file:\n  data = file.read()   tokens = word_tokenize(data) stoplist = stopwords.words('english') without_stops = [word for word in tokens if word not in stoplist] result = remove_punctuation(build_2grams(without_stops, grams)) print(result)\n```", "```py\n['We', 'seeking', 'developers', 'demonstrable experience', 'ASP.NET', 'C#', 'SQL Server', 'AngularJS', 'We', 'fast-paced', 'highly iterative', 'team', 'adapt quickly', 'factory', 'grows']\n```", "```py\nwith open(\"spacex-job-listing.txt\", \"r\") as file:\n  content = file.read()\n```", "```py\nbs = BeautifulSoup(content, \"lxml\") script_tag = bs.find(\"script\", {\"type\": \"application/ld+json\"})\n```", "```py\njob_listing_contents = json.loads(script_tag.contents[0]) print(job_listing_contents)\n```", "```py\n{'@context': 'http://schema.org', '@type': 'JobPosting', 'title': 'SpaceX Enterprise Software Engineer, Full Stack', 'skills': ['c#', 'sql', 'javascript', 'asp.net', 'angularjs'], 'description': '<h2>About this job</h2>\\r\\n<p><span>Location options: <strong>Paid relocation</strong></span><br/><span>Job type: <strong>Permanent</strong></span><br/><span>Experience level: <strong>Mid-Level, Senior</strong></span><br/><span>Role: <strong>Full Stack Developer</strong></span><br/><span>Industry: <strong>Aerospace, Information Technology, Web Development</strong></span><br/><span>Company size: <strong>1k-5k people</strong></span><br/><span>Company type: <strong>Private</strong></span><br/></p><br/><br/><h2>Technologies</h2> <p>c#, sql, javascript, asp.net, angularjs</p> <br/><br/><h2>Job description</h2> <p><strong>Full Stack Enterprise&nbsp;Software Engineer</strong></p>\\r\\n<p>The EIS (Enterprise Information Systems) team writes the software that builds rockets and powers SpaceX. We are responsible for \n```", "```py\n# print the skills for skill in job_listing_contents[\"skills\"]:\n  print(skill)\n```", "```py\nc#\nsql\njavascript\nasp.net\nangularjs\n```", "```py\ndesc_bs = BeautifulSoup(job_listing_contents[\"description\"], \"lxml\") print(desc_bs) <p><span>Location options: <strong>Paid relocation</strong></span><br/><span>Job type: <strong>Permanent</strong></span><br/><span>Experience level: <strong>Mid-Level, Senior</strong></span><br/><span>Role: <strong>Full Stack Developer</strong></span><br/><span>Industry: <strong>Aerospace, Information Technology, Web Development</strong></span><br/><span>Company size: <strong>1k-5k people</strong></span><br/><span>Company type: <strong>Private</strong></span><br/></p><br/><br/><h2>Technologies</h2> <p>c#, sql, javascript, asp.net, angularjs</p> <br/><br/><h2>Job description</h2> <p><strong>Full Stack Enterprise Software Engineer</strong></p>\n<p>The EIS (Enterprise Information Systems) team writes the software that builds rockets and powers SpaceX. We are responsible for all of the software on the factory floor, the warehouses, the financial systems, the restaurant, and even the public home page. Elon has called us the \"nervous system\" of SpaceX because we connect all of the other teams at SpaceX to ensure that the entire rocket building process runs smoothly.</p>\n<p><strong>Responsibilities:</strong></p>\n<ul>\n<li>We are seeking developers with demonstrable experience in: ASP.NET, C#, SQL Server, and AngularJS. We are a fast-paced, highly iterative team that has to adapt quickly as our factory grows. We need people who are comfortable tackling new problems, innovating solutions, and interacting with every facet of the company on a daily basis. Creative, motivated, able to take responsibility and support the applications you create. Help us get rockets out the door faster!</li>\n</ul>\n<p><strong>Basic Qualifications:</strong></p>\n<ul>\n<li>Bachelor's degree in computer science, engineering, physics, mathematics, or similar technical discipline.</li>\n<li>3+ years of experience developing across a full-stack:  Web server, relational database, and client-side (HTML/Javascript/CSS).</li>\n</ul>\n<p><strong>Preferred Skills and Experience:</strong></p>\n<ul>\n<li>Database - Understanding of SQL. Ability to write performant SQL. Ability to diagnose queries, and work with DBAs.</li>\n<li>Server - Knowledge of how web servers operate on a low-level. Web protocols. Designing APIs. How to scale web sites. Increase performance and diagnose problems.</li>\n<li>UI - Demonstrated ability creating rich web interfaces using a modern client side framework. Good judgment in UX/UI design.  Understands the finer points of HTML, CSS, and Javascript - know which tools to use when and why.</li>\n<li>System architecture - Knowledge of how to structure a database, web site, and rich client side application from scratch.</li>\n<li>Quality - Demonstrated usage of different testing patterns, continuous integration processes, build deployment systems. Continuous monitoring.</li>\n<li>Current - Up to date with current trends, patterns, goings on in the world of web development as it changes rapidly. Strong knowledge of computer science fundamentals and applying them in the real-world.</li>\n</ul> <br/><br/></body></html>\n```", "```py\njust_text = desc_bs.find_all(text=True) print(just_text)\n\n['About this job', '\\n', 'Location options: ', 'Paid relocation', 'Job type: ', 'Permanent', 'Experience level: ', 'Mid-Level, Senior', 'Role: ', 'Full Stack Developer', 'Industry: ', 'Aerospace, Information Technology, Web Development', 'Company size: ', '1k-5k people', 'Company type: ', 'Private', 'Technologies', ' ', 'c#, sql, javascript, asp.net, angularjs', ' ', 'Job description', ' ', 'Full Stack Enterprise\\xa0Software Engineer', '\\n', 'The EIS (Enterprise Information Systems) team writes the software that builds rockets and powers SpaceX. We are responsible for all of the software on the factory floor, the warehouses, the financial systems, the restaurant, and even the public home page. Elon has called us the \"nervous system\" of SpaceX because we connect all of the other teams at SpaceX to ensure that the entire rocket building process runs smoothly.', '\\n', 'Responsibilities:', '\\n', '\\n', 'We are seeking developers with demonstrable experience in: ASP.NET, C#, SQL Server, and AngularJS. We are a fast-paced, highly iterative team that has to adapt quickly as our factory grows. We need people who are comfortable tackling new problems, innovating solutions, and interacting with every facet of the company on a daily basis. Creative, motivated, able to take responsibility and support the applications you create. Help us get rockets out the door faster!', '\\n', '\\n', 'Basic Qualifications:', '\\n', '\\n', \"Bachelor's degree in computer science, engineering, physics, mathematics, or similar technical discipline.\", '\\n', '3+ years of experience developing across a full-stack:\\xa0 Web server, relational database, and client-side (HTML/Javascript/CSS).', '\\n', '\\n', 'Preferred Skills and Experience:', '\\n', '\\n', 'Database - Understanding of SQL. Ability to write performant SQL. Ability to diagnose queries, and work with DBAs.', '\\n', 'Server - Knowledge of how web servers operate on a low-level. Web protocols. Designing APIs. How to scale web sites. Increase performance and diagnose problems.', '\\n', 'UI - Demonstrated ability creating rich web interfaces using a modern client side framework. Good judgment in UX/UI design.\\xa0 Understands the finer points of HTML, CSS, and Javascript - know which tools to use when and why.', '\\n', 'System architecture - Knowledge of how to structure a database, web site, and rich client side application from scratch.', '\\n', 'Quality - Demonstrated usage of different testing patterns, continuous integration processes, build deployment systems. Continuous monitoring.', '\\n', 'Current - Up to date with current trends, patterns, goings on in the world of web development as it changes rapidly. Strong knowledge of computer science fundamentals and applying them in the real-world.', '\\n', ' ']\n```", "```py\njoined = ' '.join(just_text) tokens = word_tokenize(joined)   stop_list = stopwords.words('english') with_no_stops = [word for word in tokens if word not in stop_list] cleaned = remove_punctuation(two_grammed) print(cleaned)\n```", "```py\n['job', 'Location', 'options', 'Paid relocation', 'Job', 'type', 'Permanent', 'Experience', 'level', 'Mid-Level', 'Senior', 'Role', 'Full-Stack', 'Developer', 'Industry', 'Aerospace', 'Information Technology', 'Web Development', 'Company', 'size', '1k-5k', 'people', 'Company', 'type', 'Private', 'Technologies', 'c#', 'sql', 'javascript', 'asp.net', 'angularjs', 'Job', 'description', 'Full-Stack', 'Enterprise Software', 'Engineer', 'EIS', 'Enterprise', 'Information', 'Systems', 'team', 'writes', 'software', 'builds', 'rockets', 'powers', 'SpaceX', 'responsible', 'software', 'factory', 'floor', 'warehouses', 'financial', 'systems', 'restaurant', 'even', 'public', 'home', 'page', 'Elon', 'called', 'us', 'nervous', 'system', 'SpaceX', 'connect', 'teams', 'SpaceX', 'ensure', 'entire', 'rocket', 'building', 'process', 'runs', 'smoothly', 'Responsibilities', 'seeking', 'developers', 'demonstrable experience', 'ASP.NET', 'C#', 'SQL Server', 'AngularJS', 'fast-paced', 'highly iterative', 'team', 'adapt quickly', 'factory', 'grows', 'need', 'people', 'comfortable', 'tackling', 'new', 'problems', 'innovating', 'solutions', 'interacting', 'every', 'facet', 'company', 'daily', 'basis', 'Creative', 'motivated', 'able', 'take', 'responsibility', 'support', 'applications', 'create', 'Help', 'us', 'get', 'rockets', 'door', 'faster', 'Basic', 'Qualifications', 'Bachelor', \"'s\", 'degree', 'computer science', 'engineering', 'physics', 'mathematics', 'similar', 'technical', 'discipline', '3+', 'years', 'experience', 'developing', 'across', 'full-stack', 'Web server', 'relational database', 'client-side', 'HTML/Javascript/CSS', 'Preferred', 'Skills', 'Experience', 'Database', 'Understanding', 'SQL', 'Ability', 'write', 'performant', 'SQL', 'Ability', 'diagnose', 'queries', 'work', 'DBAs', 'Server', 'Knowledge', 'web', 'servers', 'operate', 'low-level', 'Web', 'protocols', 'Designing', 'APIs', 'scale', 'web', 'sites', 'Increase', 'performance', 'diagnose', 'problems', 'UI', 'Demonstrated', 'ability', 'creating', 'rich', 'web', 'interfaces', 'using', 'modern', 'client-side', 'framework', 'Good', 'judgment', 'UX/UI', 'design', 'Understands', 'finer', 'points', 'HTML', 'CSS', 'Javascript', 'know', 'tools', 'use', 'System', 'architecture', 'Knowledge', 'structure', 'database', 'web', 'site', 'rich', 'client-side', 'application', 'scratch', 'Quality', 'Demonstrated', 'usage', 'different', 'testing', 'patterns', 'continuous integration', 'processes', 'build', 'deployment', 'systems', 'Continuous monitoring', 'Current', 'date', 'current trends', 'patterns', 'goings', 'world', 'web development', 'changes', 'rapidly', 'Strong', 'knowledge', 'computer science', 'fundamentals', 'applying', 'real-world']\n```"]