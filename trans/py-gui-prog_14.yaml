- en: Event Handling - Signals and Slots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理-信号和插槽
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Using Signal/Slot Editor
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用信号/插槽编辑器
- en: Copying and pasting text from one Line Edit widget to another
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个*Line Edit*小部件复制并粘贴文本到另一个*Line Edit*小部件
- en: Converting data types and making a small calculator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换数据类型并制作一个小型计算器
- en: Using the Spin Box widget
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用旋转框小部件
- en: Using scrollbars and sliders
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用滚动条和滑块
- en: Using List Widget
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列表小部件
- en: Selecting multiple list items from one List Widget and displaying them in another
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个列表小部件中选择多个列表项，并在另一个列表中显示它们
- en: Adding items into List Widget
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目添加到列表小部件中
- en: Performing operations in List Widget
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表小部件中执行操作
- en: Using the Combo Box widget
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用组合框小部件
- en: Using the Font Combo Box widget
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字体组合框小部件
- en: Using the Progress Bar widget
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用进度条小部件
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Event handling is an important mechanism in every application. The application
    should not only recognize the event, but must take the respective action to serve
    the event, too. The action taken on any event determines the course of the application.
    Each programming language has a different technique for handling or listening
    to events. Let's see how Python handles its events.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理是每个应用程序中的重要机制。应用程序不仅应该识别事件，还必须采取相应的行动来服务事件。在任何事件上采取的行动决定了应用程序的进程。每种编程语言都有不同的处理或监听事件的技术。让我们看看Python如何处理其事件。
- en: Using Signal/Slot Editor
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用信号/插槽编辑器
- en: In PyQt, the event handling mechanism is also known as **signals** and **slots**.
    An event can be in the form of clicking or double-clicking on a widget, or pressing
    the *Enter* key, or selecting an option from a radio button, checkbox, and so
    on. Every widget emits a signal when any event is applied on it and, that signal
    needs to be connected to a method, also known as a slot. A slot refers to the
    method containing the code that you want to be executed on the occurrence of a
    signal. Most widgets have predefined slots; you don't have to write code to connect
    a predefined signal to a predefined slot.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyQt中，事件处理机制也被称为**信号**和**插槽**。事件可以是在小部件上单击或双击的形式，或按下*Enter*键，或从单选按钮、复选框等中选择选项。每个小部件在应用事件时都会发出一个信号，该信号需要连接到一个方法，也称为插槽。插槽是指包含您希望在发生信号时执行的代码的方法。大多数小部件都有预定义的插槽；您不必编写代码来将预定义的信号连接到预定义的插槽。
- en: You can even edit a signal/slot by navigating to the Edit | Edit Signals/Slots
    tool in the toolbar.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以通过导航到工具栏中的编辑|编辑信号/插槽工具来编辑信号/插槽。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To edit the signals and slots of different widgets placed on the form, you
    need to switch to signals and slots editing mode by performing the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑放置在表单上的不同小部件的信号和插槽，您需要执行以下步骤切换到信号和插槽编辑模式：
- en: You can press the *F4* key, navigate to the Edit | Edit Signals/Slots option,
    or select the Edit Signals/Slots icon from the toolbar. The mode displays all
    the signal and slot connections in the form of arrows, indicating the connection
    of a widget with its respective slot.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以按*F4*键，导航到编辑|编辑信号/插槽选项，或从工具栏中选择编辑信号/插槽图标。该模式以箭头的形式显示所有信号和插槽连接，指示小部件与其相应插槽的连接。
- en: You can also create new signal and slot connections between widgets in this
    mode and delete an existing signal.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在此模式下创建小部件之间的新信号和插槽连接，并删除现有信号。
- en: To establish a signal and slot connection between two widgets in a form, select
    a widget by left-clicking the mouse on the widget, dragging the mouse towards
    another widget to which you want to connect, and releasing the mouse button over
    it.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在表单中的两个小部件之间建立信号和插槽连接，请通过在小部件上单击鼠标，将鼠标拖向要连接的另一个小部件，然后释放鼠标按钮来选择小部件。
- en: To cancel the connection while dragging the mouse, simply press the *Esc* key.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在拖动鼠标时取消连接，只需按下*Esc*键。
- en: On releasing the mouse over the destination widget, a Connection Dialog box
    appears, prompting you to select a signal from the source widget and a slot from
    the destination widget.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在释放鼠标到达目标小部件时，将出现“连接对话框”，提示您从源小部件中选择信号和从目标小部件中选择插槽。
- en: After selecting the respective signal and slot, select OK to establish the signal
    and slot connection.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择相应的信号和插槽后，选择“确定”以建立信号和插槽连接。
- en: 'The following screenshot shows dragging a Push Button over a Line Edit widget:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了将*Push Button*拖动到*Line Edit*小部件上：
- en: '![](assets/44ba5e6d-dc82-49fc-a7b8-db7d21c9ff08.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/44ba5e6d-dc82-49fc-a7b8-db7d21c9ff08.png)'
- en: 'On releasing the mouse button on the Line Edit widget, you get the list of
    predefined signals and slots, as shown in the following screenshot:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*Line Edit*小部件上释放鼠标按钮后，您将获得预定义信号和插槽的列表，如下图所示：
- en: '![](assets/6236b767-2cf0-4da3-bc9b-f585ceb40395.png)You can also select Cancel
    in the Configure Connection dialog box to cancel the signal and slot connection.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6236b767-2cf0-4da3-bc9b-f585ceb40395.png)您还可以在“配置连接”对话框中选择取消以取消信号和插槽连接。'
- en: When connected, the selected signal and slot will appear as labels in the arrow,
    connecting the two widgets.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接后，所选信号和插槽将显示为箭头中的标签，连接两个小部件。
- en: To modify a signal and slot connection, double-click the connection path or
    one of its labels to display the Configure Connection dialog box.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要修改信号和插槽连接，请双击连接路径或其标签之一，以显示“配置连接”对话框。
- en: From the Configure Connection dialog, you can edit a signal or a slot as desired.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“配置连接”对话框中，您可以根据需要编辑信号或插槽。
- en: To delete a signal and slot connection, select its arrow on the form and press
    the *Delete* key.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除信号和插槽连接，请在表单上选择其箭头，然后按*删除*键。
- en: 'The signal and slot connection can also be established between any widget and
    the form. To do so, you can perform the following steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 信号和插槽连接也可以在任何小部件和表单之间建立。为此，您可以执行以下步骤：
- en: Select the widget, drag the mouse, and release the mouse button over the form.
    The end point of the connection changes to the electrical ground symbol, representing
    that a connection has been established with the form.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择小部件，拖动鼠标，并释放鼠标按钮到表单上。连接的终点会变成电气接地符号，表示已经在表单上建立了连接。
- en: To come out of signal and slot editing mode, navigate to Edit | Edit Widgets
    or press the *F3* key.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要退出信号和插槽编辑模式，导航到Edit | Edit Widgets或按下*F3*键。
- en: Copying and pasting text from one Line Edit widget to another
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一个Line Edit小部件复制文本并粘贴到另一个
- en: This recipe will make you understand how an event performed on one widget invokes
    a predefined action on the associated widget. Because we want to copy content
    from one Line Edit widget on clicking the push button, we need to invoke the `selectAll()` method
    on the occurrence of the pressed() event on push button. Also, we need to invoke
    the `copy()` method on occurrence of the released() event on the push button.
    To paste the content in the clipboard into another Line Edit widget on clicking
    of another push button, we need to invoke the `paste()` method on the occurrence
    of the clicked() event on another push button.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将让您了解一个小部件上执行的事件如何调用相关小部件上的预定义动作。因为我们希望在点击推按钮时从一个Line Edit小部件复制内容，所以我们需要在推按钮的pressed()事件发生时调用`selectAll()`方法。此外，我们需要在推按钮的released()事件发生时调用`copy()`方法。要在点击另一个推按钮时将剪贴板中的内容粘贴到另一个Line
    Edit小部件中，我们需要在另一个推按钮的clicked()事件发生时调用`paste()`方法。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Let's create an application that consists of two Line Edit and two Push Button
    widgets. On clicking the first push button, the text in the first Line Edit widget
    will be copied and on clicking the second push button, the text copied from the
    first Line Edit widget will be pasted onto the second Line Edit widget.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包含两个Line Edit和两个Push Button小部件的应用程序。点击第一个推按钮时，第一个Line Edit小部件中的文本将被复制，点击第二个推按钮时，从第一个Line
    Edit小部件中复制的文本将被粘贴到第二个Line Edit小部件中。
- en: 'Let''s create a new application based on the Dialog without Buttons template
    by performing the following steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据无按钮对话框模板创建一个新应用程序，执行以下步骤：
- en: Begin by adding `QLineEdit` and `QPushButton` to the form by dragging and dropping
    the Line Edit and Push Button widgets from the Widget box on the form.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从小部件框中将Line Edit和Push Button小部件拖放到表单上，开始添加`QLineEdit`和`QPushButton`。
- en: To preview a form while editing, select either Form, Preview, or use *Ctrl*
    + *R* .
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑时预览表单，选择Form、Preview，或使用*Ctrl* + *R*。
- en: To copy the text of the Line Edit widget when the user selects the push button
    on the form, you need to connect the push button's signal to the slot of Line
    Edit. Let's learn how to do it.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在用户在表单上选择推按钮时复制Line Edit小部件的文本，您需要将推按钮的信号连接到Line Edit的插槽。让我们学习如何做到这一点。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Initially, the form is in widget editing mode, and to apply signal and slot
    connections, you need to first switch to signals and slots editing mode:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，表单处于小部件编辑模式，要应用信号和插槽连接，您需要首先切换到信号和插槽编辑模式：
- en: Select the Edit Signals/Slots icon from the toolbar to switch to signals and
    slots editing mode.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具栏中选择编辑信号/插槽图标，切换到信号和插槽编辑模式。
- en: 'On the form, select the push button, drag the mouse to the Line Edit widget,
    and release the mouse button. The Configure Connection dialog will pop up, allowing
    you to establish a signal and slot connection between the Push Button and the
    Line Edit widgets, as shown in the following screenshot:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单上，选择推按钮，拖动鼠标到Line Edit小部件上，然后释放鼠标按钮。配置连接对话框将弹出，允许您在Push Button和Line Edit小部件之间建立信号和插槽连接，如下截图所示：
- en: '![](assets/a35a1ce3-4efe-436f-9082-068d9263932a.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a35a1ce3-4efe-436f-9082-068d9263932a.png)'
- en: Select the pressed() event or signal from the pushButton (QPushButton) tab and
    the selectAll() slot for the lineEdit (QLineEdit) tab.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从pushButton (QPushButton)选项卡中选择pressed()事件或信号，从lineEdit (QLineEdit)选项卡中选择selectAll()插槽。
- en: 'The connected signal of the Push Button widget with the slot of Line Edit will
    appear in the form of an arrow, representing the signal and slot connection between
    the two widgets, as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Push Button小部件与Line Edit的连接信号将以箭头的形式显示，表示两个小部件之间的信号和插槽连接，如下截图所示：
- en: '![](assets/76b97b24-9475-4591-a360-15a724c1cc19.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/76b97b24-9475-4591-a360-15a724c1cc19.png)'
- en: Set the text property of the Push Button widget to `Copy` to represent the fact
    that it will copy the text entered in the Line Edit widget.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为`Copy`，表示它将复制Line Edit小部件中输入的文本。
- en: 'Next, we will repeat the procedure of clicking the push button and dragging
    it to the Line Edit widget to connect the released() signal of the push button
    with the copy() slot of the Line Edit widget. On the form, you will see another
    arrow, representing the second signal and slot connection established between
    the two widgets, as is shown in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将重复点击推按钮并将其拖动到Line Edit小部件上，以连接push按钮的released()信号与Line Edit小部件的copy()插槽。在表单上，您将看到另一个箭头，表示两个小部件之间建立的第二个信号和插槽连接，如下截图所示：
- en: '![](assets/3a3fca9d-bd78-4f3a-9756-17182366be2c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a3fca9d-bd78-4f3a-9756-17182366be2c.png)'
- en: In order to paste the copied content, drag and drop one push button and one
    Line Edit widget on the form.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了粘贴复制的内容，将一个推按钮和一个Line Edit小部件拖放到表单上。
- en: Set the text property of the Push Button widget to `Paste`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为`Paste`。
- en: Click the push button and, keeping the mouse button pressed, drag it and release
    it on the Line Edit widget.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击推按钮，按住鼠标按钮拖动，然后释放到Line Edit小部件上。
- en: From the Configure Connection dialog, select the clicked() event from the pushButton
    (QPushButton) column and the paste() slot from the lineEdit (QLineEdit) column.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从配置连接对话框中，选择pushButton (QPushButton)列中的clicked()事件和lineEdit (QLineEdit)列中的paste()插槽。
- en: 'Save the form with the name `demoSignal1.ui`. The form will now appear as shown
    in the following screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表单保存为`demoSignal1.ui`。表单现在将显示如下截图所示：
- en: '![](assets/4d966c42-f1e8-4711-8c50-3ac51135e31c.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4d966c42-f1e8-4711-8c50-3ac51135e31c.png)'
- en: 'The form will be saved in a file with the `.ui` extension. The `demoSignal1.ui`
    file will contain all the information of the form, its widgets, layout, and so
    on. The `.ui` file is an XML file, and it needs to be converted into Python code
    by making use of the `pyuic5` utility. The generated Python code file, `demoSignal1.py`,
    can be seen in the source code bundle of this book.  In the `demoSignal1.py` file,
    you will find that it imports everything from both modules, `QtCore` and `QtGui`,
    as you will be needing them for developing GUI applications:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 表单将保存在扩展名为`.ui`的文件中。`demoSignal1.ui`文件将包含表单的所有信息，包括其小部件、布局等。`.ui`文件是一个XML文件，需要使用`pyuic5`实用程序将其转换为Python代码。生成的Python代码文件`demoSignal1.py`可以在本书的源代码包中找到。在`demoSignal1.py`文件中，您会发现它从`QtCore`和`QtGui`两个模块中导入了所有内容，因为您将需要它们来开发GUI应用程序：
- en: '`QtCore`: The `QtCore` module forms the foundation of all Qt-based applications.
    It contains the most fundamental classes, such as `QCoreApplication`, `QObject`,
    and so on. These classes do important tasks, such as event handling, implementing
    the signal and slot mechanism, I/O operations, handling strings, and so on. The
    module includes several classes, including `QFile`, `QDir`, `QIODevice`, `QTimer`,
    `QString`, `QDate`, and `QTime`.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore`：`QtCore`模块构成了所有基于Qt的应用程序的基础。它包含了最基本的类，如`QCoreApplication`、`QObject`等。这些类执行重要的任务，如事件处理、实现信号和槽机制、I/O操作、处理字符串等。该模块包括多个类，包括`QFile`、`QDir`、`QIODevice`、`QTimer`、`QString`、`QDate`和`QTime`。'
- en: '`QtGui`: As the name suggests, the `QtGUI` module contains the classes required
    in developing cross-platform GUI applications. The module contains the GUI classes,
    such as `QCheckBox`, `QComboBox`, `QDateTimeEdit`, `QLineEdit`, `QPushButton`,
    `QPainter`, `QPaintDevice`, `QApplication`, `QTextEdit`, and `QTextDocument`.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui`：顾名思义，`QtGUI`模块包含了开发跨平台GUI应用程序所需的类。该模块包含了GUI类，如`QCheckBox`、`QComboBox`、`QDateTimeEdit`、`QLineEdit`、`QPushButton`、`QPainter`、`QPaintDevice`、`QApplication`、`QTextEdit`和`QTextDocument`。'
- en: Treat the `demoSignalSlot1.py` file, as a header file and import it to the file
    from which you will invoke its user interface design.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoSignalSlot1.py`文件视为头文件，并将其导入到您将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `calldemoSignal1.pyw` and import the
    `demoSignal1.py` code into it:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`calldemoSignal1.pyw`的Python文件，并将`demoSignal1.py`代码导入其中：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `sys` module is imported as it supplies access to the command-line arguments
    stored in the `sys.argv` list. This is because every PyQt GUI application must
    have a `QApplication` object to provide access to information such as the application's
    directory, screen size, and so on, so that you create an `QApplication` object.
    To enable PyQt to use and apply command-line arguments (if any), you pass the
    command-line arguments while creating a `QApplication` object. You create an instance
    of `MyForm` and call its `show()` method, which adds a new event to the `QApplication`
    object's event queue. This new event is used to display all the widgets specified
    in the `MyForm` class. The `app.exec_` method is called to start the `QApplication`
    object's event loop. Once the event loop begins, the top-level widget used in
    the class, `MyForm`, is displayed, along with its child widgets. All the system-generated
    events, as well as user interaction events, are added to the event queue. The
    application's event loop continuously checks to see whether an event has occurred.
    On the occurrence of an event, the event loop processes it and invokes the associated
    slot or method. On closing the top-level widget of the application, PyQt deletes
    the widget and performs a clean termination of the application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`sys`模块被导入，因为它提供了对存储在`sys.argv`列表中的命令行参数的访问。这是因为每个PyQt GUI应用程序必须有一个`QApplication`对象，以提供对应用程序目录、屏幕大小等信息的访问，因此您创建了一个`QApplication`对象。为了使PyQt能够使用和应用命令行参数（如果有的话），您在创建`QApplication`对象时传递命令行参数。您创建了`MyForm`的一个实例，并调用其`show()`方法，该方法向`QApplication`对象的事件队列中添加了一个新事件。这个新事件用于显示`MyForm`类中指定的所有小部件。调用`app.exec_`方法来启动`QApplication`对象的事件循环。一旦事件循环开始，`MyForm`类中使用的顶级小部件以及其子小部件将被显示。所有系统生成的事件以及用户交互事件都将被添加到事件队列中。应用程序的事件循环不断检查是否发生了事件。发生事件时，事件循环会处理它并调用相关的槽或方法。在关闭应用程序的顶级小部件时，PyQt会删除该小部件，并对应用程序进行清理终止。'
- en: In PyQt, any widget can be used as a top-level window. The `super().__init__()`
    method invokes the base class constructor from the `MyForm` class, that is, the
    constructor of the `QDialog` class is invoked from `MyForm` class to indicate
    that `QDialog` is displayed through this class is a top-level window.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyQt中，任何小部件都可以用作顶级窗口。`super().__init__()`方法从`MyForm`类中调用基类构造函数，即从`MyForm`类中调用`QDialog`类的构造函数，以指示通过该类显示`QDialog`是一个顶级窗口。
- en: The user interface design is instantiated by calling the `setupUI()` method
    of the class that was created in the Python code (`Ui_Dialog`). We create an instance
    of the `Ui_Dialog` class, the class that was created in the Python code, and invoke
    its `setupUi()` method. The Dialog widget will be created as the parent of all
    the user interface widgets and displayed on the screen. Remember, `QDialog`, `QMainWindow`,
    and all of the PyQt's widgets are derived from `QWidget`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用Python代码中创建的类的`setupUI()`方法来实例化用户界面设计（`Ui_Dialog`）。我们创建了`Ui_Dialog`类的一个实例，该类是在Python代码中创建的，并调用了它的`setupUi()`方法。对话框小部件将被创建为所有用户界面小部件的父级，并显示在屏幕上。请记住，`QDialog`、`QMainWindow`以及PyQt的所有小部件都是从`QWidget`派生的。
- en: On running the application, you get two pairs of the Line Edit and Push Button
    widgets. On typing text into one Line Edit widget, when you click the Copy push
    button, the text will be copied.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将获得两对行编辑和按钮小部件。在一个行编辑小部件中输入文本，当您单击复制按钮时，文本将被复制。
- en: 'Now, on clicking the Paste push button, the copied text will be pasted in the
    second Line Edit widget, as shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，单击粘贴按钮后，复制的文本将粘贴在第二个行编辑小部件中，如下截图所示：
- en: '![](assets/4555d238-8d6a-4315-bcb7-6f4b37d2e1b4.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4555d238-8d6a-4315-bcb7-6f4b37d2e1b4.png)'
- en: Converting data types and making a small calculator
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换数据类型并创建一个小型计算器
- en: The most commonly used widget for accepting one-line data is the Line Edit widget,
    and the default data type in a Line Edit widget is string. In order to do any
    computation on two integer values, you need to convert the string data entered
    in the Line Edit widget to the integer data type and then convert the result of
    computation, which will be a numeric data type, back to string type before being
    displaying through a Label widget. This recipe does exactly that.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接受单行数据最常用的小部件是行编辑小部件，行编辑小部件的默认数据类型是字符串。为了对两个整数值进行任何计算，需要将行编辑小部件中输入的字符串数据转换为整数数据类型，然后将计算结果（将是数值数据类型）转换回字符串类型，然后通过标签小部件显示。这个示例正是这样做的。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand how data is accepted by the user and how type casting is done,
    let''s create an application based on the Dialog without Buttons template by performing
    the following steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解用户如何接受数据以及如何进行类型转换，让我们创建一个基于对话框无按钮模板的应用程序，执行以下步骤：
- en: Add three `QLabel`, two `QLineEdit`, and one `QPushButton` widget to the form
    by dragging and dropping three Label, two Line Edit, and four Push Button widgets
    on the form.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放三个标签、两个行编辑和四个按钮小部件到表单上，向表单添加三个`QLabel`、两个`QLineEdit`和一个`QPushButton`小部件。
- en: Set the text property of the two Label widgets to `Enter First Number` and `Enter
    Second Number`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个标签小部件的文本属性设置为`输入第一个数字`和`输入第二个数字`。
- en: Set the objectName property of the three Labels to `labelFirstNumber`, `labelSecondNumber`,
    and `labelResult`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个标签的objectName属性设置为`labelFirstNumber`，`labelSecondNumber`和`labelResult`。
- en: Set the objectName property of the two Line Edit widgets to `lineEditFirstNumber`
    and `lineEditSecondNumber`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个行编辑小部件的objectName属性设置为`lineEditFirstNumber`和`lineEditSecondNumber`。
- en: Set the objectName property of the four Push Button widgets to `pushButtonPlus`,
    `pushButtonSubtract`, `pushButtonMultiply`, and `pushButtonDivide`, respectively.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个按钮小部件的objectName属性分别设置为`pushButtonPlus`，`pushButtonSubtract`，`pushButtonMultiply`和`pushButtonDivide`。
- en: Set the push button's text property to `+`, `-`, `x`, and `/`, respectively.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的文本属性分别设置为`+`，`-`，`x`和`/`。
- en: Delete the default text property of the third label, because the Python script
    will set the value and then display it when the two numerical values are added.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '删除第三个标签的默认文本属性，因为Python脚本将设置该值，并在添加两个数字值时显示它。 '
- en: Don't forget to drag the Label widget in the designer in order to ensure it
    is long enough to display the text that will be assigned to it through the Python
    script.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记在设计师中拖动标签小部件，以确保它足够长，可以显示通过Python脚本分配给它的文本。
- en: Save the UI file as `demoCalculator.ui`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将UI文件保存为`demoCalculator.ui`。
- en: 'You can also increase the width of the Label widget by setting the width property
    under geometry from the Property Editor window:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以通过在属性编辑器窗口中的geometry下设置宽度属性来增加标签小部件的宽度：
- en: '![](assets/78cf810c-5dc9-488b-8c9b-99978a6d18d5.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/78cf810c-5dc9-488b-8c9b-99978a6d18d5.png)'
- en: The `.ui` file, which is in XML format, needs to be converted into Python code.
    The generated Python code, `demoCalculator.py`, can be seen in the source code
    bundle of this book.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`.ui`文件以XML格式，需要转换为Python代码。生成的Python代码`demoCalculator.py`可以在本书的源代码包中看到。'
- en: 'Create a Python script named `callCalculator.pyw` that imports the Python code
    `demoCalculator.py` to invoke a user interface design, and that fetches the values
    entered in the Line Edit widgets and displays their addition. The code in the
    Python script `callCalculator.pyw` is shown here:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callCalculator.pyw`的Python脚本，导入Python代码`demoCalculator.py`来调用用户界面设计，并获取输入的行编辑小部件中的值，并显示它们的加法。Python脚本`callCalculator.pyw`中的代码如下所示：
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are the following four functions used in this code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码中使用了以下四个函数：
- en: '`len()`: This function returns the number of characters in the string'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`len()`: 这个函数返回字符串中的字符数'
- en: '`str()`: This function converts the argument passed into the string data type'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str()`: 这个函数将传递的参数转换为字符串数据类型'
- en: '`int()`: This function converts the argument passed into the integer data type'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int()`: 这个函数将传递的参数转换为整数数据类型'
- en: '`round()`: This function rounds the number passed to the specified decimal
    digits'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`round()`: 这个函数将传递的数字四舍五入到指定的小数位'
- en: The `clicked()` event of `pushButtonPlus` is connected to the `addtwonum()` method
    to display the sum of the numbers entered in the two Line Edit widgets. In the
    `addtwonum()` method, you first validate `lineEditFirstNumber` and `lineEditSecondNumber`
    to ensure that if either Line Edit is left blank by the user, the value of that
    Line Edit is zero.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`pushButtonPlus`的`clicked()`事件连接到`addtwonum()`方法，以显示在两个行编辑小部件中输入的数字的总和。在`addtwonum()`方法中，首先验证`lineEditFirstNumber`和`lineEditSecondNumber`，以确保用户是否将任一行编辑留空，如果是，则该行编辑的值为零。'
- en: 'The values entered in the two Line Edit widgets are retrieved, converted into
    integers through `int()`, and assigned to the two variables `a` and `b`. The sum
    of the values in the `a` and `b` variables is computed and stored in the `sum` variable.
    The result in the variable `sum` is converted into string format through `str` method
    and displayed via `labelResult`, as shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 检索两个行编辑小部件中输入的值，通过`int()`转换为整数，并赋值给两个变量`a`和`b`。计算`a`和`b`变量中的值的总和，并存储在`sum`变量中。通过`str`方法将变量`sum`中的结果转换为字符串格式，并通过`labelResult`显示，如下截图所示：
- en: '![](assets/c49fe2fa-a965-4712-9a07-2b38c64867e5.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c49fe2fa-a965-4712-9a07-2b38c64867e5.png)'
- en: Similarly, the `clicked()` event of `pushButtonSubtract` is connected to the
    `subtracttwonum()` method to display the subtraction of the numbers entered in
    the two Line Edit widgets. Again, after validation of the two Line Edit widgets,
    the values entered in them are retrieved and converted into integers. Subtraction
    is applied on the two numbers and the result is assigned to the `diff` variable.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`pushButtonSubtract`的`clicked()`事件连接到`subtracttwonum()`方法，以显示两个行编辑小部件中输入的数字的减法。再次，在验证两个行编辑小部件之后，检索并将其输入的值转换为整数。对这两个数字进行减法运算，并将结果分配给`diff`变量。
- en: 'Finally, the result in the `diff` variable is converted into string format
    through the `str()` method and displayed via `labelResult`, as shown in the following
    screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过`str()`方法将`diff`变量中的结果转换为字符串格式，并通过`labelResult`显示，如下面的屏幕截图所示：
- en: '![](assets/45370293-94db-4db0-975b-215463fc4a0b.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/45370293-94db-4db0-975b-215463fc4a0b.png)'
- en: Similarly, the clicked() event of `pushButtonMultiply` and `pushButtonDivide`
    are connected to the `multiplytwonum()` and `dividetwonum()` methods, respectively.
    These methods multiply and divide the values entered in the two Line Edit widgets
    and display them through the `labelResult` widget.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`pushButtonMultiply`和`pushButtonDivide`的`clicked()`事件分别连接到`multiplytwonum()`和`dividetwonum()`方法。这些方法将两个行编辑小部件中输入的值相乘和相除，并通过`labelResult`小部件显示它们。
- en: 'The result of the multiplication is shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法的结果如下所示：
- en: '![](assets/ed7ceb86-a691-4815-b23a-b6fa3495afbf.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ed7ceb86-a691-4815-b23a-b6fa3495afbf.png)'
- en: 'The result of the division is shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 除法的结果如下所示：
- en: '![](assets/984be4f4-3428-475e-9a52-702b4dfd181d.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/984be4f4-3428-475e-9a52-702b4dfd181d.png)'
- en: Using the Spin Box widget
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用旋转框小部件
- en: 'The Spin Box widget is used for displaying integer values, floating-point values,
    and text. It applies a constraint on the user: the user cannot enter any random
    data, but can select only from the available options displayed through Spin Box.
    A Spin Box widget displays an initial value by default that can be increased or
    decreased by selecting the up/down button or up/down arrow key on the keyboard.
    You can choose a value that is displayed by either clicking on it or typing it
    in manually.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转框小部件用于显示整数值、浮点值和文本。它对用户施加了约束：用户不能输入任意数据，但只能从旋转框显示的可用选项中进行选择。旋转框小部件默认显示初始值，可以通过选择上/下按钮或在键盘上按上/下箭头键来增加或减少该值。您可以通过单击或手动输入来选择要显示的值。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'A Spin Box widget can be created using two classes, `QSpinBox` and `QDoubleSpinBox`,
    where `QSpinBox` displays only integer values, and the `QDoubleSpinBox` class
    displays floating-point values. Methods provided by `QSpinBox` are shown in the
    following list:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转框小部件可以使用两个类`QSpinBox`和`QDoubleSpinBox`创建，其中`QSpinBox`仅显示整数值，而`QDoubleSpinBox`类显示浮点值。`QSpinBox`提供的方法如下所示：
- en: '`value()`: This method returns the current integer value selected from the
    spin box.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value()`: 此方法返回从旋转框中选择的当前整数值。'
- en: '`text()`: This method returns the text displayed by the spin box.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text()`: 此方法返回旋转框显示的文本。'
- en: '`setPrefix()`: This method assigns the prefix text that is prepended to the
    value returned by the spin box.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setPrefix()`: 此方法分配要添加到旋转框返回值之前的前缀文本。'
- en: '`setSuffix()`: This method assigns the suffix text that is to be appended to
    the value returned by the spin box.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setSuffix()`: 此方法分配要附加到旋转框返回值的后缀文本。'
- en: '`cleanText()`: This method returns the value of the spin box without a suffix,
    a prefix, or leading or trailing whitespaces.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cleanText()`: 此方法返回旋转框的值，不带后缀、前缀或前导或尾随空格。'
- en: '`setValue()`: This method assigns the value to the spin box.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setValue()`: 此方法分配值给旋转框。'
- en: '`setSingleStep()`: This method sets the step size of the spin box. Step size
    is the increment/decrement value of the spin box, that is, it is the value by
    which the spin box''s value will increase or decrease on selecting the up or down
    buttons.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setSingleStep()`: 此方法设置旋转框的步长。步长是旋转框的增量/减量值，即旋转框的值将通过选择上/下按钮或使用`setValue()`方法增加或减少的值。'
- en: '`setMinimum()`: This method sets the minimum value of the spin box.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setMinimum()`: 此方法设置旋转框的最小值。'
- en: '`setMaximum()`: This method sets the maximum value of the spin box.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setMaximum()`: 此方法设置旋转框的最大值。'
- en: '`setWrapping()`: This method passes the Boolean value true to this method to
    enable wrapping in the spin box. Wrapping means the spin box returns to the first
    value (minimum value) when the up button is pressed while displaying the maximum
    value.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setWrapping()`: 此方法将布尔值true传递给此方法，以启用旋转框中的包装。包装意味着当按下上按钮显示最大值时，旋转框返回到第一个值（最小值）。'
- en: 'Signals emitted by the `QSpinBox` class are as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSpinBox`类发出的信号如下：'
- en: 'valueChanged(): This signal is emitted when the value of the spin box is changed
    either by selecting the up/down button or using the `setValue()` method'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'valueChanged(): 当通过选择上/下按钮或使用`setValue()`方法更改旋转框的值时，将发出此信号。'
- en: 'editingFinished(): This signal is emitted when focus is lost on the spin box'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`editingFinished()`: 当焦点离开旋转框时发出此信号'
- en: The class used for dealing with float values in spin boxes is `QDoubleSpinBox`.
    All the preceding methods are supported by the `QDoubleSpinBox` class too. It
    displays values up to two decimal places by default. To change the precision,
    use `round()`, which displays the values up to the specified number of decimal
    places; the value will be rounded to the specified number of decimals.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 用于处理旋转框中浮点值的类是`QDoubleSpinBox`。所有前述方法也受`QDoubleSpinBox`类的支持。它默认显示值，保留两位小数。要更改精度，请使用`round()`，它会显示值，保留指定数量的小数位；该值将四舍五入到指定数量的小数位。
- en: The default minimum, maximum, singleStep, and value properties of a spin box
    are 0, 99, 1, and 0, and of a double spin box are 0.000000, 99.990000, 1.000000,
    and 0.000000, respectively.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转框的默认最小值、最大值、单步值和值属性分别为0、99、1和0；双精度旋转框的默认值为0.000000、99.990000、1.000000和0.000000。
- en: Let's create an application that will ask the user to enter a price for a book,
    followed by the quantity of the books purchased by the customer, and will display
    the total amount of books. Also, the application will prompt you to enter a price
    for 1 kg of sugar, followed by the quantity of sugar bought by the user. On entering
    the quantity of sugar, the app will display the total amount of sugar. The quantity
    of the books and the sugar will be entered through a spin box and double spin
    box, respectively.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个应用程序，该应用程序将要求用户输入书的价格，然后输入客户购买的书的数量，并显示书的总金额。此外，该应用程序将提示您输入1公斤糖的价格，然后输入用户购买的糖的数量。在输入糖的数量时，应用程序将显示糖的总量。书籍和糖的数量将分别通过微调框和双精度微调框输入。
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand how integer and float values can be accepted through spin boxes
    and used in further computation, let''s create a new application based on the
    Dialog without Buttons template and follow these steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何通过微调框接受整数和浮点值并在进一步计算中使用，让我们基于无按钮模板创建一个新的应用程序，并按照以下步骤操作：
- en: Let's begin by dragging and dropping three Label, a Spin Box, a Double Spin
    Box, and four Line Edit widgets.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始拖放三个标签，一个微调框，一个双精度微调框和四个行编辑小部件。
- en: The text property of two Label widgets is set to `Book Price value` and `Sugar
    Price`, and the objectName property of the third Label widget is set to `labelTotalAmount`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个标签小部件的文本属性设置为`Book Price value`和`Sugar Price`，第三个标签小部件的objectName属性设置为`labelTotalAmount`。
- en: Set the objectName property of the four Line Edit widgets to `lineEditBookPrice`,
    `lineEditBookAmount`, `lineEditSugarPrice`, and `lineEditSugarAmount`, respectively.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个行编辑小部件的objectName属性设置为`lineEditBookPrice`，`lineEditBookAmount`，`lineEditSugarPrice`和`lineEditSugarAmount`。
- en: Set the objectName property of the Spin Box widget to `spinBoxBookQty` and that
    of the Double Spin Box widget to `doubleSpinBoxSugarWeight`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Spin Box小部件的objectName属性设置为`spinBoxBookQty`，将Double Spin Box小部件的objectName属性设置为`doubleSpinBoxSugarWeight`。
- en: Delete the default text property of the third Label widget, TextLabel, as you
    will be setting its text in the program to display the total amount.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第三个标签小部件TextLabe的默认文本属性，因为您将在程序中设置其文本以显示总金额。
- en: The third Label widget will become invisible on deleting its text property.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第三个标签小部件的文本属性后，它将变得不可见。
- en: Disable the two Line Edit widgets, `lineEditBookAmount` and `lineEditSugarAmount`,
    by unchecking their enabled property from the Property Editor window as you want
    them to display non-editable values.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用两个行编辑小部件`lineEditBookAmount`和`lineEditSugarAmount`，通过取消选中它们的属性编辑器窗口中的启用属性，因为您希望它们显示不可编辑的值。
- en: 'Save the application with the name `demoSpinner.ui`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`demoSpinner.ui`保存应用程序：
- en: '![](assets/4af31882-d0d5-42af-8146-943ccd17fa15.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4af31882-d0d5-42af-8146-943ccd17fa15.png)'
- en: On using the `pyuic5` command utility, the `.ui` (XML) file will be converted
    into Python code. The generated Python code file, `demoSpinner.py`, can be seen
    in the source code of this book.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pyuic5`命令实用程序，`.ui`（XML）文件将转换为Python代码。生成的Python代码文件`demoSpinner.py`可以在本书的源代码中看到。
- en: 'Create a Python script file named `calldemoSpinner.pyw` that imports the code,
    `demoSpinner.py`, enabling you to invoke the user interface design that displays
    the numbers selected through spin boxes and also compute the total book amount
    and total sugar amount. The `calldemoSpinner.pyw` file will appear as shown here:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`calldemoSpinner.pyw`的Python脚本文件，导入代码`demoSpinner.py`，使您能够调用显示通过微调框选择的数字并计算总书籍金额和总糖量的用户界面设计。`calldemoSpinner.pyw`文件将显示如下：
- en: '[PRE2]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this code, you can see that the `editingFinished` signal of the two spin
    boxes is attached to the `result1` and `result2` functions. It means that when
    focus is lost on any of the spin boxes, the respective method will be invoked.
    Focus is lost on a widget when the user moves onto other widgets with the mouse
    or by pressing the Tab key:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，您可以看到两个微调框的`editingFinished`信号附加到`result1`和`result2`函数。这意味着当焦点离开任何微调框时，将调用相应的方法。当用户使用鼠标移动到其他微调框或按Tab键时，焦点将离开小部件：
- en: In the `result1` method, you retrieve the integer value for the purchased book
    quantity from the Spin Box widget and multiply it with the book price entered
    in the `lineEditBookPrice` widget to compute the total book cost. The total book
    cost is then displayed through the `lineEditBookAmount` widget.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`result1`方法中，您从Spin Box小部件中检索购买的书的数量的整数值，并将其乘以在`lineEditBookPrice`小部件中输入的书的价格，以计算总书费。然后通过`lineEditBookAmount`小部件显示总书费。
- en: 'Similarly, in the `result2` method, you retrieve the floating-point value that
    is the weight of the sugar purchased from the double spin box and multiply it
    with the price of the sugar per kg entered in the `lineEditSugarPrice` widget
    to compute the total sugar cost, which is then displayed through the `lineEditSugarAmount`
    widget. The total of the book cost and sugar cost is finally displayed through
    the `labelTotalAmount` widget, as shown in the following screenshot:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似地，在`result2`方法中，您从双精度微调框中检索购买的糖的重量的浮点值，并将其乘以在`lineEditSugarPrice`小部件中输入的每公斤糖的价格，以计算总糖成本，然后通过`lineEditSugarAmount`小部件显示。书的成本和糖的成本的总和最终通过`labelTotalAmount`小部件显示，如下面的屏幕截图所示：
- en: '![](assets/ef46d187-e1cd-41f5-bcdc-05f1af89982d.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef46d187-e1cd-41f5-bcdc-05f1af89982d.png)'
- en: Using scrollbars and sliders
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用滚动条和滑块
- en: Scrollbars are useful while looking at large documents or images that cannot
    appear in a limited visible area. Scrollbars appear horizontally or vertically,
    indicating your current position in the document or image and the size of the
    region that is not visible. Using the slider handle provided with these bars,
    you can access the hidden part of the document or image.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动条在查看无法出现在有限可见区域的大型文档或图像时非常有用。滚动条水平或垂直出现，指示您在文档或图像中的当前位置以及不可见区域的大小。使用这些滚动条提供的滑块手柄，您可以访问文档或图像的隐藏部分。
- en: Sliders are a way of selecting an integer value between two values. That is,
    a slider can represent a minimum and maximum range of values, and the user can
    select a value within this range by moving the slider handle to the desired location
    in the slider.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块是选择两个值之间的整数值的一种方式。也就是说，滑块可以表示一系列最小和最大值，并且用户可以通过将滑块手柄移动到滑块中所需位置来选择此范围内的值。
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Scrollbars are used for viewing documents or images that are larger than the
    view area. To display horizontal or vertical scrollbars, you use the `HorizontalScrollBar`
    and `VerticalScrollBar` widgets, which are instances of the `QScrollBar` class.
    These scrollbars have a slider handle that can be moved to view the area that
    is not visible. The location of the slider handle indicates the location within
    the document or image. A scrollbar has the following controls:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动条用于查看大于视图区域的文档或图像。要显示水平或垂直滚动条，您可以使用`HorizontalScrollBar`和`VerticalScrollBar`小部件，它们是`QScrollBar`类的实例。这些滚动条有一个滑块手柄，可以移动以查看不可见的区域。滑块手柄的位置指示文档或图像内的位置。滚动条具有以下控件：
- en: '**Slider handle**: This control is used to move to any part of the document
    or image quickly.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑块手柄**: 此控件用于快速移动到文档或图像的任何部分。'
- en: '**Scroll arrows**: These are the arrows on either side of the scrollbars that
    are used to view the desired area of the document or image that is not currently visible.
    On using these scroll arrows, the position of the slider handle moves to show
    the current location within the document or image.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动箭头**: 这些是滚动条两侧的箭头，用于查看当前不可见的文档或图像的所需区域。使用这些滚动箭头时，滑块手柄的位置移动以显示文档或图像内的当前位置。'
- en: '**Page control**: The page control is the background of the scrollbar over
    which the slider handle is dragged. When the background is clicked, the slider
    handle moves towards the click by one page. The amount the slider handle moves
    can be specified via the pageStep property. The page step is the amount by which
    a slider moves when the user presses the *Page Up* and *Page Down* keys. You can
    set the amount of the pageStep property by using the `setPageStep()` method.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面控制**: 页面控制是滑块手柄拖动的滚动条的背景。单击背景时，滑块手柄向单击位置移动一个页面。滑块手柄移动的量可以通过pageStep属性指定。页面步进是用户按下*Page
    Up*和*Page Down*键时滑块移动的量。您可以使用`setPageStep()`方法设置pageStep属性的量。'
- en: The method that is specifically used to set and retrieve values from scrollbars
    is the `value()` method, described here.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 用于设置和检索滚动条的值的特定方法是`value()`方法，这里进行了描述。
- en: 'The `value()` method fetches the value of the slider handle, that is, its distance
    value from the start of the scrollbar. You get the minimum value of the scrollbar
    when the slider handle is at the top edge in a vertical scrollbar or at the left
    edge in a horizontal scrollbar, and you get the maximum value of the scroll bar
    when the slider handle is at the bottom edge in a vertical scrollbar or at the
    right edge in a horizontal scrollbar. You can move the slider handle to its minimum
    and maximum values via the keyboard too, by pressing the *Home* and *End* keys,
    respectively. Let''s take a look at the following methods:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`value()`方法获取滑块手柄的值，即其距离滚动条起始位置的距离值。当滑块手柄在垂直滚动条的顶部边缘或水平滚动条的左边缘时，您会得到滚动条的最小值；当滑块手柄在垂直滚动条的底部边缘或水平滚动条的右边缘时，您会得到滚动条的最大值。您也可以通过键盘将滑块手柄移动到其最小和最大值，分别按下*Home*和*End*键。让我们来看看以下方法：'
- en: '`setValue()`: This method assigns value to the scrollbar and, as per the value
    assigned, the location of the slider handle is set in the scrollbar'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setValue()`: 此方法将值分配给滚动条，并根据分配的值设置滑块手柄在滚动条中的位置'
- en: '`minimum()`: This method returns the minimum value of the scrollbar'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minimum()`: 此方法返回滚动条的最小值'
- en: '`maximum()`: This method returns the maximum value of the scrollbar'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maximum()`: 此方法返回滚动条的最大值'
- en: '`setMinimum()`: This method assigns the minimum value to the scrollbar'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setMinimum()`: 此方法将最小值分配给滚动条'
- en: '`setMaximum()`: This method assigns the maximum value to the scrollbar'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setMaximum()`: 此方法将最大值分配给滚动条'
- en: '`setSingleStep()`: This method sets the single step value'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setSingleStep()`: 此方法设置单步值'
- en: '`setPageStep()`: This method sets the page step value'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setPageStep()`: 此方法设置页面步进值'
- en: '`QScrollBar` provides only integer values.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`QScrollBar`仅提供整数值。'
- en: 'The signals emitted through the `QScrollBar` class are shown in the following list:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`QScrollBar`类发出的信号如下所示：
- en: 'valueChanged(): This signal is emitted when the scrollbar''s value is changed,
    that is, when its slider handle is moved'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'valueChanged(): 当滚动条的值发生变化时发出此信号，即当其滑块手柄移动时'
- en: 'sliderPressed(): This signal is emitted when the user starts to drag the slider
    handle'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'sliderPressed(): 当用户开始拖动滑块手柄时发出此信号'
- en: 'sliderMoved(): This signal is emitted when the user drags the slider handle'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'sliderMoved(): 当用户拖动滑块手柄时发出此信号'
- en: 'sliderReleased(): This signal is emitted when the user releases the slider
    handle'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'sliderReleased(): 当用户释放滑块手柄时发出此信号'
- en: 'actionTriggered(): This signal is emitted when the scrollbar is changed by
    user interaction'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'actionTriggered(): 当用户交互改变滚动条时发出此信号'
- en: Sliders are generally used to represent some integer value. Unlike scrollbars,
    which are mostly used to display large documents or images, the sliders are interactive
    and an easier way to enter or represent integer values. That is, by moving and
    positioning its handle along a horizontal or vertical groove, you can make a horizontal
    or vertical slider to represent some integer value. To display horizontal and
    vertical sliders, the `HorizontalSlider` and `VerticalSlider` widgets are used,
    which are instances of the `QSlider` class. Similar to the methods that we saw
    in scrollbars, the sliders too generate signals such as valueChanged(), sliderPressed(),
    sliderMoved(), sliderReleased(), and many more on moving the slider handle.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块通常用于表示某个整数值。与滚动条不同，滚动条大多用于显示大型文档或图像，滑块是交互式的，是输入或表示整数值的更简单的方式。也就是说，通过移动和定位其手柄沿水平或垂直槽，可以使水平或垂直滑块表示某个整数值。为了显示水平和垂直滑块，使用了`HorizontalSlider`和`VerticalSlider`小部件，它们是`QSlider`类的实例。与我们在滚动条中看到的方法类似，滑块在移动滑块手柄时也会生成信号，例如`valueChanged()`，`sliderPressed()`，`sliderMoved()`，`sliderReleased()`等等。
- en: The slider handle in scrollbars and sliders represents a value within the minimum
    and maximum range. To change the default minimum and maximum values, you can change
    their values by assigning values to the  minimum, maximum, singleStep, and pageStep
    properties.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动条和滑块中的滑块手柄表示在最小和最大范围内的值。要更改默认的最小和最大值，可以通过为minimum、maximum、singleStep和pageStep属性分配值来更改它们的值。
- en: The default values of the minimum, maximum, singleStep, pageStep, and value
    properties of sliders are 0, 99, 1, 10, and 0, respectively.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块的最小值、最大值、singleStep、pageStep和value属性的默认值分别为0、99、1、10和0。
- en: Let's create an application consisting of horizontal and vertical scrollbars,
    as well as horizontal and vertical sliders. The horizontal scrollbar and slider
    will represent sugar level and blood pressure respectively. That is, on moving
    the horizontal scroll bar, the sugar level of the patient will be displayed through
    the Line Edit widget. Similarly, the horizontal slider, when moved, will represent
    blood pressure and will be displayed through the Line Edit widget.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个应用程序，其中包括水平和垂直滚动条，以及水平和垂直滑块。水平滚动条和滑块将分别表示血糖水平和血压。也就是说，移动水平滚动条时，患者的血糖水平将通过行编辑小部件显示。同样，移动水平滑块时，将表示血压，并通过行编辑小部件显示。
- en: The vertical scrollbar and slider will represent the heart rate and cholesterol
    level, respectively. On moving the vertical scrollbar, the heart rate will be
    displayed via the Line Edit widget and on moving the vertical slider, the cholesterol
    level will be displayed through the Line Edit widget.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直滚动条和滑块将分别表示心率和胆固醇水平。移动垂直滚动条时，心率将通过行编辑小部件显示，移动垂直滑块时，胆固醇水平将通过行编辑小部件显示。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'To understand the working of the horizontal and vertical scrollbars, and the
    working of the horizontal and vertical sliders, to understand how scrollbars and
    sliders generate signals when their values are changed, and the how respective
    slot or method can be associated to them, perform the following steps:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解水平和垂直滚动条的工作原理，以及水平和垂直滑块的工作原理，了解滚动条和滑块在值更改时如何生成信号，以及如何将相应的槽或方法与它们关联，执行以下步骤：
- en: Let's create a new application of the Dialog without Buttons template and drag
    and drop horizontal and vertical scrollbars and sliders onto the form.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新的对话框应用程序，没有按钮模板，并将水平和垂直滚动条和滑块拖放到表单上。
- en: Drop four Label widgets and a Line Edit widget to display the value of the scrollbar
    and slider handle.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个标签小部件和一个行编辑小部件放置到显示滚动条和滑块手柄值的位置。
- en: Set the text property of the four Label widgets to `Sugar Level`, `Blood Pressure`,
    `Pulse rate`, and `Cholesterol`, respectively.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个标签小部件的text属性分别设置为`血糖水平`，`血压`，`脉搏率`和`胆固醇`。
- en: Set the objectName property of the horizontal scrollbar to `horizontalScrollBarSugarLevel`,
    vertical scroll bar to `verticalScrollBarPulseRate`, horizontal slider to `horizontalSliderBloodPressure`,
    and vertical slider to `verticalSliderCholestrolLevel`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将水平滚动条的objectName属性设置为`horizontalScrollBarSugarLevel`，垂直滚动条的objectName属性设置为`verticalScrollBarPulseRate`，水平滑块的objectName属性设置为`horizontalSliderBloodPressure`，垂直滑块的objectName属性设置为`verticalSliderCholestrolLevel`。
- en: Set the objectName property of the Line Edit widget to `lineEditResult`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行编辑小部件的objectName属性设置为`lineEditResult`。
- en: 'Save the application with the name `demoSliders.ui`.The form will appear as
    shown in the following screenshot:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为名称为`demoSliders.ui`的文件。表单将显示如下截图所示：
- en: '![](assets/e9694361-d6d4-4f0d-a343-05e70ae1ea91.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e9694361-d6d4-4f0d-a343-05e70ae1ea91.png)'
- en: The `pyuic5` command utility will convert the `.ui` (XML) file into Python code.
    The generated Python file, `demoScrollBar.py`, can be seen in the source code
    bundle of this book.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyuic5`命令实用程序将把`.ui`（XML）文件转换为Python代码。生成的Python文件`demoScrollBar.py`可以在本书的源代码包中找到。'
- en: 'Create a Python script file named `callScrollBar.pyw` that imports the code,
    `demoScrollBar.py`, to invoke the user interface design and synchronizes the movement
    of the scrollbar and slider handles. The script will also display the value of
    the scrollbar and slider handle with a Label widget. The Python script `callScrollBar.pyw` will
    appear, as shown here:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callScrollBar.pyw`的Python脚本文件，导入代码`demoScrollBar.py`，以调用用户界面设计并同步滚动条和滑块手柄的移动。该脚本还将通过标签小部件显示滚动条和滑块手柄的值。Python脚本`callScrollBar.pyw`将显示如下：
- en: '[PRE3]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this code, you are connecting the `valueChanged()` signal of each widget
    with the respective functions so that if the scrollbar or slider handle of the
    widget is moved, the corresponding function is invoked to perform the desired
    task. For instance, when the slider handle of the horizontal scrollbar is moved,
    the `scrollhorizontal` function is invoked. The `scrollhorizontal` function displays
    the value represented by the scrollbar, that is, Sugar Level, through the Label
    widget.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，您正在将每个窗口部件的`valueChanged()`信号与相应的函数连接起来，以便如果窗口部件的滚动条或滑块移动，将调用相应的函数来执行所需的任务。例如，当水平滚动条的滑块移动时，将调用`scrollhorizontal`函数。`scrollhorizontal`函数通过Label窗口部件显示滚动条表示的值，即血糖水平。
- en: 'Similarly, when the slider handle of the vertical scrollbar or slider is moved,
    the `scrollvertical` function is invoked and the heart rate, the value of the
    slider handle of the vertical scrollbar, is displayed through the Label widget,
    as shown in the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当垂直滚动条或滑块的滑块移动时，将调用`scrollvertical`函数，并且垂直滚动条的滑块的值，即心率，将通过Label窗口部件显示，如下面的屏幕截图所示：
- en: '![](assets/267f54e8-3456-4f03-aca5-19072ac1f550.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/267f54e8-3456-4f03-aca5-19072ac1f550.png)'
- en: 'Similarly, when the horizontal and vertical sliders are moved, the blood pressure
    and cholesterol levels are displayed accordingly, as shown in the following screenshot:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当水平和垂直滑块移动时，血压和胆固醇水平会相应地显示，如下面的屏幕截图所示：
- en: '![](assets/69d859b6-7ea2-4da1-8bc1-b9458ee448fc.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/69d859b6-7ea2-4da1-8bc1-b9458ee448fc.png)'
- en: Using List Widget
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用List窗口部件
- en: To display several values in an easier and expandable format, you can use List
    Widget, which is an instance of the `QListWidget` class. List Widget displays
    several items that can not only be viewed, but can be edited and deleted, too.
    You can add or remove list items one at a time from the List Widget item, or collectively
    you can set list items by using its internal model.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要以更简单和可扩展的格式显示多个值，可以使用List窗口部件，它是`QListWidget`类的实例。List窗口部件显示多个项目，不仅可以查看，还可以编辑和删除。您可以逐个添加或删除列表项目，也可以使用其内部模型集合地设置列表项目。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Items in the list are instances of the `QListWidgetItem` class. The methods
    provided by `QListWidget` are shown in the following list:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的项目是`QListWidgetItem`类的实例。`QListWidget`提供的方法如下所示：
- en: '`insertItem()`: This method inserts a new item with the supplied text into
    List Widget at the specified location.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertItem()`: 此方法将提供的文本插入到List窗口部件的指定位置。'
- en: '`insertItems()`: This method inserts multiple items from the supplied list,
    starting at the specified location.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertItems()`: 此方法从提供的列表中的指定位置开始插入多个项目。'
- en: '`count()`: This method returns the count of the number of items in the list.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count()`: 此方法返回列表中项目数量的计数。'
- en: '`takeItem()`: This method removes and returns items from the specified row
    in List Widget.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`takeItem()`: 此方法从列表窗口中指定的行中移除并返回项目。'
- en: '`currentItem()`: This method returns the current item in the list.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`currentItem()`: 此方法返回列表中的当前项目。'
- en: '`setCurrentItem()`: This method replaces the current item in the list with
    the specified item.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setCurrentItem()`: 此方法用指定的项目替换列表中的当前项目。'
- en: '`addItem()`: This method appends the item with the specified text at the end
    of List Widget.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addItem()`: 此方法将具有指定文本的项目附加到List窗口部件的末尾。'
- en: '`addItems()`: This method appends items from the supplied list at the end of
    List Widget.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addItems()`: 此方法将提供的列表中的项目附加到List窗口部件的末尾。'
- en: '`clear()`: This method removes all items from List Widget.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clear()`: 此方法从List窗口部件中移除所有项目。'
- en: '`currentRow()`: This method returns the row number of the current selected
    list item. If no list item is selected, it returns the value `-1`.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`currentRow()`: 此方法返回当前选定列表项的行号。如果未选择列表项，则返回值为`-1`。'
- en: '`setCurrentRow()`: This method selects the specified row in List Widget.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setCurrentRow()`: 此方法选择List窗口部件中的指定行。'
- en: '`item()`: This method returns the list item at the specified row.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`item()`: 此方法返回指定行处的列表项。'
- en: 'Signals emitted by the `QListWidget` class are shown in the following list:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`QListWidget`类发出的信号如下所示：'
- en: 'currentRowChanged(): This signal is emitted when the row of the current list
    item changes'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'currentRowChanged(): 当当前列表项的行更改时发出此信号'
- en: 'currentTextChanged(): This signal is emitted whenever the text in the current
    list item is changed'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'currentTextChanged(): 当当前列表项中的文本更改时发出此信号'
- en: 'currentItemChanged(): This signal is emitted when the focus of the current
    list item is changed'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'currentItemChanged(): 当当前列表项的焦点更改时发出此信号'
- en: How to do it...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'So, let''s create an application that displays certain diagnostic tests through
    List Widget, and that when the user selects any test from List Widget, the selected
    test is displayed through a Label widget. Here is the step-by-step procedure to
    create the application:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个应用程序，通过List窗口部件显示特定的诊断测试，并且当用户从List窗口部件中选择任何测试时，所选测试将通过Label窗口部件显示。以下是创建应用程序的逐步过程：
- en: Create a new application of the Dialog without Buttons template and drag and
    drop two Label widgets and one List Widget onto the form.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个没有按钮模板的对话框的新应用程序，并将两个Label窗口部件和一个List窗口部件拖放到表单上。
- en: Set the text property of the first Label widget to `Choose the Diagnosis Tests`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个Label窗口部件的文本属性设置为“选择诊断测试”。
- en: Set the objectName property of List Widget to `listWidgetDiagnosis`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将List窗口部件的objectName属性设置为`listWidgetDiagnosis`。
- en: Set the objectName property of the Label widget to `labelTest`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Label窗口部件的objectName属性设置为`labelTest`。
- en: Delete the default text property of the `labelTest` widget as we will display
    the selected diagnosis test through this widget via code.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`labelTest`窗口部件的默认文本属性，因为我们将通过代码通过此窗口部件显示所选的诊断测试。
- en: To display diagnosis tests through List Widget, right-click on it and from the
    context menu that opens up, select the Edit Items option.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过List窗口部件显示诊断测试，请右键单击它，并从打开的上下文菜单中选择“编辑项目”选项。
- en: 'Add the diagnosis tests one by one, followed by clicking on the + button at
    the bottom after typing every test, as shown in the following screenshot:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐个添加诊断测试，然后在输入每个测试后单击底部的+按钮，如下截图所示：
- en: '![](assets/f88c1e1d-2934-4bd7-a0ba-37acd3757fca.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f88c1e1d-2934-4bd7-a0ba-37acd3757fca.png)'
- en: 'Save the application with the name `demoListWidget1.ui`. The form will appear
    as shown in the following screenshot:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`demoListWidget1.ui`保存应用程序。表单将显示如下截图所示：
- en: '![](assets/46334250-f059-4b61-a0d8-413c80e98db3.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/46334250-f059-4b61-a0d8-413c80e98db3.png)'
- en: The `pyuic5` command utility will convert the `.ui` (XML) file into Python code.
    The generated Python code, `demoListWidget1.py`, can be seen in the source code
    bundle of this book.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyuic5`命令实用程序将把`.ui`（XML）文件转换为Python代码。生成的Python代码`demoListWidget1.py`可以在本书的源代码包中看到。'
- en: 'Create a Python script file named `callListWidget1.pyw` that imports the code,
    `demoListWidget1.py`, to invoke the user interface design and the code that displays
    the diagnosis test selected from List Widget. The code in the Python script, `callListWidget1.pyw`,
    is as shown here:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callListWidget1.pyw`的Python脚本文件，导入代码`demoListWidget1.py`，以调用用户界面设计和从列表窗口中显示所选的诊断测试的代码。Python脚本`callListWidget1.pyw`中的代码如下所示：
- en: '[PRE4]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can see that the `itemClicked` event of List Widget is connected to the
    `dispSelectedTest()` method. That is, on clicking any of the list items from List
    Widget, the `dispSelectedTest()` method is invoked, which uses the `currentItem` method
    of List Widget to display the selected item of List Widget through the label called
    `labelTest`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到列表窗口的`itemClicked`事件连接到`dispSelectedTest()`方法。也就是说，单击列表窗口中的任何列表项时，将调用`dispSelectedTest()`方法，该方法使用列表窗口的`currentItem`方法通过名为`labelTest`的标签显示列表窗口的所选项目。
- en: 'On running the application, you will see List Widget showing a few diagnosis
    tests; on selecting a test from the List Widget, the test will appear through
    the Label widget, as shown in the following screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将看到列表窗口显示一些诊断测试；从列表窗口中选择一个测试，该测试将通过Label窗口显示，如下截图所示：
- en: '![](assets/989c3543-3303-45f5-ae47-1f09e11d3090.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/989c3543-3303-45f5-ae47-1f09e11d3090.png)'
- en: Selecting multiple list items from one List Widget and displaying them in another
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一个列表窗口中选择多个列表项，并在另一个列表窗口中显示它们
- en: In the preceding application, you were selecting only a single diagnosis test
    from the List Widget item. What if I want to do multiple selections from the List
    Widget item? In the case of multiple selections, instead of a Line Edit widget,
    you need another List Widget to store the selected diagnosis test.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的应用程序中，您只从列表窗口中选择了单个诊断测试。如果我想要从列表窗口中进行多重选择怎么办？在进行多重选择的情况下，您需要另一个列表窗口来存储所选的诊断测试，而不是使用行编辑窗口。
- en: How to do it...
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create an application that displays certain diagnosis tests through
    List Widget and when user selects any test from List Widget, the selected test
    will be displayed in another List Widget:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个应用程序，通过列表窗口显示特定的诊断测试，当用户从列表窗口中选择任何测试时，所选测试将显示在另一个列表窗口中：
- en: So, create a new application of the Dialog without Buttons template and drag
    and drop two Label widgets and two List Widget onto the form.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，创建一个没有按钮模板的对话框的新应用程序，并将两个Label窗口小部件和两个列表窗口拖放到表单上。
- en: Set the text property of the first Label widget as `Diagnosis Tests` and that
    of the other to `Selected tests are`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个Label窗口小部件的文本属性设置为`诊断测试`，另一个设置为`已选择的测试为`。
- en: Set the objectName property of the first List Widget to `listWidgetDiagnosis`
    and of the second List Widget to `listWidgetSelectedTests`.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个列表窗口的objectName属性设置为`listWidgetDiagnosis`，第二个列表窗口的设置为`listWidgetSelectedTests`。
- en: To display diagnosis tests through List Widget, right-click on it and from the
    context menu that opens up, select the Edit Items option.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过列表窗口显示诊断测试，请右键单击它，从打开的上下文菜单中选择“编辑项目”选项。
- en: Add the diagnosis tests one by one followed by clicking on the + button at the
    bottom after typing every test.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐个添加诊断测试，然后在输入每个测试后单击底部的+按钮。
- en: To enable multiple selections from List Widget, select the `listWidgetDiagnosis`
    widget and from the Property Editor window, change the selectionMode property
    from `SingleSelection` to `MultiSelection`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从列表窗口启用多重选择，请选择`listWidgetDiagnosis`窗口小部件，并从属性编辑器窗口中将selectionMode属性从`SingleSelection`更改为`MultiSelection`。
- en: 'Save the application with the name `demoListWidget2.ui`. The form will appear
    as shown in the following screenshot:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`demoListWidget2.ui`保存应用程序。表单将显示如下截图所示：
- en: '![](assets/62a52de1-daaf-4e26-a240-17cd71be81d7.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62a52de1-daaf-4e26-a240-17cd71be81d7.png)'
- en: By using the `pyuic5` utility, the XML file `demoListWidget2.ui` will be converted
    into Python code as the `demoListWidget2.py` file. The generated Python code,
    from the `demoListWidget2.py` file, can be seen in the source code bundle of this
    book.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`pyuic5`实用程序，XML文件`demoListWidget2.ui`将被转换为Python代码，即`demoListWidget2.py`文件。可以在本书的源代码包中看到从`demoListWidget2.py`文件生成的Python代码。
- en: 'Create a Python script file named `callListWidget2.pyw` that imports the code,
    `demoListWidget2.py`, to invoke the user interface design and the code that displays
    the multiple selected diagnosis tests selected from List Widget. The Python script `callListWidget2.pyw`
    will appear as shown here:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callListWidget2.pyw`的Python脚本文件，导入代码`demoListWidget2.py`，以调用用户界面设计和显示从列表窗口中选择的多个诊断测试的代码。Python脚本`callListWidget2.pyw`将显示如下：
- en: '[PRE5]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can see that the `itemSelectionChanged` event of the first List Widget is
    connected to the `dispSelectedTest()` method. That is, on selecting or unselecting
    any of the list items from the first List Widget item, the `dispSelectedTest()`
    method is invoked. The `dispSelectedTest()` method invokes the `selectedItems()`
    method on List Widget to get the list of all the selected items. Thereafter, using
    the `for` loop, all the selected items are added to the second List Widget by
    invoking the `addItem()` method on it.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，第一个列表小部件的`itemSelectionChanged`事件连接到`dispSelectedTest()`方法。也就是说，在从第一个列表小部件中选择或取消选择任何列表项目时，将调用`dispSelectedTest()`方法。`dispSelectedTest()`方法调用列表小部件上的`selectedItems()`方法以获取所有选定项目的列表。然后，使用`for`循环，通过在第二个列表小部件上调用`addItem()`方法，将所有选定的项目添加到第二个列表小部件中。
- en: 'On running the application, you will see List Widget showing a few diagnosis
    tests; on selecting any number of tests from the first List Widget, all the selected
    tests will appear through the second List Widget item, as shown in the following
    screenshot:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将看到列表小部件显示一些诊断测试；从第一个列表小部件中选择任意数量的测试，所有选定的测试将通过第二个列表小部件项目显示，如下截图所示：
- en: '![](assets/e8efd76e-aedb-4ecc-ac45-fd7f615126a9.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e8efd76e-aedb-4ecc-ac45-fd7f615126a9.png)'
- en: Adding items into List Widget
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向列表小部件添加项目
- en: Although you can add items to the List Widget item manually through Property
    Editor, sometimes you need to add items to the List Widget item dynamically through
    code. Let's create an application that explains the process of adding items to
    List Widget.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以通过属性编辑器手动向列表小部件添加项目，但有时需要通过代码动态向列表小部件添加项目。让我们创建一个应用程序，解释向列表小部件添加项目的过程。
- en: In this application, you will use Label, Line Edit, Push Button, and List Widget.
    The List Widget item will be empty initially, and the user is asked to enter desired
    food items into Line Edit and select an Add to List button. The entered food item
    will then be added to the List Widget item. All subsequent food items will be
    added below the previous entry.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在此应用程序中，您将使用标签、行编辑、按钮和列表小部件。列表小部件项目最初将为空，并要求用户将所需的食物项目输入到行编辑中，并选择“添加到列表”按钮。然后将输入的食物项目添加到列表小部件项目中。所有后续的食物项目将添加到上一个条目下方。
- en: How to do it...
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to know how items can be added to the List Widget
    item:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以了解如何向列表小部件项目添加项目：
- en: We will begin by creating a new application based on the Dialog without Buttons
    template and dragging and dropping Label, Line Edit, Push Button, and List Widget
    onto the form.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从基于无按钮对话框模板创建一个新应用程序开始，并将标签、行编辑、按钮和列表小部件拖放到表单中。
- en: Set the text property of the Label and Push Button widgets to `Your favourite
    food item` and `Add to List`, respectively.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签和按钮小部件的文本属性分别设置为“您最喜欢的食物项目”和“添加到列表”。
- en: Set the objectName property of the Line Edit widget to `lineEditFoodItem`, that
    of Push Button to `pushButtonAdd`, and that of List Widget to `listWidgetSelectedItems`.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行编辑小部件的objectName属性设置为`lineEditFoodItem`，按钮的objectName设置为`pushButtonAdd`，列表小部件的objectName设置为`listWidgetSelectedItems`。
- en: 'Save the application with the name `demoListWidget3.ui`.  The form will appear
    as shown in the following screenshot:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoListWidget3.ui`。表单将显示如下截图所示：
- en: '![](assets/f7f06759-0127-48e4-93fd-83b746974b69.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7f06759-0127-48e4-93fd-83b746974b69.png)'
- en: On executing the `pyuic5` utility, the XML file `demoListWidget3.ui` will be
    converted into Python code as `demoListWidget3.py`. The code of the generated
    Python file, `demoListWidget3.py`, can be seen in the source code bundle of this
    book.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`pyuic5`实用程序时，XML文件`demoListWidget3.ui`将被转换为Python代码`demoListWidget3.py`。生成的Python文件`demoListWidget3.py`的代码可以在本书的源代码包中找到。
- en: 'Create a Python script file named `callListWidget3.pyw` that imports the Python
    code `demoListWidget3.py` to invoke the user interface design and adds the food
    items entered by the user in Line Edit to List Widget. The Python code in the
    `callListWidget3.pyw` file will appear as shown here:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callListWidget3.pyw`的Python脚本文件，导入Python代码`demoListWidget3.py`以调用用户界面设计，并将用户在行编辑中输入的食物项目添加到列表小部件中。`callListWidget3.pyw`文件中的Python代码将如下所示：
- en: '[PRE6]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The clicked() event of the Push Button widget is connected to the `addlist` function.
    Hence, after entering the text to be added to List Widget in the Line Edit widget,
    when the user selects the Add to List button, the `addlist` function is invoked.
    The `addlist` function retrieves the text entered in Line Edit and adds it to
    List Widget. The text in the Line Edit widget is then removed, and the focus is
    set on it, enabling the user to enter different text.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 将按钮小部件的clicked()事件连接到`addlist`函数。因此，在在行编辑小部件中输入要添加到列表小部件中的文本后，当用户选择“添加到列表”按钮时，将调用`addlist`函数。`addlist`函数检索在行编辑中输入的文本，并将其添加到列表小部件中。然后，清除行编辑小部件中的文本，并将焦点设置在它上面，使用户能够输入不同的文本。
- en: 'In the following screenshot, you can see the text entered by the user in the
    Line Edit widget is added to List Widget when the user selects the Add to List
    button:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，您可以看到用户在行编辑小部件中输入的文本在用户选择“添加到列表”按钮时添加到列表小部件中：
- en: '![](assets/29ad3de8-401c-4098-a53c-c40863d88069.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/29ad3de8-401c-4098-a53c-c40863d88069.png)'
- en: Performing operations in List Widget
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在列表小部件中执行操作
- en: In this recipe, you will learn how to perform different operations on list items
    in List Widget. List Widget is basically used for showing a collection of similar
    items, enabling the user to choose the desired items. Consequently, you need to
    add items to List Widget. Also, you might require to edit any item in List Widget.
    Sometimes, you might require to delete an item from List Widget. One more operation
    that you might want to perform on List Widget is deleting all items from it, clearing
    the entire List Widget item. Before learning how to add, edit, and delete items
    from List Widget, let's understand the concept of a list item.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将学习如何在List Widget中执行不同的操作。List Widget基本上用于显示一组相似的项目，使用户能够选择所需的项目。因此，您需要向List
    Widget添加项目。此外，您可能需要编辑List Widget中的任何项目。有时，您可能需要从List Widget中删除项目。您可能还希望对List Widget执行的另一个操作是删除其中的所有项目，清除整个List
    Widget项目。在学习如何向List Widget添加、编辑和删除项目之前，让我们先了解列表项的概念。
- en: Getting ready
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: List Widget consists of several list items. These list items are instances of
    the `QListWidgetItem` class. The list items can be inserted into List Widget using
    the `insertItem()` or `addItem()` methods. List items may be in text or icon form
    and can be checked or unchecked. Methods provided by `QListWidgetItem` are given
    next.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: List Widget包含多个列表项。这些列表项是`QListWidgetItem`类的实例。可以使用`insertItem()`或`addItem()`方法将列表项插入List
    Widget中。列表项可以是文本或图标形式，并且可以被选中或取消选中。`QListWidgetItem`提供的方法如下。
- en: Methods provided by the QListWidgetItem class
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`QListWidgetItem`类提供的方法'
- en: 'Let''s take a look at the following methods provided by the `QListWidgetItem`
    class:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`QListWidgetItem`类提供的以下方法：
- en: '`setText()`: This method assigns the specified text to the list item'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setText()`: 这个方法将指定的文本分配给列表项'
- en: '`setIcon()`: This method assigns the specified icon to the list item'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setIcon()`: 这个方法将指定的图标分配给列表项'
- en: '`checkState()`: This method returns the Boolean value depending on whether
    the list item is in a checked or unchecked state'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkState()`: 这个方法根据列表项是选中还是未选中状态返回布尔值'
- en: '`setHidden()`: This method passes the Boolean value true to this method to
    hide the list item'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setHidden()`: 这个方法将布尔值true传递给这个方法以隐藏列表项'
- en: '`isHidden()`: This method returns true if the list item is hidden'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isHidden()`: 如果列表项被隐藏，这个方法返回true'
- en: We have learned to add items to List Widget. What if you want to edit an existing
    item in List Widget, or you want to delete an item from List Widget, or you want
    to delete all the items from List Widget?
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了向List Widget添加项目。如果您想编辑List Widget中的现有项目，或者您想从List Widget中删除项目，或者您想从List
    Widget中删除所有项目呢？
- en: Let's learn to perform different operations on List Widget by creating an application.
    This application will display Line Edit, List Widget, and a couple of Push Button
    widgets. You can add items to List Widget by entering the text in Line Edit, followed
    by clicking the Add button. Similarly, you can edit any item from List Widget
    by clicking an item from List Widget, followed by clicking the Edit button. Not
    only this, but you can even delete any item from List Widget by clicking the Delete
    button. If you want to clear the entire List Widget, simply click on the Delete
    All button.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个应用程序来学习在列表小部件上执行不同的操作。这个应用程序将显示Line Edit，List Widget和一对Push Button小部件。您可以通过在Line
    Edit中输入文本，然后单击“Add”按钮来向List Widget添加项目。同样，您可以通过单击List Widget中的项目，然后单击“Edit”按钮来编辑List
    Widget中的任何项目。不仅如此，您甚至可以通过单击“Delete”按钮来删除List Widget中的任何项目。如果您想清除整个List Widget，只需单击“Delete
    All”按钮。
- en: How to do it....
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做....
- en: 'Perform the following steps to understand how different operations can be applied
    on the List Widget item; how items can be added, edited, and deleted from the
    List Widget item; and how the entire List Widget item can be cleared:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以了解如何在列表小部件上应用不同的操作；如何向列表小部件添加、编辑和删除项目；以及如何清除整个列表小部件：
- en: Open Qt Designer, create a new application based on the Dialog without Buttons
    template, and drag and drop a Label, Line Edit, four Push Button, and List Widget widgets
    onto the form.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Qt Designer，基于无按钮模板创建一个新应用程序，并将一个标签、一个Line Edit、四个Push Button和List Widget小部件拖放到表单上。
- en: Set the text property of the Label widget to `Enter an item`.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的文本属性设置为`Enter an item`。
- en: Set the text property of the four Push Button widgets to `Add`, `Edit`, `Delete`,
    and `Delete All`.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个Push Button小部件的文本属性设置为`Add`，`Edit`，`Delete`和`Delete All`。
- en: Set the objectName property of the four Push Button widgets to `psuhButtonAdd`,
    `pushButtonEdit`, `pushButtonDelete`, and `pushButtonDeleteAll`.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个Push Button小部件的objectName属性设置为`psuhButtonAdd`，`pushButtonEdit`，`pushButtonDelete`和`pushButtonDeleteAll`。
- en: Save the application with the name `demoListWidgetOp.ui`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoListWidgetOp.ui`。
- en: 'The form will appear as shown in the following screenshot:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 表单将显示如下截图所示：
- en: '![](assets/a15bca18-c4e6-4674-8be7-c898809bc6dc.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a15bca18-c4e6-4674-8be7-c898809bc6dc.png)'
- en: The XML file `demoListWidgetOp.ui` needs to be converted into the Python script
    by making use of the `pyuic5` command utility. The generated Python file `demoListWidgetOp.py` can
    be seen in the source code bundle of this book.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 需要使用`pyuic5`命令实用程序将XML文件`demoListWidgetOp.ui`转换为Python脚本。本书的源代码包中可以看到生成的Python文件`demoListWidgetOp.py`。
- en: 'Create a Python script file named `callListWidgetOp.pyw` that imports the Python
    code, `demoListWidgetOp.py`, enabling you to invoke the user interface design
    and add, delete, and edit the list items in List Widget. The code in the Python
    script `callListWidgetOp.pyw` is shown here:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callListWidgetOp.pyw`的Python脚本文件，导入Python代码`demoListWidgetOp.py`，使您能够调用用户界面设计并在List
    Widget中添加、删除和编辑列表项。Python脚本`callListWidgetOp.pyw`中的代码如下所示：
- en: '[PRE7]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The clicked() event of `pushButtonAdd` is connected to the `addlist` function.
    Similarly, the clicked() event of the `pushButtonEdit`, `pushButtonDelete`, and
    `pushButtonDeleteAll` objects are connected to the `editlist`, `delitem`, and
    `delallitems` functions, respectively. That is, on clicking any push button, the
    respective function is invoked. The `addlist` function calls the `addItem` function
    on the List Widget item to add the text entered in the Line Edit widget. The `editlist` function
    uses the `currentRow` method on List Widget to find out the list item to be edited.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`pushButtonAdd`的clicked()事件连接到`addlist`函数。同样，`pushButtonEdit`，`pushButtonDelete`和`pushButtonDeleteAll`对象的clicked()事件分别连接到`editlist`，`delitem`和`delallitems`函数。也就是说，单击任何按钮时，将调用相应的函数。`addlist`函数调用`addItem`函数来添加在Line
    Edit部件中输入的文本。`editlist`函数使用List Widget上的`currentRow`方法来找出要编辑的列表项目。'
- en: The `getText` method of the `QInputDialog` class is invoked to prompt the user
    for the new text or edited text. On clicking the OK button in the dialog, the
    current list item will be replaced by the text entered in the dialog box. The
    `delitem` function invokes the `takeItem` method on List Widget to delete the
    current row, that is, the selected list item. The `delallitems` function invokes
    the `clear` method on theList Widget item to clear or delete all the list items
    from the List Widget item.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`QInputDialog`类的`getText`方法来提示用户输入新文本或编辑文本。在对话框中单击OK按钮后，当前列表项目将被对话框中输入的文本替换。`delitem`函数调用List
    Widget上的`takeItem`方法来删除当前行，即所选的列表项目。`delallitems`函数调用List Widget上的`clear`方法来清除或删除List
    Widget中的所有列表项目。
- en: 'On running the application, you will find an empty List Widget, Line Edit,
    and Add push button below the Line Edit widget. Add any text in the Line Edit
    widget and click on the Add button to add that item to List Widget. After adding
    four items to List Widget, it might appear as shown in the following screenshot:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您将在Line Edit部件下方找到一个空的List Widget、Line Edit和Add按钮。在Line Edit部件中添加任何文本，然后单击添加按钮将该项目添加到List
    Widget中。在List Widget中添加了四个项目后，可能会显示如下截图所示：
- en: '![](assets/f3ab5ae8-fe93-46e6-bc4d-4edfb5f2f9bb.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f3ab5ae8-fe93-46e6-bc4d-4edfb5f2f9bb.png)'
- en: 'Let''s add one more item, Pizza, to List Widget. Type `Pizza` in the Line Edit
    widget and click the Add button. The Pizza item will be added to the List Widget
    item, as shown in the following screenshot:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向List Widget中再添加一个项目Pizza。在Line Edit部件中输入`Pizza`，然后单击添加按钮。Pizza项目将被添加到List
    Widget中，如下截图所示：
- en: '![](assets/dac59a1d-1586-4ae6-96c2-86f6cbe5c05b.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dac59a1d-1586-4ae6-96c2-86f6cbe5c05b.png)'
- en: 'Assuming we want to edit the Pizza item from List Widget, click the Pizza item
    in List Widget and click on the Edit button. On clicking the Edit button, you
    get a dialog box prompting you to enter a new item to replace the Pizza item.
    Let''s enter `Cold Drink` in the dialog box, followed by clicking the OK button,
    as shown in the following screenshot:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要编辑List Widget中的Pizza项目，点击List Widget中的Pizza项目，然后点击编辑按钮。单击编辑按钮后，将弹出一个对话框，提示您输入一个新项目来替换Pizza项目。让我们在对话框中输入`Cold
    Drink`，然后单击OK按钮，如下截图所示：
- en: '![](assets/eb1432ea-258f-4eb5-b620-2b28fc01782f.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb1432ea-258f-4eb5-b620-2b28fc01782f.png)'
- en: 'You can see in the following screenshot that the Pizza item in List Widget
    is replaced by the text Cold Drink:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，您可以看到列表部件中的Pizza项目被文本Cold Drink替换：
- en: '![](assets/d19c2923-1402-4399-8c88-3b3883a1cce3.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d19c2923-1402-4399-8c88-3b3883a1cce3.png)'
- en: 'In order to delete any item from List Widget, simply click that item from List
    Widget, followed by clicking the Delete button. Let''s click the Coffee item from
    List Widget and click on the Delete button; the Coffee item will be deleted from
    List Widget, as shown in the following screenshot:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 要从列表部件中删除任何项目，只需点击列表部件中的项目，然后点击删除按钮。让我们点击列表部件中的Coffee项目，然后点击删除按钮；如下截图所示，Coffee项目将从列表部件中删除：
- en: '![](assets/877ff850-e8c9-48eb-896c-27e14a12e9d7.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/877ff850-e8c9-48eb-896c-27e14a12e9d7.png)'
- en: 'On clicking the Delete All button, the entire List Widget item will become
    empty, as shown in the following screenshot:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 单击删除所有按钮后，整个List Widget项目将变为空，如下截图所示：
- en: '![](assets/bbf1152c-f749-4aad-82c3-184593fc8a81.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bbf1152c-f749-4aad-82c3-184593fc8a81.png)'
- en: Using the Combo Box widget
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用组合框部件
- en: 'Combo boxes are used for getting input from the user with an applied constraint;
    that is, the user will be shown certain options in the form of a popup list and
    he/she can only select from the available choices. A combo box takes less space
    when compared with List Widget. The `QComboBox` class is used for displaying combo
    boxes. Not only can you display text through a combo box, but `pixmaps` too. Here
    are the methods provided by the `QComboBox` class:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 组合框用于从用户那里获取输入，并应用约束；也就是说，用户将以弹出列表的形式看到某些选项，他/她只能从可用选项中选择。与List Widget相比，组合框占用更少的空间。`QComboBox`类用于显示组合框。您不仅可以通过组合框显示文本，还可以显示`pixmaps`。以下是`QComboBox`类提供的方法：
- en: '| **Method** | **  Usage** |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **用途** |'
- en: '| `setItemText()` | Sets or changes the text of the item in the combo box.
    |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `setItemText()` | 设置或更改组合框中项目的文本。 |'
- en: '| `removeItem()` | Removes the specific item from the combo box. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `removeItem()` | 从组合框中删除特定项目。 |'
- en: '| `clear()` | Removes all items from the combo box. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `clear()` | 从组合框中删除所有项目。 |'
- en: '| `currentText()` | Returns the text of the current item, that is, the item
    that is currently chosen. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `currentText()` | 返回当前项目的文本，即当前选择的项目。 |'
- en: '| `setCurrentIndex()`  | Sets the current index of the combo box, that is,
    it sets the desired item in the combo box as the currently chosen item. |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `setCurrentIndex()` | 设置组合框的当前索引，即将组合框中的所需项目设置为当前选择的项目。 |'
- en: '| `count()` | Returns the count of the items in the combo box. |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| `count()` | 返回组合框中项目的计数。 |'
- en: '| `setMaxCount()` | Sets the maximum number of items that are allowed in the
    combo box. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| `setMaxCount()` | 设置允许在组合框中的最大项目数。 |'
- en: '| `setEditable()` | Make the combo box editable, that is, the user can edit
    items in the combo box. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| `setEditable()` | 使组合框可编辑，即用户可以编辑组合框中的项目。 |'
- en: '| `addItem()`  | Appends the specified content to the combo box. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `addItem()` | 将指定内容附加到组合框中。 |'
- en: '| `addItems()` | Appends each of the strings supplied in the text to the combo
    box. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `addItems()` | 将提供的每个字符串附加到组合框中。 |'
- en: '| `itemText()` | Returns the text at the specified index location in the combo
    box. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `itemText()` | 返回组合框中指定索引位置的文本。 |'
- en: '| `currentIndex()` | Returns the index location of the currently chosen item
    in the combo box. If the combo box is empty or no item is currently chosen in
    the combo box, the method will return `–1` as the index. |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| `currentIndex()` | 返回组合框中当前选择项目的索引位置。如果组合框为空或组合框中当前未选择任何项目，则该方法将返回`-1`作为索引。
    |'
- en: 'The following are the signals that are generated by `QComboBox`:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由`QComboBox`生成的信号：
- en: '| **Signal** | **Description** |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| **信号** | **描述** |'
- en: '| currentIndexChanged() |  Emitted when the index of the combo box is changed,
    that is, the user selects some new item in the combo box. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| currentIndexChanged() | 当组合框的索引更改时发出，即用户在组合框中选择了一些新项目。 |'
- en: '| activated()  | Emitted when the index is changed by the user. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| activated() | 当用户更改索引时发出。 |'
- en: '| highlighted()  | Emitted when the user highlights an item in the combo box.
    |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| highlighted() | 当用户在组合框中突出显示项目时发出。 |'
- en: '| editTextChanged()  | Emitted when the text of an editable combo box is changed.
    |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| editTextChanged() | 当可编辑组合框的文本更改时发出。 |'
- en: To understand the workings of a combo box practically, let's create a recipe.
    This recipe will display certain bank account types via a combo box and will prompt
    the user to choose the type of bank account he/she wants to open. The selected
    bank account type from the combo box will be displayed on the screen through a Label widget.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际了解组合框的工作原理，让我们创建一个示例。这个示例将通过一个组合框显示特定的银行账户类型，并提示用户选择他/她想要开设的银行账户类型。通过组合框选择的银行账户类型将通过`Label`小部件显示在屏幕上。
- en: How to do it…
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The following are the steps to create an application that makes use of a combo
    box to show certain options and explains how the selected option from the combo
    box can be displayed:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建一个应用程序的步骤，该应用程序利用组合框显示某些选项，并解释了如何显示来自组合框的所选选项：
- en: Create a new application of the Dialog without Buttons template, drag two Label
    widgets and a Combo Box widget from the Widget box, and drop them onto the form.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个没有按钮的对话框的新应用程序模板，从小部件框中拖动两个Label小部件和一个Combo Box小部件，并将它们放到表单中。
- en: Set the text property of the first Label widget to `Select your account type`.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个Label小部件的文本属性设置为`选择您的账户类型`。
- en: Delete the default text property of the second Label widget, as its text will
    be set through code.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第二个Label小部件的默认文本属性，因为其文本将通过代码设置。
- en: Set the objectName property of the Combo Box widget to `comboBoxAccountType`.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组合框小部件的objectName属性设置为`comboBoxAccountType`。
- en: The second Label widget will be used to display the bank account type that is
    chosen by the user, so set the objectName property of the second Label widget
    to `labelAccountType`.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个Label小部件将用于显示用户选择的银行账户类型，因此将第二个Label小部件的objectName属性设置为`labelAccountType`。
- en: As we want the Combo Box widget to display certain bank account types, right-click
    on the Combo Box widget and from the context menu that opens up, select the Edit
    Items option.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们希望组合框小部件显示特定的银行账户类型，因此右键单击组合框小部件，并从打开的上下文菜单中选择编辑项目选项。
- en: Add some bank account types to the Combo Box widget one by one.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐个向组合框小部件添加一些银行账户类型。
- en: Save the application by name as `demoComboBox.ui`.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoComboBox.ui`。
- en: 'Click the + button displayed at the bottom of the dialog to add a bank account
    type to the Combo Box widget, as shown in the following screenshot:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击对话框底部显示的+按钮，将银行账户类型添加到组合框小部件中，如下截图所示：
- en: '![](assets/f949873b-a195-402c-b874-ed1b68424b5f.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f949873b-a195-402c-b874-ed1b68424b5f.png)'
- en: 'After adding the desired bank account types, click on the OK button to exit
    from the dialog. The form will now appear, as shown in the following screenshot:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加所需的银行账户类型后，单击“确定”按钮退出对话框。表单现在将显示如下截图所示：
- en: '![](assets/d8e57706-8767-492e-9c85-d22cfaf04fbb.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d8e57706-8767-492e-9c85-d22cfaf04fbb.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted to the Python code. The `pyuic5` utility
    can be used for generating Python code from the XML file. The generated file,
    `demoComboBox.py`, can be seen in the source code bundle of this book.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。可以使用`pyuic5`实用程序从XML文件生成Python代码。生成的文件`demoComboBox.py`可以在本书的源代码包中看到。
- en: Treat the `demoComboBox.py` file as a header file, and import it to the file
    from which you will invoke its user interface design that is you will be able
    to access the combo box.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoComboBox.py`文件视为头文件，并将其导入到将调用其用户界面设计的文件中，这样您就可以访问组合框。
- en: 'Create another Python file with the name `callComboBox.pyw` and import the
    `demoComboBox.py` code into it. The code in the Python script `callComboBox.pyw`
    is as shown here:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callComboBox.pyw`的Python文件，并将`demoComboBox.py`的代码导入其中。Python脚本`callComboBox.pyw`中的代码如下所示：
- en: '[PRE8]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the `demoComboBox.py` file, a class with the name of the top-level object
    is created with `Ui_ prepended`. That is, for the top-level object, `Dialog`,
    the `Ui_Dialog` class, is created and stores the interface elements of our widget.
    That class includes two methods, `setupUi` and `retranslateUi`.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在`demoComboBox.py`文件中，创建了一个名为顶级对象的类，其名称为`Ui_ prepended`。也就是说，对于顶级对象`Dialog`，创建了`Ui_Dialog`类，并存储了我们小部件的接口元素。该类包括两种方法，`setupUi`和`retranslateUi`。
- en: The `setupUi` method creates the widgets that are used in defining the user
    interface in Qt Designer. Also, the properties of the widgets are set in this
    method. The `setupUi` method takes a single argument, which is the top-level widget
    of the application, an instance of `QDialog`. The `retranslateUi` method translates
    the interface.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`setupUi`方法创建了在Qt Designer中定义用户界面时使用的小部件。此方法还设置了小部件的属性。`setupUi`方法接受一个参数，即应用程序的顶层小部件，即`QDialog`的一个实例。`retranslateUi`方法用于翻译界面。'
- en: In the `callComboBox.pyw` file, whenever the user selects any item from the
    combo box, the `currentIndexChanged` signal will be emitted and the `currentIndexChanged` signal
    is connected to the `dispAccountType` method, so whenever any item is selected
    from the combo box, the `dispAccountType` method will be invoked.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callComboBox.pyw`文件中，每当用户从组合框中选择任何项目时，`currentIndexChanged`信号将被发射，并且`currentIndexChanged`信号连接到`dispAccountType`方法，因此每当从组合框中选择任何项目时，`dispAccountType`方法将被调用。
- en: In the `dispAccountType` method, you access the currently selected index number
    by invoking the `currentIndex` method of the `QComboBox` class and passing the
    fetched index location to the `itemText` method of the `QComboBox` class to get
    the text of the currently selected combo box item. The currently selected combo
    box item is then displayed through the Label widget.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dispAccountType`方法中，通过调用`QComboBox`类的`currentIndex`方法来访问当前选定的索引号，并将获取的索引位置传递给`QComboBox`类的`itemText`方法，以获取当前选定的组合框项目的文本。然后通过标签小部件显示当前选定的组合框项目。
- en: 'On running the application, you will find a combo box showing four bank account
    types: Saving Account, Current Account, Recurring Deposit Account, and Fixed Deposit
    Account, as shown in the following screenshot:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将看到一个下拉框显示四种银行账户类型：储蓄账户、活期账户、定期存款账户和定期存款账户，如下截图所示：
- en: '![](assets/1bb48fee-e2aa-42b9-8837-da3970018460.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1bb48fee-e2aa-42b9-8837-da3970018460.png)'
- en: 'On selecting a bank account type from the combo box, the chosen bank account
    type will be displayed through the Label widget, as shown in the following screenshot:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 从组合框中选择一个银行账户类型后，所选的银行账户类型将通过标签小部件显示，如下截图所示：
- en: '![](assets/7f09f615-47ce-4645-ae6d-308a5ee1430d.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f09f615-47ce-4645-ae6d-308a5ee1430d.png)'
- en: Using the Font Combo Box widget
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用字体组合框小部件
- en: The Font Combo Box widget, as the name suggests, displays a list of font styles
    to choose from. The chosen font style can be applied to the desired content if
    required.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 字体组合框小部件，顾名思义，显示一个可选择的字体样式列表。如果需要，所选的字体样式可以应用到所需的内容中。
- en: Getting ready
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To understand the workings of the Font Combo Box widget practically, let's create
    a recipe. This recipe will display a Font Combo Box widget and a Text Edit widget.
    The user will be able to type the desired content in the Text Edit widget. After
    typing the text in the Text Edit widget, when the user selects any font style
    from the Font Combo Box widget, the selected font will be applied to the content
    typed into the Text Edit widget.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际理解字体组合框小部件的工作原理，让我们创建一个示例。这个示例将显示一个字体组合框小部件和一个文本编辑小部件。用户可以在文本编辑小部件中输入所需的内容。在文本编辑小部件中输入文本后，当用户从字体组合框小部件中选择任何字体样式时，所选字体将被应用到文本编辑小部件中输入的内容。
- en: How to do it…
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Here are the steps to display an active Font Combo Box widget and to apply
    the selected font to the text written in the Text Edit widget:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是显示活动字体组合框小部件并将所选字体应用于文本编辑小部件中的文本的步骤：
- en: Create a new application of the Dialog without Buttons template and drag two
    Label widgets, a Font Combo Box widget, and a Text Edit widget from the Widget
    box and drop them onto the form.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个没有按钮的对话框模板的新应用程序，并从小部件框中拖动两个标签小部件、一个字体组合框小部件和一个文本编辑小部件，并将它们放到表单上。
- en: Set the text property of the first Label widget to `Select desired font` and
    that of the second Label widget to `Type some text`.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个标签小部件的文本属性设置为`选择所需的字体`，将第二个标签小部件的文本属性设置为`输入一些文本`。
- en: 'Save the application by name as `demoFontComboBox.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoFontComboBox.ui`。表单现在将显示如下截图所示：
- en: '![](assets/6422b45f-9351-46f8-a76a-87798511ab90.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6422b45f-9351-46f8-a76a-87798511ab90.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted to the Python code. On converting to
    Python code, the generated file, `demoFontComboBox.py`, can be seen in the source
    code bundle of this book. The preceding code will be used as a header file and
    is imported into the file in which the GUI is desired, that is, the user interface
    designed can be accessed in any Python script by simply importing the preceding
    code.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在一个`.ui`文件中，这是一个XML文件，需要转换为Python代码。转换为Python代码后，生成的文件`demoFontComboBox.py`将在本书的源代码包中可见。上述代码将被用作头文件，并被导入到需要GUI的文件中，也就是说，设计的用户界面可以通过简单地导入上述代码在任何Python脚本中访问。
- en: Create another Python file with the name `callFontFontComboBox.pyw` and import
    the `demoFontComboBox.py` code into it.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callFontFontComboBox.pyw`的Python文件，并将`demoFontComboBox.py`代码导入其中。
- en: 'The code in the Python script, `callFontComboBox.pyw`, is as shown here:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: Python脚本`callFontComboBox.pyw`中的代码如下所示：
- en: '[PRE9]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the `callFontComboBox.pyw` file, whenever the user selects any font style
    from the Font Combo Box widget, the `currentFontChanged` signal is emitted and
    this signal is connected to the `changeFont` method, so whenever any font style
    is chosen from the Font Combo Box widget, the `changeFont()` method will be invoked.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callFontComboBox.pyw`文件中，每当用户从字体组合框小部件中选择任何字体样式时，将发射`currentFontChanged`信号，并且该信号连接到`changeFont`方法，因此每当从字体组合框小部件中选择任何字体样式时，将调用`changeFont()`方法。
- en: In the `changeFont()` method, you access the selected font style by invoking
    two methods. The first method invoked is the `currentIndex()` method of the `QFontComboBox`
    class, which fetches the index number of the selected font style. The second method
    invoked is the `itemText()` method, and the index location of the currently selected
    font style is passed to this method to access the chosen font style. The chosen
    font style is then applied to the content written in the Text Edit widget.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在`changeFont()`方法中，通过调用两个方法来访问所选的字体样式。首先调用的是`QFontComboBox`类的`currentIndex()`方法，该方法获取所选字体样式的索引号。然后调用的是`itemText()`方法，并将当前所选字体样式的索引位置传递给该方法，以访问所选的字体样式。然后将所选的字体样式应用于文本编辑小部件中的内容。
- en: 'On running the application, you will find a Font Combo Box widget showing available
    font styles in the system, as shown in the following screenshot:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将看到一个字体组合框小部件，显示系统中可用的字体样式，如下截图所示：
- en: '![](assets/f886b743-3310-4daa-9245-852c3926c46a.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f886b743-3310-4daa-9245-852c3926c46a.png)'
- en: 'Type some text in the Text Edit widget and choose the desired font from the
    font combo box. The chosen font style will be applied to the text written in the
    Text Edit widget, as shown in the following screenshot:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑小部件中输入一些文本，并从字体组合框中选择所需的字体。所选的字体样式将应用于文本编辑小部件中的文本，如下截图所示：
- en: '![](assets/058646f2-31d3-4a67-adf1-60a195d177fd.png)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/058646f2-31d3-4a67-adf1-60a195d177fd.png)'
- en: Using the Progress Bar widget
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用进度条小部件
- en: The Progress Bar widget is very useful in representing the progress of any task.
    Whether it is downloading a file from a server, virus scanning on a machine, or
    some other critical task, the Progress Bar widget helps inform the user of the
    percentage of the task that is done and the percentage that is pending. As the
    task completes, the Progress Bar widget keeps updating, indicating progress in
    the task.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条小部件在表示任何任务的进度时非常有用。无论是从服务器下载文件，还是在计算机上进行病毒扫描，或者其他一些关键任务，进度条小部件都有助于通知用户任务完成的百分比和待处理的百分比。随着任务的完成，进度条小部件不断更新，指示任务的进展。
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To understand how the progress bar is updated to show the progress of any task,
    let's create a recipe. This recipe will display a Progress Bar widget, indicating
    the total time required to download a file. When the user clicks the push button
    to begin downloading the file, the Progress Bar widget will update from 0% to 100%
    gradually; that is, the progress bar will update as the file is being downloaded.
    The Progress Bar widget will show 100% when the file is completely downloaded.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解如何更新进度条以显示任何任务的进度，让我们创建一个示例。这个示例将显示一个进度条小部件，指示下载文件所需的总时间。当用户点击推送按钮开始下载文件时，进度条小部件将从0%逐渐更新到100%；也就是说，随着文件的下载，进度条将更新。当文件完全下载时，进度条小部件将显示100%。
- en: How to do it…
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Initially, the Progress Bar widget is at 0% and to make it go up, we need to
    make use of a loop. The loop will increment its value as the task represented
    by the Progress Bar widget progresses towards completion. Every increment in the
    loop value will add to some progress in the Progress Bar widget. Here is the step-by-step
    procedure to show how a progress bar can be updated:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，进度条小部件为0%，为了使其增加，我们需要使用循环。随着进度条小部件表示的任务向完成的进展，循环将增加其值。循环值的每次增加都会增加进度条小部件的一些进度。以下是逐步过程，展示了如何更新进度条：
- en: Create a new application from the Dialog without Buttons template, and drag
    a Label widget, a Progress Bar widget, and a Push Button widget from the Widget
    box and drop them onto the form.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从没有按钮的对话框模板创建一个新应用程序，并从小部件框中拖动一个标签小部件、一个进度条小部件和一个推送按钮小部件，然后将它们放到表单上。
- en: Set the text property of the Label widget to `Downloading the file` and that
    of the Push Button widget to `Start Downloading`.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的文本属性设置为`下载文件`，将推送按钮小部件的文本属性设置为`开始下载`。
- en: Set the objectName property of the Push Button widget to `pushButtonStart`.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的objectName属性设置为`pushButtonStart`。
- en: 'Save the application by name as `demoProgressBar.ui`. The form will now appear,
    as shown in the following screenshot:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoProgressBar.ui`。现在表单将显示如下截图所示：
- en: '![](assets/b1652ac9-b923-490a-b769-fb30070ac1f3.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1652ac9-b923-490a-b769-fb30070ac1f3.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs to be converted into Python code. The generated Python
    code, `demoProgressBar.py`, can be seen in the source code bundle of this book. The
    preceding code will be used as a header file and is imported into the file in
    which the GUI is desired; that is, the user interface designed in the code can
    be accessed in any Python script by simply importing the preceding code.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。生成的Python代码`demoProgressBar.py`可以在本书的源代码包中找到。上述代码将用作头文件，并导入到需要GUI的文件中；也就是说，代码中设计的用户界面可以通过简单导入上述代码在任何Python脚本中访问。
- en: 'Create another Python file with the name `callProgressBar.pyw` and import the
    `demoProgressBar.py` code into it. The code in the Python script `callProgressBar.pyw`
    is as shown here:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callProgressBar.pyw`的Python文件，并将`demoProgressBar.py`代码导入其中。Python脚本`callProgressBar.pyw`中的代码如下所示：
- en: '[PRE10]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the `callProgressBar.pyw` file, because we want the progress bar to show
    its progress when the push button is pressed, the clicked() event of the progress
    bar is connected to the `updateBar()` method, so when the push button is clicked,
    the `updateBar()` method will be invoked. In the `updateBar()` method, a `while`
    loop is used that loops from `0` to `100`. A variable, `x`, is initialized to
    the value `0`. With every iteration of the while loop, the value of `x` is incremented
    by `0.0001`. The value in the `x` variable is applied to the progress bar when
    updating it. That is, with every iteration of the while loop, the value of `x`
    is incremented and the value of `x` is used in updating the progress bar. Hence,
    the progress bar will begin its progress at 0% and continue until it reaches 100%.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callProgressBar.pyw`文件中，因为我们希望在按下按钮时进度条显示其进度，所以将进度条的clicked()事件连接到`updateBar()`方法，因此当按下按钮时，将调用`updateBar()`方法。在`updateBar()`方法中，使用了一个`while`循环，从`0`到`100`循环。一个变量`x`被初始化为值`0`。在while循环的每次迭代中，变量`x`的值增加了`0.0001`。在更新进度条时，将`x`变量的值应用于进度条。也就是说，每次while循环的迭代中，变量`x`的值都会增加，并且变量`x`的值会用于更新进度条。因此，进度条将从0%开始逐渐增加，直到达到100%。
- en: 'On running the application, initially, you will find the Progress Bar widget
    at 0% along with the push button at the bottom with the caption Start Downloading
    (see the following screenshot). Click the Start Downloading push button and you
    will see that the progress bar begins showing progress gradually. The progress
    bar keeps going up until it reaches 100% to indicate that the file is completely
    downloaded:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序时，最初，您会发现进度条小部件为0%，底部有一个带有标题“开始下载”的按钮（请参见以下屏幕截图）。单击“开始下载”按钮，您会看到进度条开始逐渐显示进度。进度条会持续增加，直到达到100%，表示文件已完全下载：
- en: '![](assets/07e662a1-24bf-46c4-97b3-be0ce58f4577.png)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/07e662a1-24bf-46c4-97b3-be0ce58f4577.png)'
