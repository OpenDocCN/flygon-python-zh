["```py\n **print(\"Hello world.\")** \n\n```", "```py\n **>>> count = 9973 \n>>> print(\"Final count\", count) \nFinal count 9973** \n\n```", "```py\n **>>> from pathlib import Path \n>>> import csv \n>>> from collections import OrderedDict \n>>> def get_fuel_use(source_path): \n...     with source_path.open() as source_file: \n...         rdr= csv.DictReader(source_file) \n...         od = (OrderedDict( \n...             [(column, row[column]) for column in rdr.fieldnames]) \n...             for row in rdr) \n...         data = list(od) \n...     return data \n>>> source_path = Path(\"code/fuel2.csv\") \n>>> fuel_use= get_fuel_use(source_path) \n>>> fuel_use  \n[OrderedDict([('date', '10/25/13'), ('engine on', '08:24:00'), \n    ('fuel height on', '29'), ('engine off', '13:15:00'), \n    ('fuel height off', '27')]), \nOrderedDict([('date', '10/26/13'), ('engine on', '09:12:00'), \n    ('fuel height on', '27'), ('engine off', '18:25:00'), \n    ('fuel height off', '22')]), \nOrderedDict([('date', '10/28/13'), ('engine on', '13:21:00'), \n    ('fuel height on', '22'), ('engine off', '06:25:00'), \n    ('fuel height off', '14')])]** \n\n```", "```py\n **>>> for leg in fuel_use: \n...    start = float(leg['fuel height on']) \n...    finish = float(leg['fuel height off']) \n...    print(\"On\", leg['date'], \n...    'from', leg['engine on'], \n...    'to', leg['engine off'], \n...    'change', start-finish, 'in.') \nOn 10/25/13 from 08:24:00 to 13:15:00 change 2.0 in. \nOn 10/26/13 from 09:12:00 to 18:25:00 change 5.0 in. \nOn 10/28/13 from 13:21:00 to 06:25:00 change 8.0 in.** \n\n```", "```py\n **>>> print(\"date\", \"start\", \"end\", \"depth\", sep=\" | \") \ndate | start | end | depth \n>>> for leg in fuel_use: \n...    start = float(leg['fuel height on']) \n...    finish = float(leg['fuel height off']) \n...    print(leg['date'], leg['engine on'], \n...    leg['engine off'], start-finish, sep=\" | \") \n10/25/13 | 08:24:00 | 13:15:00 | 2.0 \n10/26/13 | 09:12:00 | 18:25:00 | 5.0 \n10/28/13 | 13:21:00 | 06:25:00 | 8.0** \n\n```", "```py\n **>>> for leg in fuel_use: \n...    start = float(leg['fuel height on']) \n...    finish = float(leg['fuel height off']) \n...    print('date', leg['date'], sep='=', end=', ') \n...    print('on', leg['engine on'], sep='=', end=', ') \n...    print('off', leg['engine off'], sep='=', end=', ') \n...    print('change', start-finish, sep=\"=\") \ndate=10/25/13, on=08:24:00, off=13:15:00, change=2.0 \ndate=10/26/13, on=09:12:00, off=18:25:00, change=5.0 \ndate=10/28/13, on=13:21:00, off=06:25:00, change=8.0** \n\n```", "```py\n    def print(*args, *, sep=None, end=None, file=sys.stdout): \n        if sep is None: sep = ' ' \n        if end is None: end = '\\n' \n        arg_iter= iter(args) \n        first = next(arg_iter) \n        sys.stdout.write(repr(first)) \n        for value in arg_iter: \n            sys.stdout.write(sep) \n            sys.stdout.write(repr(value()) \n        sys.stdout.write(end) \n\n```", "```py\n    import sys \n    print(\"Red Alert!\", file=sys.stderr) \n\n```", "```py\n **python3 myapp.py <input.dat >output.dat** \n\n```", "```py\n    from pathlib import Path \n    target_path = Path(\"somefile.dat\") \n    with target_path.open('w', encoding='utf-8') as target_file: \n        print(\"Some output\", file=target_file) \n        print(\"Ordinary log\") \n\n```", "```py\n    from datetime import date \n\n    def get_date(): \n        year = int(input(\"year: \")) \n        month = int(input(\"month [1-12]: \")) \n        day = int(input(\"day [1-31]: \")) \n        result = date(year, month, day) \n        return result \n\n```", "```py\n            from getpass import getpass \n\n    ```", "```py\n            year = int(input(\"year: \")) \n\n    ```", "```py\n            month = None \n            while month is None: \n                month_text = input(\"month [1-12]: \") \n                try: \n                    month = int(month_text) \n                    if 1 <= month <= 12: \n                        pass \n                    else: \n                        raise ValueError(\"Month of range 1-12\") \n                except ValueError as ex: \n                    print(ex) \n                    month = None \n\n    ```", "```py\n            input_date = None \n            while input_date is None: \n                year = get_integer(\"year: \", 1900, 2100) \n                month = get_integer(\"month [1-12]: \", 1, 12) \n                day = get_integer(\"day [1-31]: \", 1, 31) \n                try: \n                    result = date(year, month, day) \n                except ValueError as ex: \n                    print(ex) \n                    input_date = None \n            # assert input_date is the valid date entered by the user \n\n    ```", "```py\n            day_1_date = date(year, month, 1) \n            if month == 12: \n                next_year, next_month = year+1, 1 \n            else: \n                next_year, next_month = year, month+1 \n            day_end_date = date(next_year, next_month, 1) \n\n    ```", "```py\n    import subprocess \n    status = subprocess.check_output( \n        ['ps',PID]) \n\n```", "```py\n    status = subprocess.check_output( \n        ['tasklist', '/fi', '\"PID eq {PID}\"'.format(PID=PID)]) \n\n```", "```py\nraw_date_str = input(\"date [yyyy-mm-dd]: \") \ninput_date = datetime.strptime(raw_date_str, '%Y-%m-%d').date() \n\n```", "```py\n **>>> import statistics \n>>> size = [2353, 2889, 2195, 3094, \n... 725, 1099, 690, 1207, 926, \n... 758, 615, 521, 1320] \n>>> mean_size = statistics.mean(size) \n>>> std_size = statistics.stdev(size) \n>>> sig1 = round(mean_size + std_size, 1) \n>>> [x for x in size if x > sig1] \n[2353, 2889, 3094]** \n\n```", "```py\n     **>>> print( \n          ...     \"mean={mean_size:.2f}, std={std_size:.2f}\" \n          ...     .format_map(vars()) \n          ... ) \n          mean=1414.77, std=901.10** \n\n    ```", "```py\n **>>> print( \n...     \"mean={mean_size:.2f}, std={std_size:.2f},\" \n...     \" limit2={sig2:.2f}\" \n...     .format(sig2=mean_size+2*std_size, **vars()) \n... ) \nmean=1414.77, std=901.10, limit2=3216.97** \n\n```", "```py\n **slott$ python3 ch05_r04.py -r KM 36.12,-86.67 33.94,-118.40** \n\n **From (36.12, -86.67) to (33.94, -118.4) in KM = 2887.35** \n\n```", "```py\n **slott$ python3 ch05_r04.py -r KM 36.12,-86.67 33.94,-118asd** \n\n **usage: ch05_r04.py [-h] [-r {NM,MI,KM}] p1 p2** \n\n **ch05_r04.py: error: argument p2: could not convert string to float: '-118asd'** \n\n```", "```py\n    from ch03_r05 import haversine, MI, NM, KM \n    def display(lat1, lon1, lat2, lon2, r): \n        r_float = {'NM': NM, 'KM': KM, 'MI': MI}[r] \n        d = haversine( lat1, lon1, lat2, lon2, r_float ) \n        print( \"From {lat1},{lon1} to {lat2},{lon2}\" \n              \"in {r} = {d:.2f}\".format_map(vars())) \n\n```", "```py\n **>>> from ch05_r04 import display \n>>> display(36.12, -86.67, 33.94, -118.4, 'NM') \nFrom 36.12,-86.67 to 33.94,-118.4 in NM = 1558.53** \n\n```", "```py\n            def get_options(): \n\n    ```", "```py\n            parser = argparse.ArgumentParser() \n\n    ```", "```py\n            parser.add_argument('-r', action='store', \n                    choices=('NM', 'MI', 'KM'), default='NM') \n            parser.add_argument('p1', action='store', type=point_type) \n            parser.add_argument('p2', action='store', type=point_type) \n\n    ```", "```py\n            add_argument('--radius', '-r'....)\n    ```", "```py\n            options = parser.parse_args() \n\n    ```", "```py\n    def get_options(): \n        parser = argparse.ArgumentParser() \n        parser.add_argument('-r', action='store', \n                choices=('NM', 'MI', 'KM'), default='NM') \n        parser.add_argument('p1', action='store', type=point_type) \n        parser.add_argument('p2', action='store', type=point_type) \n        options = parser.parse_args() \n        return options \n\n```", "```py\n    def point_type(string): \n        try: \n            lat_str, lon_str = string.split(',') \n            lat = float(lat_str) \n            lon = float(lon_str) \n            return lat, lon \n        except Exception as ex: \n            raise argparse.ArgumentTypeError from ex \n\n```", "```py\n    if __name__ == \"__main__\": \n        options = get_options() \n        lat_1, lon_1 = options.p1 \n        lat_2, lon_2 = options.p2 \n        r = {'NM': NM, 'KM': KM, \"MI\": MI}[options.r] \n        display(lat_1, lon_1, lat_2, lon_2, r) \n\n```", "```py\n **python3 some_program.py *.rst** \n\n```", "```py\n    parser.add_argument('file', nargs='*') \n\n```", "```py\n    for filename in options.file: \n        process(filename) \n\n```", "```py\n **Starting with 100** \n\n **Roulette> **`help`**** \n\n **Documented commands (type help <topic>):** \n\n **========================================** \n\nbet  help \n\nUndocumented commands: \n **======================** \n\n **done  spin  stake** \n\n **Roulette>** \n\nhelp bet\n\n **Bet <name> <amount>** \n\n **Name is one of even, odd, red, black, high, or low** \n\n **Roulette> **`bet black 1`**** \n\n **Roulette> **`bet even 1`**** \n\n **Roulette> **`spin`**** \n\n **Spin ('21', {'red', 'high', 'odd'})** \n\n **Lose even** \n\n **Lose black** \n\n **... more interaction ...** \n\n **Roulette> **`done`**** \n\n **Ending with 93** \n\n```", "```py\n    red_bins = (1, 3, 5, 7, 9, 12, 14, 16, 18, \n        21, 23, 25, 27, 28, 30, 32, 34, 36) \n\n    def roulette_bin(i): \n        return str(i), { \n            'even' if i%2 == 0 else 'odd', \n            'low'  if 1 <= i < 19 else 'high', \n            'red'  if i in red_bins else 'black' \n        } \n\n```", "```py\n    def zero_bin(): \n        return '0', set() \n\n    def zerozero_bin(): \n        return '00', set() \n\n```", "```py\n    def wheel(): \n        b0 = [zero_bin()] \n        b00 = [zerozero_bin()] \n        b1_36 = [ \n            roulette_bin(i) for i in range(1,37) \n        ] \n        return b0+b00+b1_36 \n\n```", "```py\n            import cmd \n\n    ```", "```py\n            class Roulette(cmd.Cmd): \n\n    ```", "```py\n                def preloop(self): \n                    self.bets = {} \n                    self.stake = 100 \n                    self.wheel = wheel() \n\n    ```", "```py\n                def do_bet(self, arg_string): \n                    pass \n                def do_spin(self, arg_string): \n                    pass \n\n    ```", "```py\n                def do_spin(self, arg_string): \n                    if len(self.bets) == 0: \n                        print(\"No bets have been placed\") \n                        return \n                    # Happy path: more goes here. \n\n                BET_NAMES = set(['even', 'odd', 'high', 'low', 'red', 'black']) \n\n                def do_bet(self, arg_string): \n                    if arg_string not in BET_NAMES: \n                        print(\"{0} is not a valid bet\".format(arg_string)) \n                        return \n                    # Happy path: more goes here. \n\n    ```", "```py\n            self.bets[arg_string] = 1 \n\n    ```", "```py\n            self.spin = random.choice(self.wheel) \n            print(\"Spin\", self.spin) \n            label, winners = self.spin \n            for b in self.bets: \n                if b in winners: \n                    self.stake += self.bets[b] \n                    print(\"Win\", b) \n                else: \n                    self.stake -= self.bets[b] \n                    print(\"Lose\", b) \n            self.bets= {} \n\n    ```", "```py\n            if __name__ == \"__main__\": \n                r = Roulette() \n                r.cmdloop() \n\n    ```", "```py\n            class Roulette(cmd.Cmd): \n                prompt=\"Roulette> \" \n\n    ```", "```py\n **slott$ python3 ch05_r04.py -r KM 36.12,-86.67 33.94,-118.40** \n\n **From (36.12, -86.67) to (33.94, -118.4) in KM = 2887.35** \n\n```", "```py\n **slott$ UNITS=NM** \n\n **slott$ HOME_PORT=36.842952,-76.300171** \n\n **slott$ python3 ch05_r06.py 36.12,-86.67** \n\n **From 36.12,-86.67 to 36.842952,-76.300171 in NM = 502.23** \n\n```", "```py\n            import os \n\n    ```", "```py\n            from ch03_r05 import haversine, MI, NM, KM \n\n    ```", "```py\n            def get_options(argv=sys.argv): \n\n    ```", "```py\n            default_units = os.environ.get('UNITS', 'KM') \n            if default_units not in ('KM', 'NM', 'MI'): \n                sys.exit(\"Invalid value for UNITS, not KM, NM, or MI\") \n            default_home_port = os.environ.get('HOME_PORT') \n\n    ```", "```py\n                      parser = argparse.ArgumentParser() \n            parser.add_argument('-r', action='store', \n                choices=('NM', 'MI', 'KM'), default=default_units) \n            parser.add_argument('p1', action='store', type=point_type) \n            parser.add_argument('p2', nargs='?', action='store', type=point_type, \n                default=default_home_port) \n            options = parser.parse_args(argv[1:]) \n\n    ```", "```py\n                    if options.p2 is None: \n                    sys.exit(\"Neither HOME_PORT nor p2 argument provided.\") \n\n    ```", "```py\n            return options \n\n    ```", "```py\n    ['ch05_r06.py', '-r', 'NM', '36.12,-86.67'] \n\n```"]