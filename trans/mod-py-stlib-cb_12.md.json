["```py\nimport mimetypes\n\ndef guess_file_type(filename):\n    if not getattr(guess_file_type, 'initialised', False):\n        mimetypes.init()\n        guess_file_type.initialised = True\n    file_type, encoding = mimetypes.guess_type(filename)\n    return file_type\n```", "```py\n>>> print(guess_file_type('~/Pictures/5565_1680x1050.jpg'))\n'image/jpeg'\n>>> print(guess_file_type('~/Pictures/5565_1680x1050.jpeg'))\n'image/jpeg'\n>>> print(guess_file_type('~/Pictures/avatar.png'))\n'image/png' \n```", "```py\n>>> print(guess_file_type('/tmp/unable_to_guess.blob'))\nNone\n```", "```py\n>>> print(guess_file_type('/this/does/not/exists.txt'))\n'text/plain'\n```", "```py\nimport imghdr\n\ndef detect_image_format(filename):\n    return imghdr.what(filename)\n```", "```py\n>>> print(detect_image_format('~/Pictures/avatar.jpg'))\n'jpeg'\n>>> with open('~/Pictures/avatar.png', 'rb') as f:\n...     print(detect_image_format(f))\n'png'\n```", "```py\nimport imghdr\nimport struct\nimport os\nfrom pathlib import Path\n\nclass ImageReader:\n    @classmethod\n    def get_size(cls, f):    \n        requires_close = False\n        if isinstance(f, (str, getattr(os, 'PathLike', str))):\n            f = open(f, 'rb')\n            requires_close = True\n        elif isinstance(f, Path):\n            f = f.expanduser().open('rb')\n            requires_close = True\n\n        try:\n            image_type = imghdr.what(f)\n            if image_type not in ('jpeg', 'png', 'gif'):\n                raise ValueError('Unsupported image format')\n\n            f.seek(0)\n            size_reader = getattr(cls, '_size_{}'.format(image_type))\n            return size_reader(f)\n        finally:\n            if requires_close: f.close()\n\n    @classmethod\n    def _size_gif(cls, f):\n        f.read(6)  # Skip the Magick Numbers\n        w, h = struct.unpack('<HH', f.read(4))\n        return w, h\n\n    @classmethod\n    def _size_png(cls, f):\n        f.read(8)  # Skip Magic Number\n        clen, ctype = struct.unpack('>I4s', f.read(8))\n        if ctype != b'IHDR':\n            raise ValueError('Unsupported PNG format')\n        w, h = struct.unpack('>II', f.read(8))\n        return w, h\n\n    @classmethod\n    def _size_jpeg(cls, f):\n        start_of_image = f.read(2)\n        if start_of_image != b'\\xff\\xd8':\n            raise ValueError('Unsupported JPEG format')\n        while True:\n            marker, segment_size = struct.unpack('>2sH', f.read(4))\n            if marker[0] != 0xff:\n                raise ValueError('Unsupported JPEG format')\n            data = f.read(segment_size - 2)\n            if not 0xc0 <= marker[1] <= 0xcf:\n                continue\n            _, h, w = struct.unpack('>cHH', data[:5])\n            break\n        return w, h\n```", "```py\n>>> print(ImageReader.get_size('~/Pictures/avatar.png'))\n(300, 300)\n>>> print(ImageReader.get_size('~/Pictures/avatar.jpg'))\n(300, 300)\n```", "```py\nrequires_close = False\nif isinstance(f, (str, getattr(os, 'PathLike', str))):\n    f = open(f, 'rb')\n    requires_close = True\nelif isinstance(f, Path):\n    f = f.expanduser().open('rb')\n    requires_close = True\n```", "```py\nimage_type = imghdr.what(f)\nif image_type not in ('jpeg', 'png', 'gif'):\n    raise ValueError('Unsupported image format')\n```", "```py\nf.seek(0)\nsize_reader = getattr(cls, '_size_{}'.format(image_type))\nreturn size_reader(f)\n```", "```py\n@classmethod\ndef _size_gif(cls, f):\n    f.read(6)  # Skip the Magick Numbers\n    w, h = struct.unpack('<HH', f.read(4))\n    return w, h\n```", "```py\n@classmethod\ndef _size_png(cls, f):\n    f.read(8)  # Skip Magic Number\n    clen, ctype = struct.unpack('>I4s', f.read(8))\n```", "```py\nif ctype != b'IHDR':\n    raise ValueError('Unsupported PNG format')\n```", "```py\nw, h = struct.unpack('>II', f.read(8))\nreturn w, h\n```", "```py\n@classmethod\ndef _size_jpeg(cls, f):\n    start_of_image = f.read(2)\n    if start_of_image != b'\\xff\\xd8':\n        raise ValueError('Unsupported JPEG format')\n```", "```py\nwhile True:\n    marker, segment_size = struct.unpack('>2sH', f.read(4))\n```", "```py\nif marker[0] != 0xff:\n    raise ValueError('Unsupported JPEG format')\n```", "```py\ndata = f.read(segment_size - 2)\n```", "```py\nif not 0xc0 <= marker[1] <= 0xcf:\n    continue\n```", "```py\n_, h, w = struct.unpack('>cHH', data[:5])\n```", "```py\nimport pathlib\nimport webbrowser\n\ndef playfile(fpath):\n    fpath = pathlib.Path(fpath).expanduser().resolve()\n    webbrowser.open('file://{}'.format(fpath))\n```", "```py\n>>> playfile('~/Pictures/avatar.jpg')\n```", "```py\n>>> playfile('~/Music/FLY_ME_TO_THE_MOON.mp3')\n```"]