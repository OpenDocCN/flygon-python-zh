["```py\nroot = tk.Tk()\ncanvas = tk.Canvas(root, width=1024, height=768)\ncanvas.pack()\n```", "```py\ncanvas.create_rectangle(100, 100, 200, 200, fill='orange')\n```", "```py\ncanvas.create_rectangle((600, 100), (700, 200), fill='#FF8800')\n```", "```py\ncanvas.create_oval((350, 250), (450, 350), fill='blue')\n```", "```py\ncanvas.create_line((100, 400), (400, 500),\n    (700, 400), (100, 400), width=5, fill='red')\n```", "```py\ncanvas.create_polygon((400, 150), (350,  300), (450, 300),\n    fill='blue', smooth=True)\n```", "```py\ncanvas.create_text((400, 600), text='Smile!',\n    fill='cyan', font='TkDefaultFont 64')\nsmiley = tk.PhotoImage(file='smile.gif')\nimage_item = canvas.create_image((400, 300), image=smiley)\n```", "```py\ncanvas.tag_bind(image_item, '<Button-1>', lambda e: canvas.delete(image_item))\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n```", "```py\n        super().__init__()\n\nApp().mainloop()\n```", "```py\nself.canvas = tk.Canvas(self, background='black')\nself.canvas.pack(fill='both', expand=1)\n```", "```py\n   def setup(self):\n       self.canvas.left = 0\n       self.canvas.top = 0\n       self.canvas.right = self.canvas.winfo_width()\n       self.canvas.bottom = self.canvas.winfo_height()\n       self.canvas.center_x = self.canvas.right // 2\n       self.canvas.center_y = self.canvas.bottom // 2\n\n       self.finish_line = self.canvas.create_rectangle(\n           (self.canvas.right - 50, 0),\n           (self.canvas.right, self.canvas.bottom),\n           fill='yellow', stipple='gray50')\n```", "```py\nself.after(200, self.setup)\n```", "```py\nclass Racer:\n\n    def __init__(self, canvas, color):\n        self.canvas = canvas\n        self.name = \"{} player\".format(color.title())\n        size = 50\n        self.id = canvas.create_oval(\n            (canvas.left, canvas.center_y),\n            (canvas.left + size, canvas.center_y + size),\n            fill=color)\n```", "```py\n               self.racers = [\n                   Racer(self.canvas, 'red'),\n                   Racer(self.canvas, 'green')]\n```", "```py\ndef move_racer(self):\n    x = randint(0, 100)\n    y = randint(-50, 50)\n    t = randint(500, 2000)\n    self.canvas.after(t, self.canvas.move, self.id, x, y)\n    if self.canvas.bbox(self.id)[0] < self.canvas.right:\n        self.canvas.after(t, self.move_racer)\n```", "```py\nfrom queue import Queue\n...\nclass Racer:\n    FRAME_RES = 50\n\n    def __init__(...):\n        ...\n        self.animation_queue = Queue()\n```", "```py\n    def plot_course(self):\n        start_x = self.canvas.left\n        start_y = self.canvas.center_y\n        total_dx, total_dy = (0, 0)\n\n        while start_x + total_dx < self.canvas.right:\n            dx = randint(0, 100)\n            dy = randint(-50, 50)\n            target_y = start_y + total_dy + dy\n            if not (self.canvas.top < target_y < self.canvas.bottom):\n                dy = -dy\n            time = randint(500, 2000)\n            self.queue_move(dx, dy, time)\n            total_dx += dx\n            total_dy += dy\n```", "```py\n    @staticmethod\n    def partition(n, k):\n        \"\"\"Return a list of k integers that sum to n\"\"\"\n        if n == 0:\n            return [0] * k\n```", "```py\n        base_step = int(n / k)\n        parts = [base_step] * k\n        for i in range(n % k):\n                parts[i] += n / abs(n)\n        return parts\n```", "```py\n    def queue_move(self, dx, dy, time):\n        num_steps = time // self.FRAME_RES\n        steps = zip(\n            self.partition(dx, num_steps),\n            self.partition(dy, num_steps))\n\n        for step in steps:\n            self.animation_queue.put(step)\n```", "```py\n    def animate(self):\n        if not self.animation_queue.empty():\n            nextmove = self.animation_queue.get()\n            self.canvas.move(self.id, *nextmove)\n        self.canvas.after(self.FRAME_RES, self.animate)\n```", "```py\n    def overlapping(self):\n        bbox = self.canvas.bbox(self.id)\n        overlappers = self.canvas.find_overlapping(*bbox)\n        return [x for x in overlappers if x!=self.id]\n```", "```py\n    def check_for_winner(self):\n        for racer in self.racers:\n            if self.finish_line in racer.overlapping():\n                self.declare_winner(racer)\n                return\n        self.after(Racer.FRAME_RES, self.check_for_winner)\n```", "```py\n    def declare_winner(self, racer):\n        wintext = self.canvas.create_text(\n            (self.canvas.center_x, self.canvas.center_y),\n            text='{} wins!\\nClick to play again.'.format(racer.name),\n            fill='white',\n            font='TkDefaultFont 32',\n            activefill='violet')\n        self.canvas.tag_bind(wintext, '<Button-1>', self.reset)\n```", "```py\n    def reset(self, *args):\n        for item in self.canvas.find_all():\n            self.canvas.delete(item)\n        self.setup()\n```", "```py\n    def get_growth_by_lab(self):\n        query = (\n            'SELECT date - (SELECT min(date) FROM plot_checks) AS day, '\n            'lab_id, avg(median_height) AS avg_height FROM plot_checks '\n            'GROUP BY date, lab_id ORDER BY day, lab_id;')\n        return self.query(query)\n```", "```py\nclass LineChartView(tk.Canvas):\n\n    margin = 20\n\n    def __init__(self, parent, chart_width, chart_height,\n                 x_axis, y_axis, x_max, y_max):\n        self.max_x = max_x\n        self.max_y = max_y\n        self.chart_width = chart_width\n        self.chart_height = chart_height\n```", "```py\n        view_width = chart_width + 2 * self.margin\n        view_height = chart_height + 2 * self.margin\n        super().__init__(\n            parent, width=view_width,\n            height=view_height, background='lightgrey')\n```", "```py\n        self.origin = (self.margin, view_height - self.margin)\n        self.create_line(\n            self.origin, (self.margin, self.margin), width=2)\n        self.create_line(\n            self.origin,\n            (view_width - self.margin,\n             view_height - self.margin))\n```", "```py\n        self.create_text(\n            (view_width // 2, view_height - self.margin),\n            text=x_axis, anchor='n')\n        # angle requires tkinter 8.6 -- macOS users take note!\n        self.create_text(\n            (self.margin, view_height // 2),\n            text=y_axis, angle=90, anchor='s')\n```", "```py\n        self.chart = tk.Canvas(\n            self, width=chart_width, height=chart_height,\n            background='white')\n        self.create_window(\n            self.origin, window=self.chart, anchor='sw')\n```", "```py\n    def plot_line(self, data, color):\n        x_scale = self.chart_width / self.max_x\n        y_scale = self.chart_height / self.max_y\n\n        coords = [(round(x * x_scale),\n            self.chart_height - round(y * y_scale))\n            for x, y in data]\n\n        self.chart.create_line(*coords, width=2, fill=color)\n```", "```py\n    def draw_legend(self, mapping):\n        y = self.margin\n        x = round(self.margin * 1.5) + self.chart_width\n        for label, color in mapping.items():\n              self.create_text((x, y), text=label, fill=color, \n              anchor='w')\n              y += 20\n```", "```py\n    def show_growth_chart(self):\n        data = self.data_model.get_growth_by_lab()\n        max_x = max([x['day'] for x in data])\n        max_y = max([x['avg_height'] for x in data])\n```", "```py\n        popup = tk.Toplevel()\n        chart = v.LineChartView(popup, 600, 300, 'day',\n                                'centimeters', max_x, max_y)\n        chart.pack(fill='both', expand=1)\n```", "```py\n        legend = {'A': 'green', 'B': 'blue', 'C': 'cyan',\n                  'D': 'yellow', 'E': 'purple'}\n        chart.draw_legend(legend)\n```", "```py\n        for lab, color in legend.items():\n            dataxy = [(x['day'], x['avg_height'])\n                for x in data\n                if x['lab_id'] == lab]\n            chart.plot_line(dataxy, color)\n```", "```py\n    def get_yield_by_plot(self):\n        query = (\n            'SELECT lab_id, plot, seed_sample, MAX(fruit) AS yield, '\n            'AVG(humidity) AS avg_humidity, '\n            'AVG(temperature) AS avg_temperature '\n            'FROM plot_checks WHERE NOT equipment_fault '\n            'GROUP BY lab_id, plot, seed_sample')\n        return self.query(query)\n```", "```py\nimport matplotlib\nmatplotlib.use('TkAgg')\n```", "```py\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_tkagg import (\n    FigureCanvasTkAgg, NavigationToolbar2TkAgg)\n```", "```py\nclass YieldChartView(tk.Frame):\n    def __init__(self, parent, x_axis, y_axis, title):\n        super().__init__(parent)\n        self.figure = Figure(figsize=(6, 4), dpi=100)\n        self.canvas = FigureCanvasTkAgg(self.figure, master=self)\n```", "```py\n        self.toolbar = NavigationToolbar2TkAgg(self.canvas, self)\n        self.canvas.get_tk_widget().pack(fill='both', expand=True)\n```", "```py\n        self.axes = self.figure.add_subplot(1, 1, 1)\n        self.axes.set_xlabel(x_axis)\n        self.axes.set_ylabel(y_axis)\n        self.axes.set_title(title)\n```", "```py\n    def draw_scatter(self, data, color, label):\n        x, y, s = zip(*data)\n        s = [(x ** 2)//2 for x in s]\n        scatter = self.axes.scatter(\n            x, y, s, c=color, label=label, alpha=0.5)\n```", "```py\n        self.scatters = []\n        self.scatter_labels = []\n```", "```py\n        self.scatters.append(scatter)\n        self.scatter_labels.append(label)\n        self.axes.legend(self.scatters, self.scatter_labels)\n```", "```py\n        popup = tk.Toplevel()\n        chart = v.YieldChartView(popup,\n            'Average plot humidity', 'Average Plot temperature',\n            'Yield as a product of humidity and temperature')\n        chart.pack(fill='both', expand=True)\n```", "```py\n        data = self.data_model.get_yield_by_plot()\n        seed_colors = {'AXM477': 'red', 'AXM478': 'yellow',\n            'AXM479': 'green', 'AXM480': 'blue'}\n```", "```py\n        for seed, color in seed_colors.items():\n            seed_data = [\n                (x['avg_humidity'], x['avg_temperature'], x['yield'])\n                for x in data if x['seed_sample'] == seed]\n            chart.draw_dots(seed_data, color, seed)\n```"]