["```py\n **>>> from collections import namedtuple \n>>> Card = namedtuple('Card', ('rank', 'suit')) \n>>> SUITS = '\\u2660\\u2661\\u2662\\u2663' \n>>> Spades, Hearts, Diamonds, Clubs = SUITS \n>>> Card(2, Spades) \nCard(rank=2, suit='\u2663')** \n\n```", "```py\n            domain = [Card(r+1,s) for r in range(13) for s in SUITS] \n\n    ```", "```py\n            class Deck_W: \n\n    ```", "```py\n            def __init__(self, cards:List[Card]): \n                self.cards = cards.copy() \n                self.deal_iter = iter(cards) \n\n    ```", "```py\n            def shuffle(self): \n                random.shuffle(self.cards) \n                self.deal_iter = iter(self.cards) \n            def deal(self) -> Card: \n                return next(self.deal_iter) \n\n    ```", "```py\n **>>> domain = list(Card(r+1,s) for r in range(13) for s in SUITS) \n>>> len(domain) \n52** \n\n```", "```py\n **>>> import random \n>>> from ch07_r01 import Deck_W \n>>> d = Deck_W(domain)** \n\n```", "```py\n **>>> random.seed(1) \n>>> d.shuffle() \n>>> [d.deal() for _ in range(5)]  \n[Card(rank=13, suit='\u2661'), \nCard(rank=3, suit='\u2661'), \nCard(rank=10, suit='\u2661'), \nCard(rank=6, suit='\u2662'), \nCard(rank=1, suit='\u2662')]** \n\n```", "```py\n            class Deck_X(list): \n\n    ```", "```py\n            def shuffle(self): \n                random.shuffle(self) \n                self.deal_iter = iter(self) \n            def deal(self) -> Card: \n                return next(self.deal_iter) \n\n    ```", "```py\n **>>> from ch07_r01 import Deck_X \n>>> d2 = Deck_X(Card(r+1,s) for r in range(13) for s in SUITS) \n>>> len(d2) \n52** \n\n```", "```py\n **>>> random.seed(1) \n>>> d2.shuffle() \n>>> [d2.deal() for _ in range(5)]  \n[Card(rank=13, suit='\u2661'), \nCard(rank=3, suit='\u2661'), \nCard(rank=10, suit='\u2661'), \nCard(rank=6, suit='\u2662'), \nCard(rank=1, suit='\u2662')]** \n\n```", "```py\n    def some_method(self): \n        # do something extra \n        super().some_method() \n\n```", "```py\n **>>> c_2s = Card(2, Spades) \n>>> c_2s \nCard(rank=2, suit='\u2660') \n>>> another = c_2s \n>>> another \nCard(rank=2, suit='\u2660')** \n\n```", "```py\n            class Card: \n                __slots__ = ('rank', 'suit') \n                def __init__(self, rank, suit): \n                    super().__init__() \n                    self.rank = rank \n                    self.suit = suit \n                def __repr__(self): \n                    return \"{rank:2d} {suit}\".format( \n                        rank=self.rank, suit=self.suit \n                    ) \n\n    ```", "```py\n            class AceCard(Card): \n                def __repr__(self): \n                    return \" A {suit}\".format( \n                        rank=self.rank, suit=self.suit \n                    ) \n            class FaceCard(Card): \n                def __repr__(self): \n                    names = {11: 'J', 12: 'Q', 13: 'K'} \n                    return \" {name} {suit}\".format( \n                        rank=self.rank, suit=self.suit, \n                        name=names[self.rank] \n                    ) \n\n    ```", "```py\n            class CribbagePoints: \n                def points(self): \n                    return self.rank \n\n    ```", "```py\n            class CribbageFacePoints(CribbagePoints): \n                def points(self): \n                    return 10 \n\n    ```", "```py\n            class CribbageAce(AceCard, CribbagePoints): \n                pass \n\n            class CribbageCard(Card, CribbagePoints): \n                pass \n\n            class CribbageFace(FaceCard, CribbageFacePoints): \n                pass \n\n    ```", "```py\n            def make_card(rank, suit): \n                if rank == 1: return CribbageAce(rank, suit) \n                if 2 <= rank < 11: return CribbageCard(rank, suit) \n                if 11 <= rank: return CribbageFace(rank, suit) \n\n    ```", "```py\n     **>>> from ch07_r02 import make_card, SUITS \n          >>> import random \n          >>> random.seed(1) \n          >>> deck = [make_card(rank+1, suit) for rank in range(13) for suit in SUITS] \n          >>> random.shuffle(deck) \n          >>> len(deck) \n          52 \n          >>> deck[:5] \n          [ K \u2661,  3 \u2661, 10 \u2661,  6 \u2662,  A \u2662]** \n\n    ```", "```py\n     **>>> sum(c.points() for c in deck[:5]) \n          30** \n\n    ```", "```py\n **>>> c = deck[5] \n>>> c \n10 \u2662 \n>>> c.__class__.__name__ \n'CribbageCard' \n>>> c.__class__.mro()  \n[<class 'ch07_r02.CribbageCard'>, <class 'ch07_r02.Card'>, \n<class 'ch07_r02.CribbagePoints'>, <class 'object'>]** \n\n```", "```py\n    Card.__repr__ 1.4413\n    object.__str__ 1.4789\n\n```", "```py\n    class Logged: \n        def __init__(self, *args, **kw): \n            self.logger = logging.getLogger(self.__class__.__name__) \n            super().__init__(*args, **kw) \n        def points(self): \n            p = super().points() \n            self.logger.debug(\"points {0}\".format(p)) \n            return p \n\n```", "```py\n    class LoggedCribbageAce(Logged, AceCard, CribbagePoints): \n        pass \n    class LoggedCribbageCard(Logged, Card, CribbagePoints): \n        pass \n    class LoggedCribbageFace(Logged, FaceCard, CribbageFacePoints): \n        pass \n\n```", "```py\n    def make_logged_card(rank, suit): \n        if rank == 1: return LoggedCribbageAce(rank, suit) \n        if 2 <= rank < 11: return LoggedCribbageCard(rank, suit) \n        if 11 <= rank: return LoggedCribbageFace(rank, suit) \n\n```", "```py\n    deck = [make_logged_card(rank+1, suit) \n        for rank in range(13) \n            for suit in SUITS] \n\n```", "```py\n            class Dice1: \n                def __init__(self, seed=None): \n                    self._rng = random.Random(seed) \n                    self.roll() \n                def roll(self): \n                    self.dice = (self._rng.randint(1,6), \n                        self._rng.randint(1,6)) \n                    return self.dice \n\n    ```", "```py\n            class Die: \n                def __init__(self, rng): \n                    self._rng= rng \n                def roll(self): \n                    return self._rng.randint(1, 6) \n            class Dice2: \n                def __init__(self, seed=None): \n                    self._rng = random.Random(seed) \n                    self._dice = [Die(self._rng) for _ in range(2)] \n                    self.roll() \n                def roll(self): \n                    self.dice = tuple(d.roll() for d in self._dice) \n                    return self.dice \n\n    ```", "```py\n    def roller(dice_class, seed=None, *, samples=10): \n        dice = dice_class(seed) \n        for _ in range(samples): \n            yield dice.roll() \n\n```", "```py\n **>>> from ch07_r03 import roller, Dice1, Dice2 \n>>> list(roller(Dice1, 1, samples=5)) \n[(1, 3), (1, 4), (4, 4), (6, 4), (2, 1)] \n>>> list(roller(Dice2, 1, samples=5)) \n[(1, 3), (1, 4), (4, 4), (6, 4), (2, 1)]** \n\n```", "```py\n    for row in source: \n        count('input') \n        some_processing() \n    print(counts()) \n\n```", "```py\n            from collections import Counter \n\n    ```", "```py\n            _global_counter = Counter() \n\n    ```", "```py\n            def count(key, increment=1): \n                _global_counter[key] += increment \n            def counts(): \n                return _global_counter.most_common() \n\n    ```", "```py\n **>>> from ch07_r04 import count, counts \n>>> from ch07_r03 import Dice1 \n>>> d = Dice1(1) \n>>> for _ in range(1000): \n...     if sum(d.roll()) == 7: count('seven') \n...     else: count('other') \n>>> print(counts()) \n[('other', 833), ('seven', 167)]** \n\n```", "```py\n            from collections import Counter \n            class EventCounter: \n                _counts = Counter() \n\n    ```", "```py\n            def count(self, key, increment=1): \n                EventCounter._counts[key] += increment \n            def counts(self): \n                return EventCounter._counts.most_common() \n\n    ```", "```py\n>>> from ch07_r04 import EventCounter \n>>> c1 = EventCounter() \n>>> c1.count('input') \n>>> c2 = EventCounter() \n>>> c2.count('input') \n>>> c3 = EventCounter() \n>>> c3.counts() \n[('input', 2)] \n\n```", "```py\n **[2016-04-24 11:05:01,462] INFO in module1: Sample Message One** \n\n **[2016-04-24 11:06:02,624] DEBUG in module2: Debugging** \n\n **[2016-04-24 11:07:03,246] WARNING in module1: Something might have gone wrong** \n\n```", "```py\n **>>> data = [ \n    ('2016-04-24 11:05:01,462', 'INFO', 'module1', 'Sample Message One'), \n    ('2016-04-24 11:06:02,624', 'DEBUG', 'module2', 'Debugging'), \n    ('2016-04-24 11:07:03,246', 'WARNING', 'module1', 'Something might have gone wrong') \n]** \n\n```", "```py\n            from collections import defaultdict \n\n    ```", "```py\n            module_details = defaultdict(list) \n\n    ```", "```py\n            for row in data: \n                module_details[row[2]].append(row) \n\n    ```", "```py\n    { \n        'module1': [ \n            ('2016-04-24 11:05:01,462', 'INFO', 'module1', 'Sample Message One'), \n            ('2016-04-24 11:07:03,246', 'WARNING', 'module1', 'Something might have gone wrong') \n            ], \n        'module2': [ \n            ('2016-04-24 11:06:02,624', 'DEBUG', 'module2', 'Debugging') \n        ] \n    } \n\n```", "```py\n    from typing import * \n    def summarize(data) -> Mapping[str, List]: \n        the body of the function. \n\n```", "```py\n    class ModuleEvents(dict): \n        def add_event(self, event): \n            if event[2] not in self: \n                self[event[2]] = list() \n            self[event[2]].append(row) \n\n```", "```py\n    module_details = ModuleEvents() \n    for row in data: \n        module_details.add_event(row) \n\n```", "```py\n    from ch07_r02 import AceCard, Card, FaceCard, SUITS \n    class PinochlePoints: \n        _points = {9: 0, 10:10, 11:2, 12:3, 13:4, 14:11} \n        def points(self): \n            return self._points[self.rank] \n\n```", "```py\n            class SortedCard: \n\n    ```", "```py\n            def __lt__(self, other): \n                return (self.rank, self.suit) < (other.rank, other.suit) \n\n            def __le__(self, other): \n                return (self.rank, self.suit) <= (other.rank, other.suit) \n\n            def __gt__(self, other): \n                return (self.rank, self.suit) > (other.rank, other.suit) \n\n            def __ge__(self, other): \n                return (self.rank, self.suit) >= (other.rank, other.suit) \n\n            def __eq__(self, other): \n                return (self.rank, self.suit) == (other.rank, other.suit) \n\n            def __ne__(self, other): \n                return (self.rank, self.suit) != (other.rank, other.suit) \n\n    ```", "```py\n            class PinochleAce(AceCard, SortedCard, PinochlePoints): \n                pass \n\n            class PinochleFace(FaceCard, SortedCard, PinochlePoints): \n                pass \n\n            class PinochleNumber(Card, SortedCard, PinochlePoints): \n                pass \n\n    ```", "```py\n            def make_card(rank, suit): \n                if rank in (9, 10): \n                    return PinochleNumber(rank, suit) \n                elif rank in (11, 12, 13): \n                    return PinochleFace(rank, suit) \n                else: \n                    return PinochleAce(rank, suit) \n\n    ```", "```py\n **>>> from ch07_r06a import make_card \n>>> c1 = make_card(9, '\u2661') \n>>> c2 = make_card(10, '\u2661') \n>>> c1 < c2 \nTrue \n>>> c1 == c1 \nTrue \n>>> c1 == c2 \nFalse \n>>> c1 > c2 \nFalse** \n\n```", "```py\n    SUITS = '\\u2660\\u2661\\u2662\\u2663' \n    Spades, Hearts, Diamonds, Clubs = SUITS \n    def make_deck(): \n        return [make_card(r, s) for _ in range(2) \n            for r in range(9, 15) \n            for s in SUITS] \n\n```", "```py\n    c1 <= c2 \n\n```", "```py\n    c1.__le__(c2) \n\n```", "```py\n **>>> from ch07_r06a import make_deck \n>>> deck = make_deck() \n>>> len(deck) \n48** \n\n```", "```py\n **>>> deck[:8] \n[ 9 \u2660,  9 \u2661,  9 \u2662,  9 \u2663, 10 \u2660, 10 \u2661, 10 \u2662, 10 \u2663]** \n\n```", "```py\n **>>> deck[24:32] \n[ 9 \u2660,  9 \u2661,  9 \u2662,  9 \u2663, 10 \u2660, 10 \u2661, 10 \u2662, 10 \u2663]** \n\n```", "```py\n **>>> import random \n>>> random.seed(4) \n>>> random.shuffle(deck) \n>>> sorted(deck[:12]) \n[ 9 \u2663, 10 \u2663,  J \u2660,  J \u2662,  J \u2662,  Q \u2660,  Q \u2663,  K \u2660,  K \u2660,  K \u2663, A \u2661,  A \u2663]** \n\n```", "```py\n **>>> c1 = make_card(9, '\u2661') \n>>> c1 == 9** \n\n```", "```py\n    def __lt__(self, other): \n        if isinstance(other, Card): \n            return (self.rank, self.suit) < (other.rank, other.suit) \n        else: \n            return self.rank < other \n\n```", "```py\n    from ch07_r06a import * \n    import bisect \n\n```", "```py\n            class Hand: \n                def __init__(self, card_iter): \n                    self.cards = list(card_iter) \n                    self.cards.sort() \n\n    ```", "```py\n            def add(self, aCard: Card): \n                bisect.insort(self.cards, aCard) \n\n    ```", "```py\n            def index(self, aCard: Card): \n                i = bisect.bisect_left(self.cards, aCard) \n                if i != len(self.cards) and self.cards[i] == aCard: \n                    return i \n                raise ValueError \n\n    ```", "```py\n            def __contains__(self, aCard: Card): \n                try: \n                    self.index(aCard) \n                    return True \n                except ValueError: \n                    return False \n\n    ```", "```py\n            def __iter__(self): \n                return iter(self.cards) \n\n    ```", "```py\n            def __le__(self, other): \n                for card in self: \n                    if card not in other: \n                        return False \n                return True \n\n    ```", "```py\n **>>> from ch07_r06b import make_deck, make_card, Hand \n>>> import random \n>>> random.seed(4) \n>>> deck = make_deck() \n>>> random.shuffle(deck) \n>>> h = Hand(deck[:12]) \n>>> h.cards \n[ 9 \u2663, 10 \u2663,  J \u2660,  J \u2662,  J \u2662,  Q \u2660,  Q \u2663,  K \u2660,  K \u2660,  K \u2663, A \u2661,  A \u2663]** \n\n```", "```py\n **>>> pinochle = Hand([make_card(11,'\u2662'), make_card(12,'\u2660')]) \n>>> pinochle <= h \nTrue** \n\n```", "```py\n **>>> sum(c.points() for c in h) \n56** \n\n```", "```py\n    while lo < hi: \n        mid = (lo+hi)//2 \n        if x < a[mid]: hi = mid \n        else: lo = mid+1 \n\n```", "```py\n **>>> source = [ \n...    {'title': 'Eruption', 'writer': ['Emerson'], 'time': '2:43'}, \n...    {'title': 'Stones of Years', 'writer': ['Emerson', 'Lake'], 'time': '3:43'}, \n...    {'title': 'Iconoclast', 'writer': ['Emerson'], 'time': '1:16'}, \n...    {'title': 'Mass', 'writer': ['Emerson', 'Lake'], 'time': '3:09'}, \n...    {'title': 'Manticore', 'writer': ['Emerson'], 'time': '1:49'}, \n...    {'title': 'Battlefield', 'writer': ['Lake'], 'time': '3:57'}, \n...    {'title': 'Aquatarkus', 'writer': ['Emerson'], 'time': '3:54'} \n... ]** \n\n```", "```py\n **>>> from pprint import pprint** \n\n```", "```py\n **>>> data = source.copy() \n>>> for item in data: \n...     if 'Lake' in item['writer']: \n...        print(\"remove\", item['title']) \nremove Stones of Years \nremove Mass \nremove Battlefield** \n\n```", "```py\n **>>> data = source.copy() \n>>> for index in range(len(data)):  \n...    if 'Lake' in data[index]['writer']: \n...       del data[index] \nTraceback (most recent call last): \n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/doctest.py\", line 1320, in __run \n    compileflags, 1), test.globs) \n  File \"<doctest __main__.__test__.chapter[5]>\", line 2, in <module> \n    if 'Lake' in data[index]['writer']: \nIndexError: list index out of range** \n\n```", "```py\n    while x in list: \n        list.remove(x) \n\n```", "```py\n **>>> def index(data): \n...    for i in range(len(data)): \n...        if 'Lake' in data[i]['writer']: \n...            return i \n>>> data = source.copy() \n>>> position = index(data) \n>>> while position: \n...    del data[position] # or data.pop(position) \n...    position = index(data)** \n\n```", "```py\n            i = 0 \n\n    ```", "```py\n            if 'Lake' in data[i]['writer']: \n                del data[i] # Remove \n            else: \n                i += 1 # Preserve \n\n    ```", "```py\n            while i != len(data): \n\n    ```", "```py\n     **>>> i = 0 \n          >>> while i != len(data): \n          ...    if 'Lake' in data[i]['writer']: \n          ...        del data[i] \n          ...    else: \n          ...        i += 1 \n          >>> pprint(data) \n          [{'time': '2:43', 'title': 'Eruption', 'writer': ['Emerson']}, \n           {'time': '1:16', 'title': 'Iconoclast', 'writer': ['Emerson']}, \n           {'time': '1:49', 'title': 'Manticore', 'writer': ['Emerson']}, \n           {'time': '3:54', 'title': 'Aquatarkus', 'writer': ['Emerson']}]** \n\n    ```", "```py\n **>>> data = [item for item in source if not('Lake' in item['writer'])]** \n\n```", "```py\n **>>> data = list(filter(lambda item: not('Lake' in item['writer']), source))** \n\n```", "```py\n    def writer_rule(iterable): \n        for item in iterable: \n            if 'Lake' in item['writer']: \n                continue \n            yield item \n\n```", "```py\n **>>> from ch07_r07 import writer_rule \n>>> data = list(writer_rule(source)) \n>>> pprint(data) \n[{'time': '2:43', 'title': 'Eruption', 'writer': ['Emerson']}, \n {'time': '1:16', 'title': 'Iconoclast', 'writer': ['Emerson']}, \n {'time': '1:49', 'title': 'Manticore', 'writer': ['Emerson']}, \n {'time': '3:54', 'title': 'Aquatarkus', 'writer': ['Emerson']}]** \n\n```"]