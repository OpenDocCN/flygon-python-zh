["```py\n    from math import factorial \n    def binom(n: int, k: int) -> int: \n        return factorial(n) // (factorial(k) * factorial(n-k)) \n\n```", "```py\n    from statistics import median \n    from collections import Counter \n\n    class Summary: \n\n        def __init__(self): \n            self.counts = Counter() \n\n        def __str__(self): \n            return \"mean = {:.2f}\\nmedian = {:d}\".format( \n            self.mean, self.median) \n\n        def add(self, value): \n            self.counts[value] += 1 \n\n        @property \n        def mean(self): \n            s0 = sum(f for v,f in self.counts.items()) \n            s1 = sum(v*f for v,f in self.counts.items()) \n            return s1/s0 \n\n        @property \n        def median(self): \n            return median(self.counts.elements()) \n\n```", "```py\n         **$ python3.5 -m doctest code/ch11_r01.py** \n\n        ```", "```py\n                        if __name__ == '__main__': \n                            import doctest \n                            doctest.testmod() \n\n        ```", "```py\n            '''Computes the binomial coefficient. \n            This shows how many combinations of \n            *n* things taken in groups of size *k*. \n\n    ```", "```py\n            :param n: size of the universe \n            :param k: size of each subset \n\n    ```", "```py\n            :returns: the number of combinations \n\n    ```", "```py\n     **>>> binom(52, 5) \n          2598960** \n\n    ```", "```py\n            ''' \n\n    ```", "```py\n            '''Computes summary statistics. \n\n            ''' \n\n    ```", "```py\n            def add(self, value): \n                '''Adds a value to be summarized. \n\n                :param value: Adds a new value to the collection. \n                ''' \n                self.counts[value] += 1 \n\n    ```", "```py\n            @property \n            def mean(self): \n                '''Computes the mean of the collection. \n                :return: mean value as a float \n                ''' \n                s0 = sum(f for v,f in self.counts.items()) \n                s1 = sum(v*f for v,f in self.counts.items()) \n                return s1/s0 \n\n    ```", "```py\n          **>>> s = Summary() \n          >>> s.add(8) \n          >>> s.add(9) \n          >>> s.add(9) \n          >>> round(s.mean, 2) \n          8.67 \n          >>> s.median \n          9** \n\n    ```", "```py\n **>>> print(str(s)) \nmean = 8.67 \nmedian = 9** \n\n```", "```py\n ************************************************************************* \n\nFile \"__main__\", line ?, in __main__.Summary \n **Failed example:** \n\n **s.median** \n\n **Expected:** \n\n    10 \n **Got:** \n\n    9 \n ************************************************************************* \n\n **1 items had failures:** \n\n   1 of   6 in __main__.Summary \n *****Test Failed*** 1 failures.** \n\n **TestResults(failed=1, attempted=9)** \n\n```", "```py\n    def binom(n: int, k: int) -> int: \n        '''Computes the binomial coefficient. \n        This shows how many combinations of \n        *n* things taken in groups of size *k*. \n\n        :param n: size of the universe \n        :param k: size of each subset \n\n        :returns: the number of combinations \n\n        >>> binom(52, 5) \n        2598960 \n        >>> binom(52, 0) \n        1 \n        >>> binom(52, 52) \n        1 \n        ''' \n        return factorial(n) // (factorial(k) * factorial(n-k)) \n\n```", "```py\n    __test__ = { \n    'GIVEN_binom_WHEN_0_0_THEN_1':  \n    ''' \n    >>> binom(0, 0) \n    1 \n    ''', \n\n    } \n\n```", "```py\n    from math import factorial \n    def binom(n: int, k: int) -> int: \n        ''' \n        Computes the binomial coefficient. \n        This shows how many combinations of \n        *n* things taken in groups of size *k*. \n\n        :param n: size of the universe \n        :param k: size of each subset \n\n        :returns: the number of combinations \n\n        >>> binom(52, 5) \n        2598960 \n        ''' \n        return factorial(n) // (factorial(k) * factorial(n-k)) \n\n```", "```py\n            __test__ = { \n\n            } \n\n    ```", "```py\n            __test__ = { \n            'GIVEN_binom_WHEN_wrong_relationship_THEN_error':  \n            ''' \n                example goes here. \n            ''', \n            } \n\n    ```", "```py\n     **>>> binom(5, 52)  # doctest: +IGNORE_EXCEPTION_DETAIL** \n\n    ```", "```py\n            Traceback (most recent call last):\n              File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/doctest.py\", line 1320, in __run \n                compileflags, 1), test.globs) \n              File \"<doctest __main__.__test__.GIVEN_binom_WHEN_wrong_relationship_THEN_error[0]>\", line 1, in <module> \n                binom(5, 52) \n              File \"/Users/slott/Documents/Writing/Python Cookbook/code/ch11_r01.py\", line 24, in binom \n                return factorial(n) // (factorial(k) * factorial(n-k)) \n            ValueError: factorial() not defined for negative values \n\n    ```", "```py\n    __test__ = { \n    'GIVEN_binom_WHEN_wrong_relationship_THEN_error': ''' \n        >>> binom(5, 52)  # doctest: +IGNORE_EXCEPTION_DETAIL \n        Traceback (most recent call last): \n          File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/doctest.py\", line 1320, in __run \n            compileflags, 1), test.globs) \n          File \"<doctest __main__.__test__.GIVEN_binom_WHEN_wrong_relationship_THEN_error[0]>\", line 1, in <module> \n            binom(5, 52) \n          File \"/Users/slott/Documents/Writing/Python Cookbook/code/ch11_r01.py\", line 24, in binom \n            return factorial(n) // (factorial(k) * factorial(n-k)) \n        ValueError: factorial() not defined for negative values \n    ''' \n    } \n\n```", "```py\n **python3.5 -R -m doctest ch11_r01.py** \n\n```", "```py\n    'GIVEN_binom_WHEN_negative_THEN_exception':  \n    ''' \n        >>> binom(52, -5)  # doctest: +ELLIPSIS \n        Traceback (most recent call last): \n        ... \n        ValueError: factorial() not defined for negative values \n    ''', \n\n```", "```py\n    {'date': '2012-11-27', \n     'lat': '32.8321666666667', \n     'lon': '-79.9338333333333', \n     'time': '09:15:00'} \n\n```", "```py\n    Failed example: \n        next(row_iter) \n    Expected: \n        {'date': '2012-11-27', 'lat': '32.8321666666667', \n        'lon': '-79.9338333333333', 'time': '09:15:00'} \n    Got: \n        {'lon': '-79.9338333333333', 'time': '09:15:00', \n        'date': '2012-11-27', 'lat': '32.8321666666667'} \n\n```", "```py\n            import csv \n            def raw_reader(data_file): \n                \"\"\" \n                Read from a given, open file. \n\n                :param data_file: Open file, ready to be processed. \n                :returns: iterator over individual rows as dictionaries. \n\n                Example: \n\n                \"\"\" \n                data_reader = csv.DictReader(data_file) \n                for row in data_reader: \n                    yield row \n\n    ```", "```py\n     **>>> from io import StringIO \n          >>> mock_file = StringIO('''lat,lon,date,time \n          ... 32.8321,-79.9338,2012-11-27,09:15:00 \n          ... ''') \n          >>> row_iter = iter(raw_reader(mock_file))** \n\n    ```", "```py\n     **>>> row = next(row_iter) \n          >>> row \n          {'time': '09:15:00', 'lat': '32.8321', etc. }** \n\n    ```", "```py\n     **>>> sorted(row.items())  # doctest: +NORMALIZE_WHITESPACE \n          [('date', '2012-11-27'), ('lat', '32.8321'), \n          ('lon', '-79.9338'), ('time', '09:15:00')]** \n\n    ```", "```py\n            from math import * \n            def phi(n): \n                \"\"\" \n                The cumulative distribution function for the standard normal \n                distribution. \n\n                :param n: number of standard deviations \n                :returns: cumulative fraction of values below n. \n\n                Examples: \n                \"\"\" \n                return (1+erf(n/sqrt(2)))/2 \n\n    ```", "```py\n     **>>> round(phi(0), 3) \n          0.399 \n          >>> round(phi(-1), 3) \n          0.242 \n          >>> round(phi(+1), 3) \n          0.242** \n\n    ```", "```py\n     **>>> row['date'] \n          '2012-11-27' \n          >>> row['lat'] \n          '32.8321' \n          >>> row['lon'] \n          '-79.9338' \n          >>> row['time'] \n          '09:15:00'** \n\n    ```", "```py\n     **>>> sorted(row.items())** \n\n    ```", "```py\n **python3.5 -R -m doctest ch11_r03.py** \n\n```", "```py\n    from statistics import median \n    from collections import Counter \n\n    class Summary: \n        def __init__(self): \n           pass \n\n        def __str__(self): \n            '''Returns a multi-line text summary.''' \n\n        def add(self, value): \n            '''Adds a value to be summarized.''' \n\n        @property \n        def count(self): \n            '''Number of samples.''' \n\n        @property \n        def mean(self): \n            '''Mean of the collection.''' \n\n        @property \n        def median(self): \n            '''Median of the collection.''' \n            return median(self.counts.elements()) \n\n        @property \n        def mode(self): \n            '''Returns the items in the collection in decreasing \n            order by frequency. \n            ''' \n\n```", "```py\n            import unittest \n            import random \n\n    ```", "```py\n            class GIVEN_Summary_WHEN_1k_samples_THEN_mean(unittest.TestCase): \n\n    ```", "```py\n            def setUp(self): \n                self.summary = Summary() \n                self.data = list(range(1001)) \n                random.shuffle(self.data) \n\n    ```", "```py\n            def runTest(self): \n                for sample in self.data: \n                    self.summary.add(sample) \n\n    ```", "```py\n            self.assertEqual(500, self.summary.mean) \n            self.assertEqual(500, self.summary.median) \n\n    ```", "```py\n            if __name__ == \"__main__\": \n                unittest.main() \n\n    ```", "```py\n **.---------------------------------------------------------------------- \nRan 1 test in 0.005s \n\nOK** \n\n```", "```py\n **F** \n\n **======================================================================** \n\n **FAIL: runTest (__main__.GIVEN_Summary_WHEN_1k_samples_THEN_mean)** \n\n **----------------------------------------------------------------------** \n\n **Traceback (most recent call last):** \n\n **File \"/Users/slott/Documents/Writing/Python Cookbook/code/ch11_r04.py\", line 24, in runTest** \n\n **self.assertEqual(501, self.summary.mean)** \n\n **AssertionError: 501 != 500.0** \n\n **----------------------------------------------------------------------** \n\n **Ran 1 test in 0.004s** \n\n **FAILED (failures=1)** \n\n```", "```py\n    class GIVEN_Summary_WHEN_1k_samples_THEN_mean_median(unittest.TestCase): \n\n        def setUp(self): \n            self.summary = Summary() \n            self.data = list(range(1001)) \n            random.shuffle(self.data) \n            for sample in self.data: \n                self.summary.add(sample) \n\n        def test_mean(self): \n            self.assertEqual(500, self.summary.mean) \n\n        def test_median(self): \n            self.assertEqual(500, self.summary.median) \n\n```", "```py\n    class GIVEN_Summary_WHEN_1k_samples_THEN_mode(unittest.TestCase): \n\n        def setUp(self): \n            self.summary = Summary() \n            self.data = [500]*97 \n            # Build 993 more elements each item n occurs n times. \n            for i in range(1,43): \n                self.data += [i]*i \n            random.shuffle(self.data) \n            for sample in self.data: \n                self.summary.add(sample) \n\n        def test_mode(self): \n            top_3 = self.summary.mode[:3] \n            self.assertListEqual([(500,97), (42,42), (41,41)], top_3) \n\n```", "```py\n **$ python3 -m unittest discover -s tests** \n\n```", "```py\n    class Summary: \n        '''Computes summary statistics. \n\n        >>> s = Summary() \n        >>> s.add(8) \n        >>> s.add(9) \n        >>> s.add(9) \n        >>> round(s.mean, 2) \n        8.67 \n        >>> s.median \n        9 \n        >>> print(str(s)) \n        mean = 8.67 \n        median = 9 \n        '''\n```", "```py\n    class GIVEN_Summary_WHEN_1k_samples_THEN_mean_median(unittest.TestCase): \n\n        def setUp(self): \n            self.summary = Summary() \n            self.data = list(range(1001)) \n            random.shuffle(self.data) \n            for sample in self.data: \n                    self.summary.add(sample) \n\n        def test_mean(self): \n            self.assertEqual(500, self.summary.mean) \n\n        def test_median(self): \n            self.assertEqual(500, self.summary.median) \n\n```", "```py\n    git-project-name/ \n        statstools/ \n            summary.py \n        tests/ \n            test_summary.py \n\n```", "```py\n            import unittest \n            import doctest \n\n    ```", "```py\n            import ch11_r01 \n\n    ```", "```py\n            def load_tests(loader, standard_tests, pattern): \n                return standard_tests \n\n    ```", "```py\n            def load_tests(loader, standard_tests, pattern): \n                dt = doctest.DocTestSuite(ch11_r01) \n                standard_tests.addTests(dt) \n                return standard_tests \n\n    ```", "```py\n    if __name__ == \"__main__\": \n        unittest.main() \n\n```", "```py\n    def load_tests(loader, standard_tests, pattern): \n        for module in ch11_r01, ch11_r02, ch11_r03: \n            dt = doctest.DocTestSuite(module) \n            standard_tests.addTests(dt) \n        return standard_tests \n\n```", "```py\n    extract_20160704010203.json \n\n```", "```py\n    import datetime \n    import json \n    from pathlib import Path \n\n    def save_data(some_payload): \n        now_date = datetime.datetime.utcnow() \n        now_text = now_date.strftime('extract_%Y%m%d%H%M%S') \n        file_path = Path(now_text).with_suffix('.json') \n        with file_path.open('w') as target_file: \n            json.dump(some_payload, target_file, indent=2) \n\n```", "```py\n            import unittest \n            from unittest.mock import * \n\n    ```", "```py\n            class GIVEN_data_WHEN_save_data_THEN_file(unittest.TestCase): \n                def setUp(self): \n                    '''GIVEN conditions for the test.''' \n\n                def runTest(self): \n                    '''WHEN and THEN conditions for this test.'''' \n\n            if __name__ == \"__main__\": \n                unittest.main() \n\n    ```", "```py\n                    self.data = {'primes': [2, 3, 5, 7, 11, 13, 17, 19]} \n\n        ```", "```py\n                    self.mock_datetime = Mock( \n                        datetime = Mock( \n                            utcnow = Mock( \n                                return_value = datetime.datetime(2017, 7, 4, 1, 2, 3) \n                            ) \n                        ) \n                    ) \n\n        ```", "```py\n                    self.expected_name = 'extract_20170704010203.json' \n\n        ```", "```py\n                    self.expected_path = Path(self.expected_name) \n                    if self.expected_path.exists(): \n                        self.expected_path.unlink() \n\n        ```", "```py\n                    with patch('__main__.datetime', self.mock_datetime): \n                        save_data(self.data) \n\n        ```", "```py\n                with self.expected_path.open() as result_file: \n                    result_data = json.load(result_file) \n                self.assertDictEqual(self.data, result_data) \n\n    ```", "```py\n **>>> from unittest.mock import * \n>>> dumb_function = Mock(return_value=12) \n>>> dumb_function(9) \n12 \n>>> dumb_function(18) \n12** \n\n```", "```py\n **>>> dumb_function.mock_calls \n[call(9), call(18)]** \n\n```", "```py\n **>>> dumb_function.assert_called_with(18)** \n\n```", "```py\n **>>> dumb_function.assert_has_calls( [call(9), call(18)] )** \n\n```", "```py\n    self.mock_datetime = Mock( \n       datetime = Mock( \n            utcnow = Mock( \n                return_value = datetime.datetime(2017, 7, 4, 1, 2, 3) \n            ), \n            now = Mock( \n                return_value = datetime.datetime(2017, 7, 4, 4, 2, 3) \n            ) \n        ) \n    ) \n\n```", "```py\n    self.mock_datetime.datetime.utcnow.assert_called_once_with() \n\n```", "```py\n    self.assertFalse( self.mock_datetime.datetime.called ) \n\n```", "```py\n    def resample(population, N): \n        for i in range(N): \n            sample = random.choice(population) \n            yield sample \n\n```", "```py\n    mean_distribution = Counter() \n    for n in range(1000): \n        subset = list(resample(population, N)) \n        measure = round(statistics.mean(subset), 1) \n        mean_distribution[measure] += 1 \n\n```", "```py\n            class GIVEN_resample_WHEN_evaluated_THEN_fair(unittest.TestCase): \n                def setUp(self): \n\n                def runTest(self): \n\n            if __name__ == \"__main__\": \n                unittest.main() \n\n    ```", "```py\n            self.expected_resample_data.self.data = [2, 3, 5, 7, 11, 13, 17, 19] \n            self.expected_resample_data = [23, 29, 31, 37, 41, 43, 47, 53] \n            self.mock_random = Mock( \n                choice = Mock( \n                    side_effect = self.expected_resample_data \n                ) \n            ) \n\n    ```", "```py\n            with patch('__main__.random', self.mock_random): \n                resample_data = list(resample(self.data, 8)) \n\n            self.assertListEqual(self.expected_resample_data, resample_data) \n            self.mock_random.choice.assert_has_calls( 8*[call(self.data)] ) \n\n    ```", "```py\n **>>> from unittest.mock import * \n>>> dumb_function = Mock(side_effect=[11,13]) \n>>> dumb_function(23) \n11 \n>>> dumb_function(29) \n13 \n>>> dumb_function(31)   \nTraceback (most recent call last): \n  ... (traceback details omitted) \nStopIteration** \n\n```", "```py\n    self.mock_random = Mock( \n        choice = Mock( \n            side_effect = self.expected_resample_data \n        ), \n        shuffle = Mock( \n            return_value = self.expected_resample_data \n        ) \n    ) \n\n```", "```py\n            http://localhost:9200/eventlog/event/ \n\n    ```", "```py\n            https://api.orchestrate.io/v0/eventlog/ \n\n    ```", "```py\n    { \n        \"timestamp\": \"2016-06-15T17:57:54.715\", \n        \"levelname\": \"INFO\", \n        \"module\": \"ch09_r10\", \n        \"message\": \"Sample Message One\" \n    } \n\n```", "```py\n    service = \"https://api.orchestrate.io\" \n\n```", "```py\n    headers = { \n        'Accept': 'application/json', \n        'Content-Type': 'application/json', \n        'Authorization': basic_header(api_key, '') \n    } \n\n```", "```py\n    import base64 \n    def basic_header(username, password): \n        combined_bytes = (username + ':' + password).encode('utf-8') \n        encoded_bytes = base64.b64encode(combined_bytes) \n        return 'Basic ' + encoded_bytes.decode('ascii') \n\n```", "```py\n    data_document = { \n        \"timestamp\": \"2016-06-15T17:57:54.715\", \n        \"levelname\": \"INFO\", \n        \"module\": \"ch09_r10\", \n        \"message\": \"Sample Message One\" \n    } \n\n    headers={ \n        'Accept': 'application/json', \n        'Content-Type': 'application/json', \n        'Authorization': basic_header(api_key, '') \n    }     \n\n    request = urllib.request.Request( \n        url=service + '/v0/eventlog', \n        headers=headers, \n        method='POST', \n        data=json.dumps(data_document).encode('utf-8') \n    ) \n\n```", "```py\n            [ \n             ('Content-Type', 'application/json'), \n             ('Location', '/v0/eventlog/12950a87ef024e43/refs/8e50b6bfc50b2dfa'), \n             ('ETag', '\"8e50b6bfc50b2dfa\"'), \n             ... \n             ] \n\n    ```", "```py\n    class ElasticClient: \n        service = \"https://api.orchestrate.io\" \n\n```", "```py\n    def __init__(self, api_key, password=''): \n        self.headers = { \n            'Accept': 'application/json', \n            'Content-Type': 'application/json', \n            'Authorization': ElasticClient.basic_header(api_key, password), \n        } \n\n```", "```py\n    @staticmethod \n    def basic_header(username, password=''): \n        \"\"\" \n        >>> ElasticClient.basic_header('Aladdin', 'OpenSesame') \n        'Basic QWxhZGRpbjpPcGVuU2VzYW1l' \n        \"\"\" \n        combined_bytes = (username + ':' + password).encode('utf-8') \n        encoded_bytes = base64.b64encode(combined_bytes) \n        return 'Basic ' + encoded_bytes.decode('ascii') \n\n```", "```py\n    def load_eventlog(self, data_document): \n        request = urllib.request.Request( \n            url=self.service + '/v0/eventlog', \n            headers=self.headers, \n            method='POST', \n            data=json.dumps(data_document).encode('utf-8') \n        ) \n\n        with urllib.request.urlopen(request) as response: \n            assert response.status == 201, \"Insertion Error\" \n            response_headers = dict(response.getheaders()) \n            return response_headers['Location'] \n\n```", "```py\n            import unittest \n            from unittest.mock import * \n            import doctest \n            import json \n            import ch11_r08_load \n\n    ```", "```py\n            class GIVEN_ElasticClient_WHEN_load_eventlog_THEN_request(unittest.TestCase): \n\n                def setUp(self): \n\n                def runTest(self): \n\n    ```", "```py\n            def setUp(self): \n                # The context manager object itself. \n                self.mock_context = Mock( \n                    __exit__ = Mock(return_value=None), \n                    __enter__ = Mock( \n                        side_effect = self.create_response \n                    ),      \n                ) \n\n                # The urlopen() function that returns a context. \n                self.mock_urlopen = Mock( \n                    return_value = self.mock_context, \n                ) \n\n    ```", "```py\n            # The test document. \n            self.document = { \n                \"timestamp\": \"2016-06-15T17:57:54.715\", \n                \"levelname\": \"INFO\", \n                \"module\": \"ch09_r10\", \n                \"message\": \"Sample Message One\" \n            } \n\n    ```", "```py\n            def create_response(self): \n                self.database_id = hex(hash(self.mock_urlopen.call_args[0][0].data))[2:] \n                self.location = '/v0/eventlog/{id}'.format(id=self.database_id) \n                response_headers = [ \n                    ('Location', self.location), \n                    ('ETag', self.database_id), \n                    ('Content-Type', 'application/json'), \n                ] \n                return Mock( \n                    status = 201, \n                    getheaders = Mock(return_value=response_headers) \n                ) \n\n    ```", "```py\n            def runTest(self): \n                with patch('ch11_r08_load.urllib.request.urlopen', self.mock_urlopen): \n                    client = ch11_r08_load.ElasticClient('Aladdin', 'OpenSesame') \n                    response = client.load_eventlog(self.document) \n\n                self.assertEqual(self.location, response) \n\n                call_request = self.mock_urlopen.call_args[0][0] \n                self.assertEqual( \n                    'https://api.orchestrate.io/v0/eventlog', call_request.full_url) \n                self.assertDictEqual( \n                    {'Accept': 'application/json', \n                     'Authorization': 'Basic QWxhZGRpbjpPcGVuU2VzYW1l', \n                     'Content-type': 'application/json' \n                    }, \n                     call_request.headers) \n                self.assertEqual('POST', call_request.method) \n                self.assertEqual( \n                    json.dumps(self.document).encode('utf-8'), call_request.data) \n\n                self.mock_context.__enter__.assert_called_once_with() \n                self.mock_context.__exit__.assert_called_once_with(None, None, None) \n\n    ```", "```py\n            def load_tests(loader, standard_tests, pattern): \n                dt = doctest.DocTestSuite(ch11_r08_load) \n                standard_tests.addTests(dt) \n                return standard_tests \n\n    ```", "```py\n            if __name__ == \"__main__\": \n                unittest.main() \n\n    ```", "```py\n    self.mock_context = Mock( \n        __exit__ = Mock(return_value=None), \n        __enter__ = Mock( \n            side_effect = self.create_response \n            # or \n            # return_value = some_value \n        ), \n    ) \n\n```", "```py\n    return Mock( \n        status = 201, \n       getheaders = Mock(return_value=response_headers) \n    ) \n\n```", "```py\n    response_headers = [ \n        ('Location', self.location), \n        ('ETag', self.database_id), \n        ('Content-Type', 'application/json'), \n    ] \n\n```", "```py\n    hex(hash(self.mock_urlopen.call_args[0][0].data))[2:] \n\n```"]