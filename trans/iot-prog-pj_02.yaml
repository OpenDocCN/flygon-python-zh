- en: Writing Python Programs Using Raspberry Pi
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用树莓派编写Python程序
- en: In this chapter, we will start writing python programs with Raspberry Pi. Python
    is the official programming language for Raspberry Pi and is represented by the
    Pi in the name.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始使用树莓派编写Python程序。Python是树莓派的官方编程语言，并由Pi代表在名称中。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Python tools for Raspberry Pi
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的Python工具
- en: Using the Python command line
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python命令行
- en: Writing a simple Python program
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个简单的Python程序
- en: Python comes pre-installed on Raspbian in two versions, versions 2.7.14 and
    3.6.5 (as of this writing) representing Python 2 and Python 3, respectively. The
    differences between the two versions are beyond the scope of this book. We will
    use Python 3 in this book unless otherwise stated.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python在Raspbian上预装了两个版本，分别是版本2.7.14和3.6.5（截至目前为止），分别代表Python 2和Python 3。这两个版本之间的区别超出了本书的范围。在本书中，我们将使用Python
    3，除非另有说明。
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this project, we will become comfortable with Python development on Raspberry
    Pi. You may be used to development tools or **Integrated Development Environments**
    (**IDEs**) on other systems such as Windows, macOS, and Linux. In this chapter,
    we will get our feet wet in terms of using Raspberry Pi as a development machine.
    We will start off slowly with Python as we get our development juices flowing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将熟悉树莓派上的Python开发。您可能已经习惯了在其他系统（如Windows、macOS和Linux）上使用的开发工具或集成开发环境（IDE）。在本章中，我们将开始使用树莓派作为开发机器。随着我们开始使用Python，我们将慢慢熟悉开发。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following is required to complete this project:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此项目需要以下内容：
- en: Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派3型号（2015年或更新型号）
- en: USB power supply
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB电源供应
- en: Computer monitor
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机显示器
- en: USB keyboard
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB键盘
- en: USB mouse
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB鼠标
- en: Python tools for Raspberry Pi
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 树莓派的Python工具
- en: The following are pre-installed tools that we may use for Python development
    on Raspberry Pi using Raspbian. This list is by no means the only tools that we
    may use for development.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是预装的工具，我们可以在树莓派上使用Raspbian进行Python开发。这个列表绝不是我们可以用于开发的唯一工具。
- en: The Terminal
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终端
- en: 'As Python comes pre-installed with Raspbian, an easy way to launch it is to
    use the Terminal. As we can see in the following screenshot, the Python interpreter
    can be accessed by simply typing `python` as the command prompt in a Terminal
    window:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python预装在Raspbian上，启动它的简单方法是使用终端。如下面的屏幕截图所示，可以通过在终端窗口中输入`python`作为命令提示符来访问Python解释器：
- en: '![](assets/4b9ce0a3-278d-47ca-9aca-63a575d7e3e0.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b9ce0a3-278d-47ca-9aca-63a575d7e3e0.png)'
- en: 'We may test it out by running the simplest of programs:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行最简单的程序来测试它：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Notice the Python version in the line after the command, 2.7.13\. The `python`
    command in Raspbian is tied to Python 2\. In order to access Python 3, we must
    type the `python3` command in a Terminal window:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意命令后的Python版本，2.7.13。在Raspbian中，`python`命令与Python 2绑定。为了访问Python 3，我们必须在终端窗口中输入`python3`命令：
- en: '![](assets/6dde2f30-1b0d-4210-8bff-83f5fbea886a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6dde2f30-1b0d-4210-8bff-83f5fbea886a.png)'
- en: Integrated Development and Learning Environment
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成开发和学习环境
- en: 'The **Integrated Development and Learning Environment** (**IDLE**) has been
    the default IDE for Python since version 1.5.2\. It is written in Python itself
    using the Tkinter GUI toolkit and is intended to be a simple IDE for beginners:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自从版本1.5.2起，**集成开发和学习环境**（**IDLE**）一直是Python的默认IDE。它本身是用Python编写的，使用Tkinter GUI工具包，并且旨在成为初学者的简单IDE：
- en: '![](assets/93dcbe0c-8693-4603-9673-9117625b9595.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/93dcbe0c-8693-4603-9673-9117625b9595.png)'
- en: IDLE features a multi-window text editor with auto-completion, syntax highlighting,
    and smart indent. IDLE should be familiar to anyone that has used Python. There
    are two versions of IDLE in Raspbian, one for Python 2 and the other for Python
    3\. Both programs are accessed from Application Menu | Programming.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE具有多窗口文本编辑器，具有自动完成、语法高亮和智能缩进。对于使用过Python的任何人来说，IDLE应该是很熟悉的。在Raspbian中有两个版本的IDLE，一个用于Python
    2，另一个用于Python 3。这两个程序都可以从应用程序菜单 | 编程中访问。
- en: Thonny
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Thonny
- en: Thonny is an IDE that comes packaged with Raspbian. With Thonny, we may evaluate
    expressions by using the `debug` function. Thonny is also available for macOS
    and Windows.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Thonny是随Raspbian捆绑的IDE。使用Thonny，我们可以使用`debug`函数评估表达式。Thonny也适用于macOS和Windows。
- en: 'To load Thonny, go to Application Menu | Programming | Thonny:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载Thonny，转到应用程序菜单 | 编程 | Thonny：
- en: '![](assets/787c8d31-e199-4c97-9f77-c2e83215cc25.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/787c8d31-e199-4c97-9f77-c2e83215cc25.png)'
- en: Above is the default screen for Thonny. Panels to view variables in your program,
    as well as a panel to view the filesystem, are toggled on and off from the View
    menu. Thonny's compact structure makes it ideal for our projects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上面是Thonny的默认屏幕。可以从“视图”菜单中打开和关闭查看程序中的变量的面板，以及查看文件系统的面板。Thonny的紧凑结构使其非常适合我们的项目。
- en: We will be learning a bit more about Thonny as we go through the rest of this
    book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续阅读本书的其余部分，我们将更多地了解Thonny。
- en: Using the Python command line
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python命令行
- en: Let's start doing some coding. Whenever I start using a new operating system
    for development, I like to go through some basics just to get my mind back into
    it (I'm speaking particularly to those of us who are all too familiar with coding
    into the wee hours of the morning).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一些代码。每当我开始使用新的操作系统进行开发时，我都喜欢回顾一些基础知识，以便重新熟悉（我特别是在凌晨熬夜编码的时候）。
- en: 'The simplest way to access Python is from the Terminal. We will run a simple
    program to get started. Load the Terminal from the main toolbar and type `python3`
    at the prompt. Type the following line and hit *Enter*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端最简单地访问Python。我们将运行一个简单的程序来开始。从主工具栏加载终端，然后在提示符处输入`python3`。输入以下行并按*Enter*：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This line loads the `datetime` object from the `datetime` module into our instance
    of Python. Next type the following and hit *Enter*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将`datetime`模块中的`datetime`对象加载到我们的Python实例中。接下来输入以下内容并按*Enter*：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see the current date and time printed to the screen:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到当前日期和时间被打印到屏幕上：
- en: '![](assets/dd45f391-4029-4246-a3f4-808a3d876518.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd45f391-4029-4246-a3f4-808a3d876518.png)'
- en: 'Let''s try another example. Type the following into the shell:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一个例子。在shell中输入以下内容：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](assets/1a8ba55f-024a-41ef-a400-76b6e612d81c.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1a8ba55f-024a-41ef-a400-76b6e612d81c.png)'
- en: 'This is a library that''s used to tell programming jokes. To have a joke printed
    out, type the following and hit *Enter*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用来讲编程笑话的库。要打印一个笑话，输入以下内容并按*Enter*：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](assets/59f16162-12c6-497a-8ccb-c9219b2aae76.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/59f16162-12c6-497a-8ccb-c9219b2aae76.png)'
- en: OK, so this may not be your cup of tea (or coffee, for the Java programmers
    out there). However, this example demonstrates how easy it is to import a Python module
    and utilize it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，也许这不是你的菜（对于Java程序员来说，也许是咖啡）。然而，这个例子展示了导入Python模块并利用它是多么容易。
- en: If you receive an `ImportError`, it is because `pyjokes` did not come pre-installed
    with your version of the OS. Similar to the following example, typing `sudo pip3
    install pyjokes` will install `pyjokes` onto your Raspberry Pi.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到`ImportError`，那是因为`pyjokes`没有预先安装在你的操作系统版本中。类似以下例子，输入`sudo pip3 install
    pyjokes`将会在你的树莓派上安装`pyjokes`。
- en: What these Python modules have in common is their availability for our use.
    We simply need to import them directly into the shell in order to use them, as
    they are pre-installed with our Raspbian operating system. However, what about
    libraries that are not installed?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些Python模块的共同之处在于它们可以供我们使用。我们只需要直接将它们导入到shell中以便使用，因为它们已经预先安装在我们的Raspbian操作系统中。但是，那些未安装的库呢？
- en: 'Let''s try an example. In the Python shell, type the following and hit *Enter*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一个例子。在Python shell中，输入以下内容并按*Enter*：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should see the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下内容：
- en: '![](assets/0ef83036-57f0-4bf2-a46a-233b37f9ea3b.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0ef83036-57f0-4bf2-a46a-233b37f9ea3b.png)'
- en: 'Since the `weather` package is not installed on our Raspberry Pi we get an
    error when trying to import. In order to install the package, we use the Python
    command-line utility `pip`, or in our case, `pip3` for Python 3:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`weather`包没有安装在我们的树莓派上，我们在尝试导入时会收到错误。为了安装这个包，我们使用Python命令行实用程序`pip`，或者在我们的情况下，使用`pip3`来进行Python
    3：
- en: 'Open up a new Terminal (make sure that you''re in a Terminal session and not
    a Python shell). Type the following:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端（确保你在终端会话中，而不是Python shell中）。输入以下内容：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Hit *Enter. *You will see the following:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Enter*。你会看到以下内容：
- en: '![](assets/6f8c804a-290a-4a93-9d6d-37b67658a21e.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f8c804a-290a-4a93-9d6d-37b67658a21e.png)'
- en: After the process is finished, we will have the `weather-api` package installed
    on our Raspberry Pi. This package will allow us to access weather information
    from Yahoo! Weather.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程完成后，我们将在树莓派上安装`weather-api`包。这个包将允许我们从Yahoo! Weather获取天气信息。
- en: 'Now let''s try out a few examples:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们试一些例子：
- en: Type `python3` and hit *Enter*. You should now be back in the Python shell.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`python3`并按*Enter*。现在你应该回到Python shell中了。
- en: 'Type the following and hit *Enter*:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容并按*Enter*：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What we have done is imported `Weather` and `Unit` from `weather`. Type the
    following and hit *Enter*:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经从`weather`中导入了`Weather`和`Unit`。输入以下内容并按*Enter*：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This instantiates a `weather` object called `weather`. Now, let''s make use
    of this object. Type the following and hit *Enter*:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这实例化了一个名为`weather`的`weather`对象。现在，让我们使用这个对象。输入以下内容并按*Enter*：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We now have a variable named `lookup` that''s been created with the code `4118`,
    that corresponds to the city Toronto, Canada. Type the following and hit *Enter*:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在有一个名为`lookup`的变量，它是用代码`4118`创建的，对应于加拿大多伦多市。输入以下内容并按*Enter*：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We now have a variable called `condition` that contains the current weather
    information for the city of Toronto, Canada via the `lookup` variable. To view
    this information, type the following and hit *Enter*:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在有一个名为`condition`的变量，它包含了通过`lookup`变量获取的多伦多市的当前天气信息。要查看这些信息，输入以下内容并按*Enter*：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should get a description of the weather conditions in Toronto, Canada.
    When I ran it, the following was returned:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该得到多伦多市的天气状况描述。当我运行时，返回了以下内容：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that we've seen that writing Python code on the Raspberry Pi is just as
    easy as writing it on other operating systems, let's take it a step further and
    write a simple program. We will use Thonny for this.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到，在树莓派上编写Python代码与在其他操作系统上编写一样简单，让我们再进一步编写一个简单的程序。我们将使用Thonny来完成这个任务。
- en: A Python module is a single Python file containing code that may be imported
    for use. A Python package is a collection of Python modules.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Python模块是一个包含可供导入使用的代码的单个Python文件。Python包是一组Python模块。
- en: Writing a simple Python program
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个简单的Python程序
- en: We will write a simple Python program that contains a class. To facilitate this,
    we will use Thonny, a Python IDE that comes pre-installed with Raspbian and has
    excellent debug and variable introspection functionalities. You will find that
    its ease of use makes it ideal for the development of our projects.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个简单的Python程序，其中包含一个类。为此，我们将使用Thonny，这是一个预先安装在Raspbian上并具有出色的调试和变量内省功能的Python
    IDE。你会发现它的易用性使其成为我们项目开发的理想选择。
- en: Creating the class
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建类
- en: 'We will begin our program by creating a class. A class may be seen as a template
    for creating objects. A class contains methods and variables. To create a class
    in Python with Thonny, do the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个类开始我们的程序。类可以被看作是创建对象的模板。一个类包含方法和变量。要在Thonny中创建一个Python类，做如下操作：
- en: 'Load Thonny through Application Menu | Programming | Thonny. Select New from
    the top left and type the following code:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过应用菜单 | 编程 | Thonny加载Thonny。从左上角选择新建并输入以下代码：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, we've created a class called `CurrentWeather` that will hold
    weather conditions for whichever city we instantiated the class for. We are using
    a class as it will allow us to keep our code clean and prepare us for using outside
    classes later on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们创建了一个名为`CurrentWeather`的类，它将保存我们为其实例化类的任何城市的天气条件。我们使用类是因为它将允许我们保持我们的代码清晰，并为以后使用外部类做好准备。
- en: Creating the object
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建对象
- en: 'We will now create an object from our `CurrentWeather` class. We will use `London`
    as our city:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将从我们的`CurrentWeather`类创建一个对象。我们将使用`London`作为我们的城市：
- en: Click on the Run Current Script button (a green circle with a white arrow) in
    the top menu to load our code into the Python interpreter.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击顶部菜单中的“运行当前脚本”按钮（一个带有白色箭头的绿色圆圈）将我们的代码加载到Python解释器中。
- en: 'At the command line of the Thonny shell, type the following and hit *Enter*:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Thonny shell的命令行上，输入以下内容并按*Enter*键：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have just created an object in our code called `londonWeather` from our `CurrentWeather` class.
    By passing `'London'` to the constructor (`init`), we set our new object to only
    send weather information for the city of `London`. This is done through the class
    attribute city (`self.city`).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在我们的代码中创建了一个名为`londonWeather`的对象，来自我们的`CurrentWeather`类。通过将`'London'`传递给构造函数（`init`），我们将我们的新对象设置为仅发送`London`城市的天气信息。这是通过类属性`city`（`self.city`）完成的。
- en: 'Type the following at the shell command line:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在shell命令行上输入以下内容：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You should get the answer `'12'` on the next line.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在下一行得到答案`'12'`。
- en: 'To view the weather conditions for `London`, type the following:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看`London`的天气条件，请输入以下内容：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You should see `'mostly cloudy'` on the next line.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在下一行看到“'大部分多云'”。
- en: 'To get the wind speed, type the following and hit *Enter*:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取风速，请输入以下内容并按*Enter*键：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You should get `8 km/h NW` on the next line.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在下一行得到`8 km/h NW`。
- en: Our `CurrentWeather` class simulates data coming from a web service for weather
    data. The actual data in our class is stored in the `weather_data` variable.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`CurrentWeather`类模拟了来自天气数据的网络服务的数据。我们类中的实际数据存储在`weather_data`变量中。
- en: In future code, whenever possible, we will wrap calls to web services in classes
    in order to keep things organized and make the code more readable.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在以后的代码中，尽可能地将对网络服务的调用封装在类中，以便保持组织和使代码更易读。
- en: Using the object inspector
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对象检查器
- en: 'Let''s do a little analysis of our code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对我们的代码进行一些分析：
- en: 'From the View menu, select Object inspector and Variables. You should see the
    following:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“视图”菜单中，选择“对象检查器”和“变量”。您应该看到以下内容：
- en: '![](assets/28a96595-39e3-41ba-bfec-573038792cfd.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/28a96595-39e3-41ba-bfec-573038792cfd.png)'
- en: Highlight the `londonWeather` variable under the Variables tab. We can see that
    `londonWeather` is an object of type `CurrentWeather`. In the Object inspector, we
    can also see that the attribute city is set to `'London'`. This type of variable
    inspection is invaluable in troubleshooting code.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“变量”选项卡下突出显示`londonWeather`变量。我们可以看到`londonWeather`是`CurrentWeather`类型的对象。在对象检查器中，我们还可以看到属性`city`设置为`'London'`。这种类型的变量检查在故障排除代码中非常宝贵。
- en: Testing your class
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的类
- en: 'It is very important to test your code as you write it so that you can catch
    errors early on:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时测试代码非常重要，这样您就可以尽早地捕获错误：
- en: 'Add the following function to the `CurrentWeather` class:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下函数添加到`CurrentWeather`类中：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following to the bottom of `CurrentWeather.py`. The first line should
    have the same indentation as the class definition as this function is not part
    of the class:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`CurrentWeather.py`的底部。第一行应该与类定义具有相同的缩进，因为此函数不是类的一部分：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the code by clicking on the Run current script button. You should see the
    following:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“运行当前脚本”按钮来运行代码。您应该看到以下内容：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `if __name__ == "__main__":` function allows us to test the class in the
    file directly as the `if` statement will only be true if the file is run directly.
    In other words, imports of `CurrentWeather.py` will not execute the code following
    the `if` statement. We will explore this method more as we work our way through
    this book.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`if __name__ == "__main__":`函数允许我们直接在文件中测试类，因为`if`语句只有在直接运行文件时才为真。换句话说，对`CurrentWeather.py`的导入不会执行`if`语句后面的代码。随着我们逐步阅读本书，我们将更多地探索这种方法。'
- en: Making the code flexible
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使代码灵活
- en: Code that is more generic is more flexible. The following are two examples of
    how we can make the code less specific.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 更通用的代码更灵活。以下是我们可以使代码更少具体的两个例子。
- en: Example one
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例一
- en: 'The `wind_dir_str_len` variable is used to determine the length of the string
    for wind direction. For example, a direction of `S` would only use one character,
    whereas NW would use two. This is done so that an extra space is not included
    in our output when the direction is represented by only one character:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`wind_dir_str_len`变量用于确定风向字符串的长度。例如，`S`方向只使用一个字符，而NW则使用两个。这样做是为了在方向仅由一个字符表示时，不包括额外的空格在我们的输出中：'
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: By looking for a space using `[-2:-1]`, we can determine the length of this
    string and change it to `1` if there is a space (as we are parsing back two characters
    from the end of the string).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`[-2:-1]`来寻找空格，我们可以确定这个字符串的长度，并在有空格时将其更改为`1`（因为我们从字符串的末尾返回两个字符）。
- en: Example two
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例二
- en: 'By adding the `getCity` method to our class, we are able to create classes
    with more generic names like `currentWeather` as opposed to `torontoWeather`.
    This makes it easy to reuse our code. We can demonstrate this by changing the
    following line:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向我们的类添加`getCity`方法，我们能够创建更通用名称的类，如`currentWeather`，而不是`torontoWeather`。这使得我们可以轻松地重用我们的代码。我们可以通过更改以下行来演示这一点：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will change it to this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其更改为：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we run the code again by clicking on the Run button, we get different values
    for all the conditions in the sentence:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次单击“运行”按钮运行代码，我们将得到句子中所有条件的不同值：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We began this chapter by discussing the various tools that are available for
    Python development in Raspbian. The quickest and easiest way to run Python is
    from the Terminal window. Since Python comes pre-installed in Raspbian, the `python` command
    in the Terminal prompt loads Python (Python 2, in this case). There is no need
    to set environment variables in order to have the command find the program. Python
    3 is run from the Terminal by typing `python3`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始本章时讨论了Raspbian中可用的各种Python开发工具。在终端窗口中运行Python的最快最简单的方法。由于Python预先安装在Raspbian中，因此在终端提示符中使用`python`命令加载Python（在本例中为Python
    2）。无需设置环境变量即可使命令找到程序。通过输入`python3`在终端中运行Python 3。
- en: We also took a brief look at IDLE, the default IDE for Python development. IDLE
    stands for Integrated Development and Learning Environment and is an excellent
    tool for beginners to use when learning Python.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还简要介绍了IDLE，这是Python开发的默认IDE。IDLE代表集成开发和学习环境，是初学者学习Python时使用的绝佳工具。
- en: Thonny is another Python IDE that comes pre-installed with Raspbian. Thonny
    has excellent debug and variable introspection functionalities. It too is designed
    for beginning Python developers, however, its ease of use and object inspector
    make it ideal for the development of our projects. We will be using Thonny more
    as we progress through the book.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Thonny是另一个预先安装在Raspbian上的Python IDE。Thonny具有出色的调试和变量内省功能。它也是为初学者设计的Python开发工具，但是其易用性和对象检查器使其成为我们项目开发的理想选择。随着我们在书中的进展，我们将更多地使用Thonny。
- en: We then jumped right into programming in order to get our development juices
    flowing. We started out with simple expressions using the Terminal and concluded
    with a weather data example designed to emulate objects that are used to call
    web services.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们立即开始编程，以激发我们的开发热情。我们从使用终端进行简单表达式开始，并以天气数据示例结束，该示例旨在模拟用于调用Web服务的对象。
- en: In [Chapter 3](c4822610-2d5b-4b3a-8b29-5789ae0e7665.xhtml), *Using the GPIO
    to Connect to the Outside World*, we will jump right into the most powerful feature
    of programming on Raspberry Pi, the GPIO. The GPIO allows us to interact with
    the real world through the use of devices connected to this port on Raspberry
    Pi. GPIO programming will take our Python skills to a whole new level.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](c4822610-2d5b-4b3a-8b29-5789ae0e7665.xhtml)中，*使用GPIO连接到外部世界*，我们将立即进入树莓派上编程最强大的功能，即GPIO。
    GPIO允许我们通过连接到树莓派上的此端口的设备与现实世界进行交互。 GPIO编程将使我们的Python技能提升到一个全新的水平。
- en: Questions
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which operating systems is Thonny available for?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Thonny适用于哪些操作系统？
- en: How do we enter Python 2 from the Terminal command line?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何从终端命令行进入Python 2？
- en: Which tool in Thonny do we use to view what is inside an object?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Thonny中的哪个工具用于查看对象内部的内容？
- en: Give two reasons as to why we are using an object in our weather example code.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出两个原因，说明为什么我们在天气示例代码中使用对象。
- en: What is the advantage of adding a method called `getCity` to the `CurrentWeather`
    class?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`CurrentWeather`类添加一个名为`getCity`的方法的优点是什么？
- en: What language is IDLE written in?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IDLE是用哪种语言编写的？
- en: What are the two steps taken in order to print the current date and time?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了打印当前日期和时间，需要采取哪两个步骤？
- en: In our code, how did we compensate for wind speed directions that are represented
    by only one letter?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们是如何补偿只用一个字母表示的风速方向的？
- en: What does the `if __name__ =="__main__"` statement do?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`if __name__ =="__main__"`语句的作用是什么？'
- en: What does IDLE stand for?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IDLE代表什么？
- en: Further reading
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Python 3 - Object Oriented Programming* by Dusty Phillips, Packt Publishing.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*Dusty Phillips*的*Python 3 - 面向对象编程*，Packt Publishing。'
