["```py\nfrom tkinter import * \n\nroot = Tk() \nbtn = Button(root, text=\"Click me!\") \nbtn.config(command=lambda: print(\"Hello, Tkinter!\"))\nbtn.pack(padx=120, pady=30)\nroot.title(\"My Tkinter app\")\nroot.mainloop()\n```", "```py\nimport tkinter as tk \n\nclass App(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        self.btn = tk.Button(self, text=\"Click me!\", \n                             command=self.say_hello) \n        self.btn.pack(padx=120, pady=30) \n\n    def say_hello(self): \n        print(\"Hello, Tkinter!\") \n\nif __name__ == \"__main__\": \n    app = App() \n    app.title(\"My Tkinter app\") \n    app.mainloop()\n```", "```py\nclass App(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        # ... \n```", "```py\nimport tkinter as tk \n\nRELIEFS = [tk.SUNKEN, tk.RAISED, tk.GROOVE, tk.RIDGE, tk.FLAT] \n\nclass ButtonsApp(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        self.img = tk.PhotoImage(file=\"python.gif\") \n        self.btn = tk.Button(self, text=\"Button with image\", \n                             image=self.img, compound=tk.LEFT, \n                             command=self.disable_btn) \n        self.btns = [self.create_btn(r) for r in RELIEFS]         \n        self.btn.pack() \n        for btn in self.btns: \n            btn.pack(padx=10, pady=10, side=tk.LEFT) \n\n    def create_btn(self, relief): \n        return tk.Button(self, text=relief, relief=relief) \n\n    def disable_btn(self): \n        self.btn.config(state=tk.DISABLED) \n\nif __name__ == \"__main__\": \n    app = ButtonsApp() \n    app.mainloop()\n```", "```py\nimport tkinter as tk \n\nclass LoginApp(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        self.username = tk.Entry(self) \n        self.password = tk.Entry(self, show=\"*\") \n        self.login_btn = tk.Button(self, text=\"Log in\", \n                                   command=self.print_login) \n        self.clear_btn = tk.Button(self, text=\"Clear\", \n                                   command=self.clear_form)         \n        self.username.pack() \n        self.password.pack() \n        self.login_btn.pack(fill=tk.BOTH) \n        self.clear_btn.pack(fill=tk.BOTH) \n\n    def print_login(self): \n        print(\"Username: {}\".format(self.username.get())) \n        print(\"Password: {}\".format(self.password.get())) \n\n    def clear_form(self): \n        self.username.delete(0, tk.END) \n        self.password.delete(0, tk.END) \n        self.username.focus_set() \n\nif __name__ == \"__main__\": \n    app = LoginApp() \n    app.mainloop()\n```", "```py\nentry.delete(0, tk.END) \nentry.insert(0, \"default value\") \n```", "```py\nentry.insert(tk.INSERT, \"cursor here\")\n```", "```py\nimport tkinter as tk \n\nclass App(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        self.var = tk.StringVar() \n        self.var.trace(\"w\", self.show_message) \n        self.entry = tk.Entry(self, textvariable=self.var) \n        self.btn = tk.Button(self, text=\"Clear\", \n                             command=lambda: self.var.set(\"\")) \n        self.label = tk.Label(self) \n        self.entry.pack() \n        self.btn.pack() \n        self.label.pack() \n\n    def show_message(self, *args): \n        value = self.var.get() \n        text = \"Hello, {}!\".format(value) if value else \"\" \n        self.label.config(text=text) \n\nif __name__ == \"__main__\": \n    app = App() \n    app.mainloop() \n```", "```py\nimport re \nimport tkinter as tk \n\nclass App(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        self.pattern = re.compile(\"^\\w{0,10}$\") \n        self.label = tk.Label(self, text=\"Enter your username\") \n        vcmd = (self.register(self.validate_username), \"%i\", \"%P\") \n        self.entry = tk.Entry(self, validate=\"key\", \n                              validatecommand=vcmd, \n                              invalidcommand=self.print_error) \n        self.label.pack() \n        self.entry.pack(anchor=tk.W, padx=10, pady=10) \n\n    def validate_username(self, index, username): \n        print(\"Modification at index \" + index) \n        return self.pattern.match(username) is not None \n\n    def print_error(self): \n        print(\"Invalid username character\") \n\nif __name__ == \"__main__\": \n    app = App() \n    app.mainloop() \n```", "```py\nvcmd = (self.register(self.validate_username), \"%i\", \"%P\") \n```", "```py\nimport tkinter as tk \n\nclass App(tk.Tk):\n    def __init__(self): \n        super().__init__() \n        self.spinbox = tk.Spinbox(self, from_=0, to=5) \n        self.scale = tk.Scale(self, from_=0, to=5, \n                              orient=tk.HORIZONTAL) \n        self.btn = tk.Button(self, text=\"Print values\", \n                             command=self.print_values) \n        self.spinbox.pack() \n        self.scale.pack() \n        self.btn.pack() \n\n    def print_values(self): \n        print(\"Spinbox: {}\".format(self.spinbox.get())) \n        print(\"Scale: {}\".format(self.scale.get())) \n\nif __name__ == \"__main__\": \n    app = App()\n    app.mainloop()\n```", "```py\nimport tkinter as tk\n\nCOLORS = [(\"Red\", \"red\"), (\"Green\", \"green\"), (\"Blue\", \"blue\")]\n\nclass ChoiceApp(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.var = tk.StringVar()\n        self.var.set(\"red\")\n        self.buttons = [self.create_radio(c) for c in COLORS]\n        for button in self.buttons:\n            button.pack(anchor=tk.W, padx=10, pady=5)\n\n    def create_radio(self, option):\n        text, value = option\n        return tk.Radiobutton(self, text=text, value=value, \n                              command=self.print_option, \n                              variable=self.var)\n\n    def print_option(self):\n        print(self.var.get())\n\nif __name__ == \"__main__\": \n    app = ChoiceApp()\n    app.mainloop()\n```", "```py\nimport tkinter as tk\n\nclass SwitchApp(tk.Tk):\n    def __init__(self):\n        super().__init__() \n        self.var = tk.IntVar() \n        self.cb = tk.Checkbutton(self, text=\"Active?\",  \n                                 variable=self.var, \n                                 command=self.print_value) \n        self.cb.pack() \n\n    def print_value(self): \n        print(self.var.get()) \n\nif __name__ == \"__main__\": \n    app = SwitchApp() \n    app.mainloop() \n```", "```py\nvar = tk.StringVar() \nvar.set(\"OFF\") \ncheckbutton_active = tk.Checkbutton(master, text=\"Active?\", variable=self.var, \n                                    onvalue=\"ON\", offvalue=\"OFF\", \n                                    command=update_value)\n```", "```py\nimport tkinter as tk \n\nDAYS = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \n        \"Friday\", \"Saturday\", \"Sunday\"] \nMODES = [tk.SINGLE, tk.BROWSE, tk.MULTIPLE, tk.EXTENDED] \n\nclass ListApp(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        self.list = tk.Listbox(self)  \n        self.list.insert(0, *DAYS) \n        self.print_btn = tk.Button(self, text=\"Print selection\", \n                                   command=self.print_selection) \n        self.btns = [self.create_btn(m) for m in MODES] \n\n        self.list.pack() \n        self.print_btn.pack(fill=tk.BOTH) \n        for btn in self.btns: \n            btn.pack(side=tk.LEFT) \n\n    def create_btn(self, mode): \n        cmd = lambda: self.list.config(selectmode=mode) \n        return tk.Button(self, command=cmd, \n                         text=mode.capitalize()) \n\n    def print_selection(self): \n        selection = self.list.curselection() \n        print([self.list.get(i) for i in selection]) \n\nif __name__ == \"__main__\": \n    app = ListApp() \n    app.mainloop() \n```", "```py\nself.list.insert(tk.END, \"New item\") \n```", "```py\ndef __init__(self):\n    self.frame = tk.Frame(self) \n    self.scroll = tk.Scrollbar(self.frame, orient=tk.VERTICAL) \n    self.list = tk.Listbox(self.frame, yscrollcommand=self.scroll.set) \n    self.scroll.config(command=self.list.yview) \n    # ... \n    self.frame.pack() \n    self.list.pack(side=tk.LEFT) \n    self.scroll.pack(side=tk.LEFT, fill=tk.Y) \n```", "```py\nimport tkinter as tk \n\nclass App(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        frame = tk.Frame(self, bg=\"green\", \n                         height=100, width=100) \n        frame.bind(\"<Button-1>\", self.print_event) \n        frame.bind(\"<Double-Button-1>\", self.print_event) \n        frame.bind(\"<ButtonRelease-1>\", self.print_event) \n        frame.bind(\"<B1-Motion>\", self.print_event) \n        frame.bind(\"<Enter>\", self.print_event) \n        frame.bind(\"<Leave>\", self.print_event) \n        frame.pack(padx=50, pady=50) \n\n    def print_event(self, event): \n        position = \"(x={}, y={})\".format(event.x, event.y) \n        print(event.type, \"event\", position) \n\nif __name__ == \"__main__\": \n    app = App() \n    app.mainloop() \n```", "```py\nimport tkinter as tk \n\nclass App(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        entry = tk.Entry(self) \n        entry.bind(\"<FocusIn>\", self.print_type)  \n        entry.bind(\"<Key>\", self.print_key) \n        entry.pack(padx=20, pady=20) \n\n    def print_type(self, event): \n        print(event.type) \n\n    def print_key(self, event): \n        args = event.keysym, event.keycode, event.char \n        print(\"Symbol: {}, Code: {}, Char: {}\".format(*args)) \n\nif __name__ == \"__main__\": \n    app = App() \n    app.mainloop() \n```", "```py\nwidget.bind(sequence, callback, add='') \n```", "```py\nimport tkinter as tk \n\nclass App(tk.Tk): \n    def __init__(self): \n        super().__init__() \n        self.title(\"My Tkinter app\") \n        self.iconbitmap(\"python.ico\") \n        self.geometry(\"400x200+10+10\") \n\nif __name__ == \"__main__\": \n    app = App() \n    app.mainloop()\n```"]