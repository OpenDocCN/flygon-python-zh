- en: Hashing and Symbol Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希和符号表
- en: We have previously looked at lists, where items are stored in sequence and accessed
    by index number. Index numbers work well for computers. They are integers so they
    are fast and easy to manipulate. However, they don't always work so well for us.
    If we have an address book entry, for example, with index number 56, that number
    doesn't tell us much. There is nothing to link a particular contact with number
    56\. It just happens to be the next available position in the list.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看过列表，其中项目按顺序存储并通过索引号访问。索引号对计算机来说很有效。它们是整数，因此它们快速且易于操作。但是，它们并不总是对我们很有效。例如，如果我们有一个地址簿条目，索引号为56，那个数字并没有告诉我们太多。没有什么可以将特定联系人与编号56联系起来。它只是列表中的下一个可用位置。
- en: 'In this chapter, we are going to look at a similar structure: a dictionary.
    A dictionary uses a keyword instead of an index number. So, if that contact was
    called *James*, we would probably use the keyword *James* to locate the contact.
    That is, instead of accessing the contact by calling *contacts [56]*, we would
    use *contacts ["james"]*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究一个类似的结构：字典。字典使用关键字而不是索引号。因此，如果该联系人被称为*James*，我们可能会使用关键字*James*来定位该联系人。也就是说，我们不再通过调用*contacts
    [56]*来访问联系人，而是使用*contacts ["james"]*。
- en: Dictionaries are often built using hash tables. As the name suggests, hash tables
    rely on a concept called **hashing**. That is where we are going to begin our
    discussion.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 字典通常是使用哈希表构建的。顾名思义，哈希表依赖于一个称为**哈希**的概念。这就是我们将开始讨论的地方。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Hashing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希
- en: Hash tables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希表
- en: Different functions with elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有元素的不同函数
- en: Hashing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希
- en: Hashing is the concept of converting data of arbitrary size into data of fixed
    size. A little bit more specifically, we are going to use this to turn strings
    (or possibly other data types) into integers. This possibly sounds more complex
    than it is so let's look at an example. We want to hash the expression `hello
    world`, that is, we want to get a numeric value that we could say *represents*
    the string.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希是将任意大小的数据转换为固定大小的数据的概念。更具体地说，我们将使用这个概念将字符串（或可能是其他数据类型）转换为整数。这可能听起来比实际复杂，所以让我们看一个例子。我们想要对表达式
    `hello world` 进行哈希，也就是说，我们想要得到一个数值，可以说*代表*这个字符串。
- en: 'By using the `ord()` function, we can get the ordinal value of any character.
    For example, the `ord(''f'')` function gives 102\. To get the hash of the whole
    string, we could just sum the ordinal numbers of each character in the string:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `ord()` 函数，我们可以得到任何字符的序数值。例如，`ord('f')` 函数返回102。要得到整个字符串的哈希值，我们可以简单地对字符串中每个字符的序数值求和：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](assets/52c1ad6d-2e2e-45a3-93da-6ce146981c11.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52c1ad6d-2e2e-45a3-93da-6ce146981c11.jpg)'
- en: 'This works fine. However, note that we could change the order of the characters
    in the string and get the same hash:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好地运行了。但是，请注意我们可以改变字符串中字符的顺序并得到相同的哈希值：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And the sum of the ordinal values of the characters would be the same for the
    string `gello xorld` as well, since `g` has an ordinal value which is one less
    than that of `h`, and x has an ordinal value that is one greater than that of
    `w`, hence:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 字符的序数值的总和对于字符串 `gello xorld` 也是相同的，因为 `g` 的序数值比 `h` 小1，x 的序数值比 `w` 大1，因此：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](assets/e3d188b5-0976-477b-8921-37f6bf72d9e2.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e3d188b5-0976-477b-8921-37f6bf72d9e2.jpg)'
- en: Perfect hashing functions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完美的哈希函数
- en: A perfect hashing function is one in which each string (as we are limiting the
    discussion to strings for now) is guaranteed to be unique. In practice, hashing
    functions normally need to be very fast, so trying to create a function that will
    give each string a unique hash value is normally not possible. Instead, we live
    with the fact that we sometimes get collisions (two or more strings having the
    same hash value), and when that happens, we come up with a strategy for resolving
    them.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 完美的哈希函数是指每个字符串（目前我们只讨论字符串）都保证是唯一的。在实践中，哈希函数通常需要非常快，因此通常不可能创建一个能给每个字符串一个唯一哈希值的函数。相反，我们要接受有时会发生碰撞（两个或更多个字符串具有相同的哈希值），当发生这种情况时，我们需要想出一种解决策略。
- en: 'In the meantime, we can at least come up with a way to avoid some of the collisions.
    We could, for example, add a multiplier, so that the hash value for each character
    becomes the multiplier value, multiplied by the ordinal value of the character.
    The multiplier then increases as we progress through the string. This is shown
    in the following function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，我们至少可以想出一种避免一些碰撞的方法。例如，我们可以添加一个乘数，使得每个字符的哈希值成为乘数值乘以字符的序数值。随着我们在字符串中的进展，乘数会增加。这在下面的函数中显示：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can test this function on the strings that we used earlier:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在先前使用的字符串上测试这个函数：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the program, we get the following output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，我们得到以下输出：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](assets/8414fd29-b1a2-4984-b8d9-df385915fc59.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8414fd29-b1a2-4984-b8d9-df385915fc59.jpg)'
- en: Note that the last row is the result of multiplying the values in rows 2 and
    3 such that 104 x 1 equals 104, as an example.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，最后一行是将第2行和第3行的值相乘得到的，例如104 x 1 等于104。
- en: 'This time we get different hash values for our strings. Of course, this doesn''t
    mean that we have a perfect hash. Let us try the strings `ad` and `ga`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们得到了不同的字符串的哈希值。当然，这并不意味着我们有一个完美的哈希。让我们尝试字符串 `ad` 和 `ga`：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There we still get the same hash value for two different strings. As we have
    said before, this doesn't have to be a problem, but we need to devise a strategy
    for resolving collisions. We shall look at that shortly, but first we will study
    an implementation of a hash table.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们仍然得到了两个不同字符串相同的哈希值。正如我们之前所说的，这并不一定是一个问题，但我们需要想出一种解决碰撞的策略。我们很快将会看到这一点，但首先我们将研究哈希表的实现。
- en: Hash table
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希表
- en: A **hash table** is a form of list where elements are accessed by a keyword
    rather than an index number. At least, this is how the client code will see it.
    Internally, it will use a slightly modified version of our hashing function in
    order to find the index position in which the element should be inserted. This
    gives us fast lookups, since we are using an index number which corresponds to
    the hash value of the key.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**哈希表**是一种列表形式，其中元素是通过关键字而不是索引号访问的。至少，这是客户端代码将看到的方式。在内部，它将使用我们稍微修改过的哈希函数的版本，以便找到应该插入元素的索引位置。这给了我们快速查找，因为我们使用的是与键的哈希值对应的索引号。'
- en: 'We start by creating a class to hold hash table items. These need to have a
    key and a value, since our hash table is a key-value store:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个类来保存哈希表的项目。这些项目需要有一个键和一个值，因为我们的哈希表是一个键-值存储：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This gives us a very simple way to store items. Next, we start working on the
    hash table class itself. As usual, we start off with a constructor:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们一种非常简单的存储项目的方式。接下来，我们开始着手处理哈希表类本身。和往常一样，我们从构造函数开始：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The hash table uses a standard Python list to store its elements. We could equally
    well have used the linked list that we developed previously, but right now our
    focus is on understanding the hash table, so we shall use what is at our disposal.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表使用标准的Python列表来存储其元素。我们也可以使用之前开发的链表，但现在我们的重点是理解哈希表，所以我们将使用我们手头上的东西。
- en: 'We set the size of the hash table to 256 elements to start with. Later, we
    will look at strategies for how to grow the table as we begin filling it up. We
    now initialize a list containing 256 elements. These elements are often referred
    to as slots or buckets. Finally, we add a counter for the number of actual hash
    table elements we have:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将哈希表的大小设置为256个元素。稍后，我们将研究如何在开始填充哈希表时扩展表的策略。现在，我们初始化一个包含256个元素的列表。这些元素通常被称为槽或桶。最后，我们添加一个计数器，用于记录实际哈希表元素的数量：
- en: '![](assets/3a6bc6fe-7231-4fee-bd5b-6be6fba0a9c1.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a6bc6fe-7231-4fee-bd5b-6be6fba0a9c1.jpg)'
- en: It is important to notice the difference between the size and count of a table.
    Size of a table refers to the total number of slots in the table (used or unused).
    Count of the table, on the other hand, simply refers to the number of slots that
    are filled, or put another way, the number of actual key-value pairs we have added
    to the table.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意表的大小和计数之间的区别。表的大小是指表中槽的总数（已使用或未使用）。表的计数，另一方面，只是指填充的槽的数量，或者换句话说，我们已经添加到表中的实际键-值对的数量。
- en: 'Now, we are going to add our hashing function to the table. It will be similar
    to what we evolved in the section on hashing functions, but with a slight difference:
    we need to ensure that our hashing function returns a value between 1 and 256
    (the size of the table). A good way of doing so is to return the remainder of
    dividing the hash by the size of the table, since the remainder is always going
    to be an integer value between 0 and 255.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把我们的哈希函数添加到表中。它将类似于我们在哈希函数部分演变的内容，但有一个小小的不同：我们需要确保我们的哈希函数返回一个介于1和256之间的值（表的大小）。一个很好的方法是返回哈希除以表的大小的余数，因为余数总是一个介于0和255之间的整数值。
- en: 'As the hashing function is only meant to be used internally by the class, we
    put an underscore(`_`) at the beginning of the name to indicate this. This is
    a normal Python convention for indicating that something is meant for internal
    use:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数只是用于类内部的，我们在名称前面加下划线(`_`)来表示这一点。这是Python中用于表示某些内容是内部使用的常规约定：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For the time being, we are going to assume that keys are strings. We shall discuss
    how one can use non-string keys later. For now, just bear in mind that the `_hash()` function
    is going to generate the hash value of a string.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将假设键是字符串。我们将讨论如何稍后使用非字符串键。现在，只需记住`_hash()`函数将生成字符串的哈希值。
- en: Putting elements
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放置元素
- en: 'We add elements to the hash with the `put()` function and retrieve with the `get()`
    function. First, we will look at the implementation of the `put()` function. We
    start by embedding the key and the value into the `HashItem` class and computing
    the hash of the key:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`put()`函数添加元素到哈希表，并使用`get()`函数检索。首先，我们将看一下`put()`函数的实现。我们首先将键和值嵌入到`HashItem`类中，并计算键的哈希：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we need to find an empty slot. We start at the slot that corresponds to
    the hash value of the key. If that slot is empty, we insert our item there.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要找到一个空槽。我们从与键的哈希值对应的槽开始。如果该槽为空，我们就在那里插入我们的项目。
- en: 'However, if the slot is not empty and the key of the item is not the same as
    our current key, then we have a collision. This is where we need to figure out
    a way to handle a conflict. We are going to do this by adding one to the previous
    hash value we had and getting the remainder of dividing this value by the size
    of the hash table. This is a linear way of resolving collisions and it is quite
    simple:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果槽不为空并且项目的键与我们当前的键不同，那么我们就会发生冲突。这就是我们需要想办法处理冲突的地方。我们将通过在先前的哈希值上加一，并取除以哈希表的大小的余数来解决这个问题。这是一种线性解决冲突的方法，非常简单：
- en: '![](assets/22dd9b2d-b701-452b-925e-4208a688ce80.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/22dd9b2d-b701-452b-925e-4208a688ce80.jpg)'
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We have found our insertion point. If this is a new element (that is, it contained
    `None` previously), then we increase the count by one. Finally, we insert the
    item into the list at the required position:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经找到了插入点。如果这是一个新元素（即先前包含`None`），那么我们将计数增加一。最后，我们将项目插入到所需位置的列表中：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Getting elements
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取元素
- en: 'The implementation of the `get()` method should return the value that corresponds
    to a key. We also have to decide what to do in the event that the key does not
    exist in the table. We start by calculating the hash of the key:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()`方法的实现应该返回与键对应的值。我们还必须决定在表中不存在键时该怎么办。我们首先计算键的哈希：'
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we simply start looking through the list for an element that has the key
    we are searching for, starting at the element which has the hash value of the
    key that was passed in. If the current element is not the correct one, then, just
    like in the `put()` method, we add one to the previous hash value and get the
    remainder of dividing this value by the size of the list. This becomes our new
    index. If we find an element that contains `None`, we stop looking. If we find
    our key, we return the value:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需开始在列表中寻找具有我们正在搜索的键的元素，从具有传入键的哈希值的元素开始。如果当前元素不是正确的元素，那么就像在`put()`方法中一样，我们在先前的哈希值上加一，并取除以列表大小的余数。这就成为我们的新索引。如果我们找到包含`None`的元素，我们停止寻找。如果我们找到我们的键，我们返回值：
- en: '![](assets/6d58b265-70e8-4da9-8a91-370070916d43.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6d58b265-70e8-4da9-8a91-370070916d43.jpg)'
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we decide what to do if the key was not found in the table. Here we
    will choose to return `None`. Another good alternative may be to raise an exception:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们决定如果在表中找不到键要做什么。在这里，我们将选择返回`None`。另一个好的选择可能是引发一个异常：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Testing the hash table
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试哈希表
- en: 'To test our hash table, we create a `HashTable`, put a few elements in it,
    then try to retrieve these. We will also try to `get()` a key that does not exist.
    Remember the two strings ad and ga which returned the same hash value by our hashing
    function? For good measure, we throw those in as well, just to see that the collision
    is properly resolved:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的哈希表，我们创建一个`HashTable`，把一些元素放进去，然后尝试检索这些元素。我们还将尝试`get()`一个不存在的键。还记得我们的哈希函数返回相同的哈希值的两个字符串ad和ga吗？为了确保，我们也把它们放进去，看看冲突是如何正确解决的：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Running this returns the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个代码返回以下结果：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, looking up the key worst returns `None`, since the key does
    not exist. The keys `ad` and `ga` also return their corresponding values, showing
    that the collision between them is dealt with.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，查找键worst返回`None`，因为该键不存在。键`ad`和`ga`也返回它们对应的值，显示它们之间的冲突是如何处理的。
- en: Using [] with the hash table
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用哈希表的[]
- en: 'Using the `put()` and `get()` methods doesn''t look very good, however. We
    want to be able to treat our hash table as a list, that is, we would like to be
    able to use `ht["good"]` instead of `ht.get("good")`. This is easily done with
    the special methods `__setitem__()` and `__getitem__()`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用`put()`和`get()`方法看起来并不是很好。我们希望能够将我们的哈希表视为一个列表，也就是说，我们希望能够使用`ht["good"]`而不是`ht.get("good")`。这可以很容易地通过特殊方法`__setitem__()`和`__getitem__()`来实现：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our test code can now look like this instead:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试代码现在可以这样写：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice that we also print the number of elements in the hash table. This is
    useful for our next discussion.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还打印了哈希表中的元素数量。这对我们接下来的讨论很有用。
- en: Non-string keys
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非字符串键
- en: In most cases, it makes more sense to just use strings for the keys. However,
    if necessary, you could use any other Python type. If you create your own class
    that you want to use as a key, you will probably want to override the special
    `__hash__()` function for that class, so that you get reliable hash values.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，只使用字符串作为键更有意义。但是，如果必要，你可以使用任何其他的Python类型。如果你创建了自己的类来用作键，你可能需要重写该类的特殊`__hash__()`函数，以便获得可靠的哈希值。
- en: Note that you would still have to calculate the modulo (%) of the hash value
    and the size of the hash table to get the slot. That calculation should happen
    in the hash table and not in the key class, since the table knows its own size
    (the key class should not know anything about the table that it belongs to).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你仍然需要计算哈希值的模运算和哈希表的大小，以获得插槽。这个计算应该发生在哈希表中，而不是在键类中，因为表知道自己的大小（键类不应该知道它所属的表的任何信息）。
- en: Growing a hash table
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩大哈希表
- en: In our example, the hash table's size was set to 256\. Obviously, as we add
    elements to the list, we begin to fill up the empty slots. At some point, all
    the slots will be filled up and the table will be full. To avoid this, we can
    grow the table when it is getting full.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，哈希表的大小设置为256。显然，随着我们向列表中添加元素，我们开始填满空插槽。在某个时候，所有的插槽都将被填满，表也将被填满。为了避免这种情况，我们可以在表快要填满时扩大表。
- en: To do this, we compare the size and the count. Remember that `size` held the
    total number of slots and `count` the number of those slots that contained elements?
    Well, if `count` equals `size` then we have filled up the table.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们比较大小和计数。记住`size`保存了插槽的总数，`count`保存了包含元素的插槽的数量？如果`count`等于`size`，那么我们已经填满了表。
- en: 'The hash table''s load factor gives us an indication of how large a portion
    of the available slots are being used. It is defined as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表的负载因子给了我们一个指示，表中有多大比例的可用插槽正在被使用。它的定义如下：
- en: '![](assets/bb6128dd-4fa3-454f-8a3a-e6618c78605b.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb6128dd-4fa3-454f-8a3a-e6618c78605b.jpg)'
- en: As the load factor approaches 1, we need to grow the table. In fact, we should
    do it before it gets there in order to avoid gets becoming too slow. A value of
    0.75 may be a good value in which to grow the table.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当负载因子接近1时，我们需要扩大表格。实际上，我们应该在它达到那里之前就这样做，以避免变得太慢。0.75可能是一个很好的值，用来扩大表格。
- en: The next question is how much to grow the table by. One strategy would be to
    simply double the size of the table.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个问题是要扩大表多少。一个策略是简单地将表的大小加倍。
- en: Open addressing
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放寻址
- en: The collision resolution mechanism we used in our example, linear probing, is
    an example of an open addressing strategy. Linear probing is really simple since
    we use a fixed interval between our probes. There are other open addressing strategies
    as well but they all share the idea that there is an array of slots. When we want
    to insert a key, we check whether the slot already has an item or not. If it does,
    we look for the next available slot.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在示例中使用的冲突解决机制，线性探测，是开放寻址策略的一个例子。线性探测非常简单，因为我们在探测之间使用固定的间隔。还有其他的开放寻址策略，但它们都共享一个想法，即有一个插槽数组。当我们想要插入一个键时，我们会检查插槽是否已经有项目。如果有，我们会寻找下一个可用的插槽。
- en: If we have a hash table that contains 256 slots, then 256 is the maximum number
    of elements in that hash. Moreover, as the load factor increases, it will take
    longer to find the insertion point for the new element.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个包含256个插槽的哈希表，那么256就是哈希中最大的元素数量。此外，随着负载因子的增加，找到新元素的插入点将需要更长的时间。
- en: Because of these limitations, we may prefer to use a different strategy to resolve
    collisions, such as chaining.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些限制，我们可能更喜欢使用不同的策略来解决冲突，例如链接。
- en: Chaining
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接
- en: 'Chaining is a strategy for resolving conflicts and avoiding the limit to the
    number of elements in a hash table. In chaining, the slots in the hash table are
    initialized with empty lists:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 链接是一种解决冲突并避免哈希表中元素数量限制的策略。在链接中，哈希表中的插槽初始化为空列表：
- en: '![](assets/27c7922b-721c-462c-b364-80c3f9043576.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/27c7922b-721c-462c-b364-80c3f9043576.jpg)'
- en: 'When an element is inserted, it will be appended to the list that corresponds
    to that element''s hash value. That is, if you have two elements that both have
    the hash value 1167, these two elements will both be added to the list that exists
    in slot 1167 of the hash table:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当插入元素时，它将被追加到与该元素的哈希值对应的列表中。也就是说，如果您有两个具有相同哈希值1167的元素，这两个元素都将被添加到哈希表的插槽1167中存在的列表中：
- en: '![](assets/b0a9e8cd-66ef-4a1f-9d71-426b40f86976.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0a9e8cd-66ef-4a1f-9d71-426b40f86976.jpg)'
- en: The preceding diagram shows a list of entries with hash value 51.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了具有哈希值51的条目列表。
- en: Chaining then avoids conflict by allowing multiple elements to have the same
    hash value. It also avoids the problem of insertions as the load factor increases,
    since we don't have to look for a slot. Moreover, the hash table can hold more
    values than the number of available slots, since each slot holds a list that can
    grow.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过允许多个元素具有相同的哈希值来避免冲突。它还避免了插入的问题，因为负载因子增加时，我们不必寻找插槽。此外，哈希表可以容纳比可用插槽数量更多的值，因为每个插槽都包含一个可以增长的列表。
- en: 'Of course, if a particular slot has many items, searching them can get very
    slow, since we have to do a linear search through the list until we find the element
    that has the key we want. This can slow down retrieval, which is not good, since
    hash tables are meant to be efficient:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果特定插槽有很多项，搜索它们可能会变得非常缓慢，因为我们必须通过列表进行线性搜索，直到找到具有所需键的元素。这可能会减慢检索速度，这并不好，因为哈希表的目的是高效的：
- en: '![](assets/da74b737-63a5-4d5f-83c0-e1ca96b57b91.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/da74b737-63a5-4d5f-83c0-e1ca96b57b91.jpg)'
- en: The preceding diagram demonstrates a linear search through list items until
    we find a match.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上图演示了通过列表项进行线性搜索，直到找到匹配项。
- en: 'Instead of using lists in the table slots, we could use another structure that
    allows for fast searching. We have already looked at **binary search trees** (**BSTs**).
    We could simply put an (initially empty) BST in each slot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在表插槽中使用另一个允许快速搜索的结构，而不是使用列表。我们已经看过**二叉搜索树**（**BSTs**）。我们可以简单地在每个插槽中放置一个（最初为空的）BST：
- en: '![](assets/cc74e411-b929-4117-816f-03466949e072.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc74e411-b929-4117-816f-03466949e072.jpg)'
- en: 'Slot 51 holds a BST which we search for the key. But we would still have a
    potential problem: depending on the order in which the items were added to the
    BST, we could end up with a search tree that is as inefficient as a list. That
    is, each node in the tree has exactly one child. To avoid this, we would need
    to ensure that our BST is self-balancing.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 插槽51包含我们搜索键的BST。但我们仍然可能会遇到一个问题：根据将项添加到BST的顺序，我们可能会得到一个搜索树，其效率与列表一样低。也就是说，树中的每个节点都只有一个子节点。为了避免这种情况，我们需要确保我们的BST是自平衡的。
- en: Symbol tables
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号表
- en: Symbol tables are used by compilers and interpreters to keep track of the symbols
    that have been declared and information about them. Symbol tables are often built
    using hash tables, since it is important to efficiently retrieve a symbol in the
    table.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 符号表被编译器和解释器用来跟踪已声明的符号及其相关信息。符号表通常使用哈希表构建，因为高效地检索表中的符号很重要。
- en: 'Let us look at an example. Suppose we have the following Python code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。假设我们有以下Python代码：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here we have two symbols, name and age. They belong to a namespace, which could
    be `__main__`, but it could also be the name of a module if you placed it there.
    Each symbol has a value; name has the value `Joe` and age has the value `27`.
    A symbol table allows the compiler or the interpreter to look these values up.
    The symbols name and age become the keys in our hash table. All the other information
    associated with it, such as the value, become part of the value of the symbol
    table entry.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个符号，名称和年龄。它们属于一个命名空间，可以是`__main__`，但如果您将其放在那里，它也可以是模块的名称。每个符号都有一个值；名称的值为`Joe`，年龄的值为`27`。符号表允许编译器或解释器查找这些值。符号名称和年龄成为哈希表中的键。与之关联的所有其他信息，例如值，都成为符号表条目的一部分。
- en: 'Not only variables are symbols, but functions and classes as well. They will
    all be added to our symbol table, so that when any one of them needs to be accessed,
    they are accessible from the symbol table:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅变量是符号，函数和类也是。它们都将被添加到我们的符号表中，因此当需要访问它们中的任何一个时，它们都可以从符号表中访问：
- en: '![](assets/1d9af336-8933-481d-ac37-6241657bfd7d.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1d9af336-8933-481d-ac37-6241657bfd7d.jpg)'
- en: 'In Python, each module that is loaded has its own symbol table. The symbol
    table is given the name of that module. This way, modules act as namespaces. We
    can have multiple symbols called age, as long as they exist in different symbol
    tables. To access either one, we access it through the appropriate symbol table:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，每个加载的模块都有自己的符号表。符号表被赋予该模块的名称。这样，模块就充当了命名空间。我们可以有多个名为年龄的符号，只要它们存在于不同的符号表中。要访问其中任何一个，我们通过适当的符号表进行访问：
- en: '![](assets/c21ded3a-54f5-4e40-ae10-437dec4e39ed.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c21ded3a-54f5-4e40-ae10-437dec4e39ed.jpg)'
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have looked at hash tables. We looked at how to write a
    hashing function to turn string data into integer data. Then we looked at how
    we can use hashed keys to quickly and efficiently look up the value that corresponds
    to a key.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经研究了哈希表。我们研究了如何编写哈希函数将字符串数据转换为整数数据。然后我们看了如何使用哈希键快速高效地查找对应于键的值。
- en: We also noticed how hashing functions are not perfect and that several strings
    can end up having the same hash value. This led us to look at collision resolution
    strategies.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还注意到哈希函数并不完美，可能会导致多个字符串具有相同的哈希值。这促使我们研究了冲突解决策略。
- en: We looked at growing a hash table and how to look at the load factor of the
    table in order to determine exactly when to grow the hash.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了如何扩展哈希表，以及如何查看表的负载因子，以确定何时扩展哈希表。
- en: In the last section of the chapter, we studied symbol tables, which often are
    built using hash tables. Symbol tables allow a compiler or an interpreter to look
    up a symbol (variable, function, class, and so on) that has been defined and retrieve
    all information about it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一节中，我们学习了符号表，通常使用哈希表构建。符号表允许编译器或解释器查找已定义的符号（变量、函数、类等）并检索有关其所有信息。
- en: In the next chapter, we will talk about graphs and other algorithms.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论图和其他算法。
