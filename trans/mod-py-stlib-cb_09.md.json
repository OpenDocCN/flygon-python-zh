["```py\ndef fetch_url(url):\n    \"\"\"Fetch content of a given url from the web\"\"\"\n    import urllib.request\n    response = urllib.request.urlopen(url)\n    return response.read()\n```", "```py\ndef wait_until(predicate):\n    \"\"\"Waits until the given predicate returns True\"\"\"\n    import time\n    seconds = 0\n    while not predicate():\n        print('Waiting...')\n        time.sleep(1.0)\n        seconds += 1\n    print('Done!')\n    return seconds\n```", "```py\n>>> from multiprocessing.pool import ThreadPool\n>>> pool = ThreadPool(4)\n>>> t1 = pool.apply_async(fetch_url, args=('https://httpbin.org/delay/3',))\n>>> t2 = pool.apply_async(wait_until, args=(t1.ready, ))\nWaiting...\n>>> pool.close()\n>>> pool.join()\nWaiting...\nWaiting...\nWaiting...\nDone!\n>>> print('Total Time:', t2.get())\nTotal Time: 4\n>>> print('Content:', t1.get())\nContent: b'{\"args\":{},\"data\":\"\",\"files\":{},\"form\":{},\n            \"headers\":{\"Accept-Encoding\":\"identity\",\n            \"Connection\":\"close\",\"Host\":\"httpbin.org\",\n            \"User-Agent\":\"Python-urllib/3.5\"},\n            \"origin\":\"99.199.99.199\",\n            \"url\":\"https://httpbin.org/delay/3\"}\\n'\n```", "```py\n>>> pool = ThreadPool(4)\n```", "```py\n>>> t1 = pool.apply_async(fetch_url, args=('https://httpbin.org/delay/3',))\n```", "```py\n>>> t2 = pool.apply_async(wait_until, args=(t1.ready, ))\n```", "```py\n>>> pool.close()\n```", "```py\n>>> pool.join()\n```", "```py\n>>> print('Total Time:', t2.get())\nTotal Time: 4\n>>> print('Content:', t1.get())\nContent: b'{\"args\":{},\"data\":\"\",\"files\":{},\"form\":{},\n            \"headers\":{\"Accept-Encoding\":\"identity\",\n            \"Connection\":\"close\",\"Host\":\"httpbin.org\",\n            \"User-Agent\":\"Python-urllib/3.5\"},\n            \"origin\":\"99.199.99.199\",\n            \"url\":\"https://httpbin.org/delay/3\"}\\n'\n```", "```py\nurls = [\n    \"https://httpbin.org/delay/1\",\n    \"https://httpbin.org/delay/2\",\n    \"https://httpbin.org/delay/3\",\n    \"https://httpbin.org/delay/4\"\n]\n```", "```py\ndef fetch_all_urls():\n    contents = []\n    for url in urls:\n        contents.append(fetch_url(url))\n    return contents\n```", "```py\n>>> import timeit\n>>> timeit.timeit(fetch_all_urls, number=1)\n12.116707602981478\n```", "```py\ndef fetch_all_urls_theraded():\n    pool = ThreadPool(4)\n    return pool.map(fetch_url, urls)\n```", "```py\n>>> timeit.timeit(fetch_all_urls_theraded, number=1)\n4.660976745188236\n```", "```py\nimport asyncio\n\nasync def countdown(identifier, n):\n    while n > 0:\n        print('left:', n, '({})'.format(identifier))\n        await asyncio.sleep(1)\n        n -= 1\n\nasync def main():\n    await asyncio.wait([\n        countdown(\"A\", 2),\n        countdown(\"B\", 3)\n    ])\n```", "```py\n>>> loop = asyncio.get_event_loop()\n>>> loop.run_until_complete(main())\nleft: 2 (A)\nleft: 3 (B)\nleft: 1 (A)\nleft: 2 (B)\nleft: 1 (B)\n```", "```py\n>>> loop.close()\n```", "```py\n>>> loop = asyncio.get_event_loop()\n```", "```py\nloop.run_until_complete(main())\n```", "```py\nawait asyncio.wait([\n    countdown(\"A\", 2),\n    countdown(\"B\", 3)\n])\n```", "```py\nawait asyncio.sleep(1)\n```", "```py\nleft 2 (A)\nleft 3 (B)\nleft 1 (A)\nleft 2 (B)\nleft 1 (B)\n```", "```py\nleft 2 (A)\nleft 1 (A)\nleft 3 (B)\nleft 2 (B)\nleft 1 (B)\n```", "```py\nasync def wait_until(predicate):\n    \"\"\"Waits until the given predicate returns True\"\"\"\n    import time\n    seconds = 0\n    while not predicate():\n        print('Waiting...')\n        await asyncio.sleep(1)\n        seconds += 1\n    print('Done!')\n    return seconds\n```", "```py\nasync def fetch_url(url):\n    \"\"\"Fetch content of a given url from the web\"\"\"\n    url = urllib.parse.urlsplit(url)\n    reader, writer = await asyncio.open_connection(url.hostname, 80)\n    req = ('GET {path} HTTP/1.0\\r\\n'\n           'Host: {hostname}\\r\\n'\n           '\\r\\n').format(path=url.path or '/', hostname=url.hostname)\n    writer.write(req.encode('latin-1'))\n    while True:\n        line = await reader.readline()\n        if not line.strip():\n            # Read until the headers, from here on is the actualy response.\n            break\n    return await reader.read()\n```", "```py\n>>> loop = asyncio.get_event_loop()\n>>> t1 = asyncio.ensure_future(fetch_url('http://httpbin.org/delay/3'))\n>>> t2 = asyncio.ensure_future(wait_until(t1.done))\n>>> loop.run_until_complete(t2)\nWaiting...\nWaiting...\nWaiting...\nWaiting...\nDone!\n>>> loop.close()\n>>> print('Total Time:', t2.result())\nTotal Time: 4\n>>> print('Content:', t1.result())\nContent: b'{\"args\":{},\"data\":\"\",\"files\":{},\"form\":{},\n            \"headers\":{\"Connection\":\"close\",\"Host\":\"httpbin.org\"},\n            \"origin\":\"93.147.95.71\",\n            \"url\":\"http://httpbin.org/delay/3\"}\\n'\n```", "```py\nimport os\n\ndef fib(n, seen):\n    if n not in seen and n % 5 == 0:\n        # Print out only numbers we didn't yet compute\n        print(os.getpid(), '->', n)\n        seen.add(n)\n\n    if n < 2:\n        return n\n    return fib(n-2, seen) + fib(n-1, seen)\n```", "```py\n>>> from multiprocessing import Pool\n>>> pool = Pool()\n>>> t1 = pool.apply_async(fib, args=(20, set()))\n>>> t2 = pool.apply_async(fib, args=(22, set()))\n>>> pool.close()\n>>> pool.join()\n42588 -> 20\n42588 -> 10\n42588 -> 0\n42589 -> 20\n42588 -> 5\n42589 -> 10\n42589 -> 0\n42589 -> 5\n42588 -> 15\n42589 -> 15\n>>> t1.get()\n6765\n>>> t2.get()\n17711\n```", "```py\n>>> pool = Pool()\n```", "```py\n>>> t1 = pool.apply_async(fib, args=(20, set()))\n```", "```py\n>>> pool.close()\n>>> pool.join()\n```", "```py\n>>> t1.get()\n6765\n>>> t2.get()\n17711\n```", "```py\nimport concurrent.futures\nimport urllib.request\nimport time\n\ndef benchmark_url(url):\n    begin = time.time()\n    with urllib.request.urlopen(url) as conn:\n        conn.read()\n    return (time.time() - begin, url)\n\nclass UrlsBenchmarker:\n    def __init__(self, urls):\n        self._urls = urls\n\n    def run(self, executor):\n        futures = self._benchmark_urls(executor)\n        fastest = min([\n            future.result() for future in \n                concurrent.futures.as_completed(futures)\n        ])\n        print('Fastest Url: {1}, in {0}'.format(*fastest))\n\n    def _benchmark_urls(self, executor):\n        futures = []\n        for url in self._urls:\n            future = executor.submit(benchmark_url, url)\n            future.add_done_callback(self._print_timing)\n            futures.append(future)\n        return futures\n\n    def _print_timing(self, future):\n        print('Url {1} downloaded in {0}'.format(\n            *future.result()\n        ))\n```", "```py\n>>> import concurrent.futures\n>>> with concurrent.futures.ThreadPoolExecutor() as executor:\n...     UrlsBenchmarker([\n...             'http://time.com/',\n...             'http://www.cnn.com/',\n...             'http://www.facebook.com/',\n...             'http://www.apple.com/',\n...     ]).run(executor)\n...\nUrl http://time.com/ downloaded in 1.0580978393554688\nUrl http://www.apple.com/ downloaded in 1.0482590198516846\nUrl http://www.facebook.com/ downloaded in 1.6707532405853271\nUrl http://www.cnn.com/ downloaded in 7.4976489543914795\nFastest Url: http://www.apple.com/, in 1.0482590198516846\n```", "```py\nfor url in self._urls:\n    future = executor.submit(benchmark_url, url)\n```", "```py\ndef benchmark_url(url):\n    begin = time.time()\n    # download url here...\n    return (time.time() - begin, url)\n```", "```py\nfuture.add_done_callback(self._print_timing)\n```", "```py\n[\n    future.result() for future in \n        concurrent.futures.as_completed(futures)\n]\n```", "```py\n>>> (1, 5) < (2, 0)\nTrue\n>>> (2, 1) < (0, 5)\nFalse\n```", "```py\n>>> min([(1, 2), (2, 0), (0, 7)])\n(0, 7)\n```", "```py\n>>> min([(0, 7), (1, 2), (0, 3)])\n(0, 3)\n```", "```py\nfastest = min([\n    future.result() for future in \n        concurrent.futures.as_completed(futures)\n])\nprint('Fastest Url: {1}, in {0}'.format(*fastest))\n```", "```py\nimport threading\nimport sched\nimport functools\n\nclass BackgroundScheduler(threading.Thread):\n    def __init__(self, start=True):\n        self._scheduler = sched.scheduler()\n        self._running = True\n        super().__init__(daemon=True)\n        if start:\n            self.start()\n\n    def run_at(self, time, action, args=None, kwargs=None):\n        self._scheduler.enterabs(time, 0, action, \n                                argument=args or tuple(), \n                                kwargs=kwargs or {})\n\n    def run_after(self, delay, action, args=None, kwargs=None):\n        self._scheduler.enter(delay, 0, action, \n                            argument=args or tuple(), \n                            kwargs=kwargs or {})\n\n    def run_every(self, seconds, action, args=None, kwargs=None):\n        @functools.wraps(action)\n        def _f(*args, **kwargs):\n            try:\n                action(*args, **kwargs)\n            finally:\n                self.run_after(seconds, _f, args=args, kwargs=kwargs)\n        self.run_after(seconds, _f, args=args, kwargs=kwargs)\n\n    def run(self):\n        while self._running:\n            delta = self._scheduler.run(blocking=False)\n            if delta is None:\n                delta = 0.5\n            self._scheduler.delayfunc(min(delta, 0.5))\n\n    def stop(self):\n        self._running = False\n```", "```py\n>>> import time\n>>> s = BackgroundScheduler()\n>>> s.run_every(2, lambda: print('Hello World'))\n>>> time.sleep(5)\nHello World\nHello World\n>>> s.stop()\n>>> s.join()\n```", "```py\nclass BackgroundScheduler(threading.Thread):\n        def __init__(self):\n            self._scheduler = sched.scheduler()\n            self._running = True\n            super().__init__(daemon=True)\n            self.start()\n```", "```py\ndef run(self):\n    while self._running:\n        delta = self._scheduler.run(blocking=False)\n        if delta is None:\n            delta = 0.5\n        self._scheduler.delayfunc(min(delta, 0.5))\n```", "```py\ndef run_every(self, seconds, action, args=None, kwargs=None):\n    @functools.wraps(action)\n    def _f(*args, **kwargs):\n        try:\n            action(*args, **kwargs)\n        finally:\n            self.run_after(seconds, _f, args=args, kwargs=kwargs)\n    self.run_after(seconds, _f, args=args, kwargs=kwargs)\n```", "```py\nimport multiprocessing\n\nmanager = multiprocessing.Manager()\nnamespace = manager.Namespace()\n```", "```py\ndef set_first_variable():\n    namespace.first = 42\np = multiprocessing.Process(target=set_first_variable)\np.start()\np.join()\n\ndef set_second_variable():\n    namespace.second = dict(value=42)\np = multiprocessing.Process(target=set_second_variable)\np.start()\np.join()\n\nimport datetime\ndef set_custom_variable():\n    namespace.last = datetime.datetime.utcnow()\np = multiprocessing.Process(target=set_custom_variable)\np.start()\np.join()\n```", "```py\n>>> def print_variables():\n...    print(namespace.first, namespace.second, namespace.last)\n...\n>>> p = multiprocessing.Process(target=print_variables)\n>>> p.start()\n>>> p.join()\n42 {'value': 42} 2018-05-26 21:39:17.433112\n```", "```py\n>>> manager = multiprocessing.Manager()\n>>> print(manager.address)\n/tmp/pymp-4l33rgjq/listener-34vkfba3\n```", "```py\n>>> namespace = manager.Namespace()\n>>> print(namespace._token)\nToken(typeid='Namespace', \n      address='/tmp/pymp-092482xr/listener-yreenkqo', \n      id='7f78c7fd9630')\n```", "```py\n>>> import multiprocessing.managers\n>>> manager = multiprocessing.managers.SyncManager(\n...     address=('localhost', 50000), \n...     authkey=b'secret'\n... )\n>>> print(manager.address)\n('localhost', 50000)\n```", "```py\n>>> manager.get_server().serve_forever()\n```", "```py\n>>> manager2 = multiprocessing.managers.SyncManager(\n...     address=('localhost', 50000), \n...     authkey=b'secret'\n... )\n>>> manager2.connect()\n```", "```py\n>>> namespace = manager.Namespace()\n>>> namespace.value = 5\n```", "```py\n>>> from multiprocessing.managers import NamespaceProxy\n>>> ns2 = NamespaceProxy(token, 'pickle', \n...                      manager=manager2, \n...                      authkey=b'secret')\n>>> print(ns2.value)\n5\n```"]