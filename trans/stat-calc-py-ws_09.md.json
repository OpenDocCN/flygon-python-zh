["```py\n    # coin_flip_scenario.py\n    # import the random module\n    import random\n    random.seed(54321)\n    ```", "```py\n    # set the sample size or coin flips you what to run\n    sample_size = 10\n    ```", "```py\n    # create a for loop and collect the results in a list\n    # 1 = heads and 0 = tails\n    result_list = []\n    for i in range(sample_size):\n    \u00a0\u00a0\u00a0\u00a0result = random.randint(0, 1)\n    \u00a0\u00a0\u00a0\u00a0result_list.append(result)\n    ```", "```py\n    # compile results\n    num_of_heads = sum(result_list)\n    avg_of_heads = float(num_of_heads) / sample_size\n    ```", "```py\n    # print the results\n    print(f'Results: {num_of_heads} heads out of {sample_size} \\\n    flips.')\n    print(f'Average number of heads per flip is {avg_of_heads}.')\n    ```", "```py\n    Results: 4 heads out of 10 flips. Average number of \n    heads per flip is 0.4.\n    ```", "```py\n    # set the sample size or coin flips you what to run\n    sample_size = 100\n    ```", "```py\n    Results: 51 heads out of 100 flips. Average number     of heads per flip is 0.51.\n    ```", "```py\n    # coin_clip_scenario_2.py\n    # import the module\n    import random\n    import matplotlib.pyplot as plt\n    random.seed(54321)\n    ```", "```py\n    # set the sample size or coin flips you what to run\n    sample_size = 20000\n    ```", "```py\n    # initialize the variables required for our loop\n    # 1 = heads and 0 = tails\n    num_of_heads = 0\n    heads_list = []\n    trials_list = []\n    freq_list = []\n    ```", "```py\n    # create a for loop and collect the results in a list\n    for i in range(1,sample_size+1):\n    \u00a0\u00a0\u00a0\u00a0result = random.randint(0, 1)\n    \u00a0\u00a0\u00a0\u00a0if result == 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num_of_heads += 1\n    \u00a0\u00a0\u00a0\u00a0avg_of_heads = float(num_of_heads) / i\n    \u00a0\u00a0\u00a0\u00a0heads_list.append(num_of_heads)\n    \u00a0\u00a0\u00a0\u00a0trials_list.append(i)\n    \u00a0\u00a0\u00a0\u00a0freq_list.append(avg_of_heads)\n    ```", "```py\n    # print the results\n    print(f'Results: {num_of_heads} heads out of {sample_size} flips.')\n    print(f'Average number of heads is {avg_of_heads}')\n    ```", "```py\n    #create a simple line graph to show our results over time\n    plt.plot(trials_list, freq_list)\n    plt.ylabel('Sample Average')\n    plt.xlabel('Sample Size')\n    plt.hlines(0.50,0,sample_size,linestyles='dashed')\n    plt.show()\n    ```", "```py\n    Results: 10008 heads out of 20000 flips. Average number of \n    heads is 0.5004\n    ```", "```py\n    # roulette simulation.py\n    # import the module\n    import random\n    import matplotlib.pyplot as plt\n    random.seed(54321)\n    ```", "```py\n    # set the number of games of roulette you want to play\n    sample_size = 10\n    #set the amount of money you want to bet\n    bet = 1\n    ```", "```py\n    # initialize the variables required for our loop\n    # 1 to 36 represent numbers on roulette wheel, 37 represents 0, 38 represents 00\n    net_money = 0\n    wins = 0\n    money_track = []\n    trials_track = []\n    ```", "```py\n    # create a for loop and collect the results in a list\n    for i in range(1,sample_size+1):\n    \u00a0\u00a0\u00a0\u00a0result = random.randint(1,38)\n    \u00a0\u00a0\u00a0\u00a0if result % 2 == 1 and result != 37:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0net_money += bet\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wins += 1\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0net_money -= bet\n    \u00a0\u00a0\u00a0\u00a0money_track.append(net_money/i)\n    \u00a0\u00a0\u00a0\u00a0trials_track.append(i)\n    ```", "```py\n    # print the results\n    print(f'Results: You won {wins} games out of\\\n    {sample_size} and won an average of\\\n    {net_money/sample_size} dollars per game')\n    print(f'Results: You are expected to win\\\n    {((18/38)*bet+(20/38)*(-bet))} per game')\n    ```", "```py\n    #create a simple line graph to show our results over time\n    plt.plot(trials_track, money_track)\n    plt.ylabel('Net Money')\n    plt.xlabel('Number of games')\n    plt.hlines(((18/38)*bet+(20/38)*(-bet)), 0,            sample_size, linestyles='dashed')\n    plt.show()\n    ```", "```py\n    Results: You won 4 games out of 10 and won an average of -0.2 dollars per game\n    Results: You are expected to win -0.05263157894736842 per game\n    ```", "```py\n    # sample_from_uniform_dist.py\n    # import the module\n    import random\n    import matplotlib.pyplot as plt\n    import math\n    import numpy as np\n    import scipy.stats as stats\n    random.seed(54312)\n    ```", "```py\n    # select the sample size you want to take\n    sample_size = 30\n    # select the number of sample mean you want to simulate\n    calc_means = 10000\n    ```", "```py\n    mean_list = []\n    # run our loop and collect a sample\n    for j in range(calc_means):\n    \u00a0\u00a0\u00a0\u00a0# initialize the variables to track our results\n    \u00a0\u00a0\u00a0\u00a0sample_list = []\n    \u00a0\u00a0\u00a0\u00a0for i in range(sample_size):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sample_list.append(random.randint(0, 100))\n    \u00a0\u00a0\u00a0\u00a0sample_mean = sum(sample_list) / sample_size\n    \u00a0\u00a0\u00a0\u00a0mean_list.append(sample_mean)\n    ```", "```py\n    \"\"\"\n    create a histogram of our sample and compare it \n    to what the CLT says it should be \n    \"\"\"\n    n, bins, patches = plt.hist(mean_list, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0math.floor(math.sqrt(calc_means)),\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0density=True, facecolor='g', alpha=0.75)\n    plt.grid(True)\n    mu = 50\n    sigma = math.sqrt(((100 ** 2) / 12)) / (math.sqrt(sample_size))\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n    plt.show()\n    ```", "```py\n    # sample_from_exp_dist.py\n    # import the module\n    import random\n    import matplotlib.pyplot as plt\n    import math\n    import numpy as np\n    import scipy.stats as stats\n    # select the sample size you want to take\n    sample_size = 5\n    # select the number of sample mean you want to simulate\n    calc_means = 10000\n    ```", "```py\n    mean_list = []\n    # run our loop and collect a sample\n    for j in range(calc_means):\n    \u00a0\u00a0\u00a0\u00a0# initialize the variables to track our results\n    \u00a0\u00a0\u00a0\u00a0sample_list = []\n    \u00a0\u00a0\u00a0\u00a0for i in range(sample_size):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0draw = np.random.exponential(1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sample_list.append(draw)\n    \u00a0\u00a0\u00a0\u00a0sample_mean = sum(sample_list) / sample_size\n    \u00a0\u00a0\u00a0\u00a0mean_list.append(sample_mean)\n    ```", "```py\n    \"\"\" create a histogram of our sample and compare it to what the CLT says it should be \"\"\"\n    n, bins, patches = plt.hist(mean_list, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0math.floor(math.sqrt(calc_means)), \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0density=True, facecolor='g', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0alpha=0.75)\n    plt.grid(True)\n    mu = 1\n    sigma = 1 / (math.sqrt(sample_size))\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n    plt.show()\n    ```", "```py\ndef z_confidence_interval(data, st_dev, con_lvl):\n\u00a0\u00a0\u00a0\u00a0import statistics as st\n\u00a0\u00a0\u00a0\u00a0import scipy.stats as sp\n\u00a0\u00a0\u00a0\u00a0import math\n\u00a0\u00a0\u00a0\u00a0sample_mean = st.mean(data)\n\u00a0\u00a0\u00a0\u00a0n = len(data)\n\u00a0\u00a0\u00a0\u00a0crit_value = sp.norm.ppf(((1 - con_lvl) / 2) + \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con_lvl)\n\u00a0\u00a0\u00a0\u00a0lower_limit = sample_mean - (crit_value * \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(st_dev/math.sqrt(n)))\n\u00a0\u00a0\u00a0\u00a0higher_limit = sample_mean + (crit_value * \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(st_dev / math.sqrt(n)))\n\u00a0\u00a0\u00a0\u00a0print (f'Your {con_lvl} z confidence interval         is ({lower_limit}, {higher_limit})')\n\u00a0\u00a0\u00a0\u00a0return (lower_limit,higher_limit)\n```", "```py\n    import random\n    random.seed(39809)\n    ```", "```py\n    sample_list = []\n    for i in range(30):\n    \u00a0\u00a0\u00a0\u00a0sample_list.append(random.randint(0, 10))\n    z_confidence_interval(sample_list,2.89,0.95)\n    ```", "```py\n    Your 0.95 z confidence interval is (3.965845784931483, 6.034154215068517)\n    ```", "```py\ndef t_confidence_interval(data, con_lvl):\n\u00a0\u00a0\u00a0\u00a0import statistics as st\n\u00a0\u00a0\u00a0\u00a0import scipy.stats as sp\n\u00a0\u00a0\u00a0\u00a0import math\n\u00a0\u00a0\u00a0\u00a0sample_mean = st.mean(data)\n\u00a0\u00a0\u00a0\u00a0sample_st_dev = st.stdev(data)\n\u00a0\u00a0\u00a0\u00a0n = len(data)\n\u00a0\u00a0\u00a0\u00a0crit_value = sp.t.ppf(((1 - con_lvl) / 2) + \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con_lvl, n-1)\n\u00a0\u00a0\u00a0\u00a0lower_limit = sample_mean - (crit_value * \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(sample_st_dev/math.sqrt(n)))\n\u00a0\u00a0\u00a0\u00a0higher_limit = sample_mean + (crit_value * \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(sample_st_dev/math.sqrt(n)))\n\u00a0\u00a0\u00a0\u00a0print(f'Your {con_lvl} t confidence interval is \\\n({lower_limit},{higher_limit})')\n\u00a0\u00a0\u00a0\u00a0return (lower_limit,higher_limit)\n```", "```py\nt_confidence_interval(sample_list,0.95)\n```", "```py\nYour 0.95 t confidence interval is (3.827357936126168,6.172642063873832)\n```", "```py\ndef prop_confidenct_interval(p_hat, n, con_lvl):\n\u00a0\u00a0\u00a0\u00a0import math\n\u00a0\u00a0\u00a0\u00a0import scipy.stats as sp\n\u00a0\u00a0\u00a0\u00a0crit_value = sp.norm.ppf(((1 - con_lvl) / 2) + \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0con_lvl)\n\u00a0\u00a0\u00a0\u00a0lower_limit = p_hat - (crit_value * (math.sqrt(\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(p_hat * (1-p_hat)) / n)))\n\u00a0\u00a0\u00a0\u00a0higher_limit = p_hat + (crit_value * (math.sqrt(\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(p_hat * (1 - p_hat)) / n)))\n\u00a0\u00a0\u00a0\u00a0print(f'Your {con_lvl} proportional confidence \\\ninterval is ({lower_limit},{higher_limit})')\n\u00a0\u00a0\u00a0\u00a0return (lower_limit,higher_limit)\n```", "```py\nprop_confidenct_interval(0.54,350, 0.95)\n```", "```py\nYour 0.95 proportional confidence interval is (0.4877856513683282,0.5922143486316719)\n```", "```py\n    import scipy.stats as st\n    import numpy as np\n    import pandas as pd\n    import math as mt\n    import statistics as stat\n    import statsmodels.stats.weightstats as mod\n    import statsmodels.stats.proportion as prop\n    np.random.seed(12345)\n    ```", "```py\n    def z_test(sample, pop_st_dev, hypoth_value, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sig_level, test_type):\n    \u00a0\u00a0\u00a0\u00a0sample_mean = stat.mean(sample)\n    \u00a0\u00a0\u00a0\u00a0sample_size = len(sample)\n    \u00a0\u00a0\u00a0\u00a0test_statistic = (sample_mean - hypoth_value) / \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(pop_st_dev / (mt.sqrt(sample_size)))\n    \u00a0\u00a0\u00a0\u00a0if test_type == 'lower':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = st.norm.cdf(test_statistic)\n    \u00a0\u00a0\u00a0\u00a0if test_type == 'upper':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = 1 - st.norm.cdf(test_statistic)\n    \u00a0\u00a0\u00a0\u00a0if test_type == 'two':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = 2 * (1 - st.norm.cdf(abs(            test_statistic)))\n    \u00a0\u00a0\u00a0\u00a0print(f'P Value = {p_value}')\n    \u00a0\u00a0\u00a0\u00a0if p_value < sig_level:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f'Results are significant. Reject the Null')\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f'Results are insignificant. '\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Do Not Reject the Null')\n    ```", "```py\n    # 1 - Lower Tailed Test\n    # Randomly Sample from Normal Distribution mu=     and st_dev = 3\n    data1 = np.random.normal(15, 1, 50)\n    # Test to see if Mean is significantly less then 16\n    print(f'Sample mean: {stat.mean(data1)}')\n    z_test(data1,1,16,0.05,'lower')\n    # most of the time, the null should be rejected\n    ```", "```py\n    Sample mean: 14.94804802516884\n    P Value = 5.094688086201483e-14\n    Results are significant.  Reject the Null\n    (-7.43842374885694, 5.094688086201483e-14)\n    ```", "```py\n    #test to see if the mean is significantly more than 14\n    print(f'Sample mean: {stat.mean(data1)}')\n    z_test(data1,1,14,0.05,'upper')\n    #most of the time the null should reject\n    ```", "```py\n    Sample mean: 14.94804802516884\n    P Value = 1.0159539876042345e-11\n    Results are significant.  Reject the Null\n    (6.703711874874011, 1.0159539876042345e-11)\n    ```", "```py\n    #test to see if the mean is significantly different than 15\n    print(f'Sample mean: {stat.mean(data1)}')\n    z_test(data1,1,15,0.05,'two')\n    #most of the type we should not reject the null\n    ```", "```py\n    Sample mean: 14.94804802516884\n    P Value = 0.7133535345453159\n    Results are insignificant.  Do Not Reject the Null\n    (-0.3673559369914646, 0.7133535345453159)\n    ```", "```py\nproportions_ztest(x,n,Po, alternative=['smaller',\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'larger','two-sided'])\n```", "```py\n#z-test for proportion\nresults = prop.proportions_ztest(193,350,.50, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0alternative='larger')\nprint(results)\n```", "```py\n(1.93454148164361, 0.026523293494118718)\n```", "```py\ndef t_test(sample, hypoth_value, sig_level, test_type):\n\u00a0\u00a0\u00a0\u00a0sample_mean = stat.mean(sample)\n\u00a0\u00a0\u00a0\u00a0sample_st_dev = stat.stdev(sample)\n\u00a0\u00a0\u00a0\u00a0sample_size = len(sample)\n\u00a0\u00a0\u00a0\u00a0test_statistic = (sample_mean - hypoth_value) / \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(sample_st_dev/(mt.sqrt(sample_size)))\n\u00a0\u00a0\u00a0\u00a0if test_type == 'lower':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = st.t.cdf(test_statistic,df=sample_size-1)\n\u00a0\u00a0\u00a0\u00a0if test_type == 'upper':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = 1 - st.t.cdf(test_statistic,df=sample_size-1)\n\u00a0\u00a0\u00a0\u00a0if test_type == 'two':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = 2 * (1 - st.t.cdf(abs(test_statistic), \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df=sample_size-1))\n\u00a0\u00a0\u00a0\u00a0print(f'P Value = {p_value}')\n\u00a0\u00a0\u00a0\u00a0if p_value < sig_level:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f'Results are significant.  Reject the Null')\n\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f'Results are insignificant. '\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Do Not Reject the Null')\n```", "```py\n    import scipy.stats as st\n    import numpy as np\n    import pandas as pd\n    import math as mt\n    import statistics as stat\n    import statsmodels.stats.weightstats as mod\n    import statsmodels.stats.proportion as prop\n    np.random.seed(1)\n    data1 = np.random.normal(50, 10, 100)\n    ```", "```py\n    def t_test(sample, hypoth_value, sig_level, test_type):\n    \u00a0\u00a0\u00a0\u00a0sample_mean = stat.mean(sample)\n    \u00a0\u00a0\u00a0\u00a0sample_st_dev = stat.stdev(sample)\n    \u00a0\u00a0\u00a0\u00a0sample_size = len(sample)\n    \u00a0\u00a0\u00a0\u00a0test_statistic = (sample_mean - hypoth_value) / \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(sample_st_dev/(mt.sqrt(sample_size)))\n    \u00a0\u00a0\u00a0\u00a0if test_type == 'lower':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = st.t.cdf(test_statistic,df=sample_size-1)\n    \u00a0\u00a0\u00a0\u00a0if test_type == 'upper':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = 1 - st.t.cdf(test_statistic,df=sample_size-1)\n    \u00a0\u00a0\u00a0\u00a0if test_type == 'two':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p_value = 2 * (1 - st.t.cdf(abs(test_statistic), \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df=sample_size-1))\n    \u00a0\u00a0\u00a0\u00a0print(f'P Value = {p_value}')\n    \u00a0\u00a0\u00a0\u00a0if p_value < sig_level:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f'Results are significant.  Reject the Null')\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f'Results are insignificant. '\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Do Not Reject the Null')\n    ```", "```py\n    print('large sample')\n    print(f'Sample mean: {stat.mean(data1)}')\n    t_test(data1,50,0.05,'two')\n    t_test(data1,51,0.05,'lower')\n    t_test(data1,48,0.05,'upper')\n    ```", "```py\n    large sample\n    Sample mean: 50.60582852075699\n    P Value = 0.4974609984410545\n    Results are insignificant.  Do Not Reject the Null\n    P Value = 0.32933701868279674\n    Results are insignificant.  Do Not Reject the Null\n    P Value = 0.002109341573010237\n    Results are significant.  Reject the Null\n    ```", "```py\n    # select the first 5 elements of the data set\n    data2 = data1[:5]\n    print(data2)\n    #two-tailed test = Is the sample mean significantly \n    #different from 50?\n    print('small sample')\n    print(f'Sample mean: {stat.mean(data2)}')\n    t_test(data2,50,0.05,'two')\n    #lower tailed = Is the sample mean significantly \n    #lower than 51?\n    t_test(data2,51,0.05,'lower')\n    #upper tailed = is the sample mean significantly \n    #more than 48?\n    t_test(data2,48,0.05,'upper')\n    ```", "```py\n    [66.24345364 43.88243586 44.71828248 39.27031378 58.65407629]\n    small sample\n    Sample mean: 50.553712409836436\n    P Value = 0.918572770568147\n    Results are insignificant.  Do Not Reject the Null\n    P Value = 0.4671568669546634\n    Results are insignificant.  Do Not Reject the Null\n    P Value = 0.32103491333328793\n    Results are insignificant.  Do Not Reject the Null\n    ```", "```py\nscipy.stats.ttest_ind(x1,x2,equal_var=False)\n```", "```py\n    import scipy.stats as st\n    import numpy as np\n    ```", "```py\n    # Randomly Sample from Normal Distributions \n    np.random.seed(16172)\n    sample1 = np.random.normal(50, 10, 100)\n    sample2 = np.random.normal(100,10,100)\n    print(f'Sample mean 1: {stat.mean(sample1)}')\n    print(f'Sample mean 2: {stat.mean(sample2)}')\n    ```", "```py\n    Sample mean 1: 50.54824784997514\n    Sample mean 2: 97.95949096047315\n    ```", "```py\n    two_tail_results = st.ttest_ind(sample1, sample2, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0equal_var=False)\n    print(two_tail_results)\n    ```", "```py\n    Ttest_indResult(statistic=-33.72952277672986,     pvalue=6.3445365508664585e-84)\n    ```", "```py\n    upper_tail = st.ttest_ind(sample2, sample1, equal_var=False)\n    print(upper_tail)\n    ```", "```py\n    Ttest_indResult(statistic=33.72952277672986, \n    pvalue=6.3445365508664585e-84)\n    ```", "```py\n    # import packages and read in data\n    import pandas as pd\n    import statistics as st\n    import scipy.stats as sp\n    import math\n    import sklearn.linear_model as lm\n    import matplotlib.pyplot as plt\n    from mpl_toolkits import mplot3d\n    import numpy as np\n    data = pd.read_csv(\"winequality-red.csv\")\n    ```", "```py\n    data1 = data[['pH','citric acid']]\n    plt.scatter(x=data1['citric acid'], y=data1['pH'])\n    y = data1['pH']\n    x = data1[['citric acid']]\n    ```", "```py\n    model = lm.LinearRegression()\n    model.fit(x,y)\n    plt.scatter(x, y,color='g')\n    plt.plot(x, model.predict(x),color='k')\n    plt.show()\n    ```", "```py\n    #can we predict the pH of the wine using \n    #citric acid and residual sugar?\n    data2 = data[['pH','citric acid','residual sugar']]\n    y = data2['pH']\n    x = data2[['citric acid', 'residual sugar']]\n    model = lm.LinearRegression()\n    model.fit(x,y)\n    y_pred = model.predict(x)\n    ```", "```py\n    threedee = plt.figure().gca(projection='3d')\n    threedee.scatter(data2['citric acid'],     data2['residual sugar'],data2['pH'])\n    threedee.set_xlabel('citric acid')\n    threedee.set_ylabel('residual sugar')\n    threedee.set_zlabel('pH')\n    xline = np.linspace(0, 1, 100)\n    yline = np.linspace(0, 16, 100)\n    zline = xline*(-0.429) + yline*(-0.000877)+3.430\n    threedee.plot3D(xline, yline, zline, 'red')\n    plt.show()\n    ```"]