["```py\n **/Users/slott/Documents/Writing/Python Cookbook/code** \n\n```", "```py\n **>>> from pathlib import Path** \n\n```", "```py\n **>>> from argparse import Namespace \n>>> options = Namespace( \n...     input='/path/to/some/file.csv', \n...     file1='/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r09.py', \n...     file2='/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r10.py', \n... )** \n\n```", "```py\n     **>>> input_path = Path(options.input) \n          >>> input_path \n          PosixPath('/path/to/some/file.csv')** \n\n    ```", "```py\n     **>>> output_path = input_path.with_suffix('.out') \n          >>> output_path \n          PosixPath('/path/to/some/file.out')** \n\n    ```", "```py\n     **>>> input_path = Path(options.input) \n          >>> input_path \n          PosixPath('/path/to/some/file.csv')** \n\n    ```", "```py\n     **>>> input_directory = input_path.parent \n          >>> input_stem = input_path.stem** \n\n    ```", "```py\n     **>>> output_stem_pass = input_stem+\"_pass\" \n          >>> output_stem_pass \n          'file_pass'** \n\n    ```", "```py\n     **>>> output_path = (input_directory / output_stem_pass).with_suffix('.csv') \n          >>> output_path \n          PosixPath('/path/to/some/file_pass.csv')** \n\n    ```", "```py\n     **>>> input_path = Path(options.input) \n          >>> input_path \n          PosixPath('/path/to/some/file.csv')** \n\n    ```", "```py\n     **>>> output_parent = input_path.parent / \"output\" \n          >>> output_parent \n          PosixPath('/path/to/some/output')** \n\n    ```", "```py\n     **>>> input_stem = input_path.stem \n          >>> output_path = (output_parent / input_stem).with_suffix('.src')** \n\n    ```", "```py\n     **>>> file1_path = Path(options.file1) \n          >>> file1_path \n          PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r09.py') \n          >>> file2_path = Path(options.file2) \n          >>> file2_path \n          PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r10.py')** \n\n    ```", "```py\n     **>>> file1_path.stat().st_mtime \n          1464460057.0 \n          >>> file2_path.stat().st_mtime \n          1464527877.0** \n\n    ```", "```py\n **>>> import datetime \n>>> mtime_1 = file1_path.stat().st_mtime \n>>> datetime.datetime.fromtimestamp(mtime_1) \ndatetime.datetime(2016, 5, 28, 14, 27, 37)** \n\n```", "```py\n          **>>> input_path = Path(options.input) \n          >>> input_path \n          PosixPath('/path/to/some/file.csv')** \n\n    ```", "```py\n     **>>> try: \n          ...     input_path.unlink() \n          ... except FileNotFoundError as ex: \n          ...     print(\"File already deleted\") \n          File already deleted** \n\n    ```", "```py\n     **>>> directory_path = Path(options.file1).parent \n          >>> directory_path \n          PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code')** \n\n    ```", "```py\n     **>>> list(directory_path.glob(\"ch08_r*.py\")) \n          [PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r01.py'),\n           PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r02.py'), \n           PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r06.py'),\n           PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r07.py'),\n           PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r08.py'),\n           PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r09.py'),\n           PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/ch08_r10.py')]** \n\n    ```", "```py\n **>>> from pathlib import PureWindowsPath \n>>> home_path = PureWindowsPath(r'C:\\Users\\slott') \n>>> name_path = home_path / 'filename.ini' \n>>> name_path \nPureWindowsPath('C:/Users/slott/filename.ini') \n>>> str(name_path) \n'C:\\\\Users\\\\slott\\\\filename.ini'** \n\n```", "```py\n    from types import SimpleNamespace \n    import datetime \n    from hashlib import md5 \n\n    def file_facts(path): \n        return SimpleNamespace( \n            name = str(path), \n            modified = datetime.datetime.fromtimestamp( \n                path.stat().st_mtime).isoformat(), \n            size = path.stat().st_size, \n            checksum = md5(path.read_bytes()).hexdigest() \n        ) \n\n```", "```py\n            from pathlib import Path \n\n    ```", "```py\n            summary_path = Path('summary.dat') \n\n    ```", "```py\n            with summary_path.open('w') as summary_file: \n\n    ```", "```py\n    base = Path(\".\") \n    for member in base.glob(\"*.py\"): \n        print(file_facts(member), file=summary_file) \n\n```", "```py\n    from contextlib import closing \n    with closing(some_database()) as database: \n        process(database) \n\n```", "```py\n     **>>> from pathlib import Path** \n\n    ```", "```py\n     **>>> from argparse import Namespace \n          >>> options = Namespace( \n          ...     target='/Users/slott/Documents/Writing/Python Cookbook/code/output.csv' \n          ... )** \n\n    ```", "```py\n     **>>> output_path = Path(options.target) \n          >>> output_path \n          PosixPath('/Users/slott/Documents/Writing/Python Cookbook/code/output.csv')** \n\n    ```", "```py\n          >>> output_temp_path = output_path.with_suffix('.csv.tmp') \n\n    ```", "```py\n     **>>> output_temp_path.write_text(\"Heading1,Heading2\\r\\n355,113\\r\\n\")** \n\n    ```", "```py\n     **>>> output_old_path = output_path.with_suffix('.csv.old') \n          >>> try: \n          ...     output_old_path.unlink() \n          ... except FileNotFoundError as ex: \n          ...     pass # No previous file** \n\n    ```", "```py\n     **>>> output_path.rename(output_old_path)** \n\n    ```", "```py\n     **>>> output_temp_path.rename(output_path)** \n\n    ```", "```py\n    archive_path = Path(\"/path/to/archive\") \n\n```", "```py\n    import datetime \n    today = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\") \n\n```", "```py\n    working_path = archive_path / today \n    working_path.mkdir(parents=True, exists_ok=True) \n\n```", "```py\n    lat,lon,date,time \n    32.8321666666667,-79.9338333333333,2012-11-27,09:15:00 \n    31.6714833333333,-80.93325,2012-11-28,00:00:00 \n    30.7171666666667,-81.5525,2012-11-28,11:35:00 \n\n```", "```py\n            import csv \n\n    ```", "```py\n            data_path = Path('waypoints.csv') \n\n    ```", "```py\n            with data_path.open() as data_file: \n\n    ```", "```py\n            data_reader = csv.DictReader(data_file) \n\n    ```", "```py\n            for row in data_reader: \n                print(row) \n\n    ```", "```py\n    {'date': '2012-11-27', \n     'lat': '32.8321666666667', \n     'lon': '-79.9338333333333', \n     'time': '09:15:00'} \n\n```", "```py\n    lan,lon,date,time,notes \n    32.832,-79.934,2012-11-27,09:15:00,\"breezy, rainy\" \n    31.671,-80.933,2012-11-28,00:00:00,\"blowing \"\"like stink\"\"\" \n\n```", "```py\n    import datetime \n    def clean_row(source_row): \n        source_row['lat_n']= float(source_row['lat']) \n        source_row['lon_n']= float(source_row['lon']) \n        source_row['ts_date']= datetime.datetime.strptime( \n            source_row['date'],'%Y-%m-%d').date() \n        source_row['ts_time']= datetime.datetime.strptime( \n            source_row['time'],'%H:%M:%S').time() \n        source_row['timestamp']= datetime.datetime.combine( \n            source_row['ts_date'], \n            source_row['ts_time'] \n            ) \n        return source_row \n\n```", "```py\n    def cleanse(reader): \n        for row in reader: \n             yield clean_row(row) \n\n```", "```py\n    with data_path.open() as data_file: \n        data_reader = csv.DictReader(data_file) \n        clean_data_reader = cleanse(data_reader) \n        for row in clean_data_reader: \n            pprint(row) \n\n```", "```py\n    {'date': '2012-11-27', \n     'lat': '32.8321666666667', \n     'lat_n': 32.8321666666667, \n     'lon': '-79.9338333333333', \n     'lon_n': -79.9338333333333, \n     'time': '09:15:00', \n     'timestamp': datetime.datetime(2012, 11, 27, 9, 15), \n     'ts_date': datetime.date(2012, 11, 27), \n     'ts_time': datetime.time(9, 15)} \n\n```", "```py\n **[2016-05-08 11:08:18,651] INFO in ch09_r09: Sample Message One \n[2016-05-08 11:08:18,651] DEBUG in ch09_r09: Debugging \n[2016-05-08 11:08:18,652] WARNING in ch09_r09: Something might have gone wrong** \n\n```", "```py\n **>>> import re \n>>> pattern_text = (r'\\[(\\d+-\\d+-\\d+ \\d+:\\d+:\\d+,\\d+)\\]' \n...     '\\s+(\\w+)' \n...     '\\s+in' \n...     '\\s+([\\w_\\.]+):' \n...     '\\s+(.*)') \n>>> pattern = re.compile(pattern_text)** \n\n```", "```py\n **>>> sample_data = '[2016-05-08 11:08:18,651] INFO in ch09_r09: Sample Message One' \n>>> match = pattern.match(sample_data) \n>>> match.groups() \n('2016-05-08 11:08:18,651', 'INFO', 'ch09_r09', 'Sample Message One')** \n\n```", "```py\n            import re \n            pattern_text = (r'\\[(?P<date>\\d+-\\d+-\\d+ \\d+:\\d+:\\d+,\\d+)\\]' \n                '\\s+(?P<level>\\w+)' \n                '\\s+in\\s+(?P<module>[\\w_\\.]+):' \n                '\\s+(?P<message>.*)') \n            pattern = re.compile(pattern_text) \n\n    ```", "```py\n            def log_parser(source_line): \n\n    ```", "```py\n            match = pattern.match(source_line) \n\n    ```", "```py\n            if match is None: \n                raise ValueError( \n                    \"Unexpected input {0!r}\".format(source_line)) \n\n    ```", "```py\n            return match.groupdict() \n\n    ```", "```py\n            import csv \n\n    ```", "```py\n            data_path = Path('sample.log') \n\n    ```", "```py\n            with data_path.open() as data_file: \n\n    ```", "```py\n            data_reader = map(log_parser, data_file) \n\n    ```", "```py\n            for row in data_reader: \n                pprint(row) \n\n    ```", "```py\n    {'date': '2016-05-08 11:08:18,651', \n     'level': 'INFO', \n     'message': 'Sample Message One', \n     'module': 'ch09_r09'} \n    {'date': '2016-05-08 11:08:18,651', \n     'level': 'DEBUG', \n     'message': 'Debugging', \n     'module': 'ch09_r09'} \n    {'date': '2016-05-08 11:08:18,652', \n     'level': 'WARNING', \n     'message': 'Something might have gone wrong', \n     'module': 'ch09_r09'} \n\n```", "```py\n    data_reader = csv.DictReader(data_file) \n\n```", "```py\n    data_reader = map(log_parser, data_file) \n\n```", "```py\n    import csv \n    data_path = Path('sample.log') \n    target_path = data_path.with_suffix('.csv') \n    with target_path.open('w', newline='') as target_file: \n        writer = csv.DictWriter( \n            target_file, \n            ['date', 'level', 'module', 'message'] \n            ) \n        writer.writeheader() \n\n        with data_path.open() as data_file: \n            reader = map(log_parser, data_file) \n            writer.writerows(reader) \n\n```", "```py\n    date,level,module,message \n    \"2016-05-08 11:08:18,651\",INFO,ch09_r09,Sample Message One \n    \"2016-05-08 11:08:18,651\",DEBUG,ch09_r09,Debugging \n    \"2016-05-08 11:08:18,652\",WARNING,ch09_r09,Something might have gone wrong \n\n```", "```py\n    { \n      \"teams\": [ \n        { \n          \"name\": \"Abu Dhabi Ocean Racing\", \n          \"position\": [ \n            1, \n            3, \n            2, \n            2, \n            1, \n            2, \n            5, \n            3, \n            5 \n          ] \n        }, \n        ... \n      ], \n      \"legs\": [ \n        \"ALICANTE - CAPE TOWN\", \n        \"CAPE TOWN - ABU DHABI\", \n        \"ABU DHABI - SANYA\", \n        \"SANYA - AUCKLAND\", \n        \"AUCKLAND - ITAJA\\u00cd\", \n        \"ITAJA\\u00cd - NEWPORT\", \n        \"NEWPORT - LISBON\", \n        \"LISBON - LORIENT\", \n        \"LORIENT - GOTHENBURG\" \n      ] \n    } \n\n```", "```py\n     **>>> import json** \n\n    ```", "```py\n     **>>> from pathlib import Path \n          >>> source_path = Path(\"code/race_result.json\")** \n\n    ```", "```py\n     **>>> document = json.loads(source_path.read_text())** \n\n    ```", "```py\n **>>> document['teams'][0]['name'] \n'Abu Dhabi Ocean Racing'** \n\n```", "```py\n **>>> document['legs'][5] \n'ITAJA\u00cd - NEWPORT'** \n\n```", "```py\n **>>> import random \n>>> random.seed(1) \n>>> from collections import Counter \n>>> colors = ([\"red\"]*18)+([\"black\"]*18)+([\"green\"]*2) \n>>> data = Counter(random.choice(colors) for _ in range(100)) \nBecause this data is - effectively - a dict, we can serialie this very easily into JSON: \n>>> print(json.dumps(data, sort_keys=True, indent=2)) \n{ \n  \"black\": 53, \n  \"green\": 7, \n  \"red\": 40 \n}** \n\n```", "```py\n **output_path = Path(\"some_path.json\") \n    output_path.write_text( \n        json.dumps(data, sort_keys=True, indent=2))** \n\n```", "```py\n **>>> import datetime \n>>> example_date = datetime.datetime(2014, 6, 7, 8, 9, 10) \n>>> document = {'date': example_date}** \n\n```", "```py\n **>>> json.dumps(document)  \nTraceback (most recent call last): \n  ... \nTypeError: datetime.datetime(2014, 6, 7, 8, 9, 10) is not JSON serializable** \n\n```", "```py\n **>>> document_converted = {'date': example_date.isoformat()} \n>>> json.dumps(document_converted) \n'{\"date\": \"2014-06-07T08:09:10\"}'** \n\n```", "```py\n **>>> def default_date(object): \n...     if isinstance(object, datetime.datetime): \n...         return example_date.isoformat() \n...     return object** \n\n```", "```py\n **>>> document = {'date': example_date} \n>>> print( \n...     json.dumps(document, default=default_date, indent=2)) \n{ \n  \"date\": \"2014-06-07T08:09:10\" \n}** \n\n```", "```py\n **>>> def as_date(object): \n...     if 'date' in object: \n...         return datetime.datetime.strptime( \n...            object['date'], '%Y-%m-%dT%H:%M:%S') \n...     return object** \n\n```", "```py\n **>>> source= '''{\"date\": \"2014-06-07T08:09:10\"}''' \n>>> json.loads(source, object_hook=as_date) \ndatetime.datetime(2014, 6, 7, 8, 9, 10)** \n\n```", "```py\n    <team><name>Team SCA</name><position>...</position></team> \n\n```", "```py\n    <team> \n        <name>Team SCA</name> \n        <position>...</position> \n    </team> \n\n```", "```py\n    <?xml version=\"1.0\"?> \n    <results> \n        <teams> \n                <team> \n                        <name> \n                                Abu Dhabi Ocean Racing \n                        </name> \n                        <position> \n                                <leg n=\"1\"> \n                                        1 \n                                </leg> \n                                <leg n=\"2\"> \n                                        3 \n                                </leg> \n                                <leg n=\"3\"> \n                                        2 \n                                </leg> \n                                <leg n=\"4\"> \n                                        2 \n                                </leg> \n                                <leg n=\"5\"> \n                                        1 \n                                </leg> \n                                <leg n=\"6\"> \n                                        2 \n                                </leg> \n                                <leg n=\"7\"> \n                                        5 \n                                </leg> \n                                <leg n=\"8\"> \n                                        3 \n                                </leg> \n                                <leg n=\"9\"> \n                                        5 \n                                </leg> \n                        </position> \n                </team> \n                ... \n        </teams> \n        <legs> \n        ... \n        </legs> \n    </results> \n\n```", "```py\n    <p>This has <strong>mixed</strong> content.</p> \n\n```", "```py\n     **>>> import xml.etree.ElementTree as XML \n          >>> from pathlib import Path** \n\n    ```", "```py\n     **>>> source_path = Path(\"code/race_result.xml\")** \n\n    ```", "```py\n     **>>> source_text = source_path.read_text(encoding='UTF-8') \n          >>> document = XML.fromstring(source_text)** \n\n    ```", "```py\n **>>> teams = document.find('teams') \n>>> name = teams.find('team').find('name') \n>>> name.text.strip() \n'Abu Dhabi Ocean Racing'** \n\n```", "```py\n    <name>Team SCA</name> \n    <position>...</position> \n\n```", "```py\n **>>> for tag in document.findall('teams/team/name'): \n...      print(tag.text.strip()) \nAbu Dhabi Ocean Racing \nTeam Brunel \nDongfeng Race Team \nMAPFRE \nTeam Alvimedica \nTeam SCA \nTeam Vestas Wind** \n\n```", "```py\n **>>> for tag in document.findall(\"teams/team/position/leg[@n='8']\"): \n...     print(tag.text.strip()) \n3 \n5 \n7 \n4 \n6 \n1 \n2** \n\n```", "```py\n **pip install beautifulsoup4** \n\n```", "```py\n **sudo pip install beautifulsoup4** \n\n```", "```py\n **sudo pip3.5 install beautifulsoup4** \n\n```", "```py\n    <html> \n        <head>...</head> \n        <body>...</body> \n    </html> \n\n```", "```py\n    <table> \n        <thead> \n            <tr> \n                <th>...</th> \n                ... \n            </tr> \n        </thead> \n        <tbody> \n            <tr> \n                <td>...</td> \n                ... \n            </tr> \n            ... \n        </tbody> \n    </table> \n\n```", "```py\n    <tr class=\"ranking-item\"> \n        <td class=\"ranking-position\">3</td> \n        <td class=\"ranking-avatar\"> \n            <img src=\"...\"> </td> \n        <td class=\"ranking-team\">Dongfeng Race Team</td> \n        <td class=\"ranking-number\">2</td> \n        <td class=\"ranking-number\">2</td> \n        <td class=\"ranking-number\">1</td> \n        <td class=\"ranking-number\">3</td> \n        <td class=\"ranking-number\" tooltipster data-></td> \n        <td class=\"ranking-number\">1</td> \n        <td class=\"ranking-number\">4</td> \n        <td class=\"ranking-number\">7</td> \n        <td class=\"ranking-number\">4</td> \n        <td class=\"ranking-number total\">33<span class=\"asterix\">*</span></td> \n    </tr> \n\n```", "```py\n     **>>> from bs4 import BeautifulSoup \n          >>> from pathlib import Path** \n\n    ```", "```py\n     **>>> source_path = Path(\"code/Volvo Ocean Race.html\")** \n\n    ```", "```py\n     **>>> with source_path.open(encoding='utf8') as source_file: \n          ...     soup = BeautifulSoup(source_file, 'html.parser')** \n\n    ```", "```py\n    def get_legs(soup) \n        legs = [] \n        thead = soup.table.thead.tr \n        for tag in thead.find_all('th'): \n            if 'data-title' in tag.attrs: \n                leg_description_text = clean_leg(tag.attrs['data-title']) \n                legs.append(leg_description_text) \n        return legs \n\n```", "```py\n    <th tooltipster data->LEG 1</th> \n\n```", "```py\n    def clean_leg(text): \n        leg_soup = BeautifulSoup(text, 'html.parser') \n        return leg_soup.text \n\n```", "```py\n    <tr> \n        <td>Data</td> \n    </tr> \n\n```", "```py\n **>>> example = BeautifulSoup(''' \n...     <tr> \n...         <td>data</td> \n...     </tr> \n... ''', 'html.parser') \n>>> list(example.tr.children) \n['\\n', <td>data</td>, '\\n']** \n\n```", "```py\n **>>> ranking_table = soup.find('table', class_=\"ranking-list\")** \n\n```", "```py\n **>>> list(tag.name for tag in ranking_table.parents) \n['section', 'div', 'div', 'div', 'div', 'body', 'html', '[document]']** \n\n```", "```py\n    lat,lon,date,time \n    32.8321666666667,-79.9338333333333,2012-11-27,09:15:00 \n    31.6714833333333,-80.93325,2012-11-28,00:00:00 \n    30.7171666666667,-81.5525,2012-11-28,11:35:00 \n\n```", "```py\n            from collections import namedtuple \n            from pathlib import Path \n            import csv \n\n    ```", "```py\n            Waypoint = namedtuple('Waypoint', ['lat', 'lon', 'date', 'time'])\n    ```", "```py\n            waypoints_path = Path('waypoints.csv') \n\n    ```", "```py\n            with waypoints_path.open() as waypoints_file: \n\n    ```", "```py\n            raw_reader = csv.reader(waypoints_file) \n\n    ```", "```py\n            waypoints_reader = (Waypoint(*row) for row in raw_reader) \n\n    ```", "```py\n    for row in waypoints_reader: \n        print(row.lat, row.lon, row.date, row.time) \n\n```", "```py\n            with waypoints_path.open() as waypoints_file: \n                raw_reader = csv.reader(waypoints_file) \n                waypoints_iter = iter(waypoints_reader) \n                next(waypoints_iter)  # The header \n                for row in waypoints_iter: \n                    print(row) \n\n    ```", "```py\n            with waypoints_path.open() as waypoints_file: \n                raw_reader = csv.reader(waypoints_file) \n                skip_header = filter(lambda row: row[0] != 'lat', raw_reader) \n                waypoints_reader = (Waypoint(*row) for row in skip_header) \n                for row in waypoints_reader: \n                    print(row) \n\n    ```", "```py\n    Waypoint_Data = namedtuple('Waypoint_Data', ['lat', 'lon', 'timestamp']) \n\n```", "```py\n    import datetime \n    parse_date = lambda txt: datetime.datetime.strptime(txt, '%Y-%m-%d').date() \n    parse_time = lambda txt: datetime.datetime.strptime(txt, '%H:%M:%S').time() \n\n```", "```py\n    def convert_waypoint(waypoint): \n        return Waypoint_Data( \n            lat = float(waypoint.lat), \n            lon = float(waypoint.lon), \n            timestamp = datetime.datetime.combine( \n                parse_date(waypoint.date), \n                parse_time(waypoint.time) \n            )     \n        ) \n\n```", "```py\n    with waypoints_path.open() as waypoints_file: \n        raw_reader = csv.reader(waypoints_file) \n        skip_header = filter(lambda row: row[0] != 'lat', raw_reader) \n        waypoints_reader = (Waypoint(*row) for row in skip_header) \n        waypoints_data_reader = (convert_waypoint(wp) for wp in waypoints_reader) \n        for row in waypoints_data_reader: \n            print(row.lat, row.lon, row.timestamp) \n\n```", "```py\n    lat,lon,date,time \n    32.8321666666667,-79.9338333333333,2012-11-27,09:15:00 \n    31.6714833333333,-80.93325,2012-11-28,00:00:00 \n    30.7171666666667,-81.5525,2012-11-28,11:35:00 \n\n```", "```py\n            from types import SimpleNamespace \n            from pathlib import Path \n\n    ```", "```py\n            waypoints_path = Path('waypoints.csv') \n\n    ```", "```py\n            with waypoints_path.open() as waypoints_file: \n\n    ```", "```py\n            raw_reader = csv.DictReader(waypoints_file) \n\n    ```", "```py\n            ns_reader = (SimpleNamespace(**row) for row in raw_reader) \n\n    ```", "```py\n    for row in ns_reader: \n        print(row.lat, row.lon, row.date, row.time) \n\n```", "```py\n    def make_row(source): \n        return SimpleNamespace( \n            lat = float(source['lat']), \n            lon = float(source['lon']), \n            timestamp = make_timestamp(source['date'], source['time']), \n        )     \n\n```", "```py\n    ns_reader = (make_row(row) for row in raw_reader) \n\n```", "```py\n    import datetime \n    make_date = lambda txt: datetime.datetime.strptime( \n        txt, '%Y-%m-%d').date() \n    make_time = lambda txt: datetime.datetime.strptime( \n        txt, '%H:%M:%S').time() \n\n    def make_timestamp(date, time): \n        return datetime.datetime.combine( \n                make_date(date), \n                make_time(time) \n             ) \n\n```", "```py\n    [2016-05-08 11:08:18,651] INFO in ch09_r09: Sample Message One\n    [2016-05-08 11:08:18,651] DEBUG in ch09_r09: Debugging\n    [2016-05-08 11:08:18,652] WARNING in ch09_r09: Something might have gone wrong\n\n```", "```py\n    import re \n    pattern_text = (r'\\[(?P<date>\\d+-\\d+-\\d+ \\d+:\\d+:\\d+,\\d+)\\]' \n        '\\s+(?P<level>\\w+)' \n        '\\s+in\\s+(?P<module>[\\w_\\.]+):' \n        '\\s+(?P<message>.*)') \n    pattern = re.compile(pattern_text) \n\n```", "```py\n    def extract_row_iter(source_log_file): \n        for line in source_log_file: \n            match = log_pattern.match(line) \n            if match is None: \n                # Might want to write a warning \n                continue \n            yield match.groupdict() \n\n```", "```py\n            import re \n            from pathlib import Path \n            import csv \n\n    ```", "```py\n            log_pattern = re.compile( \n                r\"\\[(?P<timestamp>.*?)\\]\" \n                r\"\\s(?P<levelname>\\w+)\" \n                r\"\\sin\\s(?P<module>[\\w\\._]+):\" \n                r\"\\s(?P<message>.*)\") \n\n    ```", "```py\n            def extract_row_iter(source_log_file): \n                for line in source_log_file: \n                    match = log_pattern.match(line) \n                    if match is None: continue \n                    yield match.groupdict() \n\n    ```", "```py\n            summary_path = Path('summary_log.csv') \n\n    ```", "```py\n            with summary_path.open('w') as summary_file: \n\n    ```", "```py\n            writer = csv.DictWriter(summary_file, \n                ['timestamp', 'levelname', 'module', 'message']) \n            writer.writeheader() \n\n    ```", "```py\n            source_log_dir = Path('.') \n\n    ```", "```py\n            for source_log_path in source_log_dir.glob('*.log'): \n\n    ```", "```py\n            with source_log_path.open() as source_log_file: \n\n    ```", "```py\n            writer.writerows(extract_row_iter(source_log_file) ) \n\n    ```", "```py\n            print('Converted', source_log_path, 'to', summary_path) \n\n    ```", "```py\n    def counting_extract_row_iter(counts, source_log_file): \n        for line in source_log_file: \n            match = log_pattern.match(line) \n            if match is None: \n                counts['non-match'] += 1 \n                continue \n            counts['valid'] += 1 \n            yield match.groupdict() \n\n```", "```py\n    summary_path = Path('summary_log.csv') \n    with summary_path.open('w') as summary_file: \n\n        writer = csv.DictWriter(summary_file, \n            ['timestamp', 'levelname', 'module', 'message']) \n        writer.writeheader() \n\n        source_log_dir = Path('.') \n        for source_log_path in source_log_dir.glob('*.log'): \n            counts = Counter() \n            with source_log_path.open() as source_log_file: \n                writer.writerows( \n                    counting_extract_row_iter(counts, source_log_file) \n                    ) \n\n            print('Converted', source_log_path, 'to', summary_path) \n            print(counts) \n\n```", "```py\n **Converted 20160612.log to summary_log.csv \nCounter({'valid': 86400}) \nConverted 20160613.log to summary_log.csv \nCounter({'valid': 86399, 'non-match': 1)** \n\n```"]