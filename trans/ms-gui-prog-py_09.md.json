["```py\nfrom PyQt5 import QtMultimedia as qtmm\n```", "```py\nimport resources\n```", "```py\nclass SoundButton(qtw.QPushButton):\n\n    def __init__(self, wav_file, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.wav_file = wav_file\n        self.player = qtmm.QSoundEffect()\n        self.player.setSource(qtc.QUrl.fromLocalFile(wav_file))\n        self.clicked.connect(self.player.play)\n```", "```py\n        dialpad = qtw.QWidget()\n        self.setCentralWidget(dialpad)\n        dialpad.setLayout(qtw.QGridLayout())\n\n        for i, symbol in enumerate('123456789*0#'):\n            button = SoundButton(f':/dtmf/{symbol}.wav', symbol)\n            row = i // 3\n            column = i % 3\n            dialpad.layout().addWidget(button, row, column)\n```", "```py\n        rows = 3\n        columns = 3\n        soundboard = qtw.QWidget()\n        soundboard.setLayout(qtw.QGridLayout())\n        self.setCentralWidget(soundboard)\n        for c in range(columns):\n            for r in range(rows):\n                sw = SoundWidget()\n                soundboard.layout().addWidget(sw, c, r)\n```", "```py\nclass SoundWidget(qtw.QWidget):\n\n    def __init__(self):\n        super().__init__()\n        self.setLayout(qtw.QGridLayout())\n        self.label = qtw.QLabel(\"No file loaded\")\n        self.layout().addWidget(self.label, 0, 0, 1, 2)\n```", "```py\nclass PlayButton(qtw.QPushButton):\n    play_stylesheet = 'background-color: lightgreen; color: black;'\n    stop_stylesheet = 'background-color: darkred; color: white;'\n\n    def __init__(self):\n        super().__init__('Play')\n        self.setFont(qtg.QFont('Sans', 32, qtg.QFont.Bold))\n        self.setSizePolicy(\n            qtw.QSizePolicy.Expanding,\n            qtw.QSizePolicy.Expanding\n        )\n        self.setStyleSheet(self.play_stylesheet)\n```", "```py\n        self.play_button = PlayButton()\n        self.layout().addWidget(self.play_button, 3, 0, 1, 2)\n```", "```py\n        self.player = qtmm.QMediaPlayer()\n```", "```py\n        self.play_button.clicked.connect(self.on_playbutton)\n```", "```py\n    def on_playbutton(self):\n        if self.player.state() == qtmm.QMediaPlayer.PlayingState:\n            self.player.stop()\n        else:\n            self.player.play()\n```", "```py\n        self.player.stateChanged.connect(self.play_button.on_state_changed)\n```", "```py\n    def on_state_changed(self, state):\n        if state == qtmm.QMediaPlayer.PlayingState:\n            self.setStyleSheet(self.stop_stylesheet)\n            self.setText('Stop')\n        else:\n            self.setStyleSheet(self.play_stylesheet)\n            self.setText('Play')\n```", "```py\n        self.file_button = qtw.QPushButton(\n            'Load File', clicked=self.get_file)\n        self.layout().addWidget(self.file_button, 4, 0)\n```", "```py\n    def get_file(self):\n        fn, _ = qtw.QFileDialog.getOpenFileUrl(\n            self,\n            \"Select File\",\n            qtc.QDir.homePath(),\n            \"Audio files (*.wav *.flac *.mp3 *.ogg *.aiff);; All files (*)\"\n        )\n        if fn:\n            self.set_file(fn)\n```", "```py\n    def set_file(self, url):\n        content = qtmm.QMediaContent(url)\n        self.player.setMedia(content)\n        self.label.setText(url.fileName())\n```", "```py\n        self.position = qtw.QSlider(\n            minimum=0, orientation=qtc.Qt.Horizontal)\n        self.layout().addWidget(self.position, 1, 0, 1, 2)\n```", "```py\n        self.player.positionChanged.connect(self.position.setSliderPosition)\n        self.player.durationChanged.connect(self.position.setMaximum)\n        self.position.sliderMoved.connect(self.player.setPosition)\n```", "```py\n    def set_file(self, url):\n        self.label.setText(url.fileName())\n        content = qtmm.QMediaContent(url)\n        #self.player.setMedia(content)\n        self.playlist = qtmm.QMediaPlaylist()\n        self.playlist.addMedia(content)\n        self.playlist.setCurrentIndex(1)\n        self.player.setPlaylist(self.playlist)\n```", "```py\n        self.loop_cb = qtw.QCheckBox(\n            'Loop', stateChanged=self.on_loop_cb)\n        self.layout().addWidget(self.loop_cb, 2, 0)\n```", "```py\n    def on_loop_cb(self, state):\n        if state == qtc.Qt.Checked:\n            self.playlist.setPlaybackMode(\n                qtmm.QMediaPlaylist.CurrentItemInLoop)\n        else:\n            self.playlist.setPlaybackMode(\n                qtmm.QMediaPlaylist.CurrentItemOnce)\n```", "```py\n        self.loop_cb.setChecked(False)\n```", "```py\n        self.volume = qtw.QSlider(\n            minimum=0,\n            maximum=100,\n            sliderPosition=75,\n            orientation=qtc.Qt.Horizontal,\n            sliderMoved=self.player.setVolume\n        )\n        self.layout().addWidget(self.volume, 2, 1)\n```", "```py\n        self.recorder = qtmm.QAudioRecorder()\n```", "```py\nclass RecordButton(qtw.QPushButton):\n\n    record_stylesheet = 'background-color: black; color: white;'\n    stop_stylesheet = 'background-color: darkred; color: white;'\n\n    def __init__(self):\n        super().__init__('Record')\n\n    def on_state_changed(self, state):\n        if state == qtmm.QAudioRecorder.RecordingState:\n            self.setStyleSheet(self.stop_stylesheet)\n            self.setText('Stop')\n        else:\n            self.setStyleSheet(self.record_stylesheet)\n            self.setText('Record')\n```", "```py\n        self.record_button = RecordButton()\n        self.recorder.stateChanged.connect(\n            self.record_button.on_state_changed)\n        self.layout().addWidget(self.record_button, 4, 1)\n        self.record_button.clicked.connect(self.on_recordbutton)\n```", "```py\n    def on_recordbutton(self):\n        if self.recorder.state() == qtmm.QMediaRecorder.RecordingState:\n            self.recorder.stop()\n            url = self.recorder.actualLocation()\n            self.set_file(url)\n```", "```py\n        else:\n            self.recorder.record()\n```", "```py\n    def set_file(self, url):\n        if url.scheme() == '':\n            url.setScheme('file')\n        content = qtmm.QMediaContent(url)\n        #...\n```", "```py\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtMultimedia import *\n\napp = QCoreApplication([])\nr = QAudioRecorder()\nprint('Inputs: ', r.audioInputs())\nprint('Codecs: ', r.supportedAudioCodecs())\nprint('Sample Rates: ', r.supportedAudioSampleRates())\nprint('Containers: ', r.supportedContainers())\n```", "```py\nInputs:  ['Microhpone (High Defnition Aud']\nCodecs:  ['audio/pcm']\nSample Rates:  ([8000, 11025, 16000, 22050, 32000,\n                 44100, 48000, 88200, 96000, 192000], False)\nContainers:  ['audio/x-wav', 'audio/x-raw']\n```", "```py\n        self.recorder.setAudioInput('default:')\n```", "```py\n        sample_path = qtc.QDir.home().filePath('sample1')\n        self.recorder.setOutputLocation(\n            qtc.QUrl.fromLocalFile(sample_path))\n```", "```py\n        self.recorder.setContainerFormat('audio/x-wav')\n```", "```py\n        settings = qtmm.QAudioEncoderSettings()\n        settings.setCodec('audio/pcm')\n        settings.setSampleRate(44100)\n        settings.setQuality(qtmm.QMultimedia.HighQuality)\n        self.recorder.setEncodingSettings(settings)\n```", "```py\n        base_widget = qtw.QWidget()\n        base_widget.setLayout(qtw.QHBoxLayout())\n        notebook = qtw.QTabWidget()\n        base_widget.layout().addWidget(notebook)\n        self.file_list = qtw.QListWidget()\n        base_widget.layout().addWidget(self.file_list)\n        self.setCentralWidget(base_widget)\n```", "```py\n        toolbar = self.addToolBar(\"Transport\")\n        record_act = toolbar.addAction('Rec')\n        stop_act = toolbar.addAction('Stop')\n        play_act = toolbar.addAction('Play')\n        pause_act = toolbar.addAction('Pause')\n```", "```py\n        self.video_dir = qtc.QDir.home()\n        if not self.video_dir.cd('captains_log'):\n            qtc.QDir.home().mkdir('captains_log')\n            self.video_dir.cd('captains_log')\n```", "```py\n    def refresh_video_list(self):\n        self.file_list.clear()\n        video_files = self.video_dir.entryList(\n            [\"*.ogg\", \"*.avi\", \"*.mov\", \"*.mp4\", \"*.mkv\"],\n            qtc.QDir.Files | qtc.QDir.Readable\n        )\n        for fn in sorted(video_files):\n            self.file_list.addItem(fn)\n```", "```py\n        self.refresh_video_list()\n```", "```py\nfrom PyQt5 import QtMultimediaWidgets as qtmmw\n```", "```py\n        self.player = qtmm.QMediaPlayer()\n        self.video_widget = qtmmw.QVideoWidget()\n        self.player.setVideoOutput(self.video_widget)\n```", "```py\n        notebook.addTab(self.video_widget, \"Play\")\n        play_act.triggered.connect(self.player.play)\n        pause_act.triggered.connect(self.player.pause)\n        stop_act.triggered.connect(self.player.stop)\n        play_act.triggered.connect(\n            lambda: notebook.setCurrentWidget(self.video_widget))\n```", "```py\n    def on_file_selected(self, item):\n        fn = item.text()\n        url = qtc.QUrl.fromLocalFile(self.video_dir.filePath(fn))\n        content = qtmm.QMediaContent(url)\n        self.player.setMedia(content)\n        self.player.play()\n```", "```py\n        self.file_list.itemDoubleClicked.connect(\n            self.on_file_selected)\n        self.file_list.itemDoubleClicked.connect(\n            lambda: notebook.setCurrentWidget(self.video_widget))\n```", "```py\n    def camera_check(self):\n        cameras = qtmm.QCameraInfo.availableCameras()\n        if not cameras:\n            qtw.QMessageBox.critical(\n                self,\n                'No cameras',\n                'No cameras were found, recording disabled.'\n            )\n        else:\n            return qtmm.QCamera(cameras[0])\n```", "```py\n        self.camera = self.camera_check()\n        if not self.camera:\n            self.show()\n            return\n```", "```py\n        self.camera.setCaptureMode(qtmm.QCamera.CaptureVideo)\n```", "```py\n        self.cvf = qtmmw.QCameraViewfinder()\n        self.camera.setViewfinder(self.cvf)\n        notebook.addTab(self.cvf, 'Record')\n```", "```py\n        self.camera.start()\n```", "```py\n        self.recorder = qtmm.QMediaRecorder(self.camera)\n```", "```py\n        settings = self.recorder.videoSettings()\n        settings.setResolution(640, 480)\n        settings.setFrameRate(24.0)\n        settings.setQuality(qtmm.QMultimedia.VeryHighQuality)\n        self.recorder.setVideoSettings(settings)\n```", "```py\nCameraBin warning: \"not negotiated\"\nCameraBin error: \"Internal data stream error.\"\n```", "```py\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtMultimedia import *\n\napp = QCoreApplication([])\n\nfor camera_info in QCameraInfo.availableCameras():\n    print('Camera: ', camera_info.deviceName())\n    camera = QCamera(camera_info)\n    r = QMediaRecorder(camera)\n    print('\\tAudio Codecs: ', r.supportedAudioCodecs())\n    print('\\tVideo Codecs: ', r.supportedVideoCodecs())\n    print('\\tAudio Sample Rates: ', r.supportedAudioSampleRates())\n    print('\\tFrame Rates: ', r.supportedFrameRates())\n    print('\\tResolutions: ', r.supportedResolutions())\n    print('\\tContainers: ', r.supportedContainers())\n    print('\\n\\n')\n```", "```py\n    def record(self):\n        # create a filename\n        datestamp = qtc.QDateTime.currentDateTime().toString()\n        self.mediafile = qtc.QUrl.fromLocalFile(\n            self.video_dir.filePath('log - ' + datestamp)\n        )\n        self.recorder.setOutputLocation(self.mediafile)\n        # start recording\n        self.recorder.record()\n```", "```py\n        record_act.triggered.connect(self.record)\n        record_act.triggered.connect(\n            lambda: notebook.setCurrentWidget(self.cvf)\n        )\n        pause_act.triggered.connect(self.recorder.pause)\n        stop_act.triggered.connect(self.recorder.stop)\n        stop_act.triggered.connect(self.refresh_video_list)\n```", "```py\n   recorder = qtmm.QAudioRecorder()\n   recorder.setCodec('audio/mpeg')\n   recorder.record()\n```"]