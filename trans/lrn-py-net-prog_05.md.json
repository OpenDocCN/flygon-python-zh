["```py\n**sudo apt-get install python3**\n**sudo apt-get install python3-setuptools**\n**sudo easy_install3 paramiko**\n**sudo easy_install3 python3-ldap**\n**sudo easy_install3 pysnmp**\n**sudo easy_install3 pysmb**\n\n```", "```py\nssh_client = paramiko.SSHClient()\n```", "```py\nssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n```", "```py\nssh_client.load_system_host_keys()\n```", "```py\n**ssh-copy-id -i ~/.ssh/id_rsa.pub faruq@debian6box.localdomain.loc**\n\n```", "```py\nssh_client.connect(hostname, port, username, password)\nstdin, stdout, stderr = ssh_client.exec_command(cmd)\n```", "```py\n#!/usr/bin/env python3\n\nimport getpass\nimport paramiko\n\nHOSTNAME = 'localhost'\nPORT = 22\n\ndef run_ssh_cmd(username, password, cmd, hostname=HOSTNAME, port=PORT):\n    ssh_client = paramiko.SSHClient()\n    ssh_client.set_missing_host_key_policy(\\\n        paramiko.AutoAddPolicy())\n    ssh_client.load_system_host_keys()\n    ssh_client.connect(hostname, port, username, password)\n    stdin, stdout, stderr = ssh_client.exec_command(cmd)\n    print(stdout.read())\n\nif __name__ == '__main__':\n    username = input(\"Enter username: \")\n    password = getpass.getpass(prompt=\"Enter password: \")\n    cmd = 'ls -l /dev'\n    run_ssh_cmd(username, password, cmd)\n```", "```py\n**root@debian6box:~# tcpdump -i lo port 22**\n**tcpdump: verbose output suppressed, use -v or -vv for full protocol decode**\n**listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes**\n**12:18:19.761292 IP localhost.50768 > localhost.ssh: Flags [S], seq 3958510356, win 32792, options [mss 16396,sackOK,TS val 57162360 ecr 0,nop,wscale 6], length 0**\n**12:18:19.761335 IP localhost.ssh > localhost.50768: Flags [S.], seq 1834733028, ack 3958510357, win 32768, options [mss 16396,sackOK,TS val 57162360 ecr 57162360,nop,wscale 6], length 0**\n**12:18:19.761376 IP localhost.50768 > localhost.ssh: Flags [.], ack 1, win 513, options [nop,nop,TS val 57162360 ecr 57162360], length 0**\n**12:18:19.769430 IP localhost.50768 > localhost.ssh: Flags [P.], seq 1:25, ack 1, win 513, options [nop,nop,TS val 57162362 ecr 57162360], length 24**\n**12:18:19.769467 IP localhost.ssh > localhost.50768: Flags [.], ack 25, win 512, options [nop,nop,TS val 57162362 ecr 57162362], length 0**\n\n```", "```py\nssh_transport = paramiko.Transport(hostname, port)\nssh_transport.connect(username='username', password='password')\n```", "```py\n sftp_session = paramiko.SFTPClient.from_transport(ssh_transport)\n sftp_session.get(source_file, target_file)\n```", "```py\n#!/usr/bin/env python3\n\nimport getpass\nimport paramiko\n\nHOSTNAME = 'localhost'\nPORT = 22\nFILE_PATH = '/tmp/test.txt'\n\ndef sftp_download(username, password, hostname=HOSTNAME, port=PORT):\n    ssh_transport = paramiko.Transport(hostname, port)\n    ssh_transport.connect(username=username, password=password)\n    sftp_session = paramiko.SFTPClient.from_transport(ssh_transport)\n    file_path = input(\"Enter filepath: \") or FILE_PATH\n    target_file = file_path.split('/')[-1]\n    sftp_session.get(file_path, target_file)\n    print(\"Downloaded file from: %s\" %file_path)\n    sftp_session.close()\n\nif __name__ == '__main__':\n    hostname = input(\"Enter the target hostname: \")\n    port = input(\"Enter the target port: \")\n    username = input(\"Enter yur username: \")\n    password = getpass.getpass(prompt=\"Enter your password: \")\n    sftp_download(username, password, hostname, int(port))\n```", "```py\nftp_client = ftplib.FTP(path, username, email)   \n```", "```py\nfile_handler = open(DOWNLOAD_FILE_NAME, 'wb')\n```", "```py\nftp_client.retrbinary('RETR remote_file_name', file_handler.write)\n```", "```py\n#!/usr/bin/env python\nimport ftplib\n\nFTP_SERVER_URL = 'ftp.kernel.org'\nDOWNLOAD_DIR_PATH = '/pub/software/network/tftp'\nDOWNLOAD_FILE_NAME = 'tftp-hpa-0.11.tar.gz'\n\ndef ftp_file_download(path, username, email):\n    # open ftp connection\n    ftp_client = ftplib.FTP(path, username, email)\n    # list the files in the download directory\n    ftp_client.cwd(DOWNLOAD_DIR_PATH)\n    print(\"File list at %s:\" %path)\n    files = ftp_client.dir()\n    print(files)\n    # downlaod a file\n    file_handler = open(DOWNLOAD_FILE_NAME, 'wb')\n    #ftp_cmd = 'RETR %s ' %DOWNLOAD_FILE_NAME\n    ftp_client.retrbinary('RETR tftp-hpa-0.11.tar.gz', file_handler.write)\n    file_handler.close()\n    ftp_client.quit()\n\nif __name__ == '__main__':\n    ftp_file_download(path=FTP_SERVER_URL,  username='anonymous', email='nobody@nourl.com')\n```", "```py\n**# snmpwalk -v2c -c public localhost**\n**iso.3.6.1.2.1.1.1.0 = STRING: \"Linux debian6box 2.6.32-5-686 #1 SMP Tue May 13 16:33:32 UTC 2014 i686\"**\n**iso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10**\n**iso.3.6.1.2.1.1.3.0 = Timeticks: (88855240) 10 days, 6:49:12.40**\n**iso.3.6.1.2.1.1.4.0 = STRING: \"Me <me@example.org>\"**\n**iso.3.6.1.2.1.1.5.0 = STRING: \"debian6box\"**\n**iso.3.6.1.2.1.1.6.0 = STRING: \"Sitting on the Dock of the Bay\"**\n\n```", "```py\n**$ pip install pysnmp**\n\n```", "```py\nfrom pysnmp.entity.rfc3413.oneliner import cmdgen\ncmd_generator = cmdgen.CommandGenerator()\n```", "```py\nSNMP_HOST = 'localhost'\nSNMP_PORT = 161\nSNMP_COMMUNITY = 'public'\n```", "```py\n    error_notify, error_status, error_index, var_binds = cmd_generator.getCmd(\n        cmdgen.CommunityData(SNMP_COMMUNITY),\n        cmdgen.UdpTransportTarget((SNMP_HOST, SNMP_PORT)),\n        cmdgen.MibVariable('SNMPv2-MIB', 'sysDescr', 0),\n        lookupNames=True, lookupValues=True\n    )\n```", "```py\nfrom pysnmp.entity.rfc3413.oneliner import cmdgen\n\nSNMP_HOST = 'localhost'\nSNMP_PORT = 161\nSNMP_COMMUNITY = 'public'\n\nif __name__ == '__manin__':\n    cmd_generator = cmdgen.CommandGenerator()\n\n    error_notify, error_status, error_index, var_binds = cmd_generator.getCmd(\n        cmdgen.CommunityData(SNMP_COMMUNITY),\n        cmdgen.UdpTransportTarget((SNMP_HOST, SNMP_PORT)),\n        cmdgen.MibVariable('SNMPv2-MIB', 'sysDescr', 0),\n        lookupNames=True, lookupValues=True\n    )\n\n    # Check for errors and print out results\n    if error_notify:\n        print(error_notify)\n    elif error_status:\n        print(error_status)\n    else:\n        for name, val in var_binds:\n            print('%s = %s' % (name.prettyPrint(), val.prettyPrint()))\n```", "```py\n**$  python 5_4_snmp_read.py**\n**SNMPv2-MIB::sysDescr.\"0\" = Linux debian6box 2.6.32-5-686 #1 SMP Tue May 13 16:33:32 UTC 2014 i686**\n\n```", "```py\n**# ldapsearch  -x -b \"dc=localdomain,dc=loc\" -h 10.0.2.15 -p 389**\n\n**# extended LDIF**\n**#**\n**# LDAPv3**\n**# base <dc=localdomain,dc=loc> with scope subtree**\n**# filter: (objectclass=*)**\n**# requesting: ALL**\n**#**\n\n**# localdomain.loc**\n**dn: dc=localdomain,dc=loc**\n**objectClass: top**\n**objectClass: dcObject**\n**objectClass: organization**\n**o: localdomain.loc**\n**dc: localdomain**\n\n**# admin, localdomain.loc**\n**dn: cn=admin,dc=localdomain,dc=loc**\n**objectClass: simpleSecurityObject**\n**objectClass: organizationalRole**\n**cn: admin**\n**description: LDAP administrator**\n**# groups, localdomain.loc**\n**dn: ou=groups,dc=localdomain,dc=loc**\n**ou: groups**\n**objectClass: organizationalUnit**\n**objectClass: top**\n\n**# users, localdomain.loc**\n**dn: ou=users,dc=localdomain,dc=loc**\n**ou: users**\n**objectClass: organizationalUnit**\n**objectClass: top**\n\n**# admin, groups, localdomain.loc**\n**dn: cn=admin,ou=groups,dc=localdomain,dc=loc**\n**cn: admin**\n**gidNumber: 501**\n**objectClass: posixGroup**\n\n**# Faruque Sarker, users, localdomain.loc**\n**dn: cn=Faruque Sarker,ou=users,dc=localdomain,dc=loc**\n**givenName: Faruque**\n**sn: Sarker**\n**cn: Faruque Sarker**\n**uid: fsarker**\n**uidNumber: 1001**\n**gidNumber: 501**\n**homeDirectory: /home/users/fsarker**\n**loginShell: /bin/sh**\n**objectClass: inetOrgPerson**\n**objectClass: posixAccount**\n\n**# search result**\n**search: 2**\n**result: 0 Success**\n\n**# numResponses: 7**\n**# numEntries: 6**\n\n```", "```py\n**$ pip install python-ldap**\n\n```", "```py\nimport ldap\n   ldap_client = ldap.initialize(\"ldap://10.0.2.15:389/\")\n```", "```py\n  ldap_client.simple_bind(\"dc=localdomain,dc=loc\")\n```", "```py\nldap_client.search_s( base_dn, ldap.SCOPE_SUBTREE, filter, attrs )\n```", "```py\nimport ldap\n\n# Open a connection\nldap_client = ldap.initialize(\"ldap://10.0.2.15:389/\")\n\n# Bind/authenticate with a user with apropriate rights to add objects\n\nldap_client.simple_bind(\"dc=localdomain,dc=loc\")\n\nbase_dn = 'ou=users,dc=localdomain,dc=loc'\nfilter = '(objectclass=person)'\nattrs = ['sn']\n\nresult = ldap_client.search_s( base_dn, ldap.SCOPE_SUBTREE, filter, attrs )\nprint(result)\n```", "```py\n#!/usr/bin/env python\nimport ldap\nimport ldap.modlist as modlist\n\nLDAP_URI = \"ldap://10.0.2.15:389/\"\nBIND_TO = \"dc=localdomain,dc=loc\"\nBASE_DN = 'ou=users,dc=localdomain,dc=loc'\nSEARCH_FILTER = '(objectclass=person)'\nSEARCH_FILTER = ['sn']\n\nif __name__ == '__main__':\n    # Open a connection\n    l = ldap.initialize(LDAP_URI)\n    # bind to the server\n    l.simple_bind(BIND_TO)\n    result = l.search_s( BASE_DN, ldap.SCOPE_SUBTREE, SEARCH_FILTER, SEARCH_FILTER )\n    print(result)\n```", "```py\n**$ python 5_5_ldap_read_record.py**\n**[('cn=Faruque Sarker,ou=users,dc=localdomain,dc=loc', {'sn': ['Sarker']})]**\n\n```", "```py\n**$smbclient -L 10.0.2.2 -U WINDOWS_USERNAME%PASSWPRD  -W WORKGROUP**\n**Domain=[FARUQUESARKER] OS=[Windows 8 9200] Server=[Windows 8 6.2]**\n\n **Sharename       Type      Comment**\n **---------       ----      -------**\n **ADMIN$          Disk      Remote Admin**\n **C$              Disk      Default share**\n **IPC$            IPC       Remote IPC**\n **Share           Disk**\n\n```", "```py\n**$ pip install pysmb**\n\n```", "```py\nfrom smb.SMBConnection import SMBConnection\nsmb_connection = SMBConnection(username, password, client_machine_name, server_name, use_ntlm_v2 = True, domain='WORKGROUP', is_direct_tcp=True)\n```", "```py\nassert smb_connection.connect(server_ip, 445)\n```", "```py\nshares =  smb_connection.listShares()\nfor share in shares:\n    print share.name\n```", "```py\nimport tempfile\nfiles = smb_connection.listPath(share.name, '/')\n\nfor file in files:\n    print file.filename\n\nfile_obj = tempfile.NamedTemporaryFile()\nfile_attributes, filesize = smb_connection.retrieveFile('Share', '/test.rtf', file_obj)\nfile_obj.close()\n```", "```py\n#!/usr/bin/env python\nimport tempfile\nfrom smb.SMBConnection import SMBConnection\n\nSAMBA_USER_ID = 'FaruqueSarker'\nPASSWORD = 'PASSWORD'\nCLIENT_MACHINE_NAME = 'debian6box'\nSAMBA_SERVER_NAME = 'FARUQUESARKER'\nSERVER_IP = '10.0.2.2'\nSERVER_PORT = 445\nSERVER_SHARE_NAME = 'Share'\nSHARED_FILE_PATH = '/test.rtf'\n\nif __name__ == '__main__':\n\n    smb_connection = SMBConnection(SAMBA_USER_ID, PASSWORD, CLIENT_MACHINE_NAME, SAMBA_SERVER_NAME, use_ntlm_v2 = True, domain='WORKGROUP', is_direct_tcp=True)\n    assert smb_connection.smb_connectionect(SERVER_IP, SERVER_PORT = 445)\n    shares =  smb_connection.listShares()\n\n    for share in shares:\n        print share.name\n\n    files = smb_connection.listPath(share.name, '/')\n    for file in files:\n        print file.filename\n\n    file_obj = tempfile.NamedTemporaryFile()\n    file_attributes, filesize = smb_connection.retrieveFile(SERVER_SHARE_NAME, SHARED_FILE_PATH, file_obj)\n\n    # Retrieved file contents are inside file_obj\n    file_obj.close()\n```"]