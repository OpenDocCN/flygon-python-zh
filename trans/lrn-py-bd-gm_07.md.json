["```py\narr = [1,2,3,4,5]\nfor i in arr:\n    print(arr[0])\n```", "```py\n      n = int(input(\"Enter any number\"))\n      for i in range(1,100):\n          if i == n:\n              print(i)\n              break\n```", "```py\nfor i in range(1, 10):\n    for j in range(i):\n        print(i, end='')\n    print()\n\n#output\n1\n22\n333\n4444\n55555\n666666\n7777777\n88888888\n999999999\n```", "```py\nfor i in range(1, 10):\n        print (str(i) * i)\n\n#output\n1\n22\n333\n4444\n55555\n666666\n7777777\n88888888\n999999999\n```", "```py\nnew_list = []\nfor i in range(10):\n    new_list.append(i)\nprint(new_list)\n\n#output\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\nnew_list = [i for i in range(10)]\nprint(new_list)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\neven_power  = [i * i          for i in range(5)         if i % 2 == 0]\nprint(even_power)\n[0, 4, 16]\n```", "```py\nnumbers = [1,2,3,4,5]\nalphabets = ['a','b','c','d','e']\n\nnew_list = [[n,a] for n in numbers for a in alphabets]\nprint(new_list)\n\n[[1, 'a'], [1, 'b'], [1, 'c'], [1, 'd'], [1, 'e'], [2, 'a'], [2, 'b'], [2, 'c'], [2, 'd'], [2, 'e'], [3, 'a'], [3, 'b'], [3, 'c'], [3, 'd'], [3, 'e'], [4, 'a'], [4, 'b'], [4, 'c'], [4, 'd'], [4, 'e'], [5, 'a'], [5, 'b'], [5, 'c'], [5, 'd'], [5, 'e']]\n```", "```py\ndict_comp = {x:chr(65+x) for x in range(1, 6)}\nprint(dict_comp)\n{1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F'}\n```", "```py\nset_comp = {x ** 2 for x in range(5) if x % 2 == 0}\ntype(set_comp)\nprint(set_comp)\n\n#output\n<class 'set'>\n{0, 16, 4}\n```", "```py\nInput: a = [2,3,4,5,6,7] and b = [0,3,2,1,3,4]\nOutput: [0, 3, 2, 1, 3, 4]\n```", "```py\na = [2,3,4,5,6,7] \nb = [0,3,2,1,3,4]\nresult = []\nlength = len(a)\nfor i in range(length):\n    result.append(min(a[i],b[i]))\nprint(result)\n#output\n[0, 3, 2, 1, 3, 4]\n```", "```py\n>>> numbers = [1,2,3]\n>>> letters = ['a','b','c']\n>>> list(zip(numbers,letters))\n[(1, 'a'), (2, 'b'), (3, 'c')]\n```", "```py\n>>> list(zip(a,b))\n[(2, 0), (3, 3), (4, 2), (5, 1), (6, 3), (7, 4)]\n```", "```py\nmap(some_function, some_iterables)\n```", "```py\n>>> map(lambda x: x*2, (1,2,3,4))\n<map object at 0x057E9AF0>\n```", "```py\n>>> list(map(lambda x: x*2, (1,2,3,4)))\n[2, 4, 6, 8]\n```", "```py\n>>> a = [2,3,4,5,6,7] \n>>> b = [0,3,2,1,3,4]\n>>> list(map(lambda pair: min(pair), zip(a,b)))\n[0, 3, 2, 1, 3, 4]\n```", "```py\nFor Loop: 4.56s\nList comprehension: 2.345s\nMap: 2..11s\n```", "```py\ndef fun1(info):\n    print(info)\n\nfun1(\"Good Morning\")\nfun2 = fun1\nfun2(\"Good Morning\")\n```", "```py\ndef decorate_it(func):\n    def inner():\n        print(\"Decorated\")\n        func()\n    return inner\n\ndef non_Decorated():\n    print(\"Not-Decorated\")\n```", "```py\n>>> non_Decorated()\nNot-Decorated\n\n#now try to decorate the above function\n>>> decorate = decorate_it(non_Decorated)\n>>> decorate()\nDecorated\nNot-Decorated\n```", "```py\n@decorate_it\ndef non_Decorated():\n    print(\"Not-Decorated\")\n```", "```py\ndef non_Decorated():\n    print(\"Not-Decorated\")\n\ndecorate = decorate_it(non_Decorated)\n```", "```py\ndef multiply(a,b):\n    print(a*b)\n\n>>> multiply(2,5)\n10\n>>> multiply('c', 'f')\nTypeError: can't multiply sequence by non-int of type 'str'\n```", "```py\ndef smart_multiply(func):\n    def inner(a,b):\n        if (a.isdigit() and b.isdigit()):\n            a = int(a)\n            b = int(b)\n            print(\"multiplying\",a,\" with \",b)\n            return func(a,b)\n        else:\n            print(\"Whoops!! Not valid multiplication\")\n            return\n    return inner\n\n@smart_multiply\ndef multiply(a,b):\n    print(a*b)\na = input(\"value of a: \")\nb = input(\"value of b: \")\nmultiply(a,b)\n```", "```py\nvalue of a: 4\nvalue of b: 5\nmultiplying 4 with 5\n20\n```", "```py\nvalue of a: t\nvalue of b: y\nWhoops!! Not valid multiplication\n```", "```py\ndef universal(func):\n    def inner(*args, **kwargs):\n        print(\"It works for any function\")\n        return func(*args,**kwargs)\n    return inner\n```", "```py\nclass Speed:\n    def __init__(self, speed = 0):\n        self.speed = speed\n\n    def change_to_mile(self):\n        return (self.speed*0.6213,\"miles\")\n```", "```py\n>>> car = Speed()\n>>> car.speed = 45\n>>> car.speed\n45\n>>> car.change_to_mile()\n(27.958499999999997, ' miles')\n```", "```py\n>>> car.__dict__ {'speed': 45} \n```", "```py\nclass Speed:\n    def __init__(self, speed = 0):\n        self.set_speed(speed)\n\n    def change_to_mile(self):\n        return (self.get_speed*0.6213,\" miles\")\n\n#new updates are made as follows using getter and setter\n    def get_speed(self):\n        return self._speed\n    def set_speed(self, km):\n        if km > 50:\n            raise ValueError(\"You are liable to speeding ticket\")\n        self._speed = km\n```", "```py\n>>> car = Speed(30)\n>>> car.get_speed()\n30\n>>> car.set_speed(38)\n>>> car.get_speed()\n38\n>>> car.set_speed(70)\nValueError: You are liable to speeding ticket\n```", "```py\nclass Speed:\n    def __init__(self, speed = 0):\n        self.speed = speed\n\n    def change_to_mile(self):\n        return (self.speed*0.6213,\" miles\")\n\n    @property\n    def speed(self):\n        return self._speed\n\n    @speed.setter\n    def speed(self,km):\n        if km > 50:\n            raise ValueError(\"You are liable to speeding ticket\")\n        self._speed = km\n```", "```py\n>>> car = Speed(40)\n>>> car.speed\n40\n```", "```py\nclass Speed:\n    def __init__(self, speed = 0):\n        self.speed = speed\n\n    def change_to_mile(self):\n        return (self.speed*0.6213,\" miles\")\n\n    def get_speed(self):\n        return self._speed\n    def set_speed(self, km):\n        if km > 50:\n            raise ValueError(\"You are liable to speeding ticket\")\n        self._speed = km\n\n    #using property\n    speed = property(get_speed,set_speed)\n```", "```py\n      def collided(self):\n          return any([body.coor == self.head.coor\n                          for body in self.body_list[:-1]])\n```", "```py\n      @property\n      def score(self):\n          return 'Score : {0}'.format(self.score)\n```"]