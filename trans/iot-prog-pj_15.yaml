- en: Connecting Sensory Inputs from the Robot Car to the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将机器人汽车的感应输入连接到网络
- en: In order to make our robot car, T.A.R.A.S, a true IoT **thing**, we have to
    connect T.A.R.A.S to the internet. In this chapter, we will start the transformation
    from desktop robot to internet robot by connecting the distance sensor from T.A.R.A.S
    to the web.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的机器人汽车T.A.R.A.S成为真正的物联网**设备**，我们必须将T.A.R.A.S连接到互联网。在本章中，我们将通过将T.A.R.A.S的距离传感器连接到网络，开始将桌面机器人转变为互联网机器人。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Identifying the sensor on the robot car
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别机器人汽车上的传感器
- en: Reading robot car sensory data with Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python读取机器人汽车的感应数据
- en: Publishing robot car sensory data to the cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将机器人汽车的感应数据发布到云端
- en: Knowledge required to complete this chapter
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成本章所需的知识
- en: To complete this chapter, you should have built a T.A.R.A.S robot car, as described
    in detail in [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml), *Introducing
    the Raspberry Pi Robot Car*. As with the other chapters in this book, a working
    knowledge of Python is required, as well as a basic understanding of object-oriented
    programming.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您应该已经按照[第13章](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml)中详细描述的方式构建了T.A.R.A.S机器人汽车。与本书中的其他章节一样，需要具备Python的工作知识，以及对面向对象编程的基本理解。
- en: Project overview
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: The project in this chapter will involve sending sensory distance data from
    T.A.R.A.S to the internet. We will create an online dashboard using ThingsBoard,
    which will display this distance information on an analogue gauge.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目将涉及将T.A.R.A.S的感应距离数据发送到互联网。我们将使用ThingsBoard创建一个在线仪表板，该仪表板将在模拟表盘上显示这些距离信息。
- en: This project should take a couple of hours to complete.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目应该需要几个小时来完成。
- en: Getting started
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个项目，需要以下设备：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个树莓派3型号（2015年或更新型号）
- en: A USB power supply
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB电源供应
- en: A computer monitor
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台电脑显示器
- en: A USB keyboard
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB键盘
- en: A USB mouse
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB鼠标
- en: A completed T.A.R.A.S robot car kit (see [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml),
    *Introducing the Raspberry Pi Robot Car*)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个完成的T.A.R.A.S机器人汽车套件（参见[第13章](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml)，*介绍树莓派机器人汽车*）
- en: Identifying the sensor on the robot car
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别机器人汽车上的传感器
- en: 'Throughout the course of the book, we have used a few input sensors. We have
    also published data from these sensors to the web. T.A.R.A.S. uses a distance
    sensor to detect objects close by, as can be seen in the following picture:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书的过程中，我们使用了一些输入传感器。我们还将这些传感器的数据发布到了互联网上。T.A.R.A.S使用距离传感器来检测附近的物体，如下图所示：
- en: '![](assets/da4160be-5fd9-49fa-bc1a-6c249107c6e1.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/da4160be-5fd9-49fa-bc1a-6c249107c6e1.png)'
- en: Looking at T.A.R.A.S for the first time, you would be forgiven for not knowing
    where the distance sensor is located. On T.A.R.A.S, and many other robots, this
    sensor is located in the eyes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次看到T.A.R.A.S时，您可能不知道距离传感器的位置在哪里。在T.A.R.A.S和许多其他机器人上，这个传感器位于眼睛位置。
- en: 'The following is a photo of the HC-SR04 distance sensor—the one used on T.A.R.A.S:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HC-SR04距离传感器的照片，即T.A.R.A.S上使用的传感器：
- en: '![](assets/c6bd91ef-c524-41cc-9ea8-6b1127b72892.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c6bd91ef-c524-41cc-9ea8-6b1127b72892.png)'
- en: If you do a Google image search for HC-SR04 on robots, you will see many, many
    robots that use this sensor. It is a very popular choice due to its low cost and
    wide availability, as well as its handy resemblance to eyes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在机器人上搜索HC-SR04的Google图片，您会看到很多使用这个传感器的机器人。由于其低成本和广泛可用性，以及其方便的眼睛外观，它是一个非常受欢迎的选择。
- en: Taking a closer look at the HC-SR04
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仔细观察HC-SR04
- en: As mentioned, the HC-SR04 is a very popular sensor. It is easy to program, and
    is available from multiple vendors on [www.aliexpress.com](http://www.aliexpress.com).
    The HC-SR04 provides measurements from 2 cm to 400 cm, and is accurate to within
    3 mm.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，HC-SR04是一个非常受欢迎的传感器。它易于编程，并且可以从[www.aliexpress.com](http://www.aliexpress.com)的多个供应商处获得。HC-SR04提供从2厘米到400厘米的测量，并且精度在3毫米以内。
- en: 'The GPIO Zero library makes it easy to read data from the HC-SR04\. The following
    diagram is a wiring diagram for using this sensor with the Raspberry Pi:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: GPIO Zero库使得从HC-SR04读取数据变得容易。以下图表是使用这个传感器与树莓派连接的接线图：
- en: '![](assets/9fffe200-03b5-4702-b041-d246fb7dad48.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9fffe200-03b5-4702-b041-d246fb7dad48.png)'
- en: 'As you can see, the HC-SR04 has four pins, two of which are used for the signal
    input and output. The wiring diagram is a subdiagram of the one we used to wire
    up T.A.R.A.S in [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml), *Introducing
    the Raspberry Pi Robot Car*. The connections are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，HC-SR04有四个引脚，其中两个用于信号输入和输出。接线图是我们在[第13章](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml)中用来连接T.A.R.A.S的子图，*介绍树莓派机器人汽车*。连接如下：
- en: Trig from HC-SR04 (distance sensor) to pin 17 on the Raspberry Pi
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从HC-SR04（距离传感器）的Trig到树莓派的17号引脚
- en: Echo from HC-SR04 (distance sensor) to the left side of the 330 Ohm resistor
    on the breadboard
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从HC-SR04的Echo（距离传感器）到面包板上330欧姆电阻的左侧
- en: VCC from HC-SR04 (distance sensor) to 5V on the Raspberry Pi
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从HC-SR04的VCC（距离传感器）到树莓派的5V
- en: Output from voltage divider to pin 18 on the Raspberry Pi
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从电压分压器输出到树莓派的18号引脚
- en: GND from HC-SR04 to the right side of the 470 Ohm resistor on the breadboard
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从HC-SR04的GND到面包板上470欧姆电阻的右侧
- en: The trig, or trigger, is the input of the HC-SR04, and works with 5V or 3.3V.
    The Echo pin is the output, and is designed to work with 5V. Since this is a little
    too much for our Raspberry Pi to handle, we use a voltage divider circuit to reduce
    the voltage to 3.3V.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器是HC-SR04的输入，可使用5V或3.3V。回波引脚是输出，设计用于5V。由于这对我们的树莓派来说有点太多了，我们使用电压分压电路将电压降低到3.3V。
- en: We could have added further sensors to T.A.R.A.S to make it more advanced, including
    line-tracking sensors, temperature sensors, light sensors, and PID sensors. The
    line-tracking sensor is of particular interest, as a simple line could provide
    T.A.R.A.S with a route to follow during its security patrol duties—a very useful
    addition. As the design is already complicated enough, I will leave it to you
    to add this functionality if you choose.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以向T.A.R.A.S添加更多传感器，使其更加先进，包括线路跟踪传感器、温度传感器、光传感器和PID传感器。线路跟踪传感器尤其有趣，因为一个简单的线路可以为T.A.R.A.S提供在其安全巡逻任务期间跟随的路线，这是一个非常有用的补充。由于设计已经足够复杂，如果您选择的话，我将留给您添加这个功能。
- en: 'The following diagram outlines how a line-tracking sensor works:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表概述了线路跟踪传感器的工作原理：
- en: '![](assets/d0d5f0ff-d13f-4fbc-8061-5e8f133d8a90.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d0d5f0ff-d13f-4fbc-8061-5e8f133d8a90.png)'
- en: In the diagram, you will see two sensors at the front of the robot car. When
    the robot car veers off to the side, one of the sensors picks it up. In the previous
    example, the car in position **B** has veered to the right. The left sensor picks
    this up, and the program makes corrections by turning the robot car to the left
    until it returns to position **A**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表中，您将看到机器人车前面有两个传感器。当机器人车偏离一侧时，其中一个传感器会检测到。在上一个示例中，位置为**B**的汽车已经向右偏离。左侧传感器会检测到这一点，并且程序通过将机器人车向左转动来进行校正，直到它返回到位置**A**。
- en: Reading robot car sensory data with Python
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python读取机器人车的感知数据
- en: 'Although we have covered this before, it''s a good idea to familiarize (or
    re-familiarize) ourselves with the programming of the HC-SR04:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们之前已经介绍过这个，但熟悉（或重新熟悉）HC-SR04的编程是一个好主意：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny。
- en: Click New to create a new file.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建”创建一个新文件。
- en: 'Type the following:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the file as `distance-sensor-test.py`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为“distance-sensor-test.py”。
- en: Run the code.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码。
- en: 'Place your hand in front of the distance sensor. You should see the following
    in the shell (depending on how far your hand is from the distance sensor):'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将手放在距离传感器前面。您应该在shell中看到以下内容（取决于您的手离距离传感器有多远）：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you move your hand closer to, or farther away from, the distance sensor,
    the value will change. This code is pretty self explanatory. The `distance_sensor
    = DistanceSensor(echo=18, trigger=17)` line sets up a `distance_sensor` object
    of class type `DistanceSensor`, with the appropriate pin definitions. We retrieve
    the distance an object is from the HC-SR04 every time we call the `distance` method
    of `distance_sensor`. To convert the value to centimeters, we multiply it by 100.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您将手靠近或远离距离传感器时，数值会发生变化。这段代码相当容易理解。`distance_sensor = DistanceSensor(echo=18,
    trigger=17)`这一行设置了一个`DistanceSensor`类类型的`distance_sensor`对象，并设置了适当的引脚定义。每次调用`distance_sensor`的`distance`方法时，我们都会获取HC-SR04距离物体的距离。为了将值转换为厘米，我们将其乘以100。
- en: 'Now that we are able to retrieve values from the distance sensor, let''s modify
    the code to make it more object-oriented friendly:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够从距离传感器中检索值，让我们修改代码，使其更加面向对象友好：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny
- en: Click New to create a new file
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新建”创建一个新文件
- en: 'Type the following:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the file as `RobotEyes.py`
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为“RobotEyes.py”
- en: Run the code
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: The code should run in exactly the same way as before. The only thing we did
    was to wrap it up in a class in order to abstract it. This will make things easier
    as we write more code. We won't have to remember which pins the HC-SR04 is connected
    to, and we actually don't need to know that it is a distance sensor that we are
    getting data from. This code makes more sense visually than the previous code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 代码应该以完全相同的方式运行。我们所做的唯一的事情就是将它封装在一个类中，以便进行抽象。随着我们编写更多的代码，这将使事情变得更容易。我们不必记住HC-SR04连接到哪些引脚，实际上我们也不需要知道我们正在从中获取数据的是一个距离传感器。这段代码在视觉上比以前的代码更有意义。
- en: Publishing robot car sensory data to the cloud
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将机器人车的感知数据发布到云端
- en: In [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing to
    Web Services*, we set up a ThingsBoard account for publishing sensory data. If
    you have not already done so, set up an account at [www.ThingsBoard.io](https://thingsboard.io/)
    (refer to [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml), *Publishing
    to Web Services*, for instructions on how to do this).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml)中，*发布到Web服务*，我们设置了一个ThingsBoard账户来发布感知数据。如果您还没有这样做，请在[www.ThingsBoard.io](https://thingsboard.io/)上设置一个账户（参考[第10章](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml)中的说明）。
- en: Create a ThingsBoard device
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个ThingsBoard设备
- en: 'To publish our distance sensor data to ThingsBoard, we first need to create
    a ThingsBoard Device:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的距离传感器数据发布到ThingsBoard，我们首先需要创建一个ThingsBoard设备：
- en: Log in to your account at [https://demo.thingsboard.io/login](https://demo.thingsboard.io/login)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的账户[https://demo.thingsboard.io/login](https://demo.thingsboard.io/login)
- en: 'Click on Devices, and then the large orange + sign at the bottom-right corner
    of the screen:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“设备”，然后点击屏幕右下角的大橙色+号：
- en: '![](assets/49e26edc-5be8-4ee2-b56b-49dc553774c9.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/49e26edc-5be8-4ee2-b56b-49dc553774c9.png)'
- en: Type in `RobotEyes` for the Name, leave the Device type as `default`, and put
    in a meaningful description under Description
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”中输入“RobotEyes”，将设备类型保留为“默认”，并在“描述”下输入有意义的描述
- en: Click ADD
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”
- en: Click on `RobotEyes` to get a menu sliding out from the right
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“RobotEyes”以从右侧滑出菜单
- en: Click COPY ACCESS TOKEN to copy the token onto your clipboard
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“复制访问令牌”将令牌复制到剪贴板上
- en: Paste the token into a text file
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将令牌粘贴到一个文本文件中
- en: 'For our code, we will be using the MQTT protocol. If the Paho MQTT library
    has not been installed on your Raspberry Pi, do the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的代码，我们将使用MQTT协议。如果Paho MQTT库尚未安装在您的树莓派上，请执行以下操作：
- en: Open a Terminal application from the Raspberry Pi main toolbar
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从树莓派主工具栏中打开一个终端应用程序
- en: Type `sudo pip3 install pho-mqtt`
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`sudo pip3 install pho-mqtt`
- en: You should see the library install.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到库已安装。
- en: 'Now it''s time to write the code that will publish the sensory data of T.A.R.A.S
    to the web. We will modify our `RobotEyes` class:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候编写代码，将T.A.R.A.S的感知数据发布到网络上了。我们将修改我们的`RobotEyes`类：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单|编程|Thonny Python IDE中打开Thonny
- en: Click New to create a new file
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新建创建一个新文件
- en: 'Type the following:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Be sure to paste the access token from the text file to the `access_token` variable
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将访问令牌从文本文件粘贴到`access_token`变量中
- en: Save the file as `RobotEyesIOT.py`
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`RobotEyesIOT.py`
- en: Run the code
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码
- en: 'You should see the `distance` value in the shell, just as you did before. However,
    when you go to ThingsBoard and click on Latest Telemetry, you should see the same
    value, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在shell中看到`distance`值，就像以前一样。但是，当您转到ThingsBoard并单击最新遥测时，您应该看到相同的值，如下所示：
- en: '![](assets/f43b0d47-2406-49cc-a3c7-b33bae6a940b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f43b0d47-2406-49cc-a3c7-b33bae6a940b.png)'
- en: What we have accomplished here, just as in [Chapter 10](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml),
    *Publishing to Web Services*, is the successful transmission of our distance sensor
    information to the internet. We can now see how close an object is to our robot
    car from anywhere in the world. In the previous screenshot, we can see that there
    is *something* 3.801 cm away.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所取得的成就，就像[第10章](6c15e05d-c6f4-48b4-9279-704320035b8a.xhtml)中一样，*发布到Web服务*，成功地将我们的距离传感器信息传输到了互联网。现在，我们可以从世界上任何地方看到物体离我们的机器人车有多近。在上一张屏幕截图中，我们可以看到有*某物*离我们3.801厘米远。
- en: 'Once again, we''ve written the code to be as self-explanatory as possible.
    However, we should point out the `publish_distance` method of the class:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们尽可能地使代码自解释。但是，我们应该指出类的`publish_distance`方法：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this method, we start by creating a variable called `distance`, which we
    populate with the actual distance information from our class `get_distance` method.
    A Python dictionary object called `sensor_data` is created, and is used to store
    the `distance` value. From there, we create an MQTT client object called `client`.
    We set the password to the `access_token` we copied from ThingsBoard, and then
    connect using standard ThingsBoard boilerplate code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，我们首先创建了一个名为`distance`的变量，我们用我们的类`get_distance`方法中的实际距离信息填充它。创建了一个名为`sensor_data`的Python字典对象，并用它来存储`distance`值。然后，我们创建了一个名为`client`的MQTT客户端对象。我们将密码设置为我们从ThingsBoard复制的`access_token`，然后使用标准的ThingsBoard样板代码进行连接。
- en: The `client.publish` method sends our `sensor_data` to ThingsBoard through a
    `json.dumps` method. We then disconnect from `client` to close the connection.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`client.publish`方法通过`json.dumps`方法将我们的`sensor_data`发送到ThingsBoard。然后，我们断开`client`以关闭连接。'
- en: 'Now, let''s create a dashboard widget using our distance sensory data:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用我们的距离传感数据创建一个仪表板小部件：
- en: 'In ThingsBoard, click Latest Telemetry, and check the box in the list next
    to the `distance` value:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ThingsBoard中，单击最新遥测，并在列表中的`distance`值旁边选中复选框：
- en: '![](assets/12e05e33-6189-4eb6-8036-9ab7bfda79d1.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/12e05e33-6189-4eb6-8036-9ab7bfda79d1.png)'
- en: Click SHOW ON WIDGET
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击在小部件上显示
- en: 'Under Current bundle, select `Analogue gauges` from the drop-down menu, as
    follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在当前包中，从下拉菜单中选择`模拟表`，如下所示：
- en: '![](assets/e77e038b-87ee-4f2c-bfe9-42eb23a9b346.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e77e038b-87ee-4f2c-bfe9-42eb23a9b346.png)'
- en: 'Select the last widget:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最后一个小部件：
- en: '![](assets/e70c900d-55eb-4683-9354-4653ebf48dee.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e70c900d-55eb-4683-9354-4653ebf48dee.png)'
- en: Click ADD TO DASHBOARD at the top
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部的添加到仪表板
- en: 'Create a new dashboard called `RobotEyes`, and check the Open dashboard box:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`RobotEyes`的新仪表板，并选中打开仪表板框：
- en: '![](assets/9107f1c7-f6fd-46ee-973e-29e398d856d8.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9107f1c7-f6fd-46ee-973e-29e398d856d8.png)'
- en: Click ADD
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加
- en: 'Congratulations! We now have created an IoT dashboard widget for the sensory
    distance information from T.A.R.A.S. With this, we can go fullscreen and view
    the information easily:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜！我们现在已经为T.A.R.A.S的感知距离信息创建了一个物联网仪表板小部件。有了这个，我们可以全屏查看信息：
- en: '![](assets/5b607879-78ed-4afb-8320-f5a9b25d9a29.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5b607879-78ed-4afb-8320-f5a9b25d9a29.png)'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we turned T.A.R.A.S into a true IoT thing by publishing the
    distance data—the distance from the eyes of T.A.R.A.S to any object within its
    view—to the internet. By encapsulating our code into a class called `RobotEyes`,
    we can forget that we are dealing with a distance sensor and just focus on the
    eyes of T.A.R.A.S as behaving sonar-like.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过将距离数据发布到互联网，将T.A.R.A.S变成了一个真正的物联网物体。通过将我们的代码封装到一个名为`RobotEyes`的类中，我们可以忘记我们正在处理距离传感器，只需专注于T.A.R.A.S的眼睛表现得像声纳一样。
- en: Through the use of the demo platform in ThingsBoard, we are able to write code
    that sends the distance information from T.A.R.A.S to a dashboard widget for display.
    If we really wanted to be creative, we could connect an actual analogue device
    via a servo and display the distance information that way (as we did in [Chapter
    6](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml), *Working with the Servo Control
    Code to Control an Analog Device*). In [Chapter 16](78ca846a-9f4b-47f7-b404-bb04366a9d9a.xhtml),
    *Controlling the Robot Car with Web Service Calls*, we will take things a step
    further and start to control T.A.R.A.S from the internet.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过ThingsBoard中的演示平台，我们能够编写代码，将T.A.R.A.S的距离信息发送到仪表板小部件以供显示。如果我们真的想要创造性地做，我们可以通过舵机连接一个实际的模拟设备，并以这种方式显示距离信息（就像我们在[第6章](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml)中所做的那样，*使用舵机控制代码来控制模拟设备*）。在[第16章](78ca846a-9f4b-47f7-b404-bb04366a9d9a.xhtml)中，*使用Web服务调用控制机器人车*，我们将更进一步，开始从互联网上控制T.A.R.A.S。
- en: Questions
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why do we use a voltage divider circuit when connecting the HC-SR04 to the Raspberry
    Pi?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接HC-SR04到树莓派时，为什么要使用电压分压电路？
- en: True or false? T.A.R.A.S has eyes that see through the use of sonar.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确还是错误？T.A.R.A.S通过声纳来看。
- en: What is a device in ThingsBoard?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ThingsBoard中的设备是什么？
- en: True or false? Our class, `RobotEyes`, encapsulates the Raspberry Pi camera
    module used on T.A.R.A.S.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确还是错误？我们的类`RobotEyes`封装了T.A.R.A.S上使用的树莓派摄像头模块。
- en: What does the `RobotEyes.publish_distance` method do?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RobotEyes.publish_distance`方法是做什么的？'
- en: True or false? The library that we require to work with MQTT comes pre-installed
    with Raspbian.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真的还是假的？我们需要使用MQTT的库在Raspbian上预先安装。
- en: Why do we name our class `RobotEyes`, and not `RobotDistanceSensor`?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们将类命名为`RobotEyes`而不是`RobotDistanceSensor`？
- en: True or false? Encapsulating boilerplate code in a class makes the code much
    more difficult to work with.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真的还是假的？将样板代码封装在一个类中会使代码更难处理。
- en: True or false? The GPIO Zero library does not have support for distance sensors.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真的还是假的？GPIO Zero库不支持距离传感器。
- en: What is the difference between `RobotEyes.py` and `RobotEyesIOT.py`?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RobotEyes.py`和`RobotEyesIOT.py`之间有什么区别？'
- en: Further reading
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: A good source of guidance for the ThingsBoard platform is its own website. Go
    to [www.thingsboard.io/docs/guides](https://thingsboard.io/docs/guides/) to find
    more information.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ThingsBoard平台的一个很好的指导来源是它自己的网站。访问[www.thingsboard.io/docs/guides](https://thingsboard.io/docs/guides/)获取更多信息。
