- en: Parallel Execution of Python Script
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python脚本的并行执行
- en: 'Python has become the *de facto* standard for network automation. Many network
    engineers already use it on a daily basis to automate networking tasks, from configuration,
    to operation, to troubleshooting network problems. In this chapter, we will visit
    one of the advanced topics in Python: scratching the surface of Python''s multiprocessing
    nature and learning how to use it to accelerate script execution time.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python已成为网络自动化的*事实*标准。许多网络工程师已经每天使用它来自动化网络任务，从配置到操作，再到解决网络问题。在本章中，我们将讨论Python中的一个高级主题：挖掘Python的多进程特性，并学习如何使用它来加速脚本执行时间。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: How Python code is executed in an OS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python代码在操作系统中的执行方式
- en: The Python multiprocessing library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python多进程库
- en: How a computer executes your Python script
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机如何执行您的Python脚本
- en: 'This is how your computer''s operating system executes Python script:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您计算机的操作系统执行Python脚本的方式：
- en: 'When you type `python <your_awesome_automation_script>.py` in the shell, Python
    (which runs as a process) instructs your computer processor to schedule a thread (which
    is the smallest unit of processing):'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在shell中键入`python <your_awesome_automation_script>.py`时，Python（作为一个进程运行）指示您的计算机处理器安排一个线程（这是处理的最小单位）：
- en: '![](../images/00121.jpeg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00121.jpeg)'
- en: The allocated thread will start to execute your script, line by line. A thread
    can do anything, including interacting with I/O devices, connecting to routers,
    printing output, performing mathematical equations, and more.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分配的线程将开始逐行执行您的脚本。线程可以做任何事情，包括与I/O设备交互，连接到路由器，打印输出，执行数学方程等等。
- en: Once the script hits the **End of File** (**EOF**), the thread will be terminated
    and returned to the free pool, to be used by other processes. Then, the script
    is terminated.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦脚本达到**文件结束**（**EOF**），线程将被终止并返回到空闲池中，供其他进程使用。然后，脚本被终止。
- en: In Linux, you can use `#strace –p <pid>` to trace a specific thread execution.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，您可以使用`#strace –p <pid>`来跟踪特定线程的执行。
- en: The more threads that you assign to your script (and that are permitted by your
    processor or OS), the faster your script will run. Actually, threads are sometimes
    called **workers** or **slaves**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您为脚本分配的线程越多（并且得到处理器或操作系统允许的线程越多），脚本运行得越快。实际上，有时线程被称为**工作者**或**从属**。
- en: 'I have a feeling that you have this little idea in your head: Why wouldn''t
    we assign a lot of threads, from all cores, to Python script, in order to get
    the job done quickly?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一种感觉，你脑海中有这样一个小想法：为什么我们不从所有核心中为Python脚本分配大量线程，以便快速完成工作呢？
- en: 'The problem with assigning a lot of threads to one process without special
    handling is the **race condition**. The operating systems will allocate memory
    to your process (in this case, it''s the Python process), to be used at runtime
    and accessed by all threads—*all of them at the same time*. Now, imagine that
    one of those threads reads some data before it''s actually written by another
    thread! You don''t know the order in which the threads will attempt to access
    the shared data; this is the race condition:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有特殊处理，将大量线程分配给一个进程的问题是**竞争条件**。操作系统将为您的进程（在本例中是Python进程）分配内存，以供运行时所有线程访问
    - *同时*。现在，想象一下其中一个线程在另一个线程实际写入数据之前读取了一些数据！您不知道线程尝试访问共享数据的顺序；这就是竞争条件：
- en: '![](../images/00122.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00122.jpeg)'
- en: One available solution is to make the thread acquire a lock. In fact, Python,
    by default, is optimized to run as a single-threaded process, and has something
    called **Global Interpreter Lock** (**GIL**). GIL does not allow multiple threads
    to execute Python code at the same time, in order to prevent conflicts between
    threads.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可用的解决方案是使线程获取锁。事实上，默认情况下，Python被优化为作为单线程进程运行，并且有一个叫做**全局解释器锁**（**GIL**）的东西。为了防止线程之间的冲突，GIL不允许多个线程同时执行Python代码。
- en: But, rather than having multiple threads, why don't we have multiple processes?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为什么不使用多个进程，而不是多个线程呢？
- en: 'The beauty of multiple processes, as compared to multiple threads, is that
    you don''t have to be afraid of data corruption due to shared data. Each spawned
    process will have its own allocated memory, which won''t be accessed by other
    Python processes. This allows us to execute parallel tasks at the same time:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 多进程的美妙之处，与多线程相比，就在于你不必担心由于共享数据而导致数据损坏。每个生成的进程都将拥有自己分配的内存，其他Python进程无法访问。这使我们能够同时执行并行任务：
- en: '![](../images/00123.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00123.jpeg)'
- en: Also, from Python's point of view, each process has its own GIL. So, there's
    no resource conflict or race condition here.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从Python的角度来看，每个进程都有自己的GIL。因此，在这里没有资源冲突或竞争条件。
- en: Python multiprocessing library
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python多进程库
- en: The `multiprocessing` module is Python's standard library that is shipped with
    Python binaries, and it is available from Python 2.6\. There's also the `threading`
    module, which allows you to spawn multiple threads, but they all share the same
    memory space. Multiprocessing comes with more advantages than threading. One of
    them is isolated memory space for each process, and it can take advantage of multiple
    CPUs and cores.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`multiprocessing`模块是Python的标准库，随Python二进制文件一起提供，并且从Python 2.6版本开始可用。还有`threading`模块，它允许您生成多个线程，但它们都共享相同的内存空间。多进程比线程具有更多的优势。其中之一是每个进程都有独立的内存空间，并且可以利用多个CPU和核心。'
- en: Getting started with multiprocessing
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用多进程
- en: 'First, you need to import the module for your Python script:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要为Python脚本导入模块：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, wrap your code with a Python function; this will allow the process to
    target this function and mark it as a parallel execution.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用Python函数包装您的代码；这将允许进程针对此函数并将其标记为并行执行。
- en: 'Let''s suppose that we have code that connects to the router and executes commands
    on it using the `netmiko` library, and we want to connect to all of the devices
    in parallel. This is a sample serial code that will connect to each device and
    execute the passed command, and then continue with the second device, and so on:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有连接到路由器并使用`netmiko`库在其上执行命令的代码，并且我们希望并行连接到所有设备。这是一个样本串行代码，将连接到每个设备并执行传递的命令，然后继续第二个设备，依此类推：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Python file `devices.py` is created on the same directory as our script,
    and it contains the login details and credentials for each device in a `dictionary`
    format:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python文件`devices.py`创建在与我们的脚本相同的目录中，并以`dictionary`格式包含每个设备的登录详细信息和凭据：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, if we want to use the multiprocessing module instead, we need to redesign
    the script and move the code to be under a function; then, we will assign a number
    of processes equal to the number of devices (one process will connect to one device
    and execute the command) and set the target of the process to execute this function:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想要改用多进程模块，我们需要重新设计脚本并将代码移动到一个函数下；然后，我们将分配与设备数量相等的进程数（一个进程将连接到一个设备并执行命令），并将进程的目标设置为执行此函数：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding example, the following applies:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，适用以下内容：
- en: We imported a multiprocess module as `mp`. One of the most important classes
    available inside the module is `Process`, which takes our `netmiko connect` function
    as a target argument. Also, it accepts passing an argument to the target function.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`multiprocess`模块导入为`mp`。模块中最重要的类之一是`Process`，它将我们的`netmiko connect`函数作为目标参数。此外，它接受将参数传递给目标函数。
- en: Then, we iterated over our nodes and created a process for each device and appended
    that process to the processes list.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们遍历我们的节点，并为每个设备创建一个进程，并将该进程附加到进程列表中。
- en: The `start()` method, which is available in the module, is used to spawn and
    then it starts the process execution.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块中可用的`start()`方法用于生成并启动进程执行。
- en: Finally, the script execution time is calculated by subtracting the script start
    time from the script end time.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，脚本执行时间通过从脚本结束时间减去脚本开始时间来计算。
- en: Behind the scenes, the main thread that executes the main script will start
    to fork a number of processes equal to the number of devices. Each of them targets
    one function that executes `show run` on all devices at the same time and stores
    the output in a variable, without affecting each other.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，执行主脚本的主线程将开始分叉与设备数量相等的进程。每个进程都针对一个函数，同时在所有设备上执行`show run`，并将输出存储在一个变量中，互不影响。
- en: 'This is a sample view of the processes inside Python:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Python中进程的一个示例视图：
- en: '![](../images/00124.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00124.jpeg)'
- en: 'Now, when you execute the full code, one final thing needs to be done. You
    need to join the forked process to the main thread/truck, in order to smoothly
    finish the program''s execution:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您执行完整的代码时，还需要做一件事。您需要将分叉的进程连接到主线程/主线程，以便顺利完成程序的执行：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../images/00125.gif)The `join()` method used in the preceding example has
    nothing to do with the original `join()`, available as a string method; it''s
    only used to join the process to the main thread.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中使用的`join()`方法与原始的字符串方法`join()`无关；它只是用来将进程连接到主线程。
- en: Intercommunication between processes
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程之间的通信
- en: 'Sometimes, you will have a process that needs to pass or exchange information
    with other processes during runtime. The multiprocessing module has a `Queue`
    class that implements a special list, within which a process can insert and consume
    data. There are two methods available inside of this class: `get()` and `put()`.
    The `put()` method is used to add data to the `Queue`, whereas getting data from
    the queue is done via the `get()` method. In the next example, we will use `Queue` to
    pass data from a subprocess to a parent process:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您将有一个需要在运行时与其他进程传递或交换信息的进程。多进程模块有一个`Queue`类，它实现了一个特殊的列表，其中一个进程可以插入和消耗数据。在这个类中有两个可用的方法：`get()`和`put()`。`put()`方法用于向`Queue`添加数据，而从队列获取数据则通过`get()`方法完成。在下一个示例中，我们将使用`Queue`来将数据从子进程传递到父进程：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding example, the following applies:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，适用以下内容：
- en: We imported another class, called `Queue()`, from the `multiprocess` module,
    and instantiated it into the `mp_queue` variable.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从`multiprocess`模块中导入了另一个名为`Queue()`的类，并将其实例化为`mp_queue`变量。
- en: Then, during the process creation, we appended this queue as an argument side-by-side
    with the device, so every process will have access to the same queue and be able
    to write data to it.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，在进程创建过程中，我们将此队列作为参数与设备一起附加，因此每个进程都可以访问相同的队列并能够向其写入数据。
- en: The `connect_to_dev()` function connects to each device and executes the `show
    run` command on the Terminal, then writes the output to the shared queue.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connect_to_dev()`函数连接到每个设备并在终端上执行`show run`命令，然后将输出写入共享队列。'
- en: Note that we formatted the output as dictionary items, `{ip:<command_output>}`,
    before adding it to the shared queue using `mp_queue.put()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在将其添加到共享队列之前，我们将输出格式化为字典项`{ip:<command_output>}`，并使用`mp_queue.put()`将其添加到共享队列中。
- en: After the processes finished execution and joined the main (parent) process,
    we used `mp_queue.get()` to retrieve the queue items in a results list, then used `pprint`
    to prettyprint the output.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在进程完成执行并加入主（父）进程之后，我们使用`mp_queue.get()`来检索结果列表中的队列项，然后使用`pprint`来漂亮地打印输出。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we learned about the Python multiprocessing library and how
    to instantiate and execute Python code in parallel.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Python多进程库以及如何实例化和并行执行Python代码。
- en: In the next chapter, we will learn how to prepare a lab environment and explore
    automation options to speed up server deployment.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何准备实验室环境并探索自动化选项以加快服务器部署速度。
