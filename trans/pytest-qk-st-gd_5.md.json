["```py\nclass Test(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls):\n        cls.temp_dir = Path(tempfile.mkdtemp())\n        cls.filepath = cls.temp_dir / \"data.csv\"\n        cls.filepath.write_text(DATA.strip())\n\n    @classmethod\n    def tearDownClass(cls):\n        shutil.rmtree(cls.temp_dir)\n\n    def setUp(self):\n        self.grids = list(iter_grids_from_csv(self.filepath))\n\n    def test_read_properties(self):\n        self.assertEqual(self.grids[0], GridData(\"Main Grid\", 48, 44))\n        self.assertEqual(self.grids[1], GridData(\"2nd Grid\", 24, 21))\n        self.assertEqual(self.grids[2], GridData(\"3rd Grid\", 24, 48))\n\n    def test_invalid_path(self):\n        with self.assertRaises(IOError):\n            list(iter_grids_from_csv(Path(\"invalid file\")))\n\n    @unittest.expectedFailure\n    def test_write_properties(self):\n        self.fail(\"not implemented yet\")\n```", "```py\n..x\n----------------------------------------------------------------------\nRan 3 tests in 0.005s\n\nOK (expected failures=1)\n```", "```py\n\u03bb pytest test_simple.py\n======================== test session starts ========================\n...\ncollected 3 items\n\ntest_simple.py ..x                                             [100%]\n\n================ 2 passed, 1 xfailed in 0.11 seconds ================\n```", "```py\n\u03bb pip install unittest2pytest\n```", "```py\n\u03bb unittest2pytest test_simple2.py\nRefactoringTool: Refactored test_simple2.py\n--- test_simple2.py (original)\n+++ test_simple2.py (refactored)\n@@ -5,6 +5,7 @@\n import unittest\n from collections import namedtuple\n from pathlib import Path\n+import pytest\n\n DATA = \"\"\"\n Main Grid,48,44\n@@ -49,12 +50,12 @@\n self.grids = list(iter_grids_from_csv(self.filepath))\n\n def test_read_properties(self):\n-        self.assertEqual(self.grids[0], GridData(\"Main Grid\", 48, 44))\n-        self.assertEqual(self.grids[1], GridData(\"2nd Grid\", 24, 21))\n-        self.assertEqual(self.grids[2], GridData(\"3rd Grid\", 24, 48))\n+        assert self.grids[0] == GridData(\"Main Grid\", 48, 44)\n+        assert self.grids[1] == GridData(\"2nd Grid\", 24, 21)\n+        assert self.grids[2] == GridData(\"3rd Grid\", 24, 48)\n\n def test_invalid_path(self):\n-        with self.assertRaises(IOError):\n+        with pytest.raises(IOError):\n list(iter_grids_from_csv(Path(\"invalid file\")))\n\n @unittest.expectedFailure\nRefactoringTool: Files that need to be modified:\nRefactoringTool: test_simple2.py\n```", "```py\n\u03bb pytest test_simple2.py\n======================== test session starts ========================\n...\ncollected 3 items\n\ntest_simple2.py ..x                                            [100%]\n\n================ 2 passed, 1 xfailed in 0.10 seconds ================\n```", "```py\nclass Test(unittest.TestCase):\n    ...\n```", "```py\nclass Test:\n    ...\n```", "```py\n    @classmethod\n    def setUpClass(cls):\n        cls.temp_dir = Path(tempfile.mkdtemp())\n        cls.filepath = cls.temp_dir / \"data.csv\"\n        cls.filepath.write_text(DATA.strip())\n\n    @classmethod\n    def tearDownClass(cls):\n        shutil.rmtree(cls.temp_dir)\n```", "```py\n    @classmethod\n    @pytest.fixture(scope='class', autouse=True)\n    def _setup_class(cls):\n        temp_dir = Path(tempfile.mkdtemp())\n        cls.filepath = temp_dir / \"data.csv\"\n        cls.filepath.write_text(DATA.strip())\n        yield\n        shutil.rmtree(temp_dir)\n```", "```py\n    def setUp(self):\n        self.grids = list(iter_grids_from_csv(self.filepath))\n```", "```py\n    @pytest.fixture(autouse=True)\n    def _setup(self):\n        self.grids = list(iter_grids_from_csv(self.filepath))\n```", "```py\nclass Test(unittest.TestCase):\n\n    def setUp(self):\n        self.db_file = self.create_temporary_db()\n        self.session = self.connect_db(self.db_file)\n\n    def tearDown(self):\n        self.session.close()\n        os.remove(self.db_file)\n\n    def create_temporary_db(self):\n        ...\n\n    def connect_db(self, db_file):\n        ...\n\n    def create_table(self, table_name, **fields):\n        ...\n\n    def check_row(self, table_name, **query):\n        ...\n\n    def test1(self):\n        self.create_table(\"weapons\", name=str, type=str, dmg=int)\n        ...\n```", "```py\n# content of testing.py\nclass DataBaseTesting(unittest.TestCase):\n\n    def setUp(self):\n        self.db_file = self.create_temporary_db()\n        self.session = self.connect_db(self.db_file)\n\n    def tearDown(self):\n        self.session.close()\n        os.remove(self.db_file)\n\n    def create_temporary_db(self):\n        ...\n\n    def connect_db(self, db_file):\n        ...\n\n    def create_table(self, table_name, **fields):\n        ...\n\n    def check_row(self, table_name, **query):\n        ...\n\n# content of test_database2.py\nfrom . import testing\n\nclass Test(testing.DataBaseTesting):\n\n    def test1(self):\n        self.create_table(\"weapons\", name=str, type=str, dmg=int)\n        ...\n\n```", "```py\nclass GUITesting(unittest.TestCase):\n\n    def setUp(self):\n        self.app = self.create_app()\n\n    def tearDown(self):\n        self.app.close_all_windows()\n\n    def mouse_click(self, window, button):\n        ...\n\n    def enter_text(self, window, text):\n        ...\n```", "```py\nfrom . import testing\n\nclass Test(testing.DataBaseTesting, testing.GUITesting):\n\n    def setUp(self):\n testing.DataBaseTesting.setUp(self)\n testing.GUITesting.setUp(self)\n\n    def tearDown(self):\n testing.GUITesting.setUp(self)\n testing.DataBaseTesting.setUp(self)\n```", "```py\nclass DataBaseFixture:\n\n    def __init__(self):\n        self.db_file = self.create_temporary_db()\n        self.session = self.connect_db(self.db_file)\n\n    def teardown(self):\n        self.session.close()\n        os.remove(self.db_file)\n\n    def create_temporary_db(self):\n        ...\n\n    def connect_db(self, db_file):\n        ...\n\n    ...\n\n@pytest.fixture\ndef db_testing():\n    fixture = DataBaseFixture()\n    yield fixture\n    fixture.teardown()\n\nclass GUIFixture:\n\n    def __init__(self):\n        self.app = self.create_app()\n\n    def teardown(self):\n        self.app.close_all_windows()\n\n    def mouse_click(self, window, button):\n        ...\n\n    def enter_text(self, window, text):\n        ...\n\n@pytest.fixture\ndef gui_testing():\n    fixture = GUIFixture()\n    yield fixture\n    fixture.teardown()\n```", "```py\nclass DataBaseTesting(unittest.TestCase):\n\n    @pytest.fixture(autouse=True)\n    def _setup(self, db_testing):\n self._db_testing = db_testing\n\n    def create_temporary_db(self):\n        return self._db_testing.create_temporary_db()\n\n    def connect_db(self, db_file):\n        return self._db_testing.connect_db(db_file)\n\n    ...\n\nclass GUITesting(unittest.TestCase):\n\n    @pytest.fixture(autouse=True)\n def _setup(self, gui_testing):\n self._gui_testing = gui_testing\n\n    def mouse_click(self, window, button):\n        return self._gui_testing.mouse_click(window, button)\n\n    ...\n```", "```py\nclass DataBaseFixture:\n\n    def __init__(self, tmpdir):\n        self.db_file = str(tmpdir / \"file.db\")\n        self.session = self.connect_db(self.db_file)\n\n    def teardown(self):\n        self.session.close()\n\n    ...\n\n@pytest.fixture\ndef db_testing(tmpdir):\n    fixture = DataBaseFixture(tmpdir)\n    yield fixture\n    fixture.teardown()\n```", "```py\n# content of testing.py\nclass DataBaseTesting:\n\n    def __init__(self, test_case):        \n        self.db_file = self.create_temporary_db()\n        self.session = self.connect_db(self.db_file)\n        self.test_case = test_case\n        test_case.addCleanup(self.teardown)\n\n    def teardown(self):\n        self.session.close()\n        os.remove(self.db_file)\n\n    ...\n\n    def check_row(self, table_name, **query):\n        row = self.session.find(table_name, **query)\n        self.test_case.assertIsNotNone(row)\n        ...\n\n# content of test_1.py\nfrom testing import DataBaseTesting\n\nclass Test(unittest.TestCase):\n\n    def test_1(self):\n        db_testing = DataBaseTesting(self)\n        db_testing.create_table(\"weapons\", name=str, type=str, dmg=int)\n        db_testing.check_row(\"weapons\", name=\"zweihander\")\n        ...\n\n```", "```py\n# content of testing.py\nclass DataBaseFixture:\n\n    def __init__(self):\n        self.db_file = self.create_temporary_db()\n        self.session = self.connect_db(self.db_file)\n\n    ...\n\n    def check_row(self, table_name, **query):\n        row = self.session.find(table_name, **query)\n        assert row is not None\n\n# content of conftest.py\n@pytest.fixture\ndef db_testing():\n    from .testing import DataBaseFixture\n    result = DataBaseFixture()\n    yield result\n    result.teardown()\n```", "```py\n# content of testing.py\nclass DataBaseTesting(DataBaseFixture):\n\n    def __init__(self, test_case):\n        super().__init__()\n        test_case.addCleanup(self.teardown) \n```"]