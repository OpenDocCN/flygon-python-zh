["```py\nfrom twilio.rest import Client\nfrom gpiozero import RGBLED\nfrom gpiozero import Buzzer\nfrom bluedot import BlueDot\nfrom signal import pause\nfrom time import sleep\n\nclass Doorbell:\n    account_sid = ''\n    auth_token = ''\n    from_phonenumber=''\n    test_env = True\n    led = RGBLED(red=17, green=22, blue=27)\n    buzzer = Buzzer(26)\n    num_of_rings = 0\n    ring_delay = 0\n    msg = ''\n\n    def __init__(self, \n                 num_of_rings = 1, \n                 ring_delay = 1, \n                 message = 'ring', \n                 test_env = True):\n        self.num_of_rings = num_of_rings\n        self.ring_delay = ring_delay\n        self.message = message\n        self.test_env = self.setEnvironment(test_env)\n\n    def setEnvironment(self, test_env):\n        if test_env:\n            self.account_sid = '<<test account_sid>>'\n            self.auth_token = '<<test auth_token>>'\n            return True\n        else:\n            self.account_sid = '<<live account_sid>>'\n            self.auth_token = '<<live auth_token>>'\n            return False\n\n    def doorbell_sequence(self):\n        num = 0\n        while num < self.num_of_rings:\n            self.buzzer.on()\n            self.light_show()\n            sleep(self.ring_delay)\n            self.buzzer.off()\n            sleep(self.ring_delay)\n            num += 1\n        return self.sendTextMessage()\n\n    def sendTextMessage(self):\n        twilio_client = Client(self.account_sid, self.auth_token)\n        if self.test_env:\n            message = twilio_client.messages.create(\n                        body=self.message,\n                        from_= '+15005550006',\n                        to='<<your phone number>>'\n            )\n        else:\n            message = twilio_client.messages.create(\n                        body=self.message,\n                        from_= '<<your twilio number>>',\n                        to='<<your phone number>>'\n            ) \n        return 'Doorbell text message sent - ' + message.sid\n\n    def light_show(self):\n        self.led.color=(1,0,0)\n        sleep(0.5)\n        self.led.color=(0,1,0)\n        sleep(0.5)\n        self.led.color=(0,0,1)\n        sleep(0.5)\n        self.led.off()\n\ndef pressed():\n    doorbell = Doorbell(2, 0.5, 'There is someone at the door')\n    print(doorbell.doorbell_sequence())\n\nblue_dot = BlueDot()\nblue_dot.when_pressed = pressed\n\nif __name__==\"__main__\":\n    pause()\n\n```", "```py\nServer started B8:27:EB:12:77:4F\nWaiting for connection\nClient connected F4:0E:22:EB:31:CA\nDoorbell text message sent - SM5cf1125acad44016840a6b76f99b3624\n```", "```py\nclass Doorbell:\n    account_sid = ''\n    auth_token = ''\n    from_phonenumber=''\n    test_env = True\n    led = RGBLED(red=17, green=22, blue=27)\n    buzzer = Buzzer(26)\n    num_of_rings = 0\n    ring_delay = 0\n    msg = ''\n```", "```py\ndef __init__(self, \n             num_of_rings = 1, \n             ring_delay = 1, \n             message = 'ring', \n             test_env = True):\n     self.num_of_rings = num_of_rings\n     self.ring_delay = ring_delay\n     self.message = message\n     self.test_env = self.setEnvironment(test_env)\n\n def setEnvironment(self, test_env):\n     if test_env:\n         self.account_sid = '<<test account sid>>'\n         self.auth_token = '<<test auth token>>'\n         return True\n     else:\n         self.account_sid = '<<live account sid>>'\n         self.auth_token = '<<auth_token>>'\n         return False\n```", "```py\ndef pressed():\n    doorbell = Doorbell(2, 0.5, 'There is someone at the door')\n    print(doorbell.doorbell_sequence())\n\nblue_dot = BlueDot()\nblue_dot.when_pressed = pressed\n```", "```py\ndoorbell = Doorbell(2, 0.5, 'There is someone at the door', False)\n```", "```py\nfrom twilio.rest import Client\nfrom gpiozero import RGBLED\nfrom gpiozero import Buzzer\nfrom bluedot import BlueDot\nfrom signal import pause\nfrom time import sleep\n\nclass Doorbell:\n    account_sid = ''\n    auth_token = ''\n    from_phonenumber=''\n    test_env = True\n    led = RGBLED(red=17, green=22, blue=27)\n    buzzer = Buzzer(26)\n    num_of_rings = 0\n    ring_delay = 0\n    msg = ''\n\n    def __init__(self, \n                 num_of_rings = 1, \n                 ring_delay = 1, \n                 message = 'ring', \n                 test_env = True):\n        self.num_of_rings = num_of_rings\n        self.ring_delay = ring_delay\n        self.message = message\n        self.test_env = self.setEnvironment(test_env)\n\n    def setEnvironment(self, test_env):\n        if test_env:\n            self.account_sid = '<<test account_sid>>'\n            self.auth_token = '<<test auth_token>>'\n            return True\n        else:\n            self.account_sid = '<<live account_sid>>'\n            self.auth_token = '<<live auth_token>>'\n            return False\n\n    def doorbell_sequence(self):\n        num = 0\n        while num < self.num_of_rings:\n            self.buzzer.on()\n            self.light_show()\n            sleep(self.ring_delay)\n            self.buzzer.off()\n            sleep(self.ring_delay)\n            num += 1\n        return self.sendTextMessage()\n\n    def sendTextMessage(self):\n        twilio_client = Client(self.account_sid, self.auth_token)\n        if self.test_env:\n            message = twilio_client.messages.create(\n                        body=self.message,\n                        from_= '+15005550006',\n                        to='<<your phone number>>'\n            )\n        else:\n            message = twilio_client.messages.create(\n                        body=self.message,\n                        from_= '<<your twilio number>>',\n                        to='<<your phone number>>'\n            ) \n        return 'Doorbell text message sent - ' + message.sid\n\n    def light_show(self):\n        self.led.color=(1,0,0)\n        sleep(0.5)\n        self.led.color=(0,1,0)\n        sleep(0.5)\n        self.led.color=(0,0,1)\n        sleep(0.5)\n        self.led.off()\n\nclass SecretDoorbell(Doorbell):\n    names=[['Bob', 4, 0.5], \n           ['Josephine', 1, 3], \n           ['Ares', 6, 0.2], \n           ['Constance', 2, 1]]\n    message = ' is at the door!'\n\n    def __init__(self, person_num, test_env = True):\n        Doorbell.__init__(self,\n                          self.names[person_num][1],\n                          self.names[person_num][2],\n                          self.names[person_num][0] + self.message,\n                          test_env)\n\ndef swiped(swipe):\n    if swipe.up:\n        doorbell = SecretDoorbell(0)\n        print(doorbell.doorbell_sequence())\n    elif swipe.down:\n        doorbell = SecretDoorbell(1)\n        print(doorbell.doorbell_sequence())\n    elif swipe.left:\n        doorbell = SecretDoorbell(2)\n        print(doorbell.doorbell_sequence())\n    elif swipe.right:\n        doorbell = SecretDoorbell(3)\n        print(doorbell.doorbell_sequence())\n\nblue_dot = BlueDot()\nblue_dot.when_swiped = swiped\n\nif __name__==\"__main__\":\n    pause()\n```", "```py\nServer started B8:27:EB:12:77:4F\nWaiting for connection\nClient connected F4:0E:22:EB:31:CA\nDoorbell text message sent - SM62680586b32a42bdacaff4200e0fed78\n```", "```py\nclass SecretDoorbell(Doorbell):\n    names=[['Bob', 4, 0.5], \n           ['Josephine', 1, 3], \n           ['Ares', 6, 0.2], \n           ['Constance', 2, 1]]\n    message = ' is at the door!'\n\n    def __init__(self, person_num, test_env = True):\n        Doorbell.__init__(self,\n                          self.names[person_num][1],\n                          self.names[person_num][2],\n                          self.names[person_num][0] + self.message,\n                          test_env)\n\ndef swiped(swipe):\n    if swipe.up:\n        doorbell = SecretDoorbell(0)\n        print(doorbell.doorbell_sequence())\n    elif swipe.down:\n        doorbell = SecretDoorbell(1)\n        print(doorbell.doorbell_sequence())\n    elif swipe.left:\n        doorbell = SecretDoorbell(2)\n        print(doorbell.doorbell_sequence())\n    elif swipe.right:\n        doorbell = SecretDoorbell(3)\n        print(doorbell.doorbell_sequence())\n\nblue_dot = BlueDot()\nblue_dot.when_swiped = swiped\n```", "```py\nelif swipe.down:\n    doorbell = SecretDoorbell(1, False)\n    print(doorbell.doorbell_sequence())\n```"]