["```py\ndataset = pd.read_csv('Social_Network_Ads.csv')\n```", "```py\ndataset = dataset.drop(columns=['User ID'])\n```", "```py\ndataset.head(5)\n```", "```py\nenc = sklearn.preprocessing.OneHotEncoder()\nenc.fit(dataset.iloc[:,[0]])\nonehotlabels = enc.transform(dataset.iloc[:,[0]]).toarray()\ngenders = pd.DataFrame({'Female': onehotlabels[:, 0], 'Male': onehotlabels[:, 1]})\nresult = pd.concat([genders,dataset.iloc[:,1:]], axis=1, sort=False)\nresult.head(5)\n```", "```py\ny=result['Purchased']\nX=result.drop(columns=['Purchased'])\n```", "```py\n#from sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n```", "```py\nclassifier = sklearn.tree.DecisionTreeClassifier(criterion = 'entropy', random_state = 100, max_depth=2)\nclassifier.fit(X_train, y_train)\n```", "```py\nimport sklearn.metrics as metrics\ny_pred = classifier.predict(X_test)\ncm = metrics.confusion_matrix(y_test, y_pred)\ncm\n```", "```py\naccuracy= metrics.accuracy_score(y_test,y_pred)\nrecall = metrics.recall_score(y_test,y_pred)\nprecision = metrics.precision_score(y_test,y_pred)\nprint(accuracy,recall,precision)\n```", "```py\ny_pred = classifier.predict(X_test)\ncm = metrics.confusion_matrix(y_test, y_pred)\ncm\n```", "```py\naccuracy= metrics.accuracy_score(y_test,y_pred)\nrecall = metrics.recall_score(y_test,y_pred)\nprecision = metrics.precision_score(y_test,y_pred)\nprint(accuracy,recall,precision)\n```", "```py\ny_pred = classifier.predict(X_test)\ncm = metrics.confusion_matrix(y_test, y_pred)\ncm\n```", "```py\naccuracy= metrics.accuracy_score(y_test,y_pred)\nrecall = metrics.recall_score(y_test,y_pred)\nprecision = metrics.precision_score(y_test,y_pred)\nprint(accuracy,recall,precision)\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)\n```", "```py\n\ny_pred = classifier.predict(X_test)\ncm = metrics.confusion_matrix(y_test, y_pred)\ncm\n```", "```py\naccuracy= metrics.accuracy_score(y_test,y_pred)\nrecall = metrics.recall_score(y_test,y_pred)\nprecision = metrics.precision_score(y_test,y_pred)\nprint(accuracy,recall,precision)\n```", "```py\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\n```", "```py\ny_pred = classifier.predict(X_test)\ncm = metrics.confusion_matrix(y_test, y_pred)\ncm\n```", "```py\naccuracy= metrics.accuracy_score(y_test,y_pred)\nrecall = metrics.recall_score(y_test,y_pred)\nprecision = metrics.precision_score(y_test,y_pred)\nprint(accuracy,recall,precision)\n```", "```py\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n```", "```py\nPredicting the Test set results\ny_pred = classifier.predict(X_test)\ncm = metrics.confusion_matrix(y_test, y_pred)\ncm\n```", "```py\naccuracy= metrics.accuracy_score(y_test,y_pred)\nrecall = metrics.recall_score(y_test,y_pred)\nprecision = metrics.precision_score(y_test,y_pred)\nprint(accuracy,recall,precision)\n```", "```py\ndataset = pd.read_csv('auto.csv')\n```", "```py\ndataset.head(5)\n```", "```py\ndataset=dataset.drop(columns=['NAME'])\n```", "```py\ndataset=dataset.drop(columns=['NAME'])\ndataset= dataset.apply(pd.to_numeric, errors='coerce')\ndataset.fillna(0, inplace=True)\n```", "```py\nfrom sklearn.model_selection import train_test_split\n#from sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n```", "```py\nfrom sklearn.linear_model import LinearRegression\n```", "```py\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n```", "```py\ny_pred = regressor.predict(X_test)\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nsqrt(mean_squared_error(y_test, y_pred))\n```", "```py\ny_pred = regressor.predict(X_test)\n```", "```py\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nsqrt(mean_squared_error(y_test, y_pred))\n```", "```py\ny_pred = regressor.predict(X_test)\n```", "```py\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nsqrt(mean_squared_error(y_test, y_pred))\n```", "```py\nimport numpy as np \nimport pandas as pd\ndf = pd.read_csv(\"weather.csv\")\n```", "```py\nx = df.drop(['Date','RainTomorrow'],axis=1)\n```", "```py\ny = df['RainTomorrow']\n```", "```py\nfrom sklearn.model_selection import train_test_split\ntrain_x , train_y ,test_x , test_y = train_test_split(x,y , test_size = 0.2,random_state = 2)\n```", "```py\nmodel = LogisticRegression()\n```", "```py\nmodel.fit(train_x , test_x)\n```", "```py\npredict = model.predict(train_y)\n```"]