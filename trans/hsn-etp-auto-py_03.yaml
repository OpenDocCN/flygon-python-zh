- en: Setting Up the Network Lab Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置网络实验室环境
- en: We now have a fair idea of how to write and develop Python scripts, the building
    blocks to creating programs. We will now move on to understanding why automation
    is an important topic in today's network, and then we will build our network automation
    lab using one of the popular pieces of software, called EVE-NG, which helps us
    to virtualize network devices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经有了如何编写和开发Python脚本的基本概念，这是创建程序的基本组成部分。我们现在将继续了解为什么自动化是当今网络中一个重要的话题，然后我们将使用一种流行的软件之一，名为EVE-NG，来构建我们的网络自动化实验室，这有助于我们虚拟化网络设备。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: When and why to automate the network
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时以及为什么自动化网络
- en: Screen scraping versus API automation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕抓取与API自动化
- en: Why to use Python for network automation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用Python进行网络自动化
- en: The future of network automation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络自动化的未来
- en: Lab setup
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验室设置
- en: 'Getting ready: installing EVE-NG'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备工作：安装EVE-NG
- en: Building an enterprise network topology
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建企业网络拓扑
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will cover the EVE-NG installation steps and how to create
    our lab environment. The installation will be done over VMware Workstation, VMware
    ESXi, and finally Red Hat KVM, so you should be familiar with the virtualization
    concept and have one of the hypervisors up and running prior to lab setup.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍EVE-NG的安装步骤以及如何创建我们的实验室环境。安装将在VMware Workstation、VMware ESXi和最后的Red
    Hat KVM上进行，因此您应该熟悉虚拟化概念，并在实验室设置之前已经运行其中一个hypervisor。
- en: When and why to automate the network
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时以及为什么自动化网络
- en: Network automation is increasing all over the network world. However, it's really
    important to understand when and why to automate your network. For example, if
    you're an administrator of a few network devices (three or four switches) and
    you don't execute so many tasks on them regularly, then you might not need full
    automation for them. Actually, the time needed to write and develop a script and
    test and troubleshoot it might be greater than the time to do a simple task manually.
    On the other hand, if you're responsible for a big enterprise network that contains
    multi-vendor platforms and you always execute repetitive tasks, then it's highly
    recommended to have a script to automate it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 网络自动化正在全球范围内增加。然而，了解何时以及为什么自动化您的网络是非常重要的。例如，如果您是几个网络设备（三四个交换机）的管理员，并且不经常在它们上执行许多任务，那么您可能不需要对它们进行全面自动化。实际上，编写和开发脚本以及测试和故障排除所需的时间可能大于手动执行简单任务所需的时间。另一方面，如果您负责一个包含多供应商平台的大型企业网络，并且经常执行重复任务，那么强烈建议您编写脚本来自动化。
- en: Why do we need automation?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们为什么需要自动化？
- en: 'There are several reasons for why automation is important for networks today:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 今天网络自动化的重要性有几个原因：
- en: '**Lower costs**: Using automation solutions (either developed in-house or purchased
    from vendors) will reduce network operation complexity and the time required to
    provision, configure, and operate network devices'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低成本**：使用自动化解决方案（无论是内部开发还是从供应商购买）将减少网络操作复杂性以及配置、操作网络设备所需的时间'
- en: '**Business continuity**: Automation will reduce human error during service
    creation over current infrastructure, and hence, allow businesses to reduce the
    service **time to market** (**TTM**)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务连续性**：自动化将减少当前基础设施上服务创建过程中的人为错误，从而使企业能够缩短服务的**上市时间**（**TTM**）'
- en: '**Business agility**: Most network tasks are repeated and by automating them,
    you will increase productivity and drive business innovation'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务敏捷性**：大多数网络任务都是重复的，通过自动化，您将提高生产力并推动业务创新'
- en: '**Correlation**: Building a solid automation workflow allows the network and
    systems administrators to perform root cause analysis faster and increases the
    possibility of solving the problem by correlating multiple events together'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相关性**：建立稳固的自动化工作流程使网络和系统管理员能够更快地进行根本原因分析，并增加通过将多个事件相关联来解决问题的可能性'
- en: Screen scraping versus API automation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕抓取与API自动化
- en: For a long period of time, the CLI was the only access method available to manage
    and operate network devices. Operators and administrators used to have SSH and
    Telnet to access the network terminal for configuration and troubleshooting. Python,
    or any programming language, has two approaches to communicating with devices.
    The first one is to use SSH or telnet the same as before and get the information,
    then process it. This method is called **screen scraping** and requires libraries
    that will be able to establish a connection to the device and execute a command
    directly on the terminal, and other libraries to process the returned information
    to extract useful data from it. This method often requires knowledge of additional
    parsing languages, such as regular expressions, to match the data pattern from
    the output and extract useful data from it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，CLI是管理和操作网络设备的唯一访问方法。运营商和管理员过去通常使用SSH和Telnet来访问网络终端进行配置和故障排除。Python或任何编程语言在与设备通信时有两种方法。第一种是像以前一样使用SSH或Telnet获取信息，然后处理它。这种方法称为**屏幕抓取**，需要能够与设备建立连接并直接在终端上执行命令的库，以及其他库来处理返回的信息，以提取有用的数据。这种方法通常需要了解其他解析语言，如正则表达式，以匹配输出的数据模式并从中提取有用的数据。
- en: The second method is called an **Application Programmable Interface** (**API**)
    and this method depends entirely on sending a structured request using REST or
    SOAP protocols to the device and returning the output, also in structured format,
    encoded in JSON or XML. The time needed for processing the returned data in this
    method is quite small compared to the first method; however, the API requires
    additional configuration on network devices to support it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法称为**应用程序可编程接口**（**API**），这种方法完全依赖于使用REST或SOAP协议向设备发送结构化请求，并返回输出，也以结构化格式编码为JSON或XML。与第一种方法相比，这种方法中处理返回数据所需的时间相当短；但是，API需要在网络设备上进行额外的配置以支持它。
- en: Why use Python for network automation?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要使用Python进行网络自动化？
- en: Python is a pretty well-structured and easy programming language available today
    and targets many areas in technology, web and internet development, data mining
    and visualization, desktop GUI, analysis, game building, and automation testing;
    that's why it's called a *general purpose language.*
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python是当今一个非常结构良好且易于使用的编程语言，面向技术、Web和互联网开发、数据挖掘和可视化、桌面GUI、分析、游戏开发和自动化测试的许多领域；这就是为什么它被称为*通用目的语言*。
- en: 'So, there are three reasons to choose Python:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，选择Python有三个原因：
- en: '**Readability and ease of use**: When you develop using Python, you actually
    find yourself writing in English. Many keywords and program flows inside Python
    are structured to have readable statements. Also, Python doesn''t require `;`
    or curly braces to start and end blocks, which gives Python a shallow learning
    curve. Finally, Python has some optional rules, called PEP 8, that tell Python
    developers how to format their program to have readable code.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易读性和易用性：当你使用Python进行开发时，实际上是在用英语写作。Python内部的许多关键字和程序流都被设计成可读的语句。此外，Python不需要`;`或花括号来开始和结束代码块，这使得Python具有较低的学习曲线。最后，Python有一些可选的规则，称为PEP
    8，告诉Python开发人员如何格式化他们的程序以获得可读的代码。
- en: 'You can configure PyCharm to take care of these rules and check whether your
    code violates them or not by going to Settings | Inspections | PEP 8 coding style
    violation:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以配置PyCharm来遵循这些规则，并通过转到设置|检查|PEP 8编码风格违规来检查你的代码是否违反了这些规则：
- en: '![](../images/00041.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00041.jpeg)'
- en: '**Libraries**: This is the real power of Python: libraries and packages. Python
    has a wide range of libraries in many areas. Any Python developer can easily develop
    a Python library and upload it online to make it available to other developers.
    Libraries are uploaded to a website called PyPI ([https://pypi.Python.org/pypi](https://pypi.python.org/pypi))
    and linked to a GitHub repository. When you want to download the library to your
    PC, then you use a tool called `pip` to connect to PyPI and download it locally.
    Network vendors such as Cisco, Juniper, and Arista developed libraries to facilitate
    access to their platforms. Most vendors are pushing to make their libraries easy
    to use and require minimum installation and configuration steps to retrieve useful
    information from devices.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库**：这是Python的真正力量：库和包。Python在许多领域拥有广泛的库。任何Python开发人员都可以轻松开发一个Python库并将其上传到网上，以便其他开发人员使用。库被上传到一个名为PyPI的网站（[https://pypi.Python.org/pypi](https://pypi.python.org/pypi)），并链接到一个GitHub存储库。当你想要将库下载到你的电脑上时，你可以使用一个叫做`pip`的工具连接到PyPI并将其下载到本地。诸如思科、Juniper和Arista等网络供应商开发了库来方便访问他们的平台。大多数供应商都在努力使他们的库易于使用，并且需要最少的安装和配置步骤来从设备中检索有用的信息。'
- en: '**Powerful**: Python tries to minimize the number of steps required to reach
    the end result. For example, to print hello world using Java, you will need this
    block of code:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强大**：Python试图最小化达到最终结果所需的步骤数量。例如，要使用Java打印hello world，你将需要这个代码块：'
- en: '![](../images/00042.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00042.jpeg)'
- en: 'However, in Python, the whole block is written in one line to print it, as
    shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Python中，整个代码块都写在一行中以打印它，如下面的屏幕截图所示：
- en: '![](../images/00043.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00043.jpeg)'
- en: Combining all these reasons together leads to making Python the de facto standard
    for automation and the first choice for vendors when it comes to automating network
    devices.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些原因结合在一起，使Python成为自动化的事实标准，也是供应商在自动化网络设备时的首选。
- en: The future of network automation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络自动化的未来
- en: 'For a long period of time, network automation only meant developing a script
    using a programming language such as Perl, TcL, or Python in order to execute
    tasks on different network platforms. This approach is known as **script-driven
    network automation**. But as the network becomes more complex and more service-oriented,
    new types of automation were required and started to appear, such as the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在很长一段时间里，网络自动化只意味着使用编程语言（如Perl、TcL或Python）开发脚本，以便在不同的网络平台上执行任务。这种方法被称为**脚本驱动的网络自动化**。但随着网络变得更加复杂和服务导向，需要并开始出现新类型的自动化，例如以下内容：
- en: '**Software-defined network automation**: Network devices will have only a forwarding
    plane, while the control plane is implemented and created using an external software
    called an **SDN controller**. The benefit of this approach is there will be a
    single point of contact for any network changes and the SDN controller can accept
    those change requests from other software, such as an external portal, through
    well-implemented northbound interfaces.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件定义的网络自动化**：网络设备只有一个转发平面，而控制平面是使用外部软件（称为**SDN控制器**）实现和创建的。这种方法的好处是任何网络变化都将有一个单一的联系点，并且SDN控制器可以接受来自其他软件（如外部门户）的变更请求，通过良好实现的北向接口。'
- en: '**High-level orchestration**: This approach requires software called an orchestrator
    that integrates with SDN controllers and enables the creation of network service
    models using languages, such as YANG, that abstract the service from the underlying
    devices that will run over it. Also, an orchestrator can integrate with a **Virtual
    Infrastructure Manager** (**VIM**) such as OpenStack and vCenter, in order to
    manage virtual machines as a part of network service modeling.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级编排**：这种方法需要一个称为编排器的软件，它与SDN控制器集成，并使用抽象服务的语言（如YANG）创建网络服务模型，该模型将在其上运行的底层设备中运行。此外，编排器可以与**虚拟基础设施管理器**（**VIM**）（如OpenStack和vCenter）集成，以便管理虚拟机作为网络服务建模的一部分。'
- en: '**Policy-based networking**: In this type of automation, you describe what
    you want to have in the network and the system has all the details to figure out
    how to implement it in the underlying devices. This allows software engineers
    and developers to implement changes in the network and describe their application''s
    needs in declarative policies.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于策略的网络**：在这种类型的自动化中，您描述了网络中所需的内容，系统具有所有详细信息，以便找出如何在底层设备中实现它。这使软件工程师和开发人员能够在网络中实施更改，并在声明性策略中描述其应用程序的需求。'
- en: Network lab setup
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络实验室设置
- en: Now, we will start building our networking lab on a popular platform called
    EVE-NG. You could, of course, use a physical node to implement the topology, but
    a virtualized environment gives us an isolated and sandboxed environment to test
    many different configurations, plus the flexibility to add/remove nodes to/from
    the topology with a few clicks. Also, we can have multiple snapshots to our configuration
    so we can revert back to any scenario at any time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将开始在一个名为EVE-NG的流行平台上构建我们的网络实验室。当然，您可以使用物理节点来实现拓扑，但虚拟化环境为我们提供了一个隔离和沙箱环境，可以测试许多不同的配置，还可以灵活地添加/删除节点到/从拓扑中。此外，我们可以对我们的配置进行多个快照，因此可以随时恢复到任何场景。
- en: EVE-NG (formerly known as UNetLab) is one of the most popular choices in network
    emulation. It supports a wide range of virtualized nodes from different vendors.
    There's another option, which is GNS3, but, as we will see during this chapter
    and the next one, EVE-NG provides many features that make it a solid choice for
    network modeling.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: EVE-NG（以前称为UNetLab）是网络仿真中最受欢迎的选择之一。它支持来自不同供应商的各种虚拟化节点。还有另一个选择，即GNS3，但正如我们将在本章和下一章中看到的那样，EVE-NG提供了许多功能，使其成为网络建模的一个坚实选择。
- en: 'EVE-NG comes in three editions: Community, Pro, and Learning Center. We will
    use the Community edition as it contains all the features that we will need during
    this book.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: EVE-NG有三个版本：社区版、专业版和学习中心。我们将使用社区版，因为它包含了我们在本书中需要的所有功能。
- en: Getting ready – installing EVE-NG
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪-安装EVE-NG
- en: 'EVE-NG Community edition came with two options, OVA and ISO. The first option
    is to use OVA, which gives you the minimum installation steps required, given
    that you already have VMware Player/Workstation/Fusion, or VMware ESXi, or Red
    Hat KVM. The second option is to install it directly over a bare metal server
    without a hypervisor, this time using Ubuntu 16.06 LTS OS:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: EVE-NG社区版有两个选项，OVA和ISO。第一个选项是使用OVA，它为您提供了所需的最少安装步骤，前提是您已经拥有VMware Player/Workstation/Fusion，或VMware
    ESXi，或Red Hat KVM。第二个选项是在没有虚拟化程序的裸机服务器上直接安装它，这次使用Ubuntu 16.06 LTS操作系统：
- en: '![](../images/00044.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00044.jpeg)'
- en: The ISO option, however, requires some advanced skills in Linux to prepare the
    machine itself and import the installation repositories into the operating system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，ISO选项需要一些Linux高级技能来准备机器本身，并将安装存储库导入操作系统。
- en: Oracle VirtualBox doesn't support the hardware acceleration needed by EVE-NG,
    so it's better to install it either in VMware or KVM.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle VirtualBox不支持EVE-NG所需的硬件加速，因此最好在VMware或KVM中安装它。
- en: First, head to [http://www.eve-ng.net/index.php/downloads/eve-ng](http://www.eve-ng.net/index.php/downloads/eve-ng)
    to download the latest version of EVE-NG, then import it into your hypervisor.
    I dedicated 8 GB of memory and four vCPUs to the created machine, but you can
    add additional resources to it. In the next section, we will see how to import
    the downloaded image to hypervisors and configure each one.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，前往[http://www.eve-ng.net/index.php/downloads/eve-ng](http://www.eve-ng.net/index.php/downloads/eve-ng)下载最新版本的EVE-NG，然后将其导入到您的虚拟化程序中。我为创建的机器分配了8
    GB内存和四个vCPU，但您可以为其添加更多资源。在下一节中，我们将看到如何将下载的镜像导入到虚拟化程序并配置每个镜像。
- en: Installation on VMware Workstation
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VMware Workstation上安装
- en: 'In the following steps, we will import the downloaded EVE-NG OVA image into
    VMware Workstation. OVA-based images contain files that describe the virtual machine
    in terms of hard disk, CPU, and RAM values. You can later modify these numbers
    after importing them:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将把下载的EVE-NG OVA镜像导入到VMware Workstation中。基于OVA的镜像包含描述虚拟机的文件，如硬盘、CPU和RAM值。导入后，您可以修改这些数字：
- en: Open VMware workstation and from File, choose Open to import the OVA.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VMware Workstation，从“文件”中选择“打开”以导入OVA。
- en: After completing the import process, right-click on the newly created machine
    and choose Edit Settings.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成导入过程后，右键单击新创建的机器，选择“编辑设置”。
- en: Increase the number of processors to 4 and the memory allocated to 8 GB (again,
    you could add more if you have the resources but this setting will be enough for
    our lab).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将处理器数量增加到4个，内存分配为8 GB（同样，如果您有资源，可以添加更多，但此设置对于我们的实验足够了）。
- en: 'Make sure the Virtualize Intel VT-x/EPT or AMD-V/RVI checkbox is enabled. This
    option instructs VMware workstation to pass the virtualization flags to the guest
    OS (nested virtualization):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保启用虚拟化Intel VT-x/EPT或AMD-V/RVI复选框。此选项指示VMware Workstation将虚拟化标志传递给客户操作系统（嵌套虚拟化）：
- en: '![](../images/00045.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00045.jpeg)'
- en: 'Also, it''s recommended to expand the hard disk by adding additional space
    to the existing hard disk in order to have enough space to host multiple images
    from vendors:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，建议通过向现有硬盘添加额外空间来扩展硬盘，以便有足够的空间来托管来自供应商的多个镜像：
- en: '![](../images/00046.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00046.jpeg)'
- en: 'A message will appear after expanding the disk, indicating that the operation
    was done successfully and you need to follow some procedures in the guest operating
    system to merge the new space with the old one. Luckily for us, we don''t need
    to do that as EVE-NG will merge any new space found in the hard disk with the
    old one during system boot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展磁盘后，将出现一条消息，指示操作已成功完成，并且您需要按照一些程序在客户操作系统中将新空间与旧空间合并。幸运的是，我们不需要这样做，因为EVE-NG将在系统启动期间将硬盘中发现的任何新空间与旧空间合并：
- en: '![](../images/00047.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00047.jpeg)'
- en: Installation over VMware ESXi
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VMware ESXi上安装
- en: 'VMware ESXi is a good example of a type 1 hypervisor that runs directly on
    the system. Sometimes they''re called bare-metal hypervisors, and they provide
    many features compared to type 2 hypervisors, such as VMware workstation/Fusion
    or VirtualBox:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: VMware ESXi是直接在系统上运行的一种类型1虚拟化程序的良好示例。有时它们被称为裸机虚拟化程序，并且与类型2虚拟化程序（如VMware Workstation/Fusion或VirtualBox）相比，它们提供了许多功能：
- en: Open the vSphere client and connect to your ESXi server
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开vSphere客户端并连接到您的ESXi服务器
- en: From the File menu, choose Deploy OVF Template
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“文件”菜单中，选择“部署OVF模板”
- en: 'Enter the path for the downloaded OVA image and click Next:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入下载的OVA镜像的路径并单击“下一步”：
- en: '![](../images/00048.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00048.jpeg)'
- en: 'Accept all the default settings suggested by the hypervisor till you land on
    the final page, Ready to Complete, and click on Finish:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受虚拟化程序建议的所有默认设置，直到您到达最终页面“准备完成”，然后单击“完成”：
- en: '![](../images/00049.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00049.jpeg)'
- en: ESXi will start to deploy the image on the hypervisor, and later you can change
    its settings and add more resources to it, as we did before in VMware workstation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ESXi将开始在虚拟化程序上部署镜像，稍后您可以更改其设置并为其添加更多资源，就像我们之前在VMware Workstation中所做的那样。
- en: Installation over Red Hat KVM
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Red Hat KVM上安装
- en: 'You need to convert the downloaded OVA image to QCOW2 format, which is supported
    by KVM. Follow these steps to convert one format into another. We will need a
    special utility called `qemu-img` available inside the `qemu-utils` package:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将下载的OVA镜像转换为KVM支持的QCOW2格式。按照以下步骤将一种格式转换为另一种格式。我们将需要一个名为`qemu-img`的特殊实用程序，该实用程序可在`qemu-utils`软件包内找到：
- en: 'Untar the downloaded OVA to extract the VMDK file (the HDD of the image):'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的OVA文件以提取VMDK文件（镜像的硬盘）：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the `qemu-utils` tools:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`qemu-utils`工具：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, convert the VMDK to QCOW2\. It may take a few minutes for the conversion
    to be complete:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将VMDK转换为QCOW2。转换可能需要几分钟才能完成：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we have our own `qcow2` file ready to be hosted inside the Red Hat
    KVM. Open the KVM console and choose the Import existing disk image option from
    the menu:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有自己的准备好在Red Hat KVM中托管的`qcow2`文件。打开KVM控制台，并从菜单中选择“导入现有磁盘映像”选项：
- en: '![](../images/00050.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00050.jpeg)'
- en: 'Then, choose the path of the converted image and click on Forward:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择转换图像的路径并单击“前进”：
- en: '![](../images/00051.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00051.jpeg)'
- en: Accessing EVE-NG
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问EVE-NG
- en: 'After you import the image to the hypervisor and start it, you will be asked
    to provide some information to complete the installation. First, you will be greeted
    with the EVE logo as an indication that the machine has been successfully imported
    over the hypervisor and it is ready to start the boot phase:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在将镜像导入虚拟化程序并启动它后，您将被要求提供一些信息以完成安装。首先，您将看到EVE标志，表示机器已成功导入虚拟化程序，并准备启动引导阶段：
- en: 'Provide the root password that will be used for SSHing to the EVE machine.
    By default, it will be `eve`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供将用于SSH连接到EVE机器的root密码。默认情况下，它将是`eve`：
- en: '![](../images/00052.gif)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00052.gif)'
- en: 'Provide the hostname that will be used as a name inside Linux:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供将在Linux内用作名称的主机名：
- en: '![](../images/00053.gif)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00053.gif)'
- en: 'Provide a domain name for the machine:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为机器提供一个域名：
- en: '![](../images/00054.gif)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00054.gif)'
- en: 'Choose to configure networking with the static method. This will ensure the
    IP address given will be persistent even after machine reboot:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择使用静态方法配置网络。这将确保即使在机器重启后，给定的IP地址也将是持久的：
- en: '![](../images/00055.gif)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00055.gif)'
- en: 'Finally, provide the static IP address from a range that is reachable from
    your network. This IP will be used to SSH to EVE and upload vendor images to the
    repositories:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，提供一个从您的网络可达的范围内的静态IP地址。此IP将用于SSH到EVE并将供应商镜像上传到存储库：
- en: '![](../images/00056.gif)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00056.gif)'
- en: 'In order to access the EVE-NG GUI, you need to open a browser and go to `http://<server_ip>`.
    Please note `server_IP` is what we used during the installation steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问EVE-NG GUI，您需要打开浏览器并转到`http://<server_ip>`。请注意，`server_IP`是我们在安装步骤中使用的：
- en: '![](../images/00057.jpeg)The default username for the GUI is `admin` and the
    password is `eve`, while the default username for SSH is `root` and the password
    is what was provided during the installation steps.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00057.jpeg)GUI的默认用户名是`admin`，密码是`eve`，而SSH的默认用户名是`root`，密码是在安装步骤中提供的。'
- en: Installing EVE-NG client pack
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装EVE-NG客户端包
- en: 'The client pack that comes with EVE-NG allows us to choose which application
    is used when you telnet or SSH to the device (either PuTTY or SecureCRT) and set
    up Wireshark for remote packet captures between links. Also, it facilitates work
    on RDP- and VNC-based images. First, you need to download the client pack to your
    PC from [http://eve-ng.net/index.php/downloads/windows-client-side-pack](http://eve-ng.net/index.php/downloads/windows-client-side-pack),
    then extract the file to `C:\Program Files\EVE-NG`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: EVE-NG附带的客户端包允许我们选择在telnet或SSH到设备时使用哪个应用程序（PuTTY或SecureCRT），并设置Wireshark以在链接之间进行远程数据包捕获。此外，它还便于在基于RDP和VNC的镜像上工作。首先，您需要从[http://eve-ng.net/index.php/downloads/windows-client-side-pack](http://eve-ng.net/index.php/downloads/windows-client-side-pack)下载客户端包到您的PC，然后将文件提取到`C:\Program
    Files\EVE-NG`：
- en: '![](../images/00058.gif)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00058.gif)'
- en: 'The extracted files contain many scripts written in Windows batch scripting
    (`.bat`) to configure the machine that will be used to access EVE-NG. You will
    find scripts that configure the default Telnet/SSH client and another one for
    Wireshark and the VNC. The software sources are also available inside the folder:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的文件包含许多用Windows批处理脚本（`.bat`）编写的脚本，用于配置将用于访问EVE-NG的机器。您将找到配置默认Telnet/SSH客户端的脚本和另一个用于Wireshark和VNC的脚本。软件源也可在文件夹内找到：
- en: '![](../images/00059.jpeg)If you are using a Linux desktop such as Ubuntu or
    Fedora, then you could use this excellent project from GitHub to get the client
    pack: [https://github.com/SmartFinn/eve-ng-integration](https://github.com/SmartFinn/eve-ng-integration).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00059.jpeg)如果您使用Ubuntu或Fedora等Linux桌面，则可以使用GitHub上的这个优秀项目来获取客户端包：[https://github.com/SmartFinn/eve-ng-integration](https://github.com/SmartFinn/eve-ng-integration)。'
- en: Loading network images into EVE-NG
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将网络图像加载到EVE-NG中
- en: All network images obtained from vendors should be uploaded to `/opt/unetlab/addons/qemu`.
    EVE-NG support QEMU-based images and Dynamics images, and also iOL (iOS On Linux).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从供应商获得的所有网络图像都应上传到`/opt/unetlab/addons/qemu`。EVE-NG支持基于QEMU的图像和动态图像，还支持iOL（iOS
    On Linux）。
- en: 'When you get an image from a vendor, you should create a directory inside `/opt/unetlab/addons/qemu`
    and upload the image to that directory; then, you should execute this script to
    fix the permission of the uploaded image:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从供应商那里获得图像时，您应该在`/opt/unetlab/addons/qemu`内创建一个目录，并将图像上传到该目录；然后，您应该执行此脚本来修复上传图像的权限：
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Building an enterprise network topology
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建企业网络拓扑
- en: 'In our base lab setup, we will simulate an enterprise network that has four
    switches and one router that act as a gateway to outside networks. Here is the
    IP schema that will be used for each node:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的基本实验室设置中，我们将模拟一个具有四个交换机和一个充当外部网络网关的路由器的企业网络。以下是将用于每个节点的IP模式：
- en: '| **Node name** | **IP** |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| **节点名称** | **IP** |'
- en: '| GW | `10.10.88.110` |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| GW | `10.10.88.110` |'
- en: '| Switch1 | `10.10.88.111` |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| Switch1 | `10.10.88.111` |'
- en: '| Switch2 | `10.10.88.112` |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| Switch2 | `10.10.88.112` |'
- en: '| Switch3 | `10.10.88.113` |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| Switch3 | `10.10.88.113` |'
- en: '| Switch4 | `10.10.88.114` |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| Switch4 | `10.10.88.114` |'
- en: Our Python script (or Ansible playbook) will be hosted on an external Windows
    PC that connects to the management of each device.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Python脚本（或Ansible剧本）将托管在连接到每个设备的管理的外部Windows PC上。
- en: Adding new nodes
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新节点
- en: 'We will start by choosing the IOSv image that was already uploaded to EVE and
    add four switches to the topology. Right-click on any empty space in the topology
    and from the drop-down menu named Add a new object, choose to add a Node:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先选择已经上传到EVE的IOSv图像，并将四个交换机添加到拓扑。右键单击拓扑中的任何空白处，并从下拉菜单中选择添加新对象，选择添加节点：
- en: '![](../images/00060.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00060.jpeg)'
- en: 'You should see two Cisco images colored blue as indication that they were successfully
    added to the available images inside the EVE-NG library and mapped to the corresponding
    template. Choose Cisco vIOS L2 to add Cisco switches:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到两个蓝色的Cisco图像，表示它们已成功添加到EVE-NG库中的可用图像，并映射到相应的模板。选择Cisco vIOS L2以添加Cisco交换机：
- en: '![](../images/00061.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00061.jpeg)'
- en: 'Increase the Number of nodes to add to 4 and click OK:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 增加要添加的节点数到4，然后点击确定：
- en: '![](../images/00062.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00062.jpeg)'
- en: 'Now, you will see four switches added to the topology; repeat this again and
    add the router, but this time choose Cisco vIOS:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将看到四个交换机添加到拓扑；再次重复此操作并添加路由器，但这次选择Cisco vIOS：
- en: '![](../images/00063.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00063.jpeg)'
- en: Connecting nodes together
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接节点
- en: 'Now, start to connect the nodes with each other while the nodes are offline,
    and repeat for each node till you finish connecting all of them inside the topology;
    then, start the lab:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，开始连接节点，当节点离线时，重复每个节点，直到您完成连接拓扑内的所有节点；然后，开始实验：
- en: '![](../images/00064.gif)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00064.gif)'
- en: 'The final view after adding IP addresses and some custom shapes to the topology
    will be as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在将IP地址和一些自定义形状添加到拓扑后的最终视图如下：
- en: '![](../images/00065.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00065.jpeg)'
- en: 'Now, our topology is ready and should be loaded with basic configuration. I
    used the following snippet as a configuration base for any Cisco-IOS device that
    enabled SSH and telnet and configured the username for access. Notice that there
    are some parameters surrounded with `{{ }}`. We will discuss them in the next
    chapter when we generate a golden configuration using a Jinja2 template but, for
    now, replace them with `hostname` and the management IP address for each device
    respectively:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的拓扑已经准备就绪，并且应该加载基本配置。我使用以下片段作为启用SSH和telnet的任何Cisco-IOS设备的配置基础，并配置了用于访问的用户名。请注意，有一些参数被`{{
    }}`包围。我们将在下一章讨论它们，当我们使用Jinja2模板生成一个黄金配置时，但现在，分别用`hostname`和每个设备的管理IP地址替换它们：
- en: '[PRE4]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the different types of network automation
    available today and why we chose Python to be our primary tool in network automation.
    Also, we learned how to install EVE-NG over different hypervisors and platforms,
    how to provide the initial configuration, and how to add our network images to
    the images catalog. Then, we added different nodes and connected them together
    to create our network enterprise lab.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了当今可用的不同类型的网络自动化，以及为什么我们选择Python作为网络自动化中的主要工具。此外，我们学习了如何在不同的hypervisor和平台上安装EVE-NG，如何提供初始配置，以及如何将我们的网络图像添加到图像目录中。然后，我们添加了不同的节点并将它们连接在一起，以创建我们的网络企业实验室。
- en: In the next chapter, we will start building our Python scripts that automate
    different tasks in the topology using different Python libraries, such as telnetlib,
    Netmiko, Paramiko, and Pexpect.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始构建我们的Python脚本，使用不同的Python库（如telnetlib、Netmiko、Paramiko和Pexpect）自动化拓扑中的不同任务。
