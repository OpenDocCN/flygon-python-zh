["```py\n$ docker run --name postgres -e POSTGRES_PASSWORD=secret -e POSTGRES_DB=users -p 5432:5432 -d postgres\n```", "```py\n$ docker ps\n```", "```py\n$ pip-compile requirements/base.in\n$ pip-sync requirements/base.txt requirements/test.txt\n```", "```py\nfrom sqlalchemy import Column, Integer, Unicode \nfrom sqlalchemy.ext.declarative import declarative_base \n\nBase = declarative_base() \n```", "```py\nclass User(Base): \n    __tablename__ = 'users' \n\n    id = Column(Integer, primary_key=True) \n    first_name = Column(Unicode(length=128)) \n    last_name = Column(Unicode(length=128)) \n    email = Column(Unicode(length=256), unique=True) \n    password = Column(Unicode(length=512)) \n```", "```py\nclass UserWrapper: \n\n    def __init__(self, session): \n        self.session = session \n```", "```py\nfrom nameko_sqlalchemy import DatabaseSession \n```", "```py\nclass UserStore(DatabaseSession): \n\n    def __init__(self): \n        super().__init__(Base) \n\n    def get_dependency(self, worker_ctx): \n        database_session = super().get_dependency(worker_ctx) \n        return UserWrapper(session=database_session) \n```", "```py\ndef create(self, **kwargs): \n    user = User(**kwargs) \n    self.session.add(user) \n    self.session.commit() \n```", "```py\nfrom nameko.rpc import rpc \nfrom .dependencies.users import UserStore \n\nclass UserService: \n\n    name = 'user_service' \n    user_store = UserStore() \n\n    @rpc \n    def create_user(self, first_name, last_name, email, password): \n        self.user_store.create( \n            first_name=first_name, \n            last_name=last_name, \n            email=email, \n            password=password, \n        ) \n```", "```py\nDB_URIS: \n  user_service:Base: \n    \"postgresql+psycopg2://postgres:secret@localhost/ \n    users?client_encoding=utf8\" \n```", "```py\nfrom sqlalchemy import create_engine \nfrom temp_messenger.dependencies.users import User \n\nengine = create_engine( \n    'postgresql+psycopg2://postgres:secret@localhost/' \n    'users?client_encoding=utf8' \n) \nUser.metadata.create_all(engine) \n```", "```py\n$ python setup_db.py\n```", "```py\n$ nameko run temp_messenger.user_service --config config.yaml\n```", "```py\n$ nameko shell\n```", "```py\n>>> n.rpc.user_service.create_user('John', 'Doe', 'john@example.com', 'super-secret')\n```", "```py\n>>> from bcrypt import gensalt\n>>> gensalt()\nb'$2b$12$fiDoHXkWx6WMOuIfOG4Gku'\n```", "```py\n>>> gensalt(rounds=14)\nb'$2b$14$kOUKDC.05iq1ANZPgBXxYO'\n```", "```py\n>>> from bcrypt import hashpw, gensalt\n>>> my_password = b'super-secret'\n>>> salt = gensalt()\n>>> salt\nb'$2b$12$YCnmXxOcs/GJVTHinSoVs.'\n>>> hashpw(my_password, salt)\nb'$2b$12$YCnmXxOcs/GJVTHinSoVs.43v/.RVKXQSdOhHffiGNk2nMgKweR4u'\n```", "```py\n>>> from bcrypt import hashpw, checkpw, gensalt\n>>> my_password = b'super-secret'\n>>> salt = gensalt()\n>>> hashed_password = hashpw(my_password, salt)\n>>> password_attempt = b'super-secret'\n>>> checkpw(password_attempt, hashed_password)\nTrue\n```", "```py\n>>> password_attempt = b'invalid-password'\n>>> checkpw(password_attempt, hashed_password)\nFalse\n```", "```py\nimport bcrypt \n\nHASH_WORK_FACTOR = 15 \n```", "```py\ndef hash_password(plain_text_password): \n    salt = bcrypt.gensalt(rounds=HASH_WORK_FACTOR) \n    encoded_password = plain_text_password.encode() \n\n    return bcrypt.hashpw(encoded_password, salt) \n```", "```py\nfrom sqlalchemy import Column, Integer, LargeBinary, Unicode \n```", "```py\nclass User(Base): \n    __tablename__ = 'users' \n\n    id = Column(Integer, primary_key=True) \n    first_name = Column(Unicode(length=128)) \n    last_name = Column(Unicode(length=128)) \n    email = Column(Unicode(length=256), unique=True) \n    password = Column(LargeBinary()) \n```", "```py\n$ docker rm -f postgres\n$ docker run --name postgres -e POSTGRES_PASSWORD=secret -e POSTGRES_DB=users -p 5432:5432 -d postgres\n$ python setup_db.py\n```", "```py\ndef create(self, **kwargs): \n    plain_text_password = kwargs['password'] \n    hashed_password = hash_password(plain_text_password) \n    kwargs.update(password=hashed_password) \n\n    user = User(**kwargs) \n    self.session.add(user) \n    self.session.commit() \n```", "```py\n$ nameko run temp_messenger.user_service --config config.yaml\n```", "```py\n$ nameko shell\n```", "```py\n>>> n.rpc.user_service.create_user('John', 'Doe', 'john@example.com', 'super-secret')\n```", "```py\nclass CreateUserError(Exception): \n    pass \n\nclass UserAlreadyExists(CreateUserError): \n    pass \n```", "```py\nfrom sqlalchemy.exc import IntegrityError \n```", "```py\ndef create(self, **kwargs): \n    plain_text_password = kwargs['password'] \n    hashed_password = hash_password(plain_text_password) \n    kwargs.update(password=hashed_password) \n\n    user = User(**kwargs) \n    self.session.add(user) \n\n    try: \n        self.session.commit() # \u2460 \n    except IntegrityError as err: \n        self.session.rollback() # \u2461 \n        error_message = err.args[0] # \u2462 \n\n        if 'already exists' in error_message: \n            email = kwargs['email'] \n            message = 'User already exists - {}'.format(email) \n            raise UserAlreadyExists(message) # \u2463 \n        else: \n            raise CreateUserError(error_message) # \u2464 \n```", "```py\nclass UserNotFound(Exception): \n    pass \n```", "```py\nfrom sqlalchemy.orm.exc import NoResultFound \n```", "```py\ndef get(self, email): \n    query = self.session.query(User) # \u2460 \n\n    try: \n        user = query.filter_by(email=email).one() # \u2461 \n    except NoResultFound: \n        message = 'User not found - {}'.format(email) \n        raise UserNotFound(message) # \u2462 \n\n    return user \n```", "```py\nclass AuthenticationError(Exception): \n    pass \n```", "```py\ndef authenticate(self, email, password): \n    user = self.get(email) # \u2460 \n\n    if not bcrypt.checkpw(password.encode(), user.password): # \u2461 \n        message = 'Incorrect password for {}'.format(email) \n        raise AuthenticationError(message) # \u2462 \n```", "```py\n@rpc \ndef authenticate_user(self, email, password): \n    self.user_store.authenticate(email, password) \n```", "```py\n>>> n.rpc.user_service.authenticate_user('john@example.com', 'super-secret')\n>>>\n```", "```py\n>>> n.rpc.user_service.authenticate_user('john@example.com', 'wrong')\nTraceback (most recent call last):\n...\nnameko.exceptions.RemoteError: PasswordMismatch Incorrect password for john@example.com\n>>>\n```", "```py\nfrom nameko.rpc import rpc \nfrom .dependencies.messages import MessageStore \n\nclass MessageService: \n\n    name = 'message_service' \n\n    message_store = MessageStore() \n\n    @rpc \n    def get_message(self, message_id): \n        return self.message_store.get_message(message_id) \n\n    @rpc \n    def save_message(self, message): \n        message_id = self.message_store.save_message(message) \n        return message_id \n\n    @rpc \n    def get_all_messages(self): \n        messages = self.message_store.get_all_messages() \n        sorted_messages = sort_messages_by_expiry(messages) \n        return sorted_messages \n\ndef sort_messages_by_expiry(messages, reverse=False): \n    return sorted( \n        messages, \n        key=lambda message: message['expires_in'], \n        reverse=reverse \n    ) \n```", "```py\nfrom flask import Flask, render_template # \u2460 \n\napp = Flask(__name__) # \u2461 \n\n@app.route('/') # \u2462 \ndef home(): \n    return render_template('home.html') # \u2463 \n```", "```py\n$ export FLASK_DEBUG=1\n$ export FLASK_APP=temp_messenger/web_server.py\n```", "```py\n$ flask run -h 0.0.0.0 -p 8000\n```", "```py\nfrom flask.views import MethodView \nfrom nameko.standalone.rpc import ClusterRpcProxy \nfrom flask.json import jsonify \n```", "```py\nimport yaml \nwith open('config.yaml', 'r') as config_file: \n    config = yaml.load(config_file) \n```", "```py\nclass MessageAPI(MethodView): \n\n    def get(self): \n        with ClusterRpcProxy(config) as rpc: \n            messages = rpc.message_service.get_all_messages() \n\n        return jsonify(messages) \n```", "```py\nfrom flask import Flask, render_template, request \n```", "```py\ndef post(self): # \u2460 \n    data = request.get_json(force=True) # \u2461 \n\n    try: \n        message = data['message'] # \u2462 \n    except KeyError: \n        return 'No message given', 400 \n\n    with ClusterRpcProxy(config) as rpc: # \u2463 \n        rpc.message_service.save_message(message) \n\n    return '', 204 # \u2464 \n```", "```py\napp.add_url_rule( \n    '/messages', view_func=MessageAPI.as_view('messages') \n) \n```", "```py\n$ nameko run temp_messenger.message_service --config config.yaml\n```", "```py\nFLASK_SECRET_KEY: 'my-super-secret-flask-key' \n```", "```py\napp.secret_key = config['FLASK_SECRET_KEY'] \n```", "```py\nclass SignUpView(MethodView): \n\n    def get(self): \n        return render_template('sign_up.html') \n```", "```py\napp.add_url_rule( \n    '/sign_up', view_func=SignUpView.as_view('sign_up') \n) \n```", "```py\n<!DOCTYPE html> \n<body> \n  <h1>Sign up</h1> \n  <form action=\"/sign_up\" method=\"post\"> \n    <input type=\"text\" name=\"first_name\" placeholder=\"First Name\"> \n    <input type=\"text\" name=\"last_name\" placeholder=\"Last Name\"> \n    <input type=\"text\" name=\"email\" placeholder=\"Email\"> \n    <input type=\"password\" name=\"password\" placeholder=\"Password\"> \n    <input type=\"submit\" value=\"Submit\"> \n  </form> \n  {% if error_message %} \n    <p>{{ error_message }}</p> \n  {% endif %} \n</body> \n```", "```py\nfrom nameko.exceptions import RemoteError \nfrom flask import ( \n    Flask, \n    Redirect, \n    render_template, \n    request, \n    session, \n    url_for, \n) \n```", "```py\ndef post(self): \n    first_name = request.form['first_name'] # \u2460 \n    last_name = request.form['last_name'] \n    email = request.form['email'] \n    password = request.form['password'] \n\n    with ClusterRpcProxy(config) as cluster_rpc: \n        try: \n            cluster_rpc.user_service.create_user( # \u2461 \n                first_name=first_name, \n                last_name=last_name, \n                email=email, \n                password=password, \n            ) \n        except RemoteError as err: # \u2462 \n            message = 'Unable to create user {} - {}'.format( \n                err.value \n            ) \n            app.logger.error(message) \n            return render_template( \n                'sign_up.html', error_message=message \n            ) \n\n    session['authenticated'] = True # \u2463 \n    session['email'] = email # \u2464 \n\n    return redirect(url_for('home')) # \u2465 \n```", "```py\nnameko run temp_messenger.user_service --config config.yaml \n```", "```py\n{% if authenticated %} \n  <form action=\"/messages\" id=\"postMessage\"> \n    <input type=\"text\" name=\"message\" placeholder=\"Post message\"> \n    <input type=\"submit\" value=\"Post\"> \n  </form> \n{% else %} \n  <p><a href=\"/sign_up\">Sign up</a></p> \n{% endif %} \n```", "```py\ndef user_authenticated(): \n    return session.get('authenticated', False) \n```", "```py\n@app.route('/') \ndef home(): \n    authenticated = user_authenticated() \n    return render_template( \n        'home.html', authenticated=authenticated \n    ) \n```", "```py\ndef get(self): \n    if user_authenticated(): \n        return redirect(url_for('home')) \n    else: \n        return render_template(sign_up.html') \n```", "```py\ndef post(self): \n    if not user_authenticated() \n        return 'Please log in', 401 \n    ... \n```", "```py\n@app.route('/logout') \ndef logout(): \n    session.clear() \n    return redirect(url_for('home')) \n```", "```py\n{% if authenticated %} \n  <form action=\"/messages\" id=\"postMessage\"> \n    <input type=\"text\" name=\"message\" placeholder=\"Post message\"> \n    <input type=\"submit\" value=\"Post\"> \n  </form> \n  <p><a href=\"/logout\">Logout</a></p> \n... \n```", "```py\nclass LoginView(MethodView): \n\n    def get(self): \n        if user_authenticated(): \n            return redirect(url_for('home')) \n        else: \n            return render_template('login.html') \n```", "```py\napp.add_url_rule( \n    '/login', view_func=LoginView.as_view('login') \n) \n```", "```py\n<!DOCTYPE html> \n<body> \n  <h1>Login</h1> \n  <form action=\"/login\" method='post'> \n    <input type=\"text\" name=\"email\" placeholder=\"Email\"> \n    <input type=\"password\" name=\"password\" placeholder=\"Password\"> \n    <input type=\"submit\" value=\"Post\"> \n  </form> \n  {% if login_error %} \n    <p>Bad log in</p> \n  {% endif %} \n</body> \n```", "```py\n{% if authenticated %} \n... \n{% else %} \n  <p><a href=\"/login\">Login</a></p> \n  <p><a href=\"/sign_up\">Sign up</a></p> \n{% endif %} \n```", "```py\ndef post(self): \n    email = request.form['email'] # \u2460 \n    password = request.form['password'] \n\n    with ClusterRpcProxy(config) as cluster_rpc: \n        try: \n            cluster_rpc.user_service.authenticate_user( # \u2461 \n                email=email, \n                password=password, \n            ) \n        except RemoteError as err: # \u2462 \n            app.logger.error( \n                'Bad login for %s - %s', email, str(err) \n            ) \n            return render_template( \n                'login.html', login_error=True \n            ) \n\n    session['authenticated'] = True # \u2463 \n    session['email'] = email # \u2464 \n\n    return redirect(url_for('home')) # \u2465 \n```", "```py\ndef save_message(self, email, message): \n    message_id = uuid4().hex \n    payload = { \n        'email': email, \n        'message': message, \n    } \n    self.redis.hmset(message_id, payload) \n    self.redis.pexpire(message_id, MESSAGE_LIFETIME) \n\n    return message_id \n```", "```py\ndef get_all_messages(self): \n    return [ \n        { \n            'id': message_id, \n            'email': self.redis.hget(message_id, 'email'), \n            'message': self.redis.hget(message_id, 'message'), \n            'expires_in': self.redis.pttl(message_id), \n        } \n        for message_id in self.redis.keys() \n    ] \n```", "```py\n@rpc \ndef save_message(self, email, message): \n    message_id = self.message_store.save_message( \n        email, message \n    ) \n    return message_id \n```", "```py\ndef post(self): \n    if not user_authenticated(): \n        return 'Please log in', 401 \n\n    email = session['email'] # \u2460 \n    data = request.get_json(force=True) \n\n    try: \n        message = data['message'] \n    except KeyError: \n        return 'No message given', 400 \n\n    with ClusterRpcProxy(config) as rpc: \n        rpc.message_service.save_message(email, message) # \u2461 \n\n    return '', 204 \n```", "```py\nfunction updateMessages(messages) { \n  var $messageContainer = $('#messageContainer'); \n  var messageList = []; \n  var emptyMessages = '<p>No messages!</p>'; \n\n  if (messages.length === 0) { \n    $messageContainer.html(emptyMessages); \n  } else { \n    $.each(messages, function(index, value) { \n      var message = $(value.message).text() || value.message; \n      messageList.push( \n        '<p>' + value.email + ': ' + message + '</p>' \n      ); \n    }); \n    $messageContainer.html(messageList); \n  } \n} \n```", "```py\n$ docker exec -it redis /bin/bash\n$ redis-cli -h redis\nredis:6379> flushall\nOK\nredis:6379>\n```"]