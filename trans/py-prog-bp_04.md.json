["```py\npip install pipenv\n```", "```py\npipenv --help\n```", "```py\nmkdir currency_converter && cd currency_converter\n```", "```py\npipenv --python python3.6\n```", "```py\n[[source]]\n\nurl = \"https://pypi.python.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[dev-packages]\n\n[packages]\n\n[requires]\n\npython_version = \"3.6\"\n```", "```py\npipenv install requests\n```", "```py\npipenv install pymongo\n```", "```py\n[[source]]\n\nurl = \"https://pypi.python.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[dev-packages]\n\n[packages]\n\nrequests = \"*\"\npymongo = \"*\"\n\n[requires]\n\npython_version = \"3.6\"\n```", "```py\npipenv graph\n```", "```py\ncurrency_converter\n\u2514\u2500\u2500 currency_converter\n    \u251c\u2500\u2500 config\n    \u251c\u2500\u2500 core   \n```", "```py\nsudo apt install mongodb\n```", "```py\nMongoDB shell version: 3.2.11\nconnecting to: test\n```", "```py\nimport requests\nfrom http import HTTPStatus\nimport json\n```", "```py\ndef fetch_exchange_rates_by_currency(currency):\n    response = requests.get(f'https://api.fixer.io/latest?base=\n                            {currency}')\n\n    if response.status_code == HTTPStatus.OK:\n        return json.loads(response.text)\n    elif response.status_code == HTTPStatus.NOT_FOUND:\n        raise ValueError(f'Could not find the exchange rates for: \n                         {currency}.')\n    elif response.status_code == HTTPStatus.BAD_REQUEST:\n        raise ValueError(f'Invalid base currency value: {currency}')\n    else:\n        raise Exception((f'Something went wrong and we were unable \n                         to fetch'\n                         f' the exchange rates for: {currency}'))\n```", "```py\nfrom .request import fetch_exchange_rates_by_currency\n```", "```py\nPython 3.6.3 (default, Nov 21 2017, 06:53:07)\n[GCC 6.3.0 20170516] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from currency_converter.core import fetch_exchange_rates_by_currency\n>>> from pprint import pprint as pp\n>>> exchange_rates = fetch_exchange_rates_by_currency('BRL')\n>>> pp(exchange_rates)\n{'base': 'BRL',\n 'date': '2017-12-06',\n 'rates': {'AUD': 0.40754,\n 'BGN': 0.51208,\n 'CAD': 0.39177,\n 'CHF': 0.30576,\n 'CNY': 2.0467,\n 'CZK': 6.7122,\n 'DKK': 1.9486,\n 'EUR': 0.26183,\n 'GBP': 0.23129,\n 'HKD': 2.4173,\n 'HRK': 1.9758,\n 'HUF': 82.332,\n 'IDR': 4191.1,\n 'ILS': 1.0871,\n 'INR': 19.963,\n 'JPY': 34.697,\n 'KRW': 338.15,\n 'MXN': 5.8134,\n 'MYR': 1.261,\n 'NOK': 2.5548,\n 'NZD': 0.4488,\n 'PHP': 15.681,\n 'PLN': 1.1034,\n 'RON': 1.2128,\n 'RUB': 18.273,\n 'SEK': 2.599,\n 'SGD': 0.41696,\n 'THB': 10.096,\n 'TRY': 1.191,\n 'USD': 0.3094,\n 'ZAR': 4.1853}}\n```", "```py\n  from pymongo import MongoClient\n```", "```py\nclass DbClient:\n\n    def __init__(self, db_name, default_collection):\n        self._db_name = db_name\n        self._default_collection = default_collection\n        self._db = None\n```", "```py\n    def connect(self):\n        self._client = MongoClient('mongodb://127.0.0.1:27017/')\n        self._db = self._client.get_database(self._db_name)\n\n    def disconnect(self):\n        self._client.close()\n```", "```py\n    def __enter__(self):\n        self.connect()\n        return self\n\n    def __exit__(self, exec_type, exec_value, traceback):\n        self.disconnect()\n\n        if exec_type:\n            raise exec_type(exec_value)\n\n        return self\n```", "```py\n    def _get_collection(self):\n        if self._default_collection is None:\n            raise AttributeError('collection argument is required')\n\n        return self._db[self._default_collection]\n```", "```py\n    def find_one(self, filter=None):\n        collection = self._get_collection()\n        return collection.find_one(filter)\n\n    def update(self, filter, document, upsert=True):\n        collection = self._get_collection()\n\n        collection.find_one_and_update(\n            filter,\n            {'$set': document},\n            upsert=upsert)\n```", "```py\nfrom .db import DbClient\n```", "```py\n    class ConfigError(Exception):\n      pass\n```", "```py\nfrom .config_error import ConfigError\nfrom currency_converter.core import DbClient\n\ndef get_config():\n    config = None\n\n    with DbClient('exchange_rates', 'config') as db:\n        config = db.find_one()\n\n    if config is None:\n        error_message = ('It was not possible to get your base \n                        currency, that '\n                       'probably happened because it have not been '\n                         'set yet.\\n Please, use the option '\n                         '--setbasecurrency')\n        raise ConfigError(error_message)\n\n    return config\n```", "```py\nfrom .config import get_config\n```", "```py\n  import sys\n  from argparse import Action\n  from datetime import datetime\n\n  from .db import DbClient\n  from .request import fetch_exchange_rates_by_currency\n  from currency_converter.config import get_config\n```", "```py\nclass SetBaseCurrency(Action):\n    def __init__(self, option_strings, dest, args=None, **kwargs):\n        super().__init__(option_strings, dest, **kwargs)\n```", "```py\n    def __call__(self, parser, namespace, value, option_string=None):\n        self.dest = value\n\n        try:\n            with DbClient('exchange_rates', 'config') as db:\n                db.update(\n                    {'base_currency': {'$ne': None}},\n                    {'base_currency': value})\n\n            print(f'Base currency set to {value}')\n        except Exception as e:\n            print(e)\n        finally:\n            sys.exit(0)\n```", "```py\nclass UpdateForeignerExchangeRates(Action):\n    def __init__(self, option_strings, dest, args=None, **kwargs):\n        super().__init__(option_strings, dest, **kwargs)\n```", "```py\ndef __call__(self, parser, namespace, value, option_string=None):\n\n        setattr(namespace, self.dest, True)\n\n        try:\n            config = get_config()\n            base_currency = config['base_currency']\n            print(('Fetching exchange rates from fixer.io'\n                   f' [base currency: {base_currency}]'))\n            response = \n            fetch_exchange_rates_by_currency(base_currency)\n            response['date'] = datetime.utcnow()\n\n            with DbClient('exchange_rates', 'rates') as db:\n                db.update(\n                    {'base': base_currency},\n                    response)\n        except Exception as e:\n            print(e)\n        finally:\n            sys.exit(0)\n```", "```py\nfrom enum import Enum\n\nclass Currency(Enum):\n    AUD = 'Australia Dollar'\n    BGN = 'Bulgaria Lev'\n    BRL = 'Brazil Real'\n    CAD = 'Canada Dollar'\n    CHF = 'Switzerland Franc'\n    CNY = 'China Yuan/Renminbi'\n    CZK = 'Czech Koruna'\n    DKK = 'Denmark Krone'\n    GBP = 'Great Britain Pound'\n    HKD = 'Hong Kong Dollar'\n    HRK = 'Croatia Kuna'\n    HUF = 'Hungary Forint'\n    IDR = 'Indonesia Rupiah'\n    ILS = 'Israel New Shekel'\n    INR = 'India Rupee'\n    JPY = 'Japan Yen'\n    KRW = 'South Korea Won'\n    MXN = 'Mexico Peso'\n    MYR = 'Malaysia Ringgit'\n    NOK = 'Norway Kroner'\n    NZD = 'New Zealand Dollar'\n    PHP = 'Philippines Peso'\n    PLN = 'Poland Zloty'\n    RON = 'Romania New Lei'\n    RUB = 'Russia Rouble'\n    SEK = 'Sweden Krona'\n    SGD = 'Singapore Dollar'\n    THB = 'Thailand Baht'\n    TRY = 'Turkish New Lira'\n    USD = 'USA Dollar'\n    ZAR = 'South Africa Rand'\n    EUR = 'Euro'\n```", "```py\nfrom .currency import Currency\n```", "```py\nimport sys\nfrom argparse import ArgumentParser\n\nfrom .actions import UpdateForeignerExchangeRates\nfrom .actions import SetBaseCurrency\nfrom .currency import Currency\n```", "```py\ndef parse_commandline_args():\n\n    currency_options = [currency.name for currency in Currency]\n\n    argparser = ArgumentParser(\n        prog='currency_converter',\n        description=('Tool that shows exchange rated and perform '\n                     'currency convertion, using http://fixer.io \n                       data.'))\n```", "```py\nargparser.add_argument('--setbasecurrency',\n                           type=str,\n                           dest='base_currency',\n                           choices=currency_options,\n                           action=SetBaseCurrency,\n                           help='Sets the base currency to be \n                           used.')\n```", "```py\n argparser.add_argument('--update',\n                           metavar='',\n                           dest='update',\n                           nargs=0,\n                           action=UpdateForeignerExchangeRates,\n                           help=('Update the foreigner exchange \n                                  rates '\n                                 'using as a reference the base  \n                                  currency'))\n```", "```py\nargparser.add_argument('--basecurrency',\n                           type=str,\n                           dest='from_currency',\n                           choices=currency_options,\n                           help=('The base currency. If specified it \n                                  will '\n                                 'override the default currency set \n                                  by'\n                                 'the --setbasecurrency option'))\n```", "```py\nargparser.add_argument('--value',\n                           type=float,\n                           dest='value',\n                           help='The value to be converted')\n```", "```py\n   argparser.add_argument('--to',\n                           type=str,\n                           dest='dest_currency',\n                           choices=currency_options,\n                           help=('Specify the currency that the value \n                                  will '\n                                 'be converted to.'))\n```", "```py\ndef validate_args(args):\n\n    fields = [arg for arg in vars(args).items() if arg]\n\n    if not fields:\n        return False\n\n    if args.value and not args.dest_currency:\n        return False\n    elif args.dest_currency and not args.value:\n        return False\n\n    return True\n```", "```py\n      args = argparser.parse_args()\n\n      if not validate_args(args):\n          argparser.print_help()\n          sys.exit()\n\n      return args\n```", "```py\npython -m currency_converter \n```", "```py\npython currency_converter/__main__.py\n```", "```py\nimport sys\n\nfrom .core.cmdline_parser import parse_commandline_args\nfrom .config import get_config\nfrom .core import DbClient\nfrom .core import fetch_exchange_rates_by_currency\n```", "```py\ndef main():\n    args = parse_commandline_args()\n    value = args.value\n    dest_currency = args.dest_currency\n    from_currency = args.from_currency\n\n    config = get_config()\n    base_currency = (from_currency\n                     if from_currency\n                     else config['base_currency'])\n```", "```py\n    with DbClient('exchange_rates', 'rates') as db:\n        exchange_rates = db.find_one({'base': base_currency})\n\n        if exchange_rates is None:\n            print(('Fetching exchange rates from fixer.io'\n                   f' [base currency: {base_currency}]'))\n\n            try:\n                response = \n                fetch_exchange_rates_by_currency(base_currency)\n            except Exception as e:\n                sys.exit(f'Error: {e}')\n\n            dest_rate = response['rates'][dest_currency]\n            db.update({'base': base_currency}, response)\n        else:\n            dest_rate = exchange_rates['rates'][dest_currency]\n\n        total = round(dest_rate * value, 2)\n        print(f'{value} {base_currency} = {total} {dest_currency}')\n```", "```py\nif __name__ == '__main__':\n    main()\n```"]