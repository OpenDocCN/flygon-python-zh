["```py\nfrom math import sqrt\n\ndef derivative(f,x):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns the value of the derivative of     the function at a given x-value.\"\"\"\n\u00a0\u00a0\u00a0\u00a0delta_x = 1/1000000\n\u00a0\u00a0\u00a0\u00a0return (f(x+delta_x) - f(x))/delta_x\n\ndef trap_integral(f,a,b,num):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns the sum of num trapezoids     under f between a and b\"\"\"\n\u00a0\u00a0\u00a0\u00a0width = (b-a)/num\n\u00a0\u00a0\u00a0\u00a0area = 0.5*width*(f(a) + f(b) + 2*sum([f(a+width*n) \\                                        for n in range(num)]))\n\u00a0\u00a0\u00a0\u00a0return area\n```", "```py\ndef curve_length(f,a,b,num):\n\u00a0\u00a0\u00a0\u00a0def g(x):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return sqrt(1+(derivative(f,x)**2))\n\u00a0\u00a0\u00a0\u00a0return trap_integral(g,a,b,num)\n```", "```py\ndef f(x):\n\u00a0\u00a0\u00a0\u00a0return 2*x\nprint(curve_length(f,0,2,1000))\n```", "```py\ndef f(x):\n\u00a0\u00a0\u00a0\u00a0return sqrt(1-x**2)\nprint(curve_length(f,-1,1,100))\n```", "```py\nValueError: math domain error\n```", "```py\ndef f(x):\n\u00a0\u00a0\u00a0\u00a0return 0.7*x**5 + 1.6*x**4-2.05*x**3 -3*x**2+2.95*x+2.9\nprint(curve_length(f,-2,1,1000))\n```", "```py\n9.628984854276812\n```", "```py\ndef f(x):\n\u00a0\u00a0\u00a0\u00a0return 0.7*x**5 + 1.6*x**4-2.05*x**3 -3*x**2+2.95*x+2.9\ndef curve_length2(f,a,b,num=1000):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns the length of f between\\\n\u00a0\u00a0\u00a0\u00a0a and b using num slices\"\"\"\n\u00a0\u00a0\u00a0\u00a0output = 0\n\u00a0\u00a0\u00a0\u00a0width = (b-a)/num\n\u00a0\u00a0\u00a0\u00a0for i in range(num):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output += sqrt((f(a+(i+1)*width)-f(a+i*width))**2 + width**2)\n\u00a0\u00a0\u00a0\u00a0return output\n```", "```py\nprint(curve_length2(f,-2,1))\n```", "```py\n    def circle(x):\n    \u00a0\u00a0\u00a0\u00a0return sqrt(1-x**2)\n    ```", "```py\n    def curve_length2(f,a,b,num=1000):\n    \u00a0\u00a0\u00a0\u00a0\"\"\"Returns the length of f between\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a and b using num slices\"\"\"\n    \u00a0\u00a0\u00a0\u00a0output = 0\n    \u00a0\u00a0\u00a0\u00a0width = (b-a)/num\n    \u00a0\u00a0\u00a0\u00a0for i in range(num):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output += sqrt((f(a+(i+1)*width)-f(a+i*width))**2 \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ width**2)\n    \u00a0\u00a0\u00a0\u00a0return output\n    ```", "```py\n    print(curve_length2 (circle,-1,1))\n    ```", "```py\n    3.1415663562164773\n    ```", "```py\n    from math import sin, pi\n    ```", "```py\n    print(curve_length2(sin,0,2*pi))\n    ```", "```py\n    7.640391636335927\n    ```", "```py\ndef opposite(a,b,C):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns the side opposite the given angle in\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a triangle using the Law of Cosines\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Enter side, side, angle\"\"\"\n\u00a0\u00a0\u00a0\u00a0c = sqrt(a**2 + b**2 - 2*a*b*cos(C))\n\u00a0\u00a0\u00a0\u00a0return c\n```", "```py\nfrom math import sqrt,cos,pi\ndef spiral(r,a,b,step=0.0001):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns length of spiral r from\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a to b taking given step size\"\"\"\n\u00a0\u00a0\u00a0\u00a0length = 0\n\u00a0\u00a0\u00a0\u00a0theta = a\n\u00a0\u00a0\u00a0\u00a0while theta < b:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0length += opposite(r(theta),r(theta+step),step)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0theta += step\n\u00a0\u00a0\u00a0\u00a0return length\n```", "```py\ndef r(theta):\n\u00a0\u00a0\u00a0\u00a0return 5 + 0.12892*theta\n```", "```py\nspiral(r,0,2*pi*7.5)\n```", "```py\n378.8146271783955\n```", "```py\n    def r(theta):\n    \u00a0\u00a0\u00a0\u00a0return 3 + 0.1724*theta\n    ```", "```py\n    print(r(0),r(24*pi))\n    ```", "```py\n    3.0 15.998653763493127\n    ```", "```py\n    spiral(r,0,2*pi*12)\n    ```", "```py\n    716.3778471288748\n    ```", "```py\n    def r(theta):\n    \u00a0\u00a0\u00a0\u00a0return 2 + 0.0745*theta\n    ```", "```py\n    spiral(r,0,2*pi*23.5)\n    ```", "```py\n    1107.502879450013\n    ```", "```py\n    from math import e\n    def r(theta):\n    \u00a0\u00a0\u00a0\u00a0return 2*e**(0.315*theta)\n    ```", "```py\n    spiral(r,0,2*pi)\n    ```", "```py\n    41.518256747758976\n    ```", "```py\ndef partial_d(f,u,v,w,num=10000):\n\u00a0\u00a0\u00a0\u00a0\"\"\"returns the partial derivative of f\n\u00a0\u00a0\u00a0\u00a0with respect to u at (v,w)\"\"\"\n\u00a0\u00a0\u00a0\u00a0delta_u = 1/num\n\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if u == 'x':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (f(v+delta_u,w) - f(v,w))/delta_u\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (f(v,w+delta_u) - f(v,w))/delta_u\n\u00a0\u00a0\u00a0\u00a0except ValueError:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n```", "```py\ndef cross(u,v):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns the cross product of 2 3D vectors\n\u00a0\u00a0\u00a0\u00a0[[i,j,k],\\\n\u00a0\u00a0\u00a0\u00a0[1,0,dz/dx],\\\n\u00a0\u00a0\u00a0\u00a0[0,1,dz,dy]]\n\u00a0\u00a0\u00a0\u00a0cross([1,-1,2],[2,3,-5])\n\u00a0\u00a0\u00a0\u00a0>>> [-1, -9, 5]\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0return [u[1]*v[2]-v[1]*u[2],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-u[0]*v[2]+v[0]*u[2],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0u[0]*v[1]-v[0]*u[1]]\n```", "```py\nprint(cross([2,3,4],[5,6,7]))\n```", "```py\n[-3, 6, -3]\n```", "```py\ndef mag(vec):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns the magnitude of a 3D vector\"\"\"\n\u00a0\u00a0\u00a0\u00a0return sqrt(vec[0]**2+vec[1]**2+vec[2]**2)\n```", "```py\nfrom math import sqrt\ndef sphere(x,y):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Sphere of radius 1\"\"\"\n\u00a0\u00a0\u00a0\u00a0return sqrt(1-x**2-y**2) \ndef area(f,ax,bx,ay,by,num=1000):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns area of parallelogram formed by\n\u00a0\u00a0\u00a0\u00a0vectors with given partial derives\"\"\"\n\u00a0\u00a0\u00a0\u00a0running_sum = 0\n\u00a0\u00a0\u00a0\u00a0dx = (bx-ax)/num\n\u00a0\u00a0\u00a0\u00a0dy = (by-ay)/num\n\u00a0\u00a0\u00a0\u00a0for i in range(num):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(num):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x = ax+i*dx\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y = ay+j*dy\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dz_dx=partial_d(f,'x',x,y)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dz_dy=partial_d(f,'y',x,y)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0running_sum += mag(cross([1,0,dz_dx],[0,1,dz_dy]))*dx*dy\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n\u00a0\u00a0\u00a0\u00a0return running_sum\n```", "```py\nprint(\"Area of hemisphere:\",area(sphere,-1,1,-1,1))\n```", "```py\nArea of hemisphere: 6.210356913122\n```", "```py\n    from math import sin, cos, sqrt\n    def surface(x,y):\n    \u00a0\u00a0\u00a0\u00a0return 10*sin(sqrt(x**2+y**2))\n    print(\"Area of wave surface:\",area(surface,-5,5,-5,5))\n    ```", "```py\n    Area of wave surface: 608\\. 2832236305994\n    ```", "```py\n    def surface(x,y):\n    \u00a0\u00a0\u00a0\u00a0return 3*cos(x)+2*cos(x)*cos(y) \n    ```", "```py\n    print(\"Area of surface:\",area(surface,0,6.28,0,6.28))\n    ```", "```py\n    Area of surface: 99.80676808568984\n    ```", "```py\n    def surface(x,y):\n    \u00a0\u00a0\u00a0\u00a0return sqrt(1+sin(x)*cos(y))\n    ```", "```py\n    print(\"Area of surface:\",area(surface,0,6.28,0,6.28))\n    ```", "```py\n    Area of surface: 42.80527549685105\n    ```", "```py\ns = sum([i for i in range(1,11)])\n```", "```py\ns = sum([i**2 for i in range(1,n+1)])\n```", "```py\ndef arctan(x,n):\n\u00a0\u00a0\u00a0\u00a0\"\"\"Returns the arctangent of x using a series of n terms.\"\"\"\n\u00a0\u00a0\u00a0\u00a0return sum([((-1)**(i-1)*(x**(2*i-1)))/(2*i-1) \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(1,n+1)])\nprint(arctan(1/1.732,10))\n```", "```py\n0.523611120446175\n```", "```py\nfor n in range(1,10):\n\u00a0\u00a0\u00a0\u00a0print(4*sum([((-1)**(i-1))/(2*i-1) for i in range(1,n+1)]))\n```", "```py\n4.0\n2.666666666666667\n3.466666666666667\n2.8952380952380956\n3.3396825396825403\n2.9760461760461765\n3.2837384837384844\n3.017071817071818\n3.2523659347188767\n```", "```py\nfor n in [100,1000,1000000]:\n```", "```py\n3.1315929035585537\n3.140592653839794\n3.1415916535897743\n```", "```py\n    print(4*(4*arctan(1/5,10)-arctan(1/239,10)))\n    ```", "```py\n    3.1415926535897922\n    ```", "```py\n    from math import sqrt\n    for n in [100,1000,1000000]:\n    \u00a0\u00a0\u00a0\u00a0print(sqrt(6*sum([1/(i**2) for i in range(1,n+1)])))\n    ```", "```py\n    3.1320765318091053\n    3.1406380562059946\n    3.1415916986605086\n    ```", "```py\nfrom math import sqrt, factorial\none_over_pi = 2*sqrt(2)/9801*sum([(factorial(4*k)*(1103+26390*k))/ \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(((factorial(k))**4)*(396**(4*k))) for k in range(10)])\nprint(1/one_over_pi)\n```", "```py\n3.141592653589793\n```", "```py\n    \u00a0\u00a0def mystery_sum(x):\n    \u00a0\u00a0\u00a0\u00a0return sum([(((-1)**n)*n)/(4*n)*(x+3)**n for n in \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0range(1,1000000)])\n    ```", "```py\n    for x in range(-10,11):\n    \u00a0\u00a0\u00a0\u00a0print(x,mystery_sum(x))\n    ```", "```py\n    OverflowError: int too large to convert to float\n    ```", "```py\n    def mystery_sum(x):\n    \u00a0\u00a0\u00a0\u00a0try:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return sum([(((-1)**n)*n)/(4*n)*(x+3)**n \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for n in range(1,1000000)])\n    \u00a0\u00a0\u00a0\u00a0except OverflowError:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Infinity\"\n    ```", "```py\n    -10 Infinity\n    -9 Infinity\n    -8 Infinity\n    -7 Infinity\n    -6 Infinity\n    -5 Infinity\n    -4 249999.75\n    -3 0.0\n    -2 -0.25\n    -1 Infinity\n    0 Infinity\n    1 Infinity\n    ...\n    ```", "```py\n    def mystery_sum(x):\n    \u00a0\u00a0\u00a0\u00a0try:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return sum([n*x**n/(5**(2*n)) for n in range(1,10000)])\n    \u00a0\u00a0\u00a0\u00a0except OverflowError:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Infinity\"\n\n    for x in range(-30,30):\n    \u00a0\u00a0\u00a0\u00a0print(x,mystery_sum(x))\n    ```", "```py\n    -30 Infinity \n    -29 Infinity \n    -28 Infinity \n    -27 Infinity \n    -26 -1.0561866634327267e+174 \n    -25 -5000.0 \n    -24 -0.24989587671803576 \n    -23 -0.24956597222222246 \n    -22 -0.24898143956541371 \n    -21 -0.24810964083175827 \n    -20 -0.24691358024691298\n    ...\n    18 9.18367346938776 \n    19 13.19444444444444 \n    20 19.999999999999993 \n    21 32.812499999999964 \n    22 61.11111111111108 \n    23 143.74999999999983 \n    24 599.9999999999994 \n    25 49995000.0 \n    26 5.3728208568640556e+175 \n    27 Infinity \n    28 Infinity\n    29 Infinity\n    ```", "```py\n    from math import factorial\n    print(sum([1/factorial(n) for n in range(10000)]))\n    ```", "```py\n    2.7182818284590455\n    ```"]