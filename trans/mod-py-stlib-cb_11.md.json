["```py\nimport json\nimport datetime\nimport decimal\nimport types\n\nclass CustomJSONEncoder(json.JSONEncoder):\n    \"\"\"JSON Encoder with support for additional types.\n\n    Supports dates, times, decimals, generators and\n    any custom class that implements __json__ method.\n    \"\"\"\n    def default(self, obj):\n        if hasattr(obj, '__json__') and callable(obj.__json__):\n            return obj.__json__()\n        elif isinstance(obj, (datetime.datetime, datetime.time)):\n            return obj.replace(microsecond=0).isoformat()\n        elif isinstance(obj, datetime.date):\n            return obj.isoformat()\n        elif isinstance(obj, decimal.Decimal):\n            return float(obj)\n        elif isinstance(obj, types.GeneratorType):\n            return list(obj)\n        else:\n            return super().default(obj)\n```", "```py\njsonstr = json.dumps({'s': 'Hello World',\n                    'dt': datetime.datetime.utcnow(),\n                    't': datetime.datetime.utcnow().time(),\n                    'g': (i for i in range(5)),\n                    'd': datetime.date.today(),\n                    'dct': {\n                        's': 'SubDict',\n                        'dt': datetime.datetime.utcnow()\n                    }}, \n                    cls=CustomJSONEncoder)\n\n>>> print(jsonstr)\n{\"t\": \"10:53:53\", \n \"s\": \"Hello World\", \n \"d\": \"2018-06-29\", \n \"dt\": \"2018-06-29T10:53:53\", \n \"dct\": {\"dt\": \"2018-06-29T10:53:53\", \"s\": \"SubDict\"}, \n \"g\": [0, 1, 2, 3, 4]}\n```", "```py\nclass Person:\n    def __init__(self, name, surname):\n        self.name = name\n        self.surname = surname\n\n    def __json__(self):\n        return {\n            'name': self.name,\n            'surname': self.surname\n        }\n```", "```py\n>>> print(json.dumps({'person': Person('Simone', 'Marzola')}, \n                     cls=CustomJSONEncoder))\n{\"person\": {\"name\": \"Simone\", \"surname\": \"Marzola\"}}\n```", "```py\n>>> print(json.loads(jsonstr))\n{'g': [0, 1, 2, 3, 4], \n 'd': '2018-06-29', \n 's': 'Hello World', \n 'dct': {'s': 'SubDict', 'dt': '2018-06-29T10:56:30'}, \n 't': '10:56:30', \n 'dt': '2018-06-29T10:56:30'}\n```", "```py\nclass CustomJSONDecoder(json.JSONDecoder):\n    \"\"\"Custom JSON Decoder that tries to decode additional types.\n\n    Decoder tries to guess dates, times and datetimes in ISO format.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(\n            *args, **kwargs, object_hook=self.parse_object\n        )\n\n    def parse_object(self, values):\n        for k, v in values.items():\n            if not isinstance(v, str):\n                continue\n\n            if len(v) == 10 and v.count('-') == 2:\n                # Probably contains a date\n                try:\n                    values[k] = datetime.datetime.strptime(v, '%Y-\n                    %m-%d').date()\n                except:\n                    pass\n            elif len(v) == 8 and v.count(':') == 2:\n                # Probably contains a time\n                try:\n                    values[k] = datetime.datetime.strptime(v, \n                    '%H:%M:%S').time()\n                except:\n                    pass\n            elif (len(v) == 19 and v.count('-') == 2 and \n                v.count('T') == 1 and v.count(':') == 2):\n                # Probably contains a datetime\n                try:\n                    values[k] = datetime.datetime.strptime(v, '%Y-\n                    %m-%dT%H:%M:%S')\n                except:\n                    pass\n        return values\n```", "```py\n>>> jsondoc = json.loads(jsonstr, cls=CustomJSONDecoder)\n>>> print(jsondoc)\n{'g': [0, 1, 2, 3, 4], \n 'd': datetime.date(2018, 6, 29), \n 's': 'Hello World', \n 'dct': {'s': 'SubDict', 'dt': datetime.datetime(2018, 6, 29, 10, 56, 30)},\n 't': datetime.time(10, 56, 30), \n 'dt': datetime.datetime(2018, 6, 29, 10, 56, 30)}\n```", "```py\njson.dumps({'key': 'value', cls=CustomJSONEncoder)\n```", "```py\nclass CustomJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if hasattr(obj, '__json__') and callable(obj.__json__):\n            return obj.__json__()\n        elif isinstance(obj, (datetime.datetime, datetime.time)):\n            return obj.replace(microsecond=0).isoformat()\n        elif isinstance(obj, datetime.date):\n            return obj.isoformat()\n        elif isinstance(obj, decimal.Decimal):\n            return float(obj)\n        elif isinstance(obj, types.GeneratorType):\n            return list(obj)\n        else:\n            return super().default(obj)\n```", "```py\nif hasattr(obj, '__json__') and callable(obj.__json__):\n    return obj.__json__()\n```", "```py\nelif isinstance(obj, (datetime.datetime, datetime.time)):\n    return obj.replace(microsecond=0).isoformat()\nelif isinstance(obj, datetime.date):\n    return obj.isoformat()\n```", "```py\nelif isinstance(obj, decimal.Decimal):\n    return float(obj)\n```", "```py\nelif isinstance(obj, types.GeneratorType):\n    return list(obj)\n```", "```py\nelse:\n    return super().default(obj)\n```", "```py\nclass CustomJSONDecoder(json.JSONDecoder):\n    def __init__(self, *args, **kwargs):\n        super().__init__(\n            *args, **kwargs, object_hook=self.parse_object\n        )\n```", "```py\ndef parse_object(self, values):\n    for k, v in values.items():\n        if not isinstance(v, str):\n            continue\n\n        if len(v) == 10 and v.count('-') == 2:\n            # Probably contains a date\n            try:\n                values[k] = datetime.datetime.strptime(v, '%Y-%m-\n                %d').date()\n            except:\n                pass\n        elif len(v) == 8 and v.count(':') == 2:\n            # Probably contains a time\n            try:\n                values[k] = datetime.datetime.strptime(v, \n                '%H:%M:%S').time()\n            except:\n                pass\n        elif (len(v) == 19 and v.count('-') == 2 and \n            v.count('T') == 1 and v.count(':') == 2):\n            # Probably contains a datetime\n            try:\n                values[k] = datetime.datetime.strptime(v, '%Y-%m-\n                %dT%H:%M:%S')\n            except:\n                pass\n    return values\n```", "```py\n{'g': [0, 1, 2, 3, 4], \n 'd': '2018-06-29', \n 's': 'Hello World', \n```", "```py\nfor k, v in values.items():\n    if not isinstance(v, str):\n        continue\n```", "```py\nelif (len(v) == 19 and v.count('-') == 2 and \n      v.count('T') == 1 and v.count(':') == 2):\n    # Probably contains a datetime\n```", "```py\n# Probably contains a datetime\ntry:\n    values[k] = datetime.datetime.strptime(v, '%Y-%m-%dT%H:%M:%S')\nexcept:\n    pass\n```", "```py\nimport urllib.parse\n\ndef parse_url(url):\n    \"\"\"Parses an URL of the most widespread format.\n\n    This takes for granted there is a single set of parameters\n    for the whole path.\n    \"\"\"\n    parts = urllib.parse.urlparse(url)\n    parsed = vars(parts)\n    parsed['query'] = urllib.parse.parse_qs(parts.query)\n    return parsed\n```", "```py\n>>> url = 'http://user:pwd@host.com:80/path/subpath?arg1=val1&arg2=val2#fragment'\n>>> result = parse_url(url)\n>>> print(result)\nOrderedDict([('scheme', 'http'),\n             ('netloc', 'user:pwd@host.com:80'),\n             ('path', '/path/subpath'),\n             ('params', ''),\n             ('query', {'arg1': ['val1'], 'arg2': ['val2']}),\n             ('fragment', 'fragment')])\n```", "```py\n>>> url = 'http://user:pwd@host.com:80/root;para1/subpath;para2?arg1=val1#fragment'\n>>> result = urllib.parse.urlparse(url)\n>>> print(result)\nParseResult(scheme='http', netloc='user:pwd@host.com:80', \n            path='/root;para1/subpath', \n            params='para2', \n            query='arg1=val1', \n            fragment='fragment')\n```", "```py\n>>> parsed = urllib.parse.urlsplit(url)\n>>> print(parsed)\nSplitResult(scheme='http', netloc='user:pwd@host.com:80', \n            path='/root;para1/subpath;para2', \n            query='arg1=val1', \n            fragment='fragment')\n```", "```py\nimport urllib.request\nimport urllib.parse\nimport json\n\ndef http_request(url, query=None, method=None, headers={}, data=None):\n    \"\"\"Perform an HTTP request and return the associated response.\"\"\"\n    parts = vars(urllib.parse.urlparse(url))\n    if query:\n        parts['query'] = urllib.parse.urlencode(query)\n\n    url = urllib.parse.ParseResult(**parts).geturl()\n    r = urllib.request.Request(url=url, method=method, \n                            headers=headers,\n                            data=data)\n    with urllib.request.urlopen(r) as resp:\n        msg, resp = resp.info(), resp.read()\n\n    if msg.get_content_type() == 'application/json':\n        resp = json.loads(resp.decode('utf-8'))\n\n    return msg, resp\n```", "```py\n>>> msg, resp = http_request('https://httpbin.org/bytes/16')\n>>> print(msg.get_content_type(), resp)\napplication/octet-stream b'k\\xe3\\x05\\x06=\\x17\\x1a9%#\\xd0\\xae\\xd8\\xdc\\xf9>'\n```", "```py\n>>> msg, resp = http_request('https://httpbin.org/get', query={\n...     'a': 'Hello',\n...     'b': 'World'\n... })\n>>> print(msg.get_content_type(), resp)\napplication/json\n{'url': 'https://httpbin.org/get?a=Hello&b=World', \n 'headers': {'Accept-Encoding': 'identity', \n             'User-Agent': 'Python-urllib/3.5', \n             'Connection': 'close', \n             'Host': 'httpbin.org'}, \n 'args': {'a': 'Hello', 'b': 'World'}, \n 'origin': '127.19.102.123'}\n```", "```py\n>>> msg, resp = http_request('https://httpbin.org/post', method='POST',\n...                          data='This is my posted data!'.encode('ascii'),\n...                          headers={'Content-Type': 'text/plain'})\n>>> print(msg.get_content_type(), resp)\napplication/json \n{'data': 'This is my posted data!', \n 'json': None, \n 'form': {}, \n 'args': {}, \n 'files': {}, \n 'headers': {'User-Agent': 'Python-urllib/3.5', \n             'Connection': 'close', \n             'Content-Type': 'text/plain', \n             'Host': 'httpbin.org', \n             'Accept-Encoding': 'identity', \n             'Content-Length': '23'}, \n 'url': 'https://httpbin.org/post', \n 'origin': '127.19.102.123'}\n```", "```py\nparts = vars(urllib.parse.urlparse(url))\nif query:\n    parts['query'] = urllib.parse.urlencode(query)\n```", "```py\nurl = urllib.parse.ParseResult(**parts).geturl()\n```", "```py\nr = urllib.request.Request(url=url, method=method, headers=headers,\n                           data=data)\n```", "```py\nwith urllib.request.urlopen(r) as resp:\n    msg, resp = resp.info(), resp.read()\n```", "```py\nif msg.get_content_type() == 'application/json':\n    resp = json.loads(resp.decode('utf-8'))\n```", "```py\nreturn msg, resp\n```", "```py\nimport io\nimport mimetypes\nimport uuid\n\nclass MultiPartForm:\n    def __init__(self):\n        self.fields = {}\n        self.files = []\n\n    def __setitem__(self, name, value):\n        self.fields[name] = value\n\n    def add_file(self, field, filename, data, mimetype=None):\n        if mimetype is None:\n            mimetype = (mimetypes.guess_type(filename)[0] or\n                        'application/octet-stream')\n        self.files.append((field, filename, mimetype, data))\n\n    def _generate_bytes(self, boundary):\n        buffer = io.BytesIO()\n        for field, value in self.fields.items():\n            buffer.write(b'--' + boundary + b'\\r\\n')\n            buffer.write('Content-Disposition: form-data; '\n                        'name=\"{}\"\\r\\n'.format(field).encode('utf-8'))\n            buffer.write(b'\\r\\n')\n            buffer.write(value.encode('utf-8'))\n            buffer.write(b'\\r\\n')\n        for field, filename, f_content_type, body in self.files:\n            buffer.write(b'--' + boundary + b'\\r\\n')\n            buffer.write('Content-Disposition: file; '\n                        'name=\"{}\"; filename=\"{}\"\\r\\n'.format(\n                            field, filename\n                        ).encode('utf-8'))\n            buffer.write('Content-Type: {}\\r\\n'.format(\n                f_content_type\n            ).encode('utf-8'))\n            buffer.write(b'\\r\\n')\n            buffer.write(body)\n            buffer.write(b'\\r\\n')\n        buffer.write(b'--' + boundary + b'--\\r\\n')\n        return buffer.getvalue()\n\n    def encode(self):\n        boundary = uuid.uuid4().hex.encode('ascii')\n        while boundary in self._generate_bytes(boundary=b'NOBOUNDARY'):\n            boundary = uuid.uuid4().hex.encode('ascii')\n\n        content_type = 'multipart/form-data; boundary={}'.format(\n            boundary.decode('ascii')\n        )\n        return content_type, self._generate_bytes(boundary)\n```", "```py\n>>> form = MultiPartForm()\n>>> form['name'] = 'value'\n>>> form.add_file('file1', 'somefile.txt', b'Some Content', 'text/plain')\n>>> content_type, form_body = form.encode()\n>>> print(content_type, '\\n\\n', form_body.decode('ascii'))\nmultipart/form-data; boundary=6c5109dfa19a450695013d4eecac2b0b \n\n--6c5109dfa19a450695013d4eecac2b0b\nContent-Disposition: form-data; name=\"name\"\n\nvalue\n--6c5109dfa19a450695013d4eecac2b0b\nContent-Disposition: file; name=\"file1\"; filename=\"somefile.txt\"\nContent-Type: text/plain\n\nSome Content\n--6c5109dfa19a450695013d4eecac2b0b--\n```", "```py\n>>> _, resp = http_request('https://httpbin.org/post', method='POST',\n                           data=form_body, \n                           headers={'Content-Type': content_type})\n>>> print(resp)\n{'headers': {\n    'Accept-Encoding': 'identity', \n    'Content-Type': 'multipart/form-data; boundary=6c5109dfa19a450695013d4eecac2b0b', \n    'User-Agent': 'Python-urllib/3.5', \n    'Content-Length': '272', \n    'Connection': 'close', \n    'Host': 'httpbin.org'\n }, \n 'json': None,\n 'url': 'https://httpbin.org/post', \n 'data': '', \n 'args': {}, \n 'form': {'name': 'value'}, \n 'origin': '127.69.102.121', \n 'files': {'file1': 'Some Content'}}\n```", "```py\nContent-Disposition: form-data; name=\"surname\"\n\nMySurname\n```", "```py\nContent-Disposition: file; name=\"file1\"; filename=\"somefile.txt\"\nContent-Type: text/plain\n\nSome Content\n```", "```py\ndef __setitem__(self, name, value):\n    self.fields[name] = value\n```", "```py\n>>> form['name'] = 'value'\n```", "```py\ndef add_file(self, field, filename, data, mimetype=None):\n    if mimetype is None:\n        mimetype = (mimetypes.guess_type(filename)[0] or\n                    'application/octet-stream')\n    self.files.append((field, filename, mimetype, data))\n```", "```py\n>>> form.add_file('file1', 'somefile.txt', b'Some Content', 'text/plain')\n```", "```py\nfor field, value in self.fields.items():\n    buffer.write(b'--' + boundary + b'\\r\\n')\n    buffer.write('Content-Disposition: form-data; '\n                'name=\"{}\"\\r\\n'.format(field).encode('utf-8'))\n    buffer.write(b'\\r\\n')\n    buffer.write(value.encode('utf-8'))\n    buffer.write(b'\\r\\n')\n```", "```py\nboundary = uuid.uuid4().hex.encode('ascii')\nwhile boundary in self._generate_bytes(boundary=b'NOBOUNDARY'):\n    boundary = uuid.uuid4().hex.encode('ascii')\n```", "```py\ncontent_type = 'multipart/form-data; boundary={}'.format(\n    boundary.decode('ascii')\n)\nreturn content_type, self._generate_bytes(boundary)\n```", "```py\nimport string\nimport cgi\n\nclass HTMLFormatter(string.Formatter):\n    def get_field(self, field_name, args, kwargs):\n        val, key = super().get_field(field_name, args, kwargs)\n        if hasattr(val, '__html__'):\n            val = val.__html__()\n        elif isinstance(val, str):\n            val = cgi.escape(val)\n        return val, key\n\nclass Markup:\n    def __init__(self, v):\n        self.v = v\n    def __str__(self):\n        return self.v\n    def __html__(self):\n        return str(self)\n```", "```py\n>>> html = HTMLFormatter().format('Hello {name}, you are {title}', \n                                  name='<strong>Name</strong>',\n                                  title=Markup('<em>a developer</em>'))\n>>> print(html)\nHello &lt;strong&gt;Name&lt;/strong&gt;, you are <em>a developer</em>\n```", "```py\nif hasattr(val, '__html__'):\n    val = val.__html__()\n```", "```py\nelif isinstance(val, str):\n    val = cgi.escape(val)\n```", "```py\n>>> html = HTMLFormatter().format('Hello {name}', \n                                  name='<strong>Name</strong>')\n>>> print(html)\nHello &lt;strong&gt;Name&lt;/strong&gt;\n```", "```py\n>>> html = HTMLFormatter().format('Hello {name}', \n                                  name=Markup('<strong>Name</strong>'))\n>>> print(html)\nHello <strong>Name</strong>\n```", "```py\nimport re\nimport inspect\nfrom wsgiref.headers import Headers\nfrom wsgiref.simple_server import make_server\nfrom wsgiref.util import request_uri\nfrom urllib.parse import parse_qs\n\nclass WSGIApplication:\n    def __init__(self):\n        self.routes = []\n\n    def route(self, path):\n        def _route_decorator(f):\n            self.routes.append((re.compile(path), f))\n            return f\n        return _route_decorator\n\n    def serve(self):\n        httpd = make_server('', 8000, self)\n        print(\"Serving on port 8000...\")\n        httpd.serve_forever()\n\n    def _not_found(self, environ, resp):\n        resp.status = '404 Not Found'\n        return b\"\"\"<h1>Not Found</h1>\"\"\"\n\n    def __call__(self, environ, start_response):\n        request = Request(environ)\n\n        routed_action = self._not_found\n        for regex, action in self.routes:\n            match = regex.fullmatch(request.path)\n            if match:\n                routed_action = action\n                request.urlargs = match.groupdict()\n                break\n\n        resp = Response()\n\n        if inspect.isclass(routed_action):\n            routed_action = routed_action()\n        body = routed_action(request, resp)\n\n        resp.send(start_response)\n        return [body]\n\nclass Response:\n    def __init__(self):\n        self.status = '200 OK'\n        self.headers = Headers([\n            ('Content-Type', 'text/html; charset=utf-8')\n        ])\n\n    def send(self, start_response):\n        start_response(self.status, self.headers.items())\n\nclass Request:\n    def __init__(self, environ):\n        self.environ = environ\n        self.urlargs = {}\n\n    @property\n    def path(self):\n        return self.environ['PATH_INFO']\n\n    @property\n    def query(self):\n        return parse_qs(self.environ['QUERY_STRING'])\n```", "```py\napp = WSGIApplication()\n\n@app.route('/')\ndef index(request, resp):\n    return b'Hello World, <a href=\"/link\">Click here</a>'\n\n@app.route('/link')\ndef link(request, resp):\n    return (b'You clicked the link! '\n            b'Try <a href=\"/args?a=1&b=2\">Some arguments</a>')\n\n@app.route('/args')\ndef args(request, resp):\n    return (b'You provided %b<br/>'\n            b'Try <a href=\"/name/HelloWorld\">URL Arguments</a>' % \n            repr(request.query).encode('utf-8'))\n\n@app.route('/name/(?P<first_name>\\\\w+)')\ndef name(request, resp):\n    return (b'Your name: %b' % request.urlargs['first_name'].encode('utf-8'))\n```", "```py\napp.serve()\n```", "```py\ndef serve(self):\n    httpd = make_server('', 8000, self)\n    print(\"Serving on port 8000...\")\n    httpd.serve_forever()\n```", "```py\ndef __call__(self, environ, start_response):\n    request = Request(environ)\n\n    routed_action = self._not_found\n    for regex, action in self.routes:\n        match = regex.fullmatch(request.path)\n        if match:\n            routed_action = action\n            request.urlargs = match.groupdict()\n            break\n```", "```py\nresp = Response()\nbody = routed_action(request, resp)\n\nresp.send(start_response)\nreturn [body]\n```", "```py\nimport os.path\nimport socketserver\nfrom http.server import SimpleHTTPRequestHandler, HTTPServer\n\ndef serve_directory(path, port=8000):\n    class ConfiguredHandler(HTTPDirectoryRequestHandler):\n        SERVED_DIRECTORY = path\n    httpd = ThreadingHTTPServer((\"\", port), ConfiguredHandler)\n    print(\"serving on port\", port)\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        httpd.server_close()\n\nclass ThreadingHTTPServer(socketserver.ThreadingMixIn, HTTPServer):\n    pass\n\nclass HTTPDirectoryRequestHandler(SimpleHTTPRequestHandler):\n    SERVED_DIRECTORY = '.'\n\n    def translate_path(self, path):\n        path = super().translate_path(path)\n        relpath = os.path.relpath(path)\n        return os.path.join(self.SERVED_DIRECTORY, relpath)\n```", "```py\nserve_directory('/tmp')\n```", "```py\nimport cgitb\nimport sys\n\nclass ErrorMiddleware:\n    \"\"\"Wrap a WSGI application to display errors in the browser\"\"\"\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        app_iter = None\n        try:\n            app_iter = self.app(environ, start_response)\n            for item in app_iter:\n                yield item\n        except:\n            try:\n                start_response('500 INTERNAL SERVER ERROR', [\n                    ('Content-Type', 'text/html; charset=utf-8'),\n                    ('X-XSS-Protection', '0'),\n                ])\n            except Exception:\n                # There has been output but an error occurred later on. \n                # In that situation we can do nothing fancy anymore, \n                # better log something into the error log and fallback.\n                environ['wsgi.errors'].write(\n                    'Debugging middleware caught exception in streamed '\n                    'response after response headers were already sent.\\n'\n                )\n            else:\n                yield cgitb.html(sys.exc_info()).encode('utf-8')\n        finally:\n            if hasattr(app_iter, 'close'):\n                app_iter.close()\n```", "```py\nfrom web_06 import WSGIApplication\nfrom wsgiref.simple_server import make_server\n\napp = WSGIApplication()\n\n@app.route('/crash')\ndef crash(req, resp):\n    raise RuntimeError('This is a crash!')\n\napp = ErrorMiddleware(app)\n\nhttpd = make_server('', 8000, app)\nprint(\"Serving on port 8000...\")\nhttpd.serve_forever()\n```", "```py\ndef __call__(self, environ, start_response):\n    app_iter = None\n    try:\n        app_iter = self.app(environ, start_response)\n        for item in app_iter:\n            yield item\n    ...\n```", "```py\nexcept:\n    try:\n        start_response('500 INTERNAL SERVER ERROR', [\n            ('Content-Type', 'text/html; charset=utf-8'),\n            ('X-XSS-Protection', '0'),\n        ])\n```", "```py\nexcept Exception:\n    # There has been output but an error occurred later on. \n    # In that situation we can do nothing fancy anymore, \n    # better log something into the error log and fallback.\n    environ['wsgi.errors'].write(\n        'Debugging middleware caught exception in streamed '\n        'response after response headers were already sent.\\n'\n    )\n```", "```py\nelse:\n    yield cgitb.html(sys.exc_info()).encode('utf-8')\n```", "```py\nfinally:\n    if hasattr(app_iter, 'close'):\n        app_iter.close()\n```", "```py\nimport cgi\n\nfrom web_06 import WSGIApplication\nimport base64\n\napp = WSGIApplication()\n\n@app.route('/')\ndef index(req, resp):\n    return (\n        b'<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-\n           data\">'\n        b'  <input type=\"file\" name=\"uploadedfile\"/>'\n        b'  <input type=\"submit\" value=\"Upload\">'\n        b'</form>'\n    )\n\n@app.route('/upload')\ndef upload(req, resp):\n    form = cgi.FieldStorage(fp=req.environ['wsgi.input'], \n                            environ=req.environ)\n    if 'uploadedfile' not in form:\n        return b'Nothing uploaded'\n\n    uploadedfile = form['uploadedfile']\n    if uploadedfile.type.startswith('image'):\n        # User uploaded an image, show it\n        return b'<img src=\"data:%b;base64,%b\"/>' % (\n            uploadedfile.type.encode('ascii'),\n            base64.b64encode(uploadedfile.file.read())\n        )\n    elif uploadedfile.type.startswith('text'):\n        return uploadedfile.file.read()\n    else:\n        return b'You uploaded %b' % uploadedfile.filename.encode('utf-8')\n\napp.serve()\n```", "```py\nform = cgi.FieldStorage(fp=req.environ['wsgi.input'], \n                        environ=req.environ)\n```", "```py\nif 'uploadedfile' not in form:\n    return b'Nothing uploaded'\n```", "```py\nb'  <input type=\"file\" name=\"uploadedfile\"/>'\n```", "```py\nif uploadedfile.type.startswith('image'):\n```", "```py\nbase64.b64encode(uploadedfile.file.read())\n```", "```py\nreturn b'You uploaded %b' % uploadedfile.filename.encode('utf-8')\n```", "```py\nclass RestController:\n    def __call__(self, req, resp):\n        method = req.environ['REQUEST_METHOD']\n        action = getattr(self, method, self._not_found)\n        return action(req, resp)\n\n    def _not_found(self, environ, resp):\n        resp.status = '404 Not Found'\n        return b'{}'  # Provide an empty JSON document\n```", "```py\nimport json\nfrom web_06 import WSGIApplication\n\napp = WSGIApplication()\n\n@app.route('/resources/?(?P<id>\\\\w*)')\nclass ResourcesRestController(RestController):\n    RESOURCES = {}\n\n    def GET(self, req, resp):\n        resource_id = req.urlargs['id']\n        if not resource_id:\n            # Whole catalog requested\n            return json.dumps(self.RESOURCES).encode('utf-8')\n\n        if resource_id not in self.RESOURCES:\n            return self._not_found(req, resp)\n\n        return json.dumps(self.RESOURCES[resource_id]).encode('utf-8')\n\n    def POST(self, req, resp):\n        content_length = int(req.environ['CONTENT_LENGTH'])\n        data = req.environ['wsgi.input'].read(content_length).decode('utf-8')\n\n        resource = json.loads(data)\n        resource['id'] = str(len(self.RESOURCES)+1)\n        self.RESOURCES[resource['id']] = resource\n        return json.dumps(resource).encode('utf-8')\n\n    def DELETE(self, req, resp):\n        resource_id = req.urlargs['id']\n        if not resource_id:\n            return self._not_found(req, resp)\n        self.RESOURCES.pop(resource_id, None)\n\n        req.status = '204 No Content'\n        return b''\n```", "```py\nimport threading\nthreading.Thread(target=app.serve, daemon=True).start()\n\nfrom web_03 import http_request\n```", "```py\n>>> _, resp = http_request('http://localhost:8000/resources', method='POST', \n                           data=json.dumps({'name': 'Mario',\n                                            'surname': 'Mario'}).encode('utf-8'))\n>>> print('NEW RESOURCE: ', resp)\nNEW RESOURCE:  b'{\"surname\": \"Mario\", \"id\": \"1\", \"name\": \"Mario\"}'\n```", "```py\n>>> _, resp = http_request('http://localhost:8000/resources')\n>>> print('ALL RESOURCES: ', resp)\nALL RESOURCES:  b'{\"1\": {\"surname\": \"Mario\", \"id\": \"1\", \"name\": \"Mario\"}}'\n```", "```py\n>>> http_request('http://localhost:8000/resources', method='POST', \n                 data=json.dumps({'name': 'Luigi',\n                                  'surname': 'Mario'}).encode('utf-8'))\n```", "```py\n>>> _, resp = http_request('http://localhost:8000/resources')\n>>> print('ALL RESOURCES: ', resp)\nALL RESOURCES:  b'{\"1\": {\"surname\": \"Mario\", \"id\": \"1\", \"name\": \"Mario\"}, \n                   \"2\": {\"surname\": \"Mario\", \"id\": \"2\", \"name\": \"Luigi\"}}'\n```", "```py\n>>> _, resp = http_request('http://localhost:8000/resources/1')\n>>> print('RESOURCES #1: ', resp)\nRESOURCES #1:  b'{\"surname\": \"Mario\", \"id\": \"1\", \"name\": \"Mario\"}'\n```", "```py\n>>> http_request('http://localhost:8000/resources/2', method='DELETE')\n```", "```py\n>>> _, resp = http_request('http://localhost:8000/resources')\n>>> print('ALL RESOURCES', resp)\nALL RESOURCES b'{\"1\": {\"surname\": \"Mario\", \"id\": \"1\", \"name\": \"Mario\"}}'\n```", "```py\nclass RestController:\n    def __call__(self, req, resp):\n        method = req.environ['REQUEST_METHOD']\n        action = getattr(self, method, self._not_found)\n        return action(req, resp)\n```", "```py\nif inspect.isclass(routed_action):\n    routed_action = routed_action()\nbody = routed_action(request, resp)\n```", "```py\n@app.route('/resources/?(?P<id>\\\\w*)')\n```", "```py\ndef GET(self, req, resp):\n    resource_id = req.urlargs['id']\n    if not resource_id:\n        # Whole catalog requested\n        return json.dumps(self.RESOURCES).encode('utf-8')\n```", "```py\ndef POST(self, req, resp):\n    content_length = int(req.environ['CONTENT_LENGTH'])\n    data = req.environ['wsgi.input'].read(content_length).decode('utf-8')\n```", "```py\nfrom web_06 import WSGIApplication\n\napp = WSGIApplication()\n\nimport time\nfrom http.cookies import SimpleCookie\n\n@app.route('/identity')\ndef identity(req, resp):\n    identity = int(time.time())\n\n    cookie = SimpleCookie()\n    cookie['identity'] = 'USER: {}'.format(identity)\n\n    for set_cookie in cookie.values():\n        resp.headers.add_header('Set-Cookie', set_cookie.OutputString())\n    return b'Go back to <a href=\"/\">index</a> to check your identity'\n```", "```py\n@app.route('/')\ndef index(req, resp):\n    if 'HTTP_COOKIE' in req.environ:\n        cookies = SimpleCookie(req.environ['HTTP_COOKIE'])\n        if 'identity' in cookies:\n            return b'Welcome back, %b' % cookies['identity'].value.encode('utf-8')\n    return b'Visit <a href=\"/identity\">/identity</a> to get an identity'\n```", "```py\napp.serve()\n```", "```py\ncookie = SimpleCookie()\ncookie['identity'] = 'USER: {}'.format(identity)\n```", "```py\ncookie['identity']['Path'] = '/'\n```", "```py\nfor set_cookie in cookie.values():\n    resp.headers.add_header('Set-Cookie', set_cookie.OutputString())\n```", "```py\n>>> cookie = SimpleCookie()\n>>> cookie['somevalue'] = 42\n>>> cookie['somevalue']['Path'] = '/'\n>>> cookie['somevalue'].OutputString()\n'somevalue=42; Path=/'\n```", "```py\ncookies = SimpleCookie(req.environ['HTTP_COOKIE'])\n```", "```py\ncookies['identity']\n```"]