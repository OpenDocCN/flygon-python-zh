["```py\n>>> aList = [\"John\", 33,\"Toronto\", True]\n>>> print(aList)\n*['John', 33, 'Toronto', True]Ex*\n```", "```py\n>>> bin_colors=['Red','Green','Blue','Yellow']\n>>> bin_colors[1]\n*'Green'*\n```", "```py\n>>> bin_colors=['Red','Green','Blue','Yellow']\n>>> bin_colors[0:2] *['Red', 'Green']*\n```", "```py\n>>> bin_colors=['Red','Green','Blue','Yellow'] >>> bin_colors[2:]\n*['Blue', 'Yellow']*\n>>> bin_colors[:2]\n*['Red', 'Green']*\n```", "```py\n>>> bin_colors=['Red','Green','Blue','Yellow'] >>> bin_colors[:-1]\n*['Red', 'Green', 'Blue']*\n>>> bin_colors[:-2]\n*['Red', 'Green']*\n>>> bin_colors[-2:-1]\n*['Blue']*\n```", "```py\n>>> a = [1,2,[100,200,300],6]\n>>> max(a[2])\n*300*\n>>> a[2][1]\n*200*\n```", "```py\n>>> bin_colors=['Red','Green','Blue','Yellow']\n>>> for aColor in bin_colors:\n        print(aColor + \" Square\") Red Square\n*Green Square\nBlue Square\nYellow Square*\n```", "```py\n>>> list(filter(lambda x: x > 100, [-5, 200, 300, -10, 10, 1000]))\n*[200, 300, 1000]*\n```", "```py\n>>> list(map(lambda x: x ** 2, [11, 22, 33, 44,55]))\n*[121, 484, 1089, 1936, 3025]*\n```", "```py\nfrom functools import reduce\ndef doSum(x1,x2):\n    return x1+x2\nx = reduce(doSum, [100, 122, 33, 4, 5, 6])\n```", "```py\n>>> x = range(6)\n>>> x\n[0,1,2,3,4,5]\n```", "```py\n>>> oddNum = range(3,29,2)\n>>> oddNum\n*[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]*\n```", "```py\n>>> bin_colors=('Red','Green','Blue','Yellow')\n>>> bin_colors[1]\n*'Green'*\n>>> bin_colors[2:]\n*('Blue', 'Yellow')*\n>>> bin_colors[:-1]\n*('Red', 'Green', 'Blue')*\n# Nested Tuple Data structure\n>>> a = (1,2,(100,200,300),6)\n>>> max(a[2])\n*300*\n>>> a[2][1]\n*200*\n```", "```py\n>>> bin_colors ={\n \"manual_color\": \"Yellow\",\n \"approved_color\": \"Green\",\n \"refused_color\": \"Red\"\n }\n>>> print(bin_colors) *{'manual_color': 'Yellow', 'approved_color': 'Green', 'refused_color': 'Red'}*\n```", "```py\n>>> bin_colors.get('approved_color')\n*'Green'* >>> bin_colors['approved_color']\n*'Green'*\n```", "```py\n>>> bin_colors['approved_color']=\"Purple\"\n>>> print(bin_colors) *{'manual_color': 'Yellow', 'approved_color': 'Purple', 'refused_color': 'Red'}*\n```", "```py\n>>> green = {'grass', 'leaves'}\n>>> print(green)\n{'grass', 'leaves'}\n```", "```py\n>>> green = {'grass', 'leaves','leaves'}\n>>> print(green)\n*{'grass', 'leaves'}*\n```", "```py\n>>> yellow = *{'dandelions', 'fire hydrant', 'leaves'}\n>>> red =* *{'fire hydrant', 'blood', 'rose', 'leaves'}*\n```", "```py\n>>> yellow|red\n*{'dandelions', 'fire hydrant', 'blood', 'rose', 'leaves'}*\n>>> yellow&red\n*{'fire hydrant'}*\n```", "```py\n>>> import pandas as pd\n>>> df = pd.DataFrame([\n...             ['1', 'Fares', 32, True],\n...             ['2', 'Elena', 23, False],\n...             ['3', 'Steven', 40, True]])\n>>> df.columns = ['id', 'name', 'age', 'decision']\n>>> df\n *id    name  age  decision\n0  1   Fares   32      True\n1  2   Elena   23     False\n2  3  Steven   40      True*\n```", "```py\n>>> df[['name','age']]\n *name  age\n0   Fares   32\n1   Elena   23\n2  Steven   40*\n```", "```py\n>>> df.iloc[:,3] \n*0 True*\n*1 False*\n*2 True*\n```", "```py\n>>> df.iloc[1:3,:]\n *id name age decision*\n*1 2 Elena 23 False*\n*2 3 Steven 40 True*\n```", "```py\n>>> df[df.age>30]\n *id    name  age  decision\n0  1   Fares   32      True\n2  3  Steven   40      True\n\n**>>> df[(df.age<35)&(df.decision==True)]***  id   name  age  decision\n0  1  Fares   32      True\n\n```", "```py\n>>> myMatrix = np.array([[11, 12, 13], [21, 22, 23], [31, 32, 33]]) \n>>> print(myMatrix) \n*[[11 12 13]* \n*[21 22 23]* \n*[31 32 33]]*\n>>> print(type(myMatrix))\n*<class 'numpy.ndarray'>*\n```", "```py\n>>> myMatrix.transpose()\n*array([[11, 21, 31],* \n *[12, 22, 32],* \n *[13, 23, 33]])*\n```", "```py\n>>> myVector = [22,33,44,55]\n>>> print(myVector) \n*[22 33 44 55]*\n>>> print(type(myVector))\n*<class 'list'>*\n```", "```py\n>>> myVector = np.array([22,33,44,55]) \n>>> print(myVector) \n*[22 33 44 55]*\n>>> print(type(myVector))\n*<class 'numpy.ndarray'>*\n```", "```py\nclass Stack:\n     def __init__(self):\n         self.items = []\n     def isEmpty(self):\n         return self.items == []\n     def push(self, item):\n         self.items.append(item)\n     def pop(self):\n         return self.items.pop()\n     def peek(self):\n         return self.items[len(self.items)-1]\n     def size(self):\n         return len(self.items)\n```", "```py\nclass Queue(object):\n   def __init__(self):\n      self.items = []\n   def isEmpty(self):\n      return self.items == []\n   def enqueue(self, item):\n       self.items.insert(0,item)\n   def dequeue(self):\n      return self.items.pop()\n   def size(self):\n      return len(self.items)\n```"]