["```py\n **>>> from pathlib import Path \n>>> import json \n>>> from collections import OrderedDict \n>>> source_path = Path('code/anscombe.json') \n>>> data = json.loads(source_path.read_text(), object_pairs_hook=OrderedDict)** \n\n```", "```py\n **>>> [item['series'] for item in data] \n['I', 'II', 'III', 'IV'] \n>>> [len(item['data']) for item in data] \n[11, 11, 11, 11]** \n\n```", "```py\n    [ \n      { \n        \"series\": \"I\", \n        \"data\": [ \n          { \n            \"x\": 10.0, \n            \"y\": 8.04 \n          }, \n          { \n            \"x\": 8.0, \n            \"y\": 6.95 \n          }, \n          ... \n        ] \n      }, \n      ... \n    ] \n\n```", "```py\n     **>>> def get_series(data, series_name): \n          for s in data: \n              if s['series'] == series_name: \n                  return s** \n\n    ```", "```py\n     **>>> series_1 = get_series(data, 'I') \n          >>> series_1['series'] \n          'I' \n          >>> len(series_1['data']) \n          11** \n\n    ```", "```py\n     **>>> def get_series(data, series_name): \n          ...     name_match = lambda series: series['series'] == series_name \n          ...     series = list(filter(name_match, data))[0] \n          ...     return series** \n\n    ```", "```py\n     **>>> series_2 = get_series(data, 'II') \n          >>> series_2['series'] \n          'II' \n          >>> len(series_2['data']) \n          11** \n\n    ```", "```py\n     **>>> def get_series(data, series_name): \n          ...     series = list( \n          ...         s for s in data \n          ...            if s['series'] == series_name \n          ...         )[0] \n          ...     return series** \n\n    ```", "```py\n     **>>> series_3 = get_series(data, 'III') \n          >>> series_3['series'] \n          'III' \n          >>> len(series_3['data']) \n          11** \n\n    ```", "```py\n     **>>> def data_iter(series, variable_name): \n          ...     return (item[variable_name] for item in series['data'])** \n\n    ```", "```py\n **>>> s_4 = get_series(data, 'IV') \n>>> s_4_x = list(data_iter(s_4, 'x')) \n>>> len(s_4_x) \n11** \n\n```", "```py\n     **>>> import statistics \n          >>> for series_name in 'I', 'II', 'III', 'IV': \n          ...     series = get_series(data, series_name) \n          ...     for variable_name in 'x', 'y': \n          ...         samples = list(data_iter(series, variable_name)) \n          ...         mean = statistics.mean(samples) \n          ...         median = statistics.median(samples) \n          ...         print(series_name, variable_name, round(mean,2), median) \n          I x 9.0 9.0 \n          I y 7.5 7.58 \n          II x 9.0 9.0 \n          II y 7.5 8.14 \n          III x 9.0 9.0 \n          III y 7.5 7.11 \n          IV x 9.0 8.0 \n          IV y 7.5 7.04** \n\n    ```", "```py\n     **>>> import collections \n          >>> for series_name in 'I', 'II', 'III', 'IV': \n          ...     series = get_series(data, series_name) \n          ...     for variable_name in 'x', 'y': \n          ...         samples = data_iter(series, variable_name) \n          ...         mode = collections.Counter(samples).most_common(1) \n          ...         print(series_name, variable_name, mode) \n          I x [(4.0, 1)] \n          I y [(8.81, 1)] \n          II x [(4.0, 1)] \n          II y [(8.74, 1)] \n          III x [(4.0, 1)] \n          III y [(8.84, 1)] \n          IV x [(8.0, 10)] \n          IV y [(7.91, 1)]** \n\n    ```", "```py\n     **>>> for series_name in 'I', 'II', 'III', 'IV': \n          ...     series = get_series(data, series_name) \n          ...     for variable_name in 'x', 'y': \n          ...         samples = list(data_iter(series, variable_name)) \n          ...         least = min(samples) \n          ...         most = max(samples) \n          ...         print(series_name, variable_name, least, most) \n          I x 4.0 14.0 \n          I y 4.26 10.84 \n          II x 4.0 14.0 \n          II y 3.1 9.26 \n          III x 4.0 14.0 \n          III y 5.39 12.74 \n          IV x 8.0 19.0 \n          IV y 5.25 12.5** \n\n    ```", "```py\n     **>>> import statistics \n          >>> for series_name in 'I', 'II', 'III', 'IV': \n          ...     series = get_series(data, series_name) \n          ...     for variable_name in 'x', 'y': \n          ...         samples = list(data_iter(series, variable_name)) \n          ...         mean = statistics.mean(samples) \n          ...         variance = statistics.variance(samples, mean) \n          ...         stdev = statistics.stdev(samples, mean) \n          ...         print(series_name, variable_name, \n          ...            round(variance,2), round(stdev,2)) \n          I x 11.0 3.32 \n          I y 4.13 2.03 \n          II x 11.0 3.32 \n          II y 4.13 2.03 \n          III x 11.0 3.32 \n          III y 4.12 2.03 \n          IV x 11.0 3.32 \n          IV y 4.12 2.03** \n\n    ```", "```py\n    def set_mean(data): \n        for series in data: \n            for variable_name in 'x', 'y': \n                samples = data_iter(series, variable_name) \n                series['mean_'+variable_name] = statistics.mean(samples) \n\n```", "```py\n **>>> statistics.mean.__name__ \n'mean'** \n\n```", "```py\n    def set_summary(data, function): \n      for series in data: \n        for variable_name in 'x', 'y': \n          samples = data_iter(series, variable_name) \n          series[function.__name__+'_'+variable_name] = function(samples) \n\n```", "```py\n    for function in statistics.mean, statistics.median, min, max: \n        set_summary(data, function) \n\n```", "```py\n    [ \n      { \n        \"series\": \"I\", \n        \"data\": [ \n          { \n            \"x\": 10.0, \n            \"y\": 8.04 \n          }, \n          { \n            \"x\": 8.0, \n            \"y\": 6.95 \n          }, \n          ... \n        ], \n        \"mean_x\": 9.0, \n        \"mean_y\": 7.500909090909091, \n        \"median_x\": 9.0, \n        \"median_y\": 7.58, \n        \"min_x\": 4.0, \n        \"min_y\": 4.26, \n        \"max_x\": 14.0, \n        \"max_y\": 10.84 \n      }, \n      ... \n    ] \n\n```", "```py\n    target_path = source_path.parent / (source_path.stem+'_stats.json') \n    target_path.write_text(json.dumps(data, indent=2)) \n\n```", "```py\n **>>> from collections import Counter \n>>> raw_data = [8, 8, 8, 8, 8, 8, 8, 19, 8, 8, 8] \n>>> series_4_x = Counter(raw_data)** \n\n```", "```py\n **>>> series_4_x \nCounter({8: 10, 19: 1})** \n\n```", "```py\n     **>>> def counter_sum(counter): \n          ...     return sum(f*c for c,f in counter.items())** \n\n    ```", "```py\n     **>>> counter_sum(series_4_x) \n          99** \n\n    ```", "```py\n     **>>> def counter_len(counter):** \n\n     **...     return sum(f for c,f in counter.items())** \n\n    ```", "```py\n     **>>> counter_len(series_4_x) \n          11** \n\n    ```", "```py\n     **>>> def counter_mean(counter): \n          ...    return counter_sum(counter)/counter_len(counter) \n          >>> counter_mean(series_4_x) \n          9.0** \n\n    ```", "```py\n **>>> def counter_sum_2(counter): \n...     return sum(f*c**2 for c,f in counter.items())** \n\n```", "```py\n **>>> def counter_variance(counter): \n...    n = counter_len(counter) \n...    return (counter_sum_2(counter)-(counter_sum(counter)**2)/n)/(n-1)** \n\n```", "```py\n **>>> import math \n>>> def counter_stdev(counter): \n...    return math.sqrt(counter_variance(counter))** \n\n```", "```py\n **>>> counter_variance(series_4_x) \n11.0 \n>>> round(counter_stdev(series_4_x), 2) \n3.32** \n\n```", "```py\n **>>> import statistics \n>>> statistics.variance(series_4_x.elements()) \n11.0** \n\n```", "```py\n **>>> from pathlib import Path \n>>> import json \n>>> from collections import OrderedDict \n>>> source_path = Path('code/anscombe.json') \n>>> data = json.loads(source_path.read_text(), \n...     object_pairs_hook=OrderedDict)** \n\n```", "```py\n **>>> [item['series'] for item in data] \n['I', 'II', 'III', 'IV'] \n>>> [len(item['data']) for item in data] \n[11, 11, 11, 11]** \n\n```", "```py\n    [ \n      { \n        \"series\": \"I\", \n        \"data\": [ \n          { \n            \"x\": 10.0, \n            \"y\": 8.04 \n          }, \n          { \n            \"x\": 8.0, \n            \"y\": 6.95 \n          }, \n          ... \n        ] \n      }, \n      ... \n    ] \n\n```", "```py\n            from math import sqrt \n\n    ```", "```py\n            def correlation(data): \n\n    ```", "```py\n            sumxy = sum(i['x']*i['y'] for i in data) \n            sumx = sum(i['x'] for i in data) \n            sumy = sum(i['y'] for i in data) \n            sumx2 = sum(i['x']**2 for i in data) \n            sumy2 = sum(i['y']**2 for i in data) \n            n = sum(1 for i in data) \n\n    ```", "```py\n            r = ( \n                (n*sumxy - sumx*sumy) \n                / (sqrt(n*sumx2-sumx**2)*sqrt(n*sumy2-sumy**2)) \n                ) \n            return r \n\n    ```", "```py\n    for series in data: \n        r = correlation(series['data']) \n        print(series['series'], 'r=', round(r, 2)) \n\n```", "```py\n    I r= 0.82\n    II r= 0.82\n    III r= 0.82\n    IV r= 0.82\n\n```", "```py\n    sum(item['x'] for item in data) \n\n```", "```py\n    sumx = sumy = sumxy = sumx2 = sumy2 = n = 0 \n    for item in data: \n        x, y = item['x'], item['y'] \n        n += 1 \n        sumx += x \n        sumy += y \n        sumxy += x * y \n        sumx2 += x**2 \n        sumy2 += y**2 \n\n```", "```py\n **>>> from pathlib import Path \n>>> import json \n>>> from collections import OrderedDict \n>>> source_path = Path('code/anscombe.json') \n>>> data = json.loads(source_path.read_text(), \n...     object_pairs_hook=OrderedDict)** \n\n```", "```py\n **>>> [item['series'] for item in data] \n['I', 'II', 'III', 'IV'] \n>>> [len(item['data']) for item in data] \n[11, 11, 11, 11]** \n\n```", "```py\n    [ \n      { \n        \"series\": \"I\", \n        \"data\": [ \n          { \n            \"x\": 10.0, \n            \"y\": 8.04 \n          }, \n          { \n            \"x\": 8.0, \n            \"y\": 6.95 \n          }, \n          ... \n        ] \n      }, \n      ... \n    ] \n\n```", "```py\n        from ch10_r03 import correlation \n        import statistics \n\n```", "```py\n            def regression(data): \n\n    ```", "```py\n            m_x = statistics.mean(i['x'] for i in data) \n            m_y = statistics.mean(i['y'] for i in data) \n            s_x = statistics.stdev(i['x'] for i in data) \n            s_y = statistics.stdev(i['y'] for i in data) \n            r_xy = correlation(data) \n\n    ```", "```py\n            b = r_xy * s_y/s_x \n            a = m_y - b * m_x \n            return a, b \n\n    ```", "```py\n    for series in data: \n        a, b = regression(series['data']) \n        print(series['series'], 'y=', round(a, 2), '+', round(b,2), '*x') \n\n```", "```py\n    I y= 3.0 + 0.5 *x\n    II y= 3.0 + 0.5 *x\n    III y= 3.0 + 0.5 *x\n    IV y= 3.0 + 0.5 *x\n\n```", "```py\n    sumx = sumy = sumxy = sumx2 = sumy2 = n = 0 \n    for item in data: \n        x, y = item['x'], item['y'] \n        n += 1 \n        sumx += x \n        sumy += y \n        sumxy += x * y \n        sumx2 += x**2 \n        sumy2 += y**2 \n    m_x = sumx / n \n    m_y = sumy / n \n    s_x = sqrt((n*sumx2 - sumx**2)/(n*(n-1))) \n    s_y = sqrt((n*sumy2 - sumy**2)/(n*(n-1))) \n    r_xy = (n*sumxy - sumx*sumy) / (sqrt(n*sumx2-sumx**2)*sqrt(n*sumy2-sumy**2)) \n    b = r_xy * s_y/s_x \n    a = m_y - b * m_x \n\n```", "```py\n    import csv \n\n```", "```py\n    def non_comment_iter(source): \n        for line in source: \n            if line[0] == '#': \n                continue \n            yield line \n\n```", "```py\n    def raw_data_iter(source): \n        header = ['year', 'month', 'decimal_date', 'average', \n                  'interpolated', 'trend', 'days'] \n        rdr = csv.DictReader(source, \n            header, delimiter=' ', skipinitialspace=True) \n        return rdr \n\n```", "```py\n    [{'average': '315.71', 'days': '-1', 'year': '1958', 'trend': '314.62',\n        'decimal_date': '1958.208', 'interpolated': '315.71', 'month': '3'},\n     {'average': '317.45', 'days': '-1', 'year': '1958', 'trend': '315.29',\n        'decimal_date': '1958.292', 'interpolated': '317.45', 'month': '4'},\n    etc.\n\n```", "```py\n    from types import SimpleNamespace \n    def cleanse(row): \n        return SimpleNamespace( \n            year= int(row['year']), \n            month= int(row['month']), \n            decimal_date= float(row['decimal_date']), \n            average= float(row['average']), \n            interpolated= float(row['interpolated']), \n            trend= float(row['trend']), \n            days= int(row['days']) \n        ) \n\n```", "```py\n    cleansed_data = (cleanse(row) for row in raw_data) \n\n```", "```py\n    [namespace(average=315.71, days=-1, decimal_date=1958.208, \n        interpolated=315.71, month=3, trend=314.62, year=1958), \n     namespace(average=317.45, days=-1, decimal_date=1958.292, \n        interpolated=317.45, month=4, trend=315.29, year=1958), \n    etc. \n\n```", "```py\n    def get_data(source_file): \n        non_comment_data = non_comment_iter(source_file) \n        raw_data = raw_data_iter(non_comment_data) \n        cleansed_data = (cleanse(row) for row in raw_data) \n        return cleansed_data \n\n```", "```py\n    source_path = Path('co2_mm_mlo.txt') \n    with source_path.open() as source_file: \n        for row in get_data(source_file): \n            print(row.year, row.month, row.average) \n\n```", "```py\n            from ch10_r03 import correlation \n\n    ```", "```py\n            co2_ppm = list(row.interpolated \n                for row in get_data(source_file)) \n\n    ```", "```py\n            for tau in range(1,20): \n                data = [{'x':x, 'y':y} \n                    for x,y in zip(co2_ppm[:-tau], co2_ppm[tau:])] \n                r_tau_0 = correlation(data[:60]) \n                print(tau, r_tau_0) \n\n    ```", "```py\n    r_{xx}(\u03c4= 1) =  0.862\n    r_{xx}(\u03c4= 2) =  0.558\n    r_{xx}(\u03c4= 3) =  0.215\n    r_{xx}(\u03c4= 4) = -0.057\n    r_{xx}(\u03c4= 5) = -0.235\n    r_{xx}(\u03c4= 6) = -0.319\n    r_{xx}(\u03c4= 7) = -0.305\n    r_{xx}(\u03c4= 8) = -0.157\n    r_{xx}(\u03c4= 9) =  0.141\n    r_{xx}(\u03c4=10) =  0.529\n    r_{xx}(\u03c4=11) =  0.857   \n    **r_{xx}(\u03c4=12) =  0.981** \n\n    r_{xx}(\u03c4=13) =  0.847\n    r_{xx}(\u03c4=14) =  0.531\n    r_{xx}(\u03c4=15) =  0.179\n    r_{xx}(\u03c4=16) = -0.100\n    r_{xx}(\u03c4=17) = -0.279\n    r_{xx}(\u03c4=18) = -0.363\n    r_{xx}(\u03c4=19) = -0.349\n\n```", "```py\n    data = [{'x':x, 'y':y} \n        for x,y in zip(co2_ppm[:-tau], co2_ppm[tau:])] \n\n```", "```py\n    r_tau_0 = correlation(data[:60]) \n\n```", "```py\n    from statistics import mean, median \n    monthly_mean = [ \n        {'x': x, 'y': mean(co2_ppm[x:x+12])}  \n            for x in range(0,len(co2_ppm),12) \n    ] \n\n```", "```py\n    from ch10_r04 import regression \n    alpha, beta = regression(monthly_mean) \n    print('y=', alpha, '+x*', beta) \n\n```", "```py\n **>>> from ch10_r05 import get_data \n>>> from pathlib import Path \n>>> source_path = Path('code/co2_mm_mlo.txt') \n>>> with source_path.open() as source_file: \n...     all_data = list(get_data(source_file)) \n>>> y1959 = [r.interpolated for r in all_data if r.year == 1959] \n>>> y1960 = [r.interpolated for r in all_data if r.year == 1960] \n>>> y2014 = [r.interpolated for r in all_data if r.year == 2014]** \n\n```", "```py\n **>>> from statistics import mean \n>>> round(mean(y1959), 2) \n315.97 \n>>> round(mean(y1960), 2) \n316.91 \n>>> round(mean(y2014), 2) \n398.61** \n\n```", "```py\n **>>> from ch03_r07 import fact_s \n>>> def binom(n, k): \n...     return fact_s(n)//(fact_s(k)*fact_s(n-k)) \n>>> binom(24, 12) \n2704156** \n\n```", "```py\n            import random \n            from statistics import mean \n\n    ```", "```py\n            from collections import Counter \n\n    ```", "```py\n            def randomized(s1, s2, limit=270415): \n\n    ```", "```py\n            T_obs = mean(s2)-mean(s1) \n            print( \"T_obs = m_2-m_1 = {:.2f}-{:.2f} = {:.2f}\".format( \n                mean(s2), mean(s1), T_obs) \n            ) \n\n    ```", "```py\n            counts = Counter() \n\n    ```", "```py\n            universe = s1+s2 \n\n    ```", "```py\n            for resample in range(limit): \n\n    ```", "```py\n                random.shuffle(universe) \n\n    ```", "```py\n                a = universe[:len(s2)] \n                b = universe[len(s2):] \n\n    ```", "```py\n                delta = int(1000*(mean(a) - mean(b))) \n                counts[delta] += 1 \n\n    ```", "```py\n            T = int(1000*T_obs) \n            below = sum(v for k,v in counts.items() if k < T) \n            above = sum(v for k,v in counts.items() if k >= T) \n\n            print( \"below {:,} {:.1%}, above {:,} {:.1%}\".format( \n                below, below/(below+above), \n                above, above/(below+above))) \n\n    ```", "```py\n    print(\"1959 v. 1960\") \n    randomized(y1959, y1960) \n\n```", "```py\n    1959 v. 1960\n    T_obs = m_2-m_1 = 316.91-315.97 = 0.93\n    below 239,457 88.6%, above 30,958 11.4%\n\n```", "```py\n    1959 v. 2014\n    T_obs = m_2-m_1 = 398.61-315.97 = 82.64\n    below 270,414 100.0%, above 1 0.0%\n\n```", "```py\n    delta = int(1000*(mean(a) - mean(b))) \n\n```", "```py\n    if mean(a) - mean(b) > T_obs: \n        above += 1 \n\n```", "```py\n    a_size = len(s1) \n    b_size = len(s2) \n    s_u = sum(universe) \n    for resample in range(limit): \n        random.shuffle(universe) \n        a = universe[:len(s1)] \n        s_a = sum(a) \n        m_a = s_a/a_size \n        m_b = (s_u-s_a)/b_size \n        delta = int(1000*(m_a-m_b)) \n        counts[delta] += 1 \n\n```", "```py\n **>>> from pathlib import Path \n>>> import json \n>>> from collections import OrderedDict \n>>> source_path = Path('code/anscombe.json') \n>>> data = json.loads(source_path.read_text(), \n...     object_pairs_hook=OrderedDict)** \n\n```", "```py\n **>>> [item['series'] for item in data] \n['I', 'II', 'III', 'IV'] \n>>> [len(item['data']) for item in data] \n[11, 11, 11, 11]** \n\n```", "```py\n            import statistics \n            import itertools \n\n    ```", "```py\n            def absdev(data, median=None): \n                if median is None: \n                    median = statistics.median(data) \n                return ( \n                    abs(x-median) for x in data \n                ) \n\n    ```", "```py\n            def median_absdev(data, median=None): \n                if median is None: \n                    median = statistics.median(data) \n                return statistics.median(absdev(data, median=median)) \n\n    ```", "```py\n            def z_mod(data): \n                median = statistics.median(data) \n                mad = median_absdev(data, median) \n                return ( \n                    0.6745*(x - median)/mad for x in data \n                ) \n\n    ```", "```py\n            def pass_outliers(data): \n                return itertools.compress(data, (z >= 3.5 for z in z_mod(data))) \n\n            def reject_outliers(data): \n                return itertools.compress(data, (z < 3.5 for z in z_mod(data))) \n\n    ```", "```py\n    for series_name in 'I', 'II', 'III', 'IV': \n        print(series_name) \n        series_data = [series['data'] \n            for series in data \n                if series['series'] == series_name][0] \n\n        for variable_name in 'x', 'y': \n            variable = [float(item[variable_name]) for item in series_data] \n            print(variable_name, variable, end=' ') \n            try: \n                print( \"outliers\", list(pass_outliers(variable))) \n            except ZeroDivisionError: \n                print( \"Data Appears Linear\") \n        print() \n\n```", "```py\n    x [8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 19.0, 8.0, 8.0, 8.0] Data Appears Linear\n\n```", "```py\n    def pass_outliers(data): \n        return itertools.compress(data, (z >= 3.5 for z in z_mod(data))) \n\n    def reject_outliers(data): \n        return itertools.compress(data, (z < 3.5 for z in z_mod(data))) \n\n```", "```py\n    outlier = lambda z: z >= 3.5 \n\n```", "```py\n    def pass_outliers(data): \n        return itertools.compress(data, (outlier(z) for z in z_mod(data))) \n\n    def reject_outliers(data): \n        return itertools.compress(data, (not outlier(z) for z in z_mod(data))) \n\n```", "```py\n    def outlier(mad, median_x, x): \n        return 0.6745*(x - median_x)/mad >= 3.5 \n\n```", "```py\n    def pass_outliers2(data): \n        population_median = median(data) \n        mad = median_absdev(data, population_median) \n        outlier_partial = partial(outlier, mad, population_median) \n        return filter(outlier_partial, data) \n\n```", "```py\n    return ( \n        x for x in data if outlier(mad, population_median, x) \n    ) \n\n```", "```py\n **>>> from pathlib import Path \n>>> import json \n>>> from collections import OrderedDict \n>>> source_path = Path('code/anscombe.json') \n>>> data = json.loads(source_path.read_text(), \n...     object_pairs_hook=OrderedDict)** \n\n```", "```py\n **>>> [item['series'] for item in data] \n['I', 'II', 'III', 'IV'] \n>>> [len(item['data']) for item in data] \n[11, 11, 11, 11]** \n\n```", "```py\n            import math \n            class SimpleStats: \n                def __init__(self, name): \n                    self.name = name \n                    self.count = 0 \n                    self.sum = 0 \n                    self.sum_2 = 0 \n                def cleanse(self, value): \n                    return float(value) \n                def add(self, value): \n                    value = self.cleanse(value) \n                    self.count += 1 \n                    self.sum += value \n                    self.sum_2 += value*value \n                @property \n                def mean(self): \n                    return self.sum / self.count \n                @property \n                def stdev(self): \n                    return math.sqrt( \n                        (self.count*self.sum_2-self.sum**2)/(self.count*(self.count-1)) \n                        ) \n\n    ```", "```py\n            x_stats = SimpleStats('x') \n            y_stats = SimpleStats('y') \n\n    ```", "```py\n            column_stats = { \n                'x': x_stats, \n                'y': y_stats \n            } \n\n    ```", "```py\n            def analyze(series_data): \n                x_stats = SimpleStats('x') \n                y_stats = SimpleStats('y') \n                column_stats = { \n                    'x': x_stats, \n                    'y': y_stats \n                } \n                for item in series_data: \n                    for column_name in column_stats: \n                        column_stats[column_name].add(item[column_name]) \n                return column_stats \n\n    ```", "```py\n            column_stats = analyze(series_data) \n            for column_key in column_stats: \n                print(' ', column_key, \n                      column_stats[column_key].mean, \n                      column_stats[column_key].stdev) \n\n    ```", "```py\n    class DateStats: \n        def cleanse(self, value): \n            return datetime.datetime.strptime(date, '%Y-%m-%d').date() \n        def add(self, value): \n            self.current = self.cleanse(value) \n\n```", "```py\n    class TimeStats: \n        def cleanse(self, value): \n            return datetime.datetime.strptime(date, '%H:%M:%S').time() \n        def add(self, value): \n            self.current = self.cleanse(value) \n\n```", "```py\n    class DateTimeStats: \n        def __init__(self, date_column, time_column): \n            self.date_column = date_column \n            self.time_column = time_column \n        def add(self, value=None): \n            date = self.date_column.current \n            time = self.time_column.current \n            self.current = datetime.datetime.combine(date, time) \n\n```", "```py\n    date_stats = DateStats() \n    time_stats = TimeStats() \n    column_stats = { \n        'date': date_stats, \n        'time': time_stats \n    } \n\n```", "```py\n    datetime_stats = DateTimeStats(date_stats, time_stats) \n    derived_stats = { \n        'datetime': datetime_stats \n    } \n\n```", "```py\n    for item in series_data: \n        for column_name in column_stats: \n            column_stats[column_name].add(item[column_name]) \n        for column_name in derived_stats: \n            derived_stats[column_name].add() \n\n```", "```py\n    data_gathering = { \n        'x': lambda value: x_stats.add(value), \n        'y': lambda value: y_stats.add(value) \n    } \n\n```", "```py\n    [data_gathering[k](row[k]) for k in data_gathering)] \n\n```"]