["```py\nfrom weather import Weather, Unit\n\nclass WeatherData:\n\n    temperature = 0\n    weather_conditions = ''\n    wind_speed = 0\n    city = ''\n\n    def __init__(self, city):\n        self.city = city\n        weather = Weather(unit = Unit.CELSIUS)\n        lookup = weather.lookup_by_location(self.city)\n        self.temperature = float(lookup.condition.temp)\n        self.weather_conditions = lookup.condition.text\n        self.wind_speed = float(lookup.wind.speed)\n\n    def getServoValue(self):\n        temp_factor = (self.temperature*100)/30\n        wind_factor = (self.wind_speed*100)/20\n        servo_value = temp_factor-(wind_factor/20)\n\n        if(servo_value >= 100):\n            return 100\n        elif (servo_value <= 0):\n            return 0\n        else:\n            return servo_value\n\n    def getLEDValue(self): \n        if (self.weather_conditions=='Thunderstorm'):\n            return 2;\n        elif(self.weather_conditions=='Raining'):\n            return 1\n        else:\n            return 0\n\nif __name__==\"__main__\":\n\n    weather = WeatherData('Paris')\n    print(weather.getServoValue())\n    print(weather.getLEDValue())\n```", "```py\ndef getServoValue(self):\n     temp_factor = (self.temperature*100)/30\n     wind_factor = (self.wind_speed*100)/20\n     servo_value = temp_factor-(wind_factor/20)\n\n     if(servo_value >= 100):\n         return 100\n     elif (servo_value <= 0):\n         return 0\n     else:\n         return servo_value\n```", "```py\ndef getLEDValue(self):\n     if (self.weather_conditions=='Thunderstorm'):\n         return 2;\n     elif(self.weather_conditions=='Rain'):\n         return 1\n     elif(self.weather_conditions=='Light Rain'):\n         return 1\n     else:\n         return 0\n```", "```py\n73.075\n0\n```", "```py\nfrom gpiozero import Servo\nfrom time import sleep\nservoPin=17\n\nservoCorrection=0.5\nmaxPW=(2.0+servoCorrection)/1000\nminPW=(1.0-servoCorrection)/1000\n\nservo=Servo(servoPin, min_pulse_width=minPW, max_pulse_width=maxPW)\n\nservo.min()\nsleep(5)\nservo.max()\nsleep(5)\nservo.min()\nsleep(5)\nservo.max()\nsleep(5)\nservo.min()\nsleep(5)\nservo.max()\nsleep(5)\n\nservo.close()\n```", "```py\nfrom gpiozero import Servo\nfrom gpiozero import LED\nfrom time import sleep\nfrom WeatherData import WeatherData\n\nclass WeatherDashboard:\n\n     servo_pin = 17\n     led_pin = 14\n     servoCorrection=0.5\n     maxPW=(2.0+servoCorrection)/1000\n     minPW=(1.0-servoCorrection)/1000\n\n     def __init__(self, servo_position=0, led_status=0):\n         self.servo = Servo(self.servo_pin, min_pulse_width=\n                self.minPW, max_pulse_width=self.maxPW)\n         self.led = LED(self.led_pin)\n\n         self.move_servo(servo_position)\n         self.set_led_status(led_status)\n\n     def move_servo(self, servo_position=0): \n         self.servo.value = self.convert_percentage_to_integer(\n                servo_position)\n\n     def turnOffServo(self):\n         sleep(5)\n         self.servo.close()\n\n     def set_led_status(self, led_status=0):\n         if(led_status==0):\n             self.led.off()\n         elif (led_status==1):\n             self.led.on()\n         else:\n             self.led.blink()\n\n     def convert_percentage_to_integer(self, percentage_amount):\n        #adjust for servos that turn counter clockwise by default\n        adjusted_percentage_amount = 100 - percentage_amount\n        return (adjusted_percentage_amount*0.02)-1\n\nif __name__==\"__main__\":\n     weather_data = WeatherData('Toronto')\n     weather_dashboard = WeatherDashboard(\n     weather_data.getServoValue(),\n     weather_data.getLEDValue())\n     weather_dashboard.turnOffServo()\n```", "```py\nfrom time import sleep\nfrom WeatherData import WeatherData\n```", "```py\nservoCorrection=0.5\nmaxPW=(2.0+servoCorrection)/1000\nminPW=(1.0-servoCorrection)/1000\n```", "```py\ndef turnOffServo(self):\n    sleep(5)\n    self.servo.close()\n```", "```py\ndef convert_percentage_to_integer(self, percentage_amount):\n        #adjust for servos that turn counter clockwise by default\n        adjusted_percentage_amount = 100 - percentage_amount\n        return (adjusted_percentage_amount*0.02)-1\n```", "```py\nfrom gpiozero import Servo\nservoPin=17\n\nservoCorrection=<<put in the correction you calculated>>\nmaxPW=(2.0+servoCorrection)/1000\nminPW=(1.0-servoCorrection)/1000\n\nservo=Servo(servoPin, min_pulse_width=minPW, max_pulse_width=maxPW)\n\nservo.min()\n```"]