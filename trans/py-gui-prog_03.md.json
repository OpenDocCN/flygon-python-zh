["```py\nmy_entry = ttk.Entry(parent, textvariable=my_text_var)\n```", "```py\nmy_spinbox = tk.Spinbox(\n    parent,\n    from_=0.5,\n    to=52.0,\n    increment=.01,\n    textvariable=my_double_var)\n```", "```py\ncombobox = ttk.Combobox(\n    parent, textvariable=my_string_var,\n    values=[\"Option 1\", \"Option 2\", \"Option 3\"])\n```", "```py\nmy_checkbutton = ttk.Checkbutton(\n    parent, text=\"Check to make this option True\",\n    variable=my_boolean_var)\n```", "```py\n# create the widget.  Make sure to save a reference.\nmytext = tk.Text(parent)\n\n# insert a string at the beginning\nmytext.insert('1.0', \"I love my text widget!\")\n\n# insert a string into the current text\nmytext.insert('1.2', 'REALLY ')\n\n# get the whole string\nmytext.get('1.0', tk.END)\n\n# delete the last character.\n# Note that there is always a newline character\n# at the end of the input, so we backup 2 chars.\nmytext.delete('end - 2 chars')\n```", "```py\ntvar = tk.StringVar()\ndef swaptext():\n    if tvar.get() == 'Hi':\n        tvar.set('There')\n    else:\n        tvar.set('Hi')\n\nmy_button = ttk.Button(parent, textvariable=tvar, command=swaptext)\n```", "```py\nimport tkinter as tk\nfrom tkinter import ttk\n\n# Start coding here\n\nclass Application(tk.Tk):\n    \"\"\"Application root window\"\"\"\n\nif __name__ == \"__main__\":\n    app = Application()\n    app.mainloop()\n```", "```py\nform = Frame()\nlabel = Label(form, text='Name')\nname_input = Entry(form)\nlabel.grid(row=0, column=0)\nname_input.grid(row=1, column=0)\n```", "```py\n\"\"\"Start coding here\"\"\"\nclass LabelInput(tk.Frame):\n    \"\"\"A widget containing a label and input together.\"\"\"\n\n    def __init__(self, parent, label='', input_class=ttk.Entry,\n         input_var=None, input_args=None, label_args=None,\n         **kwargs):\n        super().__init__(parent, **kwargs)\n        input_args = input_args or {}\n        label_args = label_args or {}\n        self.variable = input_var\n```", "```py\n        if input_class in (ttk.Checkbutton, ttk.Button, \n        ttk.Radiobutton):\n            input_args[\"text\"] = label\n            input_args[\"variable\"] = input_var\n        else:\n            self.label = ttk.Label(self, text=label, **label_args)\n            self.label.grid(row=0, column=0, sticky=(tk.W + tk.E))\n            input_args[\"textvariable\"] = input_var\n```", "```py\n        self.input = input_class(self, **input_args)\n        self.input.grid(row=1, column=0, sticky=(tk.W + tk.E))\n```", "```py\n        self.columnconfigure(0, weight=1)\n```", "```py\n    def grid(self, sticky=(tk.E + tk.W), **kwargs):\n        super().grid(sticky=sticky, **kwargs)\n```", "```py\n    def get(self):\n        try:\n            if self.variable:\n                return self.variable.get()\n            elif type(self.input) == tk.Text:\n                return self.input.get('1.0', tk.END)\n            else:\n                return self.input.get()\n        except (TypeError, tk.TclError):\n            # happens when numeric fields are empty.\n            return ''\n```", "```py\n    def set(self, value, *args, **kwargs):\n        if type(self.variable) == tk.BooleanVar:\n                self.variable.set(bool(value))\n        elif self.variable:\n                self.variable.set(value, *args, **kwargs)\n        elif type(self.input) in (ttk.Checkbutton, \n        ttk.Radiobutton):\n            if value:\n                self.input.select()\n            else:\n                self.input.deselect()\n        elif type(self.input) == tk.Text:\n            self.input.delete('1.0', tk.END)\n            self.input.insert('1.0', value)\n        else: # input must be an Entry-type widget with no variable\n            self.input.delete(0, tk.END)\n            self.input.insert(0, value)\n```", "```py\nclass DataRecordForm(tk.Frame):\n    \"\"\"The input form for our widgets\"\"\"\n\n    def __init__(self, parent, *args, **kwargs):\n        super().__init__(parent, *args, **kwargs)\n```", "```py\n        # A dict to keep track of input widgets\n        self.inputs = {}\n```", "```py\n        recordinfo = tk.LabelFrame(self, text=\"Record Information\")\n```", "```py\n        self.inputs['Date'] = LabelInput(recordinfo, \"Date\",\n            input_var=tk.StringVar())\n        self.inputs['Date'].grid(row=0, column=0)\n\n        self.inputs['Time'] = LabelInput(recordinfo, \"Time\",\n            input_class=ttk.Combobox, input_var=tk.StringVar(),\n            input_args={\"values\": [\"8:00\", \"12:00\", \"16:00\", \"20:00\"]})\n        self.inputs['Time'].grid(row=0, column=1)\n\n        self.inputs['Technician'] = LabelInput(recordinfo, \n        \"Technician\",\n            input_var=tk.StringVar())\n        self.inputs['Technician'].grid(row=0, column=2)\n```", "```py\n        # line 2\n        self.inputs['Lab'] = LabelInput(recordinfo, \"Lab\",\n            input_class=ttk.Combobox, input_var=tk.StringVar(),\n            input_args={\"values\": [\"A\", \"B\", \"C\", \"D\", \"E\"]})\n        self.inputs['Lab'].grid(row=1, column=0)\n\n       self.inputs['Plot'] = LabelInput(recordinfo, \"Plot\",\n            input_class=ttk.Combobox, input_var=tk.IntVar(),\n           input_args={\"values\": list(range(1, 21))})\n        self.inputs['Plot'].grid(row=1, column=1)\n\n        self.inputs['Seed sample'] = LabelInput(\n            recordinfo, \"Seed sample\", input_var=tk.StringVar())\n        self.inputs['Seed sample'].grid(row=1, column=2)\n\n        recordinfo.grid(row=0, column=0, sticky=tk.W + tk.E)\n```", "```py\n        # Environment Data\n        environmentinfo = tk.LabelFrame(self, text=\"Environment Data\")\n        self.inputs['Humidity'] = LabelInput(\n            environmentinfo, \"Humidity (g/m\u00b3)\",\n            input_class=tk.Spinbox, input_var=tk.DoubleVar(),\n            input_args={\"from_\": 0.5, \"to\": 52.0, \"increment\": .01})\n        self.inputs['Humidity'].grid(row=0, column=0)\n```", "```py\n        self.inputs['Equipment Fault'] = LabelInput(\n            environmentinfo, \"Equipment Fault\",\n            input_class=ttk.Checkbutton,\n            input_var=tk.BooleanVar())\n        self.inputs['Equipment Fault'].grid(\n            row=1, column=0, columnspan=3)\n```", "```py\n        plantinfo = tk.LabelFrame(self, text=\"Plant Data\")\n\n        self.inputs['Plants'] = LabelInput(\n            plantinfo, \"Plants\",\n            input_class=tk.Spinbox,\n            input_var=tk.IntVar(),\n            input_args={\"from_\": 0, \"to\": 20})\n        self.inputs['Plants'].grid(row=0, column=0)\n\n        self.inputs['Blossoms'] = LabelInput(\n            plantinfo, \"Blossoms\",\n            input_class=tk.Spinbox,\n            input_var=tk.IntVar(),\n            input_args={\"from_\": 0, \"to\": 1000})\n        self.inputs['Blossoms'].grid(row=0, column=1)\n```", "```py\n# Notes section\nself.inputs['Notes'] = LabelInput(\n    self, \"Notes\",\n    input_class=tk.Text,\n    input_args={\"width\": 75, \"height\": 10}\n)\nself.inputs['Notes'].grid(sticky=\"w\", row=3, column=0)\n```", "```py\n    def get(self):\n        data = {}\n        for key, widget in self.inputs.items():\n            data[key] = widget.get()\n        return data\n```", "```py\n    def reset(self):\n        for widget in self.inputs.values():\n            widget.set('')\n```", "```py\n        self.reset()\n```", "```py\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.title(\"ABQ Data Entry Application\")\n        self.resizable(width=False, height=False)\n```", "```py\n        ttk.Label(\n            self,\n            text=\"ABQ Data Entry Application\",\n            font=(\"TkDefaultFont\", 16)\n        ).grid(row=0)\n```", "```py\n        self.recordform = DataRecordForm(self)\n        self.recordform.grid(row=1, padx=10)\n```", "```py\n        self.savebutton = ttk.Button(self, text=\"Save\", \n        command=self.on_save)\n        self.savebutton.grid(sticky=tk.E, row=2, padx=10)\n```", "```py\n        # status bar\n        self.status = tk.StringVar()\n        self.statusbar = ttk.Label(self, textvariable=self.status)\n        self.statusbar.grid(sticky=(tk.W + tk.E), row=3, padx=10)\n```", "```py\nfrom datetime import datetime\nimport os\nimport csv\n```", "```py\n   def on_save(self):\n        datestring = datetime.today().strftime(\"%Y-%m-%d\")\n        filename = \"abq_data_record_{}.csv\".format(datestring)\n        newfile = not os.path.exists(filename)\n```", "```py\n        data = self.recordform.get()\n```", "```py\n        with open(filename, 'a') as fh:\n            csvwriter = csv.DictWriter(fh, fieldnames=data.keys())\n            if newfile:\n                csvwriter.writeheader()\n            csvwriter.writerow(data)\n```", "```py\n        self.records_saved = 0\n```", "```py\n        self.records_saved += 1\n        self.status.set(\n            \"{} records saved this session\".format(self.records_saved))\n```", "```py\n        self.recordform.reset()\n```"]