["```py\nif [condition to check]:\n\u00a0\u00a0\u00a0\u00a0[instruction set to execute if condition is true]\n```", "```py\nif [condition 1] and [condition 2]:\n\u00a0\u00a0\u00a0\u00a0[instruction set]\n```", "```py\nif [condition 1]:\n\u00a0\u00a0\u00a0\u00a0[instruction set 1]\nelif [condition 2]:\n\u00a0\u00a0\u00a0\u00a0[instruction set 2]\n...\nelif [condition n]:\n\u00a0\u00a0\u00a0\u00a0[instruction set n]\nelse:\n\u00a0\u00a0\u00a0\u00a0[instruction set n + 1]\n```", "```py\n    x = 130\n    ```", "```py\n    if x % 5 == 0:\n    \u00a0\u00a0\u00a0\u00a0print('x is divisible by 5')\n    ```", "```py\n    elif x % 6 == 0:\n    \u00a0\u00a0\u00a0\u00a0print('x is divisible by 6')\n    elif x % 7 == 0:\n    \u00a0\u00a0\u00a0\u00a0print('x is divisible by 7')\n    ```", "```py\n    else:\n    \u00a0\u00a0\u00a0\u00a0print('x is not divisible by 5, 6, or 7')\n    ```", "```py\n    x is divisible by 6\n    ```", "```py\n    if x % 5 == 0:\n    \u00a0\u00a0\u00a0\u00a0with open('output.txt', 'w') as f:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('x is divisible by 5')\n    elif x % 6 == 0:\n    \u00a0\u00a0\u00a0\u00a0with open('output.txt', 'w') as f:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('x is divisible by 6')\n    elif x % 7 == 0:\n    \u00a0\u00a0\u00a0\u00a0with open('output.txt', 'w') as f:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('x is divisible by 7')\n    else:\n    \u00a0\u00a0\u00a0\u00a0with open('output.txt', 'w') as f:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('x is not divisible by 5, 6, or 7')\n    ```", "```py\n    x is divisible by 6\n    ```", "```py\n>>> x = 0\n>>> while x < 3:\n...     print(x)\n...     x += 1\n0\n1\n2\n```", "```py\n>>> for x in range(3):\n...     print(x)\n0\n1\n2\n```", "```py\n    import random\n    true_value = random.randint(0, 100)\n    ```", "```py\n    guess = input('Enter your guess: ')\n    ```", "```py\n    guess = int(guess)\n    if guess == true_value:\n    \u00a0\u00a0\u00a0\u00a0print('Congratulations! You guessed correctly.')\n    elif guess > true_value:\n    \u00a0\u00a0\u00a0\u00a0print('Lower.')  # user guessed too high\n    else:\n    \u00a0\u00a0\u00a0\u00a0print('Higher.')  # user guessed too low\n    ```", "```py\n    try:\n    \u00a0\u00a0\u00a0\u00a0if guess == true_value:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Congratulations! You guessed correctly.')\n    \u00a0\u00a0\u00a0\u00a0elif guess > true_value:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Lower.')  # user guessed too high\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Higher.')  # user guessed too low\n    # when the input is invalid\n    except ValueError:\n    \u00a0\u00a0\u00a0\u00a0print('Please enter a valid number.')\n    ```", "```py\n    import random\n    true_value = random.randint(0, 100)\n    while True:\n    \u00a0\u00a0\u00a0\u00a0guess = input('Enter your guess: ')\n    \u00a0\u00a0\u00a0\u00a0try:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0guess = int(guess)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if guess == true_value:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Congratulations! You guessed correctly.')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif guess > true_value:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Lower.')  # user guessed too high\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Higher.')  # user guessed too low\n    \u00a0\u00a0\u00a0\u00a0# when the input is invalid\n    \u00a0\u00a0\u00a0\u00a0except ValueError:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Please enter a valid number.')\n    ```", "```py\n    Enter your guess: 50\n    Lower.\n    Enter your guess: 25\n    Lower.\n    Enter your guess: 13\n    Congratulations! You guessed correctly.\n    ```", "```py\na = 'Hello, world!'\nb = \"Hello, world!\"\n```", "```py\n>>> a = 'Hello, '\n>>> b = 'world!'\n>>> print(a + b)\nHello, world!\n>>> for char in a:\n...\u00a0\u00a0\u00a0\u00a0\u00a0print(char)\nH\ne\nl\nl\no\n,\n\u00a0# a blank character printed here, the last character in string a\n>>> print(a[2])\nl\n>>> print(a[1: 4]) \nell\n```", "```py\n>>> a = 42\n>>> print(f'The value of a is {a}.')\nThe value of a is 42.\n```", "```py\n>>> from math import pi\n>>> print(f'Pi, rounded to three decimal places, is {pi:.3f}.')\nPi, rounded to three decimal places, is 3.142.\n>>> from datetime import datetime\n>>> print(f'Current time is {datetime.now():%H:%M}.')\nCurrent time is 21:39.\n```", "```py\n>>> a = [1, 'a', (2, 3)]  # a list containing a number, a string, and a tuple\n```", "```py\n>>> a = [1, 'a', (2, 3), 2]\n>>> a[2]\n(2, 3)\n>>> a[1: 3]\n['a', (2, 3)]\n```", "```py\n>>> a = [1, 'a', (2, 3)]\n>>> a.append(3)\n>>> a\n[1, 'a', (2, 3), 3]\n>>> b = [2, 5, 'b']\n>>> a + b\n[1, 'a', (2, 3), 3, 2, 5, 'b']\n```", "```py\n>>> a = [1, 4, 2, 9, 10, 3]\n```", "```py\n>>> b = [2 * element for element in a]\n>>> b\n[2, 8, 4, 18, 20, 6]\n```", "```py\n>>> c = [2 * element for element in a if element % 2 == 1]\n>>> c\n[2, 18, 6]\n```", "```py\n    a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    ```", "```py\n    for row in a:\n    ```", "```py\n    for row in a:\n    \u00a0\u00a0\u00a0\u00a0print(row[0])\n    ```", "```py\n    for row in a:\n    \u00a0\u00a0\u00a0\u00a0for element in row:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(element)\n    ```", "```py\n    for i in range(3):\n    \u00a0\u00a0\u00a0\u00a0print(a[i][i])\n    ```", "```py\n    for i in range(3):\n    \u00a0\u00a0\u00a0\u00a0print(f'The {i + 1}-th diagonal element is: {a[i][i]}')\n    ```", "```py\n    The 1-th diagonal element is: 1\n    The 2-th diagonal element is: 5\n    The 3-th diagonal element is: 9\n    ```", "```py\n>>> a = (1, 2)\n>>> a[0] = 3  # trying to change the first element\nTraceback (most recent call last):\n\u00a0\u00a0\u00a0\u00a0File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>> a.append(2)  # trying to add another element\nTraceback (most recent call last):\n\u00a0\u00a0\u00a0\u00a0File \"<stdin>\", line 1, in <module>\nAttributeError: 'tuple' object has no attribute 'append'\n```", "```py\n>>> a = {1, 2, 3}\n>>> a.add(4)\n>>> a\n{1, 2, 3, 4}\n```", "```py\n>>> a\n{1, 2, 3, 4}\n>>> a.add(3)\n>>> a\n{1, 2, 3, 4}\n```", "```py\n>>> a = {1, 2, 3, 4}\n>>> b = {2, 5, 6}\n>>> a.union(b)\n{1, 2, 3, 4, 5, 6}\n>>> a.intersection(b)\n{2}\n```", "```py\n>>> score_dict = {'Alice': 90, 'Bob': 85, 'Carol': 86}\n>>> score_dict\n{'Alice': 90, 'Bob': 85, 'Carol': 86}\n```", "```py\n>>> score_dict['Alice']\n90\n>>> score_dict['Carol']\n86\n>>> score_dict['Chris']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'Chris'\n```", "```py\n>>> score_dict['Alice'] = 89\n>>> score_dict\n{'Alice': 89, 'Bob': 85, 'Carol': 86}\n>>> score_dict['Chris'] = 85\n>>> score_dict\n{'Alice': 89, 'Bob': 85, 'Carol': 86, 'Chris': 85}\n```", "```py\n>>> square_dict = {i: i ** 2 for i in range(-1, 2)}\n>>> square_dict\n{-1: 1, 0: 0, 1: 1}\n```", "```py\n>>> del score_dict['Alice']\n```", "```py\n>>> score_dict['Alice']\nKeyError: 'Alice'\n```", "```py\n    prices = {'MacBook 13': 1300, 'MacBook 15': 2100, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'ASUS ROG': 1600}\n    ```", "```py\n    cart = {}\n    ```", "```py\n    while True:\n    \u00a0\u00a0\u00a0\u00a0_continue = input('Would you like to continue '\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'shopping? [y/n]: ')\n    \u00a0\u00a0\u00a0\u00a0if _continue == 'y':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0elif _continue == 'n':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Please only enter \"y\" or \"n\".')\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0if _continue == 'y':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(f'Available products and prices: {prices}')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new_item = input('Which product would you like to '\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'add to your cart? ')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if new_item in prices:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if new_item in cart:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cart[new_item] += 1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cart[new_item] = 1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Please only choose from the available products.')\n    ```", "```py\n    # Calculation of total bill.\n    running_sum = 0\n    for item in cart:\n    \u00a0\u00a0\u00a0\u00a0running_sum += cart[item] * prices[item]  # quantity times price\n    ```", "```py\n    print(f'Your final cart is:')\n    for item in cart:\n    \u00a0\u00a0\u00a0\u00a0print(f'- {cart[item]} {item}(s)')\n    print(f'Your final bill is: {running_sum}')\n    ```", "```py\ndef func_name(param1, param2, ...):\n\u00a0\u00a0\u00a0\u00a0 [\u2026]\n\u00a0\u00a0\u00a0\u00a0return [\u2026]\n```", "```py\n>>> def greet(name):\n...     print(f'Hello, {name}!')\n```", "```py\n>>> greet('Quan')\nHello, Quan!\n>>> greet('Alice')\nHello, Alice!\n>>> greet()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: greet() missing 1 required positional argument: 'name'\n```", "```py\ndef get_first_even(my_list):\n\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0return  # should be the first even element\n```", "```py\ndef get_first_even(my_list):\n\u00a0\u00a0\u00a0\u00a0for item in my_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if item % 2 == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n\u00a0\u00a0\u00a0\u00a0return  # should be the first even element\n```", "```py\ndef get_first_even(my_list):\n\u00a0\u00a0\u00a0\u00a0for item in my_list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if item % 2 == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return item\n\u00a0\u00a0\u00a0\u00a0return False\n```", "```py\n    def get_max(my_list):\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0return ...\n    ```", "```py\n    def get_max(my_list):\n    \u00a0\u00a0\u00a0\u00a0running_max_index = 0\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0return ...\n    ```", "```py\n    def get_max(my_list):\n    \u00a0\u00a0\u00a0\u00a0running_max_index = 0\n    \u00a0\u00a0\u00a0\u00a0# Iterate over index-value pairs.\n    \u00a0\u00a0\u00a0\u00a0for index, item in enumerate(my_list):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [...]\n    \u00a0\u00a0\u00a0\u00a0return ...\n    ```", "```py\n    def get_max(my_list):\n    \u00a0\u00a0\u00a0\u00a0running_max_index = 0\n    \u00a0\u00a0\u00a0\u00a0# Iterate over index-value pairs.\n    \u00a0\u00a0\u00a0\u00a0for index, item in enumerate(my_list):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if item >= my_list[running_max_index]:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0running_max_index = index\n    \u00a0\u00a0\u00a0\u00a0return [...]\n    ```", "```py\n    def get_max(my_list):\n    \u00a0\u00a0\u00a0\u00a0running_max_index = 0\n    \u00a0\u00a0\u00a0\u00a0# Iterate over index-value pairs.\n    \u00a0\u00a0\u00a0\u00a0for index, item in enumerate(my_list):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if item >= my_list[running_max_index]:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0running_max_index = index\n    \u00a0\u00a0\u00a0\u00a0return running_max_index, my_list[running_max_index]\n    ```", "```py\n    >>> get_max([1, 3, 2])\n    (1, 3)\n    >>>  get_max([1, 3, 56, 29, 100, 99, 3, 100, 10, 23])\n    (7, 100)\n    ```", "```py\n>>> def find_sum(my_list):\n...     if len(my_list) == 1:\n...             return my_list[0]\n...     return find_sum(my_list[: -1]) + my_list[-1]\n```", "```py\n>>> find_sum([1, 2, 3])\n6\n>>> find_sum([1])\n1\n```", "```py\n    def solve(n):\n    \u00a0\u00a0\u00a0\u00a0return 2 * solve(n - 1) + 1\n    ```", "```py\n    def solve(n):\n    \u00a0\u00a0\u00a0\u00a0if n == 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1\n    \u00a0\u00a0\u00a0\u00a0return 2 * solve(n - 1) + 1\n    ```", "```py\n    >>> print(solve(3) == 2 ** 3 - 1)\n    True\n    >>> print(solve(6) == 2 ** 6 - 1)\n    True\n    ```", "```py\n    N = 8\n    ```", "```py\n    # Print out the board in a nice format.\n    def display_solution(board):\n    \u00a0\u00a0\u00a0\u00a0for i in range(N):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(N):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(board[i][j], end=' ')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n    ```", "```py\n    # Check if a queen can be placed in the position.\n    def check_next(board, row, col):\n    \u00a0\u00a0\u00a0\u00a0# Check the current column.\n    \u00a0\u00a0\u00a0\u00a0for i in range(row):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if board[i][col] == 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n    \u00a0\u00a0\u00a0\u00a0# Check the upper-left diagonal.\n    \u00a0\u00a0\u00a0\u00a0for i, j in zip(range(row, -1, -1), \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0range(col, -1, -1)):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if board[i][j] == 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n    \u00a0\u00a0\u00a0\u00a0# Check the upper-right diagonal.\n    \u00a0\u00a0\u00a0\u00a0for i, j in zip(range(row, -1, -1), \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0range(col, N)):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if board[i][j] == 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n    \u00a0\u00a0\u00a0\u00a0return True\n    ```", "```py\n    def recur_generate_solution(board, row_id):\n    \u00a0\u00a0\u00a0\u00a0# Return if we have reached the last row.\n    \u00a0\u00a0\u00a0\u00a0if row_id >= N:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\n    \u00a0\u00a0\u00a0\u00a0# Iteratively try out cells in the current row.\n    \u00a0\u00a0\u00a0\u00a0for i in range(N):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if check_next(board, row_id, i):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0board[row_id][i] = 1 \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Return if a valid solution is found.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0final_board = recur_generate_solution(\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0board, row_id + 1)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if final_board:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0board[row_id][i] = 0  \n    \u00a0\u00a0\u00a0\u00a0# When the current board has no valid solutions.\n    \u00a0\u00a0\u00a0\u00a0return False\n    ```", "```py\n    # Generate a valid solution.\n    def generate_solution():\n    \u00a0\u00a0\u00a0\u00a0# Check if a queen can be placed in the position.\n    \u00a0\u00a0\u00a0\u00a0def check_next(board, row, col):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n    \u00a0\u00a0\u00a0\u00a0# Recursively generate a solution.\n    \u00a0\u00a0\u00a0\u00a0def recur_generate_solution(board, row_id):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[...]\n    \u00a0\u00a0\u00a0\u00a0# Start out with en empty board.\n    \u00a0\u00a0\u00a0\u00a0my_board = [[0 for _ in range(N)] for __ in range(N)]\n    \u00a0\u00a0\u00a0\u00a0final_solution = recur_generate_solution(my_board, 0)\n    \u00a0\u00a0\u00a0\u00a0# Display the final solution.\n    \u00a0\u00a0\u00a0\u00a0if final_solution is False:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('A solution cannot be found.')\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('A solution was found.')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0display_solution(my_board)\n    ```", "```py\n    >>> generate_solution()\n    A solution was found.\n    1 0 0 0 0 0 0 0 \n    0 0 0 0 1 0 0 0 \n    0 0 0 0 0 0 0 1 \n    0 0 0 0 0 1 0 0 \n    0 0 1 0 0 0 0 0 \n    0 0 0 0 0 0 1 0 \n    0 1 0 0 0 0 0 0 \n    0 0 0 1 0 0 0 0 \n    ```", "```py\nimport unittest\nclass SampleTest(unittest.TestCase):\n\u00a0\u00a0\u00a0\u00a0def test_equal(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual(2 ** 3 - 1, 7)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual('Hello, world!', 'Hello, ' + 'world!')\n\n\u00a0\u00a0\u00a0\u00a0def test_true(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertTrue(2 ** 3 < 3 ** 2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for x in range(10):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertTrue(- x ** 2 <= 0)\n```", "```py\n>>> unittest.main()\ntest_equal (__main__.SampleTest) ... ok\ntest_true (__main__.SampleTest) ... ok\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\nOK\n```", "```py\nunittest.main(argv=[''], verbosity=2, exit=False)\n```", "```py\n    import threading\n    import sys; sys.setswitchinterval(10 ** -10)\n    class Counter:\n    \u00a0\u00a0\u00a0\u00a0def __init__(self, target):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.value = 0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.target = target        \n    \u00a0\u00a0\u00a0\u00a0def update(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current_value = self.value\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# breakpoint()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.value = current_value + 1\n\n    \u00a0\u00a0\u00a0\u00a0def run(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads = [threading.Thread(target=self.update) \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for _ in range(self.target)]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for t in threads:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.start()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for t in threads:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.join()\n    ```", "```py\n    import unittest\n    class TestCounter(unittest.TestCase):\n    \u00a0\u00a0\u00a0\u00a0def setUp(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.small_params = 5\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.med_params = 5000\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.large_params = 10000\n\n    \u00a0\u00a0\u00a0\u00a0def test_small(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0small_counter = Counter(self.small_params)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0small_counter.run()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual(small_counter.value, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.small_params)\n\n    \u00a0\u00a0\u00a0\u00a0def test_med(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0med_counter = Counter(self.med_params)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0med_counter.run()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual(med_counter.value, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.med_params)\n\n    \u00a0\u00a0\u00a0\u00a0def test_large(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0large_counter = Counter(self.large_params)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0large_counter.run()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.assertEqual(large_counter.value, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.large_params)\n    \u00a0\u00a0\u00a0\u00a0if __name__ == '__main__':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unittest.main()\n    ```", "```py\n    Run this Python script:test_large (__main__.TestCounter) ... FAIL\n    test_med (__main__.TestCounter) ... FAIL\n    test_small (__main__.TestCounter) ... ok\n    ====================================================================\n    FAIL: test_large (__main__.TestCounter)\n    --------------------------------------------------------------------\n    Traceback (most recent call last):\n    \u00a0\u00a0\u00a0\u00a0File \"<ipython-input-57-4ed47b9310ba>\", line 22, in test_large\n    \u00a0\u00a0\u00a0\u00a0self.assertEqual(large_counter.value, self.large_params)\n    AssertionError: 9996 != 10000\n    ====================================================================\n    FAIL: test_med (__main__.TestCounter)\n    --------------------------------------------------------------------\n    Traceback (most recent call last):\n    \u00a0\u00a0\u00a0\u00a0File \"<ipython-input-57-4ed47b9310ba>\", line 17, in test_med\n    \u00a0\u00a0\u00a0\u00a0self.assertEqual(med_counter.value, self.med_params)\n    AssertionError: 4999 != 5000\n    --------------------------------------------------------------------\n    Ran 3 tests in 0.890s\n    FAILED (failures=2)\n    ```", "```py\n    class Counter:\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0def update(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current_value = self.value\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0breakpoint()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.value = current_value + 1\n    \u00a0\u00a0\u00a0\u00a0...\n    ```", "```py\n    sample_counter = Counter(10)\n    sample_counter.run()\n    ```", "```py\n    (Pdb) ll\n      9         def update(self):\n     10             current_value = self.value\n     11             breakpoint()\n     12  ->         self.value = current_value + 1\n    ```", "```py\n    (Pdb) p self.value\n    0\n    ```", "```py\n    (Pdb) n\n    --Return--\n    > <ipython-input-61-066f5069e308>(12)update()->None\n    -> self.value = current_value + 1\n    (Pdb) p self.value\n    1\n    ```", "```py\n    $ git\n    usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<command> [<args>]\n    ```", "```py\n    1,1,1\n    1,1,1\n    ```", "```py\n    def add_elements(a, b):\n    \u00a0\u00a0\u00a0\u00a0result = []\n    \u00a0\u00a0\u00a0\u00a0for item_a, item_b in zip(a, b):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result.append(item_a + item_b)\n    \u00a0\u00a0\u00a0\u00a0return result\n    ```", "```py\n    with open('input.txt', 'r') as f:\n    \u00a0\u00a0\u00a0\u00a0lines = f.readlines()\n    last_line1, last_line2 = lines[-2], lines[-1]\n    ```", "```py\n    list1 = list(map(int, last_line1[: -1].split(',')))\n    list2 = list(map(int, last_line2[: -1].split(',')))\n    ```", "```py\n    new_list = add_elements(list1, list2)\n    with open('input.txt', 'a') as f:\n    \u00a0\u00a0\u00a0\u00a0for i, item in enumerate(new_list):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write(str(item))\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i < len(new_list) - 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write(',')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f.write('\\n')\n    ```", "```py\n    1,1,1\n    1,1,1\n    2,2,2\n    ```", "```py\n    $ git init\n    ```", "```py\n    git add .\n    git commit -m [any message with double quotes]\n    ```", "```py\n    git remote add origin [URL to GitHub repository]\n    ```", "```py\n    git push origin master\n    ```", "```py\n    git add .\n    git commit\n    git push origin master\n    ```", "```py\n    -----------------------\n    0 0 3 | 0 2 0 | 6 0 0 | \n    9 0 0 | 3 0 5 | 0 0 1 | \n    0 0 1 | 8 0 6 | 4 0 0 | \n    -----------------------\n    0 0 8 | 1 0 2 | 9 0 0 | \n    7 0 0 | 0 0 0 | 0 0 8 | \n    0 0 6 | 7 0 8 | 2 0 0 | \n    -----------------------\n    0 0 2 | 6 0 9 | 5 0 0 | \n    8 0 0 | 2 0 3 | 0 0 9 | \n    0 0 5 | 0 1 0 | 3 0 0 | \n    -----------------------\n    ```", "```py\n    -----------------------\n    0 0 3 | 0 2 0 | 6 0 0 | \n    9 0 0 | 3 0 5 | 0 0 1 | \n    0 0 1 | 8 0 6 | 4 0 0 | \n    -----------------------\n    0 0 8 | 1 0 2 | 9 0 0 | \n    7 0 0 | 0 0 0 | 0 0 8 | \n    0 0 6 | 7 0 8 | 2 0 0 | \n    -----------------------\n    0 0 2 | 6 0 9 | 5 0 0 | \n    8 0 0 | 2 0 3 | 0 0 9 | \n    0 0 5 | 0 1 0 | 3 0 0 | \n    -----------------------\n    ```", "```py\n    -----------------------\n    4 8 3 | 9 2 1 | 6 5 7 | \n    9 6 7 | 3 4 5 | 8 2 1 | \n    2 5 1 | 8 7 6 | 4 9 3 | \n    -----------------------\n    5 4 8 | 1 3 2 | 9 7 6 | \n    7 2 9 | 5 6 4 | 1 3 8 | \n    1 3 6 | 7 9 8 | 2 4 5 | \n    -----------------------\n    3 7 2 | 6 8 9 | 5 1 4 | \n    8 1 4 | 2 5 3 | 7 6 9 | \n    6 9 5 | 4 1 7 | 3 8 2 | \n    -----------------------\n    ```"]