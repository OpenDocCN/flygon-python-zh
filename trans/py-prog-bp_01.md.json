["```py\n$ python3 -m venv weatherterm\n```", "```py\n$ . weatherterm/bin/activate\n```", "```py\nbeautifulsoup4==4.6.0\nselenium==3.6.0\n```", "```py\npip install -r requirements.txt\n```", "```py\nweatherterm\n\u251c\u2500\u2500 phantomjs\n\u2514\u2500\u2500 weatherterm\n    \u251c\u2500\u2500 core\n    \u251c\u2500\u2500 parsers   \n```", "```py\nimport os\nimport re\nimport inspect\n\ndef _get_parser_list(dirname):\n    files = [f.replace('.py', '')\n             for f in os.listdir(dirname)\n             if not f.startswith('__')]\n\n    return files\n\ndef _import_parsers(parserfiles):\n\n    m = re.compile('.+parser$', re.I)\n\n    _modules = __import__('weatherterm.parsers',\n                          globals(),\n                          locals(),\n                          parserfiles,\n                          0)\n\n    _parsers = [(k, v) for k, v in inspect.getmembers(_modules)\n                if inspect.ismodule(v) and m.match(k)]\n\n    _classes = dict()\n\n    for k, v in _parsers:\n        _classes.update({k: v for k, v in inspect.getmembers(v)\n                         if inspect.isclass(v) and m.match(k)})\n\n    return _classes\n\ndef load(dirname):\n    parserfiles = _get_parser_list(dirname)\n    return _import_parsers(parserfiles)\n```", "```py\n[('WeatherComParser',\n  <class 'weatherterm.parsers.weather_com_parser.WeatherComParser'>),\n  ...]\n```", "```py\nfrom enum import Enum, unique\n\n@unique\nclass ForecastType(Enum):\n    TODAY = 'today'\n    FIVEDAYS = '5day'\n    TENDAYS = '10day'\n    WEEKEND = 'weekend'\n```", "```py\nfrom enum import Enum\n\nclass BaseEnum(Enum):\n    def _generate_next_value_(name, start, count, last_value):\n        return name\n```", "```py\nfrom enum import auto, unique\n\nfrom .base_enum import BaseEnum\n\n@unique\nclass Unit(BaseEnum):\n    CELSIUS = auto()\n    FAHRENHEIT = auto()\n```", "```py\nfrom .unit import Unit\n```", "```py\nPython 3.6.2 (default, Sep 11 2017, 22:31:28) \n[GCC 6.3.0 20170516] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from weatherterm.core import Unit\n>>> [value for key, value in Unit.__members__.items()]\n[<Unit.CELSIUS: 'CELSIUS'>, <Unit.FAHRENHEIT: 'FAHRENHEIT'>]\n```", "```py\nfrom datetime import date\n\nfrom .forecast_type import ForecastType\n\nclass Forecast:\n    def __init__(\n            self,\n            current_temp,\n            humidity,\n            wind,\n            high_temp=None,\n            low_temp=None,\n            description='',\n            forecast_date=None,\n            forecast_type=ForecastType.TODAY):\n        self._current_temp = current_temp\n        self._high_temp = high_temp\n        self._low_temp = low_temp\n        self._humidity = humidity\n        self._wind = wind\n        self._description = description\n        self._forecast_type = forecast_type\n\n        if forecast_date is None:\n            self.forecast_date = date.today()\n        else:\n            self._forecast_date = forecast_date\n\n    @property\n    def forecast_date(self):\n        return self._forecast_date\n\n    @forecast_date.setter\n    def forecast_date(self, forecast_date):\n        self._forecast_date = forecast_date.strftime(\"%a %b %d\")\n\n    @property\n    def current_temp(self):\n        return self._current_temp\n\n    @property\n    def humidity(self):\n        return self._humidity\n\n    @property\n    def wind(self):\n        return self._wind\n\n    @property\n    def description(self):\n        return self._description\n\n    def __str__(self):\n        temperature = None\n        offset = ' ' * 4\n\n        if self._forecast_type == ForecastType.TODAY:\n            temperature = (f'{offset}{self._current_temp}\\xb0\\n'\n                           f'{offset}High {self._high_temp}\\xb0 / '\n                           f'Low {self._low_temp}\\xb0 ')\n        else:\n            temperature = (f'{offset}High {self._high_temp}\\xb0 / '\n                           f'Low {self._low_temp}\\xb0 ')\n\n        return(f'>> {self.forecast_date}\\n'\n               f'{temperature}'\n               f'({self._description})\\n'\n               f'{offset}Wind: '\n               f'{self._wind} / Humidity: {self._humidity}\\n')\n```", "```py\nfrom .unit import Unit\n\nclass UnitConverter:\n    def __init__(self, parser_default_unit, dest_unit=None):\n        self._parser_default_unit = parser_default_unit\n        self.dest_unit = dest_unit\n\n        self._convert_functions = {\n            Unit.CELSIUS: self._to_celsius,\n            Unit.FAHRENHEIT: self._to_fahrenheit,\n        }\n\n    @property\n    def dest_unit(self):\n        return self._dest_unit\n\n    @dest_unit.setter\n    def dest_unit(self, dest_unit):\n        self._dest_unit = dest_unit\n\n    def convert(self, temp):\n\n        try:\n            temperature = float(temp)\n        except ValueError:\n            return 0\n\n        if (self.dest_unit == self._parser_default_unit or\n                self.dest_unit is None):\n            return self._format_results(temperature)\n\n        func = self._convert_functions[self.dest_unit]\n        result = func(temperature)\n\n        return self._format_results(result)\n\n    def _format_results(self, value):\n        return int(value) if value.is_integer() else f'{value:.1f}'\n\n    def _to_celsius(self, fahrenheit_temp):\n        result = (fahrenheit_temp - 32) * 5/9\n        return result\n\n    def _to_fahrenheit(self, celsius_temp):\n        result = (celsius_temp * 9/5) + 32\n        return result\n```", "```py\nreturn int(value) if value.is_integer() else f'{value:.1f}'\n```", "```py\nfrom .base_enum import BaseEnum\nfrom .unit_converter import UnitConverter\nfrom .forecast_type import ForecastType\nfrom .forecast import Forecast\n```", "```py\nimport os\nfrom selenium import webdriver\n\nclass Request:\n    def __init__(self, base_url):\n        self._phantomjs_path = os.path.join(os.curdir,\n                                          'phantomjs/bin/phantomjs')\n        self._base_url = base_url\n        self._driver = webdriver.PhantomJS(self._phantomjs_path)\n\n    def fetch_data(self, forecast, area):\n        url = self._base_url.format(forecast=forecast, area=area)\n        self._driver.get(url)\n\n        if self._driver.title == '404 Not Found':\n            error_message = ('Could not find the area that you '\n                             'searching for')\n            raise Exception(error_message)\n\n        return self._driver.page_source\n```", "```py\nfrom .request import Request\n```", "```py\n$ python -m weatherterm\n```", "```py\nimport sys\nfrom argparse import ArgumentParser\n\nfrom weatherterm.core import parser_loader\nfrom weatherterm.core import ForecastType\nfrom weatherterm.core import Unit\n\ndef _validate_forecast_args(args):\n    if args.forecast_option is None:\n        err_msg = ('One of these arguments must be used: '\n                   '-td/--today, -5d/--fivedays, -10d/--tendays, -\n                    w/--weekend')\n        print(f'{argparser.prog}: error: {err_msg}', \n        file=sys.stderr)\n        sys.exit()\n\nparsers = parser_loader.load('./weatherterm/parsers')\n\nargparser = ArgumentParser(\n    prog='weatherterm',\n    description='Weather info from weather.com on your terminal')\n\nrequired = argparser.add_argument_group('required arguments')\n\nrequired.add_argument('-p', '--parser',\n                      choices=parsers.keys(),\n                      required=True,\n                      dest='parser',\n                      help=('Specify which parser is going to be  \n                       used to '\n                            'scrape weather information.'))\n\nunit_values = [name.title() for name, value in Unit.__members__.items()]\n\nargparser.add_argument('-u', '--unit',\n                       choices=unit_values,\n                       required=False,\n                       dest='unit',\n                       help=('Specify the unit that will be used to \n                       display '\n                             'the temperatures.'))\n\nrequired.add_argument('-a', '--areacode',\n                      required=True,\n                      dest='area_code',\n                      help=('The code area to get the weather \n                       broadcast from. '\n                            'It can be obtained at \n                              https://weather.com'))\n\nargparser.add_argument('-v', '--version',\n                       action='version',\n                       version='%(prog)s 1.0')\n\nargparser.add_argument('-td', '--today',\n                       dest='forecast_option',\n                       action='store_const',\n                       const=ForecastType.TODAY,\n                       help='Show the weather forecast for the \n                       current day')\n\nargs = argparser.parse_args()\n\n_validate_forecast_args(args)\n\ncls = parsers[args.parser]\n\nparser = cls()\nresults = parser.run(args)\n\nfor result in results:\n    print(results)\n```", "```py\nrequired = argparser.add_argument_group('required arguments')\n```", "```py\nrequired.add_argument('-p', '--parser',\n                      choices=parsers.keys(),\n                      required=True,\n                      dest='parser',\n                      help=('Specify which parser is going to be \n                       used to '\n                            'scrape weather information.'))\n```", "```py\nargparser.add_argument('-td', '--today',\n                       dest='forecast_option',\n                       action='store_const',\n                       const=ForecastType.TODAY,\n                       help='Show the weather forecast for the \n                       current day')\n```", "```py\nunit_values = [name.title() for name, value in Unit.__members__.items()]\n\nrequired.add_argument('-u', '--unit',\n                      choices=unit_values,\n                      required=False,\n                      dest='unit',\n                      help=('Specify the unit that will be used to \n                       display '\n                            'the temperatures.'))\n```", "```py\nfrom argparse import Action\n\nfrom weatherterm.core import Unit\n\nclass SetUnitAction(Action):\n\n    def __call__(self, parser, namespace, values,    \n     option_string=None):\n        unit = Unit[values.upper()]\n        setattr(namespace, self.dest, unit)\n```", "```py\nNamespace(area_code=None, fields=None, forecast_option=None, parser=None, unit=None)\n```", "```py\nUnit[values.upper()]\n```", "```py\n>>> from weatherterm.core import Unit\n>>> Unit['CELSIUS']\n<Unit.CELSIUS: 'CELSIUS'>\n>>> Unit['FAHRENHEIT']\n<Unit.FAHRENHEIT: 'FAHRENHEIT'>\n```", "```py\nfrom .set_unit_action import SetUnitAction\n```", "```py\nfrom weatherterm.core import SetUnitAction\n```", "```py\nrequired.add_argument('-u', '--unit',\n                      choices=unit_values,\n                      required=False,\n                      action=SetUnitAction,\n                      dest='unit',\n                      help=('Specify the unit that will be used to \n                       display '\n                            'the temperatures.'))\n```", "```py\nfrom weatherterm.core import ForecastType\n\nclass WeatherComParser:\n\n    def __init__(self):\n        self._forecast = {\n            ForecastType.TODAY: self._today_forecast,\n            ForecastType.FIVEDAYS: self._five_and_ten_days_forecast,\n            ForecastType.TENDAYS: self._five_and_ten_days_forecast,\n            ForecastType.WEEKEND: self._weekend_forecast,\n            }\n\n    def _today_forecast(self, args):\n        raise NotImplementedError()\n\n    def _five_and_ten_days_forecast(self, args):\n        raise NotImplementedError()\n\n    def _weekend_forecast(self, args):\n        raise NotImplementedError()\n\n    def run(self, args):\n        self._forecast_type = args.forecast_option\n        forecast_function = self._forecast[args.forecast_option]\n        return forecast_function(args)\n```", "```py\n$ python -m weatherterm --help\n```", "```py\nusage: weatherterm [-h] -p {WeatherComParser} [-u {Celsius,Fahrenheit}] -a AREA_CODE [-v] [-td] [-5d] [-10d] [-w]\n\nWeather info from weather.com on your terminal\n\noptional arguments:\n -h, --help show this help message and exit\n -u {Celsius,Fahrenheit}, --unit {Celsius,Fahrenheit}\n Specify the unit that will be used to display \n the temperatures.\n -v, --version show program's version number and exit\n -td, --today Show the weather forecast for the current day\n\nrequire arguments:\n -p {WeatherComParser}, --parser {WeatherComParser}\n Specify which parser is going to be used to scrape\n weather information.\n -a AREA_CODE, --areacode AREA_CODE\n The code area to get the weather broadcast from. It\n can be obtained at https://weather.com\n```", "```py\n$ python -m weatherterm -u Celsius -a SWXX2372:1:SW -p WeatherComParser -td\n```", "```py\nimport re\n\nfrom weatherterm.core import Forecast\nfrom weatherterm.core import Request\nfrom weatherterm.core import Unit\nfrom weatherterm.core import UnitConverter\n```", "```py\nself._base_url = 'http://weather.com/weather/{forecast}/l/{area}'\nself._request = Request(self._base_url)\n\nself._temp_regex = re.compile('([0-9]+)\\D{,2}([0-9]+)')\nself._only_digits_regex = re.compile('[0-9]+')\n\nself._unit_converter = UnitConverter(Unit.FAHRENHEIT)\n```", "```py\ndef _get_data(self, container, search_items):\n    scraped_data = {}\n\n    for key, value in search_items.items():\n        result = container.find(value, class_=key)\n\n        data = None if result is None else result.get_text()\n\n        if data is not None:\n            scraped_data[key] = data\n\n    return scraped_data\n```", "```py\ndef _parse(self, container, criteria):\n    results = [self._get_data(item, criteria)\n               for item in container.children]\n\n    return [result for result in results if result]\n```", "```py\ndef _clear_str_number(self, str_number):\n    result = self._only_digits_regex.match(str_number)\n    return '--' if result is None else result.group()\n```", "```py\ndef _get_additional_info(self, content):\n    data = tuple(item.td.span.get_text()\n                 for item in content.table.tbody.children)\n    return data[:2]\n```", "```py\nfrom bs4 import BeautifulSoup\n```", "```py\ndef _today_forecast(self, args):\n    criteria = {\n        'today_nowcard-temp': 'div',\n        'today_nowcard-phrase': 'div',\n        'today_nowcard-hilo': 'div',\n        }\n\n    content = self._request.fetch_data(args.forecast_option.value,\n                                       args.area_code)\n\n    bs = BeautifulSoup(content, 'html.parser')\n\n    container = bs.find('section', class_='today_nowcard-container')\n\n    weather_conditions = self._parse(container, criteria)\n\n    if len(weather_conditions) < 1:\n        raise Exception('Could not parse weather foreecast for \n        today.')\n\n    weatherinfo = weather_conditions[0]\n\n    temp_regex = re.compile(('H\\s+(\\d+|\\-{,2}).+'\n                             'L\\s+(\\d+|\\-{,2})'))\n    temp_info = temp_regex.search(weatherinfo['today_nowcard-hilo'])\n    high_temp, low_temp = temp_info.groups()\n\n    side = container.find('div', class_='today_nowcard-sidecar')\n    humidity, wind = self._get_additional_info(side)\n\n    curr_temp = self._clear_str_number(weatherinfo['today_nowcard- \n    temp'])\n\n    self._unit_converter.dest_unit = args.unit\n\n    td_forecast = Forecast(self._unit_converter.convert(curr_temp),\n                           humidity,\n                           wind,\n                           high_temp=self._unit_converter.convert(\n                               high_temp),\n                           low_temp=self._unit_converter.convert(\n                               low_temp),\n                           description=weatherinfo['today_nowcard-\n                            phrase'])\n\n    return [td_forecast]\n```", "```py\ncriteria = {\n    'today_nowcard-temp': 'div',\n    'today_nowcard-phrase': 'div',\n    'today_nowcard-hilo': 'div',\n}\n```", "```py\ncontent = self._request.fetch_data(args.forecast_option.value, \n                                   args.area_code)\n\nbs = BeautifulSoup(content, 'html.parser')\n\ncontainer = bs.find('section', class_='today_nowcard-container')\n\nweather_conditions = self._parse(container, criteria)\n\nif len(weather_conditions) < 1:\n    raise Exception('Could not parse weather forecast for today.')\n\nweatherinfo = weather_conditions[0]\n```", "```py\ntemp_regex = re.compile(('H\\s+(\\d+|\\-{,2}).+'\n                         'L\\s+(\\d+|\\-{,2})'))\ntemp_info = temp_regex.search(weatherinfo['today_nowcard-hilo'])\nhigh_temp, low_temp = temp_info.groups()\n```", "```py\nside = container.find('div', class_='today_nowcard-sidecar')\nwind, humidity = self._get_additional_info(side)\n```", "```py\ncurr_temp = self._clear_str_number(weatherinfo['today_nowcard-temp'])\n\nself._unit_converter.dest_unit = args.unit\n\ntd_forecast = Forecast(self._unit_converter.convert(curr_temp),\n                       humidity,\n                       wind,\n                       high_temp=self._unit_converter.convert(\n                           high_temp),\n                       low_temp=self._unit_converter.convert(\n                           low_temp),\n                       description=weatherinfo['today_nowcard- \n                        phrase'])\n\nreturn [td_forecast]\n```", "```py\n$ python -m weatherterm -u Fahrenheit -a SWXX2372:1:SW -p WeatherComParser -td\n```", "```py\ndef _parse_list_forecast(self, content, args):\n    criteria = {\n        'date-time': 'span',\n        'day-detail': 'span',\n        'description': 'td',\n        'temp': 'td',\n        'wind': 'td',\n        'humidity': 'td',\n    }\n\n    bs = BeautifulSoup(content, 'html.parser')\n\n    forecast_data = bs.find('table', class_='twc-table')\n    container = forecast_data.tbody\n\n    return self._parse(container, criteria)\n```", "```py\n[{'date-time': 'Today',\n  'day-detail': 'SEP 28',\n  'description': 'Partly Cloudy',\n  'humidity': '78%',\n  'temp': '60\u00b050\u00b0',\n  'wind': 'ESE 10 mph '},\n {'date-time': 'Fri',\n  'day-detail': 'SEP 29',\n  'description': 'Partly Cloudy',\n  'humidity': '79%',\n  'temp': '57\u00b048\u00b0',\n  'wind': 'ESE 10 mph '},\n {'date-time': 'Sat',\n  'day-detail': 'SEP 30',\n  'description': 'Partly Cloudy',\n  'humidity': '77%',\n  'temp': '57\u00b049\u00b0',\n  'wind': 'SE 10 mph '},\n {'date-time': 'Sun',\n  'day-detail': 'OCT 1',\n  'description': 'Cloudy',\n  'humidity': '74%',\n  'temp': '55\u00b051\u00b0',\n  'wind': 'SE 14 mph '},\n {'date-time': 'Mon',\n  'day-detail': 'OCT 2',\n  'description': 'Rain',\n  'humidity': '87%',\n  'temp': '55\u00b048\u00b0',\n  'wind': 'SSE 18 mph '}]\n```", "```py\ndef _prepare_data(self, results, args):\n    forecast_result = []\n\n    self._unit_converter.dest_unit = args.unit\n\n    for item in results:\n        match = self._temp_regex.search(item['temp'])\n        if match is not None:\n            high_temp, low_temp = match.groups()\n\n        try:\n            dateinfo = item['weather-cell']\n            date_time, day_detail = dateinfo[:3], dateinfo[3:]\n            item['date-time'] = date_time\n            item['day-detail'] = day_detail\n        except KeyError:\n            pass\n\n        day_forecast = Forecast(\n            self._unit_converter.convert(item['temp']),\n            item['humidity'],\n            item['wind'],\n            high_temp=self._unit_converter.convert(high_temp),\n            low_temp=self._unit_converter.convert(low_temp),\n            description=item['description'].strip(),\n            forecast_date=f'{item[\"date-time\"]} {item[\"day-\n             detail\"]}',\n            forecast_type=self._forecast_type)\n        forecast_result.append(day_forecast)\n\n    return forecast_result\n```", "```py\ndef _five_and_ten_days_forecast(self, args):\n    content = self._request.fetch_data(args.forecast_option.value, \n    args.area_code)\n    results = self._parse_list_forecast(content, args)\n    return self._prepare_data(results)\n```", "```py\nargparser.add_argument('-5d', '--fivedays',\n                       dest='forecast_option',\n                       action='store_const',\n                       const=ForecastType.FIVEDAYS,\n                       help='Shows the weather forecast for the next         \n                       5 days')\n```", "```py\n$ python -m weatherterm -u Fahrenheit -a SWXX2372:1:SW -p WeatherComParser -5d\n```", "```py\n>> [Today SEP 28]\n High 60\u00b0 / Low 50\u00b0 (Partly Cloudy)\n Wind: ESE 10 mph / Humidity: 78%\n\n>> [Fri SEP 29]\n High 57\u00b0 / Low 48\u00b0 (Partly Cloudy)\n Wind: ESE 10 mph / Humidity: 79%\n\n>> [Sat SEP 30]\n High 57\u00b0 / Low 49\u00b0 (Partly Cloudy)\n Wind: SE 10 mph / Humidity: 77%\n\n>> [Sun OCT 1]\n High 55\u00b0 / Low 51\u00b0 (Cloudy)\n Wind: SE 14 mph / Humidity: 74%\n\n>> [Mon OCT 2]\n High 55\u00b0 / Low 48\u00b0 (Rain)\n Wind: SSE 18 mph / Humidity: 87%\n```", "```py\nargparser.add_argument('-10d', '--tendays',\n                       dest='forecast_option',\n                       action='store_const',\n                       const=ForecastType.TENDAYS,\n                       help='Shows the weather forecast for the next  \n                       10 days')\n```", "```py\n$ python -m weatherterm -u Fahrenheit -a SWXX2372:1:SW -p WeatherComParser -10d\n```", "```py\n>> [Today SEP 28]\n High 60\u00b0 / Low 50\u00b0 (Partly Cloudy)\n Wind: ESE 10 mph / Humidity: 78%\n\n>> [Fri SEP 29]\n High 57\u00b0 / Low 48\u00b0 (Partly Cloudy)\n Wind: ESE 10 mph / Humidity: 79%\n\n>> [Sat SEP 30]\n High 57\u00b0 / Low 49\u00b0 (Partly Cloudy)\n Wind: SE 10 mph / Humidity: 77%\n\n>> [Sun OCT 1]\n High 55\u00b0 / Low 51\u00b0 (Cloudy)\n Wind: SE 14 mph / Humidity: 74%\n\n>> [Mon OCT 2]\n High 55\u00b0 / Low 48\u00b0 (Rain)\n Wind: SSE 18 mph / Humidity: 87%\n\n>> [Tue OCT 3]\n High 56\u00b0 / Low 46\u00b0 (AM Clouds/PM Sun)\n Wind: S 10 mph / Humidity: 84%\n\n>> [Wed OCT 4]\n High 58\u00b0 / Low 47\u00b0 (Partly Cloudy)\n Wind: SE 9 mph / Humidity: 80%\n\n>> [Thu OCT 5]\n High 57\u00b0 / Low 46\u00b0 (Showers)\n Wind: SSW 8 mph / Humidity: 81%\n\n>> [Fri OCT 6]\n High 57\u00b0 / Low 46\u00b0 (Partly Cloudy)\n Wind: SW 8 mph / Humidity: 76%\n\n>> [Sat OCT 7]\n High 56\u00b0 / Low 44\u00b0 (Mostly Sunny)\n Wind: W 7 mph / Humidity: 80%\n\n>> [Sun OCT 8]\n High 56\u00b0 / Low 44\u00b0 (Partly Cloudy)\n Wind: NNE 7 mph / Humidity: 78%\n\n>> [Mon OCT 9]\n High 56\u00b0 / Low 43\u00b0 (AM Showers)\n Wind: SSW 9 mph / Humidity: 79%\n\n>> [Tue OCT 10]\n High 55\u00b0 / Low 44\u00b0 (AM Showers)\n Wind: W 8 mph / Humidity: 79%\n\n>> [Wed OCT 11]\n High 55\u00b0 / Low 42\u00b0 (AM Showers)\n Wind: SE 7 mph / Humidity: 79%\n\n>> [Thu OCT 12]\n High 53\u00b0 / Low 43\u00b0 (AM Showers)\n Wind: NNW 8 mph / Humidity: 87%\n```", "```py\nclass Mapper:\n\n    def __init__(self):\n        self._mapping = {}\n\n    def _add(self, source, dest):\n        self._mapping[source] = dest\n\n    def remap_key(self, source, dest):\n        self._add(source, dest)\n\n    def remap(self, itemslist):\n        return [self._exec(item) for item in itemslist]\n\n    def _exec(self, src_dict):\n        dest = dict()\n\n        if not src_dict:\n            raise AttributeError('The source dictionary cannot be  \n            empty or None')\n\n        for key, value in src_dict.items():\n            try:\n                new_key = self._mapping[key]\n                dest[new_key] = value\n            except KeyError:\n                dest[key] = value\n        return dest\n```", "```py\nfrom .mapper import Mapper\n```", "```py\nfrom weatherterm.core import Mapper\n```", "```py\ndef _weekend_forecast(self, args):\n    criteria = {\n        'weather-cell': 'header',\n        'temp': 'p',\n        'weather-phrase': 'h3',\n        'wind-conditions': 'p',\n        'humidity': 'p',\n    }\n\n    mapper = Mapper()\n    mapper.remap_key('wind-conditions', 'wind')\n    mapper.remap_key('weather-phrase', 'description')\n\n    content = self._request.fetch_data(args.forecast_option.value,\n                                       args.area_code)\n\n    bs = BeautifulSoup(content, 'html.parser')\n\n    forecast_data = bs.find('article', class_='ls-mod')\n    container = forecast_data.div.div\n\n    partial_results = self._parse(container, criteria)\n    results = mapper.remap(partial_results)\n\n    return self._prepare_data(results, args)\n```", "```py\nmapper = Mapper()\nmapper.remap_key('wind-conditions', 'wind')\nmapper.remap_key('weather-phrase', 'description')\n```", "```py\ncontent = self._request.fetch_data(args.forecast_option.value,\n                                   args.area_code)\n\nbs = BeautifulSoup(content, 'html.parser')\n\nforecast_data = bs.find('article', class_='ls-mod')\ncontainer = forecast_data.div.div\n\npartial_results = self._parse(container, criteria)\n```", "```py\n<article class='ls-mod'>\n  <div>\n    <div>\n      <!-- this DIV will be our container element -->\n    </div>\n  </div>\n</article>\n```", "```py\nargparser.add_argument('-w', '--weekend',\n                       dest='forecast_option',\n                       action='store_const',\n                       const=ForecastType.WEEKEND,\n                       help=('Shows the weather forecast for the \n                             next or '\n                             'current weekend'))\n```", "```py\n>> [Fri SEP 29]\n High 13.9\u00b0 / Low 8.9\u00b0 (Partly Cloudy)\n Wind: ESE 10 mph / Humidity: 79%\n\n>> [Sat SEP 30]\n High 13.9\u00b0 / Low 9.4\u00b0 (Partly Cloudy)\n Wind: SE 10 mph / Humidity: 77%\n\n>> [Sun OCT 1]\n High 12.8\u00b0 / Low 10.6\u00b0 (Cloudy)\n Wind: SE 14 mph / Humidity: 74%\n```"]