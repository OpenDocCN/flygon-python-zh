["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# line to allow the plots to be shown in the Jupyter Notebook\n%matplotlib inline\n```", "```py\ngames = pd.read_csv('data/appstore_games.csv')\n```", "```py\ngames.shape\n```", "```py\n(17007, 18)\n```", "```py\ngames.head()\n```", "```py\noriginal_colums_dict = {x: x.lower().replace(' ','_') \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for x in games.columns}\noriginal_colums_dict \n```", "```py\ngames.rename(columns = original_colums_dict,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inplace = True)\n```", "```py\ngames.set_index(keys = 'id', inplace = True)\n```", "```py\ngames.head()\n```", "```py\ngames.drop(columns = ['url', 'icon_url'], inplace = True)\n```", "```py\ngames.info()\n```", "```py\ngames['original_release_date'] = pd.to_datetime\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(games['original_release_date'])\ngames['current_version_release_date'] =\\\npd.to_datetime(games['current_version_release_date'])\n```", "```py\ngames.info()\n```", "```py\ngames.head()\n```", "```py\ngames.isnull().sum()\n```", "```py\nnp.array_equal(games['average_user_rating'].isnull(),\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0games['user_rating_count'].isnull())\n```", "```py\ngames = games.loc[games['average_user_rating'].notnull()]\n```", "```py\ngames = games.loc[games['user_rating_count'] >= 30]\n```", "```py\ngames.shape\n```", "```py\n(4311, 15)\n```", "```py\ngames.isnull().sum()\n```", "```py\n    games2 = games.copy()\n    ```", "```py\n    games2['languages'].head()\n    ```", "```py\n    games2['languages'] = games2['languages'].fillna('EN')\n    ```", "```py\n    list_of_languages = games2['languages'].str.split(',')\n    ```", "```py\n    games2['n_languages'] = list_of_languages.apply(lambda x: len(x))\n    ```", "```py\n    id\n    284921427    17\n    284926400     1\n    284946595     1\n    285755462    17\n    286210009     1\n    286313771     1\n    286363959     1\n    286566987     1\n    286682679     1\n    288096268     1\n    Name: n_languages, dtype: int64\n    ```", "```py\nrandom_ratings = games['average_user_rating'].sample(n=300)\nfor r in random_ratings:\n\u00a0\u00a0\u00a0\u00a0print(r, end=', ')\n```", "```py\n\u00a0\u00a0\u00a0\u00a01.68, 1.83, 1.75, 1.80, 1.88, 1.80, 1.89, 1.84,\n\u00a0\u00a0\u00a0\u00a01.90, 1.65, 1.67, 1.62, 1.81, 1.73, 1.84, 1.78,\n\u00a0\u00a0\u00a0\u00a01.76, 1.97, 1.81, 1.75, 1.65, 1.87, 1.85, 1.64.\n```", "```py\nmens_heights = pd.Series\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0([1.68, 1.83, 1.75, 1.8, 1.88, 1.8, 1.89, 1.84,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01.9, 1.65, 1.67,1.62, 1.81, 1.73, 1.84, 1.78,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01.76, 1.97, 1.81, 1.75, 1.65, 1.87, 1.85, 1.64])\n```", "```py\nmens_heights.mean()\n```", "```py\n1.7820833\n```", "```py\nmens_heights.std()\n```", "```py\n0.0940850\n```", "```py\nmens_heights_2 = pd.Series\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0([1.77, 1.75, 1.75, 1.75, 1.73, 1.75, 1.73, 1.75,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01.74, 1.76, 1.75, 1.75, 1.74, 1.76, 1.75, 1.76,\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01.76, 1.76, 1.75, 1.73, 1.74, 1.76, 1.76, 1.76])\n```", "```py\nmens_heights_2.mean()\n```", "```py\n1.750416\n```", "```py\nmens_heights_2.std()\n```", "```py\n0.01082\n```", "```py\nmens_heights.quantile([0.25, 0.5, 0.75])\n```", "```py\n0.25    1.7175\n0.50    1.8000\n0.75    1.8425\ndtype:  float64\n```", "```py\nmens_heights.quantile([0.33, 0.80])\n```", "```py\n0.33    1.750\n0.80    1.858\ndtype: float64\n```", "```py\nmens_heights >= 1.8\n```", "```py\n(mens_heights >= 1.8).sum()/mens_heights.shape[0]\n```", "```py\n0.54166\n```", "```py\n(mens_heights >= 1.8).mean()\n```", "```py\ngames.describe()\n```", "```py\ngames['user_rating_count'].sort_values(ascending=False).head(10)\n```", "```py\n(games['user_rating_count'] >= 100000).sum()\n```", "```py\n40\n```", "```py\n    games['average_user_rating'].describe()\n    ```", "```py\n    count    4311.000000\n    mean        4.163535\n    std         0.596239\n    min         1.500000\n    25%         4.000000\n    50%         4.500000\n    75%         4.500000\n    max         5.000000\n    Name: average_user_rating, dtype: float64\n    ```", "```py\n    ratings_of_4_5 = (games['average_user_rating'] == 4.5).sum()\n    proportion_of_ratings_4_5 = (games['average_user_rating'] == 4.5)\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.mean()\n    print(f'''The number of games with an average rating of 4.5 is \\{ratings_of_4_5}, \\\n    which represents a proportion of {proportion_of_ratings_4_5:.3f} or \\\n    {100*proportion_of_ratings_4_5:.1f}%''')\n    ```", "```py\n    The number of games with an average rating of 4.5 is 2062, which represents a proportion of 0.478 or 47.8%\n    ```", "```py\n    games['average_user_rating'].unique()\n    ```", "```py\ngames.info()\n```", "```py\ngames['size'] = games['size']/1e6\n```", "```py\ngames['size'].hist(bins=30, ec='black');\n```", "```py\ngames['size'].describe()\n```", "```py\ncount        4311.000000\nmean         175.956867\nstd          286.627800\nmin          0.215840\n25%          40.736256\n50%          97.300480\n75%          208.517632\nmax          4005.591040\nNameL size,  dtype: float64\n```", "```py\ngames['size'].sort_values(ascending=False).head(12)\n```", "```py\ngames.hist(figsize = (10, 4), bins = 30, ec = 'black');\n# This line prints the four plots without overlap\nplt.tight_layout()\n```", "```py\nfilter_price = games['price'] <= games['price'].quantile(0.99)\nfilter_user_rating_count = games['user_rating_count'] \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<= games['user_rating_count'].quantile(0.99)\nfilter_size = games['size'] <= games['size'].quantile(0.99)\nfilter_exclude_top_1_percent = filter_price \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0& filter_user_rating_count \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0& filter_size\ngames[filter_exclude_top_1_percent].hist(figsize = (10, 4),\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bins = 30, ec = 'black');\n# This line prints the four plots without overlap\nplt.tight_layout()\n```", "```py\nmens_heights.plot(kind='box');\n```", "```py\ngames['size'].plot(kind='box');\n```", "```py\ngames['age_rating'].value_counts()\n```", "```py\n4+     2287\n9+     948\n12+    925\n17+    151\nName: age_rating,  dtype: int64\n```", "```py\ngames['age_rating'].value_counts().plot(kind = 'bar');\n```", "```py\ngames['age_rating'].value_counts(normalize=True).plot(kind='bar');\n```", "```py\ngames['age_rating'].value_counts().plot(kind = 'pie');\n```", "```py\npercentages = 100*games['age_rating'].value_counts(normalize=True)\nfor k, x in percentages.items():\n\u00a0\u00a0\u00a0\u00a0print(f'{k}: {x:0.1f}%')\n```", "```py\n4+: 53.1%\n9+: 22.0%\n12+: 21.5%\n17+: 3.5%\n```", "```py\nsns.scatterplot(x='size', y='average_user_rating',\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data=games, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# this is for controlling the size of the points\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s=20);\n```", "```py\nratings_mapping = {1.5: '1_poor', 2.: '1_poor',\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02.5: '1_poor', 3: '1_poor',\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.5: '2_fair', 4\\. : '2_fair',\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.5: '3_good',5\\. : '4_excellent'}\ngames['cat_rating'] = games['average_user_rating']\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.map(ratings_mapping)\n```", "```py\nsns.boxplot(x='cat_rating', y='size', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data=games[games['size'] <= 600], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0order=['1_poor', '2_fair', '3_good', '4_excellent']);\n```", "```py\npd.crosstab(games['age_rating'], games['cat_rating'])\n```", "```py\n100*pd.crosstab(games['age_rating'],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0games['cat_rating'], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0normalize='index')\n```", "```py\n    games['price'].unique()\n    ```", "```py\n    array([  2.99,   1.99,   0\\.  ,   0.99,   5.99,   7.99,   4.99,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  3.99, 9.99,  19.99,   6.99,  11.99,   8.99, 139.99,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  14.99,  59.99])\n    ```", "```py\n    games['price'] = games['price'].round()\n    ```", "```py\n    games['price'].value_counts().sort_index().plot(kind='bar');\n    ```", "```py\n    games['cat_price'] = (games['price'] == 0).astype(int)\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.map({0:'paid', 1:'free'})\n    ```", "```py\n    sns.boxplot(x='cat_price', y='average_user_rating', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data=games);\n    ```"]