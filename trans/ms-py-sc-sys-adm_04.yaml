- en: Automating Regular Administrative Activities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化常规管理活动
- en: There are various administrative activities performed by system administrators.
    These activities may contain file handling, logging, administrating CPU and memory,
    password handling, and, most importantly, making backups. These activities need
    automation. In this chapter, we're going to learn about automating these activities
    using Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员执行各种管理活动。这些活动可能包括文件处理、日志记录、管理CPU和内存、处理密码，以及最重要的是进行备份。这些活动需要自动化。在本章中，我们将学习如何使用Python自动化这些活动。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Accepting input by redirection, pipe, and input files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过重定向、管道和输入文件接受输入
- en: Handling passwords at runtime in scripts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在脚本中在运行时处理密码
- en: Executing external commands and getting their output
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行外部命令并获取它们的输出
- en: Prompting for a password during runtime and validation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时提示密码和验证
- en: Reading configuration files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取配置文件
- en: Adding logging and warning code to scripts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向脚本添加日志和警告代码
- en: Putting limits on CPU and memory usage
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制CPU和内存使用
- en: Launching a web browser
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动Web浏览器
- en: Using the `os` module for handling directory and files
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`os`模块处理目录和文件
- en: Making backups (with `rsync`)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行备份（使用`rsync`）
- en: Accepting input by redirection, pipe, and input files
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过重定向、管道和输入文件接受输入
- en: In this section, we are going to learn about how users can accept input by redirection,
    pipe, and external input files.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习用户如何通过重定向、管道和外部输入文件接受输入。
- en: For accepting input by redirection, we use `stdin`. `pipe` is another form of
    redirection. This concept means providing the output of one program as the input
    to another program. We can accept input by external files as well as by using
    Python.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接受重定向输入时，我们使用`stdin`。`pipe`是另一种重定向形式。这个概念意味着将一个程序的输出作为另一个程序的输入。我们可以通过外部文件和使用Python来接受输入。
- en: Input by redirection
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过重定向输入
- en: '`stdin` and `stdout` are objects created by the `os` module. We''re going to
    write a script in which we will use `stdin` and `stdout`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`stdin`和`stdout`是`os`模块创建的对象。我们将编写一个脚本，其中我们将使用`stdin`和`stdout`。'
- en: 'Create a script called `redirection.py` and write the following code in it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`redirection.py`的脚本，并在其中编写以下代码：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the preceding program as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如下运行上述程序：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will receive the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将收到以下输出：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Whenever the program runs in an interactive session, `stdin` is the keyboard
    input and `stdout` is the user's Terminal. The `input()` function is used to take
    input from the user, and `print()` is the way to write on the Terminal (`stdout`).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每当程序在交互会话中运行时，`stdin`是键盘输入，`stdout`是用户的终端。`input()`函数用于从用户那里获取输入，`print()`是在终端（`stdout`）上写入的方式。
- en: Input by pipe
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过管道输入
- en: Pipe is another form of redirection. This technique is used to pass information
    from one program to another. The `|` symbol denotes pipe. By using the pipe technique,
    we can use more than two commands in such a way that the output of one command
    acts as input to the next command.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是另一种重定向形式。这种技术用于将信息从一个程序传递到另一个程序。`|`符号表示管道。通过使用管道技术，我们可以以一种使一个命令的输出作为下一个命令的输入的方式使用两个以上的命令。
- en: 'Now, we are going to see how we can accept an input using pipe. For that, first
    we''ll write a simple script that returns a `floor` division. Create a script
    called `accept_by_pipe.py` and write the following code in it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看如何使用管道接受输入。为此，首先我们将编写一个返回`floor`除法的简单脚本。创建一个名为`accept_by_pipe.py`的脚本，并在其中编写以下代码：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the script and you will get the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding script, `stdin` is a keyboard input. We are performing a `floor`
    division on the number we enter at runtime. The floor division returns only the
    integer part of the quotient. When we run the program, we pass `15` followed by
    the pipe `|` symbol, and then our script name. So, we are providing `15` as input
    to our script. So the floor division is performed and we get the output as `7`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的脚本中，`stdin`是键盘输入。我们对我们在运行时输入的数字执行`floor`除法。floor除法仅返回商的整数部分。当我们运行程序时，我们传递`15`，然后是管道`|`符号，然后是我们的脚本名称。因此，我们将`15`作为输入提供给我们的脚本。因此进行了floor除法，我们得到输出为`7`。
- en: 'We can pass multiple input to our script. So, in the following execution, we
    have passed multiple input values as `15`, `45`, and `20.` For handling multiple
    input values, we have written a `for` loop in our script. So, it will first take
    the input as `15`, followed by `45`, and then `20.` The output will be printed
    on a new line for each input, as we have written `\n` between the input value.
    To enable this interpretation of a backslash, we passed the `-e` flag:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以向我们的脚本传递多个输入。因此，在以下执行中，我们已经传递了多个输入值，如`15`、`45`和`20`。为了处理多个输入值，我们在脚本中编写了一个`for`循环。因此，它将首先接受`15`作为输入，然后是`45`，然后是`20`。输出将以新行打印出每个输入，因为我们在输入值之间写了`\n`。为了启用对反斜杠的这种解释，我们传递了`-e`标志：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After running this, we got floor divisions for `15`, `45` and `20` as `7`, `22`,
    and `10`, respectively, on new lines.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后，我们得到了`15`、`45`和`20`的floor除法分别为`7`、`22`和`10`，显示在新行上。
- en: Input by input file
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过输入文件输入
- en: 'In this section, we are going to learn about how we can take input from an
    input file. Taking  input from an input file is easier in Python. We are going
    to look at an example for this. But first, we are going to create a simple text
    file called `sample.txt` and we''ll write the following code in it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何从输入文件中获取输入。在Python中，从输入文件中获取输入更容易。我们将看一个例子。但首先，我们将创建一个名为`sample.txt`的简单文本文件，并在其中编写以下代码：
- en: '`Sample.txt`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sample.txt`：'
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, create a script called `accept_by_input_file.py` and write the following
    code in it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`accept_by_input_file.py`的脚本，并在其中编写以下代码：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the program and you will get the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，您将得到以下输出：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Handling passwords at runtime in scripts
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在脚本中在运行时处理密码
- en: 'In this section, we will look at a simple example for handling passwords in
    script. We will create a script called `handling_password.py` and write the following
    content in it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一个简单的处理脚本密码的例子。我们将创建一个名为`handling_password.py`的脚本，并在其中编写以下内容：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the preceding script and you will receive the following output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述脚本，您将收到以下输出：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding script, we used the `paramiko` module. The `paramiko` module
    is a Python implementation of `ssh` that provides client-server functionality.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述脚本中，我们使用了`paramiko`模块。`paramiko`模块是`ssh`的Python实现，提供了客户端-服务器功能。
- en: 'Install `paramiko` as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式安装`paramiko`：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding script, we are remotely connecting to the host, `192.168.2.106`.
    We have provided the host's username and password in our script.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述脚本中，我们远程连接到主机`192.168.2.106`。我们在脚本中提供了主机的用户名和密码。
- en: After running this script, on the `192.168.2.106` desktop, you will find a `work`
    folder and `test_folder` can be found in the `home/` directory of `192.168.2.106`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此脚本后，在`192.168.2.106`桌面上，您将找到一个`work`文件夹，并且`test_folder`可以在`192.168.2.106`的`home/`目录中找到。
- en: Executing external commands and getting their output
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行外部命令并获取它们的输出
- en: In this section, we are going to learn about Python's subprocess module. Using
    `subprocess`, it's easy to spawn new processes and get their return code, execute
    external commands, and start new applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python的subprocess模块。使用`subprocess`，很容易生成新进程并获取它们的返回代码，执行外部命令并启动新应用程序。
- en: 'We are going to see how we can execute external commands and get their output
    in Python by using the `subprocess` module. We will create a script called `execute_external_commands.py`
    and write the following code in it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一下如何在Python中执行外部命令并获取它们的输出，使用`subprocess`模块。我们将创建一个名为`execute_external_commands.py`的脚本，并在其中编写以下代码：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the program and you will get the following output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，您将得到以下输出：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Capturing output using the subprocess module
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用subprocess模块捕获输出
- en: 'In this section, we are going to learn about how we can capture output. We
    will pass `PIPE` for the `stdout` argument to capture the output. Write a script
    called `capture_output.py` and write the following code in it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何捕获输出。我们将为`stdout`参数传递`PIPE`以捕获输出。编写一个名为`capture_output.py`的脚本，并在其中编写以下代码：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Execute the script as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式执行脚本：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'On execution, we will receive the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，我们将收到以下输出：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding script, we imported the subprocess module of Python, which
    helps in capturing the output. The subprocess module is used for creating new
    processes. It also helps in connecting input/output pipes and getting return code.
    `subprocess.run()` will run the command passed as an argument. `Returncode` will
    be the exit status of your child process. In the output, if you get return code
    as `0`, it indicates it ran successfully.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述脚本中，我们导入了Python的subprocess模块，它有助于捕获输出。subprocess模块用于创建新进程。它还有助于连接输入/输出管道并获取返回代码。`subprocess.run()`将运行作为参数传递的命令。`Returncode`将是子进程的退出状态。在输出中，如果返回代码为`0`，表示它成功运行。
- en: Prompting for passwords during runtime and validation
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行时提示密码和验证
- en: In this section, we are going learn about the `getpass module` to handle passwords
    at runtime. The `getpass()` module in Python prompts the user to enter a password
    without echoing. The `getpass` module is used to handle the password prompt whenever
    programs interact with a user through the Terminal.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在运行时处理密码，使用`getpass模块`。Python中的`getpass()`模块提示用户输入密码而不回显。`getpass`模块用于在程序通过终端与用户交互时处理密码提示。
- en: 'We are going to see some examples of how to use the `getpass` module:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一些如何使用`getpass`模块的例子：
- en: 'Create a script called `no_prompt.py` and write the following code in it:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`no_prompt.py`的脚本，并在其中编写以下代码：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this script, a prompt is not provided for the user. So, by default, it is
    set to the `Password` prompt.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在此脚本中，不为用户提供提示。因此，默认情况下，它设置为`Password`提示。
- en: 'Run the script as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行脚本：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will provide a prompt for entering a password. So, create a script callled `with_prompt.py`
    and write the following code in it:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将提供一个输入密码的提示。因此，在其中创建一个名为`with_prompt.py`的脚本，并在其中编写以下代码：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we have written a script that provides a prompt for a password. Run the
    program as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经编写了一个脚本，用于提供密码的提示。按以下方式运行程序：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we have provided the `Enter your password` prompt for the user.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为用户提供了“输入密码”的提示。
- en: Now, we will write a script where if we enter a wrong password, it will just
    print a simple message but it will not prompt again to enter a correct password.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个脚本，如果输入错误的密码，它将只是打印一个简单的消息，但不会再提示输入正确的密码。
- en: 'Write a script called `getpass_example.py` and write the following code in
    it:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个名为`getpass_example.py`的脚本，并在其中编写以下代码：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the program as follows (here we are entering a correct password, that is, `#pythonworld`):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行程序（这里我们输入了正确的密码，即`#pythonworld`）：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we will enter a wrong password and will check what message we receive:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将输入一个错误的密码，并检查我们收到什么消息：
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we have written a script that never asks again to enter a password if
    we write a wrong password.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们编写了一个脚本，如果我们输入错误的密码，就不会再要求输入密码。
- en: 'Now, we will write a script that will ask to enter the correct password again
    when we provide a wrong password. To get the login name of the user, `getuser()`
    is used. The `getuser()` function will return the system logged-in user. Create
    a script called `password_prompt_again.py` and write the following code in it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个脚本，当我们提供错误的密码时，它将再次要求输入正确的密码。使用`getuser()`来获取用户的登录名。`getuser()`函数将返回系统登录的用户。创建一个名为`password_prompt_again.py`的脚本，并在其中编写以下代码：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the program and you will get the following output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，您将得到以下输出：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Reading configuration files
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取配置文件
- en: In this section, we are going learn about the `configparser` module of Python.
    By using the `configparser` module, you can manage user-editable configuration
    files for the application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python的`configparser`模块。通过使用`configparser`模块，您可以管理应用程序的用户可编辑的配置文件。
- en: The common use of these configuration files is that users or system administrators
    can edit the files using a simple text editor to set application defaults and
    then the application will read and, parse them and act based on the contents written
    in them.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置文件的常见用途是，用户或系统管理员可以使用简单的文本编辑器编辑文件以设置应用程序默认值，然后应用程序将读取并解析它们，并根据其中写入的内容进行操作。
- en: 'To read a configuration file, `configparser` has the `read()` method. Now,
    we will write a simple script named `read_config_file.py`. Before that, create
    a `.ini` file named `read_simple.ini` and write the following content in it: `read_simple.ini`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取配置文件，`configparser`有`read()`方法。现在，我们将编写一个名为`read_config_file.py`的简单脚本。在那之前，创建一个名为`read_simple.ini`的`.ini`文件，并在其中写入以下内容：`read_simple.ini`
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create `read_config_file.py` and enter the following content in it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`read_config_file.py`并输入以下内容：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run `read_config_file.py` and you will get the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`read_config_file.py`，您将获得以下输出：
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `read()` method accepts more than one filename. Whenever each filename
    gets scanned and if that file exists, then it will be opened and read. Now, we
    will write a script for reading more than one filename. Create a script called `read_many_config_file.py`
    and write the following code in it:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`read()`方法接受多个文件名。每当扫描每个文件名并且该文件存在时，它将被打开并读取。现在，我们将编写一个用于读取多个文件名的脚本。创建一个名为`read_many_config_file.py`的脚本，并在其中编写以下代码：'
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run the preceding script and you will get the following output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述脚本，您将获得以下输出：
- en: '[PRE31]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding example, we used the `configparser` module of Python, which
    helps in managing configuration files. First, we created a list named `files`.
    The `read()` function will read the configuration files. In the example, we created
    a variable called  `files_found`, which will store the names of the configuration
    files present in your directory. Next, we created another variable called `files_missing`,
    which will return filenames that aren't in your directory. And, lastly, we are
    printing the file names that are present and missing.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用了Python的`configparser`模块，该模块有助于管理配置文件。首先，我们创建了一个名为`files`的列表。`read()`函数将读取配置文件。在示例中，我们创建了一个名为`files_found`的变量，它将存储目录中存在的配置文件的名称。接下来，我们创建了另一个名为`files_missing`的变量，它将返回目录中不存在的文件名。最后，我们打印存在和缺失的文件名。
- en: Adding logging and warning code to scripts
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向脚本添加日志记录和警告代码
- en: In this section, we will learn about the logging and warnings modules of Python.
    The logging module will keep a track of events occurring within a program. The
    warnings module warns the programmers about the changes made in the language as
    well as the libraries.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python的日志记录和警告模块。日志记录模块将跟踪程序中发生的事件。警告模块警告程序员有关语言和库中所做更改的信息。
- en: 'Now, we are going to see a simple logging example. We will write a script called `logging_example.py`
    and write the following code in it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个简单的日志记录示例。我们将编写一个名为`logging_example.py`的脚本，并在其中编写以下代码：
- en: '[PRE32]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Run the program as follows::'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下程序：
- en: '[PRE33]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Check `hello.py` and you see the debug message printed in that script:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`hello.py`，您会看到在该脚本中打印的调试消息：
- en: '[PRE34]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we will write a script called `logging_warnings_codes.py` and write the
    following code in it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个名为`logging_warnings_codes.py`的脚本，并在其中编写以下代码：
- en: '[PRE35]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the script as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下脚本：
- en: '[PRE36]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Generating warnings
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成警告
- en: '`warn()` is used to generate the warnings. Now, we will see a simple example
    of generating warnings. Write a script called `generate_warnings.py` and write
    a following code in it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`warn()`用于生成警告。现在，我们将看一个生成警告的简单示例。编写一个名为`generate_warnings.py`的脚本，并在其中编写以下代码：'
- en: '[PRE37]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run the script as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示运行脚本：
- en: '[PRE38]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding script, we passed a warning message through `warn()`. We used
    a simple filter so that your warning will get treated as an error and that error
    will get solved accordingly by the programmer.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的脚本中，我们通过`warn()`传递了一个警告消息。我们使用了一个简单的过滤器，以便您的警告将被视为错误，并且程序员将相应地解决该错误。
- en: Putting limits on CPU and memory usage
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制CPU和内存使用
- en: 'In this section, we will learn about how we can limit CPU and memory usage.
    First, we will write a script for putting a limit on CPU usage. Create a script
    called `put_cpu_limit.py` and write the following code in it:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何限制CPU和内存使用。首先，我们将编写一个用于限制CPU使用的脚本。创建一个名为`put_cpu_limit.py`的脚本，并在其中编写以下代码：
- en: '[PRE39]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run the preceding script as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示运行上述脚本：
- en: '[PRE40]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the preceding script, we used `setrlimit()` to limit the CPU usage. So, in
    our script, we have set the limit to 10 seconds.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的脚本中，我们使用`setrlimit()`来限制CPU使用。因此，在我们的脚本中，我们将限制设置为10秒。
- en: Launching webbrowser
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动webbrowser
- en: 'In this section, we will learn about the `webbrowser` module of Python. This
    module has functions to open URLs in browser applications. We will see a simple
    example. Create a script called `open_web.py` and write the following code in
    it:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python的`webbrowser`模块。该模块具有在浏览器应用程序中打开URL的功能。我们将看一个简单的示例。创建一个名为`open_web.py`的脚本，并在其中编写以下代码：
- en: '[PRE41]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the script as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示运行脚本：
- en: '[PRE42]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can also use the `webbrowser` module of Python through the command line
    and can use all of it. To use `webbrowser` through the command line, run the following
    command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过命令行使用Python的`webbrowser`模块，并且可以使用所有功能。要通过命令行使用`webbrowser`，运行以下命令：
- en: '[PRE43]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Here, [https://www.google.com/](https://www.google.com/) will be opened in
    the browser window. You can use the following two options:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，[https://www.google.com/](https://www.google.com/)将在浏览器窗口中打开。您可以使用以下两个选项：
- en: '`-n`: Open a new window'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n`：打开一个新窗口'
- en: '`-t`: Open a new tab'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t`：打开一个新标签'
- en: Using the os module for handling directory and files
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用os模块处理目录和文件
- en: In this section, we will learn about the `os` module of Python. Python's `os`
    module helps in achieving operating system tasks. We need to import the `os` module
    if we want to perform operating system tasks.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python的`os`模块。Python的`os`模块有助于实现操作系统任务。如果我们想执行操作系统任务，我们需要导入`os`模块。
- en: We will look at some examples related to handling files and directories.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一些与处理文件和目录相关的示例。
- en: Creating and deleting the directory
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和删除目录
- en: 'In this section, we are going to create a script where we will see what functions
    we can use for working with the directories on your filesystem, which will include
    creating, listing, and removing the content. Create a script called  `os_dir_example.py`
    and write the following code in it:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个脚本，我们将看到可以用于处理文件系统上的目录的函数，其中将包括创建、列出和删除内容。创建一个名为`os_dir_example.py`的脚本，并在其中编写以下代码：
- en: '[PRE44]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Run the script as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行脚本：
- en: '[PRE45]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: When you create a directory using `mkdir()`, all of the parent directories must
    be already created. But, when you create a directory with `makedirs()` , it will
    create any directory, which is mentioned in a path that doesn't exist. `unlink()`
    will remove the file path and `rmdir()` will remove the directory path.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mkdir()`创建目录时，所有父目录必须已经创建。但是，使用`makedirs()`创建目录时，它将创建任何在路径中提到但不存在的目录。`unlink()`将删除文件路径，`rmdir()`将删除目录路径。
- en: Examining the content of a filesystem
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查文件系统的内容
- en: 'In this section, we will list all of the content of a directory using `listdir()`.
    Create a script called `list_dir.py` and write the following code in it:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`listdir()`列出目录的所有内容。创建一个名为`list_dir.py`的脚本，并在其中编写以下代码：
- en: '[PRE46]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Run the script as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行脚本：
- en: '[PRE47]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: So, by using `listdir()`, you can list of all the content of the folder.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用`listdir()`，您可以列出文件夹的所有内容。
- en: Making backups (with rsync)
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份（使用rsync）
- en: 'This is the most important work system administrators have to do. In this section,
    we will learn about making backups using `rsync`. The `rsync` command is used
    for copying files and directories locally, as well as remotely, and performing
    data backups using `rsync.` For that, we are going write a script called `take_backup.py`
    and write the following code in it:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是系统管理员必须做的最重要的工作。在本节中，我们将学习如何使用`rsync`进行备份。`rsync`命令用于在本地和远程复制文件和目录，并使用`rsync`执行数据备份。为此，我们将编写一个名为`take_backup.py`的脚本，并在其中编写以下代码：
- en: '[PRE48]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Run the script as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行脚本：
- en: '[PRE49]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, check `Desktop/directory` and you will see your work folder in that directory.
    There are a few options used with the `rsync` command, namely the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查`Desktop/directory`，您将在该目录中看到您的工作文件夹。`rsync`命令有一些选项，即以下选项：
- en: '`-a`: Archive'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a`：存档'
- en: '`-u`: Update'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-u`：更新'
- en: '`-h`: Human-readable format'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-h`：人类可读格式'
- en: '`-v`: Verbose'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v`：详细'
- en: '`--delete`: Deletes extraneous files from the receiving side'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--delete`：从接收方删除多余的文件'
- en: '`--exclude`: Exclude rule'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--exclude`：排除规则'
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about how we can automate regular administration
    tasks. We learned about accepting input by various techniques, prompting for passwords
    at runtime, executing external commands, reading configuration files, adding warnings
    in your script, launching `webbrowser` through the script as well as the command
    line, using the `os` module to handle files and directories, and making backups.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何自动化常规管理任务。我们学习了通过各种技术接受输入，运行时提示密码，执行外部命令，读取配置文件，在脚本中添加警告，通过脚本和命令行启动`webbrowser`，使用`os`模块处理文件和目录以及进行备份。
- en: In the next chapter, you will learn more about the `os` module and handling
    data. Also, you will learn about the `tarfile` module and how you can use it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习更多关于`os`模块和数据处理的知识。此外，您还将学习`tarfile`模块以及如何使用它。
- en: Questions
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How to use `readline` module?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用`readline`模块？
- en: What are the Linux commands used for reading, creating the new file, deletion
    of the file, list the file in current directory?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于读取、创建新文件、删除文件、列出当前目录中文件的Linux命令是什么？
- en: To run the Linux/windows commands in python which packages are available?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有哪些包可用于在Python中运行Linux/Windows命令？
- en: How to read, or set new values in configuration `ini` file
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何读取或在配置`ini`文件中设置新值
- en: List the libraries available for finding the `cpu` usage?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出用于查找`cpu`使用情况的库？
- en: List the different methods to accept the input from the user?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出接受用户输入的不同方法？
- en: What is the difference between sort and sorted?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排序和排序有什么区别？
- en: Further reading
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Learn basic commands of linux:  [https://maker.pro/linux/tutorial/basic-linux-commands-for-beginners](https://maker.pro/linux/tutorial/basic-linux-commands-for-beginners)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Linux的基本命令：[https://maker.pro/linux/tutorial/basic-linux-commands-for-beginners](https://maker.pro/linux/tutorial/basic-linux-commands-for-beginners)
- en: Selenium webdriver documentation:[ https://selenium-python.readthedocs.io/index.html](https://selenium-python.readthedocs.io/index.html)
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium webdriver文档：[https://selenium-python.readthedocs.io/index.html](https://selenium-python.readthedocs.io/index.html)
