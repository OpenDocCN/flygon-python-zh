["```py\nimport numpy as np\nimport pandas as pd\n```", "```py\n# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(0, 1000):\n    review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]\n    review = ' '.join(review)\n    corpus.append(review)\n```", "```py\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features = 1500)\nX = cv.fit_transform(corpus).toarray()\ny = dataset.iloc[:, 1].values\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)\n```", "```py\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n```", "```py\ny_pred = classifier.predict(X_test)\n```", "```py\nimport numpy as np\nimport pandas as pd\n```", "```py\ndf=pd.read_csv(\"moviereviews.tsv\",sep='\\t')\ndf.head()\n```", "```py\ndf.dropna(inplace=True)\n```", "```py\nblanks=[] \n\nfor i,lb,rv in df.itertuples():\n    if rv.isspace():\n        blanks.append(i)\ndf.drop(blanks,inplace=True)      \n```", "```py\nfrom sklearn.model_selection import train_test_split\n\nX = df['review']\ny = df['label']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n```", "```py\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Na\u00efve Bayes:\ntext_clf_nb = Pipeline([('tfidf', TfidfVectorizer()),\n                     ('clf', MultinomialNB()),\n])\n```", "```py\ntext_clf_nb.fit(X_train, y_train)\n```", "```py\n# Form a prediction set\npredictions = text_clf_nb.predict(X_test)\n```"]