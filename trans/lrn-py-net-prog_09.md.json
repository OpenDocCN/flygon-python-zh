["```py\n**>>> pip install flask**\n**Downloading/unpacking flask**\n\n```", "```py\nfrom flask import Flask, abort\napp = Flask(__name__)\napp.debug = True\n\nobjs = __builtins__.__dict__.items()\ndocstrings = {name.lower(): obj.__doc__ for name, obj in objs if\n              name[0].islower() and hasattr(obj, '__name__')}\n\n@app.route('/')\ndef index():\n    link_template = '<a href=\"/functions/{}\">{}</a></br>'\n    links = []\n    for func in sorted(docstrings):\n        link = link_template.format(func, func)\n        links.append(link)\n    links_output = '\\n'.join(links)\n    return '<h1>Python builtins docstrings</h1>\\n' + links_output\n\n@app.route('/functions/<func_name>')\ndef show_docstring(func_name):\n    func_name = func_name.lower()\n    if func_name in docstrings:\n        output = '<h1>{}</h1>\\n'.format(func_name)\n        output += '<pre>{}</pre>'.format(docstrings[func_name])\n        return output\n    else:\n        abort(404)\n\nif __name__ == '__main__':\n    app.run()\n```", "```py\n**$ python3.4 tinyflaskapp.py**\n *** Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)**\n *** Restarting with stat**\n\n```", "```py\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Python Builtins Docstrings</title>\n</head>\n<body>\n{% block body %}{% endblock %}\n</body>\n</html>\n```", "```py\n{% extends \"base.html\" %}\n{% block body %}\n    <h1>Python Builtins Docstrings</h1>\n    <div>\n    {% for func in funcs %}\n        <div class=\"menuitem link\">\n            <a href=\"/functions/{{ func }}\">{{ func }}</a>\n        </div>\n    {% endfor %}\n    </table>\n{% endblock %}\n```", "```py\n{% extends 'base.html' %}\n{% block body %}\n    <h1>{{ func_name }}</h1>\n    <pre>{{ doc }}</pre>\n    <p><a href=\"/\">Home</a></p>\n{% endblock %}\n```", "```py\n@app.route('/')\ndef index():\n    return render_template('index.html', funcs=sorted(docstrings))\n\n@app.route('/functions/<func_name>')\ndef show_docstring(func_name):\n    func_name = func_name.lower()\n    if func_name in docstrings:\n        return render_template('docstring.html',\n                               func_name=func_name,\n                               doc=docstrings[func_name])\n    else:\n        abort(404)\n```", "```py\nbody        { font-family: Sans-Serif; background: white; }\nh1          { color: #38b; }\npre         { margin: 0px; font-size: 1.2em; }\n.menuitem   { float: left; margin: 1px 1px 0px 0px; }\n.link       { width: 100px; padding: 5px 25px; background: #eee; }\n.link a      { text-decoration: none; color: #555; }\n.link a:hover { font-weight: bold; color: #38b; }\n```", "```py\n<head>\n    <title>Python Builtins Docstrings</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"/>\n</head>\n```", "```py\n@app.before_request\ndef csrf_protect():\n    if request.method == \"POST\":\n        token = session.pop('_csrf_token', None)\n        if not token or token != request.form.get('_csrf_token'):\n            abort(403)\n\ndef generate_csrf_token():\n    if '_csrf_token' not in session:\n        session['_csrf_token'] = some_random_string()\n    return session['_csrf_token']\n\napp.jinja_env.globals['csrf_token'] = generate_csrf_token\n```", "```py\n<form method=\"post\" action=\"<whatever>\">\n    <input name=\"_csrf_token\" type=\"hidden\" value=\"{{ csrf_token() }}\">\n```", "```py\n**$ pip install gunicorn**\n\n```", "```py\nobjs = __builtins__.__dict__.items()\n```", "```py\nobjs = __builtins__.items()\n```", "```py\n**$ gunicorn --bind 0.0.0.0:5000 tinyflaskapp:app**\n\n```"]