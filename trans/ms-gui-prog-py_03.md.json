["```py\n        # inside MainWindow.__init__()\n        subwidget = qtw.QWidget(self)\n```", "```py\n        subwidget = qtw.QWidget(self, toolTip='This is my widget')\n```", "```py\n        subwidget = qtw.QWidget(self, toolTip=b'This is my widget')\n```", "```py\nwindow = qtw.QWidget(cursor=qtc.Qt.ArrowCursor)\nwindow.setWindowFlags(qtc.Qt.Sheet|qtc.Qt.Popup)\n```", "```py\n        label = qtw.QLabel('Hello Widgets!', self)\n```", "```py\n        label.setText(\"Hi There, Widgets!\")\n        print(label.text())\n```", "```py\n        label = qtw.QLabel('<b>Hello Widgets!</b>', self, margin=10)\n```", "```py\n        line_edit = qtw.QLineEdit('default value', self)\n```", "```py\n        line_edit = qtw.QLineEdit(\n            'default value',\n            self,\n            placeholderText='Type here',\n            clearButtonEnabled=True,\n            maxLength=20\n        )\n```", "```py\n        button = qtw.QPushButton(\"Push Me\", self)\n```", "```py\n        button = qtw.QPushButton(\n            \"Push Me\",\n            self,\n            checkable=True,\n            checked=True,\n            shortcut=qtg.QKeySequence('Ctrl+p')\n        )\n```", "```py\n        combobox = qtw.QComboBox(self)\n```", "```py\n        combobox.addItem('Lemon', 1)\n        combobox.addItem('Peach', 'Ohh I like Peaches!')\n        combobox.addItem('Strawberry', qtw.QWidget)\n        combobox.insertItem(1, 'Radish', 2)\n```", "```py\n        combobox = qtw.QComboBox(\n            self,\n            editable=True,\n            insertPolicy=qtw.QComboBox.InsertAtTop\n        )\n```", "```py\n        spinbox = qtw.QSpinBox(\n            self,\n            value=12,\n            maximum=100,\n            minimum=10,\n            prefix='$',\n            suffix=' + Tax',\n            singleStep=5\n        )\n```", "```py\n       datetimebox = qtw.QDateTimeEdit(\n            self,\n            date=qtc.QDate.currentDate(),\n            time=qtc.QTime(12, 30),\n            calendarPopup=True,\n            maximumDate=qtc.QDate(2030, 1, 1),\n            maximumTime=qtc.QTime(17, 0),\n            displayFormat='yyyy-MM-dd HH:mm'\n        )\n```", "```py\n        import datetime\n        datetimebox = qtw.QDateTimeEdit(\n            self,\n            date=datetime.date.today(),\n            time=datetime.time(12, 30),\n            calendarPopup=True,\n            maximumDate=datetime.date(2020, 1, 1),\n            minimumTime=datetime.time(8, 0),\n            maximumTime=datetime.time(17, 0),\n            displayFormat='yyyy-MM-dd HH:mm'\n        )\n```", "```py\n        textedit = qtw.QTextEdit(\n            self,\n            acceptRichText=False,\n            lineWrapMode=qtw.QTextEdit.FixedColumnWidth,\n            lineWrapColumnOrWidth=25,\n            placeholderText='Enter your text here'\n            )\n```", "```py\n        layout = qtw.QVBoxLayout()\n        self.setLayout(layout)\n```", "```py\n        layout.addWidget(label)\n        layout.addWidget(line_edit)\n```", "```py\n        sublayout = qtw.QHBoxLayout()\n        layout.addLayout(sublayout)\n\n        sublayout.addWidget(button)\n        sublayout.addWidget(combobox)\n```", "```py\n        grid_layout = qtw.QGridLayout()\n        layout.addLayout(grid_layout)\n```", "```py\n        grid_layout.addWidget(spinbox, 0, 0)\n        grid_layout.addWidget(datetimebox, 0, 1)\n        grid_layout.addWidget(textedit, 1, 0, 2, 2)\n```", "```py\n        form_layout = qtw.QFormLayout()\n        layout.addLayout(form_layout)\n```", "```py\n        form_layout.addRow('Item 1', qtw.QLineEdit(self))\n        form_layout.addRow('Item 2', qtw.QLineEdit(self))\n        form_layout.addRow(qtw.QLabel('<b>This is a label-only row</b>'))\n```", "```py\n        # Fix at 150 pixels wide by 40 pixels high\n        label.setFixedSize(150, 40)\n```", "```py\n        # setting minimum and maximum sizes\n        line_edit.setMinimumSize(150, 15)\n        line_edit.setMaximumSize(500, 50)\n```", "```py\n      spinbox.setSizePolicy(qtw.QSizePolicy.Fixed,qtw.QSizePolicy.Preferred)\n```", "```py\n        textedit.setSizePolicy(\n            qtw.QSizePolicy.MinimumExpanding,\n            qtw.QSizePolicy.MinimumExpanding\n        )\n```", "```py\n        textedit.sizeHint = lambda : qtc.QSize(500, 500)\n```", "```py\n        stretch_layout = qtw.QHBoxLayout()\n        layout.addLayout(stretch_layout)\n        stretch_layout.addWidget(qtw.QLineEdit('Short'), 1)\n        stretch_layout.addWidget(qtw.QLineEdit('Long'), 2)\n```", "```py\n        tab_widget = qtw.QTabWidget()\n        layout.addWidget(tab_widget)\n```", "```py\n        container = qtw.QWidget(self)\n        grid_layout = qtw.QGridLayout()\n        # comment out this line:\n        #layout.addLayout(grid_layout)\n        container.setLayout(grid_layout)\n```", "```py\n        tab_widget.addTab(container, 'Tab the first')\n```", "```py\n        tab_widget.addTab(subwidget, 'Tab the second')\n```", "```py\n        tab_widget = qtw.QTabWidget(\n            movable=True,\n            tabPosition=qtw.QTabWidget.West,\n            tabShape=qtw.QTabWidget.Triangular\n        )\n```", "```py\n        groupbox = qtw.QGroupBox('Buttons')\n        groupbox.setLayout(qtw.QHBoxLayout())\n        groupbox.layout().addWidget(qtw.QPushButton('OK'))\n        groupbox.layout().addWidget(qtw.QPushButton('Cancel'))\n        layout.addWidget(groupbox)\n```", "```py\n        groupbox = qtw.QGroupBox(\n            'Buttons',\n            checkable=True,\n            checked=True,\n            alignment=qtc.Qt.AlignHCenter,\n            flat=True\n        )\n```", "```py\nclass IPv4Validator(qtg.QValidator):\n    \"\"\"Enforce entry of IPv4 Addresses\"\"\"\n```", "```py\n            def validate(self, string, index):\n                octets = string.split('.')\n```", "```py\n            if len(octets) > 4:\n                state = qtg.QValidator.Invalid\n```", "```py\n            elif not all([x.isdigit() for x in octets if x != '']):\n                state = qtg.QValidator.Invalid\n```", "```py\n            elif not all([0 <= int(x) <= 255 for x in octets if x != '']):\n                state = qtg.QValidator.Invalid\n```", "```py\n            elif len(octets) < 4:\n                state = qtg.QValidator.Intermediate\n```", "```py\n            elif any([x == '' for x in octets]):\n                state = qtg.QValidator.Intermediate\n```", "```py\n            else:\n                state = qtg.QValidator.Acceptable\n            return (state, string, index)\n```", "```py\n        # set the default text to a valid value\n        line_edit.setText('0.0.0.0')\n        line_edit.setValidator(IPv4Validator())\n```", "```py\nclass ChoiceSpinBox(qtw.QSpinBox):\n    \"\"\"A spinbox for selecting choices.\"\"\"\n\n    def __init__(self, choices, *args, **kwargs):\n        self.choices = choices\n        super().__init__(\n            *args,\n            maximum=len(self.choices) - 1,\n            minimum=0,\n            **kwargs\n        )\n```", "```py\n    def valueFromText(self, text):\n        return self.choices.index(text)\n```", "```py\n    def textFromValue(self, value):\n        try:\n            return self.choices[value]\n        except IndexError:\n            return '!Error!'\n```", "```py\n    def validate(self, string, index):\n        if string in self.choices:\n            state = qtg.QValidator.Acceptable\n        elif any([v.startswith(string) for v in self.choices]):\n            state = qtg.QValidator.Intermediate\n        else:\n            state = qtg.QValidator.Invalid\n        return (state, string, index)\n```", "```py\n        ratingbox = ChoiceSpinBox(\n            ['bad', 'average', 'good', 'awesome'],\n            self\n        )\n        sublayout.addWidget(ratingbox)\n```", "```py\n        self.setWindowTitle(\"My Calendar App\")\n        self.resize(800, 600)\n```", "```py\n        self.calendar = qtw.QCalendarWidget()\n        self.event_list = qtw.QListWidget()\n        self.event_title = qtw.QLineEdit()\n        self.event_category = qtw.QComboBox()\n        self.event_time = qtw.QTimeEdit(qtc.QTime(8, 0))\n        self.allday_check = qtw.QCheckBox('All Day')\n        self.event_detail = qtw.QTextEdit()\n        self.add_button = qtw.QPushButton('Add/Update')\n        self.del_button = qtw.QPushButton('Delete')\n```", "```py\n        # Add event categories\n        self.event_category.addItems(\n            ['Select category\u2026', 'New\u2026', 'Work',\n             'Meeting', 'Doctor', 'Family']\n            )\n        # disable the first category item\n        self.event_category.model().item(0).setEnabled(False)\n```", "```py\n        main_layout = qtw.QHBoxLayout()\n        self.setLayout(main_layout)\n        main_layout.addWidget(self.calendar)\n```", "```py\n        self.calendar.setSizePolicy(\n            qtw.QSizePolicy.Expanding,\n            qtw.QSizePolicy.Expanding\n        )\n```", "```py\n        right_layout = qtw.QVBoxLayout()\n        main_layout.addLayout(right_layout)\n        right_layout.addWidget(qtw.QLabel('Events on Date'))\n        right_layout.addWidget(self.event_list)\n```", "```py\n        self.event_list.setSizePolicy(\n            qtw.QSizePolicy.Expanding,\n            qtw.QSizePolicy.Expanding\n        )\n```", "```py\n        event_form = qtw.QGroupBox('Event')\n        right_layout.addWidget(event_form)\n        event_form_layout = qtw.QGridLayout()\n        event_form.setLayout(event_form_layout)\n```", "```py\n        event_form_layout.addWidget(self.event_title, 1, 1, 1, 3)\n        event_form_layout.addWidget(self.event_category, 2, 1)\n        event_form_layout.addWidget(self.event_time, 2, 2,)\n        event_form_layout.addWidget(self.allday_check, 2, 3)\n        event_form_layout.addWidget(self.event_detail, 3, 1, 1, 3)\n        event_form_layout.addWidget(self.add_button, 4, 2)\n        event_form_layout.addWidget(self.del_button, 4, 3)\n```"]