["```py\ns = socket.socket (socket_family, socket_type, protocol=0)\n```", "```py\nsocket.AF_INET\nsocket.SOCK_STREAM\n```", "```py\nsocket.socket(socket.AF_INET,socket.SOCK_STREAM)\n```", "```py\nimport socket\nprint 'creating socket ...'\n# create a socket object\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nprint 'socket created'\nprint \"connection with remote host\"\ns.connect(('www.google.com',80))\nprint 'connection ok'\ns.send( 'GET /index.html HTML/1.1\\r\\n\\r\\n')\nwhile 1:\n   data=s.recv(128)\n    print data\n    if data== \"\":\n        break\nprint 'closing the socket'\ns.close()\n```", "```py\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n```", "```py\nserver.bind((\"localhost\", 9999))\n```", "```py\nserver.listen(10)\nsocket_client, (host, port) = server.accept()\n```", "```py\nreceived = socket_client.recv(1024)\nprint \"Received: \", received\nsocket_client.send(received)\n```", "```py\nsocket_client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsocket_client.connect((\"localhost\", 9999))\nsocket_client.send(\"message\")\n```", "```py\nimport socket\nimport threading\n\nbind_ip = \"localhost\"\nbind_port = 9999\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)server.bind((bind_ip,bind_port))\nserver.listen(5)\nprint \"[*] Listening on %s:%d\" % (bind_ip,bind_port)\n\n# this is our client-handling thread\ndef handle_client(client_socket):\n# print out what the client sends\n    request = client_socket.recv(1024)\n    print \"[*] Received: %s\" % request\n    # send back a packet\n    client_socket.send(\"Message received\")\n    client_socket.close()\n\nwhile True:\n    client,addr = server.accept()\n    print \"[*] Accepted connection from: %s:%d\" % (addr[0],addr[1])\n    # spin up our client thread to handle incoming data\n    client_handler = threading.Thread(target=handle_client,args=(client,))\n    client_handler.start()\n```", "```py\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = \"127.0.0.1\" # server address\nport =9999 #server port\ns.connect((host,port))\nprint s.recv(1024)\nwhile True:\n    message = raw_input(\"> \")\n    s.send(message)\n    if message== \"quit\":\n        break\ns.close()\n```", "```py\nimport socket,sys\nbuffer=4096\nhost = \"127.0.0.1\"\nport = 6789\nsocket_server=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\nsocket_server.bind((host,port))\n\nwhile True:\n    data,addr = socket_server.recvfrom(buffer)\n    data = data.strip()\n    print \"received from: \",addr\n    print \"message: \", data\n    try:\n        response = \"Hi %s\" % sys.platform\n    except Exception,e:\n        response = \"%s\" % sys.exc_info()[0]\n    print \"Response\",response\n    socket_server.sendto(\"%s \"% response,addr)\n\nsocket_server.close()\n```", "```py\nUDP_IP_ADDRESS = \"127.0.0.1\"\n UDP_PORT = 6789\n message = \"Hello, Server\"\n```", "```py\nclientSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n```", "```py\nclientSocket.sendto(Message, (UDP_IP_ADDRESS, UDP_PORT))\n```", "```py\nimport socket\nUDP_IP_ADDRESS = \"127.0.0.1\"\nUDP_PORT = 6789\nbuffer=4096\naddress = (UDP_IP_ADDRESS ,UDP_PORT)\nsocket_client=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\nwhile True:\n    message = raw_input('?: ').strip()\n    if message==\"quit\":\n        break\n    socket_client.sendto(\"%s\" % message,address)\n    response,addr = socket_client.recvfrom(buffer)\n    print \"=> %s\" % response\n\nsocket_client.close()\n```", "```py\n>>> import socket\n> socket.gethostbyname('packtpub.com')\n'83.166.169.231'\n>> socket.gethostbyname('google.com')\n'216.58.210.142'\n```", "```py\n>> socket.gethostbyname_ex('packtpub.com')\n ('packtpub.com', [], ['83.166.169.231'])\n>>> socket.gethostbyname_ex('google.com')\n ('google.com', [], ['216.58.211.46'])\n```", "```py\n>> socket.getfqdn('google.com')\n```", "```py\n>>> socket.gethostbyaddr('8.8.8.8')\n('google-public-dns-a.google.com', [], ['8.8.8.8'])\n```", "```py\n>>> import socket\n>>> socket.getservbyname('http')\n80\n>>> socket.getservbyname('smtp','tcp')\n25\n```", "```py\n>>> socket.getservbyport(80)\n'http'\n>>> socket.getservbyport(23)\n'telnet'\n```", "```py\nimport socket\nimport sys\ntry:\n    print \"gethostbyname\"\n    print socket.gethostbyname_ex('www.google.com')\n    print \"\\ngethostbyaddr\"\n    print socket.gethostbyaddr('8.8.8.8')\n    print \"\\ngetfqdn\"\n    print socket.getfqdn('www.google.com')\n    print \"\\ngetaddrinfo\"\n    print socket.getaddrinfo('www.google.com',socket.SOCK_STREAM)\nexcept socket.error as error:\n    print (str(error))\n    print (\"Connection error\")\n    sys.exit()\n```", "```py\nimport socket\nip ='127.0.0.1'\nportlist = [22,23,80,912,135,445,20]\nfor port in portlist:\n    sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n    result = sock.connect_ex((ip,port))\n    print port,\":\", result\n    sock.close()\n```", "```py\nimport sys, socket\ntry :\n    result=socket.gethostbyaddr(\"8.8.8.8\")\n    print \"The host name is:\"\n    print \" \"+result[0]\n    print \"\\nAddress:\"\n    for item in result[2]:\n        print \" \"+item\nexcept socket.herror,e:\n    print \"error for resolving ip address:\",e\n```", "```py\nimport socket\nimport sys\n\ndef checkPortsSocket(ip,portlist):\n    try:\n        for port in portlist:\n            sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n            sock.settimeout(5)\n            result = sock.connect_ex((ip,port))\n            if result == 0:\n                print (\"Port {}: \\t Open\".format(port))\n            else:\n                print (\"Port {}: \\t Closed\".format(port))\n            sock.close()\n    except socket.error as error:\n        print (str(error))\n        print (\"Connection error\")\n        sys.exit()\n\ncheckPortsSocket('localhost',[80,8080,443])\n```", "```py\n#!/usr/bin/env python\n#--*--coding:UTF-8--*--\n# Import modules\nimport socket\nimport sys\nfrom datetime import datetime\nimport errno\n\n# RAW_INPUT IP / HOST\nremoteServer    = raw_input(\"Enter a remote host to scan: \")\nremoteServerIP  = socket.gethostbyname(remoteServer)\n\n# RAW_INPUT START PORT / END PORT\nprint \"Please enter the range of ports you would like to scan on the machine\"\nstartPort    = raw_input(\"Enter a start port: \")\nendPort    = raw_input(\"Enter a end port: \")\n\nprint \"Please wait, scanning remote host\", remoteServerIP\n#get Current Time as T1\nt1 = datetime.now()\n\n```", "```py\n#Specify Range - From startPort to startPort\ntry:\n    for port in range(int(startPort),int(endPort)):\n    print (\"Checking port {} ...\".format(port))\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    result = sock.connect_ex((remoteServerIP, port))\n    if result == 0:\n        print \"Port {}: Open\".format(port)\n    else:\n        print \"Port {}: Closed\".format(port)\n        print \"Reason:\",errno.errorcode[result]\n    sock.close()\n# If interrupted\nexcept KeyboardInterrupt:\n    print \"You pressed Ctrl+C\"\n    sys.exit()\n# If Host is wrong\nexcept socket.gaierror:\n    print 'Hostname could not be resolved. Exiting'\n    sys.exit()\n# If server is down\nexcept socket.error:\n    print \"Couldn't connect to server\"\n    sys.exit()\n#get current Time as t2\nt2 = datetime.now()\n#total Time required to Scan\ntotal =  t2 - t1\n# Time for port scanning\nprint 'Port Scanning Completed in: ', total\n```", "```py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport optparse\nfrom socket import *\nfrom threading import *\n\ndef socketScan(host, port):\n    try:\n        socket_connect = socket(AF_INET, SOCK_STREAM)\n        socket_connect.connect((host, port))\n        results = socket_connect.recv(100)\n        print '[+] %d/tcp open \\n' % port\n        print '[+] ' + str(results)\n    except:\n        print '[-] %d/tcp closed \\n' % port\n    finally:\n        socket_connect.close()\n\ndef portScanning(host, ports):\n    try:\n        ip = gethostbyname(host)\n    except:\n        print \"[-] Cannot resolve '%s': Unknown host\" %host\n        return\n    try:\n        name = gethostbyaddr(ip)\n        print '\\n[+] Scan Results for: ' + name[0]\n    except:\n        print '\\n[+] Scan Results for: ' + ip\n\n    for port in ports:\n        t = Thread(target=socketScan,args=(host,int(port)))\n        t.start()\n```", "```py\ndef main():\n    parser = optparse.OptionParser('socket_portScan '+ '-H <Host> -P <Port>')\n    parser.add_option('-H', dest='host', type='string', help='specify host')                parser.add_option('-P', dest='port', type='string', help='specify port[s] separated by comma')\n\n(options, args) = parser.parse_args()\nhost = options.host\nports = str(options.port).split(',')\n\nif (host == None) | (ports[0] == None):\n    print parser.usage\n    exit(0)\n\nportScanning(host, ports)\n\nif __name__ == '__main__':\n    main()\npython .\\socket_portScan.py -H 8.8.8.8 -P 80,21,22,23\n```", "```py\nimport socket,sys\nhost = \"127.0.0.1\"\nport = 9999\ntry:\n    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\nexcept socket.error,e:\n    print \"socket create error: %s\" %e\n    sys.exit(1)\n\ntry:\n    s.connect((host,port))\nexcept socket.timeout,e :\n    print \"Timeout %s\" %e\n    sys.exit(1)\nexcept socket.gaierror, e:\n    print \"connection error to the server:%s\" %e\n    sys.exit(1)\nexcept socket.error, e:\n    print \"Connection error: %s\" %e\n    sys.exit(1)\n```"]