["```py\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_planet_data():\n   html = requests.get(\"http://localhost:8080/planets.html\").text\n   soup = BeautifulSoup(html, \"lxml\")\n\n   planet_trs = soup.html.body.div.table.findAll(\"tr\", {\"class\": \"planet\"})\n\n   def to_dict(tr):\n      tds = tr.findAll(\"td\")\n      planet_data = dict()\n      planet_data['Name'] = tds[1].text.strip()\n      planet_data['Mass'] = tds[2].text.strip()\n      planet_data['Radius'] = tds[3].text.strip()\n      planet_data['Description'] = tds[4].text.strip()\n      planet_data['MoreInfo'] = tds[5].findAll(\"a\")[0][\"href\"].strip()\n      return planet_data\n\n   planets = [to_dict(tr) for tr in planet_trs]\n\n   return planets\n\nif __name__ == \"__main__\":\n   print(get_planet_data())\n```", "```py\n03 $python get_planet_data.py\n[{'Name': 'Mercury', 'Mass': '0.330', 'Radius': '4879', 'Description': 'Named Mercurius by the Romans because it appears to move so swiftly.', 'MoreInfo': 'https://en.wikipedia.org/wiki/Mercury_(planet)'}, {'Name': 'Venus', 'Mass': '4.87', 'Radius': '12104', 'Description': 'Roman name for the goddess of love. This planet was considered to be the brightest and most beautiful planet or star in the\\r\\n heavens. Other civilizations have named it for their god or goddess of love/war.', 'MoreInfo': 'https://en.wikipedia.org/wiki/Venus'}, {'Name': 'Earth', 'Mass': '5.97', 'Radius': '12756', 'Description': \"The name Earth comes from the Indo-European base 'er,'which produced the Germanic noun 'ertho,' and ultimately German 'erde,'\\r\\n Dutch 'aarde,' Scandinavian 'jord,' and English 'earth.' Related forms include Greek 'eraze,' meaning\\r\\n 'on the ground,' and Welsh 'erw,' meaning 'a piece of land.'\", 'MoreInfo': 'https://en.wikipedia.org/wiki/Earth'}, {'Name': 'Mars', 'Mass': '0.642', 'Radius': '6792', 'Description': 'Named by the Romans for their god of war because of its red, bloodlike color. Other civilizations also named this planet\\r\\n from this attribute; for example, the Egyptians named it \"Her Desher,\" meaning \"the red one.\"', 'MoreInfo':\n...\n```", "```py\npip install csv\npip install json\npip install pandas\n```", "```py\nimport csv\nfrom get_planet_data import get_planet_data\n\nplanets = get_planet_data()\n\nwith open('../../www/planets.csv', 'w+', newline='') as csvFile:\n    writer = csv.writer(csvFile)\n    writer.writerow(['Name', 'Mass', 'Radius', 'Description', 'MoreInfo'])\nfor planet in planets:\n        writer.writerow([planet['Name'], planet['Mass'],planet['Radius'], planet['Description'], planet['MoreInfo']])\n\n```", "```py\nName,Mass,Radius,Description,MoreInfo\nMercury,0.330,4879,Named Mercurius by the Romans because it appears to move so swiftly.,https://en.wikipedia.org/wiki/Mercury_(planet)\nVenus,4.87,12104,Roman name for the goddess of love. This planet was considered to be the brightest and most beautiful planet or star in the heavens. Other civilizations have named it for their god or goddess of love/war.,https://en.wikipedia.org/wiki/Venus\nEarth,5.97,12756,\"The name Earth comes from the Indo-European base 'er,'which produced the Germanic noun 'ertho,' and ultimately German 'erde,' Dutch 'aarde,' Scandinavian 'jord,' and English 'earth.' Related forms include Greek 'eraze,' meaning 'on the ground,' and Welsh 'erw,' meaning 'a piece of land.'\",https://en.wikipedia.org/wiki/Earth\nMars,0.642,6792,\"Named by the Romans for their god of war because of its red, bloodlike color. Other civilizations also named this planet from this attribute; for example, the Egyptians named it \"\"Her Desher,\"\" meaning \"\"the red one.\"\"\",https://en.wikipedia.org/wiki/Mars\nJupiter,1898,142984,The largest and most massive of the planets was named Zeus by the Greeks and Jupiter by the Romans; he was the most important deity in both pantheons.,https://en.wikipedia.org/wiki/Jupiter\nSaturn,568,120536,\"Roman name for the Greek Cronos, father of Zeus/Jupiter. Other civilizations have given different names to Saturn, which is the farthest planet from Earth that can be observed by the naked human eye. Most of its satellites were named for Titans who, according to Greek mythology, were brothers and sisters of Saturn.\",https://en.wikipedia.org/wiki/Saturn\nUranus,86.8,51118,\"Several astronomers, including Flamsteed and Le Monnier, had observed Uranus earlier but had recorded it as a fixed star. Herschel tried unsuccessfully to name his discovery \"\"Georgian Sidus\"\" after George III; the planet was named by Johann Bode in 1781 after the ancient Greek deity of the sky Uranus, the father of Kronos (Saturn) and grandfather of Zeus (Jupiter).\",https://en.wikipedia.org/wiki/Uranus\nNeptune,102,49528,\"Neptune was \"\"predicted\"\" by John Couch Adams and Urbain Le Verrier who, independently, were able to account for the irregularities in the motion of Uranus by correctly predicting the orbital elements of a trans- Uranian body. Using the predicted parameters of Le Verrier (Adams never published his predictions), Johann Galle observed the planet in 1846\\. Galle wanted to name the planet for Le Verrier, but that was not acceptable to the international astronomical community. Instead, this planet is named for the Roman god of the sea.\",https://en.wikipedia.org/wiki/Neptune\nPluto,0.0146,2370,\"Pluto was discovered at Lowell Observatory in Flagstaff, AZ during a systematic search for a trans-Neptune planet predicted by Percival Lowell and William H. Pickering. Named after the Roman god of the underworld who was able to render himself invisible.\",https://en.wikipedia.org/wiki/Pluto\n```", "```py\nimport requests\nimport csv\n\nplanets_data = requests.get(\"http://localhost:8080/planets.csv\").text\nplanets = planets_data.split('\\n')\nreader = csv.reader(planets, delimiter=',', quotechar='\"')\nlines = [line for line in reader][:-1]\nfor line in lines: print(line)\n```", "```py\n['Name', 'Mass', 'Radius', 'Description', 'MoreInfo']\n['Mercury', '0.330', '4879', 'Named Mercurius by the Romans because it appears to move so swiftly.', 'https://en.wikipedia.org/wiki/Mercury_(planet)']\n['Venus', '4.87', '12104', 'Roman name for the goddess of love. This planet was considered to be the brightest and most beautiful planet or star in the heavens. Other civilizations have named it for their god or goddess of love/war.', 'https://en.wikipedia.org/wiki/Venus']\n['Earth', '5.97', '12756', \"The name Earth comes from the Indo-European base 'er,'which produced the Germanic noun 'ertho,' and ultimately German 'erde,' Dutch 'aarde,' Scandinavian 'jord,' and English 'earth.' Related forms include Greek 'eraze,' meaning 'on the ground,' and Welsh 'erw,' meaning 'a piece of land.'\", 'https://en.wikipedia.org/wiki/Earth']\n```", "```py\nimport pandas as pd\nplanets_df = pd.read_csv(\"http://localhost:8080/planets_pandas.csv\", index_col='Name')\nprint(planets_df)\n```", "```py\n                                               Description Mass Radius\nName \nMercury Named Mercurius by the Romans because it appea...  0.330 4879\nVenus   Roman name for the goddess of love. This plane...   4.87 12104\nEarth   The name Earth comes from the Indo-European ba...   5.97 12756\nMars    Named by the Romans for their god of war becau...  0.642 6792\nJupiter The largest and most massive of the planets wa...   1898 142984\nSaturn  Roman name for the Greek Cronos, father of Zeu...    568 120536\nUranus  Several astronomers, including Flamsteed and L...   86.8 51118\nNeptune Neptune was \"predicted\" by John Couch Adams an...    102 49528\nPluto   Pluto was discovered at Lowell Observatory in ... 0.0146 2370\n```", "```py\nimport pandas as pd\nfrom get_planet_data import get_planet_data\n\n# construct a data from from the list planets = get_planet_data()\nplanets_df = pd.DataFrame(planets).set_index('Name')\nplanets_df.to_csv(\"../../www/planets_pandas.csv\")\n```", "```py\nimport pandas as pd\nplanets_df = pd.read_csv(\"http://localhost:8080/planets_pandas.csv\", index_col='Name')\nprint(planets_df)\n```", "```py\nimport json\nfrom get_planet_data import get_planet_data\nplanets=get_planet_data()\nprint(json.dumps(planets, indent=4))\n```", "```py\n[\n    {\n        \"Name\": \"Mercury\",\n        \"Mass\": \"0.330\",\n        \"Radius\": \"4879\",\n        \"Description\": \"Named Mercurius by the Romans because it appears to move so swiftly.\",\n        \"MoreInfo\": \"https://en.wikipedia.org/wiki/Mercury_(planet)\"\n    },\n    {\n        \"Name\": \"Venus\",\n        \"Mass\": \"4.87\",\n        \"Radius\": \"12104\",\n        \"Description\": \"Roman name for the goddess of love. This planet was considered to be the brightest and most beautiful planet or star in the heavens. Other civilizations have named it for their god or goddess of love/war.\",\n        \"MoreInfo\": \"https://en.wikipedia.org/wiki/Venus\"\n    },\n```", "```py\nimport json\nfrom get_planet_data import get_planet_data\nplanets=get_planet_data()\nwith open('../../www/planets.json', 'w+') as jsonFile:\n   json.dump(planets, jsonFile, indent=4)\n```", "```py\n[\n    {\n        \"Name\": \"Mercury\",\n        \"Mass\": \"0.330\",\n        \"Radius\": \"4879\",\n        \"Description\": \"Named Mercurius by the Romans because it appears to move so swiftly.\",\n        \"MoreInfo\": \"https://en.wikipedia.org/wiki/Mercury_(planet)\"\n    },\n    {\n        \"Name\": \"Venus\",\n        \"Mass\": \"4.87\",\n        \"Radius\": \"12104\",\n        \"Description\": \"Roman name for the goddess of love. This planet was considered to be the brightest and most beautiful planet or star in the heavens. Other civilizations have named it for their god or goddess of love/war.\",\n```", "```py\nimport requests\nimport json\n\nplanets_request = requests.get(\"http://localhost:8080/planets.json\")\nprint(json.loads(planets_request.text))\n```", "```py\nimport pandas as pd\nfrom get_planet_data import get_planet_data\n\nplanets = get_planet_data()\nplanets_df = pd.DataFrame(planets).set_index('Name')\nplanets_df.reset_index().to_json(\"../../www/planets_pandas.json\", orient='records')\n```", "```py\nimport pandas as pd\nplanets_df = pd.read_json(\"http://localhost:8080/planets_pandas.json\").set_index('Name')\nprint(planets_df)\n```", "```py\nimport requests\nimport boto3\n\ndata = requests.get(\"http://localhost:8080/planets.html\").text\n\n# create S3 client, use environment variables for keys s3 = boto3.client('s3')\n\n# the bucket bucket_name = \"planets-content\"   # create bucket, set s3.create_bucket(Bucket=bucket_name, ACL='public-read')\ns3.put_object(Bucket=bucket_name, Key='planet.html',\n              Body=data, ACL=\"public-read\")\n```", "```py\n\n{'ETag': '\"3ada9dcd8933470221936534abbf7f3e\"',\n 'ResponseMetadata': {'HTTPHeaders': {'content-length': '0',\n   'date': 'Sun, 27 Aug 2017 19:25:54 GMT',\n   'etag': '\"3ada9dcd8933470221936534abbf7f3e\"',\n   'server': 'AmazonS3',\n   'x-amz-id-2': '57BkfScql637op1dIXqJ7TeTmMyjVPk07cAMNVqE7C8jKsb7nRO+0GSbkkLWUBWh81k+q2nMQnE=',\n   'x-amz-request-id': 'D8446EDC6CBA4416'},\n  'HTTPStatusCode': 200,\n  'HostId': '57BkfScql637op1dIXqJ7TeTmMyjVPk07cAMNVqE7C8jKsb7nRO+0GSbkkLWUBWh81k+q2nMQnE=',\n  'RequestId': 'D8446EDC6CBA4416',\n  'RetryAttempts': 0}}\n```", "```py\n# mysql -uroot -pmypassword\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor. Commands end with ; or \\g.\nYour MySQL connection id is 4\nServer version: 5.7.19 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n```", "```py\nmysql> create database scraping;\nQuery OK, 1 row affected (0.00 sec)\n```", "```py\nmysql> use scraping;\nDatabase changed\n```", "```py\n\nmysql> CREATE TABLE `scraping`.`planets` (\n `id` INT NOT NULL AUTO_INCREMENT,\n `name` VARCHAR(45) NOT NULL,\n `mass` FLOAT NOT NULL,\n `radius` FLOAT NOT NULL,\n `description` VARCHAR(5000) NULL,\n PRIMARY KEY (`id`));\nQuery OK, 0 rows affected (0.02 sec)\n\n```", "```py\nimport mysql.connector\nimport get_planet_data\nfrom mysql.connector import errorcode\nfrom get_planet_data import get_planet_data\n\ntry:\n    # open the database connection\n    cnx = mysql.connector.connect(user='root', password='mypassword',\n                                  host=\"127.0.0.1\", database=\"scraping\")\n\n    insert_sql = (\"INSERT INTO Planets (Name, Mass, Radius, Description) \" +\n                  \"VALUES (%(Name)s, %(Mass)s, %(Radius)s, %(Description)s)\")\n\n    # get the planet data\n    planet_data = get_planet_data()\n\n    # loop through all planets executing INSERT for each with the cursor\n    cursor = cnx.cursor()\n    for planet in planet_data:\n        print(\"Storing data for %s\" % (planet[\"Name\"]))\n        cursor.execute(insert_sql, planet)\n\n    # commit the new records\n    cnx.commit()\n\n    # close the cursor and connection\n    cursor.close()\n    cnx.close()\n\nexcept mysql.connector.Error as err:\n    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:\n        print(\"Something is wrong with your user name or password\")\n    elif err.errno == errorcode.ER_BAD_DB_ERROR:\n        print(\"Database does not exist\")\n    else:\n        print(err)\nelse:\n    cnx.close()\n```", "```py\nStoring data for Mercury\nStoring data for Venus\nStoring data for Earth\nStoring data for Mars\nStoring data for Jupiter\nStoring data for Saturn\nStoring data for Uranus\nStoring data for Neptune\nStoring data for Pluto\n```", "```py\nimport mysql.connector\nfrom mysql.connector import errorcode\n\ntry:\n  cnx = mysql.connector.connect(user='root', password='mypassword',\n                  host=\"127.0.0.1\", database=\"scraping\")\n  cursor = cnx.cursor(dictionary=False)\n\n  cursor.execute(\"SELECT * FROM scraping.Planets\")\n  for row in cursor:\n    print(row)\n\n  # close the cursor and connection\n  cursor.close()\n  cnx.close()\n\nexcept mysql.connector.Error as err:\n  if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:\n    print(\"Something is wrong with your user name or password\")\n  elif err.errno == errorcode.ER_BAD_DB_ERROR:\n    print(\"Database does not exist\")\n  else:\n    print(err)\nfinally:\n  cnx.close()\n\n```", "```py\n(1, 'Mercury', 0.33, 4879.0, 'Named Mercurius by the Romans because it appears to move so swiftly.', 'https://en.wikipedia.org/wiki/Mercury_(planet)')\n(2, 'Venus', 4.87, 12104.0, 'Roman name for the goddess of love. This planet was considered to be the brightest and most beautiful planet or star in the heavens. Other civilizations have named it for their god or goddess of love/war.', 'https://en.wikipedia.org/wiki/Venus')\n(3, 'Earth', 5.97, 12756.0, \"The name Earth comes from the Indo-European base 'er,'which produced the Germanic noun 'ertho,' and ultimately German 'erde,' Dutch 'aarde,' Scandinavian 'jord,' and English 'earth.' Related forms include Greek 'eraze,' meaning 'on the ground,' and Welsh 'erw,' meaning 'a piece of land.'\", 'https://en.wikipedia.org/wiki/Earth')\n(4, 'Mars', 0.642, 6792.0, 'Named by the Romans for their god of war because of its red, bloodlike color. Other civilizations also named this planet from this attribute; for example, the Egyptians named it \"Her Desher,\" meaning \"the red one.\"', 'https://en.wikipedia.org/wiki/Mars')\n(5, 'Jupiter', 1898.0, 142984.0, 'The largest and most massive of the planets was named Zeus by the Greeks and Jupiter by the Romans; he was the most important deity in both pantheons.', 'https://en.wikipedia.org/wiki/Jupiter')\n(6, 'Saturn', 568.0, 120536.0, 'Roman name for the Greek Cronos, father of Zeus/Jupiter. Other civilizations have given different names to Saturn, which is the farthest planet from Earth that can be observed by the naked human eye. Most of its satellites were named for Titans who, according to Greek mythology, were brothers and sisters of Saturn.', 'https://en.wikipedia.org/wiki/Saturn')\n(7, 'Uranus', 86.8, 51118.0, 'Several astronomers, including Flamsteed and Le Monnier, had observed Uranus earlier but had recorded it as a fixed star. Herschel tried unsuccessfully to name his discovery \"Georgian Sidus\" after George III; the planet was named by Johann Bode in 1781 after the ancient Greek deity of the sky Uranus, the father of Kronos (Saturn) and grandfather of Zeus (Jupiter).', 'https://en.wikipedia.org/wiki/Uranus')\n(8, 'Neptune', 102.0, 49528.0, 'Neptune was \"predicted\" by John Couch Adams and Urbain Le Verrier who, independently, were able to account for the irregularities in the motion of Uranus by correctly predicting the orbital elements of a trans- Uranian body. Using the predicted parameters of Le Verrier (Adams never published his predictions), Johann Galle observed the planet in 1846\\. Galle wanted to name the planet for Le Verrier, but that was not acceptable to the international astronomical community. Instead, this planet is named for the Roman god of the sea.', 'https://en.wikipedia.org/wiki/Neptune')\n(9, 'Pluto', 0.0146, 2370.0, 'Pluto was discovered at Lowell Observatory in Flagstaff, AZ during a systematic search for a trans-Neptune planet predicted by Percival Lowell and William H. Pickering. Named after the Roman god of the underworld who was able to render himself invisible.', 'https://en.wikipedia.org/wiki/Pluto')\n```", "```py\n# psql -U postgres psql (9.6.4) Type \"help\" for help. postgres=# \n```", "```py\npostgres=# create database scraping;\nCREATE DATABASE\npostgres=#\n```", "```py\npostgres=# \\connect scraping You are now connected to database \"scraping\" as user \"postgres\". scraping=# \n```", "```py\nscraping=# CREATE SEQUENCE public.\"Planets_id_seq\" scraping-#  INCREMENT 1 scraping-#  START 1 scraping-#  MINVALUE 1 scraping-#  MAXVALUE 9223372036854775807 scraping-#  CACHE 1; CREATE SEQUENCE scraping=# ALTER SEQUENCE public.\"Planets_id_seq\" scraping-#  OWNER TO postgres; ALTER SEQUENCE scraping=# \n```", "```py\nscraping=# CREATE TABLE public.\"Planets\" scraping-# ( scraping(# id integer NOT NULL DEFAULT nextval('\"Planets_id_seq\"'::regclass), scraping(# name text COLLATE pg_catalog.\"default\" NOT NULL, scraping(# mass double precision NOT NULL, scraping(# radius double precision NOT NULL, scraping(# description text COLLATE pg_catalog.\"default\" NOT NULL, scraping(# moreinfo text COLLATE pg_catalog.\"default\" NOT NULL, scraping(# CONSTRAINT \"Planets_pkey\" PRIMARY KEY (name) scraping(# ) scraping-# WITH ( scraping(# OIDS = FALSE scraping(# )\n</span>scraping-# TABLESPACE pg_default; CREATE TABLE scraping=# scraping=# ALTER TABLE public.\"Planets\" scraping-# OWNER to postgres; ALTER TABLE scraping=# \\q\n```", "```py\nimport psycopg2\nfrom get_planet_data import get_planet_data\n\ntry:\n  # connect to PostgreSQL\n  conn = psycopg2.connect(\"dbname='scraping' host='localhost' user='postgres' password='mypassword'\")\n\n  # the SQL INSERT statement we will use\n  insert_sql = ('INSERT INTO public.\"Planets\"(name, mass, radius, description, moreinfo) ' +\n          'VALUES (%(Name)s, %(Mass)s, %(Radius)s, %(Description)s, %(MoreInfo)s);')\n\n  # open a cursor to access data\n  cur = conn.cursor()\n\n  # get the planets data and loop through each\n  planet_data = get_planet_data()\n  for planet in planet_data:\n    # write each record\n    cur.execute(insert_sql, planet)\n\n  # commit the new records to the database\n  conn.commit()\n  cur.close()\n  conn.close()\n\n  print(\"Successfully wrote data to the database\")\n\nexcept Exception as ex:\n  print(ex)\n\n```", "```py\nSuccessfully wrote data to the database\n```", "```py\nimport psycopg2\n\ntry:\n  conn = psycopg2.connect(\"dbname='scraping' host='localhost' user='postgres' password='mypassword'\")\n\n  cur = conn.cursor()\n  cur.execute('SELECT * from public.\"Planets\"')\n  rows = cur.fetchall()\n  print(rows)\n\n  cur.close()\n  conn.close()\n\nexcept Exception as ex:\n  print(ex)\n\n```", "```py\n[(1, 'Mercury', 0.33, 4879.0, 'Named Mercurius by the Romans because it appears to move so swiftly.', 'https://en.wikipedia.org/wiki/Mercury_(planet)'), (2, 'Venus', 4.87, 12104.0, 'Roman name for the goddess of love. This planet was considered to be the brightest and most beautiful planet or star in the heavens. Other civilizations have named it for their god or goddess of love/war.', 'https://en.wikipedia.org/wiki/Venus'), (3, 'Earth', 5.97, 12756.0, \"The name Earth comes from the Indo-European base 'er,'which produced the Germanic noun 'ertho,' and ultimately German 'erde,' Dutch 'aarde,' Scandinavian 'jord,' and English 'earth.' Related forms include Greek 'eraze,' meaning 'on the ground,' and Welsh 'erw,' meaning 'a piece of land.'\", 'https://en.wikipedia.org/wiki/Earth'), (4, 'Mars', 0.642, 6792.0, 'Named by the Romans for their god of war because of its red, bloodlike color. Other civilizations also named this planet from this attribute; for example, the Egyptians named it \n```", "```py\nfrom elasticsearch import Elasticsearch\nfrom get_planet_data import get_planet_data\n\n# create an elastic search object\nes = Elasticsearch()\n\n# get the data\nplanet_data = get_planet_data()\n\nfor planet in planet_data:\n  # insert each planet into elasticsearch server\n  res = es.index(index='planets', doc_type='planets_info', body=planet)\n  print (res)\n```", "```py\n{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF3_T0Z2t9T850q6', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF5QT0Z2t9T850q7', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF5XT0Z2t9T850q8', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF5fT0Z2t9T850q9', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF5mT0Z2t9T850q-', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF5rT0Z2t9T850q_', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF50T0Z2t9T850rA', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF56T0Z2t9T850rB', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n{'_index': 'planets', '_type': 'planets_info', '_id': 'AV4qIF6AT0Z2t9T850rC', '_version': 1, 'result': 'created', '_shards': {'total': 2, 'successful': 1, 'failed': 0}, 'created': True}\n```", "```py\nfrom elasticsearch import Elasticsearch\n\n# create an elastic search object\nes = Elasticsearch()\n\nres = es.search(index=\"planets\", body={\"query\": {\"match_all\": {}}})\n\n```", "```py\nprint(\"Got %d Hits:\" % res['hits']['total'])\nfor hit in res['hits']['hits']:\n print(\"%(Name)s %(Mass)s: %(Radius)s\" % hit[\"_source\"])Got 9 Hits:\n```", "```py\nMercury 0.330: 4879\nMars 0.642: 6792\nVenus 4.87: 12104\nSaturn 568: 120536\nPluto 0.0146: 2370\nEarth 5.97: 12756\nUranus 86.8: 51118\nJupiter 1898: 142984\nNeptune 102: 49528\n```", "```py\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\n\nimport boto3\nimport botocore\n\n# declare our keys (normally, don't hard code this)\naccess_key=\"AKIAIXFTCYO7FEL55TCQ\"\naccess_secret_key=\"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\"\n\n# create sqs client\nsqs = boto3.client('sqs', \"us-west-2\",\n                   aws_access_key_id = access_key, \n                   aws_secret_access_key = access_secret_key)\n\n# create / open the SQS queue\nqueue = sqs.create_queue(QueueName=\"PlanetMoreInfo\")\nprint (queue)\n\n# read and parse the planets HTML\nhtml = urlopen(\"http://127.0.0.1:8080/pages/planets.html\")\nbsobj = BeautifulSoup(html, \"lxml\")\n\nplanets = []\nplanet_rows = bsobj.html.body.div.table.findAll(\"tr\", {\"class\": \"planet\"})\n\nfor i in planet_rows:\n  tds = i.findAll(\"td\")\n\n  # get the URL\n  more_info_url = tds[5].findAll(\"a\")[0][\"href\"].strip()\n\n  # send the URL to the queue\n  sqs.send_message(QueueUrl=queue[\"QueueUrl\"],\n           MessageBody=more_info_url)\n  print(\"Sent %s to %s\" % (more_info_url, queue[\"QueueUrl\"]))\n```", "```py\n{'QueueUrl': 'https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo', 'ResponseMetadata': {'RequestId': '2aad7964-292a-5bf6-b838-2b7a5007af22', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'Server', 'date': 'Mon, 28 Aug 2017 20:02:53 GMT', 'content-type': 'text/xml', 'content-length': '336', 'connection': 'keep-alive', 'x-amzn-requestid': '2aad7964-292a-5bf6-b838-2b7a5007af22'}, 'RetryAttempts': 0}} Sent https://en.wikipedia.org/wiki/Mercury_(planet) to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Sent https://en.wikipedia.org/wiki/Venus to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Sent https://en.wikipedia.org/wiki/Earth to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Sent https://en.wikipedia.org/wiki/Mars to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Sent https://en.wikipedia.org/wiki/Jupiter to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Sent https://en.wikipedia.org/wiki/Saturn to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Sent https://en.wikipedia.org/wiki/Uranus to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Sent https://en.wikipedia.org/wiki/Neptune to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Sent https://en.wikipedia.org/wiki/Pluto to https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo\n```", "```py\nimport boto3\nimport botocore\nimport requests\nfrom bs4 import BeautifulSoup\n\nprint(\"Starting\")\n\n# declare our keys (normally, don't hard code this)\naccess_key = \"AKIAIXFTCYO7FEL55TCQ\"\naccess_secret_key = \"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\"\n\n# create sqs client\nsqs = boto3.client('sqs', \"us-west-2\", \n          aws_access_key_id = access_key, \n          aws_secret_access_key = access_secret_key)\n\nprint(\"Created client\")\n\n# create / open the SQS queue\nqueue = sqs.create_queue(QueueName=\"PlanetMoreInfo\")\nqueue_url = queue[\"QueueUrl\"]\nprint (\"Opened queue: %s\" % queue_url)\n\nwhile True:\n  print (\"Attempting to receive messages\")\n  response = sqs.receive_message(QueueUrl=queue_url,\n                 MaxNumberOfMessages=1,\n                 WaitTimeSeconds=1)\n  if not 'Messages' in response:\n    print (\"No messages\")\n    continue\n\n  message = response['Messages'][0]\n  receipt_handle = message['ReceiptHandle']\n  url = message['Body']\n\n  # parse the page\n  html = requests.get(url)\n  bsobj = BeautifulSoup(html.text, \"lxml\")\n\n  # now find the planet name and albedo info\n  planet=bsobj.findAll(\"h1\", {\"id\": \"firstHeading\"} )[0].text\n  albedo_node = bsobj.findAll(\"a\", {\"href\": \"/wiki/Geometric_albedo\"})[0]\n  root_albedo = albedo_node.parent\n  albedo = root_albedo.text.strip()\n\n  # delete the message from the queue\n  sqs.delete_message(\n    QueueUrl=queue_url,\n    ReceiptHandle=receipt_handle\n  )\n\n  # print the planets name and albedo info\n  print(\"%s: %s\" % (planet, albedo))\n```", "```py\nStarting Created client Opened queue: https://us-west-2.queue.amazonaws.com/414704166289/PlanetMoreInfo Attempting to receive messages Jupiter: 0.343 (Bond) 0.52 (geom.)[3] Attempting to receive messages Mercury (planet): 0.142 (geom.)[10] Attempting to receive messages Uranus: 0.300 (Bond) 0.51 (geom.)[5] Attempting to receive messages Neptune: 0.290 (bond) 0.41 (geom.)[4] Attempting to receive messages Pluto: 0.49 to 0.66 (geometric, varies by 35%)[1][7] Attempting to receive messages Venus: 0.689 (geometric)[2] Attempting to receive messages Earth: 0.367 geometric[3] Attempting to receive messages Mars: 0.170 (geometric)[8] 0.25 (Bond)[7] Attempting to receive messages Saturn: 0.499 (geometric)[4] Attempting to receive messages No messages\n```"]