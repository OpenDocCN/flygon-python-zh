["```py\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<topology   schemaVersion=\"0.95\" xsi:schemaLocation=\"http://www.cisco.com/VIRL https://raw.github.com/CiscoVIRL/schema/v0.95/virl.xsd\">\n    <extensions>\n        <entry key=\"management_network\" type=\"String\">flat</entry>\n    </extensions>\n    <node name=\"iosv-1\" type=\"SIMPLE\" subtype=\"IOSv\" location=\"182,162\" ipv4=\"192.168.0.3\">\n        <extensions>\n            <entry key=\"static_ip\" type=\"String\">172.16.1.20</entry>\n            <entry key=\"config\" type=\"string\">! IOS Config generated on 2018-07-24 00:23\n! by autonetkit_0.24.0\n!\nhostname iosv-1\nboot-start-marker\nboot-end-marker\n!\n...\n    </node>\n    <node name=\"nx-osv-1\" type=\"SIMPLE\" subtype=\"NX-OSv\" location=\"281,161\" ipv4=\"192.168.0.1\">\n        <extensions>\n            <entry key=\"static_ip\" type=\"String\">172.16.1.21</entry>\n            <entry key=\"config\" type=\"string\">! NX-OSv Config generated on 2018-07-24 00:23\n! by autonetkit_0.24.0\n!\nversion 6.2(1)\nlicense grace-period\n!\nhostname nx-osv-1\n\n...\n<node name=\"host2\" type=\"SIMPLE\" subtype=\"server\" location=\"347,66\">\n        <extensions>\n            <entry key=\"static_ip\" type=\"String\">172.16.1.23</entry>\n            <entry key=\"config\" type=\"string\">#cloud-config\nbootcmd:\n- ln -s -t /etc/rc.d /etc/rc.local\nhostname: host2\nmanage_etc_hosts: true\nruncmd:\n- start ttyS0\n- systemctl start getty@ttyS0.service\n- systemctl start rc-local\n    <annotations/>\n    <connection dst=\"/virl:topology/virl:node[1]/virl:interface[1]\" src=\"/virl:topology/virl:node[3]/virl:interface[1]\"/>\n    <connection dst=\"/virl:topology/virl:node[2]/virl:interface[1]\" src=\"/virl:topology/virl:node[1]/virl:interface[2]\"/>\n    <connection dst=\"/virl:topology/virl:node[4]/virl:interface[1]\" src=\"/virl:topology/virl:node[2]/virl:interface[2]\"/>\n</topology>\n```", "```py\n#!/usr/env/bin python3\n\nimport xml.etree.ElementTree as ET\nimport pprint\n\nwith open('chapter13_topology.virl', 'rt') as f:\n    tree = ET.parse(f)\n\ndevices = {}\n\nfor node in tree.findall('./{http://www.cisco.com/VIRL}node'):\n    name = node.attrib.get('name')\n    devices[name] = {}\n    for attr_name, attr_value in sorted(node.attrib.items()):\n        devices[name][attr_name] = attr_value\n\n# Custom attributes\ndevices['iosv-1']['os'] = '15.6(3)M2'\ndevices['nx-osv-1']['os'] = '7.3(0)D1(1)'\ndevices['host1']['os'] = '16.04'\ndevices['host2']['os'] = '16.04'\n\npprint.pprint(devices)\n```", "```py\n$ python3 chapter13_1_xml.py\n{'host1': {'location': '117,58',\n           'name': 'host1',\n           'os': '16.04',\n           'subtype': 'server',\n           'type': 'SIMPLE'},\n 'host2': {'location': '347,66',\n           'name': 'host2',\n           'os': '16.04',\n           'subtype': 'server',\n           'type': 'SIMPLE'},\n 'iosv-1': {'ipv4': '192.168.0.3',\n            'location': '182,162',\n            'name': 'iosv-1',\n            'os': '15.6(3)M2',\n            'subtype': 'IOSv',\n            'type': 'SIMPLE'},\n 'nx-osv-1': {'ipv4': '192.168.0.1',\n              'location': '281,161',\n              'name': 'nx-osv-1',\n              'os': '7.3(0)D1(1)',\n              'subtype': 'NX-OSv',\n              'type': 'SIMPLE'}}\n```", "```py\nimport unittest\n\n# Unittest Test case\nclass TestNXOSVersion(unittest.TestCase):\n    def test_version(self):\n        self.assertEqual(nxos_version, devices['nx-osv-1']['os'])\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n$ python3 chapter13_2_validation.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n```", "```py\n$ python3 chapter13_3_test_fail.py\nF\n======================================================================\nFAIL: test_version (__main__.TestNXOSVersion)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"chapter13_3_test_fail.py\", line 50, in test_version\n self.assertEqual(nxos_version, devices['nx-osv-1']['os'])\nAssertionError: '7.3(0)D1(1)' != '7.4(0)D1(1)'\n- 7.3(0)D1(1)\n? ^\n+ 7.4(0)D1(1)\n? ^\n\n----------------------------------------------------------------------\nRan 1 test in 0.004s\n\nFAILED (failures=1)\n```", "```py\n$ cat chapter13_4_unittest.py\n#!/usr/bin/env python3\n\nimport unittest\n\nclass SimpleTest(unittest.TestCase):\n    def test(self):\n        one = 'a'\n        two = 'a'\n        self.assertEqual(one, two)\n```", "```py\n$ python3 -m unittest chapter13_4_unittest.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n```", "```py\n$ cat chapter13_5_more_unittest.py\n#!/usr/bin/env python3\n# Examples from https://pymotw.com/3/unittest/index.html#module-unittest\n\nimport unittest\n\nclass Output(unittest.TestCase):\n    def testPass(self):\n        return\n\n    def testFail(self):\n        self.assertFalse(True, 'this is a failed message')\n\n    def testError(self):\n        raise RuntimeError('Test error!')\n\n    def testAssesrtTrue(self):\n        self.assertTrue(True)\n\n    def testAssertFalse(self):\n        self.assertFalse(False)\n```", "```py\n$ python3 -m unittest -v chapter13_5_more_unittest.py\ntestAssertFalse (chapter13_5_more_unittest.Output) ... ok\ntestAssesrtTrue (chapter13_5_more_unittest.Output) ... ok\ntestError (chapter13_5_more_unittest.Output) ... ERROR\ntestFail (chapter13_5_more_unittest.Output) ... FAIL\ntestPass (chapter13_5_more_unittest.Output) ... ok\n\n======================================================================\nERROR: testError (chapter13_5_more_unittest.Output)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/home/echou/Master_Python_Networking_second_edition/Chapter13/chapter13_5_more_unittest.py\", line 14, in testError\n raise RuntimeError('Test error!')\nRuntimeError: Test error!\n\n======================================================================\nFAIL: testFail (chapter13_5_more_unittest.Output)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/home/echou/Master_Python_Networking_second_edition/Chapter13/chapter13_5_more_unittest.py\", line 11, in testFail\n self.assertFalse(True, 'this is a failed message')\nAssertionError: True is not false : this is a failed message\n\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\n\nFAILED (failures=1, errors=1)\n```", "```py\n# Our class making API Call using requests\nclass MyClass:\n    def fetch_json(self, url):\n        response = requests.get(url)\n        return response.json()\n```", "```py\n# This method will be used by the mock to replace requests.get\ndef mocked_requests_get(*args, **kwargs):\n    class MockResponse:\n        def __init__(self, json_data, status_code):\n            self.json_data = json_data\n            self.status_code = status_code\n\n        def json(self):\n            return self.json_data\n\n    if args[0] == 'http://url-1.com/test.json':\n        return MockResponse({\"key1\": \"value1\"}, 200)\n    elif args[0] == 'http://url-2.com/test.json':\n        return MockResponse({\"key2\": \"value2\"}, 200)\n\n    return MockResponse(None, 404)\n```", "```py\n# Our test case class\nclass MyClassTestCase(unittest.TestCase):\n    # We patch 'requests.get' with our own method. The mock object is passed in to our test case method.\n    @mock.patch('requests.get', side_effect=mocked_requests_get)\n    def test_fetch(self, mock_get):\n        # Assert requests.get calls\n        my_class = MyClass()\n        # call to url-1\n        json_data = my_class.fetch_json('http://url-1.com/test.json')\n        self.assertEqual(json_data, {\"key1\": \"value1\"})\n        # call to url-2\n        json_data = my_class.fetch_json('http://url-2.com/test.json')\n        self.assertEqual(json_data, {\"key2\": \"value2\"})\n        # call to url-3 that we did not mock\n        json_data = my_class.fetch_json('http://url-3.com/test.json')\n        self.assertIsNone(json_data)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n$ python3 -m unittest -v chapter13_5_more_unittest_mocks.py\ntest_fetch (chapter13_5_more_unittest_mocks.MyClassTestCase) ... ok\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n```", "```py\n$ sudo pip install pytest\n$ sudo pip3 install pytest\n$ python3\nPython 3.5.2 (default, Nov 23 2017, 16:37:01)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pytest\n>>> pytest.__version__\n'3.6.3'\n```", "```py\n$ cat chapter13_6_pytest_1.py\n#!/usr/bin/env python3\n\ndef test_passing():\n    assert(1, 2, 3) == (1, 2, 3)\n\ndef test_failing():\n    assert(1, 2, 3) == (3, 2, 1)\n```", "```py\n$ pytest -v chapter13_6_pytest_1.py\n============================== test session starts ===============================\nplatform linux -- Python 3.5.2, pytest-3.6.3, py-1.5.4, pluggy-0.6.0 -- /usr/bin/python3\ncachedir: .pytest_cache\nrootdir: /home/echou/Master_Python_Networking_second_edition/Chapter13, inifile:\ncollected 2 items\n\nchapter13_6_pytest_1.py::test_passing PASSED [ 50%]\nchapter13_6_pytest_1.py::test_failing FAILED [100%]\n\n==================================== FAILURES ====================================\n__________________________________ test_failing __________________________________\n\n def test_failing():\n> assert(1, 2, 3) == (3, 2, 1)\nE assert (1, 2, 3) == (3, 2, 1)\nE At index 0 diff: 1 != 3\nE Full diff:\nE - (1, 2, 3)\nE ? ^ ^\nE + (3, 2, 1)\nE ? ^ ^\n\nchapter13_6_pytest_1.py:7: AssertionError\n======================= 1 failed, 1 passed in 0.03 seconds =======================\n```", "```py\n$ cat chapter13_7_pytest_2.py\n#!/usr/bin/env python3\n\nclass router(object):\n    def __init__(self, hostname=None, os=None, device_type='cisco_ios'):\n        self.hostname = hostname\n        self.os = os\n        self.device_type = device_type\n        self.interfaces = 24\n\ndef test_defaults():\n    r1 = router()\n    assert r1.hostname == None\n    assert r1.os == None\n    assert r1.device_type == 'cisco_ios'\n    assert r1.interfaces == 24\n\ndef test_non_defaults():\n    r2 = router(hostname='lax-r2', os='nxos', device_type='cisco_nxos')\n    assert r2.hostname == 'lax-r2'\n    assert r2.os == 'nxos'\n    assert r2.device_type == 'cisco_nxos'\n    assert r2.interfaces == 24\n```", "```py\n$ pytest chapter13_7_pytest_2.py\n============================== test session starts ===============================\nplatform linux -- Python 3.5.2, pytest-3.6.3, py-1.5.4, pluggy-0.6.0\nrootdir: /home/echou/Master_Python_Networking_second_edition/Chapter13, inifile:\ncollected 2 items\n\nchapter13_7_pytest_2.py .. [100%]\n\n============================ 2 passed in 0.04 seconds ============================\n```", "```py\n# pytest test case\ndef test_version():\n    assert devices['nx-osv-1']['os'] == nxos_version\n```", "```py\n$ pytest chapter13_8_pytest_3.py\n============================== test session starts ===============================\nplatform linux -- Python 3.5.2, pytest-3.6.3, py-1.5.4, pluggy-0.6.0\nrootdir: /home/echou/Master_Python_Networking_second_edition/Chapter13, inifile:\ncollected 1 item\n\nchapter13_8_pytest_3.py . [100%]\n\n============================ 1 passed in 0.19 seconds ============================\n```", "```py\n>>> import os\n>>> host_list = ['www.cisco.com', 'www.google.com']\n>>> for host in host_list:\n...     os.system('ping -c 1 ' + host)\n...\nPING e2867.dsca.akamaiedge.net (69.192.206.157) 56(84) bytes of data.\n64 bytes from a69-192-206-157.deploy.static.akamaitechnologies.com (69.192.206.157): icmp_seq=1 ttl=54 time=14.7 ms\n\n--- e2867.dsca.akamaiedge.net ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 14.781/14.781/14.781/0.000 ms\n0\nPING www.google.com (172.217.3.196) 56(84) bytes of data.\n64 bytes from sea15s12-in-f196.1e100.net (172.217.3.196): icmp_seq=1 ttl=54 time=12.8 ms\n\n--- www.google.com ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 12.809/12.809/12.809/0.000 ms\n0\n>>>\n```", "```py\n>>> import subprocess\n>>> for host in host_list:\n...     print('host: ' + host)\n...     p = subprocess.Popen(['ping', '-c', '1', host], stdout=subprocess.PIPE)\n...     print(p.communicate())\n...\nhost: www.cisco.com\n(b'PING e2867.dsca.akamaiedge.net (69.192.206.157) 56(84) bytes of data.\\n64 bytes from a69-192-206-157.deploy.static.akamaitechnologies.com (69.192.206.157): icmp_seq=1 ttl=54 time=14.3 ms\\n\\n--- e2867.dsca.akamaiedge.net ping statistics ---\\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\\nrtt min/avg/max/mdev = 14.317/14.317/14.317/0.000 ms\\n', None)\nhost: www.google.com\n(b'PING www.google.com (216.58.193.68) 56(84) bytes of data.\\n64 bytes from sea15s07-in-f68.1e100.net (216.58.193.68): icmp_seq=1 ttl=54 time=15.6 ms\\n\\n--- www.google.com ping statistics ---\\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\\nrtt min/avg/max/mdev = 15.695/15.695/15.695/0.000 ms\\n', None)\n>>>\n```", "```py\n$ cat chapter13_10_ping.py\n#!/usr/bin/env python3\n\nimport subprocess\n\nhost_list = ['www.cisco.com', 'www.google.com']\n\nping_time = []\n\nfor host in host_list:\n    p = subprocess.Popen(['ping', '-c', '1', host], stdout=subprocess.PIPE)\n    result = p.communicate()[0]\n    host = result.split()[1]\n    time = result.split()[14]\n    ping_time.append((host, time))\n\nprint(ping_time)\n```", "```py\n$ python3 chapter13_10_ping.py\n[(b'e2867.dsca.akamaiedge.net', b'time=13.8'), (b'www.google.com', b'time=14.8')]\n```", "```py\n# DON'T DO THIS IN PRODUCTION #\nechou@ubuntu:/var/log$ sudo hping3 -S -p 80 --flood 192.168.1.202\nHPING 192.168.1.202 (eth0 192.168.1.202): S set, 40 headers + 0 data bytes\nhping in flood mode, no replies will be shown\n^C\n--- 192.168.1.202 hping statistic ---\n2281304 packets transmitted, 0 packets received, 100% packet loss\nround-trip min/avg/max = 0.0/0.0/0.0 ms\nechou@ubuntu:/var/log$\n```", "```py\n# Python 2\n$ python -m SimpleHTTPServer 8080\nServing HTTP on 0.0.0.0 port 8080 ...\n127.0.0.1 - - [25/Jul/2018 10:14:39] \"GET / HTTP/1.1\" 200 -\n\n# Python 3 \n$ python3 -m http.server 8080\nServing HTTP on 0.0.0.0 port 8080 ...\n127.0.0.1 - - [25/Jul/2018 10:15:23] \"GET / HTTP/1.1\" 200 -\n```", "```py\ndef test_transaction():\n     assert nxos_version != False\n\n## Test Output\n$ pytest chapter13_9_pytest_4.py\n============================== test session starts ===============================\nplatform linux -- Python 3.5.2, pytest-3.6.3, py-1.5.4, pluggy-0.6.0\nrootdir: /home/echou/Chapter13, inifile:\ncollected 1 item\n\nchapter13_9_pytest_4.py . [100%]\n\n============================ 1 passed in 0.13 seconds ============================\n```", "```py\n$ pytest --junit-xml=results.xml chapter13_9_pytest_4.py\n$ cat results.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuite errors=\"0\" failures=\"0\" name=\"pytest\" skips=\"0\" tests=\"1\" time=\"0.134\"><testcase classname=\"chapter13_9_pytest_4\" file=\"chapter13_9_pytest_4.py\" line=\"25\" name=\"test_transaction\" time=\"0.0009090900421142578\"></testcase></testsuite>\n```"]