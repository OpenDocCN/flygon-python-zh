["```py\nmessagebox.showinfo(\n    title='This is the title',\n    message=\"This is the message\",\n    detail='This is the detail')\n```", "```py\nimport tkinter as tk\nfrom tkinter import messagebox\n```", "```py\nsee_more = messagebox.askyesno(title='See more?',\n    message='Would you like to see another box?',\n    detail='Click NO to quit')\nif not see_more:\n    exit()\n```", "```py\nmessagebox.showinfo(title='You got it',\n    message=\"Ok, here's another dialog.\",\n    detail='Hope you like it!')\n```", "```py\nfrom tkinter import messagebox\n```", "```py\n        message = \"Cannot save record\"\n        detail = \"The following fields have errors: \\n  * {}\".format(\n            '\\n  * '.join(errors.keys()))\n```", "```py\n        messagebox.showerror(title='Error', message=message, detail=detail)\n```", "```py\nimport tkinter as tk\n\nroot = tk.Tk()\nmain_text = tk.StringVar(value='Hi')\nlabel = tk.Label(root, textvariable=main_text)\nlabel.pack()\n\nroot.mainloop()\n```", "```py\nmain_menu = tk.Menu(root)\nroot.config(menu=main_menu)\n```", "```py\nmain_menu.add('command', label='Quit', command=root.quit)\n```", "```py\ntext_menu = tk.Menu(main_menu, tearoff=False)\n```", "```py\ntext_menu.add_command(label='Set to \"Hi\"',\n              command=lambda: main_text.set('Hi'))\ntext_menu.add_command(label='Set to \"There\"',\n              command=lambda: main_text.set('There'))\n```", "```py\nmain_menu.add_cascade(label=\"Text\", menu=text_menu)\n```", "```py\nfont_bold = tk.BooleanVar()\nfont_size = tk.IntVar()\n\ndef set_font(*args):\n    font_spec = 'TkDefaultFont {size} {bold}'.format(\n        size=font_size.get(),\n        bold='bold' if font_bold.get() else '')\n    label.config(font=font_spec)\n\nfont_bold.trace('w', set_font)\nfont_size.trace('w', set_font)\n```", "```py\n# appearance menu\nappearance_menu = tk.Menu(main_menu, tearoff=False)\nmain_menu.add_cascade(label=\"Appearance\", menu=appearance_menu)\n\n# bold text button\nappearance_menu.add_checkbutton(label=\"Bold\", variable=font_bold)\n```", "```py\nsize_menu = tk.Menu(appearance_menu, tearoff=False)\nappearance_menu.add_cascade(label='Font size', menu=size_menu)\nfor size in range(8, 24, 2):\n    size_menu.add_radiobutton(label=\"{} px\".format(size),\n        value=size, variable=font_size)\n```", "```py\nclass MainMenu(tk.Menu):\n\"\"\"The Application's main menu\"\"\"\n```", "```py\n    def __init__(self, parent, settings, callbacks, **kwargs):\n        super().__init__(parent, **kwargs)\n```", "```py\n        file_menu = tk.Menu(self, tearoff=False)\n        file_menu.add_command(\n            label=\"Select file\u2026\",\n            command=callbacks['file->open'])\n```", "```py\n        file_menu.add_separator()\n        file_menu.add_command(label=\"Quit\",\n                command=callbacks['file->quit'])\n```", "```py\n        self.add_cascade(label='File', menu=file_menu)\n```", "```py\n    options_menu = tk.Menu(self, tearoff=False)\n    options_menu.add_checkbutton(label='Autofill Date',\n        variable=settings['autofill date'])\n    options_menu.add_checkbutton(label='Autofill Sheet data',\n        variable=settings['autofill sheet data'])\n    self.add_cascade(label='Options', menu=options_menu)\n```", "```py\n        help_menu = tk.Menu(self, tearoff=False)\n        help_menu.add_command(label='About\u2026', command=self.show_about)\n        self.add_cascade(label='Help', menu=help_menu)\n```", "```py\n    def show_about(self):\n        \"\"\"Show the about dialog\"\"\"\n```", "```py\n        about_message = 'ABQ Data Entry'\n        about_detail = ('by Alan D Moore\\n'\n            'For assistance please contact the author.')\n```", "```py\n        messagebox.showinfo(title='About', message=about_message,  \n            detail=about_detail)\n```", "```py\n    self.settings = {\n        'autofill date': tk.BooleanVar(),\n        'autofill sheet data': tk.BooleanVar()\n    }\n```", "```py\n    self.callbacks = {\n        'file->select': self.on_file_select,\n        'file->quit': self.quit\n    }\n```", "```py\n    menu = v.MainMenu(self, self.settings, self.callbacks)\n    self.config(menu=menu)\n```", "```py\n    def on_file_select(self):\n    \"\"\"Handle the file->select action from the menu\"\"\"\n\n    filename = filedialog.asksaveasfilename(\n        title='Select the target file for saving records',\n        defaultextension='.csv',\n        filetypes=[('Comma-Separated Values', '*.csv *.CSV')])\n```", "```py\n        self.filename = tk.StringVar()\n```", "```py\n    datestring = datetime.today().strftime(\"%Y-%m-%d\")\n    default_filename = \"abq_data_record_{}.csv\".\n    format(datestring)\n    self.filename = tk.StringVar(value=default_filename)\n```", "```py\n    if filename:\n        self.filename.set(filename)\n```", "```py\n    filename = self.filename.get()\n```", "```py\n    def __init__(self, parent, fields, settings, *args, **kwargs):\n        super().__init__(parent, *args, **kwargs)\n        self.settings = settings\n```", "```py\n        current_date = datetime.today().strftime('%Y-%m-%d')\n        self.inputs['Date'].set(current_date)\n        self.inputs['Time'].input.focus()\n```", "```py\n if self.settings['autofill date'].get():\n        current_date = datetime.today().strftime('%Y-%m-%d')\n        self.inputs['Date'].set(current_date)\n        self.inputs['Time'].input.focus()\n```", "```py\n    if plot not in ('', plot_values[-1]):\n        self.inputs['Lab'].set(lab)\n        self.inputs['Time'].set(time)\n       ...\n```", "```py\n    if (self.settings['autofill sheet data'].get() and\n        plot not in ('', plot_values[-1])):\n        ...\n```", "```py\n        self.recordform = v.DataRecordForm(self, \n            m.CSVModel.fields, self.settings)\n```", "```py\nclass SettingsModel:\n    \"\"\"A model for saving settings\"\"\"\n```", "```py\n    variables = {\n        'autofill date': {'type': 'bool', 'value': True},\n        'autofill sheet data': {'type': 'bool', 'value': True}\n     }\n```", "```py\n    def __init__(self, filename='abq_settings.json', path='~'):\n        # determine the file path\n        self.filepath = os.path.join(\n            os.path.expanduser(path), filename)\n```", "```py\n        self.load()\n```", "```py\n    def load(self):\n        \"\"\"Load the settings from the file\"\"\"\n\n        with open(self.filepath, 'r') as fh:\n            self.variables = json.loads(fh.read())\n```", "```py\n        # if the file doesn't exist, return\n        if not os.path.exists(self.filepath):\n            return\n```", "```py\n        # open the file and read in the raw values\n        with open(self.filepath, 'r') as fh:\n            raw_values = json.loads(fh.read())\n\n        # don't implicitly trust the raw values, \n        # but only get known keys\n        for key in self.variables:\n            if key in raw_values and 'value' in raw_values[key]:\n                raw_value = raw_values[key]['value']\n                self.variables[key]['value'] = raw_value\n```", "```py\n    def save(self, settings=None):\n        json_string = json.dumps(self.variables)\n        with open(self.filepath, 'w') as fh:\n            fh.write(json_string)\n```", "```py\n    def set(self, key, value):\n        self.variables[key]['value'] = value\n```", "```py\n    if (\n        key in self.variables and\n        type(value).__name__ == self.variables[key]['type']\n    ):\n        self.variables[key]['value'] = value\n```", "```py\n    else:\n        raise ValueError(\"Bad key or wrong variable type\")\n```", "```py\n        self.settings_model = m.SettingsModel()\n        self.load_settings()\n```", "```py\n    def load_settings(self):\n        \"\"\"Load settings into our self.settings dict.\"\"\"\n```", "```py\n      vartypes = {\n          'bool': tk.BooleanVar,\n          'str': tk.StringVar,\n          'int': tk.IntVar,\n         'float': tk.DoubleVar\n      }\n```", "```py\n        self.settings = {}\n        for key, data in self.settings_model.variables.items():\n            vartype = vartypes.get(data['type'], tk.StringVar)\n            self.settings[key] = vartype(value=data['value'])\n```", "```py\n        for var in self.settings.values():\n            var.trace('w', self.save_settings)\n```", "```py\n    def save_settings(self, *args):\n        \"\"\"Save the current settings to a preferences file\"\"\"\n```", "```py\n        for key, variable in self.settings.items():\n            self.settings_model.set(key, variable.get())\n        self.settings_model.save()\n```"]