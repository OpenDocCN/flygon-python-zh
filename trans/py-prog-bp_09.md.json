["```py\nmkdir notifier && cd notifier\n```", "```py\npipenv --python ~/Installs/Python3.6/bin/python3.6\n```", "```py\npipenv --three\n```", "```py\npipenv install flask\n```", "```py\npipenv install requests\n```", "```py\npip install awscli --upgrade --user\n```", "```py\naws --version\n```", "```py\naws-cli/1.14.30 Python/3.6.2 Linux/4.9.0-3-amd64 botocore/1.8.34\n```", "```py\naws configure\n```", "```py\naws s3api create-bucket \\\n--bucket python-blueprints \\\n--region eu-west-2 \\\n--create-bucket-configuration LocationConstraint=eu-west-2\n```", "```py\nimport smtplib\nfrom http import HTTPStatus\nfrom smtplib import SMTPAuthenticationError, SMTPRecipientsRefused\n\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\nimport boto3\nfrom botocore.exceptions import ClientError\n\nfrom flask import Flask\nfrom flask import request, Response\n\nfrom jinja2 import Template\nimport json\n```", "```py\nS3_BUCKET_NAME = 'python-blueprints'\n```", "```py\napp = Flask(__name__)\n```", "```py\nclass S3Error(Exception):\n    pass\n```", "```py\ndef _send_message(message):\n\n    smtp = smtplib.SMTP_SSL('email-smtp.eu-west-1.amazonaws.com', \n     465)\n\n    try:\n        smtp.login(\n            user='DJ********DER*****RGTQ',\n            password='Ajf0u*****44N6**ciTY4*****CeQ*****4V')\n    except SMTPAuthenticationError:\n        return Response('Authentication failed',\n                        status=HTTPStatus.UNAUTHORIZED)\n\n    try:\n        smtp.sendmail(message['From'], message['To'], \n         message.as_string())\n    except SMTPRecipientsRefused as e:\n        return Response(f'Recipient refused {e}',\n                        status=HTTPStatus.INTERNAL_SERVER_ERROR)\n    finally:\n        smtp.quit()\n\n    return Response('Email sent', status=HTTPStatus.OK)\n```", "```py\ndef _prepare_template(template_name, context_data):\n\n    s3_client = boto3.client('s3')\n\n    try:\n        file = s3_client.get_object(Bucket=S3_BUCKET_NAME, \n        Key=template_name)\n    except ClientError as ex:\n        error = ex.response.get('Error')\n        error_code = error.get('Code')\n\n        if error_code == 'NoSuchBucket':\n            raise S3Error(\n             f'The bucket {S3_BUCKET_NAME} does not exist') from ex\n        elif error_code == 'NoSuchKey':\n            raise S3Error((f'Could not find the file \"\n               {template_name}\" '\n               f'in the S3 bucket {S3_BUCKET_NAME}')) from ex\n        else:\n            raise ex\n\n    content = file['Body'].read().decode('utf-8')\n    template = Template(content)\n\n    return template.render(context_data)\n```", "```py\n@app.route(\"/notify/order-received/\", methods=['POST'])\ndef notify_order_received():\n    data = json.loads(request.data)\n\n    order_items = data.get('items')\n\n    customer = data.get('order_customer')\n    customer_email = customer.get('email')\n    customer_name = customer.get('name')\n\n    order_id = data.get('id')\n    total_purchased = data.get('total')\n\n    message = MIMEMultipart('alternative')\n\n    context = {\n        'order_items': order_items,\n        'customer_name': customer_name,\n        'order_id': order_id,\n        'total_purchased': total_purchased\n    }\n\n    try:\n        email_content = _prepare_template(\n            'order_received_template.html',\n            context\n        )\n    except S3Error as ex:\n        return Response(str(ex), \n status=HTTPStatus.INTERNAL_SERVER_ERROR)\n\n    message.attach(MIMEText(email_content, 'html'))\n\n    message['Subject'] = f'ORDER: #{order_id} - Thanks for your \n    order!'\n  message['From'] = 'donotreply@dfurtado.com'\n  message['To'] = customer_email\n\n    return _send_message(message)\n```", "```py\n@app.route(\"/notify/order-shipped/\", methods=['POST'])\ndef notify_order_shipped():\n    data = json.loads(request.data)\n\n    customer = data.get('order_customer')\n\n    customer_email = customer.get('email')\n    customer_name = customer.get('name')\n\n    order_id = data.get('id')\n\n    message = MIMEMultipart('alternative')\n\n    try:\n        email_content = _prepare_template(\n            'order_shipped_template.html',\n            {'customer_name': customer_name}\n        )\n    except S3Error as ex:\n        return Response(ex, status=HTTPStatus.INTERNAL_SERVER_ERROR)\n\n    message.attach(MIMEText(email_content, 'html'))\n\n    message['Subject'] = f'Order ID #{order_id} has been shipped'\n  message['From'] = 'donotreply@dfurtado.com'\n  message['To'] = customer_email\n\n    return _send_message(message)\n```", "```py\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hi, {{customer_name}}!</h1>\n    <h3>Thank you so much for your order</h3>\n    <p>\n      <h3>Order id: {{order_id}}</h3>\n    </p>\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th align=\"left\" width=\"40%\">Item</th>\n          <th align=\"left\" width=\"20%\">Quantity</th>\n          <th align=\"left\" width=\"20%\">Price per unit</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for item in order_items %}\n        <tr>\n          <td>{{item.name}}</td>\n          <td>{{item.quantity}}</td>\n          <td>${{item.price_per_unit}}</td>\n        </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n    <div style=\"margin-top:20px;\">\n      <strong>Total: ${{total_purchased}}</strong>\n    </div>\n  </body>\n</html>\n```", "```py\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hi, {{customer_name}}!</h1>\n    <h3>We just want to let you know that your order is on its way! \n    </h3>\n  </body>\n</html>\n```", "```py\naws s3 cp ./templates s3://python-blueprints --recursive\n```", "```py\npipenv install zappa\n```", "```py\nzappa init\n```", "```py\nYour Zappa configuration can support multiple production stages, like 'dev', 'staging', and 'production'.\nWhat do you want to call this environment (default 'dev'):\n```", "```py\nYour Zappa deployments will need to be uploaded to a private S3 bucket.\nIf you don't have a bucket yet, we'll create one for you too.\nWhat do you want call your bucket? (default 'zappa-uc40h2hnc'):\n```", "```py\nIt looks like this is a Flask application.\nWhat's the modular path to your app's function?\nThis will likely be something like 'your_module.app'.\nWe discovered: notify-service.app\nWhere is your app's function? (default 'notify-service.app'):\n```", "```py\n{\n    \"dev\": {\n        \"app_function\": \"notify-service.app\",\n        \"aws_region\": \"eu-west-2\",\n        \"project_name\": \"notifier\",\n        \"runtime\": \"python3.6\",\n        \"s3_bucket\": \"zappa-43ivixfl0\"\n    }\n}\n```", "```py\nzappa deploy dev\n```", "```py\nhttps://rpa5v43ey1.execute-api.eu-west-2.amazonaws.com/dev\n```", "```py\nhttps://rpa5v43ey1.execute-api.eu-west-2.amazonaws.com/dev/notify/order-received\n```", "```py\nhttps://rpa5v43ey1.execute-api.eu-west-2.amazonaws.com/dev/notify/order-shipped\n```", "```py\nNOTIFIER_BASEURL = 'https://rpa5v43ey1.execute-api.eu-west-2.amazonaws.com/dev'\n\nNOTIFIER_API_KEY = 'WQk********P7JR2******kI1K*****r'\n```", "```py\nzappa status\n```", "```py\nfrom enum import Enum, auto\n\nclass NotificationType(Enum):\n    ORDER_RECEIVED = auto()\n    ORDER_SHIPPED = auto()\n```", "```py\nimport requests\nimport json\n\nfrom order import settings\n\nfrom .notification_type import NotificationType\n\ndef notify(order, notification_type):\n    endpoint = ('notify/order-received/'\n                if notification_type is NotificationType.ORDER_RECEIVED\n                else 'notify/order-shipped/')\n\n    header = {\n        'X-API-Key': settings.NOTIFIER_API_KEY\n    }\n\n    response = requests.post(\n        f'{settings.NOTIFIER_BASEURL}/{endpoint}',\n        json.dumps(order.data),\n        headers=header\n    )\n\n    return response\n```", "```py\nfrom .notifier import notify\nfrom .notification_type import NotificationType\n```", "```py\n notify(OrderSerializer(order),\n        NotificationType.ORDER_RECEIVED)\n```", "```py\nfrom .notifier import notify\nfrom .notification_type import NotificationType\nfrom .serializers import OrderSerializer\nfrom .status import Status\n```", "```py\nclass OrderAdmin(admin.ModelAdmin):\n\n    def save_model(self, request, obj, form, change):\n        order_current_status = Status(obj.status)\n        status_changed = 'status' in form.changed_data\n\n        if (status_changed and order_current_status is \n           Status.Shipping):\n            notify(OrderSerializer(obj), \n            NotificationType.ORDER_SHIPPED)\n\n        super(OrderAdmin, self).save_model(request, obj, form,  \n        change)\n```", "```py\nadmin.site.register(Order)\n```", "```py\nadmin.site.register(Order, OrderAdmin)\n```", "```py\npython manage.py runserver\n```", "```py\npython manage.py runserver 127.0.0.1:8001\n```"]