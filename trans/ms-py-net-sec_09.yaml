- en: Connecting with the Metasploit Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Metasploit框架连接
- en: This chapter covers the Metasploit framework as a tool to exploit vulnerabilities,
    and how to use it programmatically from Python with the `Python-msfprc` and `pyMetasploit`
    modules. These modules help us to interact between Python and Metasploit's msgrpc
    to automate the execution of the modules and exploits that can be found in the
    Metasploit framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了Metasploit框架作为利用漏洞的工具，以及如何使用Python中的`Python-msfprc`和`pyMetasploit`模块进行编程。这些模块帮助我们在Python和Metasploit的msgrpc之间进行交互，以自动执行Metasploit框架中的模块和利用。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The Metasploit framework as a tool to exploit vulnerabilities
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metasploit框架作为利用漏洞的工具
- en: '`msfconsole` as the commands console interface to interact with the Metasploit
    Framework'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msfconsole`作为与Metasploit Framework交互的命令控制台界面'
- en: Connecting Metasploit to the `python-msfrpc` module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Metasploit连接到`python-msfrpc`模块
- en: Connecting Metasploit to the `pyMetasploit` module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Metasploit连接到`pyMetasploit`模块
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter9` folder: [https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)[.](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例和源代码可在GitHub存储库的`chapter9`文件夹中找到：[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)[.](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)
- en: You will need to install Python distribution on your local machine with at least
    4 GB memory. In this chapter, we will use a virtual machine with which some tests
    related to port analysis and vulnerability-detection will be carried out. It can
    be downloaded from the sourceforge page: [https://sourceforge.net/projects/Metasploitable/files/Metasploitable2](https://sourceforge.net/projects/metasploitable/files/Metasploitable2).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在本地机器上安装至少4GB内存的Python发行版。在本章中，我们将使用一个虚拟机进行一些与端口分析和漏洞检测相关的测试。可以从sourceforge页面下载：[https://sourceforge.net/projects/Metasploitable/files/Metasploitable2](https://sourceforge.net/projects/metasploitable/files/Metasploitable2)。
- en: 'To log in, you must use msfadmin as both the username and the password:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录，您必须使用msfadmin作为用户名和密码：
- en: '![](assets/fd4a5855-2f1e-4aee-b971-2e4dfdcc22e0.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fd4a5855-2f1e-4aee-b971-2e4dfdcc22e0.png)'
- en: Metasploitable is a virtual machine created by the Metasploit group, which consists
    of an image of an Ubuntu 8.04 system in which there are, deliberately, services
    with insecure configurations and vulnerabilities, that can be exploited using
    Metasploit Framework. This virutal machine was created with the aim of practice
    with several of the options offered by Metasploit, being of great help to execute
    tests in a controlled environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploitable是由Metasploit组创建的虚拟机，其中包含Ubuntu 8.04系统的镜像，故意配置不安全和存在漏洞的服务，可以使用Metasploit
    Framework进行利用。这个虚拟机旨在练习Metasploit提供的多种选项，对于在受控环境中执行测试非常有帮助。
- en: Introducing the Metasploit framework
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Metasploit框架
- en: In this section, we review Metasploit as one of today's most-used tools, which
    allows to make attacks and to exploit vulnerabilities of servers with the objective
    of carrying out pentesting tests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾Metasploit作为当今最常用的工具之一，它允许对服务器进行攻击和利用漏洞，以进行渗透测试。
- en: Introduction to exploiting
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍利用
- en: 'The exploitation phase is the process of gaining control over a system. This
    process can take many different forms, but the ultimate goal is always the same:
    to obtain administrative-level access to the attacked computer.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 利用阶段是获得对系统控制的过程。这个过程可以采取许多不同的形式，但最终目标始终是相同的：获得对袭击计算机的管理员级访问权限。
- en: Exploitation is the phase of the most free execution, since each system is different
    and unique. Depending on the scenario, attack vectors vary from one target to
    another, since different operating systems, different services, and different
    processes require different types of attacks. Skilled attackers must understand
    the nuances of each system they intend to exploit and, eventually, they will be
    able to perform their own exploits.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 利用是最自由执行的阶段，因为每个系统都是不同和独特的。根据情况，攻击向量因目标不同而异，因为不同的操作系统、不同的服务和不同的进程需要不同类型的攻击。熟练的攻击者必须了解他们打算利用的每个系统的细微差别，最终他们将能够执行自己的利用。
- en: Metasploit framework
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit框架
- en: Metasploit is a framework for performing real attacks and exploiting vulnerabilities.
    Basically, we need to start the server and connect to the Metasploit console.
    For each command we need to execute, we create a console session to execute the
    exploit.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit是执行真实攻击和利用漏洞的框架。基本上，我们需要启动服务器并连接到Metasploit控制台。对于每个需要执行的命令，我们需要创建一个控制台会话来执行利用。
- en: The Metasploit framework allows external applications to use the modules and
    exploits integrated in the tool itself. To do this, it offers a plugin service
    that we can build on the machine where we are executing Metasploit, and through
    an API we can execute the different modules that offers.To do this, it is necessary
    to know the Metasploit Framework API (Metasploit Remote API), which is available
    at [https://community.rapid7.com/docs/DOC-1516](https://community.rapid7.com/docs/DOC-1516).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架允许外部应用程序使用工具本身集成的模块和利用。为此，它提供了一个插件服务，我们可以在执行Metasploit的机器上构建，并通过API执行不同的模块。为此，有必要了解Metasploit
    Framework API（Metasploit远程API），可在[https://community.rapid7.com/docs/DOC-1516](https://community.rapid7.com/docs/DOC-1516)上找到。
- en: Metasploit architecture
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit架构
- en: The main components of the Metasploit architecture are libraries that consist
    of Rex, framework-core, and framework-base. The other components of the architecture
    are interfaces, custom plugins, protocol tools, modules, and security tools. Modules
    included are exploits, payloads, encoders, NOPS, and auxiliary.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit架构的主要组件是由Rex、framework-core和framework-base组成的库。架构的其他组件是接口、自定义插件、协议工具、模块和安全工具。包括的模块有利用、有效载荷、编码器、NOPS和辅助。
- en: 'In this diagram, we can see the main modules and Metasploit architecture:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，我们可以看到主要的模块和Metasploit架构：
- en: '![](assets/6bb099b4-0910-4d68-b08b-c9b60fdc3711.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6bb099b4-0910-4d68-b08b-c9b60fdc3711.png)'
- en: 'The main modules of the Metasploit architecture are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit架构的主要模块是：
- en: '**Rex**: The basic library for most tasks that the framework will execute.
    It is responsible for handling things such as connections to websites (for example,
    when we search for sensitive files in a site), Sockets (which are responsible
    for making a connection from our machine to an SSH server, for example), and a
    lot of similar utilities related to SSL and Base64.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Rex: 大多数框架执行的任务的基本库。它负责处理诸如连接到网站（例如，当我们在网站中搜索敏感文件时）、套接字（负责从我们的计算机到SSH服务器的连接，例如）和许多与SSL和Base64相关的类似实用程序的事情。'
- en: '**MSF :: Core:** It defines the functioning of the framework in general (how
    the modules, exploits, and payloads will work)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MSF :: Core: 它总体上定义了框架的功能（模块、利用和有效载荷的工作方式）'
- en: '**MSF :: Base:** Works in a similar way to MSF :: Core,the main difference
    is that its more friendly and simplified for the developer.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MSF :: Base: 与MSF :: Core类似工作，主要区别在于它对开发人员更友好和简化。'
- en: '**Plugins**: Tools that extend the functionality of the framework, for example,
    they allow us to integrate with third-party tools such as Sqlmap, OpenVas, and
    Nexpose.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '插件: 扩展框架功能的工具，例如，它们允许我们集成第三方工具，如Sqlmap、OpenVas和Nexpose。'
- en: '**Tools:** Several tools that are usually useful (for example, "list_interfaces"
    shows us the information of network interfaces, and "virustotal" checks whether
    any file is infected through the virustotal.com database).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '工具: 通常有用的几个工具（例如，“list_interfaces”显示我们的网络接口的信息，“virustotal”通过virustotal.com数据库检查任何文件是否感染）。'
- en: '**Interfaces:** All interfaces where we can use Metasploit. A console version,
    a web version, a **GUI** version (**Graphical User Interface**), and CLI, a version
    of metasploit console.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '接口: 我们可以使用Metasploit的所有接口。控制台版本、Web版本、GUI版本（图形用户界面）和CLI，Metasploit控制台的一个版本。'
- en: '**Modules**: A folder that contains all the exploits, payloads, encoders, auxiliaries,
    nops, and post.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '模块: 包含所有利用、有效载荷、编码器、辅助、nops和post的文件夹。'
- en: '**Exploits:** A program that exploits one or several vulnerabilities in a particular
    software; it is often used to gain access to a system and have a level of control
    over it.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '利用: 利用特定软件中的一个或多个漏洞的程序；通常用于获取对系统的访问权限并对其进行控制。'
- en: '**Payloads:** A program (or "malicious" code) that accompanies an exploit to
    perform specific functions once the exploit has been successful. The choice of
    a good payload is a very important decision when it comes to taking advantage
    of and maintaining the level of access obtained in a system. In many systems,
    there are firewalls, Antivirus, and intrusion-detection systems that can hinder
    the activity of some payloads. For this reason, encoders are often used to try
    to evade any AV or Firewall.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '有效载荷: 一种程序（或“恶意”代码），它伴随利用一起在利用成功后执行特定功能。选择一个好的有效载荷是一个非常重要的决定，当涉及到利用和维持在系统中获得的访问级别时。在许多系统中，有防火墙、防病毒软件和入侵检测系统，可能会阻碍一些有效载荷的活动。因此，通常使用编码器来尝试规避任何防病毒软件或防火墙。'
- en: '**Encoders:** Provides algorithms to encode and obfuscate the payloads that
    we will use after the exploit has been successful.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '编码器: 提供编码和混淆我们在利用成功后将使用的有效载荷的算法。'
- en: '**Aux:** Allows interaction with tools such as vulnerability scanners and sniffers.
    In order to obtain the necessary information about the objective to determine
    possible vulnerabilities that may affect it, this type of tool is useful for establishing
    an attack strategy on an objective system, or in the case of a security officer,
    define defensive measures that allow us to mitigate threats on a vulnerable system.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Aux: 允许与漏洞扫描器和嗅探器等工具进行交互。为了获取关于目标的必要信息，以确定可能影响它的漏洞，这种类型的工具对于在目标系统上建立攻击策略或在安全官员的情况下定义防御措施以减轻对易受攻击系统的威胁是有用的。'
- en: '**Nops:** An assembly-language instruction that does not do anything apart
    from increasing the counter of a program.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Nops: 一条汇编语言指令，除了增加程序的计数器外，不做任何事情。'
- en: 'In addition to the work modules described here, Metasploit Framework has four
    different user interfaces: msfconsole (Metasploit Framework console), msfcli (Metasploit
    Framework client), msfgui (Metasploit Framework graphic interface), and msfweb
    (server and web interface Metasploit Framework).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这里描述的工作模块，Metasploit框架还有四种不同的用户界面：msfconsole（Metasploit框架控制台）、msfcli（Metasploit框架客户端）、msfgui（Metasploit框架图形界面）和msfweb（Metasploit框架的服务器和Web界面）。
- en: The next section focuses on the **Metasploit Framework console interface**,
    although the use of any of the other interfaces can provide the same results.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将重点放在**Metasploit框架控制台界面**上，尽管使用任何其他界面都可以提供相同的结果。
- en: Interacting with the Metasploit framework
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Metasploit框架交互
- en: In this section, we will review `msfconsole` for interacting with the Metasploit
    framework, showing the main commands for obtaining exploits and payload modules.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将介绍与Metasploit框架交互的`msfconsole`，展示获取利用和有效载荷模块的主要命令。
- en: Introduction to msfconsole
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: msfconsole简介
- en: '`Msfconsole` is the tool we can use to interact with modules and execute exploits.
    This tool is installed by default in the Kali linux distribution:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Msfconsole`是我们可以用来与模块交互和执行利用的工具。这个工具默认安装在Kali linux发行版中：'
- en: '![](assets/75680b5c-eee1-4119-a6fa-8b33019f2fe8.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75680b5c-eee1-4119-a6fa-8b33019f2fe8.png)'
- en: Introduction to the Metasploit exploit module
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Metasploit利用模块
- en: The exploits, as explained before in the section "*Introducing the Metasploit
    framework*", are codes that allow an attacker to take advantage of a vulnerable
    system and compromise its security, this can be a vulnerability in the operating
    system or some software installed in it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面在“介绍Metasploit框架”部分中所解释的，利用是允许攻击者利用易受攻击的系统并破坏其安全性的代码，这可能是操作系统或其中安装的一些软件中的漏洞。
- en: The Metasploit `exploit` module is the basic module in Metasploit used to encapsulate
    an exploit for which users can target many platforms with a single exploit. This
    module comes with simplified meta-information fields.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit的`exploit`模块是Metasploit中的基本模块，用于封装一个利用，用户可以使用单个利用来针对许多平台。该模块带有简化的元信息字段。
- en: In the Metasploit Framework, there is a large number of exploits that already
    come by default and that can be used to carry out the penetration test.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit框架中，有大量的利用默认情况下已经存在，可以用于进行渗透测试。
- en: 'To see Metasploit''s exploits, you can use the `show exploits` command once
    you are working on that tool:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看Metasploit的利用，可以在使用该工具时使用`show exploits`命令：
- en: '![](assets/d1c475e6-f4b2-4c5e-8981-c9f99820ac7d.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d1c475e6-f4b2-4c5e-8981-c9f99820ac7d.png)'
- en: 'The five steps to exploit a system in the Metasploit framework are:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit框架中利用系统的五个步骤是：
- en: Configure an active exploit
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置活动利用
- en: Verify the exploit options
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证利用选项
- en: Select a target
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择目标
- en: Select the payload
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择负载
- en: Launch the exploit
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动利用
- en: Introduction to the Metasploit payload module
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Metasploit负载模块
- en: '`Payloads` are codes that run in the system after it has been compromised and
    are used mostly to establish a connection between the attacker''s machine and
    the victim''s machine. Payloads are mainly used to execute commands that give
    access to the remote machine.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`负载`是在系统中被攻破后运行的代码，主要用于在攻击者的机器和受害者的机器之间建立连接。负载主要用于执行命令，以便访问远程机器。'
- en: In the Metasploit Framework, there is a set of payloads that can be used and
    loaded in an exploit or `auxiliary` module.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit框架中，有一组可以在利用或`辅助`模块中使用和加载的负载。
- en: 'To see what''s available, use the `show payloads` command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用内容，请使用`show payloads`命令：
- en: '![](assets/3c5c2a69-00f7-4121-a894-835e30f8e332.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3c5c2a69-00f7-4121-a894-835e30f8e332.png)'
- en: Among those available in the Metasploit environment are **generic/shell_bind_tcp**
    and **generic/shell_reverse_tcp**, both of which establish a connection with the
    victim's machine by providing the attacker with a shell, which provides a user
    interface to access the operating system resources in the form of a console. The
    only difference between them is that in the first case the connection is made
    from the machine of the attacker to the machine of the victim, while in the second,
    the connection is established from the machine of the victim, which requires that
    the attacker's machine have a program that is listening to detect that connection.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit环境中可用的有**generic/shell_bind_tcp**和**generic/shell_reverse_tcp**，两者都通过提供一个shell与受害者的机器建立连接，从而为攻击者提供用户界面以访问操作系统资源。它们之间的唯一区别是，在第一种情况下，连接是从攻击者的机器到受害者的机器，而在第二种情况下，连接是从受害者的机器建立的，这要求攻击者的机器有一个监听以检测该连接的程序。
- en: '**Reverse shells** are most useful whenwe detect there is a firewall or IDS
    in the target machine''s that is blocking incoming connections. For more information
    about when to use a reverse shell, check out [https://github.com/rapid7/Metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit](https://github.com/rapid7/metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**反向shell**在检测到目标机器的防火墙或IDS阻止传入连接时最有用。有关何时使用反向shell的更多信息，请查看[https://github.com/rapid7/Metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit](https://github.com/rapid7/metasploit-framework/wiki/How-to-use-a-reverse-shell-in-Metasploit)。'
- en: In addition, we can find other payloads, such as **meterpreter/bind_tcp** and
    **meterpreter/reverse_tcp**, which provide a meterpreter session; both differ
    in the same way as the payloads referred to the shell, that is, they are distinguished
    by the way in which the connection is established.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以找到其他负载，如**meterpreter/bind_tcp**和**meterpreter/reverse_tcp**，它们提供一个meterpreter会话；它们与shell相关的负载的区别相同，即它们的连接建立方式不同。
- en: Introduction to msgrpc
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍msgrpc
- en: 'The first step is to use the `msgrpc` plugin to start an instance of the server.
    To do this, you can load the module from `msfconsole` or directly using the `msfrpcd`
    command. First, you’ll need to load `msfconsole` and start the `msgrpc` service:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用`msgrpc`插件启动服务器的实例。为此，您可以从`msfconsole`加载模块，或直接使用`msfrpcd`命令。首先，您需要加载`msfconsole`并启动`msgrpc`服务：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this way, we load the process in order to attend to requests from another
    machine:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们加载进程以响应来自另一台机器的请求：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With this command, we can execute the process that connects with msfconsole
    establishing as parameters `username` (`-U`), `password` (`-P`) and `port` (`-p`)
    where is listening to the service:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个命令，我们可以执行连接到msfconsole的进程，参数是`username`（`-U`），`password`（`-P`）和`port`（`-p`）监听服务的端口：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this way, Metasploit's RPC interface is listening on port 55553\. We can
    proceed to interact from the Python script with modules such as `python-msfrpc`
    and `pyMetasploit`. Interacting with MSGRPC is almost similar to interacting with
    msfconsole.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，Metasploit的RPC接口正在端口55553上监听。我们可以从Python脚本与诸如`python-msfrpc`和`pyMetasploit`之类的模块进行交互。与MSGRPC的交互几乎与与msfconsole的交互相似。
- en: The server was designed with the intention of running as a daemon, which allows
    several users to authenticate and execute specific Metasploit framework commands.
    In the preceding example, we are starting our `msfrpcd` server with `msf` as the
    name and password as the password, on port 55553.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务器旨在作为守护程序运行，允许多个用户进行身份验证并执行特定的Metasploit框架命令。在上面的示例中，我们使用`msf`作为名称和密码作为密码，在端口55553上启动我们的`msfrpcd`服务器。
- en: Connecting the Metasploit framework and Python
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接Metasploit框架和Python
- en: In this section, we review Metasploit and how we can integrate this framework
    with Python. The programming language used to develop modules in Metasploit is
    Ruby, but with Python it is also possible to take advantage of the benefits that
    this framework has thanks to the use of libraries such as `python-msfrpc`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍Metasploit以及如何将该框架与Python集成。Metasploit用于开发模块的编程语言是Ruby，但是使用Python也可以利用此框架的好处，这要归功于诸如`python-msfrpc`之类的库。
- en: Introduction to MessagePack
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MessagePack简介
- en: Before beginning to explain the operation of this module, it is convenient to
    understand the MessagePack format, which is used by the MSGRPC interface for the
    exchange of information between the client and server.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始解释此模块的操作之前，了解MSGRPC接口使用的MessagePack格式是很方便的。
- en: MessagePack is a specialized format for the serialization of information, which
    allows messages to be more compact in order to transmit information quickly between
    different machines. It works similarly to JSON; however, since the data is serialized
    using the MessagePack format, the number of bytes in the message is drastically
    reduced.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: MessagePack是一种专门用于序列化信息的格式，它允许消息更紧凑，以便在不同机器之间快速传输信息。它的工作方式类似于JSON；但是，由于数据是使用MessagePack格式进行序列化，因此消息中的字节数大大减少。
- en: To install the `msgpack` library in python, just download the package from the
    MessagePack website and run the `setup.py` script with the install argument. We
    can also perform the installation with the `pip install msgpack-python` command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中安装`msgpack`库，只需从MessagePack网站下载软件包，并使用安装参数运行`setup.py`脚本。我们还可以使用`pip
    install msgpack-python`命令进行安装。
- en: For more information about this format, you can query the official website: [http://msgpack.org](http://msgpack.org)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此格式的更多信息，请查询官方网站：[http://msgpack.org](http://msgpack.org)
- en: 'In this screenshot, we can see the API and languages that supports this tool:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕截图中，我们可以看到支持此工具的API和语言：
- en: '![](assets/2f56099e-531a-4621-8398-a2f110cb2dc6.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2f56099e-531a-4621-8398-a2f110cb2dc6.png)'
- en: The Metasploit framework allows external applications to employ the modules
    and exploits through the use of the MSGRPC plugin. This plugin raises an instance
    of an RPC server on the local machine and in this way, it is possible to take
    advantage of all the features offered by the Metasploit framework from external
    routines at any point in the network. The operation of this server is based on
    the serialization of messages using the MessagePack format, with which it is necessary
    to use the python implementation of this format, which is achieved using the `msgpack`
    library.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploit框架允许外部应用程序通过使用MSGRPC插件来使用模块和利用。此插件在本地机器上引发RPC服务器的一个实例，因此可以从网络中的任何点利用Metasploit框架提供的所有功能。该服务器的操作基于使用MessagePack格式对消息进行序列化，因此需要使用此格式的Python实现，这可以通过使用`msgpack`库来实现。
- en: On the other hand, the `python-msfrpc` library is responsible for encapsulating
    all the details related to the exchange of packages with the MSGRPC server and
    a client that uses msgpack. In this way, it is possible to perform an interaction
    between any python script and the msgrpc interface.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`python-msfrpc`库负责封装与MSGRPC服务器和使用msgpack的客户端交换包的所有细节。通过这种方式，可以在任何Python脚本和msgrpc接口之间进行交互。
- en: Installing python-msfrpc
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装python-msfrpc
- en: You can install the `python-msfrpc` library from the [github.com/SpiderLabs/msfrpc](http://github.com/SpiderLabs/msfrpc)
    repository and execute the `setup.py` script with the install option: [https://github.com/SpiderLabs/msfrpc/tree/master/python-msfrpc](https://github.com/SpiderLabs/msfrpc/tree/master/python-msfrpc).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[github.com/SpiderLabs/msfrpc](http://github.com/SpiderLabs/msfrpc)存储库安装`python-msfrpc`库，并使用安装选项执行`setup.py`脚本：[https://github.com/SpiderLabs/msfrpc/tree/master/python-msfrpc](https://github.com/SpiderLabs/msfrpc/tree/master/python-msfrpc)。
- en: This module is designed to allow interaction with Metasploit msgrpc plugin to
    allow the execution of Metasploit commands and scripts remotely.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块旨在允许与Metasploit msgrpc插件进行交互，以允许远程执行Metasploit命令和脚本。
- en: To verify that both libraries have been installed correctly, use the python
    interpreter to import the main modules of each and verify that there is no error.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证这两个库是否已正确安装，请使用Python解释器导入每个主要模块，并验证是否没有错误。
- en: 'You can verify the installation executing these commands in the python interpreter:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Python解释器中执行以下命令来验证安装：
- en: '![](assets/478bdb6a-75e0-46a8-853e-f1df4ec12f62.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/478bdb6a-75e0-46a8-853e-f1df4ec12f62.png)'
- en: 'An alternative to installing msfrpc is to get the latest version of the `msfrpc
    Python` module from the SpiderLabs GitHub repository and use the `setup.py` script:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 安装msfrpc的另一种选择是从SpiderLabs GitHub存储库获取`msfrpc Python`模块的最新版本，并使用`setup.py`脚本：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that the service is running and waiting for a connection from a client,
    from a python script we can connect directly using the `msfrpc` library. Our next
    step is to write our code to **connect to Metasploit**, and authenticate with
    the system:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务正在运行并等待来自客户端的连接，从Python脚本中，我们可以直接使用`msfrpc`库进行连接。我们的下一步是编写我们的代码来**连接到Metasploit**，并与系统进行身份验证：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To interact with the Metasploit server, it is necessary to know the API that
    allows to control remotely an instance of the Metasploit framework, also known
    as the Metasploit remote API. This specification contains the functions necessary
    to interact with the MSGRPC server from any client and describes the functionalities
    that users of the community version of the framework can implement.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要与Metasploit服务器进行交互，需要了解允许远程控制Metasploit框架实例的API，也称为Metasploit远程API。该规范包含与MSGRPC服务器进行交互所需的功能，并描述了社区版本框架的用户可以实现的功能。
- en: The official guide is available at [https://Metasploit.help.rapid7.com/docs/rpc-api](https://metasploit.help.rapid7.com/docs/rpc-api) and [https://Metasploit.help.rapid7.com/docs/sample-usage-of-the-rpc-api](https://metasploit.help.rapid7.com/docs/sample-usage-of-the-rpc-api).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 官方指南可在[https://Metasploit.help.rapid7.com/docs/rpc-api](https://metasploit.help.rapid7.com/docs/rpc-api)和[https://Metasploit.help.rapid7.com/docs/sample-usage-of-the-rpc-api](https://metasploit.help.rapid7.com/docs/sample-usage-of-the-rpc-api)找到。
- en: The following script shows a practical example of how you can interact with
    the server once we it has been authenticated. In the host parameter, you can use
    localhost, or `127.0.0.1` if the Metasploit instance is running in your local
    machine, or you can specify a remote address. As can be seen, the use of the `call`
    function allows us to indicate the function to be executed and its corresponding
    parameters.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本显示了一种实际示例，说明了在经过身份验证后如何与服务器进行交互。在主机参数中，您可以使用localhost，如果Metasploit实例在本地机器上运行，则可以使用`127.0.0.1`，或者您可以指定远程地址。如您所见，使用`call`函数允许我们指示要执行的函数及其相应的参数。
- en: 'You can find the following code in the `msfrpc_connect.py` file in the msfrpc
    folder:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`msfrpc_connect.py`文件中的`msfrpc`文件夹中找到以下代码：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous script, several of the functions available in the API are used,
    which allow us to establish configuration values ​​and obtain exploits and `auxiliary`
    modules.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个脚本中，使用了API中可用的几个函数，这些函数允许我们建立配置值并获取exploits和`auxiliary`模块。
- en: It is also possible to interact with the framework in the same way that is usually
    done with the msfconsole utility, it is only necessary to create an instance of
    a console with the `console.create` function and then use the console identifier
    returned by that function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以以通常使用msfconsole实用程序的方式与框架进行交互，只需要使用`console.create`函数创建控制台的实例，然后使用该函数返回的控制台标识符。
- en: 'To create a new console, add the following code to the script:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的控制台，请将以下代码添加到脚本中：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Executing API calls
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行API调用
- en: 'The `call` method allows us to call API elements from within Metasploit that
    are surfaced through the msgrpc interface. For the first example, we will request
    the list of all exploits form the server. To do this, we call the  `module.exploits`
    function:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`call`方法允许我们从Metasploit内部调用通过msgrpc接口公开的API元素。对于第一个示例，我们将请求从服务器获取所有exploits的列表。为此，我们调用`module.exploits`函数：'
- en: '`# Get a list of the exploits from the server`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`＃从服务器获取exploits列表`'
- en: '`mod = client.call(''module.exploits'')`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod = client.call(''module.exploits'')`'
- en: 'If we want to find all of the payloads that were compatible, we could call
    the `module.compatible_payloads` method to find the payloads compatible with our
     exploit:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想找到所有兼容的有效载荷，我们可以调用`module.compatible_payloads`方法来查找与我们的exploit兼容的有效载荷：
- en: '`# Get the list of compatible payloads for the first option`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ＃获取第一个选项的兼容有效载荷列表
- en: '`ret = client.call(''module.compatible_payloads'',[mod[''modules''][0]])`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`ret = client.call(''module.compatible_payloads'',[mod[''modules''][0]])`'
- en: If this example, we are obtaining this information and getting the list of compatible
    payloads for the first option.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们正在获取此信息并获取第一个选项的兼容有效载荷列表。
- en: 'You can find the following code in the`msfrpc_get_exploits.py` file in the msfrpc
    folder:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`msfrpc_get_exploits.py`文件中的`msfrpc`文件夹中找到以下代码：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We also have commands to start a session in the Metasploit console. To do this,
    we use the call function passing the `console.create` command as a parameter and
    then we can execute commands on that console. The command can be read from the
    console or from a file. In this example, we are obtaining commands from a file
    and for each command we execute it in the console created.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有命令可以在Metasploit控制台中启动会话。为此，我们使用调用函数传递`console.create`命令作为参数，然后我们可以在该控制台上执行命令。命令可以从控制台或文件中读取。在这个例子中，我们正在从文件中获取命令，并且对于每个命令，我们在创建的控制台中执行它。
- en: 'You can find the following code in the` msfrpc_create_console.py` file in the msfrpc
    folder:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`msfrpc_create_console.py`文件中的`msfrpc`文件夹中找到以下代码：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Also, we need a method for checking whether the console is ready for more information
    or whether there are errors being printed back to us. We achieve this using our
    `processData` method. We could define a function that will read the output of
    the executed command and show the result:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要一种方法来检查控制台是否准备好获取更多信息，或者是否有错误被打印回给我们。我们可以使用我们的`processData`方法来实现这一点。我们可以定义一个函数来读取执行命令的输出并显示结果：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Exploiting the Tomcat service with Metasploit
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Metasploit的Tomcat服务
- en: In the **Metasploitable** virtual machine environment is installed an apache
    tomcat service, which is vulnerable to several attacks by remote attackers. A
    first attack can be the brute-force one, starting from a list of words, to try
    to capture the access credentials to the Tomcat Application Manager (the Tomcat
    Application Manager allows us to see and manage the applications installed in
    the server). If the execution of this module is successful, it will provide a
    valid username and password to access the server.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Metasploitable**虚拟机环境中安装了一个Apache Tomcat服务，该服务容易受到远程攻击者的多种攻击。第一种攻击可以是暴力破解，从一个单词列表开始，尝试捕获Tomcat应用程序管理器的访问凭据（Tomcat应用程序管理器允许我们查看和管理服务器中安装的应用程序）。如果执行此模块成功，它将提供有效的用户名和密码以访问服务器。
- en: In the Metasploit Framework, there is an `auxiliary` module named `tomcat_mgr_login`,
    which provides the attacker, if its execution is successful, a username and password
    to access Tomcat Manager.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在Metasploit Framework中，有一个名为`tomcat_mgr_login`的`auxiliary`模块，如果执行成功，将为攻击者提供访问Tomcat
    Manager的用户名和密码。
- en: 'With the `info` command, we can see the options needed to execute the module:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`info`命令，我们可以看到执行模块所需的选项：
- en: '![](assets/75336c52-cfbe-460a-bda4-8b0feac20533.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75336c52-cfbe-460a-bda4-8b0feac20533.png)'
- en: 'In this screenshot, we can see the parameters we need to set to execute the
    module:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕截图中，我们可以看到需要设置的参数以执行模块：
- en: '![](assets/acf10566-11b0-48e4-b3f2-17c66da734e4.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/acf10566-11b0-48e4-b3f2-17c66da734e4.png)'
- en: 'Once `auxiliary/scanner/http/ tomcat_mgr_login`module has been selected, the
    configuration of the parameters is established necessary according to the depth
    of the analysis that you want to carry out: for example, `STOP_ON_SUCCESS = true`,
    `RHOSTS = 192.168.100.2`, `RPORT = 8180`, `USER_FILE` and `USERPASS_FILE`; and
    then the execution is carried out.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了`auxiliary/scanner/http/tomcat_mgr_login`模块，就需要根据您想要进行的分析深度来配置参数，例如`STOP_ON_SUCCESS
    = true`，`RHOSTS = 192.168.100.2`，`RPORT = 8180`，`USER_FILE`和`USERPASS_FILE`；然后执行。
- en: 'After execution, **the result is that the username is tomcat and the password
    is also tomcat**, which again shows the vulnerability: weak username and password.
    With this result, you can access the server and upload files:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，**结果是用户名为tomcat，密码也是tomcat**，再次显示了弱用户名和密码的漏洞。有了这个结果，您可以访问服务器并上传文件：
- en: '![](assets/4a65241a-5e9b-4b5f-9f2d-5cb30831aab1.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a65241a-5e9b-4b5f-9f2d-5cb30831aab1.png)'
- en: Using the tomcat_mgr_deploy exploit
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用tomcat_mgr_deploy利用。
- en: Another attack that can be victimized by Tomcat is the exploit called Apache
    Tomcat Manager Application Deployer Authenticated Code Execution. This exploit
    is associated with a vulnerability present in Tomcat, identified as CVE-2009-3843
    and with a high degree of severity (10). This vulnerability allows the execution
    of a payload on the server, which was previously loaded into it as a .war file.
    For the execution of said exploit, it is necessary to have obtained a user and
    their password, by means of the `auxiliary` module or an alternative route. This
    exploit is located in the `multi/http/tomcat_mgr_deploy` path.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Tomcat可能受到的另一种攻击是名为Apache Tomcat Manager Application Deployer Authenticated
    Code Execution的利用。此利用与Tomcat中的一个漏洞相关，被标识为CVE-2009-3843，严重程度很高（10）。此漏洞允许在服务器上执行先前加载为.war文件的有效负载。为了执行该利用，需要通过`auxiliary`模块或其他途径获得用户及其密码。该利用位于`multi/http/tomcat_mgr_deploy`路径中。
- en: 'At the `msf>` `command line`, enter: `use exploit/multi/http/tomcat_mgr_deploy`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在`msf>`命令行中输入：`use exploit/multi/http/tomcat_mgr_deploy`
- en: 'Once the exploit has been loaded, you can type `show payloads` and `show options`
    to configure the tool:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了利用，您可以输入`show payloads`和`show options`来配置工具：
- en: '![](assets/f58f0ef7-5cf9-47b8-a8b0-192fe0f44c01.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f58f0ef7-5cf9-47b8-a8b0-192fe0f44c01.png)'
- en: 'With **show options**, we can see the required parameters to execute the module:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**show options**，我们可以看到执行模块所需的参数：
- en: '![](assets/807d2b1d-38d9-4190-b6b2-05a56953a20b.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/807d2b1d-38d9-4190-b6b2-05a56953a20b.png)'
- en: 'To use it, execute the `exploit/multi/http/tomcat_mgr_deploy` command. the
    configuration of the necessary parameters is established: `RPORT = 8180, RHOST
    = 192.168.100.2, USERNAME = tomcat, PASSWORD = tomcat`, the payload `java/meterpreter/bind_tcp` is
    selected, which establishes a meterpreter session and the exploit is executed.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，执行`exploit/multi/http/tomcat_mgr_deploy`命令。配置必要的参数：`RPORT = 8180, RHOST
    = 192.168.100.2, USERNAME = tomcat, PASSWORD = tomcat`，选择`java/meterpreter/bind_tcp`有效负载，建立一个meterpreter会话并执行利用。
- en: After the successful execution of the exploit, a connection is established through
    the `meterpreter` command interpreter, which provides a set of useful options
    to perform actions to scale privileges within the attacked system.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行利用后，通过`meterpreter`命令解释器建立了连接，提供了一系列有用的选项，以在受攻击的系统内部提升权限。
- en: Once initiated, the shell will call back its master and enable them to enter
    commands with whatever privileges the exploited service had. We'll use a Java
    Payload to achieve just in MSF.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动，shell将回拨其主机并允许其以被利用服务的任何权限输入命令。我们将使用Java有效负载来实现MSF中的功能。
- en: In the next script, we are automating the process, setting the parameters and
    payload, and executing the module with the exploit option.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个脚本中，我们正在自动化这个过程，设置参数和有效负载，并使用exploit选项执行模块。
- en: The `RHOST` and `RPORT` parameters can be given as parameters at the command
    line with the `optparse` module.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`RHOST`和`RPORT`参数可以通过`optparse`模块在命令行中给出。'
- en: 'You can find the following code in the `exploit_tomcat.py` file in the `msfrpc`
    folder:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`msfrpc`文件夹中的`exploit_tomcat.py`文件中找到以下代码：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Connecting Metasploit with pyMetasploit
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Metasploit与pyMetasploit连接
- en: In this section, we review Metasploit and how we can integrate this framework
    with Python. The programming language used to develop modules in Metasploit is
    ruby, however with Python it is also possible to take advantage of the benefits
    that this framework has thanks to the use of libraries such as **pyMetasploit**.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾Metasploit以及如何将此框架与Python集成。Metasploit中用于开发模块的编程语言是ruby，但是使用Python也可以利用诸如**pyMetasploit**之类的库来利用此框架的好处。
- en: Introduction to PyMetasploit
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyMetasploit简介
- en: PyMetasploit is a `msfrpc` library for Python and allowus us to automate the
    exploitation tasks with Python. It is meant to interact with the msfrpcd daemon
    that comes with the latest versions of Metasploit. Therefore, before you can begin
    to use this library, you'll need to initialize msfrpcd and optionally (highly
    recommended) PostgreSQL: [https://github.com/allfro/pyMetasploit](https://github.com/allfro/pymetasploit).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: PyMetasploit是Python的`msfrpc`库，允许我们使用Python自动化利用任务。它旨在与最新版本的Metasploit一起提供的msfrpcd守护程序进行交互。因此，在您开始使用此库之前，您需要初始化msfrpcd并且（强烈建议）初始化PostgreSQL：[https://github.com/allfro/pyMetasploit](https://github.com/allfro/pymetasploit)。
- en: 'We can install the module from the source code with the `setup.py` script install:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`setup.py`脚本安装从源代码安装模块：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once we have installed it , we can import the module in our scripts and establish
    a connection with the MsfRpcClient class:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以在脚本中导入模块并与`MsfRpcClient`类建立连接：
- en: '[PRE12]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Interacting with the Metasploit framework from python
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Python与Metasploit框架进行交互
- en: The **MsfRpcClient** class provides the core functionality to navigate through
    the Metasploit framework.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**MsfRpcClient**类提供了浏览Metasploit框架的核心功能。'
- en: 'Like the Metasploit framework, MsfRpcClient is segmented into different management
    modules:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 与Metasploit框架一样，MsfRpcClient分为不同的管理模块：
- en: '**auth:** Manages the authentication of clients for the msfrpcd daemon.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**auth：** 管理msfrpcd守护程序的客户端身份验证。'
- en: '**consoles:** Manages interaction with consoles/shells created by the Metasploit
    modules.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**consoles：** 管理由Metasploit模块创建的控制台/Shell的交互。'
- en: '**core:** Manages the Metasploit framework core.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**core：** 管理Metasploit框架核心。'
- en: '**db:** Manages the backend database connectivity for msfrpcd.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**db：** 管理msfrpcd的后端数据库连接。'
- en: '**modules:** Manages the interaction and configuration of Metasploit modules
    (such as exploits and auxiliaries).'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块：** 管理Metasploit模块（如exploits和auxiliaries）的交互和配置。'
- en: '**plugins:** Manages the plugins associated with the Metasploit core.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**plugins：** 管理与Metasploit核心关联的插件。'
- en: '**sessions:** Manages the interaction with the Metasploit meterpreter sessions.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sessions：** 管理与Metasploit meterpreter会话的交互。'
- en: 'Just like the Metasploit console, you can retrieve a list of all the modules
    encoders, payloads, and exploits that are available:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Metasploit控制台一样，您可以检索所有可用的模块编码器、有效载荷和exploits的列表：
- en: '[PRE13]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will list the exploit modules:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出exploit模块：
- en: '`exploits = client.modules.exploits`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`exploits = client.modules.exploits`'
- en: 'We can activate one of these exploits with the `use` method:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`use`方法激活其中一个exploit：
- en: '`scan = client.modules.use(''exploits'', ''multi/http/tomcat_mgr_deploy'')`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`scan = client.modules.use(''exploits'', ''multi/http/tomcat_mgr_deploy'')`'
- en: In a similar way that we have done with `python-msfprc`, with this module, we
    can also connect to the console and run the commands as we do in the msfconsole.
    We can do this in two ways. The first one is using the scan object after activating
    the exploit. The second one is using a console object to execute the command in
    the same way that we do when we interact with msfconsole.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 与`python-msfprc`一样，使用此模块，我们还可以连接到控制台并像在msfconsole中那样运行命令。我们可以通过两种方式实现这一点。第一种是在激活exploit后使用scan对象。第二种是使用console对象以与msfconsole交互时相同的方式执行命令。
- en: 'You can find the following code in the `exploit_tomcat_maanger.py` file in
    the `pyMetasploit` folder:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`pyMetasploit`文件夹中的`exploit_tomcat_maanger.py`文件中找到以下代码：
- en: '[PRE14]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: One of the objectives of this chapter has been to learn about the Metasploit
    framework as a tool to exploit vulnerabilities and how can we interact programmatically
    in Python with the Metasploit console. With modules such as Python-msfrpc and
    pyMetasploit, it is possible to automate the execution of the modules and exploits
    that we can find in the Metasploit framework.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的一个目标是了解Metasploit框架作为利用漏洞的工具，以及如何在Python中与Metasploit控制台进行程序化交互。使用诸如Python-msfrpc和pyMetasploit之类的模块，可以自动执行在Metasploit框架中找到的模块和exploits。
- en: In the next [chapter](0fb36b4d-c490-4762-8d1e-574401aacfc8.xhtml), we will explore
    vulnerabilities that we can find in the Metasploitable virtual machine, and how
    connect to with vulnerability scanners, such as `nessus` and `nexpose`, from Python
    modules to extract these vulnerabilities .
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨在Metasploitable虚拟机中发现的漏洞，以及如何连接到漏洞扫描器（如`nessus`和`nexpose`）以从Python模块中提取这些漏洞。
- en: Questions
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the interface for interacting with modules and executing exploits in
    Metasploit?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Metasploit中与模块进行交互和执行exploits的接口是什么？
- en: What are the main steps to exploit a system with the Metasploit framework?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Metasploit框架利用系统的主要步骤是什么？
- en: What is the name of the interface that uses the Metasploit framework for the
    exchange of information between the clients and the Metasploit server instance?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Metasploit框架在客户端和Metasploit服务器实例之间交换信息的接口名称是什么？
- en: What is the difference between generic/shell_bind_tcp and generic/shell_reverse_tcp?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`generic/shell_bind_tcp`和`generic/shell_reverse_tcp`之间有什么区别？'
- en: Which is the command we can execute to connect with msfconsole?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以执行哪个命令来连接到msfconsole？
- en: What is the function we need to use to interact with the framework in the same
    way that we can do with the msfconsole utility?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要使用哪个函数以与msfconsole实用程序相同的方式与框架进行交互？
- en: What is the name of the remote-access interface that uses the Metasploit framework
    for the exchange of information between clients and the Metasploit server instance?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Metasploit框架在客户端和Metasploit服务器实例之间交换信息的远程访问接口名称是什么？
- en: How we can obtain the list of all exploits form the Metasploit server?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何可以获得Metasploit服务器上所有exploits的列表？
- en: Which are the modules in the Metasploit Framework that obtain access to the
    application manager in tomcat and exploit the apache tomcat server to get a session
    meterpreter?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Metasploit框架中，哪些模块可以访问tomcat中的应用程序管理器并利用apache tomcat服务器以获取会话meterpreter？
- en: Which is the the payload name that establishes a meterpreter session when the
    exploit is executed in tomcat server?
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在tomcat服务器中执行漏洞利用时，建立meterpreter会话的有效负载名称是什么？
- en: Further reading
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In these links, you will find more information about tools such as kali linux
    and the Metasploit framework, and the official documentation for the Metasploitable
    virtual machine that we used for the scripts'' execution:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些链接中，您将找到有关诸如kali linux和Metasploit框架的工具的更多信息，以及我们用于脚本执行的Metasploitable虚拟机的官方文档：
- en: '[https://docs.kali.org/general-use/starting-Metasploit-framework-in-kali](https://docs.kali.org/general-use/starting-Metasploit-framework-in-kali)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.kali.org/general-use/starting-Metasploit-framework-in-kali](https://docs.kali.org/general-use/starting-Metasploit-framework-in-kali)'
- en: '[https://github.com/rapid7/Metasploit-framework](https://github.com/rapid7/Metasploit-framework)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/rapid7/Metasploit-framework](https://github.com/rapid7/Metasploit-framework)'
- en: '[https://information.rapid7.com/Metasploit-framework.html](https://information.rapid7.com/Metasploit-framework.html)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://information.rapid7.com/Metasploit-framework.html](https://information.rapid7.com/Metasploit-framework.html)'
- en: 'Automatic Vulnerability Exploiter: This tool uses the subprocess module to
    interact with the Metasploit framework console and automates some exploits you
    can find with msfconsole: [https://github.com/anilbaranyelken/arpag](https://github.com/anilbaranyelken/arpag).'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 自动漏洞利用程序：此工具使用子进程模块与Metasploit框架控制台进行交互，并自动化了一些您可以在msfconsole中找到的漏洞利用：[https://github.com/anilbaranyelken/arpag](https://github.com/anilbaranyelken/arpag)。
