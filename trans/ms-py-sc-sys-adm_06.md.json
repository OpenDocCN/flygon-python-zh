["```py\nimport tarfile\nimport shutil\nimport sys\n\nshutil.make_archive(\n 'work_sample', 'gztar',\n root_dir='..',\n base_dir='work',\n)\nprint('Archive contents:')\nwith tarfile.open('work_sample.tar.gz', 'r') as t_file:\n for names in t_file.getnames():\n print(names)\n```", "```py\n$ python3 shutil_make_archive.py\nArchive contents:\nwork\nwork/bye.py\nwork/shutil_make_archive.py\nwork/welcome.py\nwork/hello.py\n```", "```py\nimport pathlib\nimport shutil\nimport sys\nimport tempfile\nwith tempfile.TemporaryDirectory() as d:\n shutil.unpack_archive('work_sample.tar.gz', extract_dir='/home/student/work',)\n prefix_len = len(d) + 1\n for extracted in pathlib.Path(d).rglob('*'):\n print(str(extracted)[prefix_len:])\n```", "```py\nstudent@ubuntu:~/work$ python3 shutil_unpack_archive.py\n```", "```py\nimport tarfile\n\nfor f_name in ['hello.py', 'work.tar.gz', 'welcome.py', 'nofile.tar', 'sample.tar.xz']:\n try:\n print('{:} {}'.format(f_name, tarfile.is_tarfile(f_name)))\n except IOError as err:\n print('{:} {}'.format(f_name, err))\n```", "```py\nstudent@ubuntu:~/work$ python3 check_archive_file.py\nhello.py          False\nwork.tar.gz      True\nwelcome.py     False\nnofile.tar         [Errno 2] No such file or directory: 'nofile.tar'\nsample.tar.xz   True\n```", "```py\nimport shutil\nimport os\nimport tarfile\nprint('creating archive')\nshutil.make_archive('work', 'tar', root_dir='..', base_dir='work',)\nprint('\\nArchive contents:')\nwith tarfile.open('work.tar', 'r') as t_file:\n for names in t_file.getnames():\n print(names)\nos.system('touch sample.txt')\nprint('adding sample.txt')\nwith tarfile.open('work.tar', mode='a') as t:\n t.add('sample.txt')\nprint('contents:',)\nwith tarfile.open('work.tar', mode='r') as t:\n print([m.name for m in t.getmembers()])\n```", "```py\nstudent@ubuntu:~/work$ python3 add_to_archive.py\nOutput :\ncreating archive\nArchive contents:\nwork\nwork/bye.py\nwork/shutil_make_archive.py\nwork/check_archive_file.py\nwork/welcome.py\nwork/add_to_archive.py\nwork/shutil_unpack_archive.py\nwork/hello.py\nadding sample.txt\ncontents:\n['work', 'work/bye.py', 'work/shutil_make_archive.py', 'work/check_archive_file.py', 'work/welcome.py', 'work/add_to_archive.py', 'work/shutil_unpack_archive.py', 'work/hello.py', 'sample.txt']\n```", "```py\nimport tarfile\nimport time\nwith tarfile.open('work.tar', 'r') as t:\n for file_info in t.getmembers():\n print(file_info.name)\n print(\"Size   :\", file_info.size, 'bytes')\n print(\"Type   :\", file_info.type)\n print()\n```", "```py\nstudent@ubuntu:~/work$ python3 read_metadata.py\nOutput:\nwork/bye.py\nSize : 30 bytes\nType : b'0' \nwork/shutil_make_archive.py\nSize : 243 bytes\nType : b'0'\nwork/check_archive_file.py\nSize : 233 bytes\nType : b'0'\n\nwork/welcome.py\nSize : 48 bytes\nType : b'0'\n\nwork/add_to_archive.py\nSize : 491 bytes\nType : b'0'\n\nwork/shutil_unpack_archive.py\nSize : 279 bytes\nType : b'0'\n```", "```py\nimport tarfile\nimport os\nos.mkdir('work')\nwith tarfile.open('work.tar', 'r') as t:\n t.extractall('work')\nprint(os.listdir('work'))\n```", "```py\nstudent@ubuntu:~/work$ python3 extract_contents.py\n```", "```py\nimport shutil\nshutil.make_archive('work', 'zip', 'work')\n```", "```py\nstudent@ubuntu:~$ python3 make_zip_file.py\n```", "```py\nimport zipfile\nfor f_name in ['hello.py', 'work.zip', 'welcome.py', 'sample.txt', 'test.zip']:\n try:\n print('{:}           {}'.format(f_name, zipfile.is_zipfile(f_name)))\n except IOError as err:\n print('{:}           {}'.format(f_name, err))\n```", "```py\nstudent@ubuntu:~$ python3 check_zip_file.py\nOutput :\nhello.py          False\nwork.zip         True\nwelcome.py     False\nsample.txt       False\ntest.zip            True\n```", "```py\nimport zipfile\n\ndef meta_info(names):\n with zipfile.ZipFile(names) as zf:\n for info in zf.infolist():\n print(info.filename)\n if info.create_system == 0:\n system = 'Windows'\n elif info.create_system == 3:\n system = 'Unix'\n else:\n system = 'UNKNOWN'\n print(\"System         :\", system)\n print(\"Zip Version    :\", info.create_version)\n print(\"Compressed     :\", info.compress_size, 'bytes')\n print(\"Uncompressed   :\", info.file_size, 'bytes')\n print()\n\nif __name__ == '__main__':\n meta_info('work.zip')\n```", "```py\nstudent@ubuntu:~$ python3 read_metadata.py\nOutput:\nsample.txt\nSystem         : Unix\nZip Version    : 20\nCompressed     : 2 bytes\nUncompressed   : 0 bytes\n\nbye.py\nSystem         : Unix\nZip Version    : 20\nCompressed     : 32 bytes\nUncompressed   : 30 bytes\n\nextract_contents.py\nSystem         : Unix\nZip Version    : 20\nCompressed     : 95 bytes\nUncompressed   : 132 bytes\n\nshutil_make_archive.py\nSystem         : Unix\nZip Version    : 20\nCompressed     : 160 bytes\nUncompressed   : 243 bytes\n```", "```py\npip3 install pyAesCrypt\n```", "```py\nimport pyAesCrypt\n\nfrom os import stat, remove\n# encryption/decryption buffer size - 64K\nbufferSize = 64 * 1024\npassword = \"#Training\"\nwith open(\"sample.txt\", \"rb\") as fIn:\n with open(\"sample.txt.aes\", \"wb\") as fOut:\n pyAesCrypt.encryptStream(fIn, fOut, password, bufferSize)\n# get encrypted file size\nencFileSize = stat(\"sample.txt.aes\").st_size \n```", "```py\nstudent@ubuntu:~/work$ python3 file_encrypt.py\nOutput :\n```", "```py\nimport pyAesCrypt\nfrom os import stat, remove\nbufferSize = 64 * 1024\npassword = \"#Training\"\nencFileSize = stat(\"sample.txt.aes\").st_size\nwith open(\"sample.txt.aes\", \"rb\") as fIn:\n with open(\"sampleout.txt\", \"wb\") as fOut:\n try:\n pyAesCrypt.decryptStream(fIn, fOut, password, bufferSize, encFileSize)\n except ValueError:\n remove(\"sampleout.txt\")\n```", "```py\nstudent@ubuntu:~/work$ python3 file_decrypt.py\n```"]