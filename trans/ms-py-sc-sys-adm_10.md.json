["```py\n import socket            s = socket.socket(address_family, socket type)\n```", "```py\nimport socket host_name = socket.gethostname() port = 5000 s_socket = socket.socket() s_socket.bind((host_name, port)) s_socket.listen(2) conn, address = s_socket.accept() print(\"Connection from: \" + str(address)) while True:\n recv_data = conn.recv(1024).decode() if not recv_data: break print(\"from connected user: \" + str(recv_data)) recv_data = input(' -> ') conn.send(recv_data.encode()) conn.close()\n```", "```py\nimport socket host_name = socket.gethostname() port = 5000 c_socket = socket.socket() c_socket.connect((host_name, port)) msg = input(\" -> \")  while msg.lower().strip() != 'bye': c_socket.send(msg.encode()) recv_data = c_socket.recv(1024).decode() print('Received from server: ' + recv_data) msg = input(\" -> \") c_socket.close()\n```", "```py\nimport http.client con_obj = http.client.HTTPConnection('Enter_URL_name', 80, timeout=20) print(con_obj)\n```", "```py\nstudent@ubuntu:~/work$ python3 make_connection.py <http.client.HTTPConnection object at 0x7f2c365dd898>\n```", "```py\nimport http.client con_obj = http.client.HTTPSConnection(\"www.imdb.com\") con_obj.request(\"GET\", \"/\") response = con_obj.getresponse()  print(\"Status: {}\".format(response.status))  headers_list = response.getheaders()\nprint(\"Headers: {}\".format(headers_list))  con_obj.close()\n```", "```py\nstudent@ubuntu:~/work$ python3 get_example.py\n```", "```py\nStatus: 200 Headers: [('Server', 'Server'), ('Date', 'Fri, 23 Nov 2018 09:49:12 GMT'), ('Content-Type', 'text/html;charset=UTF-8'), ('Transfer-Encoding', 'chunked'), ('Connection', 'keep-alive'), ('X-Frame-Options', 'SAMEORIGIN'), ('Content-Security-Policy', \"frame-ancestors 'self' imdb.com *.imdb.com *.media-imdb.com withoutabox.com *.withoutabox.com amazon.com *.amazon.com amazon.co.uk *.amazon.co.uk amazon.de *.amazon.de translate.google.com images.google.com www.google.com www.google.co.uk search.aol.com bing.com www.bing.com\"), ('Ad-Unit', 'imdb.home.homepage'), ('Entity-Id', ''), ('Section-Id', 'homepage'), ('Page-Id', 'homepage'), ('Content-Language', 'en-US'), ('Set-Cookie', 'uu=BCYsgIz6VTPefAjQB9YlJiZhwogwHmoU3sLx9YK-A61kPgvXEKwHSJKU3XeaxIoL8DBQGhYLuFvR%0D%0AqPV6VVvx70AV6eL_sGzVaRQQAKf-PUz2y0sTx9H4Yvib9iSYRPOzR5qHQkwuoHPKmpu2KsSbPaCb%0D%0AYbc-R6nz9ObkbQf6RAYm5sTAdf5lSqM2ZzCEhfIt_H3tWQqnK5WlihYwfMZS2AJdtGXGRnRvEHlv%0D%0AyA4Dcn9NyeX44-hAnS64zkDfDeGXoCUic_kH6ZnD5vv21HOiVodVKA%0D%0A; Domain=.imdb.com; Expires=Wed, 11-Dec-2086 13:03:18 GMT; Path=/; Secure'), ('Set-Cookie', 'session-id=134-6809939-6044806; Domain=.imdb.com; Expires=Wed, 11-Dec-2086 13:03:18 GMT; Path=/; Secure'), ('Set-Cookie', 'session-id-time=2173686551; Domain=.imdb.com; Expires=Wed, 11-Dec-2086 13:03:18 GMT; Path=/; Secure'), ('Vary', 'Accept-Encoding,X-Amzn-CDN-Cache,User-Agent'), ('x-amz-rid', '7SWEYTYH4TX8YR2CF5JT')]\n```", "```py\nimport http.client import json con_obj = http.client.HTTPSConnection('www.httpbin.org') headers_list = {'Content-type': 'application/json'} post_text = {'text': 'Hello World !!'} json_data = json.dumps(post_text) con_obj.request('POST', '/post', json_data, headers_list) response = con_obj.getresponse() print(response.read().decode())\n```", "```py\nstudent@ubuntu:~/work$ python3 post_example.py\n```", "```py\n{\n \"args\": {}, \"data\": \"{\\\"text\\\": \\\"Hello World !!\\\"}\", \"files\": {}, \"form\": {}, \"headers\": { \"Accept-Encoding\": \"identity\", \"Connection\": \"close\", \"Content-Length\": \"26\", \"Content-Type\": \"application/json\", \"Host\": \"www.httpbin.org\" }, \"json\": { \"text\": \"Hello World !!\" }, \"origin\": \"1.186.106.115\", \"url\": \"https://www.httpbin.org/post\" }\n```", "```py\nstudent@ubuntu:~/Desktop$ python3 -m http.server 9000\n```", "```py\nstudent@ubuntu:~/Desktop$ python3 -m http.server 9000 Serving HTTP on 0.0.0.0 port 9000 (http://0.0.0.0:9000/) ... 127.0.0.1 - - [23/Nov/2018 16:08:14] code 404, message File not found 127.0.0.1 - - [23/Nov/2018 16:08:14] \"GET /Downloads/ HTTP/1.1\" 404 - 127.0.0.1 - - [23/Nov/2018 16:08:14] code 404, message File not found 127.0.0.1 - - [23/Nov/2018 16:08:14] \"GET /favicon.ico HTTP/1.1\" 404 - 127.0.0.1 - - [23/Nov/2018 16:08:21] \"GET / HTTP/1.1\" 200 - 127.0.0.1 - - [23/Nov/2018 16:08:21] code 404, message File not found 127.0.0.1 - - [23/Nov/2018 16:08:21] \"GET /favicon.ico HTTP/1.1\" 404 - 127.0.0.1 - - [23/Nov/2018 16:08:26] \"GET /hello/ HTTP/1.1\" 200 - 127.0.0.1 - - [23/Nov/2018 16:08:26] code 404, message File not found 127.0.0.1 - - [23/Nov/2018 16:08:26] \"GET /favicon.ico HTTP/1.1\" 404 - 127.0.0.1 - - [23/Nov/2018 16:08:27] code 404, message File not found 127.0.0.1 - - [23/Nov/2018 16:08:27] \"GET /favicon.ico HTTP/1.1\" 404 -\n```", "```py\nimport os\nfrom ftplib import FTP ftp = FTP('your-ftp-domain-or-ip')\nwith ftp:\n ftp.login('your-username','your-password') ftp.cwd('/home/student/work/') files = ftp.nlst()\n    print(files) # Print the files for file in files:\n        if os.path.isfile(file): print(\"Downloading...\" + file) ftp.retrbinary(\"RETR \" + file ,open(\"/home/student/testing/\" + file, 'wb').write) ftp.close()\n```", "```py\nstudent@ubuntu:~/work$ python3 get_ftp_files.py\n```", "```py\nDownloading...hello Downloading...hello.c Downloading...sample.txt Downloading...strip_hello Downloading...test.py\n```", "```py\nfrom ftplib import FTP ftp = FTP('your-ftp-domain-or-ip') ftp.login('your-username','your-password') welcome_msg = ftp.getwelcome() print(welcome_msg) ftp.close()\n```", "```py\nstudent@ubuntu:~/work$ python3 get_welcome_msg.py 220 (vsFTPd 3.0.3)\n```", "```py\nfrom ftplib import FTP ftp = FTP('your-ftp-domain-or-ip') ftp.login('your-username','your-password') ftp.cwd('/home/student/') s_cmd_stat = ftp.sendcmd('STAT') print(s_cmd_stat) print() s_cmd_pwd = ftp.sendcmd('PWD') print(s_cmd_pwd) print() ftp.close()\n```", "```py\nstudent@ubuntu:~/work$ python3 send_command.py\n```", "```py\n211-FTP server status:\n Connected to ::ffff:192.168.2.109 Logged in as student TYPE: ASCII No session bandwidth limit Session timeout in seconds is 300 Control connection is plain text Data connections will be plain text At session startup, client count was 1 vsFTPd 3.0.3 - secure, fast, stable 211 End of status\n257 \"/home/student\" is the current directory\n```", "```py\nimport urllib.request x = urllib.request.urlopen('https://www.imdb.com/') print(x.read())\n```", "```py\nstudent@ubuntu:~/work$ python3 url_requests_example.py\n```", "```py\nb'\\n\\n<!DOCTYPE html>\\n<html\\n    \\n    >\\n    <head>\\n         \\n        <meta charset=\"utf-8\">\\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n\\n    \\n    \\n    \\n\\n    \\n    \\n    \\n\\n    <meta name=\"apple-itunes-app\" content=\"app-id=342792525, app-argument=imdb:///?src=mdot\">\\n\\n\\n\\n        <script type=\"text/javascript\">var IMDbTimer={starttime: new Date().getTime(),pt:\\'java\\'};</script>\\n\\n<script>\\n    if (typeof uet == \\'function\\') {\\n      uet(\"bb\", \"LoadTitle\", {wb: 1});\\n    }\\n</script>\\n  <script>(function(t){ (t.events = t.events || {})[\"csm_head_pre_title\"] = new Date().getTime(); })(IMDbTimer);</script>\\n        <title>IMDb - Movies, TV and Celebrities - IMDb</title>\\n  <script>(function(t){ (t.events = t.events || {})[\"csm_head_post_title\"] = new Date().getTime(); })(IMDbTimer);</script>\\n<script>\\n    if (typeof uet == \\'function\\') {\\n      uet(\"be\", \"LoadTitle\", {wb: 1});\\n    }\\n</script>\\n<script>\\n    if (typeof uex == \\'function\\') {\\n      uex(\"ld\", \"LoadTitle\", {wb: 1});\\n    }\\n</script>\\n\\n        <link rel=\"canonical\" href=\"https://www.imdb.com/\" />\\n        <meta property=\"og:url\" content=\"http://www.imdb.com/\" />\\n        <link rel=\"alternate\" media=\"only screen and (max-width: 640px)\" href=\"https://m.imdb.com/\">\\n\\n<script>\\n    if (typeof uet == \\'function\\') {\\n      uet(\"bb\", \"LoadIcons\", {wb: 1});\\n    }\\n</script>\\n  <script>(function(t){ (t.events = t.events || {})[\"csm_head_pre_icon\"] = new Date().getTime(); })(IMDbTimer);</script>\\n        <link href=\"https://m.media-amazon.com/images/G/01/imdb/images/safari-favicon-517611381._CB483525257_.svg\" mask rel=\"icon\" sizes=\"any\">\\n        <link rel=\"icon\" type=\"image/ico\" href=\"https://m.media-amazon.com/images/G/01/imdb/images/favicon-2165806970._CB470047330_.ico\" />\\n        <meta name=\"theme-color\" content=\"#000000\" />\\n        <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"https://m.media-amazon.com/images/G/01/imdb/images/desktop-favicon-2165806970._CB484110913_.ico\" />\\n        <link href=\"https://m.media-amazon.com/images/G/01/imdb/images/mobile/apple-touch-icon-web-4151659188._CB483525313_.png\" rel=\"apple-touch-icon\"> \\n\n```", "```py\nimport urllib.request x = urllib.request.urlopen('https://www.imdb.com/') print(x.info())\n```", "```py\nstudent@ubuntu:~/work$ python3 url_response_header.py\n```", "```py\nServer: Server Date: Fri, 23 Nov 2018 11:22:48 GMT Content-Type: text/html;charset=UTF-8 Transfer-Encoding: chunked Connection: close X-Frame-Options: SAMEORIGIN Content-Security-Policy: frame-ancestors 'self' imdb.com *.imdb.com *.media-imdb.com withoutabox.com *.withoutabox.com amazon.com *.amazon.com amazon.co.uk *.amazon.co.uk amazon.de *.amazon.de translate.google.com images.google.com www.google.com www.google.co.uk search.aol.com bing.com www.bing.com Content-Language: en-US Set-Cookie: uu=BCYsJu-IKhmmXuZWHgogzgofKfB8CXXLkNXdfKrrvsCP-RkcSn29epJviE8uRML4Xl4E7Iw9V09w%0D%0Anl3qKv1bEVJ-hHWVeDFH6BF8j_MMf8pdVA2NWzguWQ2XbKvDXFa_rK1ymzWc-Q35RCk_Z6jTj-Mk%0D%0AlEMrKkFyxbDYxLMe4hSjUo7NGrmV61LY3Aohaq7zE-ZE8a6DhgdlcLfXsILNXTkv7L3hvbxmr4An%0D%0Af73atPNPOgyLTB2S615MnlZ3QpOeNH6E2fElDYXZnsIFEAb9FW2XfQ%0D%0A; Domain=.imdb.com; Expires=Wed, 11-Dec-2086 14:36:55 GMT; Path=/; Secure Set-Cookie: session-id=000-0000000-0000000; Domain=.imdb.com; Expires=Wed, 11-Dec-2086 14:36:55 GMT; Path=/; Secure Set-Cookie: session-id-time=2173692168; Domain=.imdb.com; Expires=Wed, 11-Dec-2086 14:36:55 GMT; Path=/; Secure Vary: Accept-Encoding,X-Amzn-CDN-Cache,User-Agent x-amz-rid: GJDGQQTNA4MH7S3KJJKV\n```"]