["```py\nimport tkinter as tk\nimport tkinter.messagebox as mb\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        btn_info = tk.Button(self, text=\"Show Info\",\n                             command=self.show_info)\n        btn_warn = tk.Button(self, text=\"Show Warning\",\n                             command=self.show_warning)\n        btn_error = tk.Button(self, text=\"Show Error\",\n                              command=self.show_error)\n\n        opts = {'padx': 40, 'pady': 5, 'expand': True, 'fill': tk.BOTH}\n        btn_info.pack(**opts)\n        btn_warn.pack(**opts)\n        btn_error.pack(**opts)\n\n    def show_info(self):\n        msg = \"Your user preferences have been saved\"\n        mb.showinfo(\"Information\", msg)\n\n    def show_warning(self):\n        msg = \"Temporary files have not been correctly removed\"\n        mb.showwarning(\"Warning\", msg)\n\n    def show_error(self):\n        msg = \"The application has encountered an unknown error\"\n        mb.showerror(\"Error\", msg)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nimport tkinter as tk\nimport tkinter.messagebox as mb\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.create_button(mb.askyesno, \"Ask Yes/No\",\n                           \"Returns True or False\")\n        self.create_button(mb.askquestion, \"Ask a question\",\n                           \"Returns 'yes' or 'no'\")\n        self.create_button(mb.askokcancel, \"Ask Ok/Cancel\",\n                           \"Returns True or False\")\n        self.create_button(mb.askretrycancel, \"Ask Retry/Cancel\",\n                           \"Returns True or False\")\n        self.create_button(mb.askyesnocancel, \"Ask Yes/No/Cancel\",\n                           \"Returns True, False or None\")\n\n    def create_button(self, dialog, title, message):\n        command = lambda: print(dialog(title, message))\n        btn = tk.Button(self, text=title, command=command)\n        btn.pack(padx=40, pady=5, expand=True, fill=tk.BOTH)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nimport tkinter as tk\nimport tkinter.filedialog as fd\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        btn_file = tk.Button(self, text=\"Choose file\",\n                             command=self.choose_file)\n        btn_dir = tk.Button(self, text=\"Choose directory\",\n                             command=self.choose_directory)\n        btn_file.pack(padx=60, pady=10)\n        btn_dir.pack(padx=60, pady=10)\n\n    def choose_file(self):\n        filetypes = ((\"Plain text files\", \"*.txt\"),\n                     (\"Images\", \"*.jpg *.gif *.png\"),\n                     (\"All files\", \"*\"))\n        filename = fd.askopenfilename(title=\"Open file\", \n                   initialdir=\"/\", filetypes=filetypes)\n        if filename:\n            print(filename)\n\n    def choose_directory(self):\n        directory = fd.askdirectory(title=\"Open directory\", \n                                    initialdir=\"/\")\n        if directory:\n            print(directory)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nfiletypes = ((\"Plain text files\", \"*.txt\"),\n             (\"Images\", \"*.jpg *.gif *.png\"),\n             (\"All files\", \"*\"))\nfilename = fd.askopenfilename(title=\"Open file\", initialdir=\"/\",\n                              filetypes=filetypes)\n```", "```py\ndirectory = fd.askdirectory(title=\"Open directory\", initialdir=\"/\")\n```", "```py\nimport tkinter.filedialog as fd\n\nfiletypes = ((\"Plain text files\", \"*.txt\"),)\nmy_file = fd.askopenfile(title=\"Open file\", filetypes=filetypes)\nif my_file:\n    print(my_file.readlines())\n    my_file.close()\n```", "```py\nimport tkinter as tk\nimport tkinter.filedialog as fd\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.text = tk.Text(self, height=10, width=50)\n        self.btn_save = tk.Button(self, text=\"Save\",\n                                  command=self.save_file)\n\n        self.text.pack()\n        self.btn_save.pack(pady=10, ipadx=5)\n\n    def save_file(self):\n        contents = self.text.get(1.0, tk.END)\n        new_file = fd.asksaveasfile(title=\"Save file\",\n                                    defaultextension=\".txt\",\n                                    filetypes=((\"Text files\", \n                                                \"*.txt\"),))\n        if new_file:\n            new_file.write(contents)\n            new_file.close()\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ncontents = self.text.get(1.0, tk.END)\nnew_file.write(contents)\nnew_file.close()\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        menu = tk.Menu(self)\n        file_menu = tk.Menu(menu, tearoff=0)\n\n        file_menu.add_command(label=\"New file\")\n        file_menu.add_command(label=\"Open\")\n        file_menu.add_separator()\n        file_menu.add_command(label=\"Save\")\n        file_menu.add_command(label=\"Save as...\")\n\n        menu.add_cascade(label=\"File\", menu=file_menu)\n        menu.add_command(label=\"About\")\n        menu.add_command(label=\"Quit\", command=self.destroy)\n        self.config(menu=menu)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n    def __init__(self):\n        super().__init__()\n        menu = tk.Menu(self)\n        file_menu = tk.Menu(menu, tearoff=0)\n```", "```py\nmenu.add_cascade(label=\"File\", menu=file_menu)\nmenu.add_command(label=\"About\")\nmenu.add_command(label=\"Quit\", command=self.destroy)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.checked = tk.BooleanVar()\n        self.checked.trace(\"w\", self.mark_checked)\n        self.radio = tk.StringVar()\n        self.radio.set(\"1\")\n        self.radio.trace(\"w\", self.mark_radio)\n\n        menu = tk.Menu(self)\n        submenu = tk.Menu(menu, tearoff=0)\n\n        submenu.add_checkbutton(label=\"Checkbutton\", onvalue=True,\n                                offvalue=False, variable=self.checked)\n        submenu.add_separator()\n        submenu.add_radiobutton(label=\"Radio 1\", value=\"1\",\n                                variable=self.radio)\n        submenu.add_radiobutton(label=\"Radio 2\", value=\"2\",\n                                variable=self.radio)\n        submenu.add_radiobutton(label=\"Radio 3\", value=\"3\",\n                                variable=self.radio)\n\n        menu.add_cascade(label=\"Options\", menu=submenu)\n        menu.add_command(label=\"Quit\", command=self.destroy)\n        self.config(menu=menu)\n\n    def mark_checked(self, *args):\n        print(self.checked.get())\n\n    def mark_radio(self, *args):\n        print(self.radio.get())\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nself.checked = tk.BooleanVar()\nself.checked.trace(\"w\", self.mark_checked)\n# ...\nsubmenu.add_checkbutton(label=\"Checkbutton\", onvalue=True,\n                        offvalue=False, variable=self.checked)\n```", "```py\nself.radio = tk.StringVar()\nself.radio.set(\"1\")\nself.radio.trace(\"w\", self.mark_radio)\n# ...        \nsubmenu.add_radiobutton(label=\"Radio 1\", value=\"1\",\n                        variable=self.radio)\nsubmenu.add_radiobutton(label=\"Radio 2\", value=\"2\",\n                        variable=self.radio)\nsubmenu.add_radiobutton(label=\"Radio 3\", value=\"3\",\n                        variable=self.radio)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.menu = tk.Menu(self, tearoff=0)\n        self.menu.add_command(label=\"Cut\", command=self.cut_text)\n        self.menu.add_command(label=\"Copy\", command=self.copy_text)\n        self.menu.add_command(label=\"Paste\", command=self.paste_text)\n        self.menu.add_command(label=\"Delete\", command=self.delete_text)\n\n        self.text = tk.Text(self, height=10, width=50)\n        self.text.bind(\"<Button-3>\", self.show_popup)\n        self.text.pack()\n\n    def show_popup(self, event):\n        self.menu.post(event.x_root, event.y_root)\n\n    def cut_text(self):\n        self.copy_text()\n        self.delete_text()\n\n    def copy_text(self):\n        selection = self.text.tag_ranges(tk.SEL)\n        if selection:\n            self.clipboard_clear()\n            self.clipboard_append(self.text.get(*selection))\n\n    def paste_text(self):\n        self.text.insert(tk.INSERT, self.clipboard_get())\n\n    def delete_text(self):\n        selection = self.text.tag_ranges(tk.SEL)\n        if selection:\n            self.text.delete(*selection)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ndef show_popup(self, event):\n    self.menu.post(event.x_root, event.y_root)\n```", "```py\n    def copy_text(self):\n        selection = self.text.tag_ranges(tk.SEL)\n        if selection:\n            self.clipboard_clear()\n self.clipboard_append(self.text.get(*selection))\n```", "```py\n    def paste_text(self):\n        try:\n self.text.insert(tk.INSERT, self.clipboard_get())\n        except tk.TclError:\n            pass\n```", "```py\n    def delete_text(self):\n        selection = self.text.tag_ranges(tk.SEL)\n        if selection:\n            self.text.delete(*selection)\n```", "```py\ndef __init__(self):\n    super().__init__()\n    self.menu = tk.Menu(self, tearoff=0, \n    postcommand=self.enable_selection)\n```", "```py\ndef enable_selection(self):\n    state_selection = tk.ACTIVE if self.text.tag_ranges(tk.SEL) \n                      else tk.DISABLED\n    state_clipboard = tk.ACTIVE\n    try:\n        self.clipboard_get()\n    except tk.TclError:\n        state_clipboard = tk.DISABLED\n\n    self.menu.entryconfig(0, state=state_selection) # Cut\n    self.menu.entryconfig(1, state=state_selection) # Copy\n    self.menu.entryconfig(2, state=state_clipboard) # Paste\n    self.menu.entryconfig(3, state=state_selection) # Delete\n```", "```py\nimport tkinter as tk\n\nclass Window(tk.Toplevel):\n    def __init__(self, parent):\n        super().__init__(parent)\n        self.label = tk.Label(self, text=\"This is another window\")\n        self.button = tk.Button(self, text=\"Close\", \n                                command=self.destroy)\n\n        self.label.pack(padx=20, pady=20)\n        self.button.pack(pady=5, ipadx=2, ipady=2)\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.btn = tk.Button(self, text=\"Open new window\",\n                             command=self.open_window)\n        self.btn.pack(padx=50, pady=20)\n\n    def open_window(self):\n        window = Window(self)\n        window.grab_set()\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nclass Window(tk.Toplevel):\n    def __init__(self, parent):\n        super().__init__(parent)\n```", "```py\ndef open_window(self):\n    window = Window(self)\n window.grab_set()\n```", "```py\nimport tkinter as tk\nimport tkinter.messagebox as mb\n\nclass Window(tk.Toplevel):\n    def __init__(self, parent):\n        super().__init__(parent)\n        self.protocol(\"WM_DELETE_WINDOW\", self.confirm_delete)\n\n        self.label = tk.Label(self, text=\"This is another window\")\n        self.button = tk.Button(self, text=\"Close\", \n                                command=self.destroy)\n\n        self.label.pack(padx=20, pady=20)\n        self.button.pack(pady=5, ipadx=2, ipady=2)\n\n    def confirm_delete(self):\n        message = \"Are you sure you want to close this window?\"\n        if mb.askyesno(message=message, parent=self):\n            self.destroy()\n```", "```py\nif mb.askyesno(message=message, parent=self):\n    self.destroy()\n```", "```py\nimport tkinter as tk\nfrom collections import namedtuple\n\nUser = namedtuple(\"User\", [\"username\", \"password\", \"user_type\"])\n\nclass UserForm(tk.Toplevel):\n    def __init__(self, parent, user_type):\n        super().__init__(parent)\n        self.username = tk.StringVar()\n        self.password = tk.StringVar()\n        self.user_type = user_type\n\n        label = tk.Label(self, text=\"Create a new \" + \n                         user_type.lower())\n        entry_name = tk.Entry(self, textvariable=self.username)\n        entry_pass = tk.Entry(self, textvariable=self.password, \n                              show=\"*\")\n        btn = tk.Button(self, text=\"Submit\", command=self.destroy)\n\n        label.grid(row=0, columnspan=2)\n        tk.Label(self, text=\"Username:\").grid(row=1, column=0)\n        tk.Label(self, text=\"Password:\").grid(row=2, column=0)\n        entry_name.grid(row=1, column=1)\n        entry_pass.grid(row=2, column=1)\n        btn.grid(row=3, columnspan=2)\n\n    def open(self):\n        self.grab_set()\n        self.wait_window()\n        username = self.username.get()\n        password = self.password.get()\n        return User(username, password, self.user_type)\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        user_types = (\"Administrator\", \"Supervisor\", \"Regular user\")\n        self.user_type = tk.StringVar()\n        self.user_type.set(user_types[0])\n\n        label = tk.Label(self, text=\"Please, select the type of user\")\n        radios = [tk.Radiobutton(self, text=t, value=t, \\\n                  variable=self.user_type) for t in user_types]\n        btn = tk.Button(self, text=\"Create user\", \n                        command=self.open_window)\n\n        label.pack(padx=10, pady=10)\n        for radio in radios:\n            radio.pack(padx=10, anchor=tk.W)\n        btn.pack(pady=10)\n\n    def open_window(self):\n        window = UserForm(self, self.user_type.get())\n        user = window.open()\n        print(user)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\n    def open(self):\n self.grab_set()\n self.wait_window()\n        username = self.username.get()\n        password = self.password.get()\n        return User(username, password, self.user_type)\n```", "```py\n    def open_window(self):\n        window = UserForm(self, self.user_type.get())\n        user = window.open()\n        print(user)\n```"]