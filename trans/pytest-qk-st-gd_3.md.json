["```py\ndef test_highest_rated():\n    series = [\n        (\"The Office\", 2005, 8.8),\n        (\"Scrubs\", 2001, 8.4),\n        (\"IT Crowd\", 2006, 8.5),\n        (\"Parks and Recreation\", 2009, 8.6),\n        (\"Seinfeld\", 1989, 8.9),\n    ]\n    assert highest_rated(series) == \"Seinfeld\"\n```", "```py\ndef test_highest_rated():\n    series = [\n        (\"The Office\", 2005, 8.8),\n        ...,\n    ]\n    assert highest_rated(series) == \"Seinfeld\"\n\ndef test_oldest():\n    series = [\n        (\"The Office\", 2005, 8.8),\n        ...,\n    ]\n    assert oldest(series) == \"Seinfeld\"\n```", "```py\n@pytest.fixture\ndef comedy_series():\n    return [\n        (\"The Office\", 2005, 8.8),\n        (\"Scrubs\", 2001, 8.4),\n        (\"IT Crowd\", 2006, 8.5),\n        (\"Parks and Recreation\", 2009, 8.6),\n        (\"Seinfeld\", 1989, 8.9),\n    ]\n```", "```py\ndef test_highest_rated(comedy_series):\n    assert highest_rated(comedy_series) == \"Seinfeld\"\n\ndef test_oldest(comedy_series):\n    assert oldest(comedy_series) == \"Seinfeld\"\n```", "```py\nclass Test:\n\n    @pytest.fixture\n    def drama_series(self):\n        return [\n            (\"The Mentalist\", 2008, 8.1),\n            (\"Game of Thrones\", 2011, 9.5),\n            (\"The Newsroom\", 2012, 8.6),\n            (\"Cosmos\", 1980, 9.3),\n        ]\n```", "```py\nclass Test:\n    ...\n\n    def test_highest_rated(self, drama_series):\n        assert highest_rated(drama_series) == \"Game of Thrones\"\n\n    def test_oldest(self, drama_series):\n        assert oldest(drama_series) == \"Cosmos\"\n```", "```py\n@pytest.fixture\ndef comedy_series():\n    file = open(\"series.csv\", \"r\", newline=\"\")\n    return list(csv.reader(file))\n```", "```py\n@pytest.fixture\ndef some_fixture():\n    value = setup_value()\n    yield value\n    teardown_value(value)\n```", "```py\n@pytest.fixture\ndef comedy_series():\n    file = open(\"series.csv\", \"r\", newline=\"\")\n    yield list(csv.reader(file))\n    file.close()\n```", "```py\n@pytest.fixture\ndef comedy_series():\n    with open(\"series.csv\", \"r\", newline=\"\") as file:\n        return list(csv.reader(file))\n```", "```py\n@pytest.fixture\ndef series():\n    with open(\"series.csv\", \"r\", newline=\"\") as file:\n        return list(csv.reader(file))\n\n@pytest.fixture\ndef comedy_series(series):\n    return [x for x in series if x[GENRE] == \"comedy\"]\n```", "```py\ndef test_highest_rated(comedy_series):\n    assert highest_rated(comedy_series) == \"Seinfeld\"\n\ndef test_oldest(comedy_series):\n    assert oldest(comedy_series) == \"Seinfeld\"\n```", "```py\ntests/\n    ratings/\n        series.csv\n        test_ranking.py\n    io/\n        conftest.py\n        test_formats.py \n    conftest.py\n\n```", "```py\n@pytest.fixture(scope=\"session\")\ndef db_connection():\n    ...\n```", "```py\n@pytest.fixture(scope=\"session\")\ndef db():\n    db = connect_to_db(\"localhost\", \"test\") \n    db.create_table(Series)\n    db.create_table(Actors)\n    yield db\n    db.prune()\n    db.disconnect()\n```", "```py\n@pytest.fixture(scope=\"function\")\ndef transaction(db):\n    transaction = db.start_transaction()\n    yield transaction\n    transaction.rollback()\n```", "```py\ndef test_insert(transaction):\n    transaction.add(Series(\"The Office\", 2005, 8.8))\n    assert transaction.find(name=\"The Office\") is not None\n```", "```py\n@pytest.fixture(autouse=True)\ndef setup_dev_environment():\n    previous = os.environ.get('APP_ENV', '')\n    os.environ['APP_ENV'] = 'TESTING'\n    yield\n    os.environ['APP_ENV'] = previous\n```", "```py\n@pytest.fixture\ndef venv_dir():\n    import venv\n\n    with tempfile.TemporaryDirectory() as d:\n        venv.create(d)\n        pwd = os.getcwd()\n        os.chdir(d)\n        yield d\n        os.chdir(pwd)\n\n@pytest.mark.usefixtures('venv_dir')\nclass TestVirtualEnv:\n    ...\n```", "```py\n@pytest.mark.usefixtures(\"venv_dir\", \"config_python_debug\")\nclass Test:\n    ...\n```", "```py\n@pytest.mark.parametrize(\n    \"serializer_class\",\n    [JSONSerializer, XMLSerializer, YAMLSerializer],\n)\nclass Test:\n\n    def test_quantity(self, serializer_class):\n        serializer = serializer_class()\n        quantity = Quantity(10, \"m\")\n        data = serializer.serialize_quantity(quantity)\n        new_quantity = serializer.deserialize_quantity(data)\n        assert new_quantity == quantity\n\n    def test_pipe(self, serializer_class):\n        serializer = serializer_class()\n        pipe = Pipe(\n            length=Quantity(1000, \"m\"), diameter=Quantity(35, \"cm\")\n        )\n       data = serializer.serialize_pipe(pipe)\n       new_pipe = serializer.deserialize_pipe(data)\n       assert new_pipe == pipe\n```", "```py\nclass Test:\n\n @pytest.fixture(params=[JSONSerializer, XMLSerializer,\n YAMLSerializer])\n def serializer(self, request):\n return request.param()\n\n    def test_quantity(self, serializer):\n        quantity = Quantity(10, \"m\")\n        data = serializer.serialize_quantity(quantity)\n        new_quantity = serializer.deserialize_quantity(data)\n        assert new_quantity == quantity\n\n    def test_pipe(self, serializer):\n        pipe = Pipe(\n            length=Quantity(1000, \"m\"), diameter=Quantity(35, \"cm\")\n        )\n        data = serializer.serialize_pipe(pipe)\n        new_pipe = serializer.deserialize_pipe(data)\n        assert new_pipe == pipe\n```", "```py\n@pytest.fixture(autouse=True)\ndef setup_locale():\n    locale.setlocale(locale.LC_ALL, \"en_US\")\n    yield\n    locale.setlocale(locale.LC_ALL, None)\n\ndef test_currency_us():\n    assert locale.currency(10.5) == \"$10.50\"\n```", "```py\n@pytest.fixture(autouse=True)\ndef setup_locale(request):\n    mark = request.node.get_closest_marker(\"change_locale\")\n    loc = mark.args[0] if mark is not None else \"en_US\"\n    locale.setlocale(locale.LC_ALL, loc)\n    yield\n    locale.setlocale(locale.LC_ALL, None)\n\n@pytest.mark.change_locale(\"pt_BR\")\ndef test_currency_br():\n    assert locale.currency(10.5) == \"R$ 10,50\"\n```", "```py\ndef test_empty(tmpdir):\n    assert os.path.isdir(tmpdir)\n    assert os.listdir(tmpdir) == []\n```", "```py\ndef test_save_curves(tmpdir):\n    data = dict(status_code=200, values=[225, 300])\n    fn = tmpdir.join('somefile.json')\n    write_json(fn, data)\n    assert fn.read() == '{\"status_code\": 200, \"values\": [225, 300]}'\n```", "```py\n@pytest.fixture(scope='session')\ndef images_dir(tmpdir_factory):\n    directory = tmpdir_factory.mktemp('images')\n    download_images('https://example.com/samples.zip', directory)\n    extract_images(directory / 'samples.zip')\n    return directory\n```", "```py\ndef test_blur_filter(images_dir):\n    output_image = apply_blur_filter(images_dir / 'rock1.png')\n    ...\n```", "```py\nimport getpass\n\ndef user_login(name):\n    password = getpass.getpass()\n    check_credentials(name, password)\n    ...\n```", "```py\ndef test_login_success(monkeypatch):\n    monkeypatch.setattr(getpass, \"getpass\", lambda: \"valid-pass\")\n    assert user_login(\"test-user\")\n\ndef test_login_wrong_password(monkeypatch):\n    monkeypatch.setattr(getpass, \"getpass\", lambda: \"wrong-pass\")\n    with pytest.raises(AuthenticationError, match=\"wrong password\"):\n        user_login(\"test-user\")\n```", "```py\nimport subprocess\n\ndef start_service(service_name):\n    subprocess.run(f\"docker run {service_name}\")\n```", "```py\nfrom subprocess import run\n\ndef start_service(service_name):\n    run(f\"docker run {service_name}\")\n```", "```py\nimport subprocess\nimport services\n\ndef test_start_service(monkeypatch):\n    commands = []\n    monkeypatch.setattr(subprocess, \"run\", commands.append)\n    services.start_service(\"web\")\n    assert commands == [\"docker run web\"]\n```", "```py\nimport services\n\ndef test_start_service(monkeypatch):\n    commands = []\n    monkeypatch.setattr(services, \"run\", commands.append)\n    services.start_service(\"web\")\n    assert commands == [\"docker run web\"]\n```", "```py\nfrom textwrap import dedent\n\ndef script_main(args):\n    if not args:\n        show_usage()\n        return 0\n    ...\n\ndef show_usage():\n    print(\"Create/update webhooks.\")\n    print(\" Usage: hooks REPO URL\")\n```", "```py\ndef test_usage(capsys):\n    script_main([])\n    captured = capsys.readouterr()\n    assert captured.out == dedent(\"\"\"\\\n        Create/update webhooks.\n          Usage: hooks REPO URL\n    \"\"\")\n```", "```py\n@pytest.fixture\ndef tmp_path(request) -> Path:\n    with TemporaryDirectory(prefix=request.node.name) as d:\n        yield Path(d)\n\ndef test_tmp_path(tmp_path):\n    assert list(tmp_path.iterdir()) == []\n```", "```py\nC:\\Users\\Bruno\\AppData\\Local\\Temp\\test_tmp_patht5w0cvd0\n```", "```py\nclass WindowManager:\n    ...\n```", "```py\n@pytest.fixture\ndef manager():\n return WindowManager()\n\ndef test_windows_creation(manager):\n    window = manager.new_help_window(\"pipes_help.rst\")\n    assert window.title() == \"Pipe Setup Help\"\n```", "```py\ndef create_window_manager():\n    return WindowManager()\n\ndef test_windows_creation():\n    manager = create_window_manager()\n    window = manager.new_help_window(\"pipes_help.rst\")\n    assert window.title() == \"Pipe Setup Help\"\n```", "```py\ndef test_windows_creation():\n    manager = WindowManager()\n    window = manager.new_help_window(\"pipes_help.rst\")\n    assert window.title() == \"Pipe Setup Help\"\n```", "```py\nclass WindowManager:\n\n    def __init__(self, logging_directory):\n        ...\n\n    def close(self):\n        \"\"\"\n        Close the WindowManager and all associated resources. \n        \"\"\"\n        ...\n```", "```py\n@pytest.fixture\ndef manager(tmpdir):\n    wm = WindowManager(str(tmpdir))\n    yield wm\n wm.close()\n```", "```py\ndef create_window_manager(tmpdir, request):\n    wm = WindowManager(str(tmpdir))\n    request.addfinalizer(wm.close)\n    return wm\n\ndef test_windows_creation(tmpdir, request):\n    manager = create_window_manager(tmpdir, request)\n    window = manager.new_help_window(\"pipes_help.rst\")\n    assert window.title() == \"Pipe Setup Help\"\n```", "```py\n@pytest.fixture(name=\"venv_dir\")\ndef _venv_dir():\n    ...\n```", "```py\nimport pytest\nimport tempfile\nfrom myapp import setup\n\n@pytest.fixture\ndef setup_app():\n    ...\n```", "```py\nimport pytest\n\n@pytest.fixture\ndef setup_app():\n import tempfile\n from myapp import setup\n    ...\n```", "```py\ndef test_hello(bot):\n    reply = bot.say(\"hello\")\n    assert reply.text == \"Hey, how can I help you?\"\n\ndef test_store_deploy_token(bot):\n    assert bot.store[\"TEST\"][\"token\"] is None\n    reply = bot.say(\"my token is ASLKM8KJAN\")\n    assert reply.text == \"OK, your token was saved\"\n    assert bot.store[\"TEST\"][\"token\"] == \"ASLKM8KJAN\"\n```"]