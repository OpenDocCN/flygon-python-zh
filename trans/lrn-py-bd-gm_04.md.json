["```py\n>>> a = 8 , 9\n>>> a\n(8,9)\n>>> type(a) \n<class 'tuple'>\n```", "```py\n>>> name = \"Python\"\n>>> name[0] = 'hey'\nTypeError: 'str' object does not support item assignment\n```", "```py\n>>> first_list = []  \n>>> type(first_list)\n<class 'list'>\n```", "```py\n      >>> numbers = [1,2,3,4,5,6,7,8,9]\n```", "```py\n      >>> numbers.append(10)\n      >>> print(numbers)\n      [1,2,3,4,5,6,7,8,9,10]\n```", "```py\n>>> [3,7,9,\"odd\",True]\n[3,7,9,\"odd\",True]\n```", "```py\n>>> [1,2,3,[4,5,6],7,[\"hey\",\"Python\"]]\n```", "```py\n>>> list([1,2,3,4,5])\n[1,2,3,4,5]\n```", "```py\n>>> winner_names = [\"Chandler\",\"Joey\",\"Monica\",\"Racheal\",\"Ross\"]\n>>> winner_names[0] #0 is first index\n'Chandler'\n>>> winner_names[-1] #-1 is last element\n'Ross'\n```", "```py\n>>> msg = [\"Joey\",\"Monica\",\"Racheal\"]\n>>> msg[1] = \"loves\"\n>>> msg\n['Joey','loves','Racheal']\n```", "```py\n>>> web_dev = [[\"Django\",\"Flask\"],[\"Laravel\",\"Symfony\"],\"Nodejs\",\"GOLang\"]\n>>> web_dev[0]\n['Django','Flask']\n>>> web_dev[1]\n['Laravel','Symfony']\n```", "```py\n>>> web_dev[0][0]\n'Django'\n>>> web_dev[1][1]\n'Symfony'\n```", "```py\n>>> names = [\"John\",\"Jack\",\"Cody\"]\n>>> \"Cody\" in names\nTrue\n>>> \"Harry\" in names\nFalse\n```", "```py\n>>> odd = [1,3,5,7,9]\n>>> odd[20]\nIndexError: list index out of range\n```", "```py\n>>> for number in [1,2,3,4]:\n         print(number)\n1\n2\n3\n4\n```", "```py\n>>> even_num, odd_num = [], []\n>>> for i in range(0,10):\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n\n>>> print(even_num)\n[0,2,4,6,8]\n>>> print(odd_num)\n[1,3,5,7,9]\n```", "```py\n>>> name = \"python\"\n>>> type(name)\n<class 'str'>\n>>> name = list(name) #list() method converts any data type to list\n>>> type(name)\n<class 'list'>\n>>> name[0] = 'c'\n>>> name\n['c', 'p', 'y', 't', 'h', 'o', 'n']\n```", "```py\n>>> even = [0,2,4,6,8]\n>>> odd = [1,3,5,7,9]\n>>> number = even + odd\n>>> number\n[0,1,2,3,4,5,6,7,8,9]\n```", "```py\n>>> [\"john\"] * 3\n['john','john','john']\n```", "```py\n>>> list_1 = [1,2,3]\n>>> list_1.append(4)\n>>> list_1\n[1,2,3,4]\n>>> list_2 = [5,6,7]\n>>> list_1.extend(list_2)\n>>> list_1\n[1,2,3,4,5,6,7]\n```", "```py\n>>> fruits = [\"Apple\",\"Banana\",\"Orange\",\"Mango\"]\n>>> fruits.pop(1)\n\"Banana\"\n>>> fruits\n[\"Apple\",\"Orange\",\"Mango\"]\n>>> fruits = [\"Apple\",\"Banana\",\"Orange\",\"Mango\"]\n>>> fruits.remove('Orange')\n>>> fruits\n[\"Apple\",\"Banana\",\"Mango\"]\n```", "```py\n>>> fruits = [\"Apple\",\"Banana\",\"Orange\",\"Mango\"]\n>>> del fruits[-1]\n>>> fruits\n[\"Apple\",\"Banana\",\"Orange\"]\n```", "```py\n>>> prime = [2,3,5,7,11,13,17]\n>>> sum(prime) \n58\n>>> min(prime)\n2\n>>> max(prime)\n17\n>>> len(prime)\n7\n```", "```py\n>>> book = \"Python Games\"\n#lets extract Games\n>>> book[7:]\n'Games'\n```", "```py\n>>> info = [\"I\",\"Love\",\"Python\",\"Java\",\"NodeJS\",\"C\"]\n>>> info[:3:]\n[\"I\",\"Love\",\"Python\"]\n```", "```py\n>>> info[:3] #same result as previous\n[\"I\", \"Love\", \"Python\"]\n```", "```py\n>>> name_1 = \"Python\"\n>>> name_2 = \"Python\"\n>>> name_1 is name_2\nTrue\n```", "```py\n>>> list_1 = ['a',1,2]\n>>> list_2 = ['a',1,2]\n>>> list_1 is list_2\nFalse\n```", "```py\n>>> my_list = [\"python\",\"java\"]\n```", "```py\n>>> my_dict = {}\n>>> type(my_dict)\n<class 'dict'>\n```", "```py\n>>> info = {\"Monica\" : 32, \"Joey\" : 29, \"Ross\" : 55 }\n>>> info\n{'Monica': 32, 'Ross': 55, 'Joey': 29} \n```", "```py\n>>> info[\"Monica\"]\n32\n>>> info[\"Joey\"]\n29\n>>> info[\"Chandler\"]\nKeyError: 'Chandler'\n```", "```py\n>>> info = dict()\n>>> info\n{}\n```", "```py\n>>> info[\"Python\"] = 1990\n>>> info[\"C\"] = 1973\n>>> info[\"Java\"] = 1970\n>>> info\n['Python': 1990, 'C': 1973, 'Java': 1970]\n```", "```py\n>>> info = {'Python': 1990, 'C': 1973, 'Java': 1970}\n>>> for key in info:\n        print(key,info[key])\n\nPython 1990\nC 1973\nJava 1970   \n```", "```py\n>>> for key,value in info:\n        print(key,value)\nValueError: too many values to unpack (expected 2)\n```", "```py\n>>> info = {'Python': 1990, 'C': 1973, 'Java': 1970}\n>>> info.pop('C')\n1973 \n>>> info\n{'Python':1990, 'Java': 1970}\n```", "```py\n>>> info.get('Python')\n1990\n```", "```py\n>>> info.values()\ndict_values([1990, 1970])\n>>> info.keys()\ndict_keys(['Python', 'Java'])\n```", "```py\n>>> len(info)\n2\n```", "```py\n>>> old = { \"Zero\" : 0 , \"One\" : 1}\n>>> new = old.copy()\n>>> new\n{'Zero': 0, 'One': 1}\n```", "```py\n>>> numbers = (1,2,3,4,5)\n>>> type(numbers)\n<class 'tuple'>\n```", "```py\n>>> numbers = tuple()\n>>> numbers\n()\n>>> numbers = tuple('abcde')\n>>> numbers\n('a','b','c','d','e')\n```", "```py\n>>> odd = (1,)\n>>> type(odd)\n<class 'tuple'>\n>>> even = (2)\n>>> type(even)\n<class 'int'>\n```", "```py\n>>> numbers = 1,2,3,4,5,6,7\n>>> type(numbers)\n<class 'tuple'>\n```", "```py\n>>> numbers[0]\n1\n>>> numbers[-1]\n7\n```", "```py\n>>> numbers[3:]\n(4,5,6,7)\n>>> numbers[::2]\n(1,3,5,7)\n```", "```py\n>>> names = (\"Jack\",\"Cody\",\"Hannah\")\n>>> names[0] = \"Perry\"\nTypeError: 'tuple' object does not support item assignment\n```", "```py\n>>> person_address = {\"Carl\": \"London\", \"Montana\": \"Edinburgh\"}\n>>> list(person_address)\n[\"Carl\",\"Montana\"]\n```", "```py\n>>> tuple(person_address)\n(\"Carl\",\"Montana\")\n```", "```py\n>>> person_address.items()\ndict_items([('Carl', 'London'), ('Montana', 'Edinburgh')])\n```", "```py\n>>> for key,value in person_address.items():\n        print(key,value)\nCarl London\nMontana Edinburgh\n```", "```py\n      >>> num = {1,2,3,4,5}\n      >>> type(num)\n      <class 'set'>\n```", "```py\n      >>> set(['a','b','c'])\n      {'c','a','b'}\n```", "```py\n>>> {\"laptop\",\"mobile\",\"mouse\",\"laptop\",\"mobile\"}\n{'mouse', 'laptop', 'mobile'}\n```", "```py\n>>> names = {\"Ariana\",\"Smith\",\"David\"}\n>>> names[0]\nTypeError: 'set' object is not subscriptable\n```", "```py\n>>> names = {\"Ariana\",\"Smith\",\"David\"}\n>>> for name in names:\n        print(name)\n\nAriana\nSmith\nDavid\n```", "```py\n      >>> favorite = {\"Java\",\"C\",\"C#\"}\n      >>> favorite.add(\"Python\")\n      >>> favorite\n      {'Java','C#','Python','C'}\n\n      >>> #for update method\n      >>> favorite.update([\"Python\",\"JavaScript\",\"R\"])\n      >>> favorite\n      {'Python','Java','R','C#','C','JavaScript'}\n```", "```py\n      >>> favorite.remove('C')\n      >>> favorite\n      {'Python','R',\"JavaScript','Java','C#'}\n\n      >>> favorite.remove(\"NodeJS\")\n      KeyError: 'NodeJS'\n\n      >>> favorite.discard(\"NodeJS\")\n      >>> #no error\n```", "```py\n      >>> favorite.pop()\n      'R'\n```", "```py\n      >>> favorite.clear()\n      >>> favorite\n      set()\n      >>> del favorite\n      >>> favorite\n      NameError: name 'favorite' is not defined\n```", "```py\n      >>> set_1 = {1,2,3}\n      >>> set_2 = {3,4,5}\n      >>> set_1.union(set_2)\n      {1,2,3,4,5}\n      >>> set_3 = {4,5,6,7}\n      >>> set_1.union(set_2,set_3)\n      {1,2,3,4,5,6,7}\n```", "```py\n      >>> set_1 = {'a','b','c'}\n      >>> set_2 = {'b','c','d'}\n      >>> set_1.intersection(set_2)\n      {'b','c'}\n```", "```py\n>>> 3 + 5\n8\n>>> 6 + 7\n13\n```", "```py\n>>> def add(a,b):\n        print(a + b)\n```", "```py\n>>> add(4,5)\n9\n>>> add(10,11)\n21\n```", "```py\n>>> type('a')\n<class 'str'>\n```", "```py\n>>> def add(a,b):\n        print(a+b)\n>>> add(3)\nTypeError: add() missing 1 required positional argument: 'b'\n\n>>> add(3,4,5)\nTypeError: add() takes 2 positional arguments but 3 were given\n```", "```py\n>>> def add(a,b):\n        c = a + b\n        return c\n\n>>> result = add(3,5)\n>>> result\n8\n```", "```py\n>>> def result(a,b):\n        print(\"Before Swapping: \")\n        print(a,b)\n        print(\"After Swapping: \")\n        return b,a\n>>> result(4,5)\nBefore Swapping: \n4 5\nAfter Swapping: \n(5, 4)\n```", "```py\n>>> def msg(str1,str2):\n        print(\"I love {} and hate {}\".format(str1,str2))\n\n>>> msg(\"Python\")\nTypeError: msg() missing 1 required positional argument: 'str2'\n```", "```py\n>>> def msg(str1 = \"Python\",str2):\n        print(\"I love {} and hate {}\".format(str1,str2))\n\nSyntaxError: non-default argument follows default argument\n```", "```py\n>>> def msg(str1,str2 = \"Java\"):\n        print(\"I love {} and hate {}\".format(str1,str2))\n\n>>> msg(\"Python\")\nI love Python and hate Java\n```", "```py\n>>> msg(\"Python\",\"C\")\nI love Python and hate C\n```", "```py\n>>> def add(a,b):\n        result = a + b\n        return result\n\n>>> print(add(4,5))\n9\n```", "```py\n>>> def add(*args):\n        result = 0\n        for item in arg:\n                   result = result + item\n        print(result)\n\n>>> add(1,2,3,4,9,4,2,5,5,8)\n43\n```", "```py\n>>> print(*\"Python\")\nP y t h o n\n```", "```py\n>>> numbers = [1,2,3,4]\n>>> print(*numbers)\n1 2 3 4\n```", "```py\n#code is written as script\npack_keyword_args.py\n\ndef about(name,age,like):\n    info = \"I am {}. I am {} years old and I like {}. \".format(name,age,like)\n    return info\n\ndictionary = {\"name\": \"Ross\", \"age\": 55, \"like\": \"Python\"}\nprint(about(**dictionary))\n\n>>>\nI am Ross. I am 55 years old and I like Python\n```", "```py\n#unpacking_key_args.py\ndef about(**kwargs):\n    for key, value in kwargs.items():\n          print(\"{} is {}\".format(key,value))\n\nabout(Python = \"Easy\", Java = \"Hard\")\n\n>>> #output\nPython is Easy\nJava is Hard\n```", "```py\n>>> kwargs.items()\ndict_items([('Python', 'Easy'), ('Java', 'Hard')])\n```", "```py\n>>> square = lambda x: x**2\n>>> square(8)\n64\n```", "```py\nlambda arguments: expression\n```", "```py\n>>> result = lambda x, y: x//y, x%y\nTraceback (most recent call last):\n  File \"<pyshell#0>\", line 1, in <module>\n    result = lambda x, y: x//y, x%y\nNameError: name 'x' is not defined\n```", "```py\n>>> def factorial(number):\n        if number == 1:\n            return 1\n        else:\n            return number*factorial(number-1)\n\n>>> factorial(4)\n24\n```", "```py\nTo find factorial of 5= 5! = 5*4*3*2*1! = 5*4*3*2*1 = 120\n```", "```py\n#tic_tac_toe_AI.py\n\ndef printBoard(board):\n    print('   |   |')\n    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])\n    print('   |   |')\n    print('---------------')\n    print('   |   |')\n    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])\n    print('   |   |')\n    print('---------------')\n    print('   |   |')\n    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])\n    print('   |   |')\n```", "```py\n>>> board = [' ']*10\n>>> #calling the function:\n>>> printBoard(board)\n\n      |    |\n      |    |\n      |    |\n-----------------\n      |    |\n      |    |\n      |    | \n-----------------\n      |    |\n      |    |\n      |    |\n```", "```py\n#tic_tac_toe_AI.py\n#after printBoard(board) function\n\ndef isWinner(board, current_player):\n    return ((board[7] == current_player and board[8] == current_player and board[9] == current_player) or\n    (board[4] == current_player and board[5] == current_player and board[6] == current_player) or\n    (board[1] == current_player and board[2] == current_player and board[3] == current_player) or \n    (board[7] == current_player and board[4] == current_player and board[1] == current_player) or\n    (board[8] == current_player and board[5] == current_player and board[2] == current_player) or\n    (board[9] == current_player and board[6] == current_player and board[3] == current_player) or\n    (board[7] == current_player and board[5] == current_player and board[3] == current_player) or\n    (board[9] == current_player and board[5] == current_player and board[1] == current_player))\n```", "```py\ndef makeMove(board, current_player, move):\n    board[move] = current_player\n```", "```py\ndef boardCopy(board):\n     cloneBoard = []\n     for pos in board:\n         cloneBoard.append(pos)\n\n     return cloneBoard\n```", "```py\ndef isSpaceAvailable(board, move):\n     return board[move] == ' '\n```", "```py\n#tic_tac_toe_AI.py\n\n def makeComputerMove(board, computerPlayer):\n     #part 1 \n     for pos in range(1,10):\n         #pos is for position of board layout\n         clone = boardCopy(board)\n         if isSpaceAvailable(clone, pos):\n             makeMove(clone, computerPlayer, pos)\n             if isWinner(clone, computerPlayer):\n                return pos\n```", "```py\ndef makeComputerMove(board, computerPlayer):\n     if computerPlayer == 'X':\n         humanPlayer = 'O'\n     else:\n         humanPlayer = 'X'\n\n     #add part1 code here\n     #now check if human player will win on next move or not in part2:\n     #part2\n     for pos in range(1,10):\n         clone = boardCopy(board)\n         if isSpaceAvailable(clone, pos):\n             makeMove(clone, humanPlayer, pos)\n             if isWinner(clone, humanPlayer):\n                return pos\n```", "```py\ndef makeComputerMove(board, computerPlayer):\n     #add part1\n     #add part2\n     #Occupy center position if it is available\n     #part3\n     if isSpaceAvailable(board, 5):\n         return 5   \n```", "```py\n#tic_tac_toe_AI.py\n import random\n def getRandomMove(board, moves):\n     availableMoves = []\n     for move in moves:\n         if isSpaceAvailable(board, move):\n             availableMoves.append(move)\n\n     if availableMoves.__len__() != 0:\n         return random.choice(availableMoves)\n     else:\n         return None       \n```", "```py\n      >>> import random\n      >>> random.choice([1, 2, 4, 5, 6])\n      5\n      >>> random.choice([1, 2, 4, 5, 6])\n      2\n```", "```py\n#tic_tac_toe_AI.py\n def makeComputerMove(board, computerPlayer):\n     #add part1\n     #add part2\n     #add part3\n     #code to occupy corner positions\n     move = getRandomMove(board, [1, 3, 7, 9])\n     if move is not None:\n         return move\n\n     #moves for remaining places ==> [2, 4, 6, 8]\n     return getRandomMove(board, [2, 4, 6, 8])\n```", "```py\n#tic_tac_toe_AI.py\n def main():\n     while True:\n         board = [' '] * 10\n         player, computer = 'X', 'O'\n         turn = \"human\"\n         print(\"The \" + turn + \" will start the game\")\n         isGameRunning = True\n\n         while isGameRunning:\n             if turn == \"human\":\n                 printBoard(board)\n                 move = ' '\n                 while move not in '1 2 3 4 5 6 7 8 9'.split() or not \n                  isSpaceAvailable(board, int(move)):\n                     print('What is your next move? (choose between 1-9)')\n                     move = int(input())\n                  makeMove(board, player, move)\n                  if isWinner(board, player):\n                      printBoard(board)\n                      print(\"You won the game!\")\n                      isGameRunning = False\n             else:\n                 #computer turn       \n```", "```py\ndef makePlayerMove(board):\n     move = ' '\n     while move not in '1 2 3 4 5 6 7 8 9'.split() or not \n      isSpaceAvailable(board, int(move)):\n         print('What is your next move? (choose between 1-9)')\n         move = int(input().strip())\n         return move\n```", "```py\ndef main():\n     while True:\n         board = [' '] * 10\n         player, computer = 'X', 'O'\n         turn = 'human'\n         print(\"The \" + turn + \" will start the game\")\n         isGameRunning = True\n\n         while isGameRunning:\n             if turn == 'human':\n                 printBoard(board)\n                 move = makePlayerMove(board)\n                 makeMove(board, player, move)\n                 if isWinner(board, player):\n                     printBoard(board)\n                     print(\"You won the game!\")\n                     isGameRunning = False\n                 else:\n                     printBoard(board)\n                     turn = 'computer'\n             else:\n                 move = makeComputerMove(board, computer)\n                 makeMove(board, computer, move)\n                 if isWinner(board, computer):\n                     printBoard(board)\n                     print('You loose!')\n                     isGameRunning = False\n                 else:\n                     turn = 'human'\n\n main() #calling main function\n```", "```py\ndef isBoardOccupied(board):\n    for pos in range(1,10):\n        if isSpaceAvailable(board,pos):\n            return False\n    return True\n```", "```py\ndef main():\n     while True:\n         # add the code here from part1\n         while isGameRunning:\n             if turn == 'human':\n                 move = makePlayerMove(board)\n                 makeMove(board, player, move)\n                 if isWinner(board, player):\n                     printBoard(board)\n                     print(\"You won the game!\")\n                     isGameRunning = False\n                 else:\n                     if isBoardOccupied(board):\n                        print(\"Game is a tie\")\n                        break\n                     else:\n                        turn = 'computer'\n\n             else:\n                 move = makeComputerMove(board, computer)\n                 makeMove(board, computer, move)\n                 if isWinner(board, computer):\n                     printBoard(board)\n                     print('You loose!')\n                     isGameRunning = False\n                 else:\n                     if isBoardOccupied(board):\n                        print(\"Game is tie\")\n                        break\n                     else:\n                        turn = 'human'\n\n main() #calling main function\n```"]