["```py\n    response = F(request, persistent state) \n\n```", "```py\n    response = auth(F(request, persistent state)) \n\n```", "```py\n    response = JSON( user( auth( F(request, persistent state) ) ) ) \n\n```", "```py\n    def application(environ, start_response): \n        start_response('200 OK', [('Content-Type', 'text/plain')]) \n        return iterable_strings \n\n```", "```py\n    class Card: \n        __slots__ = ('rank', 'suit') \n        def __init__(self, rank, suit): \n            self.rank = int(rank) \n            self.suit = suit \n        def __repr__(self): \n            return (\"Card(rank={self.rank!r}, \" \n             \"suit={self.suit!r})\").format(self=self) \n        def to_json(self): \n            return { \n                \"__class__\": \"Card\",  \n                'rank': self.rank,  \n                'suit': self.suit} \n\n```", "```py\n    import random \n     class Deck: \n        SUITS = ( \n            '\\N{black spade suit}', \n            '\\N{white heart suit}', \n            '\\N{white diamond suit}', \n            '\\N{black club suit}', \n        ) \n\n        def __init__(self, n=1): \n            self.n = n \n            self.create_deck(self.n) \n\n        def create_deck(self, n=1): \n            self.cards = [ \n                Card(r,s)  \n                    for r in range(1,14)  \n                        for s in self.SUITS  \n                            for _ in range(n) \n            ] \n            random.shuffle(self.cards) \n            self.offset = 0 \n\n        def deal(self, hand_size=5): \n            if self.offset + hand_size > len(self.cards): \n                self.create_deck(self.n) \n            hand = self.cards[self.offset:self.offset+hand_size] \n            self.offset += hand_size \n            return hand \n\n```", "```py\n **>>> from ch12_r01 import deck_factory \n>>> import random \n>>> import json \n\n>>> random.seed(2) \n>>> deck = Deck() \n>>> cards = deck.deal(5) \n>>> cards   \n[Card(rank=4, suit='\u2660'), Card(rank=8, suit='\u2661'), \n Card(rank=3, suit='\u2661'), Card(rank=6, suit='\u2661'), \n Card(rank=2, suit='\u2663')]** \n\n```", "```py\n **>>> json_cards = list(card.to_json() for card in deck.deal(5)) \n>>> print(json.dumps(json_cards, indent=2, sort_keys=True))** \n\n    [ \n      { \n        \"__class__\": \"Card\", \n        \"rank\": 2, \n        \"suit\": \"\\u2662\" \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"rank\": 13, \n        \"suit\": \"\\u2663\" \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"rank\": 7, \n        \"suit\": \"\\u2662\" \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"rank\": 6, \n        \"suit\": \"\\u2662\" \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"rank\": 7, \n        \"suit\": \"\\u2660\" \n      } \n    ] \n\n```", "```py\n            from http import HTTPStatus \n            import json \n            import os \n            import random \n\n    ```", "```py\n            random.seed(os.environ.get('DEAL_APP_SEED')) \n            deck = Deck() \n\n    ```", "```py\n            def deal_cards(environ, start_response): \n                global deck \n                hand_size = int(environ.get('HAND_SIZE', 5)) \n                cards = deck.deal(hand_size) \n                status = \"{status.value} {status.phrase}\".format(\n                 status=HTTPStatus.OK) \n                headers = [('Content-Type', 'application/json;charset=utf-8')] \n                start_response(status, headers) \n                json_cards = list(card.to_json() for card in cards) \n                return [json.dumps(json_cards, indent=2).encode('utf-8')] \n\n    ```", "```py\n            from wsgiref.simple_server import make_server \n            httpd = make_server('', 8080, deal_cards) \n            httpd.serve_forever() \n\n    ```", "```py\n    [ \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2663\", \n        \"rank\": 6 \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2662\", \n        \"rank\": 8 \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2660\", \n        \"rank\": 8 \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2660\", \n        \"rank\": 10 \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2663\", \n        \"rank\": 11 \n      } \n    ] \n\n```", "```py\n    class JSON_Filter: \n        def __init__(self, json_app): \n            self.json_app = json_app \n        def __call__(self, environ, start_response): \n            return json_app(environ, start_response) \n\n```", "```py\n    json_wrapper = JSON_Filter(deal_cards) \n\n```", "```py\n    from urllib.parse import parse_qs \n    class JSON_Filter: \n        def __init__(self, json_app): \n            self.json_app = json_app \n        def __call__(self, environ, start_response): \n            if 'HTTP_ACCEPT' in environ: \n                if 'json' in environ['HTTP_ACCEPT']: \n                    environ['$format'] = 'json' \n                    return self.json_app(environ, start_response) \n            decoded_query = parse_qs(environ['QUERY_STRING']) \n            if '$format' in decoded_query: \n                if decoded_query['$format'][0].lower() == 'json': \n                    environ['$format'] = 'json' \n                    return self.json_app(environ, start_response) \n            status = \"{status.value}         {status.phrase}\".format(status=HTTPStatus.BAD_REQUEST) \n            headers = [('Content-Type', 'text/plain;charset=utf-8')] \n            start_response(status, headers) \n            return [\"Request doesn't include ?$format=json or Accept     header\".encode('utf-8')] \n\n```", "```py\n    json_wrapper = JSON_Filter(deal_cards) \n    httpd = make_server('', 8080, json_wrapper) \n\n```", "```py\n **slott$ sudo pip3.5 install flask** \n\n **Password:** \n\n **Collecting flask** \n\n **Downloading Flask-0.11.1-py2.py3-none-any.whl (80kB)** \n\n **100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 81kB 3.6MB/s** \n\n **Collecting itsdangerous>=0.21 (from flask)** \n\n **Downloading itsdangerous-0.24.tar.gz (46kB)** \n\n **100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51kB 8.6MB/s** \n\n **Requirement already satisfied (use --upgrade to upgrade): Jinja2>=2.4 in /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages (from flask)** \n\n **Collecting click>=2.0 (from flask)** \n\n **Downloading click-6.6.tar.gz (283kB)** \n\n **100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 286kB 4.0MB/s** \n\n **Collecting Werkzeug>=0.7 (from flask)** \n\n **Downloading Werkzeug-0.11.10-py2.py3-none-any.whl (306kB)** \n\n **100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 307kB 3.8MB/s** \n\n **Requirement already satisfied (use --upgrade to upgrade): MarkupSafe in /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages (from Jinja2>=2.4->flask)** \n\n **Installing collected packages: itsdangerous, click, Werkzeug, flask** \n\n **Running setup.py install for itsdangerous ... done** \n\n **Running setup.py install for click ... done** \n\n **Successfully installed Werkzeug-0.11.10 click-6.6 flask-0.11.1 itsdangerous-0.24** \n\n```", "```py\n            from flask import Flask, request, jsonify, abort \n            from http import HTTPStatus \n\n    ```", "```py\n            from ch12_r01 import Card, Deck \n\n    ```", "```py\n            import random \n\n    ```", "```py\n            dealer = Flask('dealer') \n\n    ```", "```py\n            import os \n            random.seed(os.environ.get('DEAL_APP_SEED')) \n            deck = Deck() \n\n    ```", "```py\n            @dealer.route('/dealer/hand/') \n\n    ```", "```py\n            def deal(): \n                try: \n                    hand_size = int(request.args.get('cards', 5)) \n                    assert 1 <= hand_size < 53 \n                except Exception as ex: \n                    abort(HTTPStatus.BAD_REQUEST) \n                cards = deck.deal(hand_size) \n                response = jsonify([card.to_json() for card in cards]) \n                return response \n\n    ```", "```py\n            if __name__ == \"__main__\": \n                dealer.run(use_reloader=True, threaded=False, debug=True) \n\n    ```", "```py\n    [ \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2663\", \n        \"rank\": 6 \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2662\", \n        \"rank\": 8 \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2660\", \n        \"rank\": 8 \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2660\", \n        \"rank\": 10 \n      }, \n      { \n        \"__class__\": \"Card\", \n        \"suit\": \"\\u2663\", \n        \"rank\": 11 \n      } \n    ] \n\n```", "```py\n    @dealer.before_request \n    def check_json(): \n        if 'json' in request.headers.get('Accept'): \n        return \n        if 'json' == request.args.get('$format'): \n            return \n        return abort(HTTPStatus.BAD_REQUEST) \n\n```", "```py\n    @dealer.route('/dealer/hand/', methods=['POST']) \n\n```", "```py\n    ?cards=13&cards=5 \n\n```", "```py\n            @dealer.route('/dealer/hands/') \n\n    ```", "```py\n            def multi_hand(): \n\n    ```", "```py\n            try: \n                hand_sizes = request.args.getlist('cards', type=int) \n                if len(hand_sizes) == 0: \n                    hand_sizes = [13,13,13,13] \n                assert all(1 <= hand_size < 53 for hand_size in hand_sizes) \n            except Exception as ex: \n                dealer.logger.exception(ex) \n                abort(HTTPStatus.BAD_REQUEST) \n\n            hands = [deck.deal(hand_size) for hand_size in hand_sizes] \n            response = jsonify( \n                [ \n                    {'hand':i, \n                     'cards':[card.to_json() for card in hand] \n                    } for i, hand in enumerate(hands) \n                ] \n            ) \n            return response \n\n    ```", "```py\n            if __name__ == \"__main__\": \n                dealer.run(use_reloader=True, threaded=False) \n\n    ```", "```py\n    [ \n      { \n        \"cards\": [ \n          { \n            \"__class__\": \"Card\", \n            \"rank\": 11, \n            \"suit\": \"\\u2660\" \n          }, \n          { \n            \"__class__\": \"Card\", \n            \"rank\": 8, \n            \"suit\": \"\\u2662\" \n          }, \n          ... \n        ], \n        \"hand\": 0 \n      }, \n      { \n        \"cards\": [ \n          { \n            \"__class__\": \"Card\", \n            \"rank\": 3, \n            \"suit\": \"\\u2663\" \n          }, \n          { \n            \"__class__\": \"Card\", \n            \"rank\": 9, \n            \"suit\": \"\\u2660\" \n          }, \n          ... \n        ], \n        \"hand\": 1 \n      } \n    ] \n\n```", "```py\n **>>> from urllib.parse import urlencode \n>>> urlencode( {'n':355,'d':113} ) \n'n=355&d=113' \n>>> urlencode( {'n':355,'d':113,'note':'this&that'} ) \n'n=355&d=113&note=this%26that'** \n\n```", "```py\n! * ' ( ) ; : @ & = + $ , / ? # [ ] % \n\n```", "```py\n    { \n      \"swagger\": \"2.0\", \n      \"info\": { \n        \"title\": \"dealer\", \n        \"version\": \"1.0\" \n      }, \n      \"schemes\": [\"http\"], \n      \"host\": \"127.0.0.1:5000\", \n      \"basePath\": \"/dealer\", \n      \"consumes\": [\"application/json\"], \n      \"produces\": [\"application/json\"], \n      \"paths\": { \n        \"/hands\": { \n          \"get\": { \n            \"parameters\": [ \n              { \n                \"name\": \"cards\", \n                \"in\": \"query\", \n                \"description\": \"number of cards in each hand\", \n                \"type\": \"array\", \n                \"items\": {\"type\": \"integer\"}, \n                \"collectionFormat\": \"multi\", \n                \"default\": [13, 13, 13, 13] \n              } \n            ], \n            \"responses\": { \n              \"200\": { \n                \"description\":  \n                \"one hand of cards for each `hand` value in the query string\" \n              } \n            } \n          } \n        }, \n        \"/hand\": { \n          \"get\": { \n            \"parameters\": [ \n              { \n                \"name\": \"cards\", \n                \"in\": \"query\", \n                \"type\": \"integer\", \n                \"default\": 5 \n              } \n            ], \n            \"responses\": { \n              \"200\": { \n                \"description\":  \n                \"One hand of cards with a size given by the `hand` value in the query string\" \n              } \n            } \n          } \n        } \n      } \n    } \n\n```", "```py\n      \"schemes\": [\"http\"], \n      \"host\": \"127.0.0.1:5000\", \n      \"basePath\": \"/dealer\", \n\n```", "```py\n            import urllib.request \n            import urllib.parse \n            import json \n\n    ```", "```py\n            query = {'hand': 5} \n\n    ```", "```py\n            full_url = urllib.parse.ParseResult( \n                scheme=\"http\", \n                netloc=\"127.0.0.1:5000\", \n                path=\"/dealer\" + \"/hand/\", \n                params=None, \n                query=urllib.parse.urlencode(query), \n                fragment=None \n            ) \n\n    ```", "```py\n            request = urllib.request.Request( \n                url = urllib.parse.urlunparse(full_url), \n                method = \"GET\", \n                headers = { \n                    'Accept': 'application/json', \n                } \n            ) \n\n    ```", "```py\n            with urllib.request.urlopen(request) as response: \n\n    ```", "```py\n            print(response.status) \n            print(response.headers) \n            print(json.loads(response.read().decode(\"utf-8\"))) \n\n    ```", "```py\n **200 \nContent-Type: application/json \nContent-Length: 367 \nServer: Werkzeug/0.11.10 Python/3.5.1 \nDate: Sat, 23 Jul 2016 19:46:35 GMT \n\n[{'suit': '\u2660', 'rank': 4, '__class__': 'Card'}, \n {'suit': '\u2661', 'rank': 4, '__class__': 'Card'}, \n {'suit': '\u2663', 'rank': 9, '__class__': 'Card'}, \n {'suit': '\u2660', 'rank': 1, '__class__': 'Card'}, \n {'suit': '\u2660', 'rank': 2, '__class__': 'Card'}]** \n\n```", "```py\n    request = urllib.request.Request( \n        url = urllib.parse.urlunparse(full_url), \n        method = \"GET\", \n        headers = { \n            'Accept': 'application/json', \n            'X-Authentication': 'seekrit password', \n        } \n    ) \n\n```", "```py\n    swagger_request = urllib.request.Request( \n        url = 'http://127.0.0.1:5000/dealer/swagger.json', \n        method = \"GET\", \n        headers = { \n            'Accept': 'application/json', \n        } \n    ) \n\n    from pprint import pprint \n    with urllib.request.urlopen(swagger_request) as response: \n        swagger = json.loads(response.read().decode(\"utf-8\")) \n        pprint(swagger) \n\n```", "```py\n            from flask import send_file \n            @dealer.route('/dealer/swagger.json') \n            def swagger(): \n                response = send_file('swagger.json', mimetype='application/json') \n                return response \n\n    ```", "```py\n            from flask import make_response \n            @dealer.route('/dealer/swagger.json') \n            def swagger(): \n                response = make_response(__doc__.encode('utf-8')) \n                response.headers['Content-Type'] = 'application/json' \n                return response \n\n    ```", "```py\n            from flask import make_response \n            import json \n            @dealer.route('/dealer/swagger.json') \n            def swagger3(): \n                response = make_response( \n                    json.dumps(specification, indent=2).encode('utf-8')) \n                response.headers['Content-Type'] = 'application/json' \n                return response \n\n    ```", "```py\n            from flask import Flask, jsonify, request, abort, make_response \n            from http import HTTPStatus \n            dealer = Flask('dealer') \n\n    ```", "```py\n            import uuid \n\n    ```", "```py\n            from werkzeug.exceptions import BadRequest \n\n    ```", "```py\n            import os \n            import random \n            random.seed(os.environ.get('DEAL_APP_SEED')) \n            decks = {} \n\n    ```", "```py\n            @dealer.route('/dealer/decks', methods=['POST']) \n\n    ```", "```py\n            def make_deck(): \n                id = str(uuid.uuid1()) \n                decks[id]= Deck() \n                response_json = jsonify( \n                    status='ok', \n                    id=id \n                ) \n                response = make_response(response_json, HTTPStatus.CREATED) \n                return response \n\n    ```", "```py\n            @dealer.route('/dealer/decks/<id>/hands', methods=['GET']) \n\n    ```", "```py\n            def get_hands(id): \n                if id not in decks: \n                    dealer.logger.debug(id) \n                    return make_response( \n                        'ID {} not found'.format(id), HTTPStatus.NOT_FOUND) \n                try: \n                    cards = int(request.args.get('cards',13)) \n                    top = int(request.args.get('$top',1)) \n                    skip = int(request.args.get('$skip',0)) \n                    assert skip*cards+top*cards <= len(decks[id].cards), \\ \n                        \"$skip, $top, and cards larger than the deck\" \n                except ValueError as ex: \n                    return BadRequest(repr(ex)) \n                subset = decks[id].cards[skip*cards:(skip+top)*cards] \n                hands = [subset[h*cards:(h+1)*cards] for h in range(top)] \n                response = jsonify( \n                    [ \n                        {'hand':i, 'cards':[card.to_json() for card in hand]} \n                         for i, hand in enumerate(hands) \n                    ] \n                ) \n                return response \n\n    ```", "```py\n            if __name__ == \"__main__\": \n                dealer.run(use_reloader=True, threaded=False) \n\n    ```", "```py\n            import urllib.request \n            import urllib.parse \n            import json \n\n    ```", "```py\n            full_url = urllib.parse.ParseResult( \n                scheme=\"http\", \n                netloc=\"127.0.0.1:5000\", \n                path=\"/dealer\" + \"/decks\", \n                params=None, \n                query=None, \n                fragment=None \n            ) \n\n    ```", "```py\n            request = urllib.request.Request( \n                url = urllib.parse.urlunparse(full_url), \n                method = \"POST\", \n                headers = { \n                    'Accept': 'application/json', \n                } \n            ) \n\n    ```", "```py\n            with urllib.request.urlopen(request) as response: \n                # print(response.status) \n                assert response.status == 201 \n                # print(response.headers) \n                document = json.loads(response.read().decode(\"utf-8\")) \n\n            print(document) \n            assert document['status'] == 'ok' \n            id = document['id'] \n\n    ```", "```py\n            query = {'$top': 4, 'cards': 13} \n\n            full_url = urllib.parse.ParseResult( \n                scheme=\"http\", \n                netloc=\"127.0.0.1:5000\", \n                path=\"/dealer\" + \"/decks/{id}/hands\".format(id=id), \n                params=None, \n                query=urllib.parse.urlencode(query), \n                fragment=None \n            ) \n\n    ```", "```py\n            request = urllib.request.Request( \n                url = urllib.parse.urlunparse(full_url), \n                method = \"GET\", \n                headers = { \n                    'Accept': 'application/json', \n                } \n            ) \n\n    ```", "```py\n            with urllib.request.urlopen(request) as response: \n                # print(response.status) \n                assert response.status == 200 \n                # print(response.headers) \n                cards = json.loads(response.read().decode(\"utf-8\")) \n\n            print(cards) \n\n    ```", "```py\n            with urllib.request.urlopen('http://127.0.0.1:5000/dealer/swagger.json') as         response \n                swagger = json.loads(response.read().decode(\"utf-8\")) \n\n    ```", "```py\n    @dealer.before_request \n    def check_json(): \n        if request.path == '/dealer/swagger.json': \n            return \n        if 'json' in request.headers.get('Accept', '*/*'): \n            return \n        return abort(HTTPStatus.BAD_REQUEST) \n\n```", "```py\n    @dealer.route('/dealer/swagger.json') \n    def swagger3(): \n        response = make_response(json.dumps(specification, indent=2).encode('utf-8')) \n        response.headers['Content-Type'] = 'application/json' \n        return response \n\n```", "```py\n    specification = { \n        'swagger': '2.0', \n        'info': { \n            'title': '''Python Cookbook\\nChapter 12, recipe 5.''', \n            'version': '1.0' \n        }, \n        'schemes': ['http'], \n        'host': '127.0.0.1:5000', \n        'basePath': '/dealer', \n        'consumes': ['application/json'], \n        'produces': ['application/json'], \n        'paths': { \n            '/decks': {...} \n            '/decks/{id}/hands': {...} \n        } \n    } \n\n```", "```py\n    '/decks': { \n     'post': { \n        'parameters': [ \n          { \n            'name': 'size', \n            'in': 'query', \n            'type': 'integer', \n            'default': 1, \n                'description': '''number of decks to build and shuffle''' \n          } \n        ], \n        'responses': { \n          '201': { \n            'description': '''Create and shuffle a deck. Returns a unique deck id.''', \n            'schema': { \n              'type': 'object', \n                'properties': { \n                  'status': {'type': 'string'}, \n                  'id': {'type': 'string'} \n                } \n              } \n            }, \n          '400': { \n            'description': '''Request doesn't accept a JSON response''' \n          } \n        } \n      } \n\n```", "```py\n    full_url = urllib.parse.ParseResult( \n        scheme=\"http\", \n        netloc=\"127.0.0.1:5000\", \n        path=\"/dealer\" + \"/decks\", \n        params=None, \n        query=None, \n        fragment=None \n    ) \n\n```", "```py\n **MacBookPro-SLott:pyweb slott$ pip3.5 install swagger-spec-validator** \n\n **Collecting swagger-spec-validator** \n\n **Downloading swagger_spec_validator-2.0.2.tar.gz** \n\n **Requirement already satisfied (use --upgrade to upgrade):** \n\n **jsonschema in /Library/.../python3.5/site-packages** \n\n **(from swagger-spec-validator)** \n\n **Requirement already satisfied (use --upgrade to upgrade):** \n\n **setuptools in /Library/.../python3.5/site-packages** \n\n **(from swagger-spec-validator)** \n\n **Requirement already satisfied (use --upgrade to upgrade):** \n\n **six in /Library/.../python3.5/site-packages** \n\n **(from swagger-spec-validator)** \n\n **Installing collected packages: swagger-spec-validator** \n\n **Running setup.py install for swagger-spec-validator ... done** \n\n **Successfully installed swagger-spec-validator-2.0.2** \n\n```", "```py\n            specification = { \n                'swagger': '2.0', \n                'info': { \n                    'title': '''Python Cookbook\\nChapter 12, recipe 6.''', \n                    'version': '1.0' \n                }, \n                'schemes': ['http'], \n                'host': '127.0.0.1:5000', \n                'basePath': '/dealer', \n                'consumes': ['application/json'], \n                'produces': ['application/json'], \n                'paths': { \n                    '/players': {...}, \n                    '/players/{id}': {...}, \n                } \n                'definitions': { \n                    'player: {..} \n                } \n            } \n\n    ```", "```py\n            'player': { \n                'type': 'object', \n                'properties': { \n                    'name': {'type': 'string'}, \n                    'email': {'type': 'string', 'format': 'email'}, \n                    'year': {'type': 'integer'}, \n                    'twitter': {'type': 'string', 'format': 'uri'} \n                } \n            } \n\n    ```", "```py\n            '/players': { \n                'post': { \n                    'parameters': [ \n                            { \n                                'name': 'player', \n                                'in': 'body', \n                                'schema': {'$ref': '#/definitions/player'} \n                            }, \n                        ], \n                    'responses': { \n                        '201': {'description': 'Player created', }, \n                        '403': {'description': 'Player is invalid or a duplicate'} \n                    } \n                }, \n                'get': { \n                    'responses': { \n                        '200': {'description': 'All of the players defined so far'}, \n                    } \n                } \n            }, \n\n    ```", "```py\n            '/players/{id}': { \n                'get': { \n                    'parameters': [ \n                        { \n                            'name': 'id', \n                            'in': 'path', \n                            'type': 'string' \n                        } \n                    ], \n                    'responses': { \n                        '200': { \n                            'description': 'The details of a specific player', \n                            'schema': {'$ref': '#/definitions/player'} \n                        }, \n                        '404': {'description': 'Player ID not found'} \n                    } \n                } \n            }, \n\n    ```", "```py\n            from flask import Flask, jsonify, request, abort, make_response \n            from http import HTTPStatus \n\n    ```", "```py\n            from jsonschema import validate \n            from jsonschema.exceptions import ValidationError \n            import hashlib \n\n    ```", "```py\n            dealer = Flask('dealer') \n            players = {} \n\n    ```", "```py\n            @dealer.route('/dealer/players', methods=['POST']) \n\n    ```", "```py\n            def make_player(): \n                document = request.json \n                player_schema = specification['definitions']['player'] \n                try: \n                    validate(document, player_schema) \n                except ValidationError as ex: \n                    return make_response(ex.message, 403) \n\n                id = hashlib.md5(document['twitter'].encode('utf-8')).hexdigest() \n                if id in players: \n                    return make_response('Duplicate player', 403) \n\n                players[id] = document \n\n                response = make_response( \n                    jsonify( \n                        status='ok', \n                        id=id \n                    ), \n                    201 \n                ) \n                return response \n\n    ```", "```py\n            if __name__ == \"__main__\": \n                dealer.run(use_reloader=True, threaded=False) \n\n    ```", "```py\n            import urllib.request \n            import urllib.parse \n            import json \n\n    ```", "```py\n            full_url = urllib.parse.ParseResult( \n                scheme=\"http\", \n                netloc=\"127.0.0.1:5000\", \n                path=\"/dealer\" + \"/players\", \n                params=None, \n                query=None, \n                fragment=None \n            ) \n\n    ```", "```py\n            document = { \n                'name': 'Xander Bowers', \n                'email': 'x@example.com', \n                'year': 1985, \n                'twitter': 'https://twitter.com/PacktPub' \n            } \n\n    ```", "```py\n            request = urllib.request.Request( \n                url = urllib.parse.urlunparse(full_url), \n                method = \"POST\", \n                headers = { \n                    'Accept': 'application/json', \n                    'Content-Type': 'application/json;charset=utf-8', \n                }, \n                data = json.dumps(document).encode('utf-8') \n            ) \n\n    ```", "```py\n            with urllib.request.urlopen(request) as response: \n                # print(response.status) \n                assert response.status == 201 \n                # print(response.headers) \n                document = json.loads(response.read().decode(\"utf-8\")) \n\n            print(document) \n            assert document['status'] == 'ok' \n            id = document['id'] \n\n    ```", "```py\n    from swagger_spec_validator import validate_spec_url\n    validate_spec_url('http://127.0.0.1:5000/dealer/swagger.json') \n\n```", "```py\n    response.headers['Location'] = url_for('get_player', id=str(id)) \n\n```", "```py\n    @dealer.route('/dealer/players', methods=['GET']) \n    def get_players(): \n        response = make_response(jsonify(players)) \n        return response \n\n```", "```py\n    @dealer.route('/dealer/players/<id>', methods=['GET']) \n    def get_player(id): \n        if id not in players: \n            return make_response(\"{} not found\".format(id), 404) \n\n        response = make_response( \n            jsonify( \n                players[id] \n            ) \n        ) \n        return response \n\n```", "```py\n            id = '75f1bfbda3a8492b74a33ee28326649c' \n            full_url = urllib.parse.ParseResult( \n                scheme=\"http\", \n                netloc=\"127.0.0.1:5000\", \n                path=\"/dealer\" + \"/players/{id}\".format(id=id), \n                params=None, \n                query=None, \n                fragment=None \n            ) \n\n    ```", "```py\n            request = urllib.request.Request( \n                url = urllib.parse.urlunparse(full_url), \n                method = \"GET\", \n                headers = { \n                    'Accept': 'application/json', \n                } \n            ) \n\n    ```", "```py\n            with urllib.request.urlopen(request) as response: \n                assert response.status == 200 \n                player= json.loads(response.read().decode(\"utf-8\")) \n            print(player) \n\n    ```", "```py\n    try: \n        with urllib.request.urlopen(request) as response: \n            # print(response.status) \n            assert response.status == 201 \n            # print(response.headers) \n            document = json.loads(response.read().decode(\"utf-8\")) \n\n        # process the document here. \n\n    except urllib.error.HTTPError as ex: \n        print(ex.status) \n        print(ex.headers) \n        print(ex.read()) \n\n```", "```py\n     **slott$ openssl genrsa 1024 > ssl.key** \n\n     **Generating RSA private key, 1024 bit long modulus** \n\n     **.......++++++** \n\n     **..........................++++++** \n\n     **e is 65537 (0x10001)** \n\n    ```", "```py\n     **slott$ openssl req -new -x509 -nodes -sha1 -days 365 -key ssl.key > ssl.cert** \n\n    ```", "```py\n     **Country Name (2 letter code) [AU]:US** \n\n     **State or Province Name (full name) [Some-State]:Virginia** \n\n     **Locality Name (eg, city) []:** \n\n     **Organization Name (eg, company) [Internet Widgits Pty Ltd]:ItMayBeAHack** \n\n     **Organizational Unit Name (eg, section) []:** \n\n     **Common Name (e.g. server FQDN or YOUR name) []:Steven F. Lott** \n\n     **Email Address []:** \n\n    ```", "```py\n    from functools import wraps \n    def decorate(function): \n        @wraps(function) \n        def decorated_function(*args, **kw): \n            # processing before \n            result = function(*args, **kw) \n            # processing after \n            return result \n        return decorated_function \n\n```", "```py\n    @dealer.route('/path/to/resource') \n    @decorate \n    def view_function(): \n        return make_result('hello world', 200) \n\n```", "```py\n            import hashlib \n            import os \n            import base64 \n\n    ```", "```py\n            class User: \n\n    ```", "```py\n            DIGEST = 'sha384' \n            ROUNDS = 100000 \n\n    ```", "```py\n            def __init__(self, **document): \n                self.name = document['name'] \n                self.year = document['year'] \n                self.email = document['email'] \n                self.twitter = document['twitter'] \n                self.password = None \n\n    ```", "```py\n            def set_password(self, password): \n                salt = os.urandom(30) \n                hash = hashlib.pbkdf2_hmac( \n                    self.DIGEST, password.encode('utf-8'), salt, self.ROUNDS) \n                self.password = '$'.join( \n                    [self.DIGEST, \n                     base64.urlsafe_b64encode(salt).decode('ascii'), \n                     base64.urlsafe_b64encode(hash).decode('ascii') \n                    ] \n                ) \n\n    ```", "```py\n            def check_password(self, password): \n                digest, b64_salt, b64_expected_hash = self.password.split('$') \n                salt = base64.urlsafe_b64decode(b64_salt) \n                expected_hash = base64.urlsafe_b64decode(b64_expected_hash) \n                computed_hash = hashlib.pbkdf2_hmac( \n                    digest, password.encode('utf-8'), salt, self.ROUNDS) \n                return computed_hash == expected_hash \n\n    ```", "```py\n **>>> details = {'name': 'xander', 'email': 'x@example.com', \n...     'year': 1985, 'twitter': 'https://twitter.com/PacktPub' } \n>>> u = User(**details) \n>>> u.set_password('OpenSesame') \n>>> u.check_password('opensesame') \nFalse \n>>> u.check_password('OpenSesame') \nTrue** \n\n```", "```py\n            from functools import wraps \n\n    ```", "```py\n            import base64 \n            from flask import g \n            from http import HTTPStatus \n\n    ```", "```py\n            def authorization_required(view_function): \n                @wraps(view_function) \n                def decorated_function(*args, **kwargs): \n                    processing here \n                return decorated_function \n\n    ```", "```py\n            if 'Authorization' not in request.headers: \n                abort(HTTPStatus.UNAUTHORIZED) \n            kind, data = request.headers['Authorization'].split() \n            if kind.upper() != 'BASIC': \n                abort(HTTPStatus.UNAUTHORIZED) \n            credentials = base64.decode(data) \n            username, _, password = credentials.partition(':') \n            if username not in user_database: \n                abort(HTTPStatus.UNAUTHORIZED) \n            if not user_database[username].check_password(password): \n                abort(HTTPStatus.UNAUTHORIZED) \n            g.user = user_database[username] \n            return view_function(*args, **kwargs) \n\n    ```", "```py\n            from flask import Flask, jsonify, request, abort, url_for \n            from ch12_r07_user import User \n            from http import HTTPStatus \n\n    ```", "```py\n            @dealer.route('/dealer/players', methods=['POST']) \n            def make_player(): \n                try: \n                    document = request.json \n                except Exception as ex: \n                    # Document wasn't even JSON. We can fine-tune \n                    # the error message here. \n                    raise \n                player_schema = specification['definitions']['player'] \n                try: \n                    validate(document, player_schema) \n                except ValidationError as ex: \n                    return make_response(ex.message, 403) \n\n                id = hashlib.md5(document['twitter'].encode('utf-8')).hexdigest() \n                if id in user_database: \n                    return make_response('Duplicate player', 403) \n\n                new_user = User(**document) \n                new_user.set_password(document['password']) \n                user_database[id] = new_user \n\n                response = make_response( \n                    jsonify( \n                        status='ok', \n                        id=id \n                    ), \n                    201 \n                ) \n                response.headers['Location'] = url_for('get_player', id=str(id)) \n                return response \n\n    ```", "```py\n            @dealer.route('/dealer/players/<id>', methods=['GET']) \n            @authorization_required \n            def get_player(id): \n                if id not in user_database: \n                    return make_response(\"{} not found\".format(id), 404) \n\n                response = make_response( \n                    jsonify( \n                        players[id] \n                    ) \n                ) \n                return response \n\n    ```", "```py\n            import ssl \n            ctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23) \n            ctx.load_cert_chain('ssl.cert', 'ssl.key') \n            dealer.run(use_reloader=True, threaded=False, ssl_context=ctx) \n\n    ```", "```py\n            import ssl \n            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH) \n            context.check_hostname = False \n            context.verify_mode = ssl.CERT_NONE \n\n    ```", "```py\n            with urllib.request.urlopen(swagger_request, context=context) as response: \n                swagger = json.loads(response.read().decode(\"utf-8\")) \n                pprint(swagger) \n\n    ```", "```py\n            full_url = urllib.parse.ParseResult( \n                scheme=\"https\", \n                netloc=\"127.0.0.1:5000\", \n                path=\"/dealer\" + \"/players\", \n                params=None, \n                query=None, \n                fragment=None \n            ) \n\n    ```", "```py\n            password.document = { \n                'name': 'Hannah Bowers', \n                'email': 'h@example.com', \n                'year': 1987, \n                'twitter': 'https://twitter.com/PacktPub', \n                'password': 'OpenSesame' \n            } \n\n    ```", "```py\n            request = urllib.request.Request( \n                url = urllib.parse.urlunparse(full_url), \n                method = \"POST\", \n                headers = { \n                    'Accept': 'application/json', \n                    'Content-Type': 'application/json;charset=utf-8', \n                }, \n                data = json.dumps(document).encode('utf-8') \n            ) \n\n    ```", "```py\n            try: \n                with urllib.request.urlopen(request, context=context) as response: \n                    # print(response.status) \n                    assert response.status == 201 \n                    # print(response.headers) \n                    document = json.loads(response.read().decode(\"utf-8\")) \n\n                print(document) \n                assert document['status'] == 'ok' \n                id = document['id'] \n            except urllib.error.HTTPError as ex: \n                print(ex.status) \n                print(ex.headers) \n                print(ex.read()) \n\n    ```", "```py\n            import base64 \n            credentials = base64.b64encode(b'75f1bfbda3a8492b74a33ee28326649c:OpenSesame') \n\n    ```", "```py\n            full_url = urllib.parse.ParseResult( \n                scheme=\"https\", \n                netloc=\"127.0.0.1:5000\", \n                path=\"/dealer\" + \"/players\", \n                params=None, \n                query=None, \n                fragment=None \n            ) \n\n    ```", "```py\n            request = urllib.request.Request( \n                url = urllib.parse.urlunparse(full_url), \n                method = \"GET\", \n                headers = { \n                    'Accept': 'application/json', \n                    'Authorization': b\"BASIC \" + credentials \n                } \n            ) \n\n    ```", "```py\n            request.urlopen(request, context=context) as response: \n                assert response.status == 200 \n                # print(response.headers) \n                players = json.loads(response.read().decode(\"utf-8\")) \n\n            pprint(players) \n\n    ```", "```py\n    class Group: \n        '''A collection of users.''' \n        pass \n\n    administrators = Group() \n    players = Group() \n\n```", "```py\n    class GroupUser(User): \n        def __init__(self, *args, **kw): \n            super().__init__(*args, **kw) \n            self.groups = set() \n\n```", "```py\n    u = GroupUser(**document) \n    u.groups = set(players) \n\n```", "```py\n    def group_member(group_instance): \n        def group_member_decorator(view_function): \n            @wraps(view_function) \n            def decorated_view_function(*args, **kw): \n                # Check Password and determine user \n                if group_instance not in g.user.groups: \n                    abort(HTTPStatus.UNAUTHORIZED) \n                return view_function(*args, **kw) \n            return decorated_view_function \n        return group_member_decorator \n\n```", "```py\n    @dealer.route('/dealer/players') \n    @group_member(administrators) \n    def make_player(): \n        etc. \n\n```", "```py\n            from urllib.request import HTTPBasicAuthHandler,         HTTPPasswordMgrWithDefaultRealm \n            auth_handler = urllib.request.HTTPBasicAuthHandler( \n                password_mgr=HTTPPasswordMgrWithDefaultRealm) \n            auth_handler.add_password( \n                realm=None, \n                uri='https://127.0.0.1:5000/', \n                user='Aladdin', \n                passwd='OpenSesame') \n            password_opener = urllib.request.build_opener(auth_handler) \n\n    ```"]