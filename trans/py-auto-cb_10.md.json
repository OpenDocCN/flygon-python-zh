["```py\n>>> from pprint import pprint\n```", "```py\n>>> dictionary = {'example': 1}\n```", "```py\n>>> globals()\n{...'pprint': <function pprint at 0x100995048>, \n...'dictionary': {'example': 1}}\n```", "```py\n>>> pprint(globals())\n{'__annotations__': {},\n ...\n 'dictionary': {'example': 1},\n 'pprint': <function pprint at 0x100995048>}\n```", "```py\n>>> dir(dictionary)\n['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']\n```", "```py\n>>> help(dictionary)\n\nHelp on dict object:\n\nclass dict(object)\n | dict() -> new empty dictionary\n | dict(mapping) -> new dictionary initialized from a mapping object's\n | (key, value) pairs\n...\n```", "```py\n>>> [att for att in dir(dictionary) if not att.startswith('__')]\n['clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']\n```", "```py\n>>> def something():\n...     '''\n...     This is help for something\n...     '''\n...     pass\n...\n>>> help(something)\nHelp on function something in module __main__:\n\nsomething()\n    This is help for something\n```", "```py\nassert [1, 2, 3, 4, 7, 10] == bubble_sort([3, 7, 10, 2, 4, 1])\n```", "```py\n$ python debug_logging.py\nINFO:Sorting the list: [3, 7, 10, 2, 4, 1]\nINFO:Sorted list:      [2, 3, 4, 7, 10, 1]\nTraceback (most recent call last):\n  File \"debug_logging.py\", line 17, in <module>\n    assert [1, 2, 3, 4, 7, 10] == bubble_sort([3, 7, 10, 2, 4, 1])\nAssertionError\n```", "```py\nlogging.basicConfig(format='%(levelname)s:%(message)s', level=logging.INFO)\n```", "```py\nlogging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)\n```", "```py\n$ python debug_logging.py\nINFO:Sorting the list: [3, 7, 10, 2, 4, 1]\nDEBUG:alist: [3, 7, 10, 2, 4, 1]\nDEBUG:alist: [3, 7, 10, 2, 4, 1]\nDEBUG:alist: [3, 7, 2, 10, 4, 1]\nDEBUG:alist: [3, 7, 2, 4, 10, 1]\nDEBUG:alist: [3, 7, 2, 4, 10, 1]\nDEBUG:alist: [3, 2, 7, 4, 10, 1]\nDEBUG:alist: [3, 2, 4, 7, 10, 1]\nDEBUG:alist: [2, 3, 4, 7, 10, 1]\nDEBUG:alist: [2, 3, 4, 7, 10, 1]\nDEBUG:alist: [2, 3, 4, 7, 10, 1]\nINFO:Sorted list : [2, 3, 4, 7, 10, 1]\nTraceback (most recent call last):\n  File \"debug_logging.py\", line 17, in <module>\n    assert [1, 2, 3, 4, 7, 10] == bubble_sort([3, 7, 10, 2, 4, 1])\nAssertionError\n```", "```py\nfor passnum in reversed(range(len(alist) - 1)):\n```", "```py\nfor passnum in reversed(range(len(alist))):\n```", "```py\n$ python debug_logging.py\nINFO:Sorting the list: [3, 7, 10, 2, 4, 1]\n...\nINFO:Sorted list     : [1, 2, 3, 4, 7, 10]\n```", "```py\nlogging.debug(f'object {dir(object)}')\n```", "```py\ndef valid(candidate):\n    if candidate <= 1:\n        return False\n\n    lower = candidate - 1\n    while lower > 1:\n        if candidate / lower == candidate // lower:\n            return False\n        lower -= 1\n\n    return True\n\nassert not valid(1)\nassert valid(3)\nassert not valid(15)\nassert not valid(18)\nassert not valid(50)\nassert valid(53)\n```", "```py\n$ python debug_algorithm.py\n```", "```py\n    while lower > 1:\n        breakpoint()\n        if candidate / lower == candidate // lower:\n```", "```py\n$ python debug_algorithm.py\n> .../debug_algorithm.py(8)valid()\n-> if candidate / lower == candidate // lower:\n(Pdb)\n```", "```py\n(Pdb) candidate\n3\n(Pdb) candidate / lower\n1.5\n(Pdb) candidate // lower\n1\n```", "```py\n(Pdb) n\n> ...debug_algorithm.py(10)valid()\n-> lower -= 1\n(Pdb) n\n> ...debug_algorithm.py(6)valid()\n-> while lower > 1:\n(Pdb) n\n> ...debug_algorithm.py(12)valid()\n-> return True\n(Pdb) n\n--Return--\n> ...debug_algorithm.py(12)valid()->True\n-> return True\n```", "```py\n(Pdb) c\n> ...debug_algorithm.py(8)valid()\n-> if candidate / lower == candidate // lower:\n(Pdb) candidate\n15\n(Pdb) lower\n14\n```", "```py\n(Pdb) q\n...\nbdb.BdbQuit\n```", "```py\n(Pdb) l\n  3   return False\n  4\n  5   lower = candidate - 1\n  6   while lower > 1:\n  7     breakpoint()\n  8 ->  if candidate / lower == candidate // lower:\n  9       return False\n 10     lower -= 1\n 11\n 12   return True\n```", "```py\nimport pdb; pdb.set_trace()\n```", "```py\n$ echo \"requests==2.18.3\" >> requirements.txt\n$ echo \"parse==1.8.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n$ python debug_skills.py\nTraceback (most recent call last):\n File \"debug_skills.py\", line 26, in <module>\n raise Exception(f'Error accessing server: {result}')\nException: Error accessing server: <Response [405]>\n```", "```py\n# ERROR Step 2\\. Using .get when it should be .post\n# (old) result = requests.get('http://httpbin.org/post', json=data)\nresult = requests.post('http://httpbin.org/post', json=data)\n```", "```py\n$ python debug_skills.py\nTraceback (most recent call last):\n  File \"debug_skills_solved.py\", line 34, in <module>\n    first_name, last_name = full_name.split()\nValueError: too many values to unpack (expected 2)\n```", "```py\n$ python debug_skills_solved.py\n..debug_skills.py(35)<module>()\n-> first_name, last_name = full_name.split()\n(Pdb) n\n> ...debug_skills.py(36)<module>()\n-> ready_name = f'{last_name}, {first_name}'\n(Pdb) c\n> ...debug_skills.py(34)<module>()\n-> breakpoint()\n```", "```py\n    try:\n        first_name, last_name = full_name.split()\n    except:\n        breakpoint()\n```", "```py\n$ python debug_skills.py\n> ...debug_skills.py(38)<module>()\n-> ready_name = f'{last_name}, {first_name}'\n(Pdb) full_name\n'John Paul Smith'\n```", "```py\n    # ERROR Step 6 split only two words. Some names has middle names\n    # (old) first_name, last_name = full_name.split()\n    first_name, last_name = full_name.rsplit(maxsplit=1)\n```", "```py\n$ python debug_skills_solved.py\n['Berg, Keagan', 'Cordova, Mai', 'Craig, Michael', 'Garc\\\\u00eda, Roc\\\\u00edo', 'Mccabe, Fathima', \"O'Carroll, S\\\\u00e9amus\", 'Pate, Poppy-Mae', 'Rennie, Vivienne', 'Smith, John Paul', 'Smyth, John', 'Sullivan, Roman']\n```", "```py\n    full_name = parse.search('\"custname\": \"{name}\"', raw_result)['name']\n    if \"O'Carroll\" in full_name:\n        breakpoint()\n```", "```py\n$ python debug_skills.py\n> debug_skills.py(38)<module>()\n-> first_name, last_name = full_name.rsplit(maxsplit=1)\n(Pdb) full_name\n\"S\\\\u00e9amus O'Carroll\"\n```", "```py\n(Pdb) full_name\n\"S\\\\u00e9amus O'Carroll\"\n(Pdb) raw_result\n'{\"custname\": \"S\\\\u00e9amus O\\'Carroll\"}'\n(Pdb) result.json()\n{'args': {}, 'data': '{\"custname\": \"S\\\\u00e9amus O\\'Carroll\"}', 'files': {}, 'form': {}, 'headers': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'close', 'Content-Length': '37', 'Content-Type': 'application/json', 'Host': 'httpbin.org', 'User-Agent': 'python-requests/2.18.3'}, 'json': {'custname': \"S\u00e9amus O'Carroll\"}, 'origin': '89.100.17.159', 'url': 'http://httpbin.org/post'}\n```", "```py\n(Pdb) result.json()['json']\n{'custname': \"S\u00e9amus O'Carroll\"}\n(Pdb) type(result.json()['json'])\n<class 'dict'>\n```", "```py\n    # ERROR Step 11\\. Obtain the value from a raw value. Use\n    # the decoded JSON instead\n    # raw_result = result.json()['data']\n    # Extract the name from the result\n    # full_name = parse.search('\"custname\": \"{name}\"', raw_result)['name']\n    raw_result = result.json()['json']\n    full_name = raw_result['custname']\n```", "```py\n$ python debug_skills.py\n['Berg, Keagan', 'Cordova, Mai', 'Craig, Michael', 'Garc\u00eda, Roc\u00edo', 'Mccabe, Fathima', \"O'Carroll, S\u00e9amus\", 'Pate, Poppy-Mae', 'Rennie, Vivienne', 'Smith, John Paul', 'Smyth, John', 'Sullivan, Roman']\n```", "```py\nresult = requests.get('http://httpbin.org/post', json=data)\n```", "```py\nfirst_name, last_name = full_name.rsplit(maxsplit=1)\n```", "```py\n$ PYTHONBREAKPOINT=ipdb.set_trace python my_script.py\n```"]