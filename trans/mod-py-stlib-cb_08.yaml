- en: Cryptography
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码学
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下食谱：
- en: Asking for passwords—when asking for a password in a terminal-based software,
    make sure you don't leak it.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求密码-在终端软件中要求密码时，请确保不要泄漏它。
- en: Hashing passwords—how can passwords be stored without a risk of leaking them?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希密码-如何存储密码而不会泄漏风险？
- en: Verifying a file's integrity—how to check that a file transferred over a network
    wasn't corrupted.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证文件的完整性-如何检查通过网络传输的文件是否已损坏。
- en: Verify a message's integrity—how to check that a message you are sending to
    another software hasn't been altered.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证消息的完整性-如何检查您发送给另一个软件的消息是否已被更改。
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: While cryptography is generally perceived as a complex field, there are tasks
    based on it that are part of our everyday lives as software developers, or at
    least they should be, to ensure a minimum level of security in our code base.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然加密通常被认为是一个复杂的领域，但它是我们作为软件开发人员日常生活的一部分，或者至少应该是，以确保我们的代码库具有最低的安全级别。
- en: This chapter tries to cover recipes for most of the common tasks that you will
    have to face every day that can help to make your software resilient to attacks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章试图覆盖大多数您每天都必须面对的常见任务的食谱，这些任务可以帮助使您的软件对攻击具有抵抗力。
- en: While software written in Python will hardly suffer from exploitation, such
    as buffer overflows (unless there are bugs in the interpreter or compiled libraries
    you rely on), there are still a whole bunch of cases where you might be leaking
    information that must remain undisclosed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然用Python编写的软件很难受到利用，比如缓冲区溢出（除非解释器或您依赖的编译库中存在错误），但仍然有很多情况可能会泄露必须保密的信息。
- en: Asking for passwords
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求密码
- en: In terminal-based programs, it's common to ask for passwords from our users.
    It's usually a bad idea to do so from command options, as on Unix-like systems,
    they will be visible to anyone with access to the shell who is able to run a `ps`
    command to get the list of processes, and to anyone willing to run a `history`
    command to get the list of recently executed commands.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于终端的程序中，通常会向用户询问密码。通常不建议从命令选项中这样做，因为在类Unix系统上，可以通过运行`ps`命令获取进程列表的任何人都可以看到它们，并且可以通过运行`history`命令获取最近执行的命令列表。
- en: While there are ways to tweak the command arguments to hide them from the list
    of processes, it's always best to ask for passwords interactively so that no trace
    of them is left.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有方法可以调整命令参数以将其隐藏在进程列表中，但最好还是交互式地要求密码，以便不留下任何痕迹。
- en: But, asking for them interactively is not enough, unless you also ensure they
    are not displayed while typing, otherwise anyone looking at your screen can grab
    all your passwords.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，仅仅交互地要求它们是不够的，除非您还确保在输入时不显示它们，否则任何看着您屏幕的人都可以获取您的所有密码。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Luckily, the Python standard library provides an easy way to input passwords
    from a prompt without showing them back:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Python标准库提供了一种从提示中输入密码而不显示它们的简单方法：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `getpass.getpass` function will use the `termios` library on most systems
    to disable the echoing back of the characters written by the user. To avoid messing
    with the rest of the application input, it will be done within a new file descriptor
    for the terminal.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`getpass.getpass`函数将在大多数系统上使用`termios`库来禁用用户输入的字符的回显。为了避免干扰其他应用程序输入，它将在终端的新文件描述符中完成。'
- en: On systems that do not support this, it will use more basic calls to read characters
    directly from `sys.stdin` without echoing them back.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在不支持此功能的系统上，它将使用更基本的调用直接从`sys.stdin`读取字符而不回显它们。
- en: Hashing passwords
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希密码
- en: Avoiding storing passwords in plain text is a known best practice, as software
    usually only needs to check whether the password provided by the user is correct,
    and the hash of the password can be stored and compared with the hash of the provided
    password. If the two hashes match, the passwords are equal; if they don't, the
    provided password is wrong.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 避免以明文存储密码是一种已知的最佳实践，因为软件通常只需要检查用户提供的密码是否正确，并且可以存储密码的哈希值并与提供的密码的哈希值进行比较。如果两个哈希值匹配，则密码相等；如果不匹配，则提供的密码是错误的。
- en: Storing passwords is a pretty standard practice, and usually they are stored
    as a hash plus some salt. The salt is a randomly generated string that is joined
    with the password before hashing. Being randomly generated, it ensures that even
    hashes of equal passwords get different results.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 存储密码是一个非常标准的做法，通常它们被存储为哈希加一些盐。盐是一个随机生成的字符串，它在哈希之前与密码连接在一起。由于是随机生成的，它确保即使相同密码的哈希也会得到不同的结果。
- en: The Python standard library provides a pretty complete set of hashing functions,
    some of them very well-suited to storing passwords.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库提供了一套相当完整的哈希函数，其中一些非常适合存储密码。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Python 3 introduced key derivation functions, which are especially convenient
    when storing passwords. Both `pbkdf2` and `scrypt` are provided. While `scrypt`
    is more robust against attacks as it's both memory- and CPU-heavy, it only works
    on systems that provide OpenSSL 1.1+. While `pbkdf2` works on any system, in worst
    cases a Python-provided fallback is used.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3引入了密钥派生函数，特别适用于存储密码。提供了`pbkdf2`和`scrypt`。虽然`scrypt`更加抗攻击，因为它既消耗内存又消耗CPU，但它只能在提供OpenSSL
    1.1+的系统上运行。而`pbkdf2`可以在任何系统上运行，在最坏的情况下会使用Python提供的后备。
- en: 'So, while from a security point of view `scrypt` would be preferred, we will
    rely on `pbkdf2` due to its wider availability and the fact that it''s been available
    since Python 3.4 (`scrypt` is only available on Python 3.6+):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从安全性的角度来看，`scrypt`更受青睐，但由于其更广泛的可用性以及自Python 3.4以来就可用的事实，我们将依赖于`pbkdf2`（`scrypt`仅在Python
    3.6+上可用）：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The two functions can be used to hash the user-provided password for storage
    on disk or into a database (`hash_password`) and to verify the password against
    the stored one when a user tries to log back in (`verify_password`):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个函数可以用来对用户提供的密码进行哈希处理，以便存储在磁盘或数据库中（`hash_password`），并在用户尝试重新登录时验证密码是否与存储的密码匹配（`verify_password`）：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'There are two functions involved here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里涉及两个函数：
- en: '`hash_password`: Encodes a provided password in a way that is safe to store
    on a database or file'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hash_password`：以安全的方式对提供的密码进行编码，以便存储在数据库或文件中'
- en: '`verify_password`: Given an encoded password and a plain text one provided
    by the user, it verifies whether the provided password matches the encoded (and
    thus saved) one'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verify_password`：给定一个编码的密码和用户提供的明文密码，它验证提供的密码是否与编码的（因此已保存的）密码匹配。'
- en: '`hash_password` actually does multiple things; it doesn''t just hash the password.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`hash_password`实际上做了多件事情；它不仅仅是对密码进行哈希处理。'
- en: The first thing it does is generate some random salt that should be added to
    the password. That's just the `sha256` hash of some random bytes read from `os.urandom`.
    It then extracts a string representation of the hashed salt as a set of hexadecimal
    numbers (`hexdigest`).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它的第一件事是生成一些随机盐，应该添加到密码中。这只是从`os.urandom`读取的一些随机字节的`sha256`哈希。然后提取哈希盐的字符串表示形式作为一组十六进制数字（`hexdigest`）。
- en: The salt is then provided to `pbkdf2_hmac` together with the password itself
    to hash the password in a randomized way. As `pbkdf2_hmac` requires bytes as its
    input, the two strings (password and salt) are previously encoded in pure bytes.
    The salt is encoded as plain ASCII as the hexadecimal representation of a hash
    will only contain the 0-9 and A-F characters. While the password is encoded as
    `utf-8`, it could contain any character. (Is there anyone with emojis in their
    passwords?)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将盐提供给`pbkdf2_hmac`，与密码本身一起进行哈希处理，以随机化的方式哈希密码。由于`pbkdf2_hmac`需要字节作为输入，因此两个字符串（密码和盐）先前被编码为纯字节。盐被编码为纯ASCII，因为哈希的十六进制表示只包含0-9和A-F字符。而密码被编码为`utf-8`，它可能包含任何字符。（有人的密码里有表情符号吗？）
- en: The resulting `pbkdf2` is a bunch of bytes, as we want to store it into a database;
    we use `binascii.hexlify` to convert the bunch of bytes into their hexadecimal
    representation in a string format. `hexlify` is a convenient way to convert bytes
    to strings without losing data. It just prints all the bytes as two hexadecimal
    digits, so the resulting data will be twice as big as the original data, but apart
    from that, it's exactly the same as the converted data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`pbkdf2`是一堆字节，因为我们想要将其存储到数据库中；我们使用`binascii.hexlify`将一堆字节转换为它们的十六进制表示形式的字符串格式。`hexlify`是一种方便的方法，可以将字节转换为字符串而不丢失数据。它只是将所有字节打印为两个十六进制数字，因此生成的数据将比原始数据大一倍，但除此之外，它与转换后的数据完全相同。
- en: At the end, the function joins together the hash with its salt. As we know that
    the `hexdigest` of a `sha256` hash (the salt) is always 64 characters long. By
    joining them together, we can grab back the salt by reading the first 64 characters
    of the resulting string.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，该函数将哈希与其盐连接在一起。因为我们知道`sha256`哈希的`hexdigest`始终是64个字符长。通过将它们连接在一起，我们可以通过读取结果字符串的前64个字符来重新获取盐。
- en: This will permit `verify_password` to verify the password and to verify whether
    the salt used to encode it is required.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许`verify_password`验证密码，并验证是否需要使用用于编码的盐。
- en: 'Once we have our password, `verify_password` can then be used to verify provided
    passwords against it. So it takes two arguments: the hashed password and the new
    password that should be verified.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了密码，`verify_password`就可以用来验证提供的密码是否正确。因此，它需要两个参数：哈希密码和应该被验证的新密码。
- en: The first thing `verify_password` does is extract the salt from the hashed password
    (remember, we placed it as the first 64 characters of the string resulting from
    `hash_password`).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`verify_password`的第一件事是从哈希密码中提取盐（记住，我们将它放在`hash_password`结果字符串的前64个字符中）。'
- en: The extracted salt and the password candidate are then provided to `pbkdf2_hmac`
    to compute their hash and then convert it into a string with `binascii.hexlify`.
    If the resulting hash matches with the hash part of the previously stored password
    (the characters after the salt), it means that the two passwords match.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将提取的盐和密码候选者提供给`pbkdf2_hmac`，计算它们的哈希，然后将其转换为一个字符串，使用`binascii.hexlify`。如果生成的哈希与先前存储的密码的哈希部分匹配（盐后的字符），这意味着这两个密码匹配。
- en: If the resulting hash doesn't match, it means that the provided password is
    wrong. As you can see, it's very important that we made the salt and the password
    available together, because we need it to be able to verify the password, and
    a different salt would result in a different hash and thus we'd never be able
    to verify the password.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果结果哈希不匹配，这意味着提供的密码是错误的。正如你所看到的，我们非常重要的是将盐和密码一起提供，因为我们需要它来验证密码，不同的盐会导致不同的哈希，因此我们永远无法验证密码。
- en: Verifying a file's integrity
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证文件的完整性
- en: If you've ever downloaded a file from a public network, you might have noticed
    that their URLs are frequently in the form of `http://files.host.com/somefile.tar.gz#md5=3b3f5b2327421800ef00c38ab5ad81a6`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经从公共网络下载过文件，你可能会注意到它们的URL经常是这种形式：`http://files.host.com/somefile.tar.gz#md5=3b3f5b2327421800ef00c38ab5ad81a6`。
- en: That's because the download might go wrong and the data you got might be partially
    corrupted. So the URL includes an MD5 hash that you can use to verify that the
    downloaded file is fine through the `md5sum` tool.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为下载可能出错，你得到的数据可能部分损坏。因此URL包含了一个MD5哈希，你可以使用`md5sum`工具来验证下载的文件是否正确。
- en: The same applies when you download a file from a Python script. If the file
    provided has an MD5 hash for verification, you might want to check whether the
    retrieved file is valid and, in cases where it is not, then you can retry downloading
    it again.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从Python脚本下载文件时也是一样。如果提供的文件有一个MD5哈希用于验证，你可能想要检查检索到的文件是否有效，如果不是，那么你可以重新尝试下载它。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Within `hashlib`, there are multiple supported hashing algorithms, and probably
    the most widespread one is `md5`, so we can rely on `hashlib` to verify our downloaded
    file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在`hashlib`中，有多种受支持的哈希算法，而且可能最常见的是`md5`，因此我们可以依靠`hashlib`来验证我们下载的文件：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Our file can then be downloaded and verified with `verify_file`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用`verify_file`下载并验证我们的文件。
- en: For example, I might download the `wrapt` distribution from the **Python Package
    Index** (**PyPI**) and I might want to verify that it was correctly downloaded.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我可能从**Python Package Index** (**PyPI**)下载`wrapt`分发包，并且我可能想要验证它是否已正确下载。
- en: 'The file name would be `wrapt-1.10.11.tar.gz#sha256=d4d560d479f2c21e1b5443bbd15fe7ec4b37fe7e53d335d3b9b0a7b1226fe3c6`
    on which I could run my `verify_file` function:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名将是`wrapt-1.10.11.tar.gz#sha256=d4d560d479f2c21e1b5443bbd15fe7ec4b37fe7e53d335d3b9b0a7b1226fe3c6`，我可以运行我的`verify_file`函数：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first thing the function does is open the file in binary mode. As all hash
    functions require bytes and we don't even know the content of the file, reading
    it in binary mode is the most convenient solution.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的第一步是以二进制模式打开文件。由于所有哈希函数都需要字节，而且我们甚至不知道文件的内容，因此以二进制模式读取文件是最方便的解决方案。
- en: Then, it checks whether the requested hashing algorithm is available in `hashlib`.
    That's done through `getattr` by trying to grab `hashlib.md5`, `hashlib.sha256`,
    and so on. If the algorithm is not supported, it won't be a valid `hashlib` attribute
    (as it won't exist in the module) and will throw `AttributeError`. To make those
    easier to understand, they are trapped and a new `ValueError` is raised that states
    clearly that the algorithm is not supported.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它检查所请求的哈希算法是否在`hashlib`中可用。通过`getattr`通过尝试抓取`hashlib.md5`，`hashlib.sha256`等来完成。如果不支持该算法，它将不是有效的`hashlib`属性（因为它不会存在于模块中），并且将抛出`AttributeError`。为了使这些更容易理解，它们被捕获并引发了一个新的`ValueError`，清楚地说明该算法不受支持。
- en: Once the file is opened and the algorithm is verified, an empty hash gets created
    (notice that right after `getattr`, the parenthesis will lead to the creation
    of the returned hash).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 文件打开并验证算法后，将创建一个空哈希（请注意，在`getattr`之后，括号将导致返回的哈希的创建）。
- en: We start with an empty one because the file might be very big, and we don't
    want to read the complete file and throw it at the hashing function at once.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个空的开始，因为文件可能非常大，我们不想一次性读取完整的文件并将其一次性传递给哈希函数。
- en: Instead, we start with an empty hash and we read the file in chunks of 4 KB,
    then each chunk is fed to the hashing algorithm to update the hash.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们从一个空哈希开始，并且以4 KB的块读取文件，然后将每个块馈送到哈希算法以更新哈希。
- en: Finally, once we have the hash computed, we grab its representation as hexadecimal
    numbers and compare it to the one provided to the function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦我们计算出哈希，我们就会获取其十六进制数表示，并将其与函数提供的哈希进行比较。
- en: If the two match, the file was properly downloaded.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两者匹配，那么文件就是正确下载的。
- en: Verifying a message's integrity
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证消息的完整性
- en: When sending messages through a public network or storages accessible to other
    users and systems, we need to know whether the message contains the original content
    or whether it was intercepted and modified by anyone.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过公共网络或对其他用户和系统可访问的存储发送消息时，我们需要知道消息是否包含原始内容，或者是否被任何人拦截和修改。
- en: That's a typical form of a man-in-the-middle attack and it's something that
    can modify anything in our content, which is stored in a place that other people
    can read too, such as an unencrypted network or a disk on a shared system.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种典型的中间人攻击形式，它可以修改我们内容中的任何内容，这些内容存储在其他人也可以阅读的地方，例如未加密的网络或共享系统上的磁盘。
- en: The HMAC algorithm can be used to guarantee that a message wasn't altered from
    its original state and it's frequently used to sign digital documents to ensure
    their integrity.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: HMAC算法可用于保证消息未从其原始状态更改，并且经常用于签署数字文档以确保其完整性。
- en: 'A good scenario for HMAC might be a password-reset link; those links usually
    include a parameter about the user for whom the password should be reset: [http://myapp.com/reset-password?user=myuser@email.net](http://myapp.com/reset-password?user=myuser@email.net).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: HMAC的一个很好的应用场景可能是密码重置链接；这些链接通常包括有关应该重置密码的用户的参数：[http://myapp.com/reset-password?user=myuser@email.net](http://myapp.com/reset-password?user=myuser@email.net)。
- en: But anyone might replace the user argument and reset other people's passwords.
    So, we want to ensure that the link we provide wasn't actually modified, since
    it was sent by attaching an HMAC to it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，任何人都可以替换用户参数并重置其他人的密码。因此，我们希望确保我们提供的链接实际上没有被修改，因为它是通过附加HMAC发送的。
- en: 'That will result in something such as: [http://myapp.com/reset-password?user=myuser@email.net&signature=8efc6e7161004cfb09d05af69cc0af86bb5edb5e88bd477ba545a9929821f582](http://myapp.com/reset-password?user=myuser@email.net&signature=8efc6e7161004cfb09d05af69cc0af86bb5edb5e88bd477ba545a9929821f582).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致类似于以下内容：[http://myapp.com/reset-password?user=myuser@email.net&signature=8efc6e7161004cfb09d05af69cc0af86bb5edb5e88bd477ba545a9929821f582](http://myapp.com/reset-password?user=myuser@email.net&signature=8efc6e7161004cfb09d05af69cc0af86bb5edb5e88bd477ba545a9929821f582)。
- en: Furthermore, any attempt at modifying the user will make the signature invalid,
    thus making it impossible to reset other people's passwords.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，任何尝试修改用户都将使签名无效，从而使其无法重置其他人的密码。
- en: Another use case is deploying REST APIs to authenticate and verify requests.
    Amazon Web Services uses HMAC as an authentication system for its web services.
    When you register, an access key and a secret are provided to you. Any request
    you make must be hashed with HMAC, using the secret key to ensure that you are
    actually the user stated in the request (as you owned its secret key), and the
    request itself wasn't changed in any way because details of it are hashed with
    HMAC too.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用例是部署REST API以验证和验证请求。亚马逊网络服务使用HMAC作为其网络服务的身份验证系统。注册时，会为您提供访问密钥和密钥。您发出的任何请求都必须使用HMAC进行哈希处理，使用密钥来确保您实际上是请求中所述的用户（因为您拥有其密钥），并且请求本身没有以任何方式更改，因为它的详细信息也使用HMAC进行了哈希处理。
- en: The HMAC signature is frequently involved in cases where your software has to
    send messages to itself or receive messages from a verified partner that can own
    a secret key.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: HMAC签名经常涉及到软件必须向自身发送消息或从拥有密钥的验证合作伙伴接收消息的情况。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, the following steps are to be performed:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，需要执行以下步骤：
- en: 'The standard library provides an `hmac` module that, combined with the hashing
    functions provided in `hashlib`, can serve the purpose of computing the message''s
    authentication code for any provided message:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准库提供了一个 `hmac` 模块，结合 `hashlib` 提供的哈希函数，可以用于计算任何提供的消息的身份验证代码：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our functions can then be used to compute a signed message and we can check
    that a signed message wasn''t altered in any way:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们的函数可以用来计算签名消息，并且我们可以检查签名消息是否被以任何方式更改：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you try to change the message field of the signed message, it won''t be
    valid anymore, and only the real message will match the signature:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尝试更改签名消息的消息字段，它将不再有效，只有真实的消息才能匹配签名：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Our purpose is to ensure that any given message can't be changed in any way
    or it will invalidate the signature attached to the message.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目的是确保任何给定的消息都不能以任何方式更改，否则将使附加到消息的签名无效。
- en: So the `compute_signature` function, given a message and a private secret key,
    returns all the data that the signed message should include when it's sent to
    the receiver. The sent data includes the message itself, the signature, and a
    timestamp. The timestamp is included because, in many cases, it's a good idea
    to ensure that the message is a recent one. If you are receiving an API request
    signed with HMAC or a cookie that you just set, you might want to ensure that
    you are handling a recent message and not one that was sent an hour ago. The timestamp
    can't be tampered with as it's included in the signature together with the message,
    and its presence makes it harder for attackers to guess the secret key, as two
    identical messages will result in having two different signatures, thanks to the
    timestamp.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`compute_signature` 函数在给定消息和私有密钥的情况下，返回发送到接收方时签名消息应包括的所有数据。发送的数据包括消息本身、签名和时间戳。时间戳包括在内，因为在许多情况下，确保消息是最近的消息是一个好主意。如果您收到使用HMAC签名的API请求或刚刚设置的cookie，您可能希望确保您处理的是最近的消息，而不是一个小时前发送的消息。时间戳无法被篡改，因为它与消息一起包括在签名中，其存在使得攻击者更难猜测密钥，因为两个相同的消息将导致有两个不同的签名，这要归功于时间戳。
- en: Once the message and the timestamp are known, the `compute_signature` function
    hands them to `hmac.new`, together with the secret key, to compute the signature
    itself. For convenience, the signature is represented as the characters that compose
    the hexadecimal numbers that represent the bytes the signature is made of. This
    ensures that it can be transferred as plain text in HTTP headers or some similar
    manner.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦消息和时间戳已知，`compute_signature` 函数将它们与密钥一起传递给 `hmac.new`，以计算签名本身。为了方便起见，签名被表示为组成十六进制数字的字符，这些数字表示签名由哪些字节组成。这确保它可以作为纯文本在HTTP标头或类似方式中传输。
- en: Once we have our signed message as returned by `compute_signature`, this can
    be stored somewhere and, when loading it back, we can use `verify_signature` to
    check that it wasn't tampered with.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到了由 `compute_signature` 返回的签名消息，可以将其存储在某个地方，并在加载时使用 `verify_signature`
    来检查它是否被篡改。
- en: The `verify_signature` function takes the same steps as `compute_signature`.
    The signed message includes the message itself, the timestamp, and the signature.
    So `verify_signature` grabs the message and the timestamp and joins them with
    the secret key to compute the signature. If the computed signature matches the
    signature provided in the signed message, it means the message wasn't altered
    in any way. Otherwise, even a minor change to the message or to the timestamp
    will make the signature invalid.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`verify_signature` 函数执行与 `compute_signature` 相同的步骤。签名的消息包括消息本身、时间戳和签名。因此，`verify_signature`
    获取消息和时间戳，并与密钥结合计算签名。如果计算得到的签名与签名消息中提供的签名匹配，这意味着消息没有被以任何方式更改。否则，即使对消息或时间戳进行微小更改，签名也将无效。'
