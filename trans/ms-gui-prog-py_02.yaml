- en: Getting Started with PyQt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用PyQt
- en: Welcome, Python programmer!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎，Python程序员！
- en: Python is a great language for system administration, data analysis, web services,
    and command-line programs; most likely you've already found Python useful in at
    least one of those areas. However, there is something truly satisfying about building
    the kind of GUI-driven application that an end user can readily identify as a
    program, and this skill should be in the toolbox of any master software developer.
    In this book, you're going to learn how you can use Python and the Qt framework
    to develop amazing applications—from simple data-entry forms to powerful multimedia
    tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一个用于系统管理、数据分析、Web服务和命令行程序的优秀语言；很可能您已经在其中至少一个领域发现了Python的用处。然而，构建出用户可以轻松识别为程序的GUI驱动应用程序确实令人满意，这种技能应该是任何优秀软件开发人员的工具箱中的一部分。在本书中，您将学习如何使用Python和Qt框架开发令人惊叹的应用程序-从简单的数据输入表单到强大的多媒体工具。
- en: 'We''ll start our tour of these powerful technologies with the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从以下主题开始介绍这些强大的技术：
- en: Introducing Qt and PyQt
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Qt和PyQt
- en: Creating `Hello Qt` – our first window
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`Hello Qt`-我们的第一个窗口
- en: Creating a PyQt application template
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建PyQt应用程序模板
- en: Introducing Qt Designer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Qt Designer
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, and most of the rest of the book, you''re going to need the
    following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章和本书的大部分内容，您将需要以下内容：
- en: A PC running **Microsoft Windows**, **Apple macOS**, or a 64-bit flavor of **GNU/Linux**.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行**Microsoft Windows**，**Apple macOS**或64位**GNU/Linux**的PC。
- en: '**Python 3**, available from [http://www.python.org](http://www.python.org).
    The code in this book requires Python 3.7 or later.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 3**，可从[http://www.python.org](http://www.python.org)获取。本书中的代码需要Python
    3.7或更高版本。'
- en: '**PyQt 5.12**, which you can install from the Python Package Index using this
    command:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyQt 5.12**，您可以使用以下命令从Python软件包索引中安装：'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Linux users may also wish to install PyQt5 from their distribution's package
    repositories.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux用户也可以从其发行版的软件包存储库中安装PyQt5。
- en: '**Qt Designer 4.9**, a WYSIWYG GUI building tool available from [https://www.qt.io](https://www.qt.io).
    See the following section for installation instructions.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Designer 4.9**是一款来自[https://www.qt.io](https://www.qt.io)的所见即所得的GUI构建工具。有关安装说明，请参阅以下部分。'
- en: The **example code** from [https://github.com/PacktPublishing/Mastering-GUI-Programming-with-Python/tree/master/Chapter01](https://github.com/PacktPublishing/Mastering-GUI-Programming-with-Python/tree/master/Chapter01)[.](https://github.com/PacktPublishing/Mastering-GUI-Programming-with-Python/tree/master/Chapter01)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[https://github.com/PacktPublishing/Mastering-GUI-Programming-with-Python/tree/master/Chapter01](https://github.com/PacktPublishing/Mastering-GUI-Programming-with-Python/tree/master/Chapter01)的**示例代码**[.](https://github.com/PacktPublishing/Mastering-GUI-Programming-with-Python/tree/master/Chapter01)
- en: Check out the following video to see the code in action: [http://bit.ly/2M5OUeg](http://bit.ly/2M5OUeg)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的运行情况：[http://bit.ly/2M5OUeg](http://bit.ly/2M5OUeg)
- en: Installing Qt Designer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Qt Designer
- en: On Windows or macOS, Qt Designer is part of the Qt Creator IDE from the Qt company.
    This is a free IDE that you can use for coding, though, at the time of writing,
    it is mainly aimed at C++ and support for Python is rudimentary. The Qt Designer
    component can be used regardless of whether you do your coding in Qt Creator or
    not.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows或macOS上，Qt Designer是Qt公司的Qt Creator IDE的一部分。这是一个免费的IDE，您可以用来编码，尽管在撰写本文时，它主要面向C++，对Python的支持还很初级。无论您是否在Qt
    Creator中编写代码，都可以使用Qt Designer组件。
- en: You can download an installer for Qt Creator from [https://download.qt.io/official_releases/qtcreator/4.9/4.9.0/](https://download.qt.io/official_releases/qtcreator/4.9/4.9.0/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://download.qt.io/official_releases/qtcreator/4.9/4.9.0/](https://download.qt.io/official_releases/qtcreator/4.9/4.9.0/)下载Qt
    Creator的安装程序。
- en: Although the Qt company offers a similar standalone Qt installer for Linux,
    most Linux users will prefer to use packages from their distribution's repositories.
    Some distributions offer Qt Designer as a standalone application, while others
    include it in their Qt Creator packages.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Qt公司为Linux提供了类似的独立Qt安装程序，但大多数Linux用户更倾向于使用其发行版存储库中的软件包。一些发行版提供Qt Designer作为独立应用程序，而其他发行版则将其包含在其Qt
    Creator软件包中。
- en: 'This table shows the package that will install Qt Designer in several major
    distributions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此表显示了在几个主要发行版中安装Qt Designer的软件包：
- en: '| Distribution | Package name |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 发行版 | 软件包名称 |'
- en: '| --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Ubuntu, Debian, Mint | `qttools5-dev-tools` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Ubuntu，Debian，Mint | `qttools5-dev-tools` |'
- en: '| Fedora, CentOS, Red Hat, SUSE | `qt-creator` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| Fedora，CentOS，Red Hat，SUSE | `qt-creator` |'
- en: '| Arch, Manjaro, Antergos | `qt5-tools` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| Arch，Manjaro，Antergos | `qt5-tools` |'
- en: Introducing Qt and PyQt
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Qt和PyQt
- en: Qt is a cross-platform application framework that was created for use with C++.
    Available in both commercial and open source licenses (**General Public License** (**GPL**)
    v3 and **Lesser General Public License** (**LGPL**) v3, specifically), it is widely
    used by open source projects such as KDE Plasma and Oracle VirtualBox, commercial
    software such as Adobe Photoshop Elements and Autodesk Maya, and even embedded
    software in products from companies such as LG and Panasonic. Qt is currently
    owned and maintained by the Qt company ([https://www.qt.io](https://www.qt.io)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Qt是一个为C++设计的跨平台应用程序框架。它有商业和开源许可证（**通用公共许可证**（**GPL**）v3和**较宽松的通用公共许可证**（**LGPL**）v3），被广泛应用于开源项目，如KDE
    Plasma和Oracle VirtualBox，商业软件如Adobe Photoshop Elements和Autodesk Maya，甚至是LG和Panasonic等公司产品中的嵌入式软件。Qt目前由Qt公司（[https://www.qt.io](https://www.qt.io)）拥有和维护。
- en: In this book, we're going to be working with the open source release of Qt 5.12\.
    If you're using Windows, macOS, or a major Linux distribution, you should not
    need to install Qt explicitly; it will be installed automatically when you install
    PyQt5.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Qt 5.12的开源版本。如果您使用的是Windows、macOS或主要的Linux发行版，您不需要显式安装Qt；当您安装PyQt5时，它将自动安装。
- en: Qt is officially pronounced **cute**, though many people say, **Q T**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Qt的官方发音是**cute**，尽管许多人说**Q T**。
- en: PyQt5
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyQt5
- en: PyQt is a Python library that allows the Qt framework to be used in Python code.
    It was developed by Riverbank Computing under the GPL license, although commercial
    licenses can be purchased for those wanting to develop proprietary applications.
    (Note that this is a separate license from the Qt license.) It is currently supported
    on Windows, Linux, UNIX, Android, macOS, and iOS.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt是一个允许Qt框架在Python代码中使用的Python库。它是由Riverbank Computing在GPL许可下开发的，尽管商业许可证可以用于购买想要开发专有应用程序的人。（请注意，这是与Qt许可证分开的许可证。）它目前支持Windows、Linux、UNIX、Android、macOS和iOS。
- en: PyQt's bindings are generated automatically by a tool called **SIP**, so, to
    a large extent, working with PyQt is just like working with Qt itself, only in
    Python. In other words, the classes, methods, and other objects are all identical
    in usage, apart from the language syntax.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt的绑定是由一个名为**SIP**的工具自动生成的，因此，在很大程度上，使用PyQt就像在Python中使用Qt本身一样。换句话说，类、方法和其他对象在用法上都是相同的，除了语言语法。
- en: The Qt company has recently released **Qt for Python** (also known as **PySide2**),
    their own Python Qt5 library, under the terms of the LGPL. Qt for Python is functionally
    equivalent to PyQt5, and code can be ported between them with very few changes.
    This book will cover PyQt5, but what you learn can easily be applied to Qt for
    Python, should you need an LGPL library.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Qt公司最近发布了**Qt for Python**（也称为**PySide2**），他们自己的Python Qt5库，遵循LGPL条款。 Qt for
    Python在功能上等同于PyQt5，代码可以在它们之间进行很少的更改。本书将涵盖PyQt5，但您学到的知识可以轻松应用于Qt for Python，如果您需要一个LGPL库。
- en: Working with Qt and PyQt
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt和PyQt
- en: Qt is much more than a GUI library; it's an application framework. It contains
    dozens of modules with thousands of classes. It has classes to wrap simple data
    types such as dates, times, URLs, or color values. It has GUI components such
    as buttons, text entries, or dialog boxes. It has interfaces for hardware such
    as cameras or mobile sensors. It has a networking library, a threading library,
    and a database library. If anything, Qt is truly a second standard library!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Qt不仅仅是一个GUI库；它是一个应用程序框架。它包含数十个模块，数千个类。它有用于包装日期、时间、URL或颜色值等简单数据类型的类。它有GUI组件，如按钮、文本输入或对话框。它有用于硬件接口，如相机或移动传感器的接口。它有一个网络库、一个线程库和一个数据库库。如果说什么，Qt真的是第二个标准库！
- en: Qt is written in C++ and designed around the needs of C++ programmers; it works
    well with Python, but Python programmers may find some of its concepts slightly
    foreign at first.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Qt是用C++编写的，并且围绕C++程序员的需求进行设计；它与Python很好地配合，但Python程序员可能会发现它的一些概念起初有些陌生。
- en: For example, Qt objects usually expect to work with data wrapped in Qt classes.
    A method that expects a color value won't accept a string or a tuple of RGB values;
    it wants a `QColor` object. A method that returns a size won't return a `(width,
    height)` tuple; it will return a `QSize` object. PyQt mitigates this somewhat
    by automatically converting some common data types (for example, strings, lists,
    dates, and times) between Qt objects and Python standard library types; however,
    there are many hundreds of Qt classes that have no analog in the Python standard
    library.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Qt对象通常希望使用包装在Qt类中的数据。一个期望颜色值的方法不会接受字符串或RGB值的元组；它需要一个`QColor`对象。一个返回大小的方法不会返回`(width,
    height)`元组；它会返回一个`QSize`对象。PyQt通过自动在Qt对象和Python标准库类型之间转换一些常见数据类型（例如字符串、列表、日期和时间）来减轻这种情况；然而，Python标准库中没有与Qt类对应的数百个Qt类。
- en: Qt relies heavily on named constants called **enums** or **flags** to represent
    things such as option settings or configuration values. For example, if you wanted
    to switch the state of a window between minimized, floating, or maximized, you
    would need to pass the window a constant that is found in the `QtCore.Qt.WindowState`
    enum.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Qt在很大程度上依赖于称为**enums**或**flags**的命名常量来表示选项设置或配置值。例如，如果您想要在最小化、浮动或最大化之间切换窗口的状态，您需要传递一个在`QtCore.Qt.WindowState`枚举中找到的常量给窗口。
- en: Setting or retrieving values on Qt objects requires the use of **accessor**
    methods, sometimes known as setter and getter methods, rather than direct access
    to the properties.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt对象上设置或检索值需要使用**访问器**方法，有时也称为设置器和获取器方法，而不是直接访问属性。
- en: To the Python programmer, Qt can seem to have an almost maniacal obsession with
    defining classes and constants, and you'll spend a lot of time early on searching
    the documentation to locate the item you need to configure your objects. Don't
    despair! You'll soon become acclimated to the Qt way of working.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python程序员来说，Qt似乎有一种近乎狂热的执着于定义类和常量，你会花费很多时间在早期搜索文档以定位需要配置对象的项目。不要绝望！您很快就会适应Qt的工作方式。
- en: Understanding Qt's documentation
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Qt的文档
- en: Qt is such a vast and complex library that no print book could hope to document
    a significant portion of it in any detail. For that reason, it's important to
    learn how to access and understand the documentation available online. For Python
    programmers, this presents a minor challenge.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Qt是一个庞大而复杂的库，没有任何印刷书籍能够详细记录其中的大部分内容。因此，学会如何访问和理解在线文档非常重要。对于Python程序员来说，这是一个小挑战。
- en: Qt itself is blessed with detailed and excellent documentation that documents
    all Qt modules and classes, including example code and high-level tutorials on
    coding with Qt. However, this documentation is all aimed at C++ development; all
    example code is in C++, and there is no indication when a methodology or approach
    to a problem differs for Python.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Qt本身拥有详细和优秀的文档，记录了所有Qt模块和类，包括示例代码和关于使用Qt进行编码的高级教程。然而，这些文档都是针对C++开发的；所有示例代码都是C++，并且没有指示Python的方法或解决问题的方法何时有所不同。
- en: PyQt's documentation is considerably sparser. It only covers the Python-specific
    differences and lacks the comprehensive class reference, example code, and tutorials
    that make Qt's documentation great. It is an essential read for anyone working
    with PyQt, but it's by no means complete.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt的文档要少得多。它只涵盖了与Python相关的差异，并缺乏全面的类参考、示例代码和教程，这些都是Qt文档的亮点。对于任何使用PyQt的人来说，这是必读的，但它并不完整。
- en: With the release of Qt for Python, there is an effort underway to port Qt's
    C++ documentation to Python at [https://doc-snapshots.qt.io/qtforpython/](https://doc-snapshots.qt.io/qtforpython/).
    When finished, this will also be a valuable resource for PyQt programmers. At
    the time of writing, though, the effort is far from complete; in any case, there
    are minor differences between PyQt and Qt for Python that may make this documentation
    as confusing as it is helpful.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Qt for Python的发布，正在努力将Qt的C++文档移植到Python，网址为[https://doc-snapshots.qt.io/qtforpython/](https://doc-snapshots.qt.io/qtforpython/)。完成后，这也将成为PyQt程序员的宝贵资源。不过，在撰写本文时，这一努力还远未完成；无论如何，PyQt和Qt
    for Python之间存在细微差异，这可能使这些文档既有帮助又令人困惑。
- en: If you have a rudimentary knowledge of C++ syntax, it's not too difficult to
    mentally translate the Qt documentation to Python, though it can be confusing
    in many cases. One of the aims of this book is to close the gap for those who
    aren't well-versed in C++.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对C++语法有一些基本的了解，将Qt文档精神翻译成Python并不太困难，尽管在许多情况下可能会令人困惑。本书的目标之一是弥合那些对C++不太熟悉的人的差距。
- en: Core Qt modules
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心Qt模块
- en: 'For the first six chapters of this book, we''ll be working primarily with three
    Qt modules:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前六章中，我们将主要使用三个Qt模块：
- en: '`QtCore`, which contains low-level data wrapper classes, utility functions,
    and non-GUI core functionality'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore`包含低级数据包装类、实用函数和非GUI核心功能'
- en: '`QtGui`, which contains GUI-specific data wrapper classes and utilities'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui`包含特定于GUI的数据包装类和实用程序'
- en: '`QtWidgets`, which defines GUI widgets, layouts, and other high-level GUI components'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets`定义了GUI小部件、布局和其他高级GUI组件'
- en: Those three modules will be used in nearly any PyQt program we write. Later
    in the book, we will explore other modules for graphics, networking, web rendering,
    multimedia, and other advanced capabilities.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个模块将在我们编写的任何PyQt程序中使用。本书后面，我们将探索其他用于图形、网络、Web渲染、多媒体和其他高级功能的模块。
- en: Creating Hello Qt – our first window
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Hello Qt-我们的第一个窗口
- en: Now that you've learned about Qt5 and PyQt5, it's time to dig in and do some
    coding. Make sure everything is installed, open your favorite Python editor or
    IDE, and let's begin!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了Qt5和PyQt5，是时候深入了解并进行一些编码了。确保一切都已安装好，打开您喜爱的Python编辑器或IDE，让我们开始吧！
- en: 'Create a `hello_world.py` file in your editor, and enter the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的编辑器中创建一个`hello_world.py`文件，并输入以下内容：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We begin by importing the `QtWidgets` module. This module contains the bulk
    of the widget classes in Qt, as well as some other important components for GUI
    creation. We won't need `QtGui` or `QtCore` for such a simple application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入`QtWidgets`模块。该模块包含Qt中大部分的小部件类，以及一些其他重要的用于GUI创建的组件。对于这样一个简单的应用程序，我们不需要`QtGui`或`QtCore`。
- en: 'Next, we need to create a `QApplication` object, like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个`QApplication`对象，如下所示：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `QApplication` object represents the state of our running application, and
    one must be created before any other Qt widgets can be created. `QApplication`
    is supposed to be passed a list of command-line arguments given to our script,
    but here we're just passing in an empty list.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`QApplication`对象表示我们运行应用程序的状态，必须在创建任何其他Qt小部件之前创建。`QApplication`应该接收一个传递给我们脚本的命令行参数列表，但在这里我们只是传递了一个空列表。'
- en: 'Now, let''s create our first widget:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的第一个小部件：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In GUI toolkit terms, a **widget** refers to the visible components of the GUI,
    such as buttons, labels, text entries, or blank panels. The most generic widget
    in Qt is the `QWidget` object, which is just a blank window or panel. As we create
    this widget, we're settings its `windowTitle` to `'Hello Qt'`. `windowTitle` is
    what is known as **property**. All Qt objects and widgets have properties, which
    are used to configure different aspects of the widget. In this case, `windowTitle`
    is the name of the program window and appears in the window decorations, on the
    taskbar or dock, or wherever else your OS and desktop environment choose to use
    it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在GUI工具包术语中，**小部件**指的是GUI的可见组件，如按钮、标签、文本输入或空面板。在Qt中，最通用的小部件是`QWidget`对象，它只是一个空白窗口或面板。在创建此小部件时，我们将其`windowTitle`设置为`'Hello
    Qt'`。`windowTitle`就是所谓的**属性**。所有Qt对象和小部件都有属性，用于配置小部件的不同方面。在这种情况下，`windowTitle`是程序窗口的名称，并显示在窗口装饰、任务栏或停靠栏等其他地方，取决于您的操作系统和桌面环境。
- en: Unlike most Python libraries, Qt properties and methods are named using **camelCase**
    rather than **snake_case**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数Python库不同，Qt属性和方法使用**驼峰命名法**而不是**蛇形命名法**。
- en: 'The properties available for configuring a Qt object can be set by passing
    them as constructor arguments or using the appropriate setter method. Typically,
    this is just `set` plus the name of the property, so we could have written this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用于配置Qt对象的属性可以通过将它们作为构造函数参数传递或使用适当的setter方法进行设置。通常，这只是`set`加上属性的名称，所以我们可以这样写：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Properties can also be retrieved using the getter method, which is just the
    property name:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 属性也可以使用getter方法进行检索，这只是属性名称：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once a widget is created, we can make it appear by calling `show()`, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建小部件后，我们可以通过调用`show()`使其显示，如下所示：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Calling `show()` automatically makes `window` a top-level window of its own.
    In [Chapter 2](2e39f2dd-7df5-4139-8c26-1fec2dfb68d0.xhtml), *Building Forms with
    Qt Widgets*, you'll see how to place widgets inside other widgets, but, for this
    program, we only need one top-level widget.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`show()`会自动使`window`成为自己的顶级窗口。在[第2章](2e39f2dd-7df5-4139-8c26-1fec2dfb68d0.xhtml)中，*使用Qt小部件构建表单*，您将看到如何将小部件放置在其他小部件内，但是对于这个程序，我们只需要一个顶级小部件。
- en: 'The last line is a call to `app.exec()`, like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行是对`app.exec()`的调用，如下所示：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`app.exec()` begins the `QApplication` object **event loop.** The event loop
    will run forever until the application quits, processing our user interactions
    with the GUI. Note that the `app` object never refers to `window`, nor `window`
    to the `app` object. These objects are connected automatically in the background;
    you need only ensure that a `QApplication` object exists before creating any `QWidget`
    objects.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.exec()`开始`QApplication`对象的**事件循环**。事件循环将一直运行，直到应用程序退出，处理我们与GUI的用户交互。请注意，`app`对象从不引用`window`，`window`也不引用`app`对象。这些对象在后台自动连接；您只需确保在创建任何`QWidget`对象之前存在一个`QApplication`对象。'
- en: 'Save the `hello_world.py` file and run the script from your editor, or from
    a command line, like so:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 保存`hello_world.py`文件并从编辑器或命令行运行脚本，就像这样：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you run this, you should see a blank window whose title text is `Hello
    Qt`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此代码时，您应该会看到一个空白窗口，其标题文本为`Hello Qt`：
- en: '![](assets/6ccffe2a-ed42-4818-b83f-433e4fb47c03.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6ccffe2a-ed42-4818-b83f-433e4fb47c03.png)'
- en: 'This isn''t a terribly exciting application, but it does show us the basic
    workflow of any PyQt application:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个非常激动人心的应用程序，但它确实展示了任何PyQt应用程序的基本工作流程：
- en: Create a `QApplication` object
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`QApplication`对象
- en: Create our main application window
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建我们的主应用程序窗口
- en: Display our main application window
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示我们的主应用程序窗口
- en: Call `QApplication.exec()` to start the event loop
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`QApplication.exec()`来启动事件循环
- en: 'If you''re experimenting with PyQt in the Python **Read-Eval-Print-Loop** (**REPL**),
    create the `QApplication` object by passing in a list with a single empty string,
    like this: `QtWidgets.QApplication([''''])`; otherwise, Qt will crash. Also, you
    don''t need to call `QApplication.exec()` in the REPL, thanks to some special
    PyQt magic.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Python的**Read-Eval-Print-Loop**（**REPL**）中尝试使用PyQt，请通过传入一个包含单个空字符串的列表来创建`QApplication`对象，就像这样：`QtWidgets.QApplication([''])`；否则，Qt会崩溃。此外，在REPL中不需要调用`QApplication.exec()`，这要归功于一些特殊的PyQt魔法。
- en: Creating a PyQt application template
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个PyQt应用程序模板
- en: '`hello_world.py` demonstrated the bare minimum of code to get a Qt window on
    the screen, but it''s a bit too simplistic to serve as a model for more complex
    applications. In this book, we''re going to be creating many PyQt applications,
    so, to make things easier, we''re going to compose a basic application template.
    Future chapters will refer to this template, so make sure to create it exactly
    as specified.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`hello_world.py`演示了在屏幕上显示Qt窗口的最低限度的代码，但它过于简单，无法作为更复杂应用程序的模型。在本书中，我们将创建许多PyQt应用程序，因此为了简化事情，我们将组成一个基本的应用程序模板。未来的章节将参考这个模板，所以确保按照指定的方式创建它。'
- en: 'Open a new file called `qt_template.py`, and add in these imports:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个名为`qt_template.py`的新文件，并添加这些导入：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We'll start with importing `sys`, so that we can pass `QApplication` an actual
    list of script arguments; then we'll import our three main Qt modules. To save
    some typing, while avoiding star imports, we're going to alias them to abbreviated
    names. We'll be using these aliases consistently throughout the book as well.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从导入`sys`开始，这样我们就可以向`QApplication`传递一个实际的脚本参数列表；然后我们将导入我们的三个主要Qt模块。为了节省一些输入，同时避免星号导入，我们将它们别名为缩写名称。我们将在整本书中一贯使用这些别名。
- en: Star imports (also called **wildcard imports**), such as `from PyQt5.QtWidgets
    import *`, are convenient and often seen in tutorials, but, in practice, they
    are best avoided. Doing this with a PyQt module will fill your namespace with
    hundreds of classes, functions, and constants, any of which you might accidentally
    overwrite with a variable name. Avoiding star imports will also help you to learn
    which modules contain which commonly used classes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 星号导入（也称为**通配符导入**），例如`from PyQt5.QtWidgets import *`，在教程中很方便，但在实践中最好避免使用。这样做会使您的命名空间充满了数百个类、函数和常量，其中任何一个您可能会意外地用变量名覆盖。避免星号导入还将帮助您了解哪些模块包含哪些常用类。
- en: 'Next, we''ll create a `MainWindow` class, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个`MainWindow`类，如下所示：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To make our `MainWindow` class, we subclass `QWidget`, then override the constructor
    method. Whenever we use this template in future chapters, start adding your code
    between the commented lines unless otherwise instructed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的`MainWindow`类，我们对`QWidget`进行子类化，然后重写构造方法。每当我们在未来的章节中使用这个模板时，请在注释行之间开始添加您的代码，除非另有指示。
- en: Subclassing PyQt classes is a good way to approach GUI building. It allows us
    to customize and expand on Qt's powerful widget classes without having to reinvent
    the wheel. In many cases, subclassing is the only way to utilize certain classes
    or accomplish certain customizations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对PyQt类进行子类化是一种构建GUI的好方法。它允许我们定制和扩展Qt强大的窗口部件类，而无需重新发明轮子。在许多情况下，子类化是利用某些类或完成某些自定义的唯一方法。
- en: Our constructor ends with a call to `self.show()`, so our `MainWindow` will
    take care of showing itself.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的构造函数以调用`self.show()`结束，因此我们的`MainWindow`将负责显示自己。
- en: Always remember to call `super().__init__()` inside your child class's constructor,
    especially with Qt classes. Failing to do so means the parent class isn't properly
    set up and will undoubtedly cause very frustrating bugs.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 始终记得在子类的构造函数中调用`super().__init__()`，特别是在Qt类中。不这样做意味着父类没有得到正确设置，肯定会导致非常令人沮丧的错误。
- en: 'We''ll finish our template with the main code execution:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用主要的代码执行完成我们的模板：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this code, we're going to create our `QApplication` object, make our `MainWindow`
    object, and then call `QApplication.exec()`. Although not strictly necessary,
    it's best practice to create the `QApplication` object at the global scope (outside
    of any function or class). This ensures that all Qt objects get properly closed
    and cleaned up when the application quits.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们将创建我们的`QApplication`对象，制作我们的`MainWindow`对象，然后调用`QApplication.exec()`。虽然这并不是严格必要的，但最好的做法是在全局范围内创建`QApplication`对象（在任何函数或类的外部）。这确保了应用程序退出时所有Qt对象都能得到正确关闭和清理。
- en: Notice that we're passing `sys.argv` into `QApplication()`; Qt has several default
    command-line arguments that can be used for debugging or to alter styles and themes.
    These are processed by the `QApplication` constructor if you pass in `sys.argv`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们将`sys.argv`传递给`QApplication()`；Qt有几个默认的命令行参数，可以用于调试或更改样式和主题。如果你传入`sys.argv`，这些参数将由`QApplication`构造函数处理。
- en: Also, note that we're calling `app.exec()` inside a call to `sys.exit`; this
    is a small touch that causes the exit code of `app.exec()` to be passed to `sys.exit()`,
    so we pass appropriate exit codes to the OS, if the underlying Qt instance crashes
    for some reason.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，我们在调用`sys.exit`时调用了`app.exec()`；这是一个小技巧，使得`app.exec()`的退出代码传递给`sys.exit()`，这样如果底层的Qt实例由于某种原因崩溃，我们就可以向操作系统传递适当的退出代码。
- en: 'Finally, note that we''ve wrapped this block in this check:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，注意我们在这个检查中包装了这个块：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you''ve never seen this before, it''s a common Python idiom that simply
    means: only run this code if this script is called directly. By putting our main
    execution in this block, we could conceivably import this file into another Python
    script and be able to reuse our `MainWindow` class without running any of the
    code in this block.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未见过这个，这是一个常见的Python习语，意思是：只有在直接调用这个脚本时才运行这段代码。通过将我们的主要执行放在这个块中，我们可以想象将这个文件导入到另一个Python脚本中，并能够重用我们的`MainWindow`类，而不运行这个块中的任何代码。
- en: If you run your template code, you should see a blank application window. In
    the following chapters, we'll be filling that window with various widgets and
    functionality.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行你的模板代码，你应该会看到一个空白的应用程序窗口。在接下来的章节中，我们将用各种小部件和功能来填充这个窗口。
- en: Introducing Qt Designer
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Qt Designer
- en: Before we wrap up our introduction to Qt, let's look at a free tool offered
    by the Qt company that can help us create PyQt applications—Qt Designer.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束对Qt的介绍之前，让我们看看Qt公司提供的一个免费工具，可以帮助我们创建PyQt应用程序——Qt Designer。
- en: Qt Designer is a graphical **WYSIWYG GUI** designer for Qt. Using Qt Designer,
    you can drag and drop GUI components into an application and configure them without
    having to write any code at all. While it is certainly an optional tool, you may
    find it useful for prototyping, or preferable to hand-coding a large and complex
    GUI. While most of the code in this book will be hand-coded, we will be covering
    the use of Qt Designer with PyQt in [Chapter 2](2e39f2dd-7df5-4139-8c26-1fec2dfb68d0.xhtml), *Building
    Forms with Qt Widgets*, and [Chapter 3](dbb86a9b-0050-490e-94da-1f4661d8bc66.xhtml),
    *Handling Events with Signals and Slots*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Designer是一个用于Qt的图形WYSIWYG GUI设计师。使用Qt Designer，你可以将GUI组件拖放到应用程序中并配置它们，而无需编写任何代码。虽然它确实是一个可选工具，但你可能会发现它对于原型设计很有用，或者比手工编写大型和复杂的GUI更可取。虽然本书中的大部分代码将是手工编写的，但我们将在第2章《使用Qt小部件构建表单》和第3章《使用信号和槽处理事件》中介绍在PyQt中使用Qt
    Designer。
- en: Using Qt Designer
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt Designer
- en: 'Let''s take a moment to get familiar with how to launch and use Qt Designer:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间熟悉如何启动和使用Qt Designer：
- en: Launch Qt Creator
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Qt Creator
- en: Select File | New File or Project
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择文件|新建文件或项目
- en: Under Files and Classes, select Qt
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件和类下，选择Qt
- en: Choose Qt Designer Form
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Qt Designer表单
- en: Under Choose a Template Form, select Widget, then click Next
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择模板表单下，选择小部件，然后点击下一步
- en: Give your form a name and click Next
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给你的表单取一个名字，然后点击下一步
- en: Click Finish
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成
- en: 'You should see something that looks like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似这样的东西：
- en: '![](assets/76412061-910f-4543-a6b3-353931588943.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/76412061-910f-4543-a6b3-353931588943.png)'
- en: If you installed Qt Designer as a standalone application on Linux, launch it
    with the `designer` command or select it from your program's menu. You shouldn't
    need the previous steps.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Linux上将Qt Designer作为独立应用程序安装，可以使用`designer`命令启动它，或者从程序菜单中选择它。你不需要之前的步骤。
- en: 'Take a few minutes to test out Qt Designer:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 花几分钟时间来测试Qt Designer：
- en: Drag some widgets from the left pane onto your base widget
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从左侧窗格拖动一些小部件到基本小部件上
- en: Resize the widgets if you wish, or select one and examine its properties in
    the lower-right pane
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你愿意，可以调整小部件的大小，或者选择一个小部件并在右下角的窗格中查看它的属性
- en: When you've made several changes, select Tools | Form Editor | Preview, or hit
    *Alt* + *Shift* + *R*, to preview your GUI
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你做了几次更改后，选择工具|表单编辑器|预览，或者按*Alt* + *Shift* + *R*，来预览你的GUI。
- en: In [Chapter 2](2e39f2dd-7df5-4139-8c26-1fec2dfb68d0.xhtml), *Building Forms
    with Qt Widgets*, we'll go into detail on how to use Qt Designer to build a GUI
    interface; for now, you can find out more information about Qt Designer from the
    manual at [https://doc.qt.io/qt-5/qtdesigner-manual.html](https://doc.qt.io/qt-5/qtdesigner-manual.html).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2章《使用Qt小部件构建表单》中，我们将详细介绍如何使用Qt Designer构建GUI界面；现在，你可以在[https://doc.qt.io/qt-5/qtdesigner-manual.html](https://doc.qt.io/qt-5/qtdesigner-manual.html)的手册中找到更多关于Qt
    Designer的信息。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the Qt application framework and the PyQt
    Python bindings for Qt. We wrote a `Hello World` application and created a template
    for building larger Qt applications. Finally, we installed and took our first
    look at Qt Designer, the GUI editor.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了Qt应用程序框架和PyQt对Qt的Python绑定。我们编写了一个“Hello World”应用程序，并创建了一个构建更大的Qt应用程序的模板。最后，我们安装并初步了解了Qt
    Designer，这个GUI编辑器。
- en: In [Chapter 2](2e39f2dd-7df5-4139-8c26-1fec2dfb68d0.xhtml), *Building Forms
    with Qt Widgets*, we'll get familiar with some of the basic Qt widgets and learn
    how to resize and arrange them in a user interface. You'll then apply that knowledge
    by designing a calendar application in both code and Qt Designer.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2章《使用Qt小部件构建表单》中，我们将熟悉一些基本的Qt小部件，并学习如何调整和排列它们在用户界面中。然后，你将通过代码和Qt Designer设计一个日历应用程序来应用这些知识。
- en: Questions
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Try these questions to test your knowledge from this chapter:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这些问题来测试你从本章学到的知识：
- en: Qt is written in C++, a language that is very different from Python. What are
    some of the major differences between the two languages? How might these differences
    come across as we use Qt in Python?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Qt是用C++编写的，这是一种与Python非常不同的语言。这两种语言之间有哪些主要区别？在使用Python中的Qt时，这些区别可能会如何体现？
- en: GUIs are composed of widgets. Open some GUI applications on your computer and
    try to identify as many widgets as you can.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GUI由小部件组成。在计算机上打开一些GUI应用程序，并尝试识别尽可能多的小部件。
- en: 'The following program crashes. Figure out why, and fix it so that it shows
    a window:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下程序崩溃了。找出原因，并修复它以显示一个窗口：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `QWidget` class has a property called `statusTip`. Which of these are most
    likely to be the names of the accessor methods for this property?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`QWidget`类有一个名为`statusTip`的属性。以下哪些最有可能是该属性的访问方法的名称？'
- en: '`getStatusTip()` and `setStatusTip()`'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getStatusTip()`和`setStatusTip()`'
- en: '`statusTip()` and `setStatusTip()`'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`statusTip()`和`setStatusTip()`'
- en: '`get_statusTip()` and `change_statusTip()`'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`get_statusTip()`和`change_statusTip()`'
- en: '`QDate` is a class for wrapping a calendar date. In which of the three main
    Qt modules would you expect to find it?'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`QDate`是用于封装日历日期的类。你期望在三个主要的Qt模块中的哪一个找到它？'
- en: '`QFont` is a class that defines a screen font. In which of the three main Qt
    modules would you expect to find it?'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`QFont`是定义屏幕字体的类。你期望在三个主要的Qt模块中的哪一个找到它？'
- en: Can you recreate `hello_world.py` using Qt Designer? Make sure to set the `windowTitle`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能使用Qt Designer重新创建`hello_world.py`吗？确保设置`windowTitle`。
- en: Further reading
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out these resources for more information on Qt, PyQt, and Qt Designer:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下资源，了解有关Qt、PyQt和Qt Designer的更多信息：
- en: The **PyQt manual** at [http://pyqt.sourceforge.net/Docs/PyQt5/](http://pyqt.sourceforge.net/Docs/PyQt5/)
    is a handy resource for understanding PyQt's distinct aspects
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://pyqt.sourceforge.net/Docs/PyQt5/](http://pyqt.sourceforge.net/Docs/PyQt5/)上的**PyQt手册**是了解PyQt独特方面的方便资源'
- en: The **Qt module list** at [https://doc.qt.io/qt-5/qtmodules.html](https://doc.qt.io/qt-5/qtmodules.html)
    gives a good rundown of the available modules in Qt
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-5/qtmodules.html](https://doc.qt.io/qt-5/qtmodules.html)上的**Qt模块列表**提供了Qt中可用模块的概述'
- en: The **QApplication** documentation at [https://doc.qt.io/qt-5/qapplication.html#QApplication](https://doc.qt.io/qt-5/qapplication.html#QApplication)
    lists all the command-line switches parsed by the `QApplication` object
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请查看[https://doc.qt.io/qt-5/qapplication.html#QApplication](https://doc.qt.io/qt-5/qapplication.html#QApplication)上的**QApplication**文档，列出了`QApplication`对象解析的所有命令行开关
- en: The **QWidget** documentation at [https://doc.qt.io/qt-5/qwidget.html](https://doc.qt.io/qt-5/qwidget.html)
    shows the properties and methods available in the `QWidget` object
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-5/qwidget.html](https://doc.qt.io/qt-5/qwidget.html)上的**QWidget**文档显示了`QWidget`对象中可用的属性和方法'
- en: The **Qt Designer manual** at [https://doc.qt.io/qt-5/qtdesigner-manual.html](https://doc.qt.io/qt-5/qtdesigner-manual.html)
    will help you explore the full capabilities of Qt Designer
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://doc.qt.io/qt-5/qtdesigner-manual.html](https://doc.qt.io/qt-5/qtdesigner-manual.html)上的**Qt
    Designer手册**将帮助您探索Qt Designer的全部功能'
- en: If you want to understand more about C++, check out these offerings from Packt [https://www.packtpub.com/tech/C-plus-plus](https://www.packtpub.com/tech/C-plus-plus)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于C++的信息，请查看Packt提供的这些内容[https://www.packtpub.com/tech/C-plus-plus](https://www.packtpub.com/tech/C-plus-plus)
