["```py\nweather_df\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0temp    weather\n0    55      windy\n1    34      cloudy\n2    80      sunny\n3    75      rain\n4    53      sunny\n```", "```py\nweather_df['weather_encoded'] = weather_df['weather'].map(\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{'windy': 0, 'cloudy': 1, \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'sunny': 2, 'rain': 3})\n```", "```py\nweather_df\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0temp    weather    weather_encoded\n0    55      windy      0\n1    34      cloudy     1\n2    80      sunny      2\n3    75      rain       3\n4    53      sunny       2\n```", "```py\npd.get_dummies(weather_df['weather'])\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0cloudy    rain    sunny    windy\n0    0         0       0        1\n1    1         0       0        0\n2    0         0       1        0\n3    0         1       0        0\n4    0         0       1        0\n```", "```py\nweather_df['weather'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.ylabel('')\nplt.show()\n```", "```py\nstudent_df\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0name    sex       class    gpa    num_classes\n0    Alice   female    FY       90     4\n1    Bob     male      SO       93    3\n2    Carol   female    SR       97    4\n3    Dan     male      SO       89    4\n4    Eli     male      JR       95    3\n5    Fran    female    SR       92    2\n```", "```py\nstudent_df['female_flag'] = student_df['sex'] == 'female'\nstudent_df = student_df.drop('sex', axis=1)\nstudent_df\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0name    class    gpa    num_classes    female_flag\n0    Alice   FY       90     4              True\n1    Bob     SO       93     3              False\n2    Carol   SR       97     4              True\n3    Dan     SO       89     4              False\n4    Eli     JR       95     3              False\n5    Fran    SR       92     2              True\n```", "```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    weather_df = pd.read_csv('weather_data.csv')\n    weather_df.head()\n    ```", "```py\n    weather_df['weather'].value_counts().plot.bar()\n    plt.show()\n    ```", "```py\n    weather_df['weather'].value_counts().plot.pie(autopct='%1.1f%%')\n    plt.ylabel('')\n    plt.show()\n    ```", "```py\n    weather_df.groupby(['weather', 'city'])['weather'].count()\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.unstack('city')\n    ```", "```py\n    city       New York    San Francisco    St Louis\n    weather            \n    cloudy     3.0         NaN              3.0\n    rain       1.0         NaN              1.0\n    sunny      1.0         4.0              1.0\n    windy      NaN         1.0              NaN\n    ```", "```py\n    weather_df.groupby(['weather', 'city'])\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['weather'].count().unstack('city')\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.fillna(0).plot(kind='bar', stacked=True)\n    plt.show()\n    ```", "```py\nsamples = np.random.normal(4, 10, size=1000)\nplt.hist(samples, bins=20)\nplt.show()\n```", "```py\nnormalized_samples = (samples - 4) / 10\nplt.hist(normalized_samples, bins=20)\nplt.show()\n```", "```py\nsample_mean = np.mean(samples)\nsample_sd = np.std(samples)\n```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    df = pd.read_csv('data.csv')\n    df.head()\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0Column 1    Column 2    Column 3\n    0    -1.231356   1.305917    0.511994\n    1    7.874195    1.291636    0.155032\n    2    13.169984   1.274973    0.183988\n    3    13.442203   1.549126    0.391825\n    4    -8.032985   1.895236    0.398122\n    ```", "```py\n    def min_max_scale(data, a, b):\n    \u00a0\u00a0\u00a0\u00a0data_max = np.max(data)\n    \u00a0\u00a0\u00a0\u00a0data_min = np.min(data)\n    \u00a0\u00a0\u00a0\u00a0return a + (b - a) * (data - data_min) / (data_max \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- data_min)\n    ```", "```py\n    plt.hist(df['Column 1'], bins=20)\n    plt.show()\n    ```", "```py\n    plt.hist(min_max_scale(df['Column 1'], -3, 3), bins=20)\n    plt.show()\n    ```", "```py\n    plt.hist(df['Column 2'], bins=20)\n    plt.show()\n    ```", "```py\n    plt.hist(min_max_scale(df['Column 2'], 0, 1), bins=20)\n    plt.show()\n    ```", "```py\n    plt.hist(df['Column 3'], bins=20)\n    plt.show()\n    ```", "```py\n    plt.hist(min_max_scale(df['Column 3'], 10, 20), \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bins=20)\n    plt.show()\n    ```", "```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    samples = np.random.normal(size=1000)\n    mean = np.mean(samples)\n    median = np.median(samples)\n    q1 = np.percentile(samples, 25)\n    q2 = np.percentile(samples, 75)\n    ```", "```py\n    plt.hist(samples, bins=20)\n    plt.axvline(x=mean, c='red', label='Mean')\n    plt.axvline(x=median, c='black', label='Median')\n    plt.axvline(x=q1, c='blue', label='Interquartile')\n    plt.axvline(x=q2, c='blue')\n    plt.legend()\n    plt.show()\n    ```", "```py\n    samples = np.random.beta(2, 5, size=1000)\n    mean = np.mean(samples)\n    median = np.median(samples)\n    q1 = np.percentile(samples, 25)\n    q2 = np.percentile(samples, 75)\n    plt.hist(samples, bins=20)\n    plt.axvline(x=mean, c='red', label='Mean')\n    plt.axvline(x=median, c='black', label='Median')\n    plt.axvline(x=q1, c='blue', label='Interquartile')\n    plt.axvline(x=q2, c='blue')\n    plt.legend()\n    plt.show()\n    ```", "```py\n    samples = np.random.gamma(5, size=1000)\n    mean = np.mean(samples)\n    median = np.median(samples)\n    q1 = np.percentile(samples, 25)\n    q2 = np.percentile(samples, 75)\n    plt.hist(samples, bins=20)\n    plt.axvline(x=mean, c='red', label='Mean')\n    plt.axvline(x=median, c='black', label='Median')\n    plt.axvline(x=q1, c='blue', label='Interquartile')\n    plt.axvline(x=q2, c='blue')\n    plt.legend()\n    plt.show()\n    ```", "```py\ndf = pd.DataFrame({'numerical': np.random.normal(size=5),\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'categorical': ['a', 'b', 'a', 'c', 'b'],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'ordinal': [1, 2, 3, 5, 4]})\n```", "```py\ndf.describe()\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0numerical    ordinal\ncount   5.000000     5.000000\nmean    -0.251261    3.000000\nstd     0.899420     1.581139\nmin     -1.027348    1.000000\n25%     -0.824727    2.000000\n50%     -0.462354    3.000000\n75%     -0.192838    4.000000\nmax     1.250964     5.000000\n```", "```py\ndf.describe(include='all')\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0numerical     categorical    ordinal\ncount   5.000000      5              5.000000\nunique  NaN           3              NaN\ntop     NaN           a              NaN\nfreq    NaN           2              NaN\nmean    -0.251261     NaN            3.000000\nstd     0.899420      NaN            1.581139\nmin     -1.027348     NaN            1.000000\n25%     -0.824727     NaN            2.000000\n50%     -0.462354     NaN            3.000000\n75%     -0.192838     NaN            4.000000\nmax     1.250964      NaN            5.000000\n```", "```py\nsns.boxplot(np.random.normal(2, 5, size=1000))\nplt.show()\n```", "```py\ndf = pd.DataFrame({'numerical': np.random.normal(size=1000),\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'categorical': np.random.choice\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(['a', 'b', 'c'], size=1000),\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'ordinal': np.random.choice\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0([1, 2, 3, 4, 5], size=1000)})\n```", "```py\nsns.boxplot(y='numerical', x='categorical', data=df)\nplt.show()\n```", "```py\nsns.boxplot(y='numerical', x='ordinal', data=df)\nplt.show()\n```", "```py\nsamples_a = np.random.normal(size=20)\nsamples_b = np.random.normal(0.2, 1, size=20)\n```", "```py\nplt.hist(samples_a, alpha=0.2)\nplt.hist(samples_b, alpha=0.2)\nplt.show()\n```", "```py\nscipy.stats.ttest_ind(samples_a, samples_b).pvalue\n```", "```py\n0.8616483548091348\n```", "```py\nsamples_a = np.random.normal(size=1000)\nsamples_b = np.random.normal(0.2, 1, size=1000)\nplt.hist(samples_a, alpha=0.2)\nplt.hist(samples_b, alpha=0.2)\nplt.show()\n```", "```py\nscipy.stats.ttest_ind(samples_a, samples_b).pvalue\n```", "```py\n3.1445050317071093e-06\n```", "```py\nx = np.random.rand(500,)\ny = x * 2 + np.random.normal(0, 0.3, 500)\nz = np.random.rand(500,)\ndf = pd.DataFrame({'x': x, 'y': y, 'z': z})\n```", "```py\ndf.corr()\n```", "```py\n\u00a0\u00a0\u00a0\u00a0\u00a0x                     y                     z\nx    1.000000              0.8899950.869522      0.019747 -0.017913\ny    0.8899950.869522      1.000000              0.045332 -0.023455\nz    0.019747 -0.017913    0.045332 -0.023455    1.000000\n```", "```py\nsns.heatmap(df.corr(), center=0, annot=True)\nbottom, top = plt.ylim()\nplt.ylim(bottom + 0.5, top - 0.5)\nplt.show()\n```", "```py\n    import pandas as pd\n    from scipy.stats import ttest_ind\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    ```", "```py\n    sns.heatmap(df.corr(), center=0, annot=True)\n    bottom, top = plt.ylim()\n    plt.ylim(bottom + 0.5, top - 0.5)\n    plt.show()\n    ```", "```py\n    sns.jointplot(x='x', y='y', data=df)\n    plt.show()\n    ```", "```py\n    ttest_ind(df['x'], df['y']).pvalue\n    ```", "```py\n    0.011436482008949079\n    ```", "```py\n$ pip install scikit-learn\n```", "```py\n$ conda install scikit-learn\n```", "```py\nfrom sklearn import linear_model\nmodel = linear_model.LinearRegression()\nmodel.fit(df[['x', 'z']], df['y'])\n```", "```py\nmodel.coef_\n```", "```py\narray([1.98861194, 0.05436268])\n```", "```py\nmodel.predict([[1, 2], [2, 3]])\n```", "```py\narray([2.10790143, 4.15087605])\n```", "```py\n    import numpy as np\n    from sklearn.datasets import make_blobs\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import accuracy_score\n    from sklearn.neighbors import KNeighborsClassifier\n    from sklearn.svm import SVC\n    from sklearn.ensemble import GradientBoostingClassifier\n    import matplotlib.pyplot as plt\n    ```", "```py\n    n_samples = 10000\n    centers = [(-2, 2), (0, 0), (2, 2)]\n    X, y = make_blobs(n_samples=n_samples, centers=centers, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shuffle=False, random_state=0)\n    ```", "```py\n    X\n    ```", "```py\n    array([[-0.23594765,  2.40015721],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-1.02126202,  4.2408932 ],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[-0.13244201,  1.02272212],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[ 0.98700332,  2.27166174],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[ 1.89100272,  1.94274075],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[ 0.94106874,  1.67347156]])\n    ```", "```py\n    y\n    ```", "```py\n    array([0, 0, 0, ..., 2, 2, 2])\n    ```", "```py\n    plt.scatter(X[:, 0], X[:, 1], c=y)\n    plt.show()\n    ```", "```py\n    X_train, X_test, \\\n    y_train, y_test = train_test_split(X, y, shuffle=True, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0random_state=0)\n    ```", "```py\n    X_train.shape\n    (7500, 2)\n    ```", "```py\n    models = [KNeighborsClassifier(), SVC(),\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GradientBoostingClassifier()]\n    ```", "```py\n    for model in models:\n    \u00a0\u00a0\u00a0\u00a0model.fit(X_train, y_train)\n    \u00a0\u00a0\u00a0\u00a0y_pred = model.predict(X_test)\n\n    \u00a0\u00a0\u00a0\u00a0print(f'{type(model).__name__}: {accuracy_score(y_pred, y_test)}')\n    ```", "```py\n    KNeighborsClassifier: 0.8792\n    SVC: 0.8956\n    GradientBoostingClassifier: 0.8876\n    ```"]