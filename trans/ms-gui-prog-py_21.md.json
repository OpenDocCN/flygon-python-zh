["```py\n from PyQt5.QtWidgets import *\n app = QWidget()\n app.show()\n QApplication().exec()\n```", "```py\n   from PyQt5.QtWidgets import *\n\n   app = QApplication([])\n   window = QWidget()\n   window.show()\n   app.exe()\n```", "```py\n   widget = QWidget(cursor=qtc.Qt.WaitCursor)\n   widget.setWindowState(qtc.Qt.WindowFullScreen)\n   widget.setWindowFlags(qtc.Qt.FramelessWindowHint)\n```", "```py\n        def onSubmit(self):\n            if self.category_entry.text():\n                try:\n                    self.submitted.emit(self.category_entry.text())\n                except AttributeError:\n                    pass\n            self.close()\n```", "```py\n    class TimeForm(qtw.QWidget):\n\n        submitted = qtc.pyqtSignal(qtc.QTime)\n\n        def __init__(self):\n        super().__init__()\n        self.setLayout(qtw.QHBoxLayout())\n        self.time_inp = qtw.QTimeEdit(self)\n        self.layout().addWidget(self.time_inp)\n\n        def on_time_inp_editingFinished(self):\n        self.submitted.emit(self.time_inp.time())\n        self.destroy()\n```", "```py\n    class TimeForm(qtw.QWidget):\n\n        submitted = qtc.pyqtSignal(qtc.QTime)\n\n        def __init__(self):\n            super().__init__()\n            self.setLayout(qtw.QHBoxLayout())\n            self.time_inp = qtw.QTimeEdit(\n                self, objectName='time_inp')\n            self.layout().addWidget(self.time_inp)\n            qtc.QMetaObject.connectSlotsByName(self)\n\n        def on_time_inp_editingFinished(self):\n            self.submitted.emit(self.time_inp.time())\n            self.destroy()\n```", "```py\n    from calculator_form import Ui_Calculator\n\n    class Calculator(qtw.QWidget):\n        def __init__(self):\n            self.ui = Ui_Calculator(self)\n            self.ui.setupGUI(self.ui)\n            self.show()\n```", "```py\n    class IntegerValueButton(qtw.QPushButton):\n\n        clicked = qtc.pyqtSignal(int)\n\n        def __init__(self, value, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.value = value\n            self.clicked.connect(\n                lambda: self.clicked.emit(self.value))\n```", "```py\n super().clicked.connect(\n             lambda: self.clicked.emit(self.value))\n```", "```py\n    answer = qtw.QMessageBox.question(\n        None, 'Continue?', 'Run this program?')\n    if not answer:\n        sys.exit()\n```", "```py\n    answer = qtw.QMessageBox.question(\n        None, 'Continue?', 'Run this program?')\n    if answer == qtw.QMessageBox.No:\n        sys.exit()\n```", "```py\n    settings = qtc.QSettings()\n    settings.setValue('config_file', 'SuperPhoto.conf')\n    settings.setValue('default_color', QColor('black'))\n    settings.sync()\n```", "```py\n settings = qtc.QSettings('My Company', 'SuperPhoto')\n settings.setValue('default_color', QColor('black'))\n```", "```py\n    settings = qtc.QSettings('My Company', 'SuperPhoto')\n    settings.setValue('Default Name', dialog.default_name_edit.text)\n    settings.setValue('Use GPS', dialog.gps_checkbox.isChecked)\n    settings.setValue('Default Color', dialog.color_picker.color)\n```", "```py\n  def save_as(self):\n    filename, _ = qtw.QFileDialog(self)\n    self.data.save_file(filename)\n```", "```py\n  class DataModel(QAbstractTreeModel):\n    def rowCount(self, node):\n      if node > 2:\n        return 1\n      else:\n        return len(self._data[node])\n```", "```py\n    def insertColumns(self, col, count, parent):\n      for row in self._data:\n        for i in range(count):\n          row.insert(col, '')\n```", "```py\n        def data(self, index, role):\n            if role in (\n                qtc.Qt.DisplayRole,\n                qtc.Qt.EditRole,\n                qtc.Qt.ToolTipRole\n            ):\n                return self._data[index.row()][index.column()]\n```", "```py\n   font = qtg.QFont('Times', 32, qtg.QFont.Bold)\n   font.setUnderline(True)\n   font.setOverline(True)\n   font.setCapitalization(qtg.QFont.SmallCaps)\n```", "```py\n   <RCC>\n      <qresource prefix=\"foodItems\">\n        <file alias=\"pancakes.png\">pc_img.45234.png</file>\n      </qresource>\n   </RCC>\n```", "```py\n   pancakes_pxm = qtg.QPixmap(\":/foodItems/pancakes.png\")\n```", "```py\n   widget = qtw.QWidget()\n   palette = widget.palette()\n   tile_brush = qtg.QBrush(\n       qtg.QColor('black'),\n       qtg.QPixmap('tile.png')\n   )\n   palette.setBrush(qtg.QPalette.Window, tile_brush)\n   widget.setPalette(palette)\n```", "```py\n   deleteButton = qtw.QPushButton('Delete')\n   form.layout().addWidget(deleteButton)\n   form.setStyleSheet(\n      form.styleSheet() + 'deleteButton{ background-color: #8F8; }'\n   )\n```", "```py\n   deleteButton = qtw.QPushButton('Delete')\n   deleteButton.setObjectName('deleteButton')\n   form.layout().addWidget(deleteButton)\n   form.setStyleSheet(\n      form.styleSheet() + \n      '#deleteButton{ background-color: #8F8; }'\n   )\n```", "```py\n   stylesheet1 = \"QWidget {background-color: black;}\"\n   stylesheet2 = \".QWidget {background-color: black;}\"\n```", "```py\n   class SmileyStyley(qtw.QProxyStyle):\n\n       def drawItemPixmap(\n           self, painter, rectangle, alignment, pixmap):\n           smile = qtg.QPixmap('smile.gif')\n           super().drawItemPixmap(\n               painter, rectangle, alignment, smile)\n```", "```py\n    class MyWidget(qtw.QWidget):\n        def __init__(self):\n            super().__init__()\n            animation = qtc.QPropertyAnimation(\n                self, b'windowOpacity')\n            animation.setStartValue(0)\n            animation.setEndValue(1)\n            animation.setDuration(10000)\n            animation.start()\n```", "```py\n   playlist = qtmm.QMediaPlaylist()\n   for song in cool_songs:\n       url = qtc.QUrl.fromLocalFile(song)\n       content = qtmm.QMediaContent(url)\n       playlist.addMedia(content)\n   playlist.setPlaybackMode(qtmm.QMediaPlaylist.Random)\n   player = qtmm.QMediaPlayer()\n   player.setPlaylist(playlist)\n   player.play()\n```", "```py\n   recorder = qtmm.QAudioRecorder()\n   recorder.setCodec('audio/mpeg')\n   recorder.record()\n```", "```py\n   recorder = qtmm.QAudioRecorder()\n   settings = qtmm.QAudioEncoderSettings()\n   settings.setCodec('audio/mpeg')\n   recorder.setEncodingSettings(settings)\n   recorder.record()\n```", "```py\n       def on_ready_read(self):\n           while self.socket.hasPendingDatagrams():\n               self.process_data(self.socket.readDatagram())\n```", "```py\n       def download(self, url):\n        self.manager = qtn.QNetworkAccessManager(\n            finished=self.on_finished)\n        self.request = qtn.QNetworkRequest(qtc.QUrl(url))\n        reply = self.manager.get(self.request)\n        with open('datafile.dat', 'wb') as fh:\n            fh.write(reply.readAll())\n```", "```py\n   CREATE TABLE tv_schedule AS (\n       id INTEGER PRIMARY KEY,\n       channel TEXT NOT NULL,\n       date DATE NOT NULL,\n       time TIME NOT NULL,\n       program TEXT NOT NULL,\n       UNIQUE(channel, date, time)\n   )\n```", "```py\nDELETE * FROM my_table IF category_id == 12;\n```", "```py\n   DELETE FROM my_table WHERE category_id = 12;\n```", "```py\nINSERT INTO flavors(name) VALUES ('hazelnut', 'vanilla', 'caramel', 'onion');\n```", "```py\n   INSERT INTO flavors(name) VALUES ('hazelnut'), ('vanilla'), ('caramel'), ('onion');\n```", "```py\n   db1 = qts.QSqlDatabase.addDatabase('QSQLITE', 'XYZ read-only')\n   db1.setUserName('readonlyuser')\n   # etc...\n   db1.open()\n   db2 = qts.QSqlDatabase.addDatabase('QSQLITE', 'XYZ read-write')\n   db2.setUserName('readwriteuser')\n   # etc...\n   db2.open()\n\n   # Keep the database reference for querying:\n   query = qts.QSqlQuery('SELECT * FROM my_table', db1)\n\n   # Or retrieve it using its name:\n   db = qts.QSqlDatabase.database('XYZ read-write')\n   db.exec('INSERT INTO my_table VALUES (1, 2, 3)')\n```", "```py\ndata = {'brand': 'generic', 'name': 'cheap coffee', 'roast': \n    'light'}\n# Your code here:\n```", "```py\n   data = {'brand': 'generic', 'name': 'cheap coffee', 'roast': \n       'Light'}\n   query = QSqlQuery()\n   query.prepare(\n       'INSERT INTO coffees(coffee_brand, coffee_name, roast_id) '\n       'VALUES (:brand, :name,\n       '(SELECT id FROM roasts WHERE description == :roast))'\n   )\n   query.bindValue(':brand', data['brand'])\n   query.bindValue(':name', data['name'])\n   query.bindValue(':roast', data['roast'])\n   query.exec()\n```", "```py\nflavor_model = qts.QSqlTableModel()\nflavor_model.setTable('flavors')\nflavor_table = qtw.QTableView()\nflavor_table.setModel(flavor_model)\nmainform.layout().addWidget(flavor_table)\n```", "```py\ndef do_search(self, text):\n    self.sql_table_model.setFilter(f'description={text}')\n    self.sql_table_model.select()\n```", "```py\n           self.timer = qtc.QTimer()\n           self.timer.setInterval(10000)\n           self.timer.timeout.connect(self.every_ten_seconds)\n```", "```py\n   timer = qtc.QTimer()\n   timer.setSingleShot(True)\n   timer.setInterval(1000)\n   timer.start()\n   while timer.remainingTime():\n       sleep(.01)\n   run_delayed_command()\n```", "```py\n   qtc.QTimer.singleShot(1000, run_delayed_command)\n```", "```py\n   class Worker(qtc.QObject):\n\n    counted = qtc.pyqtSignal(int)\n\n    def __init__(self, parent):\n        super().__init__(parent)\n        self.parent = parent\n\n    def count_words(self):\n        content = self.parent.textedit.toPlainText()\n        self.counted.emit(len(content.split()))\n```", "```py\n   class Worker(qtc.QThread):\n\n       def set_data(data):\n           self.data = data\n\n       def run(self):n\n           start_complex_calculations(self.data)\n\n    class MainWindow(qtw.QMainWindow):\n\n        def __init__(self):\n            super().__init__()\n            form = qtw.QWidget()\n            self.setCentralWidget(form)\n            form.setLayout(qtw.QFormLayout())\n\n            worker = Worker()\n            line_edit = qtw.QLineEdit(textChanged=worker.set_data)\n            button = qtw.QPushButton('Run', clicked=worker.run)\n            form.layout().addRow('Data:', line_edit)\n            form.layout().addRow(button)\n            self.show()\n```", "```py\n   class Worker(qtc.QRunnable):\n\n       finished = qtc.pyqtSignal()\n\n       def run(self):\n           calculate_navigation_vectors(30)\n           self.finished.emit()\n```", "```py\n       def run(self):\n           with open(self.file, 'r') as fh:\n               for row in fh:\n                   numbers = [float(x) for x in row.split()]\n                   if numbers:\n                       mean = sum(numbers) / len(numbers)\n                       numbers.append(mean)\n                   self.queue.put(numbers)\n```", "```py\n       def run(self):\n           message = get_http_response_string()\n           message_len = len(message)\n           self.datastream.writeUInt32(message_len)\n           self.datastream.writeQString(message)\n```", "```py\n       def run(self):\n           message = get_http_response_string()\n           message_len = len(message)\n           with qtc.QMutexLocker(self.qmutex):\n               self.datastream.writeUInt32(message_len)\n               self.datastream.writeQString(message)\n```", "```py\n<table>\n<thead background=#EFE><th>Job</th><th>Status</th></thead>\n<tr><td>Backup</td><font text-color='green'>Success!</font></td></tr>\n<tr><td>Cleanup<td><font text-style='bold'>Fail!</font></td></tr>\n</table>\n```", "```py\n<p>There is nothing <i>wrong</i> with your television <b>set</p></b>\n<table><row><data>french fries</data>\n<data>$1.99</data></row></table>\n<font family='Tahoma' color='#235499'>Can you feel the <strikethrough>love</strikethrough>code tonight?</font>\n<label>Username</label><input type='text' name='username'></input>\n<img source='://mypix.png'>My picture</img>\n```", "```py\n   <ul>\n     <li><a href='Section1'>Section 1</a></li>\n     <li><a href='Section2'>Section 2</a></li>\n   </ul>\n   <div id=Section1>\n     <p>This is section 1</p>\n   </div>\n   <div id=Section2>\n     <p>This is section 2</p>\n   </div>\n```", "```py\n   <ul>\n     <li><a href='#Section1'>Section 1</a></li>\n     <li><a href='#Section2'>Section 2</a></li>\n   </ul>\n   <a name='Section1'></a>\n   <div id=Section1>\n     <p>This is section 1</p>\n   </div>\n   <a name='Section2'></a>\n   <div id=Section2>\n     <p>This is section 2</p>\n   </div>\n```", "```py\n   document = qtg.QTextDocument()\n   cursor = qtg.QTextCursor(document)\n   top_frame = cursor.insertFrame(qtg.QTextFrameFormat())\n   bottom_frame = cursor.insertFrame(qtg.QTextFrameFormat())\n\n   cursor.insertText('This is the title')\n   cursor.movePosition(qtg.QTextCursor.NextBlock)\n   cursor.insertList(qtg.QTextListFormat())\n   for item in ('thing 1', 'thing 2', 'thing 3'):\n       cursor.insertText(item)\n```", "```py\n   document = qtg.QTextDocument()\n   cursor = qtg.QTextCursor(document)\n   top_frame = cursor.insertFrame(qtg.QTextFrameFormat())\n   cursor.setPosition(document.rootFrame().lastPosition())\n   bottom_frame = cursor.insertFrame(qtg.QTextFrameFormat())\n\n   cursor.setPosition(top_frame.lastPosition())\n   cursor.insertText('This is the title')\n   # This won't get us to the next frame:\n   #cursor.movePosition(qtg.QTextCursor.NextBlock)\n   cursor.setPosition(bottom_frame.lastPosition())\n   cursor.insertList(qtg.QTextListFormat())\n   for i, item in enumerate(('thing 1', 'thing 2', 'thing 3')):\n       # don't forget to add a block for each item after the first:\n       if i > 0:\n           cursor.insertBlock()\n       cursor.insertText(item)\n```", "```py\n   class MyPrinter(qtps.QPrinter):\n\n       page_size_changed = qtc.pyqtSignal(qtg.QPageSize)\n\n       def setPageSize(self, size):\n           super().setPageSize(size)\n           self.page_size_changed.emit(size)\n```", "```py\n   TypeError: MyPrinter cannot be converted to PyQt5.QtCore.QObject in this context\n```", "```py\n   for printer in qtps.QPrinterInfo.availablePrinters():\n       print(\n           printer.printerName(),\n           printer.makeAndModel(),\n           printer.defaultPageSize())\n```", "```py\n       def create_headshot(self, image_file, name):\n           image = qtg.QImage()\n           image.load(image_file)\n           # your code here\n\n           # end of your code\n           return image\n```", "```py\n       def create_headshot(self, image_file, name):\n           image = qtg.QImage()\n           image.load(image_file)\n\n           # your code here\n           painter = qtg.QPainter(image)\n           pen = qtg.QPen(qtg.QColor('blue'))\n           painter.setPen(pen)\n           painter.drawText(image.rect(), qtc.Qt.AlignBottom, name)\n\n           # end of your code\n           return image\n```", "```py\n   painter.drawPolygon(\n       qtc.QPoint(0, 20), qtc.QPoint(20, 0),\n       qtc.QPoint(60, 0), qtc.QPoint(80, 20),\n       qtc.QPoint(80, 60), qtc.QPoint(60, 80),\n       qtc.QPoint(20, 80), qtc.QPoint(0, 60)\n   )\n```", "```py\n   def paintEvent(self, event):\n       black_brush = qtg.QBrush(qtg.QColor('black'))\n       white_brush = qtg.QBrush(qtg.QColor('white'))\n       painter = qtg.QPainter()\n       painter.setBrush(black_brush)\n       painter.drawRect(0, 0, self.width(), self.height())\n       painter.setBrush(white_brush)\n       painter.drawText(0, 0, 'Test Text')\n```", "```py\n   scene = QGraphicsScene()\n   scene.setSceneRect(0, 0, 800, 600)\n   circle = scene.addEllipse(0, 0, 10, 10)\n   animation = QPropertyAnimation(circle, b'x')\n   animation.setStartValue(0)\n   animation.setEndValue(600)\n   animation.setDuration(5000)\n   animation.start()\n```", "```py\n   gradient = qtg.QLinearGradient(\n       qtc.QPointF(0, 100), qtc.QPointF(0, 0))\n   gradient.setColorAt(20, qtg.QColor('red'))\n   gradient.setColorAt(40, qtg.QColor('orange'))\n   gradient.setColorAt(60, qtg.QColor('green'))\n   painter = QPainter()\n   painter.setGradient(gradient)\n```", "```py\n   #version 2.1\n\n   attribute highp vec4 vertex;\n\n   void main (void)\n   {\n   gl_Position = vertex;\n   }\n```", "```py\n   attribute highp vec4 value1;\n   varying highp vec3 x[4];\n   void main(void)\n   {\n     x[0] = vec3(sin(value1[0] * .4));\n     x[1] = vec3(cos(value1[1]));\n     gl_Position = value1;\n     x[2] = vec3(10 * x[0])\n   }\n```", "```py\n   attribute highp vec4 coordinates;\n   uniform highp mat4 matrix1;\n\n   void main(void){\n     gl_Position = matrix1 * coordinates;\n   }\n```", "```py\n   c_handle = self.program.attributeLocation('coordinates')\n   m_handle = self.program.uniformLocation('matrix1')\n   self.program.setAttributeValue(c_handle, coordinate_value)\n   self.program.setUniformValue(m_handle, matrix)\n```", "```py\n   matrix = qtg.QMatrix4x4()\n   matrix.perspective(60, 4/3, 2, 10)\n   matrix.translate(1, -1, -4)\n   matrix.rotate(45, 1, 0, 0)\n```", "```py\n   data_list = [\n       qtc.QPoint(2, 3),\n       qtc.QPoint(4, 5),\n       qtc.QPoint(6, 7)]\n   chart = qtch.QChart()\n   series = qtch.QLineSeries()\n   series.append(data_list)\n   view = qtch.QChartView()\n   view.setChart(chart)\n   view.show()\n```", "```py\n   mainwindow = qtw.QMainWindow()\n   chart = qtch.QChart()\n   series = qtch.QPieSeries()\n   series.append('Half', 50)\n   series.append('Other Half', 50)\n   mainwindow.setCentralWidget(chart)\n   mainwindow.show()\n```", "```py\n   bob_sales = [2500, 1300, 800]\n   alice_sales = [1700, 1850, 2010]\n\n   chart = qtch.QChart()\n   series = qtch.QBarSeries()\n   chart.addSeries(series)\n\n   # add code here\n\n   # end code\n   view = qtch.QChartView()\n   view.setChart(chart)\n   view.show()\n```", "```py\n   bob_set = qtch.QBarSet('Bob')\n   alice_set = qtch.QBarSet('Alice')\n   bob_set.append(bob_sales)\n   alice_set.append(alice_sales)\n   series.append(bob_set)\n   series.append(alice_set)\n```", "```py\n   chart.setBackgroundBrush(\n       qtg.QBrush(qtc.Qt.black))\n   chart.setTheme(qtch.QChart.ChartThemeBlueIcy)\n```", "```py\n   GPIO.setmode(GPIO.BCM)\n   GPIO.setup(8, GPIO.OUT)\n   GPIO.output(8, 1)\n```", "```py\n   GPIO.setmode(GPIO.BOARD)\n   GPIO.setup(12, GPIO.OUT)\n   GPIO.output(12, 0.5)\n```", "```py\n   GPIO.setmode(GPIO.BOARD)\n   GPIO.setup(12, GPIO.OUT)\n   pwm = GPIO.PWM(12, 60)\n   pwm.start(0)\n   pwm.ChangeDutyCycle(50)\n```", "```py\n   class MotionSensor(qtc.QObject):\n\n       detection = qtc.pyqtSignal()\n\n       def __init__(self):\n           super().__init__()\n           GPIO.setmode(GPIO.BOARD)\n           GPIO.setup(8, GPIO.IN)\n           self.state = GPIO.input(8)\n\n       def check(self):\n           state = GPIO.input(8)\n           if state and state != self.state:\n               detection.emit()\n           self.state = state\n```", "```py\n   from PyQt5 import QtWebEngine as qtwe\n   w = qtwe.QWebEngineView()\n```", "```py\n   class UrlBar(qtw.QLineEdit):\n\n       url_request = qtc.pyqtSignal(str)\n\n       def __init__(self):\n           super().__init__()\n           self.returnPressed.connect(self.request)\n\n       def request(self):\n           self.url_request.emit(self.text())\n\n   mywebview = qtwe.QWebEngineView()\n   myurlbar = UrlBar()\n   myurlbar.url_request(mywebview.load)\n```", "```py\n   class WebView(qtwe.QWebEngineView):\n\n    def createWindow(self, _):\n\n        return self\n```", "```py\n   def zoom_in(self):\n        webview = self.tabs.currentWidget()\n        webview.setZoomFactor(webview.zoomFactor() * 1.1)\n\n    def zoom_out(self):\n        webview = self.tabs.currentWidget()\n        webview.setZoomFactor(webview.zoomFactor() * .9)\n```", "```py\n   navigation.addAction('Zoom In', self.zoom_in)\n   navigation.addAction('Zoom Out', self.zoom_out)\n```", "```py\n   webview.settings().testAttribute(\n       qtwe.QWebEngineSettings.JavascriptEnabled)\n```", "```py\n   = - ` : ' \" ~ ^ _ * + # < >\n```", "```py\n   setup(\n       project_urls={\n           'Project FAQ': 'https://example.com/faq',\n       }\n   )\n```"]