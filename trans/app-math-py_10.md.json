["```py\n          python3.8 -m pip install pint uncertainties netCDF4 xarray geopandas\n   geoplot papermill cerberus faust cython\n\n```", "```py\n          python3.8 -m pip install dask[complete]\n\n```", "```py\nimport pint\n```", "```py\nureg = pint.UnitRegistry(system=\"mks\")\n```", "```py\ndistance = 5280 * ureg.feet\n```", "```py\nprint(distance.to(\"miles\"))\nprint(distance.to_base_units())\nprint(distance.to_base_units().to_compact())\n```", "```py\n0.9999999999999999 mile\n1609.3439999999998 meter\n1.6093439999999999 kilometer\n```", "```py\n@ureg.wraps(ureg.meter, ureg.second)\ndef calc_depth(dropping_time):\n    # s = u*t + 0.5*a*t*t\n    # u = 0, a = 9.81\n    return 0.5*9.81*dropping_time*dropping_time\n```", "```py\ndepth = calc_depth(0.05 * ureg.minute)\nprint(\"Depth\", depth)\n# Depth 44.144999999999996 meter\n```", "```py\nfrom uncertainties import ufloat, umath\n```", "```py\nseconds = ufloat(3.0, 0.4)\nprint(seconds)  # 3.0+/-0.4\n```", "```py\ndepth = 0.5*9.81*seconds*seconds\nprint(depth)  # 44+/-12\n```", "```py\nother_depth = ufloat(44, 12)\ntime = umath.sqrt(2.0*other_depth/9.81)\nprint(\"Estimated time\", time)\n# Estimated time 3.0+/-0.4\n```", "```py\nimport pint\nfrom uncertainties import ufloat\ng = 9.81*ureg.meters / ureg.seconds ** 2\nseconds = ufloat(3.0, 0.4) * ureg.seconds\n\ndepth = 0.5*g*seconds**2\nprint(depth)\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\nimport xarray as xr\n```", "```py\ndates = pd.date_range(\"2020-01-01\", periods=365, name=\"date\")\nlocations = list(range(25))\nsteps = rng.normal(0, 1, size=(365,25))\naccumulated = np.add.accumulate(steps)\n```", "```py\ndata_array = xr.Dataset({\n    \"steps\": ((\"date\", \"location\"), steps),\n    \"accumulated\": ((\"date\", \"location\"), accumulated)\n    },\n    {\"location\": locations, \"date\": dates}\n)\nprint(data_array)\n```", "```py\n<xarray.Dataset>\nDimensions: (date: 365, location: 25)\nCoordinates:\n* location (location) int64 0 1 2 3 4 5 6 7 8 ... 17 18 19 20 21 22 23 24\n* date (date) datetime64[ns] 2020-01-01 2020-01-02 ... 2020-12-30\nData variables:\nsteps (date, location) float64 geoplot.pointplot(cities, ax=ax, fc=\"r\", marker=\"2\")\nax.axis((-180, 180, -90, 90))-1.424 1.264 ... -0.4547 -0.4873\naccumulated (date, location) float64 -1.424 1.264 -0.8707 ... 8.935 -3.525\n```", "```py\nmeans = data_array.mean(dim=\"location\")\n```", "```py\nfig, ax = plt.subplots()\nmeans[\"accumulated\"].to_dataframe().plot(ax=ax)\nax.set(title=\"Mean accumulated values\", xlabel=\"date\", ylabel=\"value\")\n```", "```py\ndata_array.to_netcdf(\"data.nc\")\n```", "```py\nnew_data = xr.load_dataset(\"data.nc\")\nprint(new_data)\n```", "```py\n<xarray.Dataset>\nDimensions: (date: 365, location: 25)\nCoordinates:\n  * location (location) int64 0 1 2 3 4 5 6 7 8 ... 17 18 19 20 21 22 23 24\n  * date (date) datetime64[ns] 2020-01-01 2020-01-02 ... 2020-12-30\nData variables:\n    steps (date, location) float64 -1.424 1.264 ... -0.4547 -0.4873\n    accumulated (date, location) float64 -1.424 1.264 -0.8707 ... 8.935 -3.525\n```", "```py\nimport geopandas\nimport geoplot\nimport matplotlib.pyplot as plt\n```", "```py\nworld = geopandas.read_file(\n        geopandas.datasets.get_path(\"naturalearth_lowres\")\n)\n```", "```py\ncities = geopandas.read_file(\n        geopandas.datasets.get_path(\"naturalearth_cities\")\n)\n```", "```py\nfig, ax = plt.subplots()\ngeoplot.polyplot(world, ax=ax)\n```", "```py\ngeoplot.pointplot(cities, ax=ax, fc=\"r\", marker=\"2\")\nax.axis((-180, 180, -90, 90))\n```", "```py\nimport matplotlib.pyplot as plt\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n\nuniform_data = rng.uniform(-5, 5, size=(2, 100))\n\nfig, ax = plt.subplots(tight_layout=True)\nax.scatter(uniform_data[0, :], uniform_data[1, :])\nax.set(title=\"Scatter plot\", xlabel=\"x\", ylabel=\"y\")\n```", "```py\n          papermill --kernel python3 sample.ipynb output.ipynb\n\n```", "```py\n          jupyter kernelspec list\n\n```", "```py\nimport csv\nimport cerberus\n```", "```py\nfloat_schema = {\"type\": \"float\", \"coerce\": float, \"min\": -1.0,\n   \"max\": 1.0}\n```", "```py\nitem_schema = {\n    \"type\": \"dict\",\n    \"schema\": {\n        \"id\": {\"type\": \"string\"},\n        \"number\": {\"type\": \"integer\", \"coerce\": int},\n        \"lower\": float_schema,\n        \"upper\": float_schema,\n    }\n}\n```", "```py\nschema = {\n    \"rows\": {\n        \"type\": \"list\",\n        \"schema\": item_schema\n    }\n}\n```", "```py\nvalidator = cerberus.Validator(schema)\n```", "```py\nwith open(\"sample.csv\") as f:\n    dr = csv.DictReader(f)\n    document = {\"rows\": list(dr)}\n```", "```py\nvalidator.validate(document)\n```", "```py\nerrors = validator.errors[\"rows\"][0]\n```", "```py\nfor row_n, errs in errors.items():\n    print(f\"row {row_n}: {errs}\")\n```", "```py\nrow 11: [{'lower': ['min value is -1.0']}]\nrow 18: [{'number': ['must be of integer type', \"field 'number' cannot be coerced: invalid literal for int() with base 10: 'None'\"]}]\nrow 32: [{'upper': ['min value is -1.0']}]\nrow 63: [{'lower': ['max value is 1.0']}]\n```", "```py\nimport faust\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\n          bin/zookeeper-server-start.sh config/zookeeper.properties\n\n```", "```py\n          bin\\windows\\zookeeper-server-start.bat config\\zookeeper.properties\n\n```", "```py\n          bin/kafka-server-start.sh config/server.properties\n\n```", "```py\n          bin\\windows\\kafka-server-start.bat config\\server.properties\n\n```", "```py\napp = faust.App(\"sample\", broker=\"kafka://localhost\")\n```", "```py\nclass Record(faust.Record):\n    id_string: str\n    value: float\n```", "```py\ntopic = app.topic(\"sample-topic\", value_type=Record)\n```", "```py\n@app.agent(topic)\nasync def process_record(records):\n    async for record in records:\n        print(f\"Got {record.id_string}: {record.value}\")\n```", "```py\n@app.timer(interval=1.0)\nasync def producer1(app):\n    await app.send(\n        \"sample-topic\",\n        value=Record(id_string=\"producer 1\", value=\n            rng.uniform(0, 2))\n    )\n\n@app.timer(interval=2.0)\nasync def producer2(app):\n    await app.send(\n        \"sample-topic\",\n        value=Record(id_string=\"producer 2\", value=\n            rng.uniform(0, 5))\n    )\n```", "```py\napp.main()\n```", "```py\n          python3.8 working-with-data-streams.py worker\n\n```", "```py\n[2020-06-21 14:15:27,986] [18762] [WARNING] Got producer 1: 0.4546720449343393 \n[2020-06-21 14:15:28,985] [18762] [WARNING] Got producer 2: 1.5837916985487643 \n[2020-06-21 14:15:28,989] [18762] [WARNING] Got producer 1: 1.5947309146654682 \n[2020-06-21 14:15:29,988] [18762] [WARNING] Got producer 1: 1.3525093415019491\n```", "```py\n# mandelbrot/python_mandel.py\n\nimport numpy as np\n\ndef in_mandel(cx, cy, max_iter):\n    x = cx\n    y = cy\n    for i in range(max_iter):\n        x2 = x**2\n        y2 = y**2\n        if (x2 + y2) >= 4:\n            return i\n        y = 2.0*x*y + cy\n        x = x2 - y2 + cx\n    return max_iter\n\ndef compute_mandel(N_x, N_y, N_iter):\n    xlim_l = -2.5\n    xlim_u = 0.5\n    ylim_l = -1.2\n    ylim_u = 1.2\n    x_vals = np.linspace(xlim_l, xlim_u, N_x, dtype=np.float64)\n    y_vals = np.linspace(ylim_l, ylim_u, N_y, dtype=np.float64)\n\n    height = np.empty((N_x, N_y), dtype=np.int64)\n    for i in range(N_x):\n        for j in range(N_y):\n            height[i, j] = in_mandel(x_vals[i], y_vals[j], N_iter)\n    return height\n```", "```py\n# mandelbrot/cython_mandel.pyx\n\nimport numpy as np\ncimport numpy as np\ncimport cython\nctypedef Py_ssize_t Int\nctypedef np.float64_t Double\n```", "```py\ncdef int in_mandel(Double cx, Double cy, int max_iter):\n    cdef Double x = cx\n    cdef Double y = cy\n    cdef Double x2, y2\n    cdef Int i\n```", "```py\n    for i in range(max_iter):\n        x2 = x**2\n        y2 = y**2\n        if (x2 + y2) >= 4:\n            return i\n        y = 2.0*x*y + cy\n        x = x2 - y2 + cx\n    return max_iter\n```", "```py\n@cython.boundscheck(False)\n@cython.wraparound(False)\ndef compute_mandel(int N_x, int N_y, int N_iter):\n```", "```py\n    cdef double xlim_l = -2.5\n    cdef double xlim_u = 0.5\n    cdef double ylim_l = -1.2\n    cdef double ylim_u = 1.2\n```", "```py\n    cdef np.ndarray x_vals = np.linspace(xlim_l, xlim_u, \n        N_x, dtype=np.float64)\n    cdef np.ndarray y_vals = np.linspace(ylim_l, ylim_u, \n        N_y, dtype=np.float64)\n    cdef np.ndarray height = np.empty((N_x, N_y), dtype=np.int64)\n    cdef Int i, j\n```", "```py\n    for i in range(N_x):\n        for j in range(N_y):\n            height[i, j] = in_mandel(x_vals[i], y_vals[j], N_iter)\n    return height\n```", "```py\n# mandelbrot/setup.py\n\nimport numpy as np\nfrom setuptools import setup, Extension\nfrom Cython.Build import cythonize\n```", "```py\nhybrid = Extension(\n    \"hybrid_mandel\",\n    sources=[\"python_mandel.py\"],\n    include_dirs=[np.get_include()],\n    define_macros=[(\"NPY_NO_DEPRECATED_API\", \n       \"NPY_1_7_API_VERSION\")]\n)\n```", "```py\ncython = Extension(\n    \"cython_mandel\",\n    sources=[\"cython_mandel.pyx\"],\n    include_dirs=[np.get_include()],\n    define_macros=[(\"NPY_NO_DEPRECATED_API\", \n       \"NPY_1_7_API_VERSION\")]\n)\n```", "```py\nextensions = [hybrid, cython]\nsetup(\n    ext_modules = cythonize(extensions, compiler_directives=\n       {\"language_level\": \"3\"}),\n)\n```", "```py\n          python3.8 setup.py build_ext --inplace\n\n```", "```py\n# run.py\n\nfrom time import time\nfrom functools import wraps\nimport matplotlib.pyplot as plt\n```", "```py\nfrom mandelbrot.python_mandel import compute_mandel \n    as compute_mandel_py\nfrom mandelbrot.hybrid_mandel import compute_mandel \n    as compute_mandel_hy\nfrom mandelbrot.cython_mandel import compute_mandel\n    as compute_mandel_cy\n```", "```py\ndef timer(func, name):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        t_start = time()\n        val = func(*args, **kwargs)\n        t_end = time()\n        print(f\"Time taken for {name}: {t_end - t_start}\")\n        return val\n    return wrapper\n```", "```py\nmandel_py = timer(compute_mandel_py, \"Python\")\nmandel_hy = timer(compute_mandel_hy, \"Hybrid\")\nmandel_cy = timer(compute_mandel_cy, \"Cython\")\n\nNx = 320\nNy = 240\nsteps = 255\n```", "```py\nmandel_py(Nx, Ny, steps)\nmandel_hy(Nx, Ny, steps)\nvals = mandel_cy(Nx, Ny, steps)\n```", "```py\nfig, ax = plt.subplots()\nax.imshow(vals.T, extent=(-2.5, 0.5, -1.2, 1.2))\nplt.show()\n```", "```py\nTime taken for Python: 6.276328802108765\nTime taken for Hybrid: 5.816391468048096\nTime taken for Cython: 0.03116750717163086\n```", "```py\nimport dask.dataframe as dd\n```", "```py\ndata = dd.read_csv(\"sample.csv\")\n```", "```py\nsum_data = data.lower + data.upper\nprint(sum_data)\n```", "```py\nDask Series Structure:\nnpartitions=1\n    float64\n        ...\ndtype: float64\nDask Name: add, 6 tasks\n```", "```py\nresult = sum_data.compute()\nprint(result.head())\n```", "```py\n0 -0.911811\n1 0.947240\n2 -0.552153\n3 -0.429914\n4 1.229118\ndtype: float64\n```", "```py\nmeans = data.loc[:, (\"lower\", \"upper\")].mean().compute()\nprint(means)\n```", "```py\nlower -0.060393\nupper -0.035192\ndtype: float64\n```"]