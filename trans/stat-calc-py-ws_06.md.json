["```py\n# Importing Numpy package\nimport numpy as np\n# Initializing and printing matrix z\nx = np.array([[1, 2], [3, 4]])\nprint(x)\n```", "```py\n# Initializing and printing matrix z\nz = np.array([[1, 2],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[3, 4]])\nprint(type(z))\n```", "```py\n<type 'numpy.ndarray'>\n```", "```py\n# Printing the data types for matrix-z\nprint(z)\nprint(type(z))\nprint(z[0][1])\nprint(type(z[0][1]))\n```", "```py\n[[1 2]\n [3 4]]\n[[5 6]\n [7 8]]\n<type 'numpy.ndarray'>\n2\n<type 'numpy.int64'>\n[Finished in 0.221s]\n```", "```py\n# Sum of all elements of the matrix\nprint(z)\nprint(np.sum(z))\n```", "```py\n[[1 2]\n\u00a0[3 4]]\n10\n[Finished in 0.237s]\n```", "```py\n# Value of the largest integer in the matrix\nprint(\"Max \", np.max(z))\n# Value of the smallest integer in the matrix\nprint(\"Min \", np.min(z))\n# Mean of elements in the matrix\nprint(\"Mean \", np.mean(z))\n# Standard deviation\nprint(\"Standard deviation \", np.std(z))\n```", "```py\n('Max ', 4)\n('Min ', 1)\n('Mean ', 2.5)\n('Standard deviation ', 1.1180339887498949)\n[Finished in 0.207s]\n```", "```py\n    # 1\\. Information about a matrix\n    print(\"Information: \")\n    print(np.info(z))\n    ```", "```py\n    Information: \n    class:  ndarray\n    shape:  (2, 2)\n    strides:  (16, 8)\n    itemsize:  8\n    aligned:  True\n    contiguous:  True\n    fortran:  False\n    data pointer: 0x7ff57665fef0\n    byteorder:  little\n    byteswap:  False\n    type: int64\n    None\n    ```", "```py\n    # 2\\. Gives the shape of the matrix\n    print(\"Shape: \")\n    print(np.shape(z))\n    ```", "```py\n    Shape: \n    (2, 2)\n    ```", "```py\n    # 3\\. Dimensions of the matrix\n    print(\"Dimensions: \")\n    print(np.ndim(z))\n    ```", "```py\n    Dimensions: \n    2\n    ```", "```py\n    # 4\\. Data type of the matrix\n    print(\"Data type of elements\")\n    print(z.dtype.name)\n    ```", "```py\n    Data type of elements\n    int64\n    ```", "```py\n    print(\"Length of the ndarray: \")\n    print(len(z))\n    ```", "```py\n    Length of the ndarray: \n    2\n    ```", "```py\n    import math\n    import numpy as np\n    ```", "```py\n    def earth_sun_distance():\n    \u00a0\u00a0\u00a0\u00a0# Semi-major axis between earth and sun\n    \u00a0\u00a0\u00a0\u00a0A = 149600000\n    \u00a0\u00a0\u00a0\u00a0# Eccentricity of earth\n    \u00a0\u00a0\u00a0\u00a0E = 0.0167\n    \u00a0\u00a0\u00a0\u00a0l = []\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0# Calculating the distance between earth and sun\n    \u00a0\u00a0\u00a0\u00a0for i in range(365):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0theta = (2 * math.pi * i) / 365.25\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0r = A*(1 - E**2) / (1 - (E * math.cos(theta)))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0l.append(r)\n    \u00a0\u00a0\u00a0\u00a0return l\n    ```", "```py\n    # Calculating the time taken\n    S = 299792\n    t = np.divide(l, S)\n    ```", "```py\n    sunny = np.asarray(list(zip(l, t)))\n    print(\"Earth sun distance: \\n\", sunny)\n    ```", "```py\n    Earth sun distance:\n    [[  1.52098320e+08   5.07346160e+02]\n    \u00a0[  1.52097938e+08   5.07344885e+02]\n    \u00a0[  1.52096791e+08   5.07341061e+02]\n    \u00a0[  1.52094881e+08   5.07334688e+02]\n    \u00a0[  1.52092207e+08   5.07325770e+02]\n    \u00a0[  1.52088771e+08   5.07314309e+02]\n    \u00a0...\n    \u00a0[  1.52072354e+08   5.07259546e+02]\n    \u00a0[  1.52078259e+08   5.07279242e+02]\n    \u00a0[  1.52083406e+08   5.07296411e+02]\n    \u00a0[  1.52087793e+08   5.07311046e+02]\n    \u00a0[  1.52091420e+08   5.07323143e+02]\n    \u00a0[  1.52094284e+08   5.07332697e+02]\n    \u00a0[  1.52096385e+08   5.07339707e+02]\n    \u00a0[  1.52097723e+08   5.07344168e+02]]\n    [Finished in 0.197s]\n    ```", "```py\n    d = []\n    for i in range(1,len(l) - 1):\n    \u00a0\u00a0\u00a0\u00a0d.append(l[i]-l[i-1])\n    print(d)\n    ```", "```py\n    [-382.2014582455158, -1146.4797523021698, -1910.3842301666737,\n    \u00a0-2673.6658524870872, -3436.075836390257, -4197.365758448839,\n    \u00a0-4957.287656396627, -5715.5941315591335, -6472.038449823856,\n    \u00a0-7226.374643236399, -7978.357610076666, -8727.743215203285,\n    \u00a0-9474.288]\n    ```", "```py\nprint(\"matrix z: \")\nprint(z)\n# Transpose matrix\n# Method 1\nprint(\"new matrix: \")\nprint(np.transpose(z))\n# Method 2\nprint(z.transpose())\n# Method 3\nt = z.transpose()\nprint(t)\n```", "```py\nmatrix z: \n[[1 2]\n\u00a0[3 4]]\nnew matrix: \n[[1 3]\n\u00a0[2 4]]\n[[1 3]\n\u00a0[2 4]]\n[[1 3]\n\u00a0[2 4]]\n[Finished in 0.207s]\n```", "```py\n# Flatten the array\ny = z.ravel()\nprint(y)\n```", "```py\n[1 2 3 4]\n```", "```py\n# Comparison operators on matrix\nprint(z == 3)\n```", "```py\n[[False False]\n\u00a0[ True False]]\n```", "```py\nprint(z < 3 )\n```", "```py\n[[ True  True]\n\u00a0[False False]]\n```", "```py\n# Reshaping the matrix\nr = z.reshape(4,1)\nprint(r)\n```", "```py\n[[1]\n\u00a0[2]\n\u00a0[3]\n\u00a0[4]]\n```", "```py\n# Resizing the matrix\nresize = np.resize(z,(3,3))\nprint(resize)\n```", "```py\n\u00a0[[1 2 3]\n\u00a0[4 1 2]\n\u00a0[3 4 1]]\n[Finished in 0.205s]\n```", "```py\nimport numpy as np\nz = np.array([[1, 5, 9, 4],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[8, 3, 7, 6]])\nprint(z.max(axis = 0))\nprint(z.max(axis = 1))\n```", "```py\n[8 5 9 6]\n[9 8]\n[Finished in 0.198s]\n```", "```py\nprint(z.sum(axis = 1))\n```", "```py\n[19 24]\n[Finished in 0.255s]\n```", "```py\nprint(np.concatenate((z[1], z[0]), axis=0))\n```", "```py\n[8 3 7 6 1 5 9 4]\n[Finished in 0.252s]\n```", "```py\nprint(np.concatenate((z[1], z[0]), axis=1))\n```", "```py\nTraceback (most recent call last):\n\u00a0\u00a0File \"/matrix.py\", line 9, in <module>\n\u00a0\u00a0\u00a0\u00a0print(np.concatenate((z[1], z[0]), axis=1))\nnumpy.core._internal.AxisError: axis 1 is out of bounds for array of dimension 1\n```", "```py\n    matrix = [[7, 10, 15, 18],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[25, 29, 35, 47],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 [56, 78, 85, 104]]\n    ```", "```py\n    def matrixsearch(matrix, value):\n    \u00a0\u00a0\u00a0\u00a0# Check for edge cases\n    \u00a0\u00a0\u00a0\u00a0if value is None or not matrix:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False\n    ```", "```py\n    # Initialize the variables\n    \u00a0\u00a0\u00a0\u00a0row = len(matrix)\n    \u00a0\u00a0\u00a0\u00a0col = len(matrix[0])\n    \u00a0\u00a0\u00a0\u00a0start = 0\n    \u00a0\u00a0\u00a0\u00a0end   = row * col - 1\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0while start <= end:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mid = int((start + end) / 2)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pointer = matrix[int(mid/col)][int(mid%col)]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(int(mid/col), int(mid%col))\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if pointer == value:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return True\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elif pointer < value:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start = mid + 1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end = mid - 1\n    \u00a0\u00a0\u00a0\u00a0return False\n    sol = matrixsearch(matrix, 78)\n    print(sol)\n    ```", "```py\n    1 1\n    2 0\n    2 2\n    2 1\n    True\n    ```", "```py\nimport numpy as np\nz = np.array([[1, 2],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[3, 4]])\nx = np.array([[4, 5],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[7, 8]])\nprint(np.multiply(x,z))\nprint(np.multiply(z,x))\n```", "```py\n[[ 4 10]\n\u00a0[21 32]]\n[[ 4 10]\n\u00a0[21 32]]\n[Finished in 0.206s]\n```", "```py\nimport numpy as np\nz = np.array([[1, 2],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[3, 4]])\nx = np.array([[4, 5, 6],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[7, 8, 9]])\nprint(\"Multiplying with a number: \")\nprint(np.multiply(3,x))\nprint(np.multiply(x,3))\nprint(\"Multiplication between matrices of different sizes: \")\nprint(np.multiply(x,z))\nprint(np.multiply(z,x))\n```", "```py\nMultiplying with a number: \n[[12 15 18]\n\u00a0[21 24 27]]\n[[12 15 18]\n\u00a0[21 24 27]]\nMultiplication between matrices of different sizes: \nTraceback (most recent call last):\n\u00a0\u00a0\u00a0\u00a0File \"/Users/\u2026/matrix operations.py\", line 52, in <module>\n\u00a0\u00a0\u00a0\u00a0print(np.multiply(x,z))\nValueError: operands could not be broadcast together with shapes (2,3) (2,2) \n[Finished in 0.204s]\n```", "```py\nimport numpy as np\nz = np.array([[1,2],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[3]])\nx = np.array([[4,5]])\nprint(np.multiply(x,z))\n```", "```py\n[[list([1, 2, 1, 2, 1, 2, 1, 2]) list([3, 3, 3, 3, 3])]]\n[Finished in 0.244s]\n```", "```py\nimport numpy as np\nfrom numpy.linalg import inv\ndef identity():\n\u00a0\u00a0\u00a0\u00a0print(np.identity(3))\n```", "```py\n[[ 1\\.  0\\.  0.]\n\u00a0[ 0\\.  1\\.  0.]\n\u00a0[ 0\\.  0\\.  1.]]\n[Finished in 0.206s]\n```", "```py\ndef eye():\n\u00a0\u00a0\u00a0\u00a0print(np.eye(3, k = 1))\n```", "```py\n[[ 0\\.  1\\.  0.]\n\u00a0[ 0\\.  0\\.  1.]\n\u00a0[ 0\\.  0\\.  0.]]\n[Finished in 0.277s]\n```", "```py\ndef inverse():\n\u00a0\u00a0\u00a0\u00a0z = np.array([[1,2],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[3,4]])\n\u00a0\u00a0\u00a0\u00a0z_inv = inv(z)\n\u00a0\u00a0\u00a0\u00a0product = np.dot(z, z_inv)\n\u00a0\u00a0\u00a0\u00a0print(z_inv)\n\u00a0\u00a0\u00a0\u00a0print(product)\n```", "```py\n# Output of print(z_inv)\n[[-2\\.   1\\. ]\n\u00a0[ 1.5 -0.5]]\n# Output of print(product)\n\u00a0[[  1.00000000e+00   0.00000000e+00]\n\u00a0[  8.88178420e-16   1.00000000e+00]]\n[Finished in 0.202s]\n```", "```py\ndef and_op():\n\u00a0\u00a0\u00a0\u00a0m1 = [True, False, False]\n\u00a0\u00a0\u00a0\u00a0m2 = [True, False, True]\n\u00a0\u00a0\u00a0\u00a0print(np.logical_and(m1, m2))\n```", "```py\n[ True False False]\n[Finished in 0.253s]\n```", "```py\ndef and_op():\n\u00a0\u00a0\u00a0\u00a0m1 = [0, 1, 0]\n\u00a0\u00a0\u00a0\u00a0m2 = [1, 1, 0]\n\u00a0\u00a0\u00a0\u00a0print(np.logical_and(m1, m2))\n```", "```py\n[False  True False]\n[Finished in 0.192s]\n```", "```py\ndef vector():\n\u00a0\u00a0\u00a0\u00a0horizontal = np.array([[1,3,2]])\n\u00a0\u00a0\u00a0\u00a0vertical = np.array([[2],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0],\\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1]])\n\u00a0\u00a0\u00a0\u00a0print(\"Output for dimension 1 x 1: \")\n\u00a0\u00a0\u00a0\u00a0print(horizontal.dot(vertical))\n\u00a0\u00a0\u00a0\u00a0print(\"Output for dimension 3 x 3: \")\n\u00a0\u00a0\u00a0\u00a0print(vertical.dot(horizontal))\n\u00a0\u00a0\u00a0\u00a0print(\"Output using outer for getting cross product: \")\n\u00a0\u00a0\u00a0\u00a0print(np.outer(vertical.ravel(), horizontal.ravel()))\n\u00a0\u00a0\u00a0\u00a0print(np.outer(horizontal.ravel(), vertical.ravel()))\n```", "```py\nOutput for dimension 1 x 1: \n[[4]]\nOutput for dimension 3 x 3: \n[[2 6 4]\n\u00a0[0 0 0]\n\u00a0[1 3 2]]\nOutput using outer for getting cross product: \n[[2 6 4]\n\u00a0[0 0 0]\n\u00a0[1 3 2]]\n[[2 0 1]\n\u00a0[6 0 3]\n\u00a0[4 0 2]]\n[Finished in 0.289s]\n```", "```py\n    import numpy as np\n    # Input\n    z = np.array([[37, 20, 12],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[15, 32, 4],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[5,  40, 2]])\n    ```", "```py\n    r = np.array([[435],[178],[70]])\n    ```", "```py\n    print(np.linalg.inv(z))\n    ```", "```py\n    [[-0.06282723  0.28795812 -0.19895288]\n    \u00a0[-0.0065445   0.0091623   0.02094241]\n    \u00a0[ 0.28795812 -0.90314136  0.57853403]]\n    ```", "```py\n    X = np.linalg.inv(z).dot(r)\n    print(X)\n    ```", "```py\n    [[10\\.  ]\n    \u00a0[ 0.25]\n    \u00a0[ 5\\.  ]]\n    ```", "```py\n    y = np.linalg.solve(z,r)\n    print(y)\n    ```", "```py\n    [[10\\.  ]\n    \u00a0[ 0.25]\n    \u00a0[ 5\\.  ]]\n    ```", "```py\n    a = np.array([[37, 20, 12]])\n    ```", "```py\n    b = np.array([[15, 32, 4]])\n    c = np.array([[5,  40, 2]])\n    ```", "```py\n    u = np.concatenate((a, b, c), axis=0)\n    print(u)\n    ```", "```py\n    [[37 20 12]\n    \u00a0[15 32  4]\n    \u00a0[ 5 40  2]]\n    [Finished in 0.188s]\n    ```", "```py\n    # Generate random letters from 4 states A B C D\n    import random\n    tokens = []\n    LEN_STR = 50\n    for i in range(LEN_STR):\n    \u00a0\u00a0\u00a0\u00a0tokens.append(random.choice(\"ABCD\"))\n    print(tokens)\n    LEN_TOKENS = len(\"ABCD\")\n    ```", "```py\n    ['C', 'A', 'A', 'B', 'A', 'A', 'D', 'C', 'B', 'A', 'B',  'A', 'A', 'D', 'A', 'A', 'C', 'B', 'C', 'D', 'D', 'C',  'C', 'B', 'A', 'D', 'D', 'C', 'A', 'A', 'D', 'C', 'A',  'D', 'A', 'A', 'A', 'C', 'B', 'D', 'D', 'C', 'A', 'A',  'B', 'A', 'C', 'A', 'D', 'D']\n    ```", "```py\n    # Finding the relative values with ordinal values of \n    # ASCII characters\n    relative_value = [(ord(t) - ord('A')) for t in tokens]\n    print(relative_value)\n    ```", "```py\n    [2, 0, 0, 1, 0, 0, 3, 2, 1, 0, 1, 0, 0, 3, 0, 0, 2, 1, \n     2, 3, 3, 2, 2, 1, 0, 3, 3, 2, 0, 0, 3, 2, 0, 3, 0, 0, \n     0, 2, 1, 3, 3, 2, 0, 0, 1, 0, 2, 0, 3, 3]\n    ```", "```py\n    #create Matrix of zeros\n    m = [[0]*LEN_TOKENS for j in range(LEN_TOKENS)]\n    print(m)\n    # Building the frequency table(matrix) from the given data\n    for (i,j) in zip(relative_value, relative_value [1:]):\n    \u00a0\u00a0\u00a0\u00a0m[i][j] += 1\n    print(list(zip(relative_value, relative_value [1:])))\n    print(m)\n    ```", "```py\n    [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    [(2, 0), (0, 0), (0, 1), (1, 0), (0, 0), (0, 3), (3, 2),  (2, 1), (1, 0), (0, 1), (1, 0), (0, 0), (0, 3), (3, 0),  (0, 0), (0, 2), (2, 1), (1, 2), (2, 3), (3, 3), (3, 2),  (2, 2), (2, 1), (1, 0), (0, 3), (3, 3), (3, 2), (2, 0),  (0, 0), (0, 3), (3, 2), (2, 0), (0, 3), (3, 0), (0, 0),  (0, 0), (0, 2), (2, 1), (1, 3), (3, 3), (3, 2), (2, 0),  (0, 0), (0, 1), (1, 0), (0, 2), (2, 0), (0, 3), (3, 3)]\n    [[8, 3, 3, 6], [5, 0, 1, 1], [5, 4, 1, 1], [2, 0, 5, 4]]\n    ```", "```py\n    # Finding the Probability\n    for state in m:\n    \u00a0\u00a0\u00a0\u00a0total = sum(state)\n    \u00a0\u00a0\u00a0\u00a0if total > 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0state[:] = [float(f)/sum(state) for f in state]\n    ```", "```py\n    for state in m:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(state)\n    ```", "```py\n    [0.4, 0.15, 0.15, 0.3]\n    [0.7142857142857143, 0.0, 0.14285714285714285,  0.14285714285714285]\n    [0.45454545454545453, 0.36363636363636365,  0.09090909090909091, 0.09090909090909091]\n    [0.18181818181818182, 0.0, 0.45454545454545453,  0.36363636363636365]\n    ```"]