["```py\n>>> import getpass\n>>> pwd = getpass.getpass()\nPassword: \n>>> print(pwd)\n'HelloWorld'\n```", "```py\nimport hashlib, binascii, os\n\ndef hash_password(password):\n    \"\"\"Hash a password for storing.\"\"\"\n    salt = hashlib.sha256(os.urandom(60)).hexdigest().encode('ascii')\n    pwdhash = hashlib.pbkdf2_hmac('sha512', password.encode('utf-8'), \n                                salt, 100000)\n    pwdhash = binascii.hexlify(pwdhash)\n    return (salt + pwdhash).decode('ascii')\n\ndef verify_password(stored_password, provided_password):\n    \"\"\"Verify a stored password against one provided by user\"\"\"\n    salt = stored_password[:64]\n    stored_password = stored_password[64:]\n    pwdhash = hashlib.pbkdf2_hmac('sha512', \n                                  provided_password.encode('utf-8'), \n                                  salt.encode('ascii'), \n                                  100000)\n    pwdhash = binascii.hexlify(pwdhash).decode('ascii')\n    return pwdhash == stored_password\n```", "```py\n>>> stored_password = hash_password('ThisIsAPassWord')\n>>> print(stored_password)\ncdd5492b89b64f030e8ac2b96b680c650468aad4b24e485f587d7f3e031ce8b63cc7139b18\naba02e1f98edbb531e8a0c8ecf971a61560b17071db5eaa8064a87bcb2304d89812e1d07fe\nbfea7c73bda8fbc2204e0407766197bc2be85eada6a5\n>>> verify_password(stored_password, 'ThisIsAPassWord')\nTrue\n>>> verify_password(stored_password, 'WrongPassword')\nFalse\n```", "```py\nimport hashlib\n\ndef verify_file(filepath, expectedhash, hashtype='md5'):\n    with open(filepath, 'rb') as f:\n        try:\n            filehash = getattr(hashlib, hashtype)()\n        except AttributeError:\n            raise ValueError(\n                'Unsupported hashing type %s' % hashtype\n            ) from None\n\n        while True:\n            data = f.read(4096)\n            if not data:\n                break\n            filehash.update(data)\n\n    return filehash.hexdigest() == expectedhash\n```", "```py\n>>> verify_file(\n...     'wrapt-1.10.11.tar.gz', \n...     'd4d560d479f2c21e1b5443bbd15fe7ec4b37fe7e53d335d3b9b0a7b1226fe3c6',\n...     'sha256\n... )\nTrue\n```", "```py\nimport hashlib, hmac, time\n\ndef compute_signature(message, secret):\n    message = message.encode('utf-8')\n    timestamp = str(int(time.time()*100)).encode('ascii')\n\n    hashdata = message + timestamp\n    signature = hmac.new(secret.encode('ascii'), \n                         hashdata, \n                         hashlib.sha256).hexdigest()\n    return {\n        'message': message,\n        'signature': signature,\n        'timestamp': timestamp\n    }\n\ndef verify_signature(signed_message, secret):\n    timestamp = signed_message['timestamp']\n    expected_signature = signed_message['signature']\n    message = signed_message['message']\n\n    hashdata = message + timestamp\n    signature = hmac.new(secret.encode('ascii'), \n                         hashdata, \n                         hashlib.sha256).hexdigest()\n    return signature == expected_signature\n```", "```py\n>>> signed_msg = compute_signature('Hello World', 'very_secret')\n>>> verify_signature(signed_msg, 'very_secret')\nTrue\n```", "```py\n>>> signed_msg['message'] = b'Hello Boat'\n>>> verify_signature(signed_msg, 'very_secret')\nFalse\n```"]