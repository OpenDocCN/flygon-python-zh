["```py\nimport httplib\n\nconnection = httplib.HTTPConnection(\"www.packtpub.com\")\nconnection.request(\"GET\", \"/networking-and-servers/mastering-python-networking-and-security\")\nresponse = connection.getresponse()\nprint response\nprint response.status, response.reason\ndata = response.read()\nprint data\n```", "```py\nimport urllib2\ntry:\n    response = urllib2.urlopen(\"http://www.python.org\")\n    print response.read()\n    response.close()\nexcept HTTPError, e:\n    print e.code\nexcept URLError, e:\n    print e.reason\n```", "```py\n>>> response = urllib2.urlopen('http://www.python.org')\n>>> response.read()\nb'<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n\"http://www.w3.org/TR/html4/strict.dtd\">\\n<html\n>>> response.read(100)\n```", "```py\n>>> response.status\n200\n```", "```py\nimport urllib2\nurl = raw_input(\"Enter the URL \")\nhttp_response = urllib2.urlopen(url)\nprint 'Status Code: '+ str(http_response.code)\nif http_response.code == 200:\n    print http_response.headers\n```", "```py\n>>> print response_headers.keys()\n['content-length', 'via', 'x-cache', 'accept-ranges', 'x-timer', 'vary', 'strict-transport-security', 'server', 'age', 'connection', 'x-xss-protection', 'x-cache-hits', 'x-served-by', 'date', 'x-frame-options', 'content-type', 'x-clacks-overhead']\n```", "```py\nimport urllib2\nurl = \"http://www.python.org\"\nheaders= {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.117 Safari/537.36'}\nrequest = urllib2.Request(url,headers=headers)\nresponse = urllib2.urlopen(request)\n# Here we check response headers\nif response.code == 200:\n    print(response.headers)\n```", "```py\nimport urllib2\nimport re\n#enter url\nweb =  raw_input(\"Enter url: \")\n#https://www.packtpub.com/books/info/packt/terms-and-conditions\n#get response form url\nresponse = urllib2.Request('http://'+web)\n#get content page from response\ncontent = urllib2.urlopen(response).read()\n#regular expression\npattern = re.compile(\"[-a-zA-Z0-9._]+@[-a-zA-Z0-9_]+.[a-zA-Z0-9_.]+\")\n#get mails from regular expression\nmails = re.findall(pattern,content)\nprint(mails)\n\n```", "```py\n#!/usr/bin/python\nimport urllib2\nfrom HTMLParser import HTMLParser\nclass myParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        if (tag == \"a\"):\n            for a in attrs:\n                if (a[0] == 'href'):\n                    link = a[1]\n                    if (link.find('http') >= 0):\n                        print(link)\n                        newParse = myParser()\n                        newParse.feed(link)\n\nweb =  raw_input(\"Enter url: \")\nurl = \"http://\"+web\nrequest = urllib2.Request(url)\nhandle = urllib2.urlopen(request)\nparser = myParser()\nparser.feed(handle.read().decode('utf-8'))\n```", "```py\npip install requests\n```", "```py\n>>> import requests\n>>> response = requests.get('http://www.python.org')\n```", "```py\nimport requests, json\nprint(\"Requests Library tests.\")\nresponse = requests.get(\"http://www.python.org\")\nprint(response.json)\nprint(\"Status code: \"+str(response.status_code))\nprint(\"Headers response: \")\nfor header, value in response.headers.items():\n    print(header, '-->', value)\n\nprint(\"Headers request : \")\nfor header, value in response.request.headers.items():\n    print(header, '-->', value)\n\n```", "```py\nimport requests\nif __name__ == \"__main__\":\n response = requests.get(\"http://www.python.org\")\n for header in response.headers.keys():\n print(header + \":\" + response.headers[header])\n```", "```py\nimport requests,json\nresponse = requests.get(\"http://httpbin.org/get\",timeout=5)\n# we then print out the http status_code\nprint(\"HTTP Status Code: \" + str(response.status_code))\nprint(response.headers)\nif response.status_code == 200:\n    results = response.json()\n    for result in results.items():\n        print(resul)\n\n    print(\"Headers response: \")\n    for header, value in response.headers.items():\n        print(header, '-->', value)\n\n    print(\"Headers request : \")\n    for header, value in response.request.headers.items():\n        print(header, '-->', value)\n    print(\"Server:\" + response.headers['server'])\nelse:\n    print(\"Error code %s\" % response.status_code)\n```", "```py\n>>> data_dictionary = {\"id\": \"0123456789\"}\n>>> url = \"http://httpbin.org/post\"\n>>> response = requests.post(url, data=data_dictionary)\n```", "```py\n>>> data_dictionary = {\"id\": \"0123456789\"}\n>>> headers = {\"Content-Type\" : \"application/json\",\"Accept\":\"application/json\"}\n>>> url = \"http://httpbin.org/post\"\n>>> response = requests.post(url, data=data_dictionary,headers=headers)\n```", "```py\n>>> proxy = {\"protocol\":\"ip:port\", ...}\n```", "```py\n>>> response = requests.get(url,headers=headers,proxies=proxy)\n```", "```py\nimport requests\nhttp_proxy = \"http://<ip_address>:<port>\"\nproxy_dictionary = { \"http\" : http_proxy}\nrequests.get(\"http://example.org\", proxies=proxy_dictionary)\n```", "```py\n>>> response = requests.get('http://www.google.com/pagenotexists')\n>>> response.status_code\n404\n```", "```py\n>>> response.raise_for_status()\nrequests.exceptions.HTTPError: 404 Client Error\n```", "```py\n>>> r = requests.get('http://url_not_exists')\nrequests.exceptions.ConnectionError: HTTPConnectionPool(...\n```", "```py\nimport requests\nencoded = base64.encodestring(user+\":\"+passwd)\nresponse = requests.get(protectedURL, auth=(user,passwd))\n```", "```py\nimport base64\nimport requests\nusers=['administrator', 'admin']\npasswords=['administrator','admin']\nprotectedResource = 'http://localhost/secured_path'\nfoundPass = False\nfor user in users:\n    if foundPass:\n        break\n    for passwd in passwords:\n        encoded = base64.encodestring(user+':'+passwd)\n        response = requests.get(protectedResource, auth=(user,passwd))\n        if response.status_code != 401:\n            print('User Found!')\n            print('User: %s, Pass: %s' %(user,passwd))\n            foundPass=True\n            break\n```", "```py\nimport requests\nfrom requests.auth import HTTPDigestAuth\nresponse = requests.get(protectedURL, auth=HTTPDigestAuth(user,passwd))\n```", "```py\nimport requests\nfrom requests.auth import HTTPDigestAuth\nusers=['administrator', 'admin']\npasswords=['administrator','admin']\nprotectedResource = 'http://localhost/secured_path'\nfoundPass = False\nfor user in users:\n if foundPass:\n     break\n for passwd in passwords:\n     res = requests.get(protectedResource)\n     if res.status_code == 401:\n         resDigest = requests.get(protectedResource, auth=HTTPDigestAuth(user, passwd))\n         if resDigest.status_code == 200:\n             print('User Found...')\n             print('User: '+user+' Pass: '+passwd)\n             foundPass = True\n```"]