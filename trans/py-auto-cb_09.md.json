["```py\n$ echo \"delorean==1.0.0\" >> requirements.txt\n$ echo \"requests==2.18.3\" >> requirements.txt\n$ echo \"beautifulsoup4==4.6.0\" >> requirements.txt\n$ echo \"feedparser==5.2.1\" >> requirements.txt\n$ echo \"jinja2==2.10\" >> requirements.txt\n$ echo \"mistune==0.8.3\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n[SEARCH]\nkeywords = keyword, keyword\nfeeds = feed, feed\n\n[EMAIL]\nuser = <YOUR EMAIL USERNAME>\npassword = <YOUR EMAIL PASSWORD>\nfrom = <EMAIL ADDRESS FROM>\nto = <EMAIL ADDRESS TO>\n```", "```py\n$ python search_keywords.py config-opportunity.ini\n```", "```py\n$ python create_personalised_coupons.py\nCode: HWLF-P9J9E-U3\nCode: EAUE-FRCWR-WM\nCode: PMW7-P39MP-KT\n...\n```", "```py\n$ wc -l codes_batch_*.csv\n  500000 codes_batch_1.csv\n  300000 codes_batch_2.csv\n  200000 codes_batch_3.csv\n 1000000 total\n```", "```py\n$ head codes_batch_2.csv\n9J9F-M33YH-YR\n7WLP-LTJUP-PV\nWHFU-THW7R-T9\n...\n```", "```py\n# IMPORTS\n\n# FUNCTIONS\ndef random_code(digits)\ndef checksum(code1, code2)\ndef check_code(code)\ndef generate_code()\n\n# SET UP TASK\n\n# GENERATE CODES\n\n# CREATE AND SAVE BATCHES\n```", "```py\ndef checksum(code1, code2):\n    m = hashlib.sha256()\n    m.update(code1.encode())\n    m.update(code2.encode())\n    checksum = int(m.hexdigest()[:2], base=16)\n    digit = CHARACTERS[checksum % len(CHARACTERS)]\n    return digit\n```", "```py\nbatch = [(codes.pop(),) for _ in range(batch_size)]\n```", "```py\n$ echo \"delorean==1.0.0\" >> requirements.txt\n$ echo \"requests==2.18.3\" >> requirements.txt\n$ echo \"twilio==6.16.3\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n[MAILGUN]\nKEY = <YOUR KEY>\nDOMAIN = <YOUR DOMAIN>\nFROM = <YOUR FROM EMAIL>\n[TWILIO]\nACCOUNT_SID = <YOUR SID>\nAUTH_TOKEN = <YOUR TOKEN>\nFROM = <FROM TWILIO PHONE NUMBER>\n```", "```py\n$ python send_notifications.py --help\nusage: send_notifications.py [-h] [-c CODES] [--config CONFIG_FILE] notif_file\n\npositional arguments:\n  notif_file notifications file\n\noptional arguments:\n  -h, --help show this help message and exit\n  -c CODES, --codes CODES\n                        Optional file with codes. If present, the file will be\n                        populated with codes. No codes will be sent\n  --config CONFIG_FILE config file (default config.ini)\n```", "```py\n$ python send_notifications.py --config config-channel.ini notifications.csv -c codes_batch_3.csv \n$ head notifications.csv\nName,Contact Method,Target,Status,Code,Timestamp\nJohn Smith,PHONE,+1-555-12345678,NOT-SENT,CFXK-U37JN-TM,\nPaul Smith,EMAIL,paul.smith@test.com,NOT-SENT,HJGX-M97WE-9Y,\n...\n```", "```py\n$ python send_notifications.py --config config-channel.ini notifications.csv\n$ head notifications.csv\nName,Contact Method,Target,Status,Code,Timestamp\nJohn Smith,PHONE,+1-555-12345678,SENT,CFXK-U37JN-TM,2018-08-25T13:08:15.908986+00:00\nPaul Smith,EMAIL,paul.smith@test.com,SENT,HJGX-M97WE-9Y,2018-08-25T13:08:16.980951+00:00\n...\n```", "```py\n# IMPORTS\n\ndef send_phone_notification(...):\ndef send_email_notification(...):\ndef send_notification(...):\n\ndef save_file(...):\ndef main(...):\n\nif __name__ == '__main__':\n    # Parse arguments and prepare configuration\n    ...\n```", "```py\n>>> import datetime\n>>> timestamp = datetime.datetime.now(datetime.timezone.utc).isoformat()\n>>> timestamp\n'2018-08-25T14:13:53.772815+00:00'\n>>> datetime.datetime.fromisoformat(timestamp)\ndatetime.datetime(2018, 9, 11, 21, 5, 41, 979567, tzinfo=datetime.timezone.utc)\n```", "```py\n# Route each of the notifications\nMETHOD = {\n    'PHONE': send_phone_notification,\n    'EMAIL': send_email_notification,\n}\ntry:\n    method = METHOD[entry['Contact Method']]\n    result = method(entry, config)\nexcept KeyError:\n    result = 'INVALID_METHOD'\n```", "```py\n$ echo \"openpyxl==2.5.4\" >> requirements.txt\n$ echo \"parse==1.8.2\" >> requirements.txt\n$ echo \"delorean==1.0.0\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n$ tree sales\nsales\n\u251c\u2500\u2500 345\n\u2502   \u2514\u2500\u2500 logs.txt\n\u251c\u2500\u2500 438\n\u2502   \u251c\u2500\u2500 logs_1.txt\n\u2502   \u251c\u2500\u2500 logs_2.txt\n\u2502   \u251c\u2500\u2500 logs_3.txt\n\u2502   \u2514\u2500\u2500 logs_4.txt\n\u2514\u2500\u2500 656\n \u2514\u2500\u2500 logs.txt\n```", "```py\n$ head sales/438/logs_1.txt\n[2018-08-27 21:05:55+00:00] - SALE - PRODUCT: 12346 - PRICE: $02.99 - NAME: Single item - DISCOUNT: 0%\n[2018-08-27 22:05:55+00:00] - SALE - PRODUCT: 12345 - PRICE: $07.99 - NAME: Family pack - DISCOUNT: 20%\n...\n```", "```py\n$ python parse_sales_log.py sales -o report.xlsx\n```", "```py\n# IMPORTS\nfrom sale_log import SaleLog\n\ndef get_logs_from_file(shop, log_filename):\n    with open(log_filename) as logfile:\n        logs = [SaleLog.parse(shop=shop, text_log=log)\n                for log in logfile]\n    return logs\n\ndef main(log_dir, output_filename):\n    logs = []\n    for dirpath, dirnames, filenames in os.walk(log_dir):\n        for filename in filenames:\n            # The shop is the last directory\n            shop = os.path.basename(dirpath)\n            fullpath = os.path.join(dirpath, filename)\n            logs.extend(get_logs_from_file(shop, fullpath))\n\n    # Create and save the Excel sheet\n    xlsfile = openpyxl.Workbook()\n    sheet = xlsfile['Sheet']\n    sheet.append(SaleLog.row_header())\n    for log in logs:\n        sheet.append(log.row())\n    xlsfile.save(output_filename)\n\nif __name__ == '__main__':\n  # PARSE COMMAND LINE ARGUMENTS AND CALL main()\n\n```", "```py\n    @classmethod\n    def parse(cls, shop, text_log):\n        '''\n        Parse from a text log with the format\n        ...\n        to a SaleLog object\n        '''\n        def price(string):\n            return Decimal(string)\n\n        def isodate(string):\n            return delorean.parse(string)\n\n        FORMAT = ('[{timestamp:isodate}] - SALE - PRODUCT: {product:d} '\n                  '- PRICE: ${price:price} - NAME: {name:D} '\n                  '- DISCOUNT: {discount:d}%')\n\n        formats = {'price': price, 'isodate': isodate}\n        result = parse.parse(FORMAT, text_log, formats)\n\n        return cls(timestamp=result['timestamp'],\n                   product_id=result['product'],\n                   price=result['price'],\n                   name=result['name'],\n                   discount=result['discount'],\n                   shop=shop)\n```", "```py\n$ echo \"openpyxl==2.5.4\" >> requirements.txt\n$ echo \"fpdf==1.7.2\" >> requirements.txt\n$ echo \"delorean==1.0.0\" >> requirements.txt\n$ echo \"PyPDF2==1.26.0\" >> requirements.txt\n$ echo \"matplotlib==2.2.2\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n$ ls report.xlsx\nreport.xlsx\n$ python generate_sales_report.py --help\nusage: generate_sales_report.py [-h] input_file output_file\n\npositional arguments:\n  input_file\n  output_file\n\noptional arguments:\n  -h, --help show this help message and exit\n```", "```py\n$ python generate_sales_report.py report.xlsx output.pdf\n```", "```py\n# IMPORTS\ndef generate_summary(logs):\n\ndef aggregate_by_day(logs):\ndef aggregate_by_shop(logs):\n\ndef graph(...):\n\ndef create_summary_brief(...):\n\ndef main(input_file, output_file):\n  # open and read input file\n  # Generate each of the pages calling the other calls\n  # Group all the pdfs into a single file\n  # Write the resulting PDF\n\nif __name__ == '__main__':\n  # Compile the input and output files from the command line\n  # call main\n```", "```py\n# Generate a data series with the average discount\ndiscount = [summary['average_discount'] for _, summary in full_summary]\n....\n# Print the legend\n# Plot the discount in a second axis\nplt.twinx()\nplt.plot(pos, discount,'o-', color='green')\nplt.ylabel('Average Discount')\n```"]