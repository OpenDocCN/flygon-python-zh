["```py\nclassname widgetid options\n```", "```py\nbutton .mybutton -fg red  -text \"click here\"\n```", "```py\nfrom tkinter import messagebox\n\ndef alert(title, message, kind='info', hidemain=True):\n    if kind not in ('error', 'warning', 'info'):\n        raise ValueError('Unsupported alert kind.')\n\n    show_method = getattr(messagebox, 'show{}'.format(kind))\n    show_method(title, message)\n```", "```py\nfrom tkinter import Tk\n\nTk().withdraw()\nalert('Hello', 'Hello World')\nalert('Hello Again', 'Hello World 2', kind='warning')\n```", "```py\nif kind not in ('error', 'warning', 'info'):\n    raise ValueError('Unsupported alert kind.')\n```", "```py\nshow_method = getattr(messagebox, 'show{}'.format(kind))\n```", "```py\nshow_method(title, message)\n```", "```py\nfrom tkinter import Tk\nTk().withdraw()\n```", "```py\nfrom tkinter import messagebox\nfrom tkinter import simpledialog\nfrom tkinter import filedialog\n\ndef dialog(ask, title, message=None, **kwargs):\n    for widget in (messagebox, simpledialog, filedialog):\n        show = getattr(widget, 'ask{}'.format(ask), None)\n        if show:\n            break\n    else:\n        raise ValueError('Unsupported type of dialog: {}'.format(ask))\n\n    options = dict(kwargs, title=title)\n    for arg, replacement in dialog._argsmap.get(widget, {}).items():\n        options[replacement] = locals()[arg]\n    return show(**options)\ndialog._argsmap = {\n    messagebox: {'message': 'message'},\n    simpledialog: {'message': 'prompt'}\n}\n```", "```py\n>>> from tkinter import Tk\n\n>>> Tk().withdraw()\n>>> for ask in ('okcancel', 'retrycancel', 'yesno', 'yesnocancel',\n...             'string', 'integer', 'float', 'directory', 'openfilename'):\n...     choice = dialog(ask, 'This is title', 'What?')\n...     print('{}: {}'.format(ask, choice))\nokcancel: True\nretrycancel: False\nyesno: True\nyesnocancel: None\nstring: Hello World\ninteger: 5\nfloat: 1.3\ndirectory: /Users/amol/Documents\nopenfilename: /Users/amol/Documents/FileZilla_3.27.1_macosx-x86.app.tar.bz2\n```", "```py\nfrom tkinter import messagebox\nfrom tkinter import simpledialog\nfrom tkinter import filedialog\n\ndef dialog(ask, title, message=None, **kwargs):\n    for widget in (messagebox, simpledialog, filedialog):\n        show = getattr(widget, 'ask{}'.format(ask), None)\n        if show:\n            break\n    else:\n        raise ValueError('Unsupported type of dialog: {}'.format(ask))\n```", "```py\noptions = dict(kwargs, title=title)\n```", "```py\nfor arg, replacement in dialog._argsmap.get(widget, {}).items():\n    options[replacement] = locals()[arg]\nreturn show(**options)\n\ndialog._argsmap = {\n    messagebox: {'message': 'message'}, \n    simpledialog: {'message': 'prompt'}\n}\n```", "```py\nimport tkinter\nfrom tkinter import simpledialog\nfrom tkinter import ttk\n\nfrom queue import Queue\n\nclass ProgressDialog(simpledialog.SimpleDialog):\n    def __init__(self, master, text='', title=None, class_=None):\n        super().__init__(master=master, text=text, title=title, \n                         class_=class_)\n        self.default = None\n        self.cancel = None\n\n        self._bar = ttk.Progressbar(self.root, orient=\"horizontal\", \n                                    length=200, mode=\"determinate\")\n        self._bar.pack(expand=True, fill=tkinter.X, side=tkinter.BOTTOM)\n        self.root.attributes(\"-topmost\", True)\n\n        self._queue = Queue()\n        self.root.after(200, self._update)\n\n    def set_progress(self, value):\n        self._queue.put(value)\n\n    def _update(self):\n        while self._queue.qsize():\n            try:\n                self._bar['value'] = self._queue.get(0)\n            except Queue.Empty:\n                pass\n        self.root.after(200, self._update)\n```", "```py\nif __name__ == '__main__':\n    root = tkinter.Tk()\n    root.withdraw()\n\n    # Prepare the progress dialog\n    p = ProgressDialog(master=root, text='Downloading Something...',\n                    title='Download')\n\n    # Simulate a download running for 5 seconds in background\n    import threading\n    def _do_progress():\n        import time\n        for i in range(1, 11):\n            time.sleep(0.5)\n            p.set_progress(i*10)\n        p.done(0)\n    t = threading.Thread(target=_do_progress)\n    t.start()\n\n    # Display the dialog and wait for the download to finish.\n    p.go()\n    print('Download Completed!')\n```", "```py\nclass ProgressDialog(simpledialog.SimpleDialog):\n    def __init__(self, master, text='', title=None, class_=None):\n        super().__init__(master=master, text=text, title=title, class_=class_)\n        self.default = None\n        self.cancel = None\n```", "```py\nself._bar = ttk.Progressbar(self.root, orient=\"horizontal\", \n                            length=200, mode=\"determinate\")\nself._bar.pack(expand=True, fill=tkinter.X, side=tkinter.BOTTOM)\nself.root.attributes(\"-topmost\", True)\n```", "```py\nself._queue = Queue()\nself.root.after(200, self._update)\n```", "```py\ndef set_progress(self, value):\n    self._queue.put(value)\n```", "```py\ndef _update(self):\n    while self._queue.qsize():\n        try:\n            self._bar['value'] = self._queue.get(0)\n        except Queue.Empty:\n            pass\n    self.root.after(200, self._update)\n```", "```py\nself.root.after(200, self._update)\n```", "```py\nif __name__ == '__main__':\n    root = tkinter.Tk()\n    root.withdraw()\n\n    # Prepare the progress dialog\n    p = ProgressDialog(master=root, text='Downloading Something...',\n                    title='Download')\n```", "```py\n# Simulate a download running for 5 seconds in background\nimport threading\n\ndef _do_progress():\n    import time\n    for i in range(1, 11):\n        time.sleep(0.5)\n        p.set_progress(i*10)\n    p.done(0)\n\nt = threading.Thread(target=_do_progress)\nt.start()\n```", "```py\n# Display the dialog and wait for the download to finish.\np.go()\nprint('Download Completed!')\n```", "```py\nimport tkinter\nfrom tkinter import simpledialog\n\nclass ChoiceDialog(simpledialog.Dialog):\n    def __init__(self, parent, title, text, items):\n        self.selection = None\n        self._items = items\n        self._text = text\n        super().__init__(parent, title=title)\n\n    def body(self, parent):\n        self._message = tkinter.Message(parent, text=self._text, aspect=400)\n        self._message.pack(expand=1, fill=tkinter.BOTH)\n        self._list = tkinter.Listbox(parent)\n        self._list.pack(expand=1, fill=tkinter.BOTH, side=tkinter.TOP)\n        for item in self._items:\n            self._list.insert(tkinter.END, item)\n        return self._list\n\n    def validate(self):\n        if not self._list.curselection():\n            return 0\n        return 1\n\n    def apply(self):\n        self.selection = self._items[self._list.curselection()[0]]\n```", "```py\nif __name__ == '__main__':\n    tk = tkinter.Tk()\n    tk.withdraw()\n\n    dialog = ChoiceDialog(tk, 'Pick one',\n                        text='Please, pick a choice?',\n                        items=['first', 'second', 'third'])\n    print('Selected \"{}\"'.format(dialog.selection))\n```", "```py\nimport tkinter\nfrom tkinter import simpledialog\n\nclass ChoiceDialog(simpledialog.Dialog):\n    def __init__(self, parent, title, text, items):\n        self.selection = None\n        self._items = items\n        self._text = text\n        super().__init__(parent, title=title)\n```", "```py\ndef body(self, parent):\n    self._message = tkinter.Message(parent, text=self._text, aspect=400)\n    self._message.pack(expand=1, fill=tkinter.BOTH)\n    self._list = tkinter.Listbox(parent)\n    self._list.pack(expand=1, fill=tkinter.BOTH, side=tkinter.TOP)\n    for item in self._items:\n        self._list.insert(tkinter.END, item)\n    return self._list\n```", "```py\ndef validate(self):\n    if not self._list.curselection():\n        return 0\n    return 1\n```", "```py\ndef apply(self):\n    self.selection = self._items[self._list.curselection()[0]]\n```", "```py\ndialog = ChoiceDialog(tk, 'Pick one',\n                    text='Please, pick a choice?',\n                    items=['first', 'second', 'third'])\nprint('Selected \"{}\"'.format(dialog.selection))\n```", "```py\nimport tkinter\n\ndef set_menu(window, choices):\n    menubar = tkinter.Menu(root)\n    window.config(menu=menubar)\n\n    def _set_choices(menu, choices):\n        for label, command in choices.items():\n            if isinstance(command, dict):\n                # Submenu\n                submenu = tkinter.Menu(menu)\n                menu.add_cascade(label=label, menu=submenu)\n                _set_choices(submenu, command)\n            elif label == '-' and command == '-':\n                # Separator\n                menu.add_separator()\n            else:\n                # Simple choice\n                menu.add_command(label=label, command=command)\n\n    _set_choices(menubar, choices)\n```", "```py\nimport sys\nroot = tkinter.Tk()\n\nfrom collections import OrderedDict\nset_menu(root, {\n    'File': OrderedDict([\n        ('Open', lambda: print('Open!')),\n        ('Save', lambda: print('Save')),\n        ('-', '-'),\n        ('Quit', lambda: sys.exit(0))\n    ])\n})\nroot.mainloop()\n```", "```py\ndef set_menu(window, choices):\n    menubar = tkinter.Menu(root)\n    window.config(menu=menubar)\n```", "```py\ndef _set_choices(menu, choices):\n    for label, command in choices.items():\n        if isinstance(command, dict):\n            # Submenu\n            submenu = tkinter.Menu(menu)\n            menu.add_cascade(label=label, menu=submenu)\n            _set_choices(submenu, command)\n        elif label == '-' and command == '-':\n            # Separator\n            menu.add_separator()\n        else:\n            # Simple choice\n            menu.add_command(label=label, command=command)\n\n_set_choices(menubar, choices)\n```"]