- en: Working with the Servo Control Code to Control an Analog Device
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用伺服控制代码控制模拟设备
- en: Continuing our journey to combine the elegance of an analog meter with the accuracy
    of digital data, we will take a look at what we've learned in the previous two
    chapters and build an IoT weather dashboard with an analog meter display.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的旅程，将模拟仪表的优雅与数字数据的准确性相结合，我们将看看我们在前两章中学到的内容，并构建一个带有模拟仪表显示的物联网天气仪表盘。
- en: Make sure that you have the circuit from [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*, wired up before you start this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，请确保已经连接了[第5章](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml)中的电路，*使用Python控制伺服*。
- en: This dashboard will display wardrobe suggestions based on the outside temperature
    and wind speed. We will also use an LED on our dashboard to indicate whether or
    not we should take an umbrella with us.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个仪表盘将根据室外温度和风速显示衣柜建议。我们还将在我们的仪表盘上使用LED指示是否需要带上雨伞。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Accessing weather data from the cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从云端访问天气数据
- en: Controlling the servo using weather data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用天气数据控制伺服
- en: Enhancing our project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强我们的项目
- en: Knowledge required to complete this chapter
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成本章所需的知识
- en: You should have a working knowledge of the Python programming language to complete
    this chapter. Knowledge of using a simple breadboard that you can connect components
    to is also a must.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该具备Python编程语言的工作知识才能完成本章。还必须了解如何使用简单的面包板，以便连接组件。
- en: A vinyl or craft cutter may be used in this project. Knowledge of how to use
    a cutter would be an asset so that you can complete this project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中可以使用乙烯基或手工切割机。了解如何使用切割机将是一个资产，这样你就可以完成这个项目。
- en: Project overview
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: By the end of this chapter, we should have a working IoT analog weather dashboard.
    We will modify the code written in [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml),
    *Subscribing to Web Services*, and [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*, to provide data to our dashboard. A backdrop
    will be printed and cut out. This backdrop will give our dashboard a cartoon-like
    look.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们应该有一个可以工作的物联网模拟天气仪表盘。我们将修改[第4章](626664bb-0130-46d1-b431-682994472fc1.xhtml)和[第5章](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml)中编写的代码，以向我们的仪表盘提供数据。将打印并剪切一个背景。这个背景将给我们的仪表盘一个卡通般的外观。
- en: 'We will be using the circuit from [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*. The following is the wiring diagram from this
    circuit:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[第5章](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml)中的电路，*使用Python控制伺服*。以下是来自该电路的接线图：
- en: '![](assets/80b31448-fb1a-4e05-8f81-ccecbeb974e0.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80b31448-fb1a-4e05-8f81-ccecbeb974e0.png)'
- en: This project should take an afternoon to complete.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目应该需要一个下午的时间来完成。
- en: Getting started
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个项目，需要以下设备：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派3型号（2015年或更新型号）
- en: A USB power supply
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB电源适配器
- en: A computer monitor
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台电脑显示器
- en: A USB keyboard
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB键盘
- en: A USB mouse
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB鼠标
- en: A small servo motor
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个小型伺服电机
- en: An LED (any color)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LED（任何颜色）
- en: A breadboard
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Jumper wires for the breadboard
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板的跳线线
- en: A color printer
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个彩色打印机
- en: A vinyl or craft cutter (optional)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个乙烯基或手工切割机（可选）
- en: Accessing weather data from the cloud
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从云端访问天气数据
- en: In [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml), *Subscribing to
    Web Services*, we wrote a Python program to access weather data from Yahoo! Weather.
    The class, `CurrentWeather`, from that program returned the temperature, weather
    conditions, and wind speed for the `city` value that the class was instantiated
    with.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](626664bb-0130-46d1-b431-682994472fc1.xhtml)中，*订阅Web服务*，我们编写了一个Python程序，从Yahoo!天气获取天气数据。该程序中的`CurrentWeather`类返回了根据类实例化时的`city`值返回的温度、天气状况和风速。
- en: 'We will revisit that code and change the class name to `WeatherData`. We will
    also add a method to return a value from `0`-`100` to indicate the weather. We
    will take the temperature and wind speed into account when determining this number,
    with 0 being extreme winter-like conditions and `100` being very hot extreme summer
    conditions. We will use this number to control our servo. We will also check to
    see whether it is raining and update our LED to indicate whether or not we need
    an umbrella:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重新访问该代码，并将类名更改为`WeatherData`。我们还将添加一个方法，返回一个值从`0`-`100`，以指示天气。在确定这个数字时，我们将考虑温度和风速，0表示极端的冬季条件，`100`表示非常炎热的夏季极端条件。我们将使用这个数字来控制我们的伺服。我们还将检查是否下雨，并更新我们的LED以指示我们是否需要雨伞：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE 打开 Thonny
- en: Click on the New icon to create a new file
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件
- en: 'Type the following into the file:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中输入以下内容：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the file as `WeatherData.py`
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`WeatherData.py`
- en: 'The heart of our code is in the `getServoValue()` and `getLEDValue()` methods:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码的核心在于`getServoValue()`和`getLEDValue()`方法：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the `getServoValue` method, we set the `temp_factor` and `wind_factor` variables
    to a percentage value based on a minimum of `0` for both of them and a maximum
    of `30` and `20` for the temperature and wind speeds, respectively. These are
    arbitrary numbers as we will consider `30` degrees Celsius to be our extreme hot
    temperature and 20 kph winds as our extreme wind speed. The servo value is set
    by subtracting the wind speed by 5 percent from the temperature (by dividing it
    by `20`). This, of course, is arbitrary as well. Feel free to adjust the percentage
    as desired.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`getServoValue`方法中，我们将`temp_factor`和`wind_factor`变量设置为基于最小值`0`和温度和风速的最大值`30`和`20`的百分比值。这些是任意的数字，因为我们将考虑`30`摄氏度为我们的极端高温，20公里/小时的风速为我们的极端风速。伺服值通过从温度减去风速的5%（除以`20`）来设置。当然，这也是任意的。随意调整所需的百分比。
- en: To explain this further, consider a temperature of 10 degrees Celsius and a
    wind speed of 5 km/h. The temperature factor (`temp_factor`) would be 10 multiplied
    by 100 and then divided by 30 or 33.33\. The wind speed factor (`wind_factor`)
    would be 5 multiplied by 100 and then divided by 20 or 25\. The value we pass
    to our servo (`servo_value`) would be the temperature factor (33.33) minus the
    wind speed factor (25) after it has been divided by `20`. The value of `servo_value`
    is 32.08 or roughly 32 percent of the maximum servo value.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步解释，考虑一下10摄氏度的温度和5公里/小时的风速。温度因子（temp_factor）将是10乘以100，然后除以30或33.33。风速因子（wind_factor）将是5乘以100，然后除以20或25。我们传递给舵机的值（servo_value）将是温度因子（33.33）减去风速因子（25）后除以“20”。“servo_value”的值为32.08，或者大约是最大舵机值的32%。
- en: We then return the value of `servo_value` and use it to control our servo. Any
    value below `0` and above `100` will off our scale and will not work with our
    servo (as we are moving the servo between `0` and `100` percent). We use an `if`
    statement in the `getServoValue` method to correct such conditions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后返回“servo_value”的值并将其用于控制我们的舵机。任何低于“0”和高于“100”的值都将超出我们的范围，并且无法与我们的舵机一起使用（因为我们将舵机在“0”和“100”之间移动）。我们在“getServoValue”方法中使用“if”语句来纠正这种情况。
- en: 'The `getLEDValue` method simply checks the weather conditions and returns code
    based on whether or not it is raining. `Thunderstorm` will return a value of `2`,
    `Rain` and `Light Rain` will return a value of `1`, and anything else will return
    a value of `0`. We will use this value to blink the LED in our dashboard if there
    is a thunderstorm, keep it solid if it is only raining, and turn it off under
    all other conditions:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “getLEDValue”方法只是检查天气条件并根据是否下雨返回代码。“雷暴”将返回值“2”，“雨”和“小雨”将返回值“1”，其他任何情况将返回值“0”。如果有雷暴，我们将使用这个值来在我们的仪表盘上闪烁LED，如果只是下雨，我们将保持其亮起，并在其他所有情况下关闭它：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At the time of writing this book, `Thunderstorm`, `Rain`, and `Light Rain` were
    values that were returned during a search of the weather in world cities. Please
    feel free to update the `if` statement to include other descriptions of extreme
    precipitation. As an added enhancement, you may consider using regular expressions
    in the `if` statement.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，“雷暴”、“雨”和“小雨”是在搜索世界各大城市天气时返回的值。请随时更新“if”语句以包括其他极端降水的描述。作为一个额外的增强，你可以考虑在“if”语句中使用正则表达式。
- en: 'Run the code in Thonny. You should get a value for the servo and LED based
    on the weather conditions in Paris. I received the following at the time I ran
    the code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中运行代码。你应该会得到巴黎天气条件下舵机和LED的值。我在运行代码时得到了以下结果：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Controlling the servo using weather data
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用天气数据控制舵机
- en: We are close to building our IoT weather dashboard. The final steps involve
    controlling our servo position based on the weather data returned from the Yahoo!
    Weather web service and physically building a backdrop for our servo needle.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将构建我们的物联网天气仪表盘。最后的步骤涉及根据从Yahoo! Weather网络服务返回的天气数据来控制我们舵机的位置，并在物理上建立一个背景板来支撑我们的舵机指针。
- en: Correcting for servo range
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 校正舵机范围
- en: As some of you may have noticed, your servo motor does not move a full 180 degrees
    from minimum to maximum. This is due to the minimum and maximum pulse widths of
    1 ms and 2 ms set in GPIO Zero. To account for this difference, we must adjust
    the `min_pulse_width` and `max_pulse_width` properties accordingly when we instantiate
    a `Servo` object.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你们中的一些人可能已经注意到的那样，你的舵机并不能从最小到最大移动180度。这是由于GPIO Zero中设置的最小和最大脉冲宽度为1毫秒和2毫秒。为了解决这个差异，我们在实例化“Servo”对象时必须相应地调整“min_pulse_width”和“max_pulse_width”属性。
- en: 'The following code does just that. The variable, `servoCorrection`, adds to
    and subtracts from the `min_pulse_width` and `max_pulse_width` values. The following
    code moves the servo to the minimum position and then the maximum position after
    `5` seconds:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码就是这样做的。变量“servoCorrection”对“min_pulse_width”和“max_pulse_width”值进行加减。以下代码在“5”秒后将舵机移动到最小位置，然后移动到最大位置：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny。
- en: Click on the New icon to create a new file.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“新建”图标创建新文件。
- en: 'Type the following into the file:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中键入以下内容：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file as `servo_correction.py`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为“servo_correction.py”。
- en: Run the code to see if the value of `servoCorrection` fixes the issue with your
    servo not turning a full 180 degrees from `servo.min` to `servo.max`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，看看“servoCorrection”的值是否修复了你的舵机在“servo.min”到“servo.max”之间不能转动180度的问题。
- en: Adjust `servoCorrection` until your servo does move 180 degrees between `servo.min`
    and `servo.max`. We will use the value of `servoCorrection` in the code for our
    weather dashboard.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整“servoCorrection”，直到你的舵机在“servo.min”和“servo.max”之间移动了180度。我们将在天气仪表盘的代码中使用“servoCorrection”的值。
- en: Changing the position of the servo based on weather data
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据天气数据改变舵机的位置
- en: 'We are now ready to control the position of our servo based on weather conditions.
    We will modify the `WeatherDashboard` class we created in [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml), *Controlling
    a servo with Python;* to do this, perform the following steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好根据天气条件控制我们舵机的位置。我们将修改我们在[第5章](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml)中创建的“WeatherDashboard”类，*用Python控制舵机*，执行以下步骤：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单 | 编程 | Thonny Python IDE中打开Thonny
- en: Click on the New icon to create a new file
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“新建”图标创建新文件
- en: 'Type the following into the file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中键入以下内容：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the file as `WeatherDashboard.py`
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为“WeatherDashboard.py”
- en: Run the code and observe that the servo position changes
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并观察舵机位置的变化
- en: Let's take a look at the code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码。
- en: 'We start out by importing the resources we need:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先导入我们需要的资源：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We add `time` to our project as we will be using it as a delay before we close
    our `Servo` object. `WeatherData` is added to provide the values for our servo
    and LED based on weather conditions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加`time`到我们的项目中，因为我们将在关闭`Servo`对象之前使用它作为延迟。添加`WeatherData`以根据天气条件为我们的伺服和LED提供值。
- en: 'The `servoCorrection`, `maxPW`, and `minPW` variables adjust our servo (if
    needed), as explained in our previous servo correction code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`servoCorrection`，`maxPW`和`minPW`变量调整我们的伺服（如果需要），如前面的伺服校正代码所述：'
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `turnOffServo` method allows us to close the connection to the servo, stopping
    any jerking motion that may occur:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`turnOffServo`方法允许我们关闭与伺服的连接，停止可能发生的任何抖动运动：'
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We use the `sleep` function to delay closing the servo so that it will not be
    closed prior to being set to its position.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`sleep`函数延迟关闭伺服，以便在设置到位置之前不会关闭。
- en: 'You may have also noticed a change to the `convert_percentage_to_integer` method
    from the code in [Chapter 5](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml), *Controlling
    a Servo with Python*. The motors tested for this project had a minimum position
    on the right. This is the opposite of what we need, so the code was changed to
    subtract the `percentage_amount` from 100 to reverse this behavior and give us
    the correct servo position (refer to [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*,for more information on this method and use
    the `convert_percentage_to_integer` from this chapter if need be):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到了代码中`convert_percentage_to_integer`方法的更改[第5章](eff0f7cb-f99b-45d5-8781-42c841bd2fd9.xhtml)中的代码，*使用Python控制伺服*。为此项目测试的电机在右侧有一个最小位置。这与我们所需的相反，因此代码已更改为从100中减去`percentage_amount`，以扭转此行为并给出正确的伺服位置（有关此方法的更多信息，请参阅[第5章](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml)，*使用Python控制伺服*，如有需要，请使用本章中的`convert_percentage_to_integer`）：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run the code in Thonny. You should witness the servo motor moving to a position
    based on the weather conditions in Toronto, Canada. The LED will either blink,
    stay solid, or turn off based on whether or not it is raining in Toronto at the
    time you run the code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中运行代码。您应该看到伺服电机根据多伦多，加拿大的天气条件移动到一个位置。LED将根据多伦多的降雨情况闪烁、保持稳定或关闭。
- en: Now, let's enhance our project by building a physical backdrop for our servo
    and LED.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过为我们的伺服和LED建立一个物理背景来增强我们的项目。
- en: Enhancing our project
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强我们的项目
- en: With our code out of the way, it's now time to add a physical backdrop to our
    servo. With this backdrop, we bring the IoT to life for our weather data. Our
    dashboard will recommend which wardrobe item we should wear based on the weather.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的代码已经完成，现在是时候为我们的伺服添加一个物理背景了。通过这个背景，我们根据天气数据为我们的衣柜推荐穿什么。
- en: Printing out the main graphic
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印主图形
- en: 'The following is the graphic we will be using for our backdrop:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在背景中使用的图形：
- en: '![](assets/6c3d81ed-cbcb-4f52-9d72-627d49d3fbfa.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6c3d81ed-cbcb-4f52-9d72-627d49d3fbfa.png)'
- en: Using a color printer, print out the graphic on printable vinyl (this image
    file is available from our GitHub repository). Cut out the holes under the umbrella
    and main graphic.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用彩色打印机，在可打印的乙烯基上打印图形（此图像文件可从我们的GitHub存储库中获取）。剪下伞下和主图形下的孔。
- en: 'To add support, cut out the back plate on hard card stock with a cutter or
    by hand with scissors:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加支撑，用刀或剪刀在硬纸板上切出背板：
- en: '![](assets/b712b994-07a0-423c-94ae-6e8940f87e8d.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b712b994-07a0-423c-94ae-6e8940f87e8d.png)'
- en: 'Peel the backdrop off of the printable vinyl sheet and stick it to the backplate.
    Use the holes to align the backdrop with the back plates:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将背景从可打印的乙烯基片上剥离并粘贴到背板上。使用孔将背景与背板对齐：
- en: '![](assets/caaa3b46-e584-45d2-a087-ee980b7fb01e.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/caaa3b46-e584-45d2-a087-ee980b7fb01e.png)'
- en: Adding the needle and LED
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加指针和LED
- en: 'Insert the LED into the hole under the umbrella:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将LED插入伞下的孔中：
- en: '![](assets/1e7514b8-e796-4bd3-929b-a49cdc0e52dc.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1e7514b8-e796-4bd3-929b-a49cdc0e52dc.png)'
- en: 'Insert the hub of the servo motor through the other hole. Use double-sided
    foam tape to secure the servo to the backplate if necessary:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将伺服电机的轴心插入另一个孔。如有必要，使用双面泡沫胶带将伺服固定在背板上：
- en: '![](assets/1b142b34-2431-4bdb-89b0-8cbf65488fee.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1b142b34-2431-4bdb-89b0-8cbf65488fee.png)'
- en: 'Wire up the LED and servo to the breadboard using jumper wires (see the wiring
    diagram at the start of this chapter). The assembly should sit with a slight slant.
    Before we run the `WeatherDashboard` code with our new display, we have to install
    the needle to the minimum position:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用跳线线将LED和伺服连接到面包板上（请参阅本章开头的接线图）。组件应该稍微倾斜。在我们用新的显示运行`WeatherDashboard`代码之前，我们必须将指针安装到最小位置：
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序菜单中打开Thonny | 编程 | Thonny Python IDE
- en: Click on the New icon to create a new file
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击新图标创建一个新文件
- en: 'Type the following into the file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中输入以下内容：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the file as `servo_minimum.py`
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`servo_minimum.py`
- en: Run the code to have the servo position itself to the minimum value
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码使伺服将自己定位到最小值
- en: Install the needle so that it points to the left if the servo motor turns counter-clockwise
    to its minimum, and to the right if the servo motor turns clockwise to its minimum
    (this will make more sense once you start physically working with the servo).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 安装指针，使其指向左侧，如果伺服电机逆时针转到最小位置，使其指向右侧，如果伺服电机顺时针转到最小位置（一旦您开始实际使用伺服，这将更有意义）。
- en: Run the `WeatherDashboard` code again. The servo should move according to the
    weather data, indicating a wardrobe option. If it is raining, the LED should light
    up. A thunderstorm will flash the LED. Otherwise, the LED will stay off.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`WeatherDashboard`代码。伺服应该根据天气数据移动，指示衣柜选项。如果下雨，LED应该亮起。雷暴会闪烁LED。否则，LED将保持关闭状态。
- en: 'In the following picture, the dashboard is recommending a short sleeve shirt
    for Toronto, Canada. An umbrella is not required for the outside weather conditions:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，仪表盘建议多伦多，加拿大穿短袖衬衫。外部天气条件不需要雨伞：
- en: '![](assets/f64e1685-26b7-4020-9ea4-91021073ff0e.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f64e1685-26b7-4020-9ea4-91021073ff0e.png)'
- en: Congratulations! You've just built an IoT weather dashboard.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚建立了一个IoT天气仪表盘。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this project, we used the power of the Raspberry Pi to create an IoT analog
    weather dashboard. In this case, this involved an internet-controlled servo used
    as an analog meter. It's not too hard to imagine how we may alter our code to
    display data other than weather data. Picture an analog meter displaying the tank
    level from a distant factory, where the level data is communicated over the internet.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们利用了树莓派的力量来创建了一个IoT模拟天气仪表盘。在这种情况下，这涉及到使用作为模拟仪表的互联网控制的伺服。我们很容易想象如何修改我们的代码来显示除天气数据之外的其他数据。想象一下，一个模拟仪表显示远程工厂的油箱水平，其中水平数据通过互联网通信。
- en: The intuitive nature of analog meters makes them perfect for applications where
    a glance of the data is all that is required. Combining analog meters with data
    from the internet creates a whole new world of data display.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟仪表的直观性使其非常适合需要一瞥数据的应用程序。将模拟仪表与来自互联网的数据结合起来，创造了全新的数据显示世界。
- en: In [Chapter 7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting Up a Raspberry
    Pi Web Server*, we will take a step away from the analog world and explore how
    we may use the Raspberry Pi as a web server and build a web based dashboard.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml)中，*设置树莓派Web服务器*，我们将迈出模拟世界的一步，探索如何使用树莓派作为Web服务器并构建基于Web的仪表盘。
- en: Questions
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: True or false? A servo may be used as an IoT device.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真还是假？伺服可以用作IoT设备。
- en: True or false? Changing the minimum and maximum pulse width values on the `Servo`
    object modifies the range of the servo.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真还是假？更改`Servo`对象上的最小和最大脉冲宽度值会修改伺服的范围。
- en: Why do we add a delay before calling the `close()` method of the `Servo` object?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在调用`Servo`对象的`close()`方法之前我们要添加延迟？
- en: True or false? We do not need a `getTemperature()` method in our `WeatherData`
    class.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真还是假？我们在`WeatherData`类中不需要`getTemperature()`方法。
- en: True or false? A flashing LED on our dashboard indicates a clear and cloudless
    day.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真还是假？我们仪表盘上闪烁的LED表示晴天和多云的天气。
- en: What do we use a pair of shorts on our dashboard to indicate?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在仪表盘上使用一对短裤来表示什么？
- en: Where would you use a regular expression in our code?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码中，你会在哪里使用正则表达式？
- en: Why do we import time in our code?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们在代码中导入时间？
- en: True or false? An IoT-enabled servo can only be used to indicate weather data.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真还是假？IoT启用的伺服只能用于指示天气数据。
- en: Further reading
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: In order to enhance our code, regular expressions may be used. Any documentation
    on Python and regular expressions is invaluable in developing strong coding skills.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强我们的代码，可以使用正则表达式。任何关于Python和正则表达式的文档都对发展强大的编码技能非常宝贵。
