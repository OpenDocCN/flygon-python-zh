["```py\nimport string\nrotation = 3\nP = 'CALM'; C=''\nfor letter in P:\n   C = C+ (chr(ord(letter) + rotation))\n```", "```py\nimport codecs\nP = 'CALM'\nC=''\nC=codecs.encode(P, 'rot_13')\n```", "```py\n!pip install passlib\n```", "```py\nfrom passlib.hash import sha512_crypt\nsha512_crypt.using(salt = \"qIo0foX5\",rounds=5000).hash(\"myPassword\")\n```", "```py\n!pip install cryptography\n```", "```py\nimport cryptography as crypt\nfrom cryptography.fernet import Fernet\n```", "```py\nfile = open('mykey.key', 'wb')\nfile.write(key) \nfile.close()\n```", "```py\n\nfile = open('mykey.key', 'rb')\nkey = file.read() \nfile.close()\n```", "```py\nfrom cryptography.fernet import Fernet\nmessage = \"Ottawa is really cold\".encode()\n\nf = Fernet(key)\nencrypted = f.encrypt(message)\n```", "```py\ndecrypted = f.decrypt(encrypted)\n```", "```py\nfrom xmlrpc.client import SafeTransport, ServerProxy\nimport ssl\n```", "```py\n\nclass CertVerify(SafeTransport): \n    def __init__(self, cafile, certfile=None, keyfile=None): \n    SafeTransport.__init__(self) \n    self._ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1) \n    self._ssl_context.load_verify_locations(cafile) \n    if cert: \n        self._ssl_context.load_cert_chain(certfile, keyfile) \n    self._ssl_context.verify_mode = ssl.CERT_REQUIRED \n\ndef make_connection(self, host): \n    s = super().make_connection((host, {'context': self._ssl_context})) \n    return s\n\n# Create the client proxy\ns = ServerProxy('https://cloudanum.com:15000', transport=VerifyCertSafeTransport('server_cert.pem'), allow_none=True)\n```", "```py\nimport cryptography as crypt\nfrom sklearn.linear_model \nimport LogisticRegression \nfrom cryptography.fernet \nimport Fernet from sklearn.model_selection \nimport train_test_split \nfrom sklearn.datasets import load_iris \niris = load_iris() \n\nX = iris.data \ny = iris.target    \nX_train, X_test, y_train, y_test = train_test_split(X, y) \nmodel = LogisticRegression() \nmodel.fit(X_train, y_train)\n```", "```py\nfilename_source = 'myModel_source.sav' \nfilename_destination = \"myModel_destination.sav\" \nfilename_sec = \"myModel_sec.sav\"\n```", "```py\nfrom pickle import dump dump(model, open(filename_source, 'wb'))\n```", "```py\ndef write_key():\n     key = Fernet.generate_key()\n     with open(\"key.key\", \"wb\") as key_file:\n         key_file.write(key)\n```", "```py\ndef load_key():\n    return open(\"key.key\", \"rb\").read()\n```", "```py\ndef encrypt(filename, key):\n     f = Fernet(key)\n     with open(filename_source,\"rb\") as file:         \n         file_data = file.read() \n     encrypted_data = f.encrypt(file_data)\n     with open(filename_sec,\"wb\") as file:\n         file.write(encrypted_data)\n```", "```py\nwrite_key()\nencrypt(filename_source,load_key())\n```", "```py\ndef decrypt(filename, key):\n     f = Fernet(key)     \n     with open(filename_sec, \"rb\") as file:                \n         encrypted_data = file.read()        \n     decrypted_data = f.decrypt(encrypted_data)     \n     with open(filename_destination, \"wb\") as file:         file.write(decrypted_data)\n```", "```py\ndecrypt(filename_sec,load_key())\n```"]