- en: Unit Testing - Introduction to the Unit Testing Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试-单元测试框架简介
- en: Testing your project is an essential part of your software development. In this
    chapter, we are going to learn about unit testing in Python. Python has the module
    called `unittest`, which is a unit testing framework. We are going to learn about
    the `unittest` is framework in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 测试您的项目是软件开发的重要部分。在本章中，我们将学习Python中的单元测试。Python有一个名为`unittest`的模块，这是一个单元测试框架。我们将在本章学习`unittest`框架。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: Introduction to unit testing framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试框架简介
- en: Creating unit testing tasks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建单元测试任务
- en: What is unittest?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是unittest？
- en: The `unittest` is a unit testing framework in Python. It supports multiple tasks
    such as test fixtures, writing test cases, aggregating test cases into the test
    suites, and running tests.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`unittest`是Python中的一个单元测试框架。它支持多个任务，如测试固件、编写测试用例、将测试用例聚合到测试套件中以及运行测试。'
- en: '`unittest` supports four main concepts, which are listed here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`unittest`支持四个主要概念，列在这里：'
- en: '`test fixture`: This includes preparation and cleanup activities for performing
    one or more tests'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test fixture`: 这包括为执行一个或多个测试准备和清理活动'
- en: '`test case`: This includes your individual unit test. By using the `TestCase`
    base class of `unittest`, we can create new test cases'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test case`: 这包括您的单个单元测试。通过使用`unittest`的`TestCase`基类，我们可以创建新的测试用例'
- en: '`test suite`: This includes a collection of test cases, test suites, or both.
    This is for executing test cases together'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test suite`: 这包括一组测试用例、测试套件或两者。这是为了一起执行测试用例'
- en: '`test runner`: This includes arranging the test executions and giving output
    to the users'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test runner`: 这包括安排测试执行并向用户提供输出'
- en: Python has a `unittest` module that we will import in our script. The `unittest`
    module has `TestCase` class for creating test cases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一个`unittest`模块，我们将在脚本中导入它。`unittest`模块有`TestCase`类用于创建测试用例。
- en: Individual test cases can be created as methods. These method names start with
    the word *test*. So, test runner will know which methods represent test cases.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将单独的测试用例创建为方法。这些方法名称以单词*test*开头。因此，测试运行器将知道哪些方法代表测试用例。
- en: Creating unit tests
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建单元测试
- en: In this section, we are going to create unit tests. To do this, we will create
    two scripts. One will be your normal script and the other will contain the code
    for testing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建单元测试。为此，我们将创建两个脚本。一个将是您的常规脚本，另一个将包含用于测试的代码。
- en: 'First, create a script named `arithmetic.py` and write the following code in
    it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为`arithmetic.py`的脚本，并在其中编写以下代码：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding script, we created four functions: `add_numbers`, `sub_numbers`,
    `mul_numbers`, and `div_numbers`. Now, we are going to write test cases for these
    functions. First, we will learn how we can write test cases for the `add_numbers`
    function. Create a `test_addition.py` script and write the following code in it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的脚本中，我们创建了四个函数：`add_numbers`、`sub_numbers`、`mul_numbers`和`div_numbers`。现在，我们将为这些函数编写测试用例。首先，我们将学习如何为`add_numbers`函数编写测试用例。创建一个名为`test_addition.py`的脚本，并在其中编写以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding script, we have written the three test cases for the `add_numbers`
    function. The first is for testing integer numbers, the second is for testing
    float numbers, and the third is for testing strings. In strings, adding means
    concatenating two strings. Similarly, you can write the test cases for subtraction,
    multiplication, and division.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的脚本中，我们为`add_numbers`函数编写了三个测试用例。第一个是测试整数，第二个是测试浮点数，第三个是测试字符串。在字符串中，添加意味着连接两个字符串。类似地，您可以为减法、乘法和除法编写测试用例。
- en: Now, we will run our `test_addition.py` test script and we will see what result
    we get after running this script.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将运行我们的`test_addition.py`测试脚本，并看看运行此脚本后我们得到什么结果。
- en: 'Run the script as follows and you will get the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本，您将获得以下输出：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we get `OK` , which means our testing was successful.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们得到了`OK`，这意味着我们的测试成功了。
- en: 'Whenever you run your test script, you have three possible test results:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每当运行测试脚本时，您有三种可能的测试结果：
- en: '| **Result** | **Description** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **结果** | **描述** |'
- en: '| `OK` | Successful |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `OK` | 成功 |'
- en: '| `FAIL` | Test failed– raises an `AssertionError` exception |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `FAIL` | 测试失败-引发`AssertionError`异常 |'
- en: '| `ERROR` | Raises an exception other than `AssertionError` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `ERROR` | 引发除`AssertionError`之外的异常 |'
- en: Methods used in unit testing
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试中使用的方法
- en: 'Whenever we use `unittest`, there are some methods we use in our script. These
    methods are the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们使用`unittest`时，我们在脚本中使用一些方法。这些方法如下：
- en: '`assertEqual()` and `assertNotEqual()`: This checks for an expected result'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEqual()`和`assertNotEqual()`: 这检查预期结果'
- en: '`assertTrue()` and `assertFalse()`: This verifies a condition'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTrue()`和`assertFalse()`: 这验证条件'
- en: '`assertRaises()`: This verifies that a specific exception gets raised'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertRaises()`: 这验证特定异常是否被引发'
- en: '`setUp()` and `tearDown()`: This defines instructions that are executed before
    and after each test method'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setUp()`和`tearDown()`: 这定义了在每个测试方法之前和之后执行的指令'
- en: 'You can use the `unittest` module from the command line as well. So, you can
    run the previous test script as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从命令行使用`unittest`模块。因此，您可以按照以下方式运行先前的测试脚本：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we will see another example. We will create two scripts: `if_example.py`
    and `test_if.py`. `if_example.py` will be our normal script and `test_if.py` will
    contain test case. In this test, we are checking whether the entered number is
    equal to `100` or not. If it is equal to `100` then our test will be `successful`.
    If not, it must show a `FAILED` result.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看另一个例子。我们将创建两个脚本：`if_example.py`和`test_if.py`。`if_example.py`将是我们的常规脚本，`test_if.py`将包含测试用例。在此测试中，我们正在检查输入的数字是否等于`100`。如果等于`100`，则我们的测试将是`成功`的。如果不是，它必须显示一个`FAILED`结果。
- en: 'Create a `if_example.py` script and write the following code in it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`if_example.py`的脚本，并在其中编写以下代码：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, create a `test_if.py` test script and write following code in it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`test_if.py`的测试脚本，并在其中编写以下代码：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the test script as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行测试脚本：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We run the script for a successful test result. Now, we will enter some value
    other than `100` and we must get a `FAILED` result. Run the script as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行脚本以获得成功的测试结果。现在，我们将输入除`100`之外的一些值，我们必须得到一个`FAILED`的结果。按以下方式运行脚本：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about the `unittest`, which is Python's unit
    testing framework. We also learned about how to create test cases and methods
    used in unit testing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Python的单元测试框架`unittest`。我们还学习了如何创建测试用例以及单元测试中使用的方法。
- en: In the next chapter, we are going to learn how to automate the regular administrative
    activities of the system administrator. You will learn about accepting inputs,
    handling passwords, executing external commands, reading config files, adding
    warning codes to scripts, setting CPU limits, web-browser launching, using the `os`
    module, and taking backups.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何自动化系统管理员的常规管理活动。您将学习如何接受输入，处理密码，执行外部命令，读取配置文件，向脚本添加警告代码，设置CPU限制，启动web浏览器，使用`os`模块并进行备份。
- en: Questions
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is unit testing, automation testing, and manual testing?
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是单元测试、自动化测试和手动测试？
- en: What are the alternative modules available apart from `unittest`?
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了`unittest`之外还有哪些替代模块？
- en: What is the use of writing test cases?
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写测试用例有什么用？
- en: What is PEP8 standards ?
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是PEP8标准？
- en: Further reading
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Unit testing documentation: [https://docs.python.org/3/library/unittest.html ](https://docs.python.org/3/library/unittest.html)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试文档：[https://docs.python.org/3/library/unittest.html ](https://docs.python.org/3/library/unittest.html)
- en: 'PEP8 coding standards in Python: [https://www.python.org/dev/peps/pep-0008/ ](https://www.python.org/dev/peps/pep-0008/)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的PEP8编码标准：[https://www.python.org/dev/peps/pep-0008/ ](https://www.python.org/dev/peps/pep-0008/)
