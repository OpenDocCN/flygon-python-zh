["```py\n**>>> import socket**\n**>>> socket.gethostname()**\n**'debian6box.localdomain.loc'**\n\n```", "```py\n**>>> socket.gethostbyname('debian6box.localdomain.loc')**\n**'10.0.2.15'**\n\n```", "```py\n10.0.2.15       debian6box.localdomain.loc      debian6box\n```", "```py\n#!/usr/bin/env python\nimport socket\nimport netifaces\n\nif __name__ == '__main__':    \n    # Find host info\n    host_name = socket.gethostname()\n    ip_address = socket.gethostbyname(host_name)\n    print(\"Host name: {0}\".format(host_name))\n\n    # Get interfaces list\n    ifaces = netifaces.interfaces()\n    for iface in ifaces:\n        ipaddrs = netifaces.ifaddresses(iface)\n        if netifaces.AF_INET in ipaddrs:\n            ipaddr_desc = ipaddrs[netifaces.AF_INET]\n            ipaddr_desc = ipaddr_desc[0]\n            print(\"Network interface: {0}\".format(iface))\n            print(\"\\tIP address: {0}\".format(ipaddr_desc['addr']))\n            print(\"\\tNetmask: {0}\".format(ipaddr_desc['netmask']))\n    # Find the gateway\n    gateways = netifaces.gateways()\n    print(\"Default gateway: {0}\".format(gateways['default'][netifaces.AF_INET][0]))\n```", "```py\n**$ python 6_1_local_network_config.py**\n**Host name: debian6box**\n**Network interface: lo**\n **IP address: 127.0.0.1**\n **Netmask: 255.0.0.0**\n**Network interface: eth0**\n **IP address: 10.0.2.15**\n **Netmask: 255.255.255.0**\n**Default gateway: 10.0.2.2**\n\n```", "```py\n**>>> import ipaddress as ip**\n**>>> net4 = ip.ip_network('10.0.1.0/24')**\n\n```", "```py\n**>>> net4.netmask**\n**IP4Address(255.255.255.0)**\n\n```", "```py\n**>>> str(net4.netmask)**\n**'255.255.255.0'**\n\n```", "```py\n**>>> str(net4.network_address)**\n**10.0.1.0**\n**>>> str(net4.broadcast_address)**\n**10.0.1.255**\n\n```", "```py\n**>>> net4.num_addresses**\n**256**\n\n```", "```py\n**>>> all_hosts = list(net4.hosts())**\n**>>> len(all_hosts)**\n**254**\n\n```", "```py\n**>>> all_hosts[0]**\n**IPv4Address('10.0.1.1')**\n\n```", "```py\n**>>> all_hosts[-1]**\n**IPv4Address('10.0.1.1')**\n\n```", "```py\n**>>> subnets = list( net4.subnets())**\n**>>> subnets**\n**[ IPv4Network('10.0.1.0/25'), IPv4Network('10.0.1.128/25')  ]**\n\n```", "```py\n**>>> net4.supernet()**\n**IPv4Network('10.0.1.0/23')**\n\n```", "```py\n#!/usr/bin/env python\nimport ipaddress as ip\n\nCLASS_C_ADDR = '192.168.0.0'\n\nif __name__ == '__main__':\n    not_configed = True\n    while not_configed:\n        prefix = input(\"Enter the prefixlen (24-30): \")\n        prefix = int(prefix)\n        if prefix not in range(23, 31):\n            raise Exception(\"Prefixlen must be between 24 and 30\")\n        net_addr = CLASS_C_ADDR + '/' + str(prefix)\n        print(\"Using network address:%s \" %net_addr)\n        try:\n            network = ip.ip_network(net_addr)\n        except:\n            raise Exception(\"Failed to create network object\")\n        print(\"This prefix will give %s IP addresses\" %(network.num_addresses))\n        print(\"The network configuration will be\")\n        print(\"\\t network address: %s\" %str(network.network_address))\n        print(\"\\t netmask: %s\" %str(network.netmask))\n        print(\"\\t broadcast address: %s\" %str(network.broadcast_address))\n        first_ip, last_ip = list(network.hosts())[0], list(network.hosts())[-1] \n        print(\"\\t host IP addresses: from %s to %s\" %(first_ip, last_ip))\n        ok = input(\"Is this configuration OK [y/n]? \")\n        ok = ok.lower()\n        if ok.strip() == 'y':\n            not_configed = False\n```", "```py\n**# python 6_2_net_ip_planner.py** \n**Enter the prefixlen (24-30): 28**\n**Using network address:192.168.0.0/28** \n**This prefix will give 16 IP addresses**\n**The network configuration will be**\n **network address: 192.168.0.0**\n **netmask: 255.255.255.240**\n **broadcast address: 192.168.0.15**\n **host IP addresses: from 192.168.0.1 to 192.168.0.14**\n**Is this configuration OK [y/n]? n**\n**Enter the prefixlen (24-30): 26**\n**Using network address:192.168.0.0/26** \n**This prefix will give 64 IP addresses**\n**The network configuration will be**\n **network address: 192.168.0.0**\n **netmask: 255.255.255.192**\n **broadcast address: 192.168.0.63**\n **host IP addresses: from 192.168.0.1 to 192.168.0.62**\n**Is this configuration OK [y/n]? y**\n\n```", "```py\nimport socket\nfrom geoip import geolite2\nimport argparse\n\nif __name__ == '__main__':\n    # Setup commandline arguments\n    parser = argparse.ArgumentParser(description='Get IP Geolocation info')\n    parser.add_argument('--hostname', action=\"store\", dest=\"hostname\", required=True)\n\n    # Parse arguments\n    given_args = parser.parse_args()\n    hostname =  given_args.hostname\n    ip_address = socket.gethostbyname(hostname)\n    print(\"IP address: {0}\".format(ip_address))\n\n    match = geolite2.lookup(ip_address)\n    if match is not None:\n        print('Country: ',match.country)\n        print('Continent: ',match.continent) \n        print('Time zone: ', match.timezone) \n```", "```py\n**$ python 6_3_geoip_lookup.py --hostname=amazon.co.uk**\n**IP address: 178.236.6.251**\n**Country:  IE**\n**Continent:  EU**\n**Time zone:  Europe/Dublin**\n\n```", "```py\n**$ pip install dnspython**\n\n```", "```py\n**import dns.resolver**\n**answers = dns.resolver.query('python.org', 'A')**\n**for rdata in answers:**\n **print('IP', rdata.to_text())**\n\n```", "```py\n**import dns.reversename**\n**name = dns.reversename.from_address(\"127.0.0.1\")**\n**print name**\n**print dns.reversename.to_address(name)**\n\n```", "```py\nimport dns.resolver\n\nif __name__ == '__main__':\n    loookup_continue = True\n    while loookup_continue:\n        name = input('Enter the DNS name to resolve: ')\n        record_type = input('Enter the query type [A/MX/CNAME]: ')\n        answers = dns.resolver.query(name, record_type)\n        if record_type == 'A':\n            print('Got answer IP address: %s' %[x.to_text() for x in answers])\n        elif record_type == 'CNAME':\n            print('Got answer Aliases: %s' %[x.to_text() for x in answers])\n        elif record_type == 'MX':\n            for rdata in answers:\n                print('Got answers for Mail server records:')\n                print('Mailserver', rdata.exchange.to_text(), 'has preference', rdata.preference)\n            print('Record type: %s is not implemented' %record_type)\n        lookup_more = input(\"Do you want to lookup more records? [y/n]: \" )\n        if lookup_more.lower() == 'n':\n            loookup_continue = False\n```", "```py\n**$ python 6_4_dns_client.py** \n**Enter the DNS name to resolve: google.com**\n**Enter the query type [A/MX/CNAME]: MX**\n**Got answers for Mail server records:**\n**Mailserver alt4.aspmx.l.google.com. has preference 50**\n**Got answers for Mail server records:**\n**Mailserver alt2.aspmx.l.google.com. has preference 30**\n**Got answers for Mail server records:**\n**Mailserver alt3.aspmx.l.google.com. has preference 40**\n**Got answers for Mail server records:**\n**Mailserver aspmx.l.google.com. has preference 10**\n**Got answers for Mail server records:**\n**Mailserver alt1.aspmx.l.google.com. has preference 20**\n**Do you want to lookup more records? [y/n]: y**\n**Enter the DNS name to resolve: www.python.org**\n**Enter the query type [A/MX/CNAME]: A**\n**Got answer IP address: ['185.31.18.223']**\n**Do you want to lookup more records? [y/n]: y**\n**Enter the DNS name to resolve: pypi.python.org**\n**Enter the query type [A/MX/CNAME]: CNAME**\n**Got answer Aliases: ['python.map.fastly.net.']**\n**Do you want to lookup more records? [y/n]: n**\n\n```", "```py\n**import ntplib**\n**from time import ctime**\n**c = ntplib.NTPClient()**\n**response = c.request('pool.ntp.org')**\n**print ctime(response.tx_time)**\n\n```", "```py\nimport ntplib\nfrom time import ctime\n\nHOST_NAME = 'pool.ntp.org'\n\nif __name__ == '__main__':\n    params = {}\n    client = ntplib.NTPClient()\n    response = client.request(HOST_NAME)\n    print('Received time: %s' %ctime(response.tx_time))\n    print('ref_clock: ',ntplib.ref_id_to_text(response.ref_id, response.stratum))\n    print('stratum: ',response.stratum)\n    print('last_update: ', response.ref_time)\n    print('offset:  %f' %response.offset)\n    print('precision: ', response.precision)\n    print('root_delay: %.6f' %response.root_delay)\n    print('root_dispersion: %.6f' %response.root_dispersion)\n```", "```py\n**$ python 6_5_ntp_client.py** \n**Received time: Sat Feb 28 17:08:29 2015**\n**ref_clock:  213.136.0.252**\n**stratum:  2**\n**last_update:  1425142998.2**\n**offset:  -4.777519**\n**precision:  -23**\n**root_delay: 0.019608**\n**root_dispersion: 0.036987**\n\n```"]