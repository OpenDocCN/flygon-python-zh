["```py\nsudo apt-get install python2.7\n```", "```py\n>>> protocolList = []\n>>> protocolList.append(\"ftp\")\n>>> protocolList.append(\"ssh\")\n>>> protocolList.append(\"smtp\")\n>>> protocolList.append(\"http\")\n>>> print protocolList\n```", "```py\n['ftp','ssh','smtp','http']\n```", "```py\n>>> protocolList.sort()\n>>> print protocolList\n```", "```py\n['ftp','http','smtp','ssh']\n```", "```py\n>>> type(protocolList)\n<type 'list'>\n>>> len(protocolList)\n```", "```py\n4\n```", "```py\n>>> position = protocolList.index(\"ssh\")\n>>> print \"ssh position\"+str(position)\n```", "```py\nssh position 3\n```", "```py\n>>> protocolList.remove(\"ssh\")\n>>> print protocolList\n```", "```py\n['ftp','http','smtp']\n```", "```py\n>>> count = len(protocolList)\n>>> print \"Protocol elements \"+str(count)\n```", "```py\nProtocol elements 3\n```", "```py\n>>> for protocol in protocolList:\n>>      print (protocol)\n```", "```py\nftp\nhttp\nsmtp\n```", "```py\n>>> protocolList.reverse()\n>>> print protocolList\n```", "```py\n['smtp','http','ftp']\n```", "```py\n>>> protocolList[::-1]\n>>> print protocolList\n```", "```py\n['smtp','http','ftp']\n```", "```py\nnew_list = [expression for_loop_one_or_more conditions]\n```", "```py\n>>> protocolList = [\"FTP\", \"HTTP\", \"SNMP\", \"SSH\"]\n>>> protocolList_lower= [protocol.lower() for protocol in protocolList]\n>>> print(protocolList_lower) # Output: ['ftp', 'http', 'snmp', 'ssh']\n```", "```py\n>>> services = {\"ftp\":21, \"ssh\":22, \"smtp\":25, \"http\":80}\n```", "```py\n>>> services = {\"ftp\":21, \"ssh\":22, \"smtp\":25, \"http\":80}\n>>> services2 = {\"ftp\":21, \"ssh\":22, \"snmp\":161, \"ldap\":389}\n>>> services.update(services2)\n>>> print services\n```", "```py\n{\"ftp\":21, \"ssh\":22, \"smtp\":25, \"http\":80,\"snmp\":161, \"ldap\":389}\n```", "```py\n>>> services[\"http\"]= 8080\n```", "```py\n>>> items = services.items()\n>>> print items\n```", "```py\n[('ftp', 21), ('smtp',25), ('ssh', 22), ('http', 80), ('snmp', 161)]\n```", "```py\n>>> items.sort()\n>>> print items\n```", "```py\n[('ftp', 21), ('http', 80), ('smtp', 25), ('snmp', 161), ('ssh', 22)]\n```", "```py\n>>> keys = services.keys()\n>>> print keys\n```", "```py\n['ftp', 'smtp', 'ssh', 'http', 'snmp']\n```", "```py\n>>> keys.sort()\n>>> print keys\n```", "```py\n['ftp', 'http', 'smtp', 'snmp', 'ssh']\n```", "```py\n>>> values = services.values()\n>>> print values\n```", "```py\n[21, 25, 22, 80, 161]\n```", "```py\n>>> values.sort()\n>>> print values\n```", "```py\n[21, 22, 25, 80, 161]\n```", "```py\n>>> services.has_key('http')\n```", "```py\nTrue\n```", "```py\n>>> services['http']\n```", "```py\n80\n```", "```py\n>>> for key,value in services.items():\n        print key,value\nftp 21\nsmtp 25\nssh 22\nhttp 80\nsnmp 161\n```", "```py\n>>> def contains(sequence,item):\n        for element in sequence:\n                if element == item:\n                        return True\n        return False\n>>> print contains([100,200,300,400],200)\n```", "```py\nTrue\n```", "```py\n>>> print contains([100,200,300,400],300)\n```", "```py\nTrue\n```", "```py\n>>> print contains([100,200,300,400],350)\n```", "```py\nFalse\n```", "```py\nclass protocol(object):\n\n def __init__(self, name, number,description):\n self.name = name\n self.number = number\n self.description = description\n\n def getProtocolInfo(self):\n return self.name+ \" \"+str(self.number)+ \" \"+self.description\n```", "```py\n>>> protocol_http= protocol(\"HTTP\", 80, \"Hypertext transfer protocol\")\n```", "```py\n>>> protocol_http.name\n>>> protocol_http.number\n>>> protocol_http.description\n>>> protocol_http.getProtocolInfo()\n```", "```py\n # my_module.py\n def test():\n    print(\"This is my first module\")\n```", "```py\n# main.py\n import my_module\n\n def main():\n    my_module.test()\n\n if __name__ == '__main__':\n    main()\n```", "```py\nimport argparse\n\nparser = argparse.ArgumentParser(description='Testing parameters')\nparser.add_argument(\"-p1\", dest=\"param1\", help=\"parameter1\")\nparser.add_argument(\"-p2\", dest=\"param2\", help=\"parameter2\")\nparams = parser.parse_args()\nprint params.param1\nprint params.param2\n```", "```py\nparams.<Name_dest>\n```", "```py\nparser.add_argument(\"-param\", dest=\"param\", type=\"int\")\n```", "```py\nclass Parameters:\n \"\"\"Global parameters\"\"\"\n    def __init__(self, **kwargs):\n        self.param1 = kwargs.get(\"param1\")\n        self.param2 = kwargs.get(\"param2\")\n```", "```py\nimport argparse\n\nclass Parameters:\n \"\"\"Global parameters\"\"\"\n\n    def __init__(self, **kwargs):\n        self.param1 = kwargs.get(\"param1\")\n        self.param2 = kwargs.get(\"param2\")\n\ndef view_parameters(input_parameters):\n    print input_parameters.param1\n    print input_parameters.param2\n\nparser = argparse.ArgumentParser(description='Passing parameters in an object')\nparser.add_argument(\"-p1\", dest=\"param1\", help=\"parameter1\")\nparser.add_argument(\"-p2\", dest=\"param2\", help=\"parameter2\")\nparams = parser.parse_args()\ninput_parameters = Parameters(param1=params.param1,param2=params.param2)\nview_parameters(input_parameters)\n```", "```py\npip -r requirements.txt\n```", "```py\n pipreqs <path_project>\n```", "```py\n$ sudo pip install virtualenv\n```", "```py\n$ cd your_new_folder $ virtualenv name-of-virtual-environment\n```", "```py\n$ cd myVirtualEnv/ $ virtualenv myVirtualEnv $ source bin/activate\n```", "```py\n$ pip install virtualenvwrapper\n```", "```py\nvirtualenv venv\n```", "```py\ncd venv\\Scripts\\activate (venv) > pip install -r requirements.txt\n```", "```py\npython setup.py install\n```", "```py\npython port_scanning.py \u2013h\n```", "```py\nparser = argparse.ArgumentParser(description='%s security tool' % \"port_scanning\".capitalize(), epilog = examples, formatter_class = argparse.RawTextHelpFormatter)\n\n# Main options\nparser.add_argument(\"target\", metavar=\"TARGET\", nargs=\"*\")\nparser.add_argument(\"-v\", \"--verbosity\", dest=\"verbose\", action=\"count\", help=\"verbosity level: -v, -vv, -vvv.\", default=1)\nparsed_args = parser.parse_args()\n\n# Configure global log\nlog.setLevel(abs(5 - parsed_args.verbose) % 5)\n\n# Set Global Config\nconfig = GlobalParameters(parsed_args)\n```", "```py\n# ----------------------------------------------------------------------\n#\n# API call\n#\n# ----------------------------------------------------------------------\ndef run(config):\n    \"\"\"\n    :param config: GlobalParameters option instance\n    :type config: `GlobalParameters`\n\n    :raises: TypeError\n     \"\"\"\n     if not isinstance(config, GlobalParameters):\n         raise TypeError(\"Expected GlobalParameters, got '%s' instead\" % type(config))\n\n# --------------------------------------------------------------------------\n# INSERT YOUR CODE HERE # TODO\n# --------------------------------------------------------------------------\nprint config\nprint config.target\n```", "```py\npython port_scanning.py 127.0.0.1\n```"]