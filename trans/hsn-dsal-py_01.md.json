["```py\n>>> import sys\n>>> print(sys.version)\n3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:06:47) [MSC v.1914 32 bit (Intel)]\n```", "```py\npython -V\n```", "```py\npython <sourcecode_filename>.py\n```", "```py\na=15;b=25\ndef my_function():\n  global a \n  a=11;b=21\n\nmy_function() \nprint(a)  #prints 11 \nprint(b)  #prints 25\n```", "```py\n>>> a = 10\n>>> def my_function():\n...     print(a)\n>>> my_function ()\n10\n```", "```py\n>>> a = 10 \n>>> def my_function():\n...     print(a)\n...     a= a+1 \n>>> my_function()\n UnboundLocalError: local variable 'a' referenced before assignment\n```", "```py\n>>> a = 10\n>>> def my_function():\n...     global a\n...     print(a)\n...     a = a+1\n>>> my_function()\n10\n```", "```py\nx='one' \nif x==0:\n   print('False')\nelif  x==1:\n   print('True')\nelse:  print('Something else')\n\n#prints'Something else'\n```", "```py\n>>>words = ['cat', 'dog', 'elephant']\n>>> for w in words:\n...     print(w)\n... \ncat\ndog\nelephant\n```", "```py\nif a==b:    # a and b have the same value\n\nif a is b:    # if a and b are the same object\n\nif type(a) is type(b):   #a and b are the same type\n```", "```py\ndef f1(x): return x*2 \ndef f2(x): return x*4\n\nlst=[]\nfor i in range(16):\n   lst.append(f1(f2(i)))\n\nprint(lst)\nprint([f1(x) for x in range(64) if x in [f2(j) for j in range(16)]])\n\n```", "```py\ndef greeting(language): \n   if language=='eng': \n        return 'hello world'\n      if language =='fr'\n        return 'Bonjour le monde'\n      else: return  'language not supported'\n\n```", "```py\n#compares the running time of a list compared to a generator \nimport time\n#generator function creates an iterator of odd numbers between n and m \ndef oddGen(n,m):\n    while n<m:\n      yield n\n      n+=2\n\n#builds a list of odd numbers between n and m \ndef oddLst(n,m):\n     lst=[]\n     while n<m:\n        lst.append(n)\n        n+=2\n     return lst\n\n#the time it takes to perform sum on an iterator\nt1=time.time()\nsum(oddGen(1,1000000))\nprint(\"Time to sum an iterator: %f\" % (time.time() - t1))\n#the time it takes to build and sum a list\nt1=time.time()\nsum(oddLst(1,1000000))\nprint(\"Time to build and sum a list: %f\" % (time.time() - t1))\n\n```", "```py\nfor i in oddLst (1,10):print(i)\n```", "```py\nclass Employee(object):\n    numEmployee=0\n    def init (self,name,rate):\n        self.owed=0 \n        self.name=name\n        self.rate=rate \n      Employee.numEmployee += 1\n\n    def del (self): \n        Employee.numEmployee-=1\n\n    def hours(self,numHours):\n         self.owed += numHours*self.rate\n         return (\"%.2f hours worked\" % numHours)\n\n    def pay(self):\n        self.owed=0\n        return(\"payed %s \" % self.name)\n```", "```py\nclass my_class():\n    def __init__(self,greet):\n        self.greet=greet \n    def __repr__(self):\n        return 'a custom object (%r) ' % (self.greet)\n```", "```py\nclass specialEmployee(Employee):\n    def hours(self,numHours):\n        self.owed += numHours*self.rate*2 \n        return(\"%.2f hours worked\" % numHours)\n```", "```py\nclass specialEmployee(Employee):\n    def __init__(self,name,rate,bonus):\n        Employee.__init__(self,name,rate)    #calls the base classes                                                     \n        self.bonus=bonus\n\n    def   hours(self,numHours):\n        self.owed += numHours*self.rate+self.bonus     \n        return(\"%.2f hours worked\" % numHours)\n\n```", "```py\n#Example issubclass() to check whether a class is a subclass of another class  \n#Example isinstance() to check if an object belongs to a class or not \n\nprint(issubclass(specialEmployee, Employee))\nprint(issubclass(Employee, specialEmployee)) \n\nd = specialEmployee(\"packt\", 20, 100) \nb = Employee(\"packt\", 20)  \nprint(isinstance(b, specialEmployee)) \nprint(isinstance(b, Employee)) \n\n# the output prints  \nTrue \nFalse \nFalse \nTrue\n```", "```py\nclass exponentialA(object):\n    base=3\n    @classmethod\n    def exp(cls,x):\n        return(cls.base**x) \n\n    @staticmethod   def addition(x, y):  \n        return (x+y)\n\nclass exponentialB(exponentialA):\n        base=4\n\na = exponentialA() \nb= a.exp(3) \nprint(\"the value: 3 to the power 3 is\", b) \nprint('The sum is:', exponentialA.addition(15, 10)) \nprint(exponentialB.exp(3))\n\n#prints the following output\nthe value: 3 to the power 3 is 27 \nThe sum is: 25 \n64\n```", "```py\nclass Bexp(Aexp):\n    base=3\n    def exp(self):\n        return(x**cls.base)\n```"]