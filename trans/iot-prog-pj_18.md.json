["```py\n<html>\n    <head>\n        <title>T.A.R.A.S Robot Car Control</title>\n        <script src=\"paho.javascript-1.0.3/paho-mqtt.js\" \n                        type=\"text/javascript\"></script>        \n        <script src=\"scripts/index.js\"        \n                        type='text/javascript'></script>            \n\n        <link rel=\"stylesheet\" href=\"styles/styles.css\">        \n    </head>\n    <body>\n        <h2>T.A.R.A.S Robot Car Control</h2>\n        <div>\n            <button onclick=\"moveForward()\" \n                            class=\"big_button\">    \n                <h4>Forward</h4>\n            </button>\n        </div>\n        <div>\n            <button onclick=\"turnLeft()\" \n                            class=\"small_button\">\n                <h4>Turn Left</h4>\n            </button>\n            <button onclick=\"turnRight()\" \n                            class=\"small_button\">\n                <h4>Turn Right</h4>\n            </button>\n        </div>\n        <div>\n            <button onclick=\"moveBackward()\" \n                                class=\"big_button\">        \n                <h4>Backwards</h4>\n            </button>\n        </div>\n        <div>\n            <button onclick=\"takePicture()\" \n                            class=\"distance_button\">        \n                <h4>Take Picture</h4>\n            </button>\n            <button onclick=\"TARASAlarm()\" \n                            class=\"distance_button\">        \n                <h4>T.A.R.A.S Alarm</h4>\n            </button>\n            <button onclick=\"makeTARASDance()\" \n                            class=\"distance_button\">        \n                <h4>T.A.R.A.S Dance</h4>\n            </button>\n            <button onclick=\"subscribeDistanceData()\" \n                            class=\"distance_button\">\n                <h4>Track Distance</h4>\n            </button>\n            <input type=\"text\" id=\"messageTxt\" value=\"0\" \n                            size=34 class=\"distance\" />        \n        </div>\n    </body>\n</html>\n```", "```py\n.big_button {\n    background-color: rgb(86, 76, 175);\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    width: 400px;\n}\n.small_button {\n    background-color: rgb(140, 175, 76);\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    width: 195px;\n}\n.distance_button {\n    background-color: rgb(192, 192, 192);\n    border: none;\n    color: white;\n    padding: 1px 1px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 10px;\n    margin: 2px 2px;\n    cursor: pointer;\n    width: 60px;\n}\n.distance {\n    background-color: rgb(255, 255, 255);\n    border: none;\n    color: rgb(192,192,192);\n    padding: 1px 1px;\n    text-align: top;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 20px;\n    margin: 2px 2px;\n    cursor: pointer;\n    width: 300px;\n}\n```", "```py\n<script  src=\"paho.javascript-1.0.3/paho-mqtt.js\"  type=\"text/javascript\"></script> <script  src=\"scripts/index.js\"  type='text/javascript'></script> <link  rel=\"stylesheet\"  href=\"styles/styles.css\"> \n```", "```py\n<div>\n <button  onclick=\"moveForward()\"  class=\"big_button\"> <h4>Forward</h4> </button> </div>\n```", "```py\nfunction moveForward() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: sendMoveForwardMessage,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\n// called when the client connects\nfunction sendMoveForwardMessage() {\n    message = new Paho.MQTT.Message(\"Forward\");\n    message.destinationName = \"RobotControl\";\n    client.send(message);\n}\n\nfunction moveBackward() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: sendMoveBackwardMessage,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\n// called when the client connects\nfunction sendMoveBackwardMessage() {\n    message = new Paho.MQTT.Message(\"Backward\");\n    message.destinationName = \"RobotControl\";\n    client.send(message);\n}\n\nfunction turnLeft() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: sendTurnLeftMessage,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\n// called when the client connects\nfunction sendTurnLeftMessage() {\n    message = new Paho.MQTT.Message(\"Left\");\n    message.destinationName = \"RobotControl\";\n    client.send(message);\n}\n\nfunction turnRight() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: sendTurnRightMessage,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\n// called when the client connects\nfunction sendTurnRightMessage() {\n    message = new Paho.MQTT.Message(\"Right\");\n    message.destinationName = \"RobotControl\";\n    client.send(message);\n}\n\nfunction takePicture() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: sendTakePictureMessage,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\n// called when the client connects\nfunction sendTakePictureMessage() {\n    message = new Paho.MQTT.Message(\"Picture\");\n    message.destinationName = \"RobotControl\";\n    client.send(message);\n}\n\nfunction TARASAlarm() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: sendTARASAlarmMessage,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\n// called when the client connects\nfunction sendTARASAlarmMessage() {\n    message = new Paho.MQTT.Message(\"Alarm\");\n    message.destinationName = \"RobotControl\";\n    client.send(message);\n}\n\nfunction makeTARASDance() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: makeTARASDanceMessage,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\n// called when the client connects\nfunction makeTARASDanceMessage() {\n    message = new Paho.MQTT.Message(\"Dance\");\n    message.destinationName = \"RobotControl\";\n    client.send(message);\n}\n\nfunction doFail() {\n    alert(\"Error!\");\n}\n\n// called when the client loses its connection\nfunction onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n        alert(\"onConnectionLost:\" + responseObject.errorMessage);\n    }\n}\n\n// called when a message arrives\nfunction onMessageArrived(message) {\n    document.getElementById('messageTxt').value = message.payloadString; \n}\n\nfunction onsubsribeDistanceDataSuccess() {\n    client.subscribe(\"distance\");\n    alert(\"Subscribed to distance data\");\n}\n\nfunction subscribeDistanceData() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    client.onMessageArrived = onMessageArrived;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: onsubsribeDistanceDataSuccess,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n```", "```py\nfunction moveForward() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: sendMoveForwardMessage,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\n// called when the client connects\nfunction sendMoveForwardMessage() {\n    message = new Paho.MQTT.Message(\"Forward\");\n    message.destinationName = \"RobotControl\";\n    client.send(message);\n}\n```", "```py\nfunction subscribeDistanceData() {\n    client = new Paho.MQTT.Client(\"m10.cloudmqtt.com\", 38215, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    client.onMessageArrived = onMessageArrived;\n    var options = {\n        useSSL: true,\n        userName: \"vectydkb\",\n        password: \"ZpiPufitxnnT\",\n        onSuccess: onsubsribeDistanceDataSuccess,\n        onFailure: doFail\n    }\n\n    // connect the client\n    client.connect(options);\n}\n\nfunction onsubsribeDistanceDataSuccess() {\n    client.subscribe(\"distance\");\n    alert(\"Subscribed to distance data\");\n}\n```", "```py\nimport paho.mqtt.client as mqtt\nfrom time import sleep\nfrom RobotDance import RobotDance\nfrom RobotWheels import RobotWheels\nfrom RobotBeep import RobotBeep\nfrom RobotCamera import RobotCamera\nfrom gpiozero import DistanceSensor\n\ndistance_sensor = DistanceSensor(echo=18, trigger=17)\n\ndef on_message(client, userdata, message):\n    command = message.payload.decode(\"utf-8\")\n\n    if command == \"Forward\":\n        move_forward()\n    elif command == \"Backward\":\n        move_backward()\n    elif command == \"Left\":\n        turn_left()\n    elif command == \"Right\":\n        turn_right()\n    elif command == \"Picture\":\n        take_picture()\n    elif command == \"Alarm\":\n        sound_alarm()\n    elif command == \"Dance\":\n        robot_dance()\n\ndef move_forward():\n    robotWheels = RobotWheels()\n    robotWheels.move_forward()\n    sleep(1)\n    print(\"Moved forward\")\n    robotWheels.stop()\n    watchMode()\n\ndef move_backward():\n    robotWheels = RobotWheels()\n    robotWheels.move_backwards()\n    sleep(1)\n    print(\"Moved backwards\")\n    robotWheels.stop()\n    watchMode()\n\ndef turn_left():\n    robotWheels = RobotWheels()\n    robotWheels.turn_left()\n    sleep(1)\n    print(\"Turned left\")\n    robotWheels.stop()\n    watchMode()\n\ndef turn_right():\n    robotWheels = RobotWheels()\n    robotWheels.turn_right()\n    print(\"Turned right\")\n    robotWheels.stop()\n    watchMode()\n\ndef take_picture():\n    robotCamera = RobotCamera()\n    robotCamera.take_picture()\n    watchMode()\n\ndef sound_alarm():\n    robotBeep = RobotBeep()\n    robotBeep.play_song()\n\ndef robot_dance():\n    robotDance = RobotDance()\n    robotDance.lets_dance_incognito()\n    print(\"Finished dancing now back to work\")\n    watchMode()\n\ndef watchMode():\n    print(\"Watching.....\")\n    mqttc = mqtt.Client()\n    mqttc.username_pw_set(\"vectydkb\", \"ZpiPufitxnnT\")\n    mqttc.connect('m10.cloudmqtt.com', 18215)\n    mqttc.on_message = on_message\n    mqttc.subscribe(\"RobotControl\")\n\n    while True:\n        distance = distance_sensor.distance*100\n        mqttc.loop()\n        mqttc.publish(\"distance\", distance)\n        sleep(2)\n\nwatchMode()\n```", "```py\ndef watchMode():\n    print(\"Watching.....\")\n    mqttc = mqtt.Client()\n    mqttc.username_pw_set(\"vectydkb\", \"ZpiPufitxnnT\")\n    mqttc.connect('m10.cloudmqtt.com', 18215)\n    mqttc.on_message = on_message\n    mqttc.subscribe(\"RobotControl\")\n\n    while True:\n        distance = distance_sensor.distance*100\n        mqttc.loop()\n        mqttc.publish(\"distance\", distance)\n        sleep(2)\n```"]