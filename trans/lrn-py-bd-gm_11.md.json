["```py\nimport pygame\nprint(pygame.version.ver) #this command will check pygame version installed\nprint(pygame.version.vernum) #alternate command\n```", "```py\npygame 1.9.6\nHello from the pygame community. https://www.pygame.org/contribute.html\n1.9.6\n```", "```py\nif pygame.overlay is None:\n    print(\"No such module! Try other one\")\n    print(\"https://www.pygame.org/contribute.html\")\n    exit()\n```", "```py\nimport pygame as p #abbreviating pygame with p\n\np.init()\nscreen = p.display.set_mode((400, 350)) #size of screen\nfinish = False   while not finish:\n    for each_event in p.event.get():\n        if each_event.type == p.QUIT:\n            finish = True\n  p.draw.rect(screen, (0, 128, 0), p.Rect(35, 35, 65, 65))\n    p.display.flip()\n```", "```py\npygame.display.set_caption(\"My First Game\")\n```", "```py\nscreen_surface = pygame.Surface((200,200))\n```", "```py\nbackground_surface = pygame.image.load(image_file_name.extension).convert()\n```", "```py\nscreen = Pygame.load(\"image.png\")\nscreen.subsurface((0,0),(20,20))\nscreen.subsurface((20,0),(20,20))\n```", "```py\nscreen.blit(image_file_name.png, (0,0))\n```", "```py\nscreen.blit(list_of_images, (400, 300), (frame_number*10, 0, 100, 100))\n```", "```py\nimport pygame as game\nfrom pygame.locals import *\nfrom random import *\nimport sys\n\ngame.init()\ndisplay_screen = game.display.set_mode((650, 470), 0, 32)\nwhile True:\n    for eachEvent in game.event.get():\n        if eachEvent.type == QUIT:\n            sys.exit()\n    circle_generate_color = (randint(0,255), randint(0,255), \n                            randint(0,255))\n circle_position_arbitary = (randint(0,649), randint(0,469))\n circle_radius_arbitary = randint(1,230)\n    game.draw.circle(display_screen, circle_generate_color, \n    circle_position_arbitary, circle_radius_arbitary)\n    game.display.update()\n```", "```py\ndisplayScreen = pygame.display.set_mode((640, 480), 0, 32) #standard size\n```", "```py\ndisplayScreen = pygame.display.set_mode((640, 480), FULLSCREEN, 32)\n```", "```py\n>>> import pygame as p\n>>> p.init()\n>>> print(p.display.list_modes())\n[(1366, 768), (1360, 768), (1280, 768), (1280, 720), (1280, 600), (1024, 768), (800, 600), (640, 480), (640, 400), (512, 384), (400, 300), (320, 240), (320, 200)]\n```", "```py\nimport pygame as p #abbreviating pygame module as p\nfrom pygame.locals import *\nimport sys\np.init()\ndisplayScreen = p.display.set_mode((640, 480), 0, 32)\n\ndisplayFullscreen = False while True:\n    for Each_event in p.event.get():\n        if Each_event.type == QUIT:\n            sys.exit()\n        if Each_event.type == KEYDOWN:\n            if Each_event.key == K_f:\n                    displayFullscreen = not displayFullscreen\n                    if displayFullscreen:\n                        displayScreen = p.display.set_mode((640, 480), \n                                        FULLSCREEN, 32)\n                    else:\n                        displayScreen = p.display.set_mode((640, 480), 0, 32)\n\n    p.display.update()\n```", "```py\nimport pygame as p\nany_key_pressed = p.key.get_pressed()\nif any_key_pressed[K_UP]:\n    #UP key has been pressed\n    jump()\n```", "```py\nimport pygame as p\nimport sys\nwhile True:\n    for anyEvent in p.event.get():\n        if anyEvent.type == QUIT:\n            sys.exit()\n        any_keys_pressed = p.key.get_pressed()\n        movement_keys = Vector2(0, 0) #Vector2 imported from gameobjects\n        #movement keys are diectional (arrow) keys\n        if any_keys_pressed[K_LEFT]:\n            movement_keys.x = \u20131\n  elif any_keys_pressed[K_RIGHT]:\n            movement_keys.x = +1\n  if any_keys_pressed[K_UP]:\n            movement_keys.y = -1\n  elif any_keys_pressed[K_DOWN]:\n            movement_keys.y = +1\n  movement_keys.normalize() #creates list comprehension \n                                   [refer chapter 7]\n```", "```py\nresultant_x = sin(angle_of_rotational_sprite*pi/180.0) \n#sin(theta) represents base rotation about x-axix\nresultant_y = cos(angle_of_rotational_sprite*pi/180.0)\n#cos(theta) represents height rotation about y-axis\nnew_heading_movement = Vector2(resultant_x, resultant_y)\nnew_heading_movement *= movement_direction\n```", "```py\nimport pygame as game #now instead of using pygame, you can use game\n\ngame.init()\nwindowScreen = game.display.set_mode((300, 300))\ndone = False   # Draw Rect as place where mouse pointer can be clicked RectangularPlace = game.draw.rect(windowScreen, (255, 0, 0),(150, 150, 150, 150))\ngame.display.update()\n# Main Loop while not done:\n    # Mouse position and button clicking.\n  position = game.mouse.get_pos()\n    leftPressed, rightPressed, centerPressed = game.mouse.get_pressed() #checking if left mouse button is collided with rect place or not if RectangularPlace.collidepoint(position) and leftPressed:\n        print(\"You have clicked on a rectangle\")\n    # Quit pygame.\n  for anyEvent in game.event.get():\n        if anyEvent.type == game.QUIT:\n            done = True\n```", "```py\ngameBackground = pygame.image.load(image_filename_for_background).convert()\nImage_Cursor = pygame.image.load(image_filename_mouseCursor).convert_alpha()\n```", "```py\npygame.transform.rotate(img, 270) #rotation of image by 270 degree\n```", "```py\nimport pygame as game\nfrom sys import exit\ngame.init()\n\nDisplayScreen = game.display.set_mode((850,650))\ngame.display.set_caption('The Snake Game') #game title\n\ngame.display.update()\n\ngameOver = False\n\nwhile not gameOver:\n    for anyEvent in game.event.get():\n        print(event)\n        exit()\n\ngame.quit()\nquit()\n```", "```py\nwhite = (255,255,255)\ncolor_black = (0,0,0)\ngreen = (0,255,0)\ncolor_red = (255,0,0)\n\nwhile not gameOver:\n    #1 EVENT GET\n    DisplayScreen.fill(white) #BACKGROUND WHITE\n    game.display.update()\n```", "```py\nwhile not gameOver:\n    DisplayScreen.fill(white) #background of game \n    game.draw.rect(DisplayScreen, color_black, [450,300,10,10]) #1\\. snake\n    #two ways of defining rect objects\n    DisplayScreen.fill(color_red, rect=[200,200,50,50]) #2\\. food\n```", "```py\nchange_x = 300\nchange_y = 300\nwhile not gameOver:\n    for anyEvent in game.event.get():\n        if anyEvent.type == game.QUIT:\n            gameOver = True\n        if anyEvent.type == game.KEYDOWN:\n            if anyEvent.key == game.K_LEFT:\n                change_x -= 10\n            if anyEvent.key == game.K_RIGHT:\n                change_x += 10\n\n    DisplayScreen.fill(white)\n    game.draw.rect(DisplayScreen, black, [change_x,change_y,10,10])\n    game.display.update()\n```", "```py\nlead_x_change = 0\n\nwhile not gameOver:\n    for anyEvent in game.event.get():\n        if anyEent.type == game.QUIT:\n            gameOver = True\n        if anyEvent.type == game.KEYDOWN:\n            if anyEvent.key == game.K_LEFT:\n                lead_x_change = -10\n            if anyEvent.key == game.K_RIGHT:\n                lead_x_change = 10\n\n    change_x += lead_x_change\n    DisplayScreen.fill(white)\n    game.draw.rect(DisplayScreen, black, [change_x,change_y,10,10])\n    game.display.update()\n```", "```py\nclock = game.time.Clock()\nwhile not gameOver:\n    #event handling\n    #code from preceding topic\n    clock.tick(30) #FPS\n```", "```py\nlead_y_change = 0\nwhile not gameOver:\n        if anyEvent.type == game.KEYDOWN:\n            if anyEvent.key == game.K_LEFT:\n                lead_x_change = -10\n                lead_y_change = 0\n            elif anyEvent.key == game.K_RIGHT:\n                lead_x_change = 10\n                lead_y_change = 0\n            elif anyEvent.key == game.K_UP:\n                lead_y_change = -10\n                lead_x_change = 0\n            elif anyEvent.key == game.K_DOWN:\n                lead_y_change = 10\n                lead_x_change = 0  \n\n    change_x += lead_x_change\n    change_y += lead_y_change\n```", "```py\nwhile not gameOver:\n    if change_x >= 800 or change_x < 0 or change_y >= 600 or change_y < 0:\n            gameOver = True\n```", "```py\n#variable initialization step\nimport pygame as game\n\ngame.init()\n\ncolor_white = (255,255,255)\ncolor_black = (0,0,0)\ncolor_red = (255,0,0)\n\n#display size\ndisplay_width = 800 \ndisplay_height = 600\n\nDisplayScreen = game.display.set_mode((display_width,display_height))\ngame.display.set_caption('') #game title\n\ngameOver = False\n\nchange_x = display_width/2\nchange_y = display_height/2\n\nlead_x_change = 0\nlead_y_change = 0\n\nobjectClock = game.time.Clock()\n\npixel_size = 10 #box size \nFPS = 30 #frame rate\n```", "```py\n#main loop\nwhile not gameOver:\n    for anyEvent in game.event.get():\n        if anyEvent.type == game.QUIT:\n            gameOver = True\n        if anyEvent.type == game.KEYDOWN:\n            if anyEvent.key == game.K_LEFT:\n                lead_x_change = -pixel_size\n                lead_y_change = 0\n            elif anyEvent.key == game.K_RIGHT:\n                lead_x_change = pixel_size\n                lead_y_change = 0\n            elif anyEvent.key == game.K_UP:\n                lead_y_change = -pixel_size\n                lead_x_change = 0\n            elif anyEvent.key == game.K_DOWN:\n                lead_y_change = pixel_size\n                lead_x_change = 0\n\n       #step 3: adding logic which will check if snake hit boundary or not\n```", "```py\n if change_x >= display_width or change_x < 0 or change_y >= display_height \n                or change_y < 0:\n        gameOver = True\n\n    change_x += lead_x_change\n    change_y += lead_y_change\n    DisplayScreen.fill(color_white)\n    game.draw.rect(DisplayScreen, color_black, \n      [change_x,change_y,pixel_size,pixel_size])\n    game.display.update()\n\n    objectClock.tick(FPS)\n```", "```py\ndef MainLoopForGame():\n    global arrow_key #to track which arrow key user pressed\n\n    gameOver = False\n    gameFinish = False\n    #initial change_x and change_y represent center of screen\n    #initial position for snake\n    change_x = display_width/2\n    change_y = display_height/2\n\n    lead_x_change = 0\n    lead_y_change = 0\n```", "```py\n XpositionApple = round(random.randrange(0, display_width-pixel_size))\n YpositionApple = round(random.randrange(0, display_height-pixel_size))\n```", "```py\n while not gameOver:\n\n        while gameFinish == True:\n            DisplayScreen.fill(color_white)\n            game.display.update()\n\n            #game is object of pygame\n            for anyEvent in game.event.get():\n                if anyEvent.type == pygame.KEYDOWN:\n                    if anyEvent.key == pygame.K_q:\n                        gameOver = True\n                        gameFinish = False\n                    if anyEvent.key == pygame.K_c:\n                        MainLoopForGame()\n```", "```py\n #event to make movement for snake based on arrow keys\n        for anyEvent in game.event.get():\n            if anyEvent.type == game.QUIT:\n                gameOver = True\n            if anyEvent.type == game.KEYDOWN:\n                if anyEvent.key == game.K_LEFT:\n                    arrow_key = 'left'\n                    lead_x_change = -pixel_size\n                    lead_y_change = 0\n                elif anyEvent.key == game.K_RIGHT:\n                    arrow_key = 'right'\n                    lead_x_change = pixel_size\n                    lead_y_change = 0\n                elif anyEvent.key == game.K_UP:\n                    arrow_key = 'up'\n                    lead_y_change = -pixel_size\n                    lead_x_change = 0\n                elif anyEvent.key == game.K_DOWN:\n                    arrow_key = 'down'\n                    lead_y_change = pixel_size\n                    lead_x_change = 0\n```", "```py\n         if change_x >= display_width or change_x < 0 or change_y >= \n                        display_height or change_y < 0:\n            gameFinish = True\n\n        change_x += lead_x_change\n        change_y += lead_y_change\n        DisplayScreen.fill(color_white)\n        Width_Apple = 30\n        game.draw.rect(DisplayScreen, color_red, [XpositionApple, \n            YpositionApple, Width_Apple, Width_Apple])\n        game.draw.rect(DisplayScreen, color_black, \n            [change_x,change_y,pixel_size, pixel_size])\n        game.display.update()\n\n        objectClock.tick(FPS)\n\n    game.quit()\n    quit()\n\nMainLoopForGame()\n```", "```py\ndef drawSnake(pixel_size, snakeArray):\n    for eachSegment in snakeArray:\n        game.draw.rect(DisplayScreen, color_green  [eachSegment[0],eachSegment[1],pixel_size, pixel_size])\n\n```", "```py\ndef MainLoopForGame():\n snakeArray = []\n snakeLength = 1\n\n    while not gameOver:\n        head_of_Snake = []\n #at the beginning, snake will have only head\n head_of_Snake.append(change_x)\n head_of_Snake.append(change_y)\n\n        snakeArray.append(head_of_Snake)\n\n        if len(snakeArray) > snakeLength:\n            del snakeArray[0] #deleting overflow of elements\n\n        for eachPart in snakeArray[:-1]:\n            if eachPart == head_of_Snake:\n                gameFinish = True #when snake collides with own body\n\n        drawSnake(pixel_size, snakeArray)  \n        game.display.update()\n```", "```py\n#condition where snake rect is at the top of apple rect  \nif change_x > XpositionApple and change_x < XpositionApple + Width_Apple or change_x + pixel_size > XpositionApple and change_x + pixel_size < XpositionApple + Width_Apple:\n\n      if change_y > YpositionApple and change_y < YpositionApple + \n        Width_Apple:\n                #generate apple to new position\n                XpositionApple = round(random.randrange(0, \n                                 display_width-pixel_size))\n                YpositionApple = round(random.randrange(0, \n                                 display_height-pixel_size))\n                snakeLength += 1\n\n      elif change_y + pixel_size > YpositionApple and change_y + pixel_size \n            < YpositionApple + Width_Apple:\n\n                XpositionApple = round(random.randrange(0, display_width-\n                                 pixel_size))\n                YpositionApple = round(random.randrange(0, display_height-\n                                 pixel_size))\n                snakeLength += 1\n```", "```py\nimage = game.image.load('snakehead.png')\n```", "```py\nDisplayScreen.blit(image, (snakeArray[-1][0], snakeArray[-1][1]))\n```", "```py\ndef drawSnake(pixel_size, snakeArray):\n\n if arrow_key == \"right\":\n head_of_Snake = game.transform.rotate(image, 270) #making rotation of 270 \n\n if arrow_key== \"left\":\n head_of_Snake = game.transform.rotate(image, 90)\n\n if arrow_key== \"up\":\n head_of_Snake = image #default\n\n if arrow_key== \"down\":\n head_of_Snake = game.transform.rotate(image, 180)\n\n DisplayScreen.blit(head_of_Snake, (snakeArray[-1][0], snakeArray[-1][1]))\n for eachSegment in snakeArray[:-1]:\n game.draw.rect(DisplayScreen, color_green,[eachSegment[0],eachSegment[1], \n pixel_size, pixel_size])\n```", "```py\nappleimg = game.image.load('apple.png') \n#add apple.png file in same directory of python file\nwhile not gameOver:\n    #code must be added before checking if user eats apple or not\n    DisplayScreen.blit(appleimg, (XpositionApple, YpositionApple))\n```", "```py\nfont_small = game.font.SysFont(\"comicsansms\", 25)\nfont_medium = game.font.SysFont(\"comicsansms\", 50)\nfont_large = game.font.SysFont(\"comicsansms\", 80)\n```", "```py\ndef objects_text(sample_text, sample_color, sample_size):\n if sample_size == \"small\":\n surface_for_text = font_small.render(sample_text, True, sample_color)\n elif sample_size == \"medium\":\n surface_for_text= font_medium.render(sample_text, True, sample_color)\n elif sample_size == \"large\":\n surface_for_text = font_large.render(sample_text, True, sample_color)\n\n return surface_for_text, surface_for_text.get_rect()\n```", "```py\ndef display_ScreenMessage(message, font_color, yDisplace=0, font_size=\"small\"):\n textSurface, textRectShape = objects_text(message, font_color, font_size)\n textRectShape.center = (display_width/ 2), (display_height/ 2) + yDisplace\n DisplaySurface.blit(textSurface, textRectShape)\n```", "```py\ndef intro_for_game(): #function for adding game intro\n intro_screen = True   while intro_screen:\n\n for eachEvent in game.event.get():\n if eachEvent.type == game.QUIT:\n game.quit()\n quit()\n\n if eachEvent.type == game.KEYDOWN:\n if eachEvent.key == game.K_c:\n intro_screen = False\n if eachEvent.key == game.K_q:\n game.quit()\n quit()\n\n DisplayScreen.fill(color_white)\n display_ScreenMessage(\"Welcome to Snake\",\n color_green,\n  -99,\n  \"large\")\n\n display_ScreenMessage(\"Made by Python Programmers\",\n color_black,\n  50)\n\n display_ScreenMessage(\"Press C to play or Q to quit.\",\n  color_red,\n  180)\n\n game.display.update()\n objectClock.tick(12)\n```", "```py\nintro_for_game()\nMainLoopForGame()\n```", "```py\npip install py2exe \nOR\npy -3.7 -m pip install py2exe\n```", "```py\npython snake.py py2exe #conversion command\n```", "```py\nscreen = pygame.display.set_mode((640))\nTypeError: 2 argument expected\n```", "```py\ntry:\n    display = pygame.display.set_mode((640,0))\nexcept pygame.error:\n    print(\"Not possible to create display\")\n    exit()\n```"]