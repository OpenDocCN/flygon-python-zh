["```py\nsudo apt install python3\n```", "```py\nsudo yum install python3\n```", "```py\nsudo apt install python-pip --- This will install pip for python 2.\nsudo apt install python3-pip --- This will install pip for python 3.\n```", "```py\npython -m pip install pip\n```", "```py\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```py\nbrew install python3\n```", "```py\npip install jupyter\n```", "```py\npip3 install jupyter\n```", "```py\nsudo apt install python3-pip\n```", "```py\nsudo pip3 install virtualenv\n```", "```py\nvirtualenv pythonenv\n```", "```py\nsource venv/bin/activate\n```", "```py\ndeactivate\n```", "```py\n$ python\n```", "```py\n>>> name = John\n```", "```py\n>>> name = John\n```", "```py\n>>> num1 = 5000\n>>> num2 = 3500\n>>> num3 = num1 + num2\n>>> print (num3)\n8500\n>>> num4 = num3 - 2575\n>>> print (num4)\n5925\n>>>\n```", "```py\n>>> 509 / 22\n23.136363636363637\n>>>\n```", "```py\n>>> val1 = 2500\n>>> val2 = 2400\n>>> if val1 > val2:\n... print(\"val1 is greater than val2\")\n... else:\n... print(\"val2 is greater than val1\")\n...\nval1 is greater than val2\n>>>\n```", "```py\n>>> if val1 > val2:\n... print(\"val1 is greater than val2\")\nFile \"<stdin>\", line 2\nprint(\"val1 is greater than val2\")\n^\nIndentationError: expected an indented block\n>>>\n```", "```py\n>>> import time\n>>>\n```", "```py\n>>> import matplotlib\n```", "```py\nFile \"<stdin>\", line 1, in <module>\nImportError: No module named 'matplotlib'\n```", "```py\n>>> import matplotlib\n>>>\n```", "```py\n>>> val1 = 5000\n>>> val2 = 2500\n>>>\n>>> val3 = val1 - val2\n>>> print (val3)\n2500\n>>>\nstudent@ubuntu:~$\n```", "```py\n>>> Lion = 'Simba'\n>>> quit()\nstudent@ubuntu$\n```", "```py\nif val1 > val2:\n print (\"val1 is greater than val2\")\nprint(\"This part is not indented\")\n```", "```py\nn = 100\nHere are assigning 100 to the variable n. Now, we are going to increase the value of n by 1:\n>>> n = n + 1\n>>> print(n)\n101\n>>>\n```", "```py\na = 50 # data type is implicitly set to integer\na = 50 + 9.50 # data type is changed to float\na = \"Seventy\" # and now it will be a string\n```", "```py\n>>> msg = 'And now for something completely different'\n>>> a = 20\n>>> pi = 3.1415926535897932\n```", "```py\n>>> type(msg)\n<type 'str'>\n>>> type(a)\n<type 'int'>\n>>> type(pi)\n<type 'float'>\n```", "```py\n#!/usr/bin/python3\nname = 'John'\nage = 25\naddress = 'USA'\npercentage = 85.5\nprint(name)\nprint(age)\nprint(address)\nprint(percentage)\n\nOutput:\nJohn\n25\nUSA\n85.5\n```", "```py\nx = y = z = 1\n```", "```py\nx, y, z = 10, 'John', 80\n```", "```py\n>>> 5 + 5\n10\n>>> 100 - 5*5\n75\n>>> (100 - 5*5) / 15\n5.0\n>>> 8 / 5\n1.6\n```", "```py\n>>> 14/3\n4.666666666666667\n>>>\n>>> 14//3\n4\n>>>\n>>> 14%3\n2\n>>> 4*3+2\n14\n>>>\n```", "```py\n>>> 8**3\n512\n>>> 5**7\n78125\n>>>\n```", "```py\n>>> m = 50\n>>> n = 8 * 8\n>>> m * n\n3200\n```", "```py\n>>> k\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nNameError: name 'k' is not defined\n>>>\n```", "```py\n>>> 5 * 4.75 - 1\n22.75\n```", "```py\n>>> a = 18.5/100\n>>> b = 150.50\n>>> a * b\n27.8425\n>>> b + _\n178.3425\n>>> round(_, 2)\n178.34\n>>>\n```", "```py\nnum1 = 50\nnum2 = 25\n```", "```py\ndel num\ndel num_a, num_b\n```", "```py\n>>> 'Hello Python'\n'Hello Python'\n>>> \"Hello Python\"\n'Hello Python'\n```", "```py\n>>> city = 'delhi'\n>>> letter = city[1]\n>>> letter = city[-3]\n```", "```py\ncity d e l h i\nindex 0 1 2 3 4\n-5 -4 -3 -2 -1\n\nOutput:\ne\nl\n```", "```py\n>>> 3 * 'hi' + 'hello'\n'hihihihello'\n```", "```py\n>>> 'he' 'llo'\n'hello'\n```", "```py\n>>> str = ('Several strings'\n... 'joining them together.')\n>>> str\n'Several strings joining them together.'\n```", "```py\n>>> str[0:2]\n'Pr'\n>>> str[2:5]\n'ogr'\n```", "```py\n>>> str[:2] + str[2:]\n'Python'\n>>> str[:4] + str[4:]\n'Python' >>> str[:2]\n'Py'\n>>> str[4:]\n'on'\n>>> str[-2:]\n'on'\n```", "```py\n#!/usr/bin/python3\nstr1 = 'Hello Python!'\nstr2 = \"Object Oriented Programming\"\nprint (\"str1[0]: \", str1[0])\nprint (\"str2[1:5]: \", str2[1:5])\n\nOutput:\nstr1[0]: H\nstr2[1:5]: bjec\n```", "```py\n#!/usr/bin/python3\nstr1 = 'Hello Python!'\nprint (\"Updated String: - \", str1 [:6] + 'John')\n\nOutput:\nUpdated String: - Hello John\n```", "```py\n#!/usr/bin/python3\nprint (\"Hello this is %s and my age is %d !\" % ('John', 25))\n\nOutput:\nHello this is John and my age is 25 !\n```", "```py\n#!/usr/bin/python3\n\npara_str = \"\"\" Python is a scripting language which was created by\nGuido van Rossum in 1991, t which is used in various sectors such as Game Development, GIS Programming, Software Development, web development,\nData Analytics and Machine learning, System Scripting etc.\n\"\"\"\nprint (para_str)\n```", "```py\nOutput:\nPython is a scripting language which was created by\nGuido van Rossum in 1991, which is used in various sectors such as\nGame Development, GIS Programming, Software Development, web development,\nData Analytics and Machine learning, System Scripting etc.\n```", "```py\n>>> welcome = 'Hello, John!'\n>>> welcome[0] = 'Y'\nTypeError: 'str' object does not support item assignment\n```", "```py\n>>> str1 = 'Hello John'\n>>> new_str = 'Welcome' + str1[5:]\n>>> print(str1)\nHello John\n>>> print(new_str)\nWelcome John\n>>>\n```", "```py\nl = list()\nnumbers = [10, 20, 30, 40]\nanimals = ['Dog', 'Tiger', 'Lion']\nlist1 = ['John', 5.5, 500, [110, 450]]\n```", "```py\n>>> cities = ['Mumbai', 'Pune', 'Chennai']\n>>> numbers_list = [75, 857]\n>>> empty_list = []\n>>> print (cities, numbers_list, empty_list)\n['Mumbai', 'Pune', 'Chennai'] [75, 857] []\n```", "```py\n#!/usr/bin/python3\ncities = ['Mumbai', 'Bangalore', 'Chennai', 'Pune']\nnumbers = [1, 2, 3, 4, 5, 6, 7 ]\nprint (cities[0])\nprint (numbers[1:5])\n\nOutput:\nMumbai\n[2, 3, 4, 5]\n```", "```py\n#!/usr/bin/python3\ncities = ['Mumbai', 'Bangalore', 'Chennai', 'Pune']\nprint (\"Original Value: \", cities[3])\ncities[3] = 'Delhi'\nprint (\"New value: \", cities[3])\n\nOutput:\nOriginal Value: Pune\nNew value: Delhi\n```", "```py\n#!/usr/bin/python3\ncities = ['Mumbai', 'Bangalore', 'Chennai', 'Pune']\nprint (\"Before deleting: \", cities)\ndel cities[2]\nprint (\"After deleting: \", cities)\n\nOutput:\nBefore deleting: ['Mumbai', 'Bangalore', 'Chennai', 'Pune']\nAfter deleting: ['Mumbai', 'Bangalore', 'Pune']\n```", "```py\n>>> a = [30, 50, 60]\n>>> b = ['Hello', 75, 66 ]\n>>> c = a + b\n>>> print c\n[30,50,60,'Hello',75,66]\n```", "```py\n>>> [0] * 4\n[0, 0, 0, 0]\n>>> ['Python'] * 3\n['python', 'python', 'python']\n```", "```py\n>>> t1 = 'h', 'e', 'l', 'l', 'o'\n```", "```py\n>>> t1 = ('h', 'e', 'l', 'l', 'o')\n```", "```py\n>>> t1 = 'h',\n>>> type(t1)\n<type 'tuple'>\n```", "```py\n>>> t1 = ('a')\n>>> type(t1)\n<type 'str'>\n```", "```py\n>>> t1 = tuple()\n>>> print (t1)\n()\n```", "```py\n>>> t = tuple('mumbai')\n>>> print t\n('m', 'u', 'm', 'b', 'a', 'i')\n```", "```py\n>>> t = ('a', 'b', 'c', 'd', 'e')\n>>> print t[0]\n'a'\n```", "```py\n>>> print t[1:3]\n('b', 'c')\n```", "```py\n#!/usr/bin/python3\ncities = ('Mumbai', 'Bangalore', 'Chennai', 'Pune')\nnumbers = (1, 2, 3, 4, 5, 6, 7)\nprint (cities[3])\nprint (numbers[1:6])\n\nOutput:\nPune\n(2, 3, 4, 5)\n```", "```py\n#!/usr/bin/python3\ncities = ('Mumbai', 'Bangalore', 'Chennai', 'Pune')\nnumbers = (1,2,3,4,5,6,7)\ntuple1 = cities + numbers\nprint(tuple1)\n\nOutput:\n('Mumbai', 'Bangalore', 'Chennai', 'Pune', 1, 2, 3, 4, 5, 6, 7)\n```", "```py\n#!/usr/bin/python3\ncities = ('Mumbai', 'Bangalore', 'Chennai', 'Pune')\nprint (\"Before deleting: \", cities)\ndel cities\nprint (\"After deleting: \", cities)\n\nOutput:\nBefore deleting: ('Mumbai', 'Bangalore', 'Chennai', 'Pune')\nTraceback (most recent call last):\nFile \"01.py\", line 5, in <module>\nprint (\"After deleting: \", cities)\nNameError: name 'cities' is not defined\n```", "```py\n>>> numbers = (50, 80,98, 110.5, 75, 150.58)\n>>> print(max(numbers))\n150.58\n>>>\n```", "```py\n>>> numbers = (50, 80,98, 110.5, 75, 150.58)\n>>> print(min(numbers))\n50\n>>>\n```", "```py\n>>> fruits = {'Mango', 'Apple', 'Mango', 'Watermelon', 'Apple', 'Orange'}\n>>> print (fruits)\n{'Orange', 'Mango', 'Apple', 'Watermelon'}\n>>> 'Orange' in fruits\nTrue\n>>> 'Onion' in fruits\nFalse\n>>>\n>>> a = set('abracadabra')\n>>> b = set('alacazam')\n>>> a\n{'d', 'c', 'r', 'b', 'a'}\n>>> a - b\n{'r', 'd', 'b'}\n>>> a | b\n{'d', 'c', 'r', 'b', 'm', 'a', 'z', 'l'}\n>>> a & b\n{'a', 'c'}\n>>> a ^ b\n{'r', 'd', 'b', 'm', 'z', 'l'}\n```", "```py\n>>> a = {x for x in 'abracadabra' if x not in 'abc'}\n>>> a\n{'r', 'd'}\n```", "```py\n>>> student = {'Name':'John', 'Age':25}\n>>> student['Address'] = 'Mumbai'\n>>> student\nstudent = {'Name':'John', 'Age':25, 'Address':'Mumbai'}\n>>> student['Age']\n25\n>>> del student['Address']\n>>> student\nstudent = {'Name':'John', 'Age':25}\n>>> list(student.keys())\n['Name', 'Age']\n>>> sorted(student.keys())\n['Age', 'Name']\n>>> 'Name' in student\nTrue\n>>> 'Age' not in student\nFalse\n```", "```py\n>>> {x: x**2 for x in (4, 6, 8)}\n{4: 16, 6: 36, 8: 64}\n```", "```py\n>>> dict(John=25, Nick=27, Jack=28)\n{'Nick': 27, 'John': 25, 'Jack': 28}\n```", "```py\n$ python program_name.py img.jpg\n```", "```py\n01.py\nimport sys\nprint('Number of arguments:', len(sys.argv))\nprint('Argument list:', str(sys.argv))\n\nOutput:\nPython3 01.py img\nNumber of arguments 2\nArguments list: ['01.py', 'img']\n```", "```py\nif test_expression:\n statement(s)\n```", "```py\na = 10\nif a > 0:\n print(a, \"is a positive number.\")\nprint(\"This statement is always printed.\")\n\na = -10\nif a > 0:\n print(a, \"is a positive number.\")\n\nOutput:\n10 is a positive number.\nThis statement is always printed.\n```", "```py\nif test expression:\n if block\nelse:\n else block\n```", "```py\na = 10\nif a > 0:\n print(\"Positive number\")\nelse:\n print(\"Negative number\")\n\nOutput:\nPositive number\n```", "```py\nif test expression:\n if block statements\nelif test expression:\n elif block statements\nelse:\n else block statements\n```", "```py\na = 10\nif a > 50:\n print(\"a is greater than 50\")\nelif a == 10:\n print(\"a is equal to 10\")\nelse:\n print(\"a is negative\")\n\nOutput:\na is equal to 10\n```", "```py\nfor i in sequence:\n for loop body\n```", "```py\nnumbers = [6, 5, 3, 8, 4, 2, 5, 4, 11]\nsum = 0\nfor i in numbers:\n sum = sum + i\n print(\"The sum is\", sum)\n\nOutput:\nThe sum is 6\nThe sum is 11\nThe sum is 14\nThe sum is 22\nThe sum is 26\nThe sum is 28\nThe sum is 33\nThe sum is 37\nThe sum is 48\n```", "```py\nrange(start, stop, step size).\nStep size defaults to 1 if not provided.\nFor loop example using range() function:\n```", "```py\nfor i in range(5):\n print(\"The number is\", i)\n\nOutput:\nThe number is 0\nThe number is 1\nThe number is 2\nThe number is 3\nThe number is 4\n```", "```py\nwhile test_expression:\n while body statements\n```", "```py\na = 10\nsum = 0\ni = 1\nwhile i <= a:\n sum = sum + i\n i = i + 1\n print(\"The sum is\", sum)\n\nOutput:\nThe sum is 1\nThe sum is 3\nThe sum is 6\nThe sum is 10\nThe sum is 15\nThe sum is 21\nThe sum is 28\nThe sum is 36\nThe sum is 45\nThe sum is 55\n```", "```py\nnumbers = [10, 20, 30, 40]\n\nnumbers_iter = iter(numbers)\n\nprint(next(numbers_iter))\nprint(next(numbers_iter))\nprint(numbers_iter.__next__())\nprint(numbers_iter.__next__())\n\nnext(numbers_iter)\n\nOutput:\n10\n20\n30\n40\nTraceback (most recent call last):\n File \"sample.py\", line 10, in <module>\n next(numbers_iter)\nStopIteration\n\n```", "```py\ndef my_gen():\n n = 1\n print('This is printed first')\n yield n\n n += 1\n print('This is printed second')\n yield n\n n += 1\n print('This is printed at last')\n yield n\nfor item in my_gen():\n print(item)\n\nOutput:\nThis is printed first\n1\nThis is printed second\n2\nThis is printed at last\n3\n```", "```py\ndef function_name(parameters):\n statement(s)\n```", "```py\ndef welcome(name):\n print(\"Hello \" + name + \", Welcome to Python Programming !\")\n welcome(\"John\")\n\nOutput:\nHello John, Welcome to Python Programming !\n```", "```py\nreturn [expression_list]\n```", "```py\ndef return_value(a):\n if a >= 0:\n return a\n else:\n return -a\nprint(return_value(2))\nprint(return_value(-4))\n\nOutput:\n2\n4\n```", "```py\nnumbers = [10, 25, 54, 86, 89, 11, 33, 22]\nnew_numbers = list(filter(lambda x: (x%2 == 0) , numbers))\nprint(new_numbers)\n\nOutput:\n[10, 54, 86, 22]\n```", "```py\nmy_list = [1, 5, 4, 6, 8, 11, 3, 12]\nnew_list = list(map(lambda x: x * 2 , my_list))\nprint(new_list)\n\nOutput:\n[2, 10, 8, 12, 16, 22, 6, 24]\n```", "```py\nsample.py\ndef addition(num1, num2):\n result = num1 + num2\n return result\n```", "```py\nadd.py\nimport sample\nsum = sample.addition(10, 20)\nprint(sum)\n\nOutput:\n30\n```"]