["```py\n>>> player_age = 90\n```", "```py\n>>> type('a')\n```", "```py\n>>> type(1)\n>>> type('Hello World')\n```", "```py\n>> type(3.4)\n```", "```py\n>>> print(1)\n```", "```py\n>> print(\"1\")\n<class 'str'>\n```", "```py\n>>> print(\"abc\",\"abc\")\n```", "```py\n>>> type(print(\"abc\",\"abc\"))\n<class 'NoneType'>\n```", "```py\n>>> print(0,000,000)\n```", "```py\n>>> myAge = 24\n>>> info = \"I love Python\"\n>>> isHonest = True\n```", "```py\n>>> info = 23\n```", "```py\n>>> even, odd, num = 2, 3, 10\n```", "```py\n>>> even\n```", "```py\n>>> print(even)\n```", "```py\n>>> type(even)\n```", "```py\n>>> even, num = 10\n```", "```py\n>>> and = 23\n```", "```py\n>>> _age = 34\n```", "```py\n>>> 3 + 4\n>>> 14 - 5 - 9\n>>> 2 * 4\n```", "```py\n>>> 10 / 4\n```", "```py\n>>> 10 // 4\n```", "```py\n>>> x = 10 + 2 * 5\n>>> x\n```", "```py\n>>> 5 % 2\n```", "```py\n>>> import math\n```", "```py\n>>> import math\n>>> math.sqrt(49)\n```", "```py\n>>> from math import *\n```", "```py\n>>> factorial(4)\n```", "```py\n>>> help([object])\n>>> help(input)\nHelp on built-in function input in module builtins:\n\ninput(prompt=None, /)\n    Read a string from standard input. The trailing newline is stripped.\n\n    The prompt string, if given, is printed to standard output without a\n    trailing newline before reading input.\n\n    If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise \n    EOFError.\n\n    On *nix systems, readline is used if available.\n```", "```py\n>>> # this is single line comment\n>>> but this is not comment\n```", "```py\n>>> 'Hey it's me'\n```", "```py\n>>> \"\"\" Hey! it's me \"\"\"\n>>> \"\"\" He said, \"How may I help you\" \"\"\"\n```", "```py\ndef add:\n```", "```py\n>>> print(\"hey \\n it's me\")\nhey\nit's me\n```", "```py\n      >>> print(customer_info)  # printing customer information\n```", "```py\n      >>> d = (400, 200) # d is for display of game console 400*200\n      >>> TEMP = 23 # temperature is in Celsius\n```", "```py\n>>> input()\n```", "```py\n>>> message = input()\n```", "```py\n>>>user_name = input(\" \\n Enter your name? : \\n\")\nEnter your name? :\nJohn Doe #this is input from user\n'John Doe' #printing content of user_name\n```", "```py\n>>> while True:\n        input(\"Enter user_names: \\n\")\n\n```", "```py\n>>> a = input()\n1 #store integer 1 to the variable a\n```", "```py\n>>> age = input(\"Enter your age? \\n\")\n>>> Enter your age?\n29\n>>> type(age)\n<class 'str'>\n>>> age\n'29'\n```", "```py\n>>> age \n'29'\n>>> age + 2\nTraceback (most recent call last):\n  File \"<pyshell#3>\", line 1, in <module>\n    age + 2\nTypeError: can only concatenate str (not \"int\") to str\n```", "```py\n      >>> a = int(\"10101\", 2)\n      >>> a\n      21 #conversion from string to integer\n\n      >>> b = int(\"255\")\n      >>>b\n      255\n```", "```py\n      >>> float(3)\n      3.0 #this is floating point number           \n```", "```py\n      >>> str(255)\n      '255'\n```", "```py\n       >>> ord('a')\n       97  #ASCII value of a is 97\n```", "```py\n>>> msg = \"happy birthday\"\n>>> msg.upper() # upper() is inbuilt method of string class that converts string to upper case\n'HAPPY BIRTHDAY'\n>>> msg\n'happy birthday'\n```", "```py\n>>> msg = msg.upper()\n>>> msg\n'HAPPY BIRTHDAY'\n```", "```py\n>>> str1 = \"John\"\n>>> str1[0] = \"Hello\"\nTraceback (most recent call last):\n  File \"<pyshell#30>\", line 1, in <module>\n    str1[0] = \"Hello\"\nTypeError: 'str' object does not support item assignment\n```", "```py\n>>> \"Python\".capitalize() #capitalize first letter of string\nPython\n>>> \"xyz\".join(\"pqr\") #joins every letter of string \"pqr\" with xyz except for first and last letter\n'pxyzqxyzr'\n\n#len function does not have to call like this, call simply len() with string passed inside parenthesis\n>>> len(\"Python\") #prints length of string\n6\n```", "```py\n>>> info = \"Python\"\n>>> info[2] \nt\n>>> info[0]\nP\n```", "```py\n>>> info = \"Python\"\n>>> info[-1]\nn\n>>> info[-3]\nh\n```", "```py\n>>> email = \"johndoe@gmail.com\"\n```", "```py\n  >>> email = \"johndoe@gmail.com\"\n  >>> email[0:7:] # 0 is starting position, 7 is stopping position and it is not included\n  'johndoe'\n  >>> email[:7:] #empty starting position also means start from 0 index\n  'johndoe'\n```", "```py\n>>> \"-\" * 50 #this will create 50 hyphen or dashes (-)\n'--------------------------------------------------'\n\n>>> \"a\" * 4\n'aaaa'\n```", "```py\n>>> \"a\" * \"b\"\nTraceback (most recent call last):\n  File \"<pyshell#22>\", line 1, in <module>\n    \"a\" * \"b\"\nTypeError: can't multiply sequence by non-int of type 'str'\n```", "```py\n>>> str1 = \"Happy\"\n>>> str2 = \"Birthday\"\n>>> str3 = \"John\"\n>>> str1 + str2 + str3\n'HappyBirthdayJohn' \n\n>>> str1 + 45 # YOU CANNOT ADD STRING AND INTEGER\nTraceback (most recent call last):\n  File \"<pyshell#28>\", line 1, in <module>\n    str1 + 45\nTypeError: can only concatenate str (not \"int\") to str\n```", "```py\n>>> key = \"love\"\n>>> value = 13\n\n#lets use string formatting technique\n>>> print(\" I %s number %d\"%(key,value))\n'I love number 13'\n```", "```py\n>>> '%s %d %s'%(\"Hello\",1)\nTraceback (most recent call last):\n  File \"<pyshell#19>\", line 1, in <module>\n    '%s %d %s'%(\"Hello\",1)\nTypeError: not enough arguments for format string\n```", "```py\n>>> print(\" I love {}\".format(\"Python\"))\n'I love Python'\n\n>>> print(\" I love {0} and I hate {1}\".format(\"Python\", \"Java\"))\n'I love Python and I hate Java'\n\n>>> print(\" I love {1} and I hate {0}\".format(\"Python\",\"Java\"))\n'I love Java and I hate Python'\n```", "```py\n_ | _ | _\n_ | _ | _\n_ | _ | _                    \n```", "```py\n_ | _ | O\n_ | X | _\n_ | _ | X\n```", "```py\n0 | 1 | 2\n3 | 4 | 5\n6 | 7 | 8\n```", "```py\n_ | _ | _\n_ | _ | _\n_ | _ | _   \n```", "```py\n#this code is written as scripts\ngame_board = ['_'] * 9 #this will create 9 underscores\nprint(game_board[0] + '|' + game_board[1] + '|' + game_board[2])\nprint(game_board[3] + '|' + game_board[4] + '|' + game_board[5])\nprint(game_board[6] + '|' + game_board[7] + '|' + game_board[8])\n```", "```py\n      >>> board = ['_'] * 9\n      >>> board \n      ['_', '_', '_', '_', '_', '_', '_', '_', '_'] # 9 underscores is \n        stored in board list\n```", "```py\n      >>> print(game_board[3] + '|' + game_board[4] + '|' + game_board[5])\n      >>> print(game_board[6] + '|' + game_board[7] + '|' + game_board[8])\n```", "```py\n     >>> board = [1,2,3,4,5,6]\n     >>> board[0] # this will give value 1 from \"board\" list\n     >>> board[5] # this will give value 6 from \"board\" list\n```", "```py\n        game_board = ['_'] * 9\n        print(game_board[0] + '|' + game_board[1] + '|' + game_board[2])\n        print(game_board[3] + '|' + game_board[4] + '|' + game_board[5])\n        print(game_board[6] + '|' + game_board[7] + '|' + game_board[8])\n\n        #output\n        \"\"\" \n            _ | _ | _\n            _ | _ | _\n            _ | _ | _   \n\n        \"\"\" \n```", "```py\n      0th | 1st | 2nd\n      3rd | 4th | 5th     \n      6th | 7th | 8th\n```", "```py\n#code from models  \n\n#...................................................................\n\n#code for user input\n\nwhile True:\n     pos = input(\" Enter any position you want from (0-8): \\n\")\n     pos = int(pos)\n     game_board[pos] = 'X'\n     print(game_board[0] + '|' + game_board[1] + '|' + game_board[2])\n     print(game_board[3] + '|' + game_board[4] + '|' + game_board[5])\n     print(game_board[6] + '|' + game_board[7] + '|' + game_board[8])\n\n```", "```py\n      0th | 1st | 2nd\n      3rd | 4th | 5th     \n      6th | 7th | 8th\n```", "```py\n      0th | 1st | 2nd\n      3rd |  X  | 5th     \n      6th | 7th | 8th\n```", "```py\n>>> my name = \"John Doe\"\nSyntaxError: invalid syntax\n```", "```py\n>>> True = 45\nSyntaxError: can't assign to keyword \n>>> true = 45\n>>> true\n45\n```", "```py\n>>> import Math\nTraceback (most recent call last):\n  File \"<pyshell#6>\", line 1, in <module>\n    import Math\nModuleNotFoundError: No module named 'Math'\n```"]