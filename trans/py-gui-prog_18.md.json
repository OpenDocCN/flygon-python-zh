["```py\nC:\\Pythonbook\\PyQt5>pyuic5 demoBrowser.ui -o demoBrowser.py\n```", "```py\nimport sys\nfrom PyQt5.QtCore import QUrl\nfrom PyQt5.QtWidgets import QApplication, QDialog\nfrom PyQt5.QtWebEngineWidgets import QWebEngineView\nfrom demoBrowser import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.ui.pushButtonGo.clicked.connect(self.dispSite)\n        self.show()\n    def dispSite(self):\n        self.ui.widget.load(QUrl(self.ui.lineEditURL.text()))\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys, time\nfrom PyQt5 import QtGui\nfrom PyQt5 import QtCore\nfrom PyQt5.QtWidgets import QApplication, QDialog\nfrom PyQt5.QtCore import QCoreApplication\nimport socket\nfrom threading import Thread\nfrom socketserver import ThreadingMixIn\nconn=None\nfrom demoServer import *\nclass Window(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.textEditMessages=self.ui.textEditMessages\n        self.ui.pushButtonSend.clicked.connect(self.dispMessage)\n        self.show()\n\n    def dispMessage(self):\n        text=self.ui.lineEditMessage.text()\n        global conn\n        conn.send(text.encode(\"utf-8\"))\n        self.ui.textEditMessages.append(\"Server:   \n        \"+self.ui.lineEditMessage.text())\n        self.ui.lineEditMessage.setText(\"\")\nclass ServerThread(Thread):\n    def __init__(self,window):\n        Thread.__init__(self)\n        self.window=window\n    def run(self):\n        TCP_IP = '0.0.0.0'\n        TCP_PORT = 80\n        BUFFER_SIZE = 1024\n        tcpServer = socket.socket(socket.AF_INET,  \n        socket.SOCK_STREAM)\n        tcpServer.setsockopt(socket.SOL_SOCKET,         \n        socket.SO_REUSEADDR, 1)\n        tcpServer.bind((TCP_IP, TCP_PORT))\n        threads = []\n        tcpServer.listen(4)\n        while True:\n            global conn\n            (conn, (ip,port)) = tcpServer.accept()\n            newthread = ClientThread(ip,port,window)\n            newthread.start()\n            threads.append(newthread)\n        for t in threads:\n            t.join()\nclass ClientThread(Thread):\n    def __init__(self,ip,port,window):\n        Thread.__init__(self)\n        self.window=window\n        self.ip = ip\n        self.port = port\n    def run(self):\n        while True :\n            global conn\n            data = conn.recv(1024)\n            window.textEditMessages.append(\"Client: \n            \"+data.decode(\"utf-8\"))\n\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    window = Window()\n    serverThread=ServerThread(window)\n    serverThread.start()\n    window.exec()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QDialog\nimport socket\nfrom threading import Thread\nfrom socketserver import ThreadingMixIn\nfrom demoClient import *\ntcpClientA=None\nclass Window(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.textEditMessages=self.ui.textEditMessages\n        self.ui.pushButtonSend.clicked.connect(self.dispMessage)\n        self.show()\n    def dispMessage(self):\n        text=self.ui.lineEditMessage.text()\n        self.ui.textEditMessages.append(\"Client:  \n        \"+self.ui.lineEditMessage.text())\n        tcpClientA.send(text.encode())\n        self.ui.lineEditMessage.setText(\"\")\nclass ClientThread(Thread):\n    def __init__(self,window):\n        Thread.__init__(self)\n        self.window=window\n    def run(self):\n        host = socket.gethostname()\n        port = 80\n        BUFFER_SIZE = 1024\n        global tcpClientA\n        tcpClientA = socket.socket(socket.AF_INET, \n        socket.SOCK_STREAM)\n        tcpClientA.connect((host, port))\n        while True:\n            data = tcpClientA.recv(BUFFER_SIZE)\n            window.textEditMessages.append(\"Server: \n            \"+data.decode(\"utf-8\"))\n            tcpClientA.close()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    window = Window()\n    clientThread=ClientThread(window)\n    clientThread.start()\n    window.exec()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QMainWindow, QApplication\nfrom demoDockWidget import *\nclass AppWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n        self.show()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = AppWindow()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\n C:\\Pythonbook\\PyQt5>pyuic5 demoMDI.ui -o demoMDI.py.\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QMainWindow, QApplication, QAction, QFileDialog\nfrom demoMDI import *\nclass MyForm(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n        self.ui.mdiArea.addSubWindow(self.ui.subwindow)\n        self.ui.mdiArea.addSubWindow(self.ui.subwindow_2)\n        self.ui.actionSubWindow_View.triggered.connect\n        (self.SubWindow_View)\n        self.ui.actionTabbed_View.triggered.connect(self.\n        Tabbed_View)\n        self.ui.actionCascade_View.triggered.connect(self.\n        cascadeArrange)\n        self.ui.actionTile_View.triggered.connect(self.tileArrange)\n        self.show()\n    def SubWindow_View(self):\n        self.ui.mdiArea.setViewMode(0)\n    def Tabbed_View(self):\n        self.ui.mdiArea.setViewMode(1)\n    def cascadeArrange(self):\n        self.ui.mdiArea.cascadeSubWindows()\n    def tileArrange(self):\n        self.ui.mdiArea.tileSubWindows()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nC:PythonbookPyQt5>pyuic5 demoTabWidget.ui -o demoTabWidget.py\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication\nfrom demoTabWidget import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.show()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QMainWindow, QApplication\nfrom PyQt5.QtGui import QPainter\n\nfrom demoMenuBar import *\n\nclass AppWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n        self.pos1 = [0,0]\n        self.pos2 = [0,0]\n        self.toDraw=\"\"\n        self.ui.actionDraw_Circle.triggered.connect(self.\n        drawCircle)\n        self.ui.actionDraw_Rectangle.triggered.connect(self.\n        drawRectangle)\n        self.ui.actionDraw_Line.triggered.connect(self.drawLine)\n        self.ui.actionPage_Setup.triggered.connect(self.pageSetup)\n        self.ui.actionSet_Password.triggered.connect(self.\n        setPassword)\n        self.ui.actionCut.triggered.connect(self.cutMethod)\n        self.ui.actionCopy.triggered.connect(self.copyMethod)\n        self.ui.actionPaste.triggered.connect(self.pasteMethod)      \n        self.show()\n\n    def paintEvent(self, event):\n        qp = QPainter()\n        qp.begin(self)\n        if self.toDraw==\"rectangle\":\n            width = self.pos2[0]-self.pos1[0]\n            height = self.pos2[1] - self.pos1[1]    \n            qp.drawRect(self.pos1[0], self.pos1[1], width, height)\n        if self.toDraw==\"line\":\n            qp.drawLine(self.pos1[0], self.pos1[1], self.pos2[0], \n            self.pos2[1])\n        if self.toDraw==\"circle\":\n            width = self.pos2[0]-self.pos1[0]\n            height = self.pos2[1] - self.pos1[1]           \n            rect = QtCore.QRect(self.pos1[0], self.pos1[1], width,\n            height)\n            startAngle = 0\n            arcLength = 360 *16\n            qp.drawArc(rect, startAngle, \n            arcLength)     \n        qp.end()\n\n    def mousePressEvent(self, event):\n        if event.buttons() & QtCore.Qt.LeftButton:\n            self.pos1[0], self.pos1[1] = event.pos().x(), \n            event.pos().y()\n\n    def mouseReleaseEvent(self, event):\n        self.pos2[0], self.pos2[1] = event.pos().x(), \n        event.pos().y()   \n        self.update()\n\n    def drawCircle(self):\n        self.ui.label.setText(\"\")\n        self.toDraw=\"circle\"\n\n    def drawRectangle(self):\n        self.ui.label.setText(\"\")\n        self.toDraw=\"rectangle\"\n\n    def drawLine(self):\n        self.ui.label.setText(\"\")\n        self.toDraw=\"line\"\n\n    def pageSetup(self):\n        self.ui.label.setText(\"Page Setup menu item is selected\")\n\n    def setPassword(self):\n        self.ui.label.setText(\"Set Password menu item is selected\")\n\n    def cutMethod(self):\n        self.ui.label.setText(\"Cut menu item is selected\")\n\n    def copyMethod(self):\n        self.ui.label.setText(\"Copy menu item is selected\")\n\n    def pasteMethod(self):\n        self.ui.label.setText(\"Paste menu item is selected\")\n\napp = QApplication(sys.argv)\nw = AppWindow()\nw.show()\nsys.exit(app.exec_())\n```"]