["```py\nstudent@ubuntu:~$ python3 Python 3.5.2 (default, Nov 23 2017, 16:37:01) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> >>> 50 / 0 Traceback (most recent call last):\n File \"<stdin>\", line 1, in <module> ZeroDivisionError: division by zero >>> >>> 6 + abc*5 Traceback (most recent call last):\n File \"<stdin>\", line 1, in <module> NameError: name 'abc' is not defined >>> >>> 'abc' + 2 Traceback (most recent call last):\n File \"<stdin>\", line 1, in <module> TypeError: Can't convert 'int' object to str implicitly >>> >>> import abcd Traceback (most recent call last):\n File \"<stdin>\", line 1, in <module> ImportError: No module named 'abcd' >>> \n```", "```py\ntry:\n statement(s)\nexcept:\n statement(s)\n```", "```py\ntry:\n statement(s)\nexcept exception_name:\n statement(s)\n```", "```py\na = 35 b = 57 try:\n c = a + b print(\"The value of c is: \", c) d = b / 0 print(\"The value of d is: \", d)except:\n print(\"Division by zero is not possible\")print(\"Out of try...except block\")\n```", "```py\nstudent@ubuntu:~$ python3 exception_example.py The value of c is:  92 Division by zero is not possible Out of try...except block\n```", "```py\nclass Student:\n def __init__(self, std): self.count = std            def print_std(self):\n for i in range(self.count): print(i) return if __name__ == '__main__':\n Student(5).print_std()\n```", "```py\n $ python3\n```", "```py\nstudent@ubuntu:~$ python3 Python 3.5.2 (default, Nov 23 2017, 16:37:01) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> >>> import pdb_example >>> import pdb >>> pdb.run('pdb_example.Student(5).print_std()') > <string>(1)<module>() (Pdb)\n```", "```py\nstudent@ubuntu:~$ python3 Python 3.5.2 (default, Nov 23 2017, 16:37:01) [GCC 5.4.0 20160609] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> >>> import pdb_example >>> import pdb >>> pdb.run('pdb_example.Student(5).print_std()') > <string>(1)<module>() (Pdb) continue 0 1 2 3 4 >>> \n```", "```py\n$ python3 -m pdb pdb_example.py\n```", "```py\nstudent@ubuntu:~$ python3 -m pdb pdb_example.py > /home/student/pdb_example.py(1)<module>() -> class Student: (Pdb) continue 0 1 2 3 4 The program finished and will be restarted > /home/student/pdb_example.py(1)<module>() -> class Student: (Pdb)\n```", "```py\nimport pdb class Student:\n def __init__(self, std): self.count = std            def print_std(self):\n for i in range(self.count): pdb.set_trace() print(i) returnif __name__ == '__main__':\n Student(5).print_std()\n```", "```py\nstudent@ubuntu:~$ python3 pdb_example.py > /home/student/pdb_example.py(10)print_std() -> print(i) (Pdb) continue 0 > /home/student/pdb_example.py(9)print_std() -> pdb.set_trace() (Pdb)\n```", "```py\nclass Student:\n def __init__(self, std): self.count = std            def go(self):\n for i in range(self.count): print(i) return if __name__ == '__main__':\n Student(5).go()\n```", "```py\nstudent@ubuntu:~$ python3 -m trace --trace trace_example.py\n --- modulename: trace_example, funcname: <module> trace_example.py(1): class Student:\n --- modulename: trace_example, funcname: Student trace_example.py(1): class Student: trace_example.py(2):   def __init__(self, std): trace_example.py(5):   def go(self): trace_example.py(10): if __name__ == '__main__': trace_example.py(11):             Student(5).go()\n --- modulename: trace_example, funcname: init trace_example.py(3):               self.count = std\n --- modulename: trace_example, funcname: go trace_example.py(6):               for i in range(self.count): trace_example.py(7):                           print(i) 0 trace_example.py(6):               for i in range(self.count): trace_example.py(7):                           print(i) 1 trace_example.py(6):               for i in range(self.count): trace_example.py(7):                           print(i) 2 trace_example.py(6):               for i in range(self.count): trace_example.py(7):                           print(i) 3 trace_example.py(6):               for i in range(self.count): trace_example.py(7):                           print(i) 4\n```", "```py\nmul_value = 0 def mul_numbers( num1, num2 ):\n mul_value = num1 * num2; print (\"Local Value: \", mul_value) return mul_value mul_numbers( 58, 77 ) print (\"Global Value: \", mul_value)\n```", "```py\nstudent@ubuntu:~$ python3 -m cProfile cprof_example.py Local Value:  4466 Global Value:  0\n 6 function calls in 0.000 seconds Ordered by: standard name   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n 1    0.000    0.000    0.000    0.000 cprof_example.py:1(<module>) 1    0.000    0.000    0.000    0.000 cprof_example.py:2(mul_numbers) 1    0.000    0.000    0.000    0.000 {built-in method builtins.exec} 2    0.000    0.000    0.000    0.000 {built-in method builtins.print} 1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n```", "```py\nimport timeit prg_setup = \"from math import sqrt\" prg_code = ''' def timeit_example():\n list1 = [] for x in range(50): list1.append(sqrt(x)) ''' # timeit statement print(timeit.timeit(setup = prg_setup, stmt = prg_code, number = 10000)) \n```", "```py\ndef foo(k):\n    k = [1]\nq = [0]\nfoo(q)\nprint(q)\n```"]