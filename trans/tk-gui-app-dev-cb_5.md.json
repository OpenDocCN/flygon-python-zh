["```py\ndef required(value, message):\n    if not value:\n        raise ValueError(message)\n    return value\n\ndef matches(value, regex, message):\n    if value and not regex.match(value):\n        raise ValueError(message)\n    return value\n```", "```py\nimport re\n\nclass Contact(object):\n    email_regex = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n    phone_regex = re.compile(r\"\\([0-9]{3}\\)\\s[0-9]{7}\")\n\n    def __init__(self, last_name, first_name, email, phone):\n        self.last_name = last_name\n        self.first_name = first_name\n        self.email = email\n        self.phone = phone\n```", "```py\n    @property\n    def last_name(self):\n        return self._last_name\n\n    @last_name.setter\n    def last_name(self, value):\n        self._last_name = required(value, \"Last name is required\")\n```", "```py\n    @property\n    def email(self):\n        return self._email\n\n    @email.setter\n    def email(self, value):\n        self._email = matches(value, self.email_regex,\n                              \"Invalid email format\")\n```", "```py\ncontact.first_name = \"John\" # Stores \"John\" in contact._first_name\nprint(contact.first_name)   # Reads \"John\" from contact._first_name\ncontact.last_name = \"\"      # ValueError raised by the required function\n```", "```py\n    @property\n    def last_name(self):\n        # ...\n\n    @last_name.setter\n    def last_name(self, value):\n        # ...\n```", "```py\nfrom collections import namedtuple\n\nContact = namedtuple(\"Contact\", [\"last_name\", \"first_name\",\n                                 \"email\", \"phone\"])\n```", "```py\n$ pip install attrs\n```", "```py\nimport re\nimport attr\n\ndef required(message):\n    def func(self, attr, val):\n        if not val: raise ValueError(message)\n    return func\n\ndef match(pattern, message):\n    regex = re.compile(pattern)\n    def func(self, attr, val):\n        if val and not regex.match(val):\n            raise ValueError(message)\n    return func\n\n@attr.s\nclass Contact(object):\n    last_name = attr.ib(validator=required(\"Last name is required\"))\n    first_name = attr.ib(validator=required(\"First name is required\"))\n    email = attr.ib(validator=match(r\"[^@]+@[^@]+\\.[^@]+\",\n                                    \"Invalid email format\"))\n    phone = attr.ib(validator=match(r\"\\([0-9]{3}\\)\\s[0-9]{7}\",\n                                    \"Invalid phone format\"))\n```", "```py\nimport tkinter as tk\nimport tkinter.messagebox as mb\n\nfrom chapter5_01 import Contact\n```", "```py\nclass ContactList(tk.Frame):\n    def __init__(self, master, **kwargs):\n        super().__init__(master)\n        self.lb = tk.Listbox(self, **kwargs)\n        scroll = tk.Scrollbar(self, command=self.lb.yview)\n\n        self.lb.config(yscrollcommand=scroll.set)\n        scroll.pack(side=tk.RIGHT, fill=tk.Y)\n        self.lb.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)\n\n    def insert(self, contact, index=tk.END):\n        text = \"{}, {}\".format(contact.last_name, contact.first_name)\n        self.lb.insert(index, text)\n\n    def delete(self, index):\n        self.lb.delete(index, index)\n\n    def update(self, contact, index):\n        self.delete(index)\n        self.insert(contact, index)\n\n    def bind_doble_click(self, callback):\n        handler = lambda _: callback(self.lb.curselection()[0])\n        self.lb.bind(\"<Double-Button-1>\", handler)\n```", "```py\nclass ContactForm(tk.LabelFrame):\n    fields = (\"Last name\", \"First name\", \"Email\", \"Phone\")\n\n    def __init__(self, master, **kwargs):\n        super().__init__(master, text=\"Contact\",\n                         padx=10, pady=10, **kwargs)\n        self.frame = tk.Frame(self)\n        self.entries = list(map(self.create_field, \n        enumerate(self.fields)))\n        self.frame.pack()\n\n    def create_field(self, field):\n        position, text = field\n        label = tk.Label(self.frame, text=text)\n        entry = tk.Entry(self.frame, width=25)\n        label.grid(row=position, column=0, pady=5)\n        entry.grid(row=position, column=1, pady=5)\n        return entry\n\n    def load_details(self, contact):\n        values = (contact.last_name, contact.first_name,\n                  contact.email, contact.phone)\n        for entry, value in zip(self.entries, values):\n            entry.delete(0, tk.END)\n            entry.insert(0, value)\n\n    def get_details(self):\n        values = [e.get() for e in self.entries]\n        try:\n            return Contact(*values)\n        except ValueError as e:\n            mb.showerror(\"Validation error\", str(e), parent=self)\n\n    def clear(self):\n        for entry in self.entries:\n            entry.delete(0, tk.END)\n```", "```py\n    def bind_doble_click(self, callback):\n        handler = lambda _: callback(self.lb.curselection()[0])\n        self.lb.bind(\"<Double-Button-1>\", handler)\n```", "```py\n    def get_details(self):\n        values = [e.get() for e in self.entries]\n        try:\n            return Contact(*values)\n        except ValueError as e:\n            mb.showerror(\"Validation error\", str(e), parent=self)\n```", "```py\nGauford,Albertine,agauford0@acme.com,(614) 7171720\nGreger,Bryce,bgreger1@acme.com,(616) 3543513\nWetherald,Rickey,rwetherald2@acme.com,(379) 3652495\n```", "```py\nimport csv\nimport tkinter as tk\n\nfrom chapter5_01 import Contact\nfrom chapter5_02 import ContactForm, ContactList\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"CSV Contact list\")\n        self.list = ContactList(self, height=12)\n        self.form = ContactForm(self)\n        self.contacts = self.load_contacts()\n\n        for contact in self.contacts:\n            self.list.insert(contact)\n        self.list.pack(side=tk.LEFT, padx=10, pady=10)\n        self.form.pack(side=tk.LEFT, padx=10, pady=10)\n        self.list.bind_doble_click(self.show_contact)\n\n    def load_contacts(self):\n        with open(\"contacts.csv\", encoding=\"utf-8\", newline=\"\") as f:\n            return [Contact(*r) for r in csv.reader(f)]\n\n    def show_contact(self, index):\n        contact = self.contacts[index]\n        self.form.load_details(contact)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ndef load_contacts(self):\n    with open(\"contacts.csv\", encoding=\"utf-8\", newline=\"\") as f:\n        return [Contact(*r) for r in csv.reader(f)]\n```", "```py\nimport csv\nimport sqlite3\n\ndef main():\n    with open(\"contacts.csv\", encoding=\"utf-8\", newline=\"\") as f, \\\n         sqlite3.connect(\"contacts.db\") as conn:\n        conn.execute(\"\"\"CREATE TABLE contacts (\n                          last_name text,\n                          first_name text,\n                          email text,\n                          phone text\n                        )\"\"\")\n        conn.executemany(\"INSERT INTO contacts VALUES (?,?,?,?)\",\n                         csv.reader(f))\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nclass NewContact(tk.Toplevel):\n    def __init__(self, parent):\n        super().__init__(parent)\n        self.contact = None\n        self.form = ContactForm(self)\n        self.btn_add = tk.Button(self, text=\"Confirm\",\n                                 command=self.confirm)\n        self.form.pack(padx=10, pady=10)\n        self.btn_add.pack(pady=10)\n\n    def confirm(self):\n        self.contact = self.form.get_details()\n        if self.contact:\n            self.destroy()\n\n    def show(self):\n        self.grab_set()\n        self.wait_window()\n        return self.contact\n```", "```py\nclass UpdateContactForm(ContactForm):\n    def __init__(self, master, **kwargs):\n        super().__init__(master, **kwargs)\n        self.btn_save = tk.Button(self, text=\"Save\")\n        self.btn_delete = tk.Button(self, text=\"Delete\")\n\n        self.btn_save.pack(side=tk.RIGHT, ipadx=5, padx=5, pady=5)\n        self.btn_delete.pack(side=tk.RIGHT, ipadx=5, padx=5, pady=5)\n\n    def bind_save(self, callback):\n        self.btn_save.config(command=callback)\n\n    def bind_delete(self, callback):\n        self.btn_delete.config(command=callback)\n```", "```py\nclass App(tk.Tk):\n    def __init__(self, conn):\n        super().__init__()\n        self.title(\"SQLite Contacts list\")\n        self.conn = conn\n self.selection = None\n        self.list = ContactList(self, height=15)\n        self.form = UpdateContactForm(self)\n        self.btn_new = tk.Button(self, text=\"Add new contact\",\n command=self.add_contact)\n        self.contacts = self.load_contacts()\n\n        for contact in self.contacts:\n            self.list.insert(contact)\n        self.list.pack(side=tk.LEFT, padx=10, pady=10)\n        self.form.pack(padx=10, pady=10)\n        self.btn_new.pack(side=tk.BOTTOM, pady=5)\n\n        self.list.bind_doble_click(self.show_contact)\n        self.form.bind_save(self.update_contact)\n self.form.bind_delete(self.delete_contact)\n```", "```py\n    def load_contacts(self):\n        contacts = []\n        sql = \"\"\"SELECT rowid, last_name, first_name, email, phone\n                 FROM contacts\"\"\"\n        for row in self.conn.execute(sql):\n            contact = Contact(*row[1:])\n            contact.rowid = row[0]\n            contacts.append(contact)\n        return contacts\n\n    def show_contact(self, index):\n        self.selection = index\n        contact = self.contacts[index]\n        self.form.load_details(contact)\n```", "```py\n    def to_values(self, c):\n        return (c.last_name, c.first_name, c.email, c.phone)\n\n    def add_contact(self):\n        new_contact = NewContact(self)\n        contact = new_contact.show()\n        if not contact:\n            return\n        values = self.to_values(contact)\n        with self.conn:\n            cursor = self.conn.cursor()\n            cursor.execute(\"INSERT INTO contacts VALUES (?,?,?,?)\", \n            values)\n            contact.rowid = cursor.lastrowid\n        self.contacts.append(contact)\n        self.list.insert(contact)\n```", "```py\n    def update_contact(self):\n        if self.selection is None:\n            return\n        rowid = self.contacts[self.selection].rowid\n        contact = self.form.get_details()\n        if contact:\n            values = self.to_values(contact)\n            with self.conn:\n                sql = \"\"\"UPDATE contacts SET\n                         last_name = ?,\n                         first_name = ?,\n                         email = ?,\n                         phone = ?\n                     WHERE rowid = ?\"\"\"\n                self.conn.execute(sql, values + (rowid,))\n            contact.rowid = rowid\n            self.contacts[self.selection] = contact\n            self.list.update(contact, self.selection)\n```", "```py\n    def delete_contact(self):\n        if self.selection is None:\n            return\n        rowid = self.contacts[self.selection].rowid\n        with self.conn:\n            self.conn.execute(\"DELETE FROM contacts WHERE rowid = ?\",\n                              (rowid,))\n        self.form.clear()\n        self.list.delete(self.selection)\n        self.selection = None\n```", "```py\ndef main():\n    with sqlite3.connect(\"contacts.db\") as conn:\n        app = App(conn)\n        app.mainloop()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nsql = \"INSERT INTO my_table (col1, col2, col3) VALUES (?, ?, ?)\"\nwith connection:\n    cursor = connection.cursor()\n    cursor.execute(sql, (value1, value2, value3))\n    rowid = cursor.lastrowid\n```", "```py\nsql = \"SELECT rowid, col1, col2, col3 FROM my_table\"\nfor row in connection.execute(sql):\n    # do something with row\n```", "```py\nsql = \"UPDATE my_table SET col1 = ?, col2 = ?, col3 = ? \nWHERE rowid = ?\"\nwith connection:\n    connection.execute(sql, (value1, value2, value3, rowid))\n```", "```py\nsql = \"DELETE FROM my_table WHERE rowid = ?\"\nwith connection:\n    connection.execute(sql, (rowid,))\n```", "```py\nclass ContactsRepository(object):\n    def __init__(self, conn):\n        self.conn = conn\n\n    def to_values(self, c):\n        return c.last_name, c.first_name, c.email, c.phone\n\n    def get_contacts(self):\n        sql = \"\"\"SELECT rowid, last_name, first_name, email, phone\n                 FROM contacts\"\"\"\n        for row in self.conn.execute(sql):\n            contact = Contact(*row[1:])\n            contact.rowid = row[0]\n            yield contact\n\n    def add_contact(self, contact):\n        sql = \"INSERT INTO contacts VALUES (?, ?, ?, ?)\"\n        with self.conn:\n            cursor = self.conn.cursor()\n            cursor.execute(sql, self.to_values(contact))\n            contact.rowid = cursor.lastrowid\n        return contact\n\n    def update_contact(self, contact):\n        rowid = contact.rowid\n        sql = \"\"\"UPDATE contacts\n                 SET last_name = ?, first_name = ?, email = ?, \n                 phone = ?\n                 WHERE rowid = ?\"\"\"\n        with self.conn:\n            self.conn.execute(sql, self.to_values(contact) + (rowid,))\n        return contact\n\n    def delete_contact(self, contact):\n        sql = \"DELETE FROM contacts WHERE rowid = ?\"\n        with self.conn:\n            self.conn.execute(sql, (contact.rowid,))\n```", "```py\nclass ContactsView(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"SQLite Contacts list\")\n        self.list = ContactList(self, height=15)\n        self.form = UpdateContactForm(self)\n        self.btn_new = tk.Button(self, text=\"Add new contact\")\n\n        self.list.pack(side=tk.LEFT, padx=10, pady=10)\n        self.form.pack(padx=10, pady=10)\n        self.btn_new.pack(side=tk.BOTTOM, pady=5)\n\n    def set_ctrl(self, ctrl):\n        self.btn_new.config(command=ctrl.create_contact)\n        self.list.bind_doble_click(ctrl.select_contact)\n        self.form.bind_save(ctrl.update_contact)\n        self.form.bind_delete(ctrl.delete_contact)\n\n    def add_contact(self, contact):\n        self.list.insert(contact)\n\n    def update_contact(self, contact, index):\n        self.list.update(contact, index)\n\n    def remove_contact(self, index):\n        self.form.clear()\n        self.list.delete(index)\n\n    def get_details(self):\n        return self.form.get_details()\n\n    def load_details(self, contact):\n        self.form.load_details(contact)\n```", "```py\nclass ContactsController(object):\n    def __init__(self, repo, view):\n        self.repo = repo\n        self.view = view\n        self.selection = None\n        self.contacts = list(repo.get_contacts())\n\n    def create_contact(self):\n        new_contact = NewContact(self.view).show()\n        if new_contact:\n            contact = self.repo.add_contact(new_contact)\n            self.contacts.append(contact)\n            self.view.add_contact(contact)\n\n    def select_contact(self, index):\n        self.selection = index\n        contact = self.contacts[index]\n        self.view.load_details(contact)\n\n    def update_contact(self):\n        if not self.selection:\n            return\n        rowid = self.contacts[self.selection].rowid\n        update_contact = self.view.get_details()\n        update_contact.rowid = rowid\n\n        contact = self.repo.update_contact(update_contact)\n        self.contacts[self.selection] = contact\n        self.view.update_contact(contact, self.selection)\n\n    def delete_contact(self):\n        if not self.selection:\n            return\n        contact = self.contacts[self.selection]\n        self.repo.delete_contact(contact)\n        self.view.remove_contact(self.selection)\n\n    def start(self):\n        for c in self.contacts:\n            self.view.add_contact(c)\n        self.view.mainloop()\n```", "```py\n# Suppose that __main__.py is in the directory chapter5_05\n$ python chapter5_05\n# Or if we compress the directory contents\n$ python chapter5_05.zip\n```", "```py\n    def update_contact(self):\n        if not self.selection:\n            return\n        rowid = self.contacts[self.selection].rowid\n        update_contact = self.view.get_details()\n        update_contact.rowid = rowid\n```"]