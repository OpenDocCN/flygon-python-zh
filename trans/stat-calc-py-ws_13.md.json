["```py\n    from copy import deepcopy\n    class Solver:\n    \u00a0\u00a0\u00a0\u00a0def __init__(self, input_path):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Read in the input file and initialize the puzzle\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0with open(input_path, 'r') as f:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lines = f.readlines()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cells = [list(map(int, line.split(','))) \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for line in lines]\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0# Print out the initial puzzle or solution in a nice format.\n    \u00a0\u00a0\u00a0\u00a0def display_cell(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('-' * 23)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i in range(9):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for j in range(9):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(self.cells[i][j], end=' ')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if j % 3 == 2:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('|', end=' ')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i % 3 == 2:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('-' * 23)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0True/False for whether a number is present in a row, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0column, or quadrant.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def get_presence(cells):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present_in_row = [{num: False for num in range(1, 10)}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for _ in range(9)]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present_in_col = [{num: False for num in range(1, 10)}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for _ in range(9)]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present_in_quad = [{num: False for num in range(1, 10)}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for _ in range(9)]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for row_id in range(9):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for col_id in range(9):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp_val = cells[row_id][col_id]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If a cell is not empty, update the corresponding \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0row, column, and quadrant.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if temp_val > 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present_in_row[row_id][temp_val] = True\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present_in_col[col_id][temp_val] = True\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present_in_quad[row_id // 3 * 3 \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ col_id // 3]\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[temp_val] = True\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return present_in_row, present_in_col, present_in_quad\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# A dictionary for empty locations and their possible values.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def get_possible_values(cells):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present_in_row, present_in_col, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0present_in_quad = get_presence(cells)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0possible_values = {}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for row_id in range(9):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for col_id in range(9):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp_val = cells[row_id][col_id]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if temp_val == 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0possible_values[(row_id, col_id)] = []\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0If a number is not present in the same row, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0column, or quadrant as an empty cell, add it \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to the list of possible values of that cell.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for num in range(1, 10):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (not present_in_row[row_id][num]) and\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(not present_in_col[col_id][num]) and\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(not present_in_quad[row_id // 3 * 3 \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ col_id // 3][num]):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0possible_values[(row_id, col_id)]\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.append(num)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return possible_values\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Fill in empty cells that have only one possible value.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def simple_update(cells):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0update_again = False\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0possible_values = get_possible_values(cells)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for row_id, col_id in possible_values:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(possible_values[(row_id, col_id)]) == 1:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0update_again = True\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cells[row_id][col_id] = possible_values[\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(row_id, col_id)][0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Recursively update with potentially new possible values.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if update_again:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cells = simple_update(cells)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return cells\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Recursively solve the puzzle\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def recur_solve(cells):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cells = simple_update(cells)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0possible_values = get_possible_values(cells)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(possible_values) == 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return cells  # return when all cells are filled\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Find the empty cell with fewest possible values.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fewest_num_values = 10\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for row_id, col_id in possible_values:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(possible_values[(row_id, col_id)]) == 0:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False  # return if an empty is invalid\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if len(possible_values[(row_id, col_id)]) \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0< fewest_num_values:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fewest_num_values = len(possible_values[\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(row_id, col_id)])\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0target_location = (row_id, col_id)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for value in possible_values[target_location]:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dup_cells = deepcopy(cells)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dup_cells[target_location[0]]\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[target_location[1]] = value\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0potential_sol = recur_solve(dup_cells)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Return immediately when a valid solution is found.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if potential_sol:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return potential_sol\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return False  # return if no valid solution is found\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0# Functions to find a solution.\n    \u00a0\u00a0\u00a0\u00a0def solve(self):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def get_presence(cells):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def get_possible_values(cells):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def simple_update(cells):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0def recur_solve(cells):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Initial puzzle:')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.display_cell()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0final_solution = recur_solve(self.cells)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if final_solution is False:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('A solution cannot be found.')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.cells = final_solution\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Final solution:')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self.display_cell()\n    ```", "```py\n    solver = Solver('sudoku_input/sudoku_input_2.txt')\n    solver.solve()\n    ```", "```py\n    Initial puzzle:\n    -----------------------\n    0 0 3 | 0 2 0 | 6 0 0 | \n    9 0 0 | 3 0 5 | 0 0 1 | \n    0 0 1 | 8 0 6 | 4 0 0 | \n    -----------------------\n    0 0 8 | 1 0 2 | 9 0 0 | \n    7 0 0 | 0 0 0 | 0 0 8 | \n    0 0 6 | 7 0 8 | 2 0 0 | \n    -----------------------\n    0 0 2 | 6 0 9 | 5 0 0 | \n    8 0 0 | 2 0 3 | 0 0 9 | \n    0 0 5 | 0 1 0 | 3 0 0 | \n    -----------------------\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    df = pd.read_csv('CommViolPredUnnormalizedData.txt')\n    df.head()\n    ```", "```py\n    for column in df.columns:\n    \u00a0\u00a0\u00a0\u00a0print(column)\n    ```", "```py\n    print(len(df.columns))\n    ```", "```py\n    df = df.replace('?', np.nan)\n    ```", "```py\n    df.isnull().sum()\n    ```", "```py\n    communityname             0\n    state                     0\n    countyCode             1221\n    communityCode          1224\n    fold                      0\n                           ... \n    autoTheftPerPop           3\n    arsons                   91\n    arsonsPerPop             91\n    ViolentCrimesPerPop     221\n    nonViolPerPop            97\n    Length: 147, dtype: int64\n    ```", "```py\n    print(df.isnull().sum()['NumStreet'])\n    print(df.isnull().sum()['PolicPerPop'])\n    ```", "```py\n    state_count = df['state'].value_counts()\n    f, ax = plt.subplots(figsize=(15, 10))\n    state_count.plot.bar()\n    plt.show()\n    ```", "```py\n    f, ax = plt.subplots(figsize=(15, 10))\n    state_count.plot.pie()\n    plt.show()\n    ```", "```py\n    f, ax = plt.subplots(figsize=(15, 10))\n    df['population'].hist(bins=200)\n    plt.show()\n    ```", "```py\n    f, ax = plt.subplots(figsize=(15, 10))\n    df['householdsize'].hist(bins=200)\n    plt.show()\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    df = pd.read_csv('CommViolPredUnnormalizedData.txt')\n    df.head()\n    ```", "```py\n    df = df.replace('?', np.nan)\n    ```", "```py\n    age_groups = ['12t21', '12t29', '16t24', '65up']\n\n    for group in age_groups:\n    \u00a0\u00a0\u00a0\u00a0df['ageCnt' + group] = (df['population'] * \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0df['agePct' + group]).astype(int)\n    df[['population'] \\\n    \u00a0\u00a0+ ['agePct' + group for group in age_groups] \\\n    \u00a0\u00a0+ ['ageCnt' + group for group in age_groups]].head()\n    ```", "```py\n    group_state_df = df.groupby('state')\n    group_state_df.sum()[['ageCnt' + group for group in age_groups]]\n    ```", "```py\n    crime_df = df[['burglPerPop','larcPerPop',\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'autoTheftPerPop', 'arsonsPerPop',\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'nonViolPerPop']]\n    f, ax = plt.subplots(figsize=(13, 10))\n    sns.boxplot(data=crime_df)\n    plt.show()\n    ```", "```py\n    feature_columns = ['PctPopUnderPov', 'PctLess9thGrade', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'PctUnemployed', 'ViolentCrimesPerPop', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'nonViolPerPop']\n    filtered_df = df[feature_columns]\n    f, ax = plt.subplots(figsize=(13, 10))\n    sns.heatmap(filtered_df.dropna().astype(float).corr(), \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0center=0, annot=True)\n    bottom, top = ax.get_ylim()\n    ax.set_ylim(bottom + 0.5, top - 0.5)\n    plt.show()\n    ```", "```py\n    COST_PER_BURGER = 6.56\n    FIXED_COST = 1312.13\n    AVG_TOWN_BUDGET = 4000\n    x = Symbol('x')  # number of burgers to be sold\n    y = Symbol('y')  # price of a burger\n    ```", "```py\n    solve([x * (y - COST_PER_BURGER) - FIXED_COST,\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x * y - AVG_TOWN_BUDGET])\n    ```", "```py\n    [{x: 409.736280487805, y: 9.76237690066856}]\n    ```", "```py\n    def get_profit(x, y):\n    \u00a0\u00a0\u00a0\u00a0demand = AVG_TOWN_BUDGET / y\n    \u00a0\u00a0\u00a0\u00a0if x > demand:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return AVG_TOWN_BUDGET - x * COST_PER_BURGER \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- FIXED_COST\n\n    \u00a0\u00a0\u00a0\u00a0return x * (y - COST_PER_BURGER) - FIXED_COST\n    ```", "```py\n    xs = [i for i in range(300, 501)]\n    profits_976 = [get_profit(x, 9.76) for x in xs]\n    plt.plot(xs, profits_976)\n    plt.axhline(0, c='k')\n    plt.xlabel('Number of burgers produced')\n    plt.ylabel('Profit')\n    plt.show()\n    ```", "```py\n    xs = [i for i in range(300, 501)]\n    profits_999 = [get_profit(x, 9.99) for x in xs]\n    plt.plot(xs, profits_999)\n    plt.axhline(0, c='k')\n    plt.xlabel('Number of burgers produced')\n    plt.ylabel('Profit')\n    plt.show()\n    ```", "```py\n    xs = [i for i in range(300, 501, 2)]\n    ys = np.linspace(5, 10, 100)\n    profits = [[get_profit(x, y) for y in ys] for x in xs]\n    ```", "```py\n    plt.imshow(profits)\n    plt.colorbar()\n    plt.xticks([0, 20, 40, 60, 80],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[5, 6, 7, 8, 9, 10])\n    plt.xlabel('Price for each burger')\n    plt.yticks([0, 20, 40, 60, 80],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[300, 350, 400, 450, 500])\n    plt.ylabel('Number of burgers produced')\n    plt.show()\n    ```", "```py\n    def retirement_n(current_balance, annual_salary, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0annual_cap, n, contrib, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0annual_salary_increase, employer_match, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0match_cap, rate):\n    \u00a0\u00a0\u00a0\u00a0'''\n    \u00a0\u00a0\u00a0\u00a0return :: retirement amount at year n\n    \u00a0\u00a0\u00a0\u00a0'''\n\n    \u00a0\u00a0\u00a0\u00a0annual_salary_n = annual_salary*\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(1+annual_salary_increase)**n\n\n    \u00a0\u00a0\u00a0\u00a0your_contrib = contrib*annual_salary_n\n    \u00a0\u00a0\u00a0\u00a0your_contrib = min(your_contrib, annual_cap)\n    \u00a0\u00a0\u00a0\u00a0employer_contrib = contrib*annual_salary_n*employer_match\n    \u00a0\u00a0\u00a0\u00a0employer_contrib = min(employer_contrib,match_cap\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*annual_salary_n*employer_match)\n\n    \u00a0\u00a0\u00a0\u00a0contrib_total = your_contrib + employer_contrib\n\n    \u00a0\u00a0\u00a0\u00a0return your_contrib, employer_contrib,         current_balance + contrib_total*(1+rate)**n\n    ```", "```py\n    def retirement_total(current_balance, annual_salary, \\\n    \u00a0\u00a0\u00a0\u00a0annual_cap=18000, contrib=0.05, \\\n    \u00a0\u00a0\u00a0\u00a0annual_salary_increase=0.02, employer_match=0.5, \\\n    \u00a0\u00a0\u00a0\u00a0match_cap=0.06, rate=0.03, current_age=35, \\\n    \u00a0\u00a0\u00a0\u00a0plan_years=35, life_expectancy=80, fees=0, \\\n    \u00a0\u00a0\u00a0\u00a0per_month=False):\n\n    \u00a0\u00a0\u00a0\u00a0i = 0\n    \u00a0\u00a0\u00a0\u00a0result = 0\n    \u00a0\u00a0\u00a0\u00a0contrib_list = []; ematch_list = []; total_list = []\n\n    \u00a0\u00a0\u00a0\u00a0while i <= plan_years:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cn = retirement_n(current_balance=current_balance, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0annual_salary=annual_salary, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0annual_cap=annual_cap, n=i, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0contrib=contrib, match_cap=match_cap, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0annual_salary_increase=annual_salary_increase,\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0employer_match=employer_match, rate=rate)\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0contrib_list.append(cn[0])\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ematch_list.append(cn[1]) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total_list.append(cn[2])\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = result + cn[2]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i+=1\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0result = result - fees\n\n    \u00a0\u00a0\u00a0\u00a0years_payback = life_expectancy - (current_age + plan_years)\n\n    \u00a0\u00a0\u00a0\u00a0if per_month:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0months = 12\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0months = 1\n    \u00a0\u00a0\u00a0\u00a0result = result / (years_payback*months)\n    \u00a0\u00a0\u00a0\u00a0print('You get back:',result)\n\n    \u00a0\u00a0\u00a0\u00a0return result, contrib_list, ematch_list, total_list\n    ```", "```py\n    result, contrib, ematch, total = retirement_total(current_balance=1000, plan_years=35,\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current_age=36, annual_salary=40000, \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0per_month=True)\n    ```", "```py\n    You get back: 3029.952393422356\n    ```", "```py\n    from matplotlib import pyplot as plt\n    years = [i for i in range(len(total))]\n    plt.plot(years, total,'-o',color='b')\n    width=0.85\n    p1 = plt.bar(years, total, width=width)\n    p2 = plt.bar(years, contrib, width=width)\n    p3 = plt.bar(years, ematch, width=width)\n    plt.xlabel('Years')\n    plt.ylabel('Return')\n    plt.title('Retirement plan evolution')\n    plt.legend((p1[0], p2[0], p3[0]), ('Investment returns','Contributions','Employer match'))\n    plt.show()\n    ```", "```py\n    # Churchill's speech\n    churchill = open('churchill.txt').read()\n    keywords = churchill.split()\n    print(keywords)\n    ```", "```py\n    ['The', 'position', 'of', 'the', 'B.', 'E.F', 'had',  'now', 'become', 'critical', 'As', 'a', 'result', 'of',  'a', 'most', 'skillfully', 'conducted', 'retreat',\u2026.]\n    ```", "```py\n    keylist = []\n    for i in range(len(keywords)-1):\n    \u00a0\u00a0\u00a0\u00a0keylist.append( (keywords[i], keywords[i+1]))\n    print(keylist)\n    ```", "```py\n    [('The', 'position'), ('position', 'of'), ('of', 'the'),  ('the', 'B.'), ('B.', 'E.F'), ('E.F', 'had'), ('had',  'now'), ('now', 'become'), ('become', 'critical'),  ('critical', 'As'),\u2026.]\n    ```", "```py\n    # Create key-value pairs based on follow-up words\n    word_dict = {}\n    for beginning, following in keylist:\n    \u00a0\u00a0\u00a0\u00a0if beginning in word_dict.keys():\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_dict[beginning].append(following)\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_dict[beginning] = [following]\n    print(word_dict)\n    ```", "```py\n    {'magnetic': ['mines'], 'comparatively': ['slowly'],  'four': ['hundred', 'thousand', 'days', 'or', 'to'],  'saved': ['the', 'not'], 'forget': ['the'],\u2026.}\n    ```", "```py\n    first_word = np.random.choice(keywords)\n    while first_word.islower():\n    \u00a0\u00a0\u00a0\u00a0first_word = np.random.choice(keywords)\n    ```", "```py\n    word_chain = [first_word]\n    ```", "```py\n    WORDCOUNT = 40\n    for i in range(WORDCOUNT):\n    \u00a0\u00a0\u00a0\u00a0word_chain.append(np.random.choice(word_dict[\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0word_chain[-1]]))\n    ```", "```py\n    sentence = ' '.join(word_chain)\n    print(sentence)\n    ```", "```py\n    Output 1: \n    British tanks and all the New World, with little or fail. We have been reposed is so plainly marked the fighters which we should the hard and fierce. Suddenly the sharpest form. But this Island home, some articles of all fall\n    Output 2\n    That expansion had been effectively stamped out. Turning once again there may be very convenient, if necessary to guard their knowledge of the question of His son has given to surrender. He spurned the coast to be held by the right\n    Output 3:\n    Air Force. Many are a great strength and four days of the British and serious raids, could approach or at least two armored vehicles of the government would observe that has cleared, the fine Belgian Army compelled the retreating British Expeditionary\n    Output 4\n    30,000 men we can be defended Calais were to cast aside their native land and torpedoes. It was a statement, I feared it was in adverse weather, under its main French Army away; and thus kept open our discussions free, without\n    Output 5\n    German bombers and to give had the House by views freely expressed in their native land. I thought-and some articles of British and in the rescue and more numerous Air Force, and brain of it be that Herr Hitler has often\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    ```", "```py\n    games = pd.read_csv('../data/appstore_games.csv')\n    ```", "```py\n    original_colums_dict = {x: x.lower().replace(' ','_') \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for x in games.columns}\n    games.rename(columns = original_colums_dict,\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inplace = True)\n    ```", "```py\n    games.set_index(keys = 'id', inplace = True)\n    ```", "```py\n    games.drop(columns = ['url', 'icon_url'], \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inplace = True)\n    ```", "```py\n    games['original_release_date'] = pd.to_datetime\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(games['original_release_date'])\n    games['current_version_release_date'] = \\\n    pd.to_datetime(games['current_version_release_date'])\n    ```", "```py\n    games = games.loc[games['average_user_rating'].notnull()]\n    ```", "```py\n    games = games.loc[games['user_rating_count'] >= 30]\n    ```", "```py\n    (4311, 15)\n    games.shape\n    ```", "```py\n    games['languages'] = games['languages'].fillna('EN')\n    ```", "```py\n    games['free_game'] = (games['price'] == 0).astype(int)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.map({0:'paid', 1:'free'})\n    ```", "```py\n    number_of_languages = games['languages'].str.split(',') \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.apply(lambdax: len(x))\n    games['multilingual'] = number_of_languages == 1\n    games['multilingual'] = games['multilingual'].astype(int)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.map({0:'multilingual', 1:'monolingual'})\n    ```", "```py\n    games['price_language'] = games['free_game'] + '-' \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ games['multilingual']\n    ```", "```py\n    games['price_language'].value_counts()\n    ```", "```py\n    free-monolingual     2105\n    free-multilingual    1439\n    paid-monolingual     467\n    paid-multilingual    300\n    Name: price_language, dtype: int64\n    ```", "```py\n    games.groupby('price_language')['average_user_rating']\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.describe()\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import scipy.stats as stats\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n    msft = pd.read_csv('../data/MSFT.csv')\n    ```", "```py\n    msft.rename(columns=lambda x: x.lower().replace(' ', '_'),\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inplace=True)\n    ```", "```py\n    msft['date'] = pd.to_datetime(msft['date'])\n    ```", "```py\n    msft.set_index('date', inplace = True)\n    ```", "```py\n    msft['returns'] = msft['adj_close'].pct_change()\n    ```", "```py\n    start_date = '2014-01-01'\n    end_date = '2018-12-31'\n    msft = msft.loc[start_date: end_date]\n    ```", "```py\n    msft['returns'].hist(ec='k', bins=40);\n    ```", "```py\n    msft['returns'].describe()\n    ```", "```py\n    count    1258.000000\n    mean        0.000996\n    std         0.014591\n    min        -0.092534\n    25%        -0.005956\n    50%         0.000651\n    75%         0.007830\n    max         0.104522\n    Name: returns, dtype: float64\n    ```", "```py\n    R_mean = msft['returns'].mean()\n    R_std = msft['returns'].std()\n    R_rv = stats.norm(loc = R_mean, scale = R_std)\n    ```", "```py\n    fig, ax = plt.subplots()\n    ax.hist(x = msft['returns'], ec = 'k', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bins = 40, density = True,);\n    x_values = np.linspace(msft['returns'].min(), \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0msft['returns'].max(), num=100)\n    densities = R_rv.pdf(x_values)\n    ax.plot(x_values, densities, color='r')\n    ax.grid();\n    ```", "```py\n    # We will use the T-Confidence Interval Function \n    # we wrote earlier in the Chapter\n    print(\"For Math:\")\n    t_confidence_interval(list(data['Math']),0.95)\n    print(\"For Reading:\")\n    t_confidence_interval(list(data['Reading']),0.95)\n    print(\"For Science:\")\n    t_confidence_interval(list(data['Science']),0.95)\n    ```", "```py\n    For Math:\n    Your 0.95 t confidence interval is (448.2561338314995,473.6869804542148)\n    For Reading:\n    Your 0.95 t confidence interval is (449.1937943789569,472.80078847818595)\n    For Science:\n    Your 0.95 t confidence interval is (453.8991748650865,476.9790108491992)\n    ```", "```py\n    # Using A Hypothesis Test, evaluate whether having \n    # widespread internet infrastructure could have an \n    # impact on scores\n    # We need to divide the data set into majority \n    # internet (more than 50 users out of 100) and \n    # minority internet(50 users or less) \n    data1 = data[data['internet_users_per_100'] > 50]\n    data0 = data[data['internet_users_per_100'] <= 50]\n    print(data1)\n    print(data0)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0internet_users   Math      Reading   Science\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_per_100\n    Country Code                                                    \n    ALB           63.252933        413.1570  405.2588  427.2250\n    ARE           90.500000        427.4827  433.5423  436.7311\n    ARG           68.043064        409.0333  425.3031  432.2262\n    AUS           84.560519        493.8962  502.9006  509.9939\n    AUT           83.940142        496.7423  484.8656  495.0375\n    ...           ...              ...       ...       ...\n    SWE           90.610200        493.9181  500.1556  493.4224\n    TTO           69.198471        417.2434  427.2733  424.5905\n    TUR           53.744979        420.4540  428.3351  425.4895\n    URY           64.600000        417.9919  436.5721  435.3630\n    USA           74.554202        469.6285  496.9351  496.2424\n    [63 rows x 4 columns]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0internet_users   Math      Reading   Science\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_per_100\n    Country Code                                                      \n    DZA           38.200000        359.6062  349.8593  375.7451\n    GEO           47.569760        403.8332  401.2881  411.1315\n    IDN           21.976068        386.1096  397.2595  403.0997\n    PER           40.900000        386.5606  397.5414  396.6836\n    THA           39.316127        415.4638  409.1301  421.3373\n    TUN           48.519836        366.8180  361.0555  386.4034\n    VNM           43.500000        494.5183  486.7738  524.6445\n    ```", "```py\n    import scipy.stats as sp\n    math_test_results = sp.ttest_ind(data1['Math'],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data0['Math'],equal_var=False)\n    print(math_test_results.statistic)\n    print(math_test_results.pvalue / 2)\n    reading_test_results = sp.ttest_ind(data1['Reading'],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data0['Reading'],equal_var=False)\n    print(reading_test_results.statistic)\n    print(reading_test_results.pvalue / 2)\n    science_test_results = sp.ttest_ind(data1['Science'],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data0['Science'],equal_var=False)\n    print(science_test_results.statistic)\n    print(science_test_results.pvalue / 2)\n    ```", "```py\n    For Math: (note - statistic must be positive in     order for there to be significance.)\n    3.6040958108257897\n    0.0036618262642996438\n    For Reading: (note - statistic must be positive     in order for there to be significance.)\n    3.8196670837378237\n    0.0028727977455195778\n    For Science: (note - statistic must be positive     in order for there to be significance.)\n    2.734488895919944\n    0.01425936325938158\n    ```", "```py\n    #import sklearn linear model package\n    import sklearn.linear_model as lm\n    # Construct a Linear Model that can predict math \n    #    scores from reading and science scores\n    y = data['Math']\n    x = data[['Science','Reading']]\n    model = lm.LinearRegression()\n    model.fit(x,y)\n    print(model.coef_)\n    print(model.intercept_)\n    ```", "```py\n    [1.02301989 0.0516567 ]\n    -38.99549267679242\n    ```", "```py\n    import matplotlib.pyplot as plt\n    from mpl_toolkits import mplot3d\n    import numpy as np\n    threedee = plt.figure().gca(projection='3d')\n    threedee.scatter(data['Science'], data['Reading'],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data['Math'])\n    threedee.set_xlabel('Science Score')\n    threedee.set_ylabel('Reading Score')\n    threedee.set_zlabel('Math Score')\n    xline = np.linspace(0, 600, 600)\n    yline = np.linspace(0, 600, 600)\n    zline = xline*1.02301989 + \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yline*0.0516567-38.99549267679242\n    threedee.plot3D(xline, yline, zline, 'red')\n    plt.show()\n    ```", "```py\n    from math import pi,sqrt,degrees\n    def v(theta):\n    \u00a0\u00a0\u00a0\u00a0r = (2*pi - theta)/(2*pi) \n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0h = sqrt(1-r**2)\n    \u00a0\u00a0\u00a0\u00a0return (1/3)*pi*r**2*h\n    ```", "```py\n    find_max_mins(v,0,6.28)\n    ```", "```py\n    Max/Min at x= 1.1529999999999838 y= 0.40306652536733706\n    ```", "```py\n    import random\n    from math import sin, cos,sqrt,pi\n    ```", "```py\n    def partial_d(f,u,v,w,num=10000):\n    \u00a0\u00a0\u00a0\u00a0\"\"\"returns the partial derivative of f\n    \u00a0\u00a0\u00a0\u00a0with respect to u at (v,w)\"\"\"\n    \u00a0\u00a0\u00a0\u00a0delta_u = 1/num\n    \u00a0\u00a0\u00a0\u00a0try:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if u == 'x':\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (f(v+delta_u,w) - f(v,w))/delta_u\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (f(v,w+delta_u) - f(v,w))/delta_u\n    \u00a0\u00a0\u00a0\u00a0except ValueError:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pass\n    ```", "```py\n    def min_of_surface(f,a,b,c,d,step = 0.01):\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0x,y = random.uniform(a,b),random.uniform(c,d)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0print(round(x,2),round(y,2),round(f(x,y),2))\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0for i in range(100000):\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dz_dx = partial_d(f,'x',x,y, 10000)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dz_dy = partial_d(f,'y',x,y, 10000)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if abs(dz_dx) < 0.001 and abs(dz_dy) < 0.001:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Minimum:\", round(x,2),round(y,2),round(f(x,y),2))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x -= dz_dx*step\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y -= dz_dy*step\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if x < a or x > b or y < c or y > d:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Out of Bounds\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0print(round(x,2),round(y,2),round(f(x,y),2))\n    ```", "```py\n    def surface(x,y):\n    \u00a0\u00a0\u00a0\u00a0return x**2 + y**2\n    ```", "```py\n    min_of_surface(surface,-5,5,-5,5)\n    ```", "```py\n    -1.55 2.63 9.29\n    Minimum: -0.0 0.0 0.0\n    ```", "```py\n    def surface(x,y):\n    \u00a0\u00a0\u00a0\u00a0return 3*cos(x)+5*x*cos(x)*cos(y)\n    min_of_surface(surface,-1,5,-1,5)\n    ```", "```py\n    -0.05 4.07 3.14\n    Minimum: 1.1 3.14 -1.13\n    ```", "```py\n    3.24 0.92 -12.8\n    Minimum: 3.39 0.0 -19.34\n    ```", "```py\n    for i in range(10):\n    \u00a0\u00a0\u00a0\u00a0min_of_surface(surface,-1,5,-1,5)\n    ```", "```py\n    1.62 4.65 -0.12\n    Out of Bounds\n    2.87 0.47 -15.24\n    Minimum: 3.39 0.0 -19.34\n    2.22 0.92 -5.91\n    Minimum: 3.39 0.0 -19.34\n    -0.78 -0.85 0.32\n    Out of Bounds\n    1.23 3.81 -0.61\n    Minimum: 1.1 3.14 -1.13\n    1.96 -0.21 -4.82\n    Minimum: 3.39 -0.0 -19.34\n    -0.72 3.0 4.93\n    Out of Bounds\n    2.9 -0.51 -15.23\n    Minimum: 3.39 -0.0 -19.34\n    1.73 -0.63 -1.58\n    Minimum: 3.39 -0.0 -19.34\n    2.02 2.7 2.63\n    Minimum: 1.1 3.14 -1.13\n    ```", "```py\n    from math import sqrt,sin,cos,e\n    def dx(t):\n    \u00a0\u00a0\u00a0\u00a0return 1 + 3*sin(t**2)\n    def dy(t):\n    \u00a0\u00a0\u00a0\u00a0return 15*cos(t**2)*sin(e**t)\n    ```", "```py\n    t = 0.0\n    while t<=1.5:\n    \u00a0\u00a0\u00a0\u00a0print(t,dy(t))\n    \u00a0\u00a0\u00a0\u00a0t += 0.05\n    ```", "```py\n    1.0000000000000002 3.3291911769931715\n    1.0500000000000003 1.8966982923409172\n    1.1000000000000003 0.7254255490661741\n    1.1500000000000004 -0.06119060343046955\n    1.2000000000000004 -0.3474047235245454\n    1.2500000000000004 -0.04252527324380706\n    1.3000000000000005 0.8982461584089145\n    1.3500000000000005 2.4516137491656442\n    1.4000000000000006 4.5062509856573225\n    1.4500000000000006 6.850332845507693\n    ```", "```py\n    def bin_search(f,lower,upper,target):\n    \u00a0\u00a0\u00a0\u00a0def average(a,b):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (a+b)/2\n    \u00a0\u00a0\u00a0\u00a0for i in range(40):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0avg = average(lower,upper)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0guess = f(avg)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if guess == target:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return guess\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if guess < target:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0upper = avg\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lower = avg\n    \u00a0\u00a0\u00a0\u00a0return avg\n    print(bin_search(dy,1.1,1.15,0))\n    ```", "```py\n    print(bin_search(dy,1.25,1.3,0))\n    ```", "```py\n    def position(x0,y0,t):\n    \u00a0\u00a0\u00a0\u00a0\"\"\"Calculates the height a projectile given the\n    \u00a0\u00a0\u00a0\u00a0initial height and velocity and the elapsed time.\"\"\"\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0inc = 0.001\n    \u00a0\u00a0\u00a0\u00a0elapsed = 0\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0vx,vy = dx(0),dy(0)\n    \u00a0\u00a0\u00a0\u00a0x,y = x0,y0\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0while elapsed <= t:\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vx,vy = dx(elapsed),dy(elapsed)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x += vx*inc\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y += vy*inc\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0elapsed += inc\n    \u00a0\u00a0\u00a0\u00a0return x,y\n    ```", "```py\n    times = [1.145,1.253]\n    for t in times:\n    \u00a0\u00a0\u00a0\u00a0print(t,position(-2,3,t))\n    ```", "```py\n    1.145 (0.4740617265786189, 15.338128944560578)\n    1.253 (0.9023867438757808, 15.313033269941062)\n    ```", "```py\n    def speed(t):\n    \u00a0\u00a0\u00a0\u00a0return sqrt(dx(t)**2+dy(t)**2)\n    speed(1.0)\n    ```", "```py\n    4.848195599011939\n    ```"]