["```py\nObject 1: Stephen : name = \"Stephen Hawking\", age= 56, hair_color= brown, eating, walking, sleeping\n\nObject 2: Albert: name = \"Albert Einstein\", age = 77, hair_color= black, eating, walking, sleeping\n```", "```py\n>>> [1,2,3].pop()\n3\n```", "```py\n>>> class Bike:\n        pass\n```", "```py\n>>> suzuki = Bike()\n>>> type(suzuki)\n<class '__main__.Bike'>\n```", "```py\n#class_ex_1.py\nclass Bike:\n    def ride_Left(self):\n        print(\"Bike is turning to left\")\n\n    def ride_Right(self):\n        print(\"Bike is turning to right\")\n\n    def Brake(self):\n        print(\"Breaking......\")\n\nsuzuki = Bike()\nsuzuki.ride_Left()\nsuzuki.Brake()\n\n>>> \nBike is turning to left\nBreaking......\n```", "```py\n>>> honda = Bike() #first instance\n>>> honda.ride_Right()\n Bike is turning to right\n\n >>> bmw = Bike() #second instance\n >>> bmw.Brake()\n Breaking......\n```", "```py\nclass Bike:\n     name = ''\n     color= ' '\n     price = 0\n\n     def info(self, name, color, price):\n         self.name = name\n         self.color = color\n         self.price = price\n         print(\"{}: {} and {}\".format(self.name,self.color,self.price))\n\n >>> suzuki = Bike()\n >>> suzuki.info(\"Suzuki\", \"Black\", 100000)\n Suzuki: Black and 100000\n```", "```py\nclass Bike:\n    def __init__(self,name,color,price):\n        self.name = name\n        self.color = color\n        self.price = price\n\n    def info(self):\n        print(\"{}: {} and {}\".format(self.name,self.color,self.price))\n\n>>> honda = Bike(\"Honda\", \"Blue\", 30000)\n>>> honda.info()\nHonda: Blue and 30000\n```", "```py\nclass Bike:\n    def __init__(self):\n        self.__updateTech()\n    def Ride(self):\n        print(\"Riding...\")\n    def __updateTech(self):\n        print(\"Updating your Bike..\")\n\n>>> honda = Bike()\nUpdating your Bike..\n>>> honda.Ride()\nRiding...\n>>> honda.__updateTech()\nAttributeError: 'Bike' object has no attribute '__updateTech'\n```", "```py\nclass Bike:\n    __name = \" \"\n    __color = \" \"\n    def __init__(self,name,color):\n        self.__name = name\n        self.__color = color\n    def info(self):\n        print(\"{} is of {} color\".format(self.__name,self.__color))\n\n>>> honda = Bike(\"Honda\", \"Black\")\n>>> honda.info()\nHonda is of Black color\n```", "```py\n>>> honda.__color = \"Blue\"\n>>> honda.info()\nHonda is of Black color\n```", "```py\nclass Bike:\n    __name = \" \"\n    __color = \" \"\n    def __init__(self,name,color):\n        self.__name = name\n        self.__color = color\n    def setNewColor(self, color):\n        self.__color = color\n    def info(self):\n        print(\"{} is of {} color\".format(self.__name,self.__color))\n\n>>> honda = Bike(\"Honda\", \"Blue\")\n>>> honda.info()\nHonda is of Blue color\n>>> honda.setNewColor(\"Orange\")\n>>> honda.info()\nHonda is of Orange color\n```", "```py\nclass Child_class(Parent_class):\n    <child-class-members>\n```", "```py\nclass Child_class(Base_class1, Base_class2, Base_class3 .....):\n    <child-class-members>\n```", "```py\nclass Bike:\n    def __init__(self):\n        print(\"Bike is starting..\")\n    def Ride(self):\n        print(\"Riding...\")\n\nclass Suzuki(Bike):\n    def __init__(self,name,color):\n        self.name = name\n        self.color = color\n    def info(self):\n        print(\"You are riding {0} and it's color is \n          {1}\".format(self.name,self.color))\n\n#Save above code in python file and Run it\n\n>>> suzuki = Suzuki(\"Suzuki\", \"Blue\")\n>>> suzuki.Ride()\nRiding...\n>>> suzuki.info()\nYou are riding Suzuki and it's color is Blue\n```", "```py\nclass Bike:\n    def __init__(self):\n        print(\"Bike is starting..\")\n    def Ride(self):\n        print(\"Riding...\")\n\nclass Suzuki(Bike):\n    def __init__(self,name,color):\n        self.name = name\n        self.color = color\n        super().__init__()\n\n>>> suzuki = Suzuki(\"Suzuki\", \"Blue\")\nBike is starting..\n```", "```py\nclass Mobile:\n    def __init__(self):\n        print(\"Mobile features: Camera, Phone, Applications\")\nclass Samsung(Mobile):\n    def __init__(self):\n        print(\"Samsung Company\")\n        super().__init__()\nclass Samsung_Prime(Samsung):\n    def __init__(self):\n        print(\"Samsung latest Mobile\")\n        super().__init__()\n\n>>> mobile = Samsung_Prime()\nSamsung latest Mobile\nSamsung Company\nMobile features: Camera, Phone, Applications\n```", "```py\n>>> len(1,2,3) #works with tuples\n3\n>>> len([1,2,3]) #works with lists\n3\n>>> len(\"abc\") #works with strings\n3\n```", "```py\nclass Bird:\n    def about(self):\n        print(\"Species: Bird\")\n    def Dance(self):\n        print(\"Not all but some birds can dance\")\n\nclass Peacock(Bird):\n    def Dance(self):\n        print(\"Peacock can dance\")\nclass Sparrow(Bird):\n    def Dance(self):\n        print(\"Sparrow can't dance\")\n\n>>> peacock = Peacock()\n>>> peacock.Dance()\nPeacock can dance\n>>> sparrow = Sparrow()\n>>> sparrow.Dance()\nSparrow can't dance\n>>> sparrow.about() #inheritance\nSpecies: Bird\n```", "```py\nimport curses\nfrom curses import KEY_RIGHT, KEY_LEFT, KEY_DOWN, KEY_UP\nfrom random import randint\n\nWIDTH = 35\nHEIGHT = 20\nMAX_X = WIDTH - 2\nMAX_Y = HEIGHT - 2\nSNAKE_LENGTH = 5\nSNAKE_X = SNAKE_LENGTH + 1\nSNAKE_Y = 3\nTIMEOUT = 100\n\nif __name__ == '__main__':\n    curses.initscr()\n    curses.beep()\n    curses.beep()\n    window = curses.newwin(HEIGHT, WIDTH, 0, 0)\n    window.timeout(TIMEOUT)\n    window.keypad(1)\n    curses.noecho()\n    curses.curs_set(0)\n    window.border(0)\n```", "```py\nclass Body(object):\n    def __init__(self, x, y, char='#'):\n        self.x = x\n        self.y = y\n        self.char = char\n\n    def coor(self):\n        return self.x, self.y\n```", "```py\nclass Snake:\n    REV_DIR_MAP = {\n        KEY_UP: KEY_DOWN, KEY_DOWN: KEY_UP,\n        KEY_LEFT: KEY_RIGHT, KEY_RIGHT: KEY_LEFT,\n    }\n\n    def __init__(self, x, y, window):\n        self.body_list= [] \n        self.timeout = TIMEOUT\n        for i in range(SNAKE_LENGTH, 0, -1):\n            self.body_list.append(Body(x - i, y))\n\n        self.body_list.append(Body(x, y, '0'))\n        self.window = window\n        self.direction = KEY_RIGHT\n        self.last_head_coor = (x, y)\n        self.direction_map = {\n            KEY_UP: self.move_up,\n            KEY_DOWN: self.move_down,\n            KEY_LEFT: self.move_left,\n            KEY_RIGHT: self.move_right\n        }\n\n```", "```py\nfor i in range(SNAKE_LENGTH, 0, -1):\n            self.body_list.append(Body(x - i, y))\n```", "```py\n      def add_body(self, body_list):\n              self.body_list.extend(body_list)\n```", "```py\n        def render(self):\n                    for body in self.body_list:\n                        self.window.addstr(body.y, body.x, body.char)\n```", "```py\n      if __name__ == '__main__':\n       #code from preceding topic\n       snake = Snake(SNAKE_X, SNAKE_Y, window)\n\n       while True:\n       window.clear()\n       window.border(0)\n       snake.render()\n```", "```py\ndef change_direction(self, direction):\n        if direction != Snake.REV_DIR_MAP[self.direction]:\n            self.direction = direction\n```", "```py\nclass Person:\n    def __init__(self,first,last):\n        self.first = first\n        self.last = last\n        self.email = '{0}.{1}@gmail.com'.format(self.first, self.last)\n\nper1 = Person('Ross', 'Geller')\nprint(per1.first)\nprint(per1.last)\nprint(per1.email)\n\n#output\nRoss\nGeller\nRoss.Geller@gmail.com\n```", "```py\nper1.first = \"Rachel\"\nprint(per1.first)\nprint(per1.email)\n\n#output\nRachel\nRoss.Geller@gmail.com\n```", "```py\nclass Person:\n    def __init__(self,first,last):\n        self.first = first\n        self.last = last\n\n    @property\n    def email(self):\n        return '{0}.{1}@gmail.com'.format(self.first,self.last)\n```", "```py\n>>> per1 = Person('Ross', 'Geller')\n>>> per1.first = \"Racheal\"\n>>> per1.email()\nRacheal.Geller@gmail.com\n```", "```py\n   @property\n    def head(self):\n        return self.body_list[-1]\n\n    @property\n    def coor(self):\n        return self.head.x, self.head.y\n```", "```py\n def update(self):\n        last_body = self.body_list.pop(0)\n        last_body.x = self.body_list[-1].x\n        last_body.y = self.body_list[-1].y\n        self.body_list.insert(-1, last_body)\n        self.last_head_coor = (self.head.x, self.head.y)\n        self.direction_map[self.direction]()\n```", "```py\nif __name__ == '__main__':\n    #code from preceding topic\n    #snake is object of Snake class\n    while True:\n        event = window.getch()\n         if event == 27:\n            break\n\n        if event in [KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT]:\n            snake.change_direction(event)\n\n          if event == 32:\n            key = -1\n            while key != 32:\n                key = window.getch()\n\n        snake.update()\n```", "```py\n#These functions are added inside the Snake class\n def move_up(self):\n        self.head.y -= 1\n        if self.head.y < 1:\n            self.head.y = MAX_Y\n\n    def move_down(self):\n        self.head.y += 1\n        if self.head.y > MAX_Y:\n            self.head.y = 1\n\n    def move_left(self):\n        self.head.x -= 1\n        if self.head.x < 1:\n            self.head.x = MAX_X\n\n    def move_right(self):\n        self.head.x += 1\n        if self.head.x > MAX_X:\n            self.head.x = 1\n```", "```py\n    @property\n    def collided(self):\n        return any([body.coor == self.head.coor\n                    for body in self.body_list[:-1]])\n```", "```py\nif __name__ == \"__main__\": while True:\n        #code from preceding topics\n        #snake is Snake class object\n        if snake.collided:\n            break\n```", "```py\nclass Food:\n    def __init__(self, window, char='&'):\n        self.x = randint(1, MAX_X)\n        self.y = randint(1, MAX_Y)\n        self.char = char\n        self.window = window\n\n    def render(self):\n        self.window.addstr(self.y, self.x, self.char)\n\n    def reset(self):\n        self.x = randint(1, MAX_X)\n        self.y = randint(1, MAX_Y)\n```", "```py\nif __name__ == '__main__':\n    food = Food(window, '*')\n    while True:\n        food.render()\n```", "```py\ndef eat_food(self, food):\n    food.reset()\n    body = Body(self.last_head_coor[0], self.last_head_coor[1])\n    self.body_list.insert(-1, body)\n```", "```py\nif __name__ == '__main__':\n#snake is object of Snake class\n#food is object of Food class\n    while True:\n        if snake.head.x == food.x and snake.head.y == food.y:\n            snake.eat_food(food)\n\ncurses.endwin()\n```", "```py\n      class Snake:\n          self.score = 0\n          @property\n          def score(self):\n              return 'Score : {0}'.format(self.score)\n```", "```py\n      def eat_food(self, food):\n          food.reset()\n          body = Body(self.last_head_coor[0], self.last_head_coor[1])\n          self.body_list.insert(-1, body)\n          self.score += 1\n```", "```py\n      while True:\n          window.addstr(0, 5, snake.score)\n```"]