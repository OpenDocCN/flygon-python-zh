- en: Hashing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希
- en: 'Hashing has two main purposes: the first is to put a fingerprint on a file
    so you can tell whether it has been altered, and the second is to conceal passwords
    so you can still recognize the correct password and enable login but a person
    who steals the hash cannot easily recover the password from it.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希有两个主要目的：第一个是在文件上放置一个指纹，以便您可以判断它是否已被更改，第二个是隐藏密码，以便您仍然可以识别正确的密码并启用登录，但是窃取哈希的人不能轻松地从中恢复密码。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: MD5 and SHA hashes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MD5和SHA哈希
- en: Windows password hashes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows密码哈希
- en: Linux password hashes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux密码哈希
- en: Challenge 1 – cracking Windows hashes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挑战1 - 破解Windows哈希
- en: Challenge 2 – cracking many-round hashes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挑战2 - 破解多轮哈希
- en: Challenge 3 – cracking Linux hashes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挑战3 - 破解Linux哈希
- en: MD5 and SHA hashes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MD5和SHA哈希
- en: 'After explaining what a hash function is, we will deal with MD5 and then the
    SHA family: SHA-1, SHA-2, and SHA-3\. We will also acquire a bit of information
    about cracking hashes.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释哈希函数是什么之后，我们将处理MD5，然后是SHA系列：SHA-1，SHA-2和SHA-3。我们还将获取一些关于破解哈希的信息。
- en: What are hashes?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希是什么？
- en: As mentioned earlier, one point of using hashes is to put a fingerprint on a
    file. You can take all the bytes in the file and combine them together with a
    hash algorithm, and this creates a fixed-links hash value. If you change any part
    of the file and recalculate the hash, you get a completely different value. So,
    the idea is that if you have two files that are supposed to be identical, you
    can calculate the hash of each file, and if the hash of both files match, then
    the files are identical.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，使用哈希的一个目的是在文件上放置一个指纹。您可以使用哈希算法将文件中的所有字节组合在一起，从而创建一个固定的哈希值。如果更改文件的任何部分并重新计算哈希，则会得到完全不同的值。因此，如果您有两个应该相同的文件，您可以计算每个文件的哈希值，如果两个文件的哈希值匹配，则文件相同。
- en: 'A very common hash is MD5; it''s been around for a couple of decades. It''s
    128 bits long, which is rather short for a hash function, and it''s reliable enough
    for most purposes. People use it to put a fingerprint on downloads, and malware
    samples, and all sorts of things, and they are also sometimes used to obscure
    passwords. It''s not a perfect hash function: there are some collisions known,
    and there are some algorithms that, at the expense of some computer time, can
    create collisions, which are pairs of files that hash to the same value. So, if
    you do find two files with MD5s that match, you do not know with complete certainty
    that they are identical files, but they usually are.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常常见的哈希是MD5；它已经存在了几十年。它的长度为128位，对于哈希函数来说相当短，对于大多数目的来说足够可靠。人们用它来对下载和恶意软件样本等进行指纹识别，有时也用于隐藏密码。它不是一个完美的哈希函数：已知有一些碰撞，并且有一些算法可以在一些计算时间的代价下创建碰撞，这些碰撞是哈希到相同值的文件对。因此，如果您找到两个具有匹配MD5的文件，您并不完全确定它们是相同的文件，但它们通常是。
- en: It's very easy to calculate them in Python. You just import the hash library
    and then proceed with the calculation. You call the hash library to create a new
    object. The first parameter is the algorithm used, which is MD5\. The second parameter
    is the contents of the data to be hashed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中计算它们非常容易。您只需导入哈希库，然后进行计算。您调用哈希库来创建一个新对象。第一个参数是使用的算法，即MD5。第二个参数是要进行哈希处理的数据的内容。
- en: Here, we will use `HELLO` as an example, and then you need to use the hex-digest
    at the end or it will just print an address to the data structure instead of showing
    you the actual value. We will use the hash of `HELLO`, MD5, and a hexadecimal
    and it is 128 bits long. So, that's 128 over 4, or 32, hexadecimal characters,
    and if you add another character to the `HELLO`, like an exclamation point the
    hash changes completely; there's no resemblance between the hash of one value
    and the hash of the next.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用`HELLO`作为示例，然后您需要在末尾使用十六进制摘要，否则它将只打印数据结构的地址，而不是显示实际值。我们将使用`HELLO`的哈希，MD5和十六进制，它有128位长。因此，这是128除以4，或32个十六进制字符，如果您向`HELLO`添加另一个字符，比如感叹号，哈希将完全改变；一个值的哈希与下一个值的哈希之间没有任何相似之处。
- en: The **Secure Hash Algorithm** (**SHA**) was designed to be an improvement on
    MD5, and SHA-1 had no collisions until about a year ago, when some researchers
    at Google Inc. found out how to make collisions in SHA-1, so careful people are
    switching to SHA-2\. There is another algorithm approved by the **National Institute
    of Standards**, called **SHA-3**, which almost nobody is using because as far
    as anyone expects, SHA-2 will remain secure for a very long time to coms. But,
    if something were to happen to compromise SHA-2, SHA-3 will be available for us
    to use. Both SHA-2 and SHA-3 have various lengths, but the most common lengths
    are 256 and 512 bits.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全哈希算法**（**SHA**）旨在改进MD5，直到大约一年前，SHA-1没有发生碰撞，当时一些谷歌公司的研究人员发现了如何在SHA-1中发生碰撞，因此谨慎的人们正在转向SHA-2。还有另一个由**国家标准技术研究所**批准的算法，称为**SHA-3**，几乎没有人使用，因为据所有人的预期，SHA-2将在很长一段时间内保持安全。但是，如果发生了危及SHA-2的情况，SHA-3将可供我们使用。SHA-2和SHA-3都有各种长度，但最常见的长度是256和512位。'
- en: 'You can calculate SHA-1 and SHA-2 hashes easily in Python, but SHA-3 is not
    commonly used and it''s not part of this hash library yet. So, if you use SHA-1
    for the algorithm, you get a SHA-1 hash. It looks like an MD5 hash, but it''s
    longer. Then there are SHA-256 and SHA-512, which are both SHA-2 hashes. You can
    see that, although they''re more secure, they are much longer and somewhat less
    convenient:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Python中轻松计算SHA-1和SHA-2哈希，但SHA-3并不常用，它还不是这个哈希库的一部分。因此，如果您使用SHA-1算法，您将得到一个SHA-1哈希。它看起来像MD5哈希，但更长。然后有SHA-256和SHA-512，它们都是SHA-2哈希。您可以看到，尽管它们更安全，但它们更长，而且有些不太方便：
- en: '![](../images/00043.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00043.jpeg)'
- en: So, let's take a look.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们来看看。
- en: 'Open the Terminal and execute the `python` command to start the Python Terminal:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并执行`python`命令以启动Python终端：
- en: '![](../images/00044.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00044.jpeg)'
- en: 'You can then run the following commands:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以运行以下命令：
- en: '![](../images/00045.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00045.jpeg)'
- en: 'You have to import `hashlib`. Then, you can add `hashlib.new`. The first parameter
    is the algorithm, which is `md5`, in this case. The next parameter is the data
    to hash, which is `HELLO`, and then `hexdigest` is added to see the hexadecimal
    value. So, there''s the hash of `HELLO`, and if we put another character at the
    end such that it reads `HELLOa`, then we get a completely different answer:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须导入`hashlib`。然后，您可以添加`hashlib.new`。第一个参数是算法，这种情况下是`md5`。下一个参数是要进行哈希的数据，这里是`HELLO`，然后添加`hexdigest`以查看十六进制值。所以，这是`HELLO`的哈希，如果我们在末尾添加另一个字符，使其变成`HELLOa`，那么我们会得到一个完全不同的答案。
- en: '![](../images/00046.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00046.jpeg)'
- en: 'If we want to use a different algorithm, we can just put in SHA-1:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用不同的算法，我们只需输入SHA-1：
- en: '![](../images/00047.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00047.jpeg)'
- en: 'Now we get a long hash, and, if we add `sha256` as character, we get an even
    longer hash:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到了一个很长的哈希值，如果我们添加`sha256`作为字符，我们会得到一个更长的哈希值：
- en: '![](../images/00048.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00048.jpeg)'
- en: These are enough hashes for almost any purpose.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些哈希对于几乎任何目的都足够了。
- en: If you have the hash value of something and you want to calculate the data it
    came from, in principle, there is not a unique solution. In practice, though,
    for short objects like passwords, there is. So, if someone uses an `MD5` function
    to obscure a password, which is done by some old web applications, then you can
    reverse it by guessing passwords until you find a match. There is no mathematical
    way to undo a hash function, so you just have to make a library. In the example
    of the `MD5` hash of `HELLO`, if you just made a series of guesses, you'd get
    the right answer. That's how hash cracking works; it's not a complicated idea,
    it's just kind of inconvenient.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有某物的哈希值，并且想要计算它来自哪些数据，原则上，这并没有唯一的解决方案。不过，在实践中，对于像密码这样的短对象，是有的。因此，如果有人使用`MD5`函数来隐藏密码，这是一些旧的Web应用程序所做的，那么您可以通过猜测密码来反转它，直到找到匹配项。没有数学方法可以撤消哈希函数，因此您只需制作一个库。在`MD5`哈希`HELLO`的示例中，如果您只是进行一系列猜测，您将得到正确的答案。这就是哈希破解的工作原理；这不是一个复杂的想法，只是有点不方便。
- en: 'We can take the MD5 hash of `HELLO` and keep guessing:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以获取`HELLO`的MD5哈希并继续猜测：
- en: '![](../images/00049.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00049.jpeg)'
- en: If we were guessing words, we might have to guess millions of words to get down
    to the value shown, but if we are able to guess the right value, we'll know it's
    right when the hash matches. The only thing that determines the difficulty of
    this is how many hashes you can calculate per second, and MD5 and the SHA family
    are designed to calculate very fast, so you could actually try millions of passwords
    per second with them. In the next section, we'll talk about Windows password hashes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在猜测单词，可能需要猜测数百万个单词才能得到所示的值，但是如果我们能够猜到正确的值，当哈希值匹配时，我们就知道它是正确的。这个的难度取决于您每秒可以计算多少个哈希值，而MD5和SHA系列都设计为非常快速计算，因此您实际上可以尝试数百万个密码。在下一节中，我们将讨论Windows密码哈希。
- en: Windows password hashes
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows密码哈希
- en: In this section, we will see how to get hashes with Cain and then how MD4 and
    Unicode work. Then, we'll discuss cracking hashes with Google and cracking hashes
    with wordlists.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用Cain获取哈希，然后了解MD4和Unicode的工作原理。然后，我们将讨论如何使用Google破解哈希和如何使用单词列表破解哈希。
- en: Getting hashes with Cain
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cain获取哈希
- en: 'Cain is a free hacking tool that can harvest Windows hashes from a running
    operating system. In order to test it, we''ll make three accounts on Windows Server,
    the very latest version of the Windows operating system. You can use the user
    command at the Command Prompt to do this. You can add a user named `John` with
    a password `P@sw0rd`, a user named `Paul` with a password, and a user named `Ringo`
    with password `P@sw0rd999`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Cain是一个免费的黑客工具，可以从正在运行的操作系统中收集Windows哈希。为了测试它，我们将在Windows Server上创建三个帐户，这是Windows操作系统的最新版本。您可以使用命令提示符中的用户命令来执行此操作。您可以添加一个名为`John`的用户，密码为`P@sw0rd`，一个名为`Paul`的用户，密码为`P@sw0rd`，以及一个名为`Ringo`的用户，密码为`P@sw0rd999`：
- en: '![](../images/00050.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00050.jpeg)'
- en: 'If you run Cain, it can harvest the hashes. The following screenshot shows
    the three users and their hashes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行Cain，它可以收集哈希。以下屏幕截图显示了三个用户及其哈希值：
- en: '![](../images/00051.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00051.jpeg)'
- en: 'The LM Hash section is an obsolete system that is no longer used by any version
    of Windows, so it just contains a dummy value that has no information. The actual
    hash used by Windows when you log in is called the NT Hash. Notice that if two
    users have the same password, they have exactly the same hash: a `464` value.
    That is one of the weaknesses in this system. It is a very weak and old password
    system, unfortunately.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: LM Hash部分是一个已经不再被任何Windows版本使用的过时系统，因此它只包含一个没有信息的虚拟值。当您登录时Windows实际使用的哈希称为NT
    Hash。请注意，如果两个用户使用相同的密码，它们将具有完全相同的哈希值：`464`值。这是该系统的一个弱点。不幸的是，这是一个非常薄弱且陈旧的密码系统。
- en: MD4 and Unicode
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MD4和Unicode
- en: 'Here''s the algorithm Microsoft uses. It takes the password and encodes in
    Unicode instead of ASCII, and then when you run it through MD4 (which is a very
    old algorithm, even older than MD5), it produces the NT hash value:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Microsoft使用的算法。它将密码编码为Unicode而不是ASCII，然后当您通过MD4运行它（这是一个非常古老的算法，甚至比MD5还要古老），它会产生NT哈希值：
- en: '![](../images/00052.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00052.jpeg)'
- en: The reason Unicode is used is because Microsoft is an international operating
    system that allows you to have passwords in languages such as Chinese and Japanese
    that do not encode with 8-bits per character but 16-bits per character.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Unicode的原因是因为Microsoft是一个国际操作系统，允许您使用中文和日文等语言的密码，这些语言不是每个字符使用8位编码，而是每个字符使用16位编码。
- en: Cracking hashes with Google
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google破解哈希
- en: 'Since password hashes have no variation and any two users with the same password
    will have the same hash, all the hackers that had cracked wordlists for the last
    24 years have put their results on the internet, resulting in a situation where
    you can just Google frequently used password hashes:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于密码哈希没有变化，任何两个具有相同密码的用户将具有相同的哈希，过去24年来已经破解了单词列表的所有黑客都将他们的结果放在了互联网上，导致了这样一种情况：你可以直接谷歌经常使用的密码哈希：
- en: '![](../images/00053.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00053.jpeg)'
- en: If you just put a hash into Google, you'll often find that somebody has already
    cracked it for you and put on the internet. For instance, here's this one `P@sw0rd`
    that's got a known result, so you can crack it. That simple method works for a
    great many passwords but this technique does not work for the password, we used
    for the user `Ringo`, which is `P@sw0rd999`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是把一个哈希放到谷歌上，你经常会发现有人已经为你破解了并放在了互联网上。例如，这里有一个`P@sw0rd`，已经有一个已知的结果，所以你可以破解它。这种简单的方法适用于很多密码，但这种技术对于我们用于用户`Ringo`的密码`P@sw0rd999`不起作用。
- en: Cracking hashes with wordlists
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单词列表破解哈希
- en: 'So, in a case where the passwords cannot be cracked, you need to calculate
    it yourself:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在密码无法破解的情况下，你需要自己计算：
- en: '![](../images/00054.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00054.jpeg)'
- en: You just use the same procedure. Make a series of guesses, hash them, and hunt
    for your answer. If your list of guesses does eventually hit the right value,
    you'll of course find it here. So, you can see the password `P@sw0rd999` with
    `5c2c...`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需使用相同的过程。进行一系列的猜测，对它们进行哈希，然后寻找你的答案。如果你的猜测列表最终达到正确的值，你当然会在这里找到它。因此，你可以看到密码`P@sw0rd999`的`5c2c...`。
- en: It's very simple, so let's give it a try in Python.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，所以让我们在Python中试一试。
- en: 'In the Terminal window, we''ll enter the `python` command. Next we''ll import
    the `hashlib` library:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，我们将输入`python`命令。接下来我们将导入`hashlib`库：
- en: '![](../images/00055.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00055.jpeg)'
- en: Thus, you can see the line that does the encoding. We put in the password, encode `utf-16le`,
    which is the Unicode; then, we hash it with MD4 and express it as `hexdigest`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以看到进行编码的行。我们输入密码，编码为`utf-16le`，这是Unicode；然后，我们用MD4进行哈希，并将其表示为`hexdigest`。
- en: 'That''s number for `P@sw0rd`. Now, if we try to get to the `Ringo` user, we
    need to have a list of two hashes to try, which will need to have some values
    that eventually reach the right value:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`P@sw0rd`的数字。现在，如果我们尝试访问`Ringo`用户，我们需要有一个包含两个哈希值的列表，这些值最终需要达到正确的值：
- en: '![](../images/00056.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00056.jpeg)'
- en: If we are just counting up sequentially using `997`, `998`, and `999`, we'll
    get that `5c2c...` value that we are looking for.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只是按顺序使用`997`，`998`和`999`进行计数，我们将得到我们正在寻找的`5c2c...`值。
- en: Linux password hashes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux密码哈希
- en: In this section, we will first discuss how to get the hashes from an operating
    system, and then look at the salting and stretching procedures that make Linux
    hashes much stronger. We will then discuss the specific hashing algorithm used
    by modern versions of Linux, and finally look at cracking hashes with wordlists
    and Python.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先讨论如何从操作系统中获取哈希值，然后看看加盐和拉伸过程是如何使Linux哈希值更加安全的。然后我们将讨论现代版本的Linux使用的特定哈希算法，最后看看如何使用单词列表和Python破解哈希。
- en: 'Here, we have created three users to test the software in much the same way
    as we did earlier on Windows. `John` and `Paul` have the same password and `Ringo` has
    a different password:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了三个用户来测试软件，方式与我们之前在Windows上做的方式类似。`John`和`Paul`有相同的密码，而`Ringo`有不同的密码：
- en: '![](../images/00057.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00057.jpeg)'
- en: You get the hashes from the `/etc/shadow` file, from which we will print out
    the last three records. So, you will see `John`, `Paul`, and `Ringo`, and after
    each username comes `$6`, which indicates that it is a type 6 of password, which
    is the most modern and secure form. Then there is a long, random string of characters
    that goes up to the next dollar sign, and then an even longer random string of
    characters, which is the password hash itself.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从`/etc/shadow`文件中获取哈希值，从中我们将打印出最后三条记录。因此，你会看到`John`，`Paul`和`Ringo`，每个用户名后面都跟着`$6`，这表明它是密码的第6种类型，这是最现代和安全的形式。然后是一长串随机字符，直到下一个美元符号，然后是一个更长的随机字符串，这就是密码哈希本身。
- en: The first thing you can see is the password hash, which is much longer and more
    complicated than the Windows password hash. The next thing to observe is that
    even though `John` and `Paul` have the same password, they have completely different
    hashes, because it adds a random `salt` to each one before hashing them in order
    to obscure the fact that these passwords are the same, making the passwords much
    stronger. Salting is the procedure of adding random characters before hashing;
    stretching is also employed here. Instead of just using one round of MD4, it uses
    5,000 rounds of SHA-512, which simply makes it take much more CPU time to calculate
    the hash. The point of this is to slow down attackers who are trying to make dictionaries
    of password hashes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到的第一件事是密码哈希，它比Windows密码哈希要长得多，更复杂。接下来要观察的是，即使`John`和`Paul`有相同的密码，它们的哈希完全不同，因为在对它们进行哈希之前，它们会添加一个随机的`salt`，以掩盖这些密码是相同的事实，从而使密码更加安全。加盐是在进行哈希之前添加随机字符的过程；这里也使用了拉伸。它不仅仅使用一轮MD4，而是使用了5000轮SHA-512，这简单地使得计算哈希需要更多的CPU时间。这样做的目的是减缓试图制作密码哈希字典的攻击者的速度。
- en: 'You can find the details of the method in the `/etc/login.defs` file, which
    shows you that modern versions of Linux using crypt methods `SHA51`2 and `5000`
    rounds:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`/etc/login.defs`文件中找到该方法的详细信息，该文件显示现代版本的Linux使用`SHA512`和`5000`轮的加密方法：
- en: '![](../images/00058.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00058.jpeg)'
- en: Thus, the procedure requires you to combine `salt` with the password. You perform
    an algorithm that includes 5,000 rounds of SHA-512 hashing. It actually has more
    than 20 steps that involve taking two hashes together and mixing the bits together,
    but it's a little more complicated than just repeating the same hash algorithm
    over and over.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，该过程要求你将`salt`与密码结合起来。你执行一个包括5000轮SHA-512哈希的算法。它实际上有超过20个步骤，涉及将两个哈希值放在一起并混合位，但它比仅仅重复相同的哈希算法要复杂一些。
- en: 'We''ll use the `passlive` library. Before using it in Python, you have to install
    it with the `pip install passlib` command. Once you''ve got it, you can import
    the `sha512_crypt` module. Here''s how you use it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`passlive`库。在Python中使用它之前，你必须使用`pip install passlib`命令进行安装。一旦你安装好了，你就可以导入`sha512_crypt`模块。以下是你如何使用它：
- en: '![](../images/00059.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00059.jpeg)'
- en: Let's start the Python Terminal. Then we can import the `passlib` library as
    shown earlier, because we've already put it in `pip install`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始Python终端。然后我们可以像之前展示的那样导入`passlib`库，因为我们已经将其放入`pip install`中。
- en: Now, we can calculate the first one, which will use the `salt` value from the
    shadow file and hash it, as shown in the previous screenshot.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以计算第一个，它将使用影子文件中的`salt`值并对其进行哈希，如前面的屏幕截图所示。
- en: 'As you can see, we get the correct results (starting `r7k`). And, if we were
    doing a dictionary attack, we would have a series of password guesses as shown:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们得到了正确的结果（以`r7k`开头）。如果我们进行字典攻击，我们将得到一系列密码猜测，如下所示：
- en: '![](../images/00060.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00060.jpeg)'
- en: It's just a question of trying them until you get the one that matches.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 只需尝试它们，直到找到与之匹配的那个。
- en: Challenge 1 – cracking Windows hashes
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战1 – 破解Windows哈希
- en: 'After a review of Windows hashing and an example of 1-digit hashing, we will
    give you two challenges—one with a 2-digit password and one with a 7-digit password.
    Here''s how Windows hashes look in Python:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在对Windows哈希进行审查和进行1位数哈希的示例之后，我们将给你两个挑战——一个是2位数密码，另一个是7位数密码。以下是Python中Windows哈希的样子：
- en: '![](../images/00061.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00061.jpeg)'
- en: The algorithm uses `hashlib` to do an MD4 for the hash of the password, but
    before you do that, encode in Unicode which is `utf-16le`, and then calculate
    the `hexdigest` of the results to get the long number, The number starts with
    `464`, in this case, which is a Windows password hash.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法使用`hashlib`对密码的哈希进行MD4，但在此之前，将其编码为`utf-16le`，然后计算结果的`hexdigest`以获得长数字，该数字以`464`开头，在这种情况下，这是一个Windows密码哈希。
- en: 'Thus, you can write a program that will try all the characters in this string,
    which will consist of 10 digits, and then calculate the hash for each one of them.
    You will be left with a simple dictionary with 10 values:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以编写一个程序，尝试这个字符串中的所有字符，它将由10个数字组成，然后计算每个字符的哈希。你将得到一个简单的包含10个值的字典：
- en: '![](../images/00062.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00062.jpeg)'
- en: 'You can crack this 1-digit hash using a 1-digit password as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一个1位数密码来破解这个1位数哈希，方法如下：
- en: '![](../images/00063.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00063.jpeg)'
- en: 'So, here''s a challenge. The password is a 2-digit one between 00 and 99, and
    this is the hash:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是一个挑战。密码是00到99之间的2位数，这是哈希：
- en: '![](../images/00064.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00064.jpeg)'
- en: So, you have to make a loop that tries 100 possible values.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你需要创建一个循环，尝试100个可能的值。
- en: 'The next one is a 7-digit password, and this is the hash:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个7位数密码，这是哈希：
- en: '![](../images/00065.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00065.jpeg)'
- en: So, you'll have to try 10 million values. That will only take a few seconds,
    and that's why Windows password hashes are so very weak—you can try many millions
    of them per second.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你将不得不尝试1000万个值。这只需要几秒钟，这就是为什么Windows密码哈希非常薄弱——你可以每秒尝试数百万个。
- en: Challenge 2 – cracking many-round hashes
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战2 – 破解多轮哈希
- en: After a review of how MD5 and SHA work in Python, we will see what a many round
    hash is, and then you will get two challenges to solve.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查了Python中MD5和SHA的工作原理之后，我们将看到多轮哈希是什么，然后你将得到两个挑战来解决。
- en: 'MD5 and SHA are both easy to calculate:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: MD5和SHA都很容易计算：
- en: '![](../images/00066.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00066.jpeg)'
- en: From the `hashlib` library, you just need to use the `hashlib.new` method and
    put the name of the algorithm in the first parameter, the password in the second
    parameter, and then add the hex-digest to it to see the actual result in hexadecimal
    instead of just an address to the object. To do many rounds, you just repeat that
    process.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从`hashlib`库中，你只需要使用`hashlib.new`方法，并将算法的名称放在第一个参数中，密码放在第二个参数中，然后将十六进制摘要添加到其中，以便看到十六进制的实际结果，而不仅仅是对象的地址。要进行多轮，你只需重复该过程。
- en: 'You need to put the password in `h` and then use the current `h`, to calculate
    the next `h` and repeat this over and over and over. Here''s a little script that
    prints out the first `10` rounds of a multi-round MD5 hash:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将密码放入`h`，然后使用当前的`h`来计算下一个`h`，并一遍又一遍地重复这个过程。以下是一个打印多轮MD5哈希的前10轮的小脚本：
- en: '![](../images/00067.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00067.jpeg)'
- en: This technique is called **stretching**, and it's used by stronger password
    hashing routines, such as the Linux password hashes that we've seen in previous
    sections.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术称为**拉伸**，它被更强大的密码哈希例程所使用，比如我们在前面部分看到的Linux密码哈希。
- en: 'Here''s your first challenge: a 3-digit password hashed 100 times with MD5\.
    Find it from this hash:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的第一个挑战：一个3位数密码使用MD5哈希100次。从这个哈希中找到它：
- en: '![](../images/00068.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00068.jpeg)'
- en: Here's another challenge for you. In this one, you have an unknown number of
    rounds with SHA-1, but it's not more than 5,000\. So, you just have to try all
    values and find the 3-digit password of the results in this hash.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个挑战。在这个挑战中，你有一个未知轮数的SHA-1，但不超过5000。因此，你只需尝试所有值，并从这个哈希中找到结果的3位数密码。
- en: Challenge 3 – cracking Linux hashes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战3 – 破解Linux哈希
- en: After a review of Linux hashes, we'll show you your challenge.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查了Linux哈希之后，我们将向你展示你的挑战。
- en: 'Linux hashes are salted and stretched, and there are various versions of them.
    We are covering the current version, which is version 6, that is, the most secure
    form:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Linux哈希是经过盐处理和拉伸的，有各种版本。我们正在讨论当前版本，即版本6，也就是最安全的形式：
- en: '![](../images/00069.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00069.jpeg)'
- en: The hash is a long string starting with the dollar sign; the `6` indicates the
    version, then you have a dollar sign followed by `salt`, and another dollar sign
    followed by the hash. To calculate them in Python, you need to import a special
    SHA-512 `crypt` library, as you use the format shown earlier.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希是以美元符号开头的长字符串；`6`表示版本，然后是一个美元符号，后面跟着`salt`，再加一个美元符号，后面是哈希。要在Python中计算它们，您需要导入一个特殊的SHA-512
    `crypt`库，就像您之前看到的格式一样。
- en: 'Here''s your third challenge: a 3-digit password in this format. The `salt` value
    is `penguins` and the `hash` is this long mess starting with a `P` instance.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的第三个挑战：以这种格式的3位密码。`salt`值为`penguins`，`hash`是以`P`开头的一长串混乱字符。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the MD5 and SHA-1 hashing algorithms, the Windows
    password hashing algorithm, and the Linux password hashing algorithm. In the challenges,
    you cracked a Windows password hash to recover a plaintext password, and another
    password hash using an unknown number of MD5 and SHA-1 rounds. Finally, you cracked
    the Linux password hashes to recover the plaintext password.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了MD5和SHA-1哈希算法，Windows密码哈希算法和Linux密码哈希算法。在挑战中，您破解了一个Windows密码哈希以恢复明文密码，以及使用未知数量的MD5和SHA-1轮次破解了另一个密码哈希。最后，您破解了Linux密码哈希以恢复明文密码。
- en: In [Chapter 3](part0048.html#1DOR00-6963dc2081804897894c8854b7cc74fd), *Strong
    Encryption*, we will cover two main methods of strong encryption, that is, AES
    and RSA.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](part0048.html#1DOR00-6963dc2081804897894c8854b7cc74fd)，*强加密*中，我们将介绍两种主要的强加密方法，即AES和RSA。
