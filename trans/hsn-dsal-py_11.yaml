- en: Selection Algorithms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择算法
- en: One interesting set of algorithms related to finding elements in an unordered
    list of items is selection algorithms. Given a list of elements, selection algorithms
    are used to find the `ith` smallest element from the list. In doing so, we shall
    be answering questions that have to do with selecting the median of a set of numbers
    and selecting the `i^(th)` smallest or largest element in a list.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与在无序项目列表中查找元素相关的一组有趣的算法是选择算法。给定一个元素列表，选择算法用于从列表中找到第i个最小元素。在这样做的过程中，我们将回答与选择一组数字的中位数和在列表中选择第i个最小或最大元素有关的问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Selection by sorting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序选择
- en: Randomized selection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机选择
- en: Deterministic selection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定性选择
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All of the source code that''s used in this chapter is provided in the given
    GitHub link: [https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Python-Second-Edition/tree/master/Chapter11](https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Python-Second-Edition/tree/master/Chapter11).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有源代码都在以下GitHub链接中提供：[https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Python-Second-Edition/tree/master/Chapter11](https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Python-Second-Edition/tree/master/Chapter11)。
- en: Selection by sorting
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序选择
- en: Items in a list may undergo statistical inquiries such as finding the mean,
    median, and mode values. Finding the mean and mode values does not require the
    list to be ordered. However, to find the median in a list of numbers, the list
    must first be ordered. Finding the median requires you to find the element in
    the middle position of the ordered list. In addition, this can be used when we
    want to find the last-smallest item in the list or the first-smallest item in
    the list. In such situations, selection algorithms can be useful.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的项目可能会接受统计调查，比如找到平均值、中位数和众数。找到平均值和众数并不需要列表被排序。然而，要在数字列表中找到中位数，列表必须首先被排序。找到中位数需要你找到有序列表中间位置的元素。此外，当我们想要找到列表中最后最小的项目或者第一个最小的项目时，可以使用选择算法。
- en: To find the `i^(th)` smallest number in an unordered list of items, the index
    of where that item occurs is important to obtain. Since the elements of the list
    are not sorted, it is difficult to know whether the element at index 0 in a list
    is really the first-smallest number.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要在无序项目列表中找到第i个最小数，获取该项目出现的索引是很重要的。由于列表的元素没有排序，很难知道列表中索引为0的元素是否真的是第一个最小数。
- en: A pragmatic and obvious thing to do when dealing with unordered lists is to
    first sort the list. After the list is sorted, you can rest assured that the element
    at the 0 index will hold the first-smallest element in the list. Likewise, the
    last element in the list will hold the last-smallest element in the list. However,
    it is not a good solution to apply a sorting algorithm on a long list of elements
    to obtain the minimum or maximum value from the list as sorting is quite an expensive
    operation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 处理无序列表时一个实用且明显的做法是首先对列表进行排序。在列表排序后，你可以放心地认为索引为0的元素将持有列表中的第一个最小元素。同样，列表中的最后一个元素将持有列表中的最后一个最小元素。然而，在长列表中应用排序算法来获取列表中的最小值或最大值并不是一个好的解决方案，因为排序是一个非常昂贵的操作。
- en: Let's discuss if it's possible to find the `i^(th)` smallest element without
    having to sort the list in the first place.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下是否可能在不排序列表的情况下找到第i个最小元素。
- en: Randomized selection
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机选择
- en: 'In the previous chapter, we discussed the quicksort algorithm. The quicksort
    algorithm allows us to sort an unordered list of items, but has a way of preserving
    the index of elements as the sorting algorithm runs. Generally speaking, the quicksort
    algorithm does the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们讨论了快速排序算法。快速排序算法允许我们对无序项目列表进行排序，但在排序算法运行时保留元素索引的方法。一般来说，快速排序算法执行以下操作：
- en: Selects a pivot
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个主元素
- en: Partitions the unsorted list around the pivot
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 围绕主元素对未排序的列表进行分区
- en: Recursively sorts the two halves of the partitioned list using *steps 1* and
    *2*
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*步骤1*和*步骤2*递归地对分区列表的两半进行排序
- en: One interesting and important fact is that after every partitioning step the
    index of the pivot will not change, even after the list has become sorted. This
    means that after each iteration the selected pivot value will be placed at its
    correct position in the list. It is this property that enables us to be able to
    work with a not-so-fully sorted list to obtain the `i^(th)` smallest number. Because
    randomized selection is based on the quicksort algorithm, it is generally referred
    to as quick select.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣且重要的事实是，在每次分区步骤之后，主元素的索引不会改变，即使列表已经排序。这意味着在每次迭代后，所选的主元素值将被放置在列表中的正确位置。正是这个属性使我们能够在一个不太完全排序的列表中获得第i个最小数。因为随机选择是基于快速排序算法的，它通常被称为快速选择。
- en: Quick select
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速选择
- en: The quickselect algorithm is used to obtain the `k^(th)` smallest element in
    an unordered list of items, and is based on the quicksort algorithm. In quicksort,
    we recursively sort the elements of both the sublists from the pivot point. In quicksort,
    in each iteration, we know that the pivot value reaches its correct position in
    the list with two sublists (left and right sublists), having all of their elements
    set to be unordered.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 快速选择算法用于获取无序项目列表中的第k个最小元素，并基于快速排序算法。在快速排序中，我们递归地对主元素的两个子列表进行排序。在快速排序中，每次迭代中，我们知道主元素值达到了正确的位置，两个子列表（左子列表和右子列表）的所有元素都被设置为无序。
- en: 'However, in the case of the quickselect algorithm, we recursively call the
    function exclusively for the sublist that has the `k^(th)` smallest element. In
    the quickselect algorithm, we compare the index of the pivot point with the `k` value
    to obtain the `k^(th)` smallest element from the given unordered list. There will
    be three cases in the quickselect algorithm, and they are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在快速选择算法中，我们递归地调用函数，专门针对具有第`k`小元素的子列表。在快速选择算法中，我们将枢轴点的索引与`k`值进行比较，以获取给定无序列表中的第`k`小元素。快速选择算法中将会有三种情况，它们如下：
- en: If the index of the pivot point is smaller than `k`, then we are sure that the
    `k^(th)` smallest value will be present in the right sublist from the pivot point.
    So, we only recursively call the quickselect function for the right sublist.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果枢轴点的索引小于`k`，那么我们可以确定第`k`小的值将出现在枢轴点右侧的子列表中。因此，我们只需递归地调用快速选择函数来处理右子列表。
- en: If the index of the pivot point is greater than `k`, then it is obvious that
    the `k^(th)` smallest element will be present in the left side from the pivot
    point. So, we only recursively look for the `i^(th)` element in the left sublist.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果枢轴点的索引大于`k`，那么很明显第`k`小的元素将出现在枢轴点左侧。因此，我们只需递归地在左子列表中寻找第`i`个元素。
- en: If the index of the pivot point is equal to `k`, then it means that we have
    found out the `k^(th)` smallest value, and we return it.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果枢轴点的索引等于`k`，那么意味着我们已经找到了第`k`小的值，并将其返回。
- en: Let's understand how the quickselect algorithm work by looking at an example.
    Let's consider a list of elements, `{45, 23, 87, 12, 72, 4, 54, 32, 52}`, where
    want to find out the 3^(rd) smallest element from this list—we do this by using
    the quicksort algorithm.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解快速选择算法的工作原理。假设有一个元素列表`{45, 23, 87, 12, 72, 4, 54, 32, 52}`，我们想要找出这个列表中第3个最小的元素——我们通过使用快速排序算法来实现这一点。
- en: We start the algorithm by selecting a pivot value, that is, 45\. After the first
    iteration of the algorithm, we place the pivot value to its correct position in
    the list, that is, at index 4 (the index is starting from 0). Now, we compare
    the index of the pivot value (that is, 4 ) with the value of `k` (that is, 3^(rd)
    position, or at index 2). Since this is at the `k<pivot` point (that is, 2<4),
    we only consider the left sublist, and recursively call the function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过选择一个枢轴值，即45，来开始算法。在算法的第一次迭代之后，我们将枢轴值放置在列表中的正确位置，即索引4（索引从0开始）。现在，我们将枢轴值的索引（即4）与`k`的值（即第3个位置，或索引2）进行比较。由于这是在`k<枢轴`点（即2<4），我们只考虑左子列表，并递归调用函数。
- en: Now, we take the left sublist and select the pivot point (that is, **4**). After
    the run, the **4** is placed at its correct position (that is, the 0^(th) index).
    As the index of the pivot is less than the value of `k`, we consider the right
    sublist. Similarly, we take **23** as the pivot point, which is also placed at its
    correct position. Now, when we compare the index of the pivot point and the value
    of `k`, they are equal, which means we have found the 3^(rd) smallest element,
    and it will be returned.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们取左子列表并选择枢轴点（即**4**）。运行后，**4**被放置在其正确的位置（即0索引）。由于枢轴的索引小于`k`的值，我们考虑右子列表。同样，我们将**23**作为枢轴点，它也被放置在了正确的位置。现在，当我们比较枢轴点的索引和`k`的值时，它们是相等的，这意味着我们已经找到了第3个最小的元素，并将其返回。
- en: 'This process is also shown in the following diagram:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程也在下面的图表中显示：
- en: '![](Images/15c61235-c781-4d49-aff5-38a00a946718.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/15c61235-c781-4d49-aff5-38a00a946718.png)'
- en: 'To implement the quickselect algorithm, we first need to understand the main
    function, where we have three possible conditions. We declare the main method
    of the algorithm as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现快速选择算法，我们首先需要了解主要函数，其中有三种可能的情况。我们将算法的主要方法声明如下：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `quick_select` function takes the index of the first element in the list—as
    well as the last —as parameters. The `i^(th)` element is specified by the third
    parameter, `k`. The value of `k` should always be positive; the values greater
    or equal to zero (`0`) are only allowed in such a way that when `k` is `0`, we
    know to search for the first-smallest item in the list. Others like to treat the
    `k` parameter so that it maps directly with the index that the user is searching
    for, so that the first-smallest number maps to the `0` index of a sorted list.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`quick_select`函数接受列表中第一个元素的索引以及最后一个元素的索引作为参数。第三个参数`k`指定了第`i`个元素。`k`的值应该始终是正数；只有大于或等于零的值才被允许，这样当`k`为0时，我们知道要在列表中搜索第一个最小的项。其他人喜欢处理`k`参数，使其直接映射到用户正在搜索的索引，这样第一个最小的数字就映射到排序列表的`0`索引。'
- en: A method call to the partition function, `split = partition(array_list, left,
    right)`, returns the `split` index. This index of the `split` array is the position
    in the unordered list where all elements between `right` to `split-1` are less
    than the element contained in the `split` array, while all elements between `split+1`
    to `left` are greater.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对`partition`函数的方法调用`split = partition(array_list, left, right)`，返回`split`索引。`split`数组的这个索引是无序列表中的位置，`right`到`split-1`之间的所有元素都小于`split`数组中包含的元素，而`split+1`到`left`之间的所有元素都大于它。
- en: When the `partition` function returns the `split` value, we compare it with
    `k` to find out if the `split` corresponds to the `k^(th)` items.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当`partition`函数返回`split`值时，我们将其与`k`进行比较，以找出`split`是否对应于第`k`个项。
- en: 'If `split` is less than `k`, then it means that the `k^(th)` smallest item
    should exist or be found between `split+1` and `right`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`split`小于`k`，那么意味着第`k`小的项应该存在或者被找到在`split+1`和`right`之间：
- en: '![](Images/b609a32d-9262-441a-9e70-12d26502cff8.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b609a32d-9262-441a-9e70-12d26502cff8.png)'
- en: In the preceding example, a split within an imaginary unordered list occurs
    at index **5**, while we are searching for the second-smallest number. Since 5<2
    yields `false`, a recursive call to return `quick_select(array_list, left, split-1,
    k)` is made so that the other half of the list is searched.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，一个想象中的未排序列表在索引**5**处发生了分割，而我们正在寻找第二小的数字。由于5<2得到`false`，因此进行递归调用以返回`quick_select(array_list,
    left, split-1, k)`，以便搜索列表的另一半。
- en: 'If the `split` index was less than `k`, then we would make a call to `quick_select`,
    like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`split`索引小于`k`，那么我们将调用`quick_select`，如下所示：
- en: '![](Images/46160450-f11f-4a78-9139-0ceb47a7e1e3.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/46160450-f11f-4a78-9139-0ceb47a7e1e3.png)'
- en: Understanding the partition step
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解分区步骤
- en: 'The partition step is similar to what we had in the quicksort algorithm. There
    are a couple of things that are worth noting:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 分区步骤类似于快速排序算法中的步骤。有几点值得注意：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An `if` statement has been inserted at the beginning of the function definition
    to cater for situations where `first_index` is equal to `last_index`. In such
    cases, it means that there is only one element in our sublist. Therefore, we simply
    return any of the function parameters, in this case, `first_index`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数定义的开头插入了一个`if`语句，以应对`first_index`等于`last_index`的情况。在这种情况下，这意味着我们的子列表中只有一个元素。因此，我们只需返回函数参数中的任何一个，即`first_index`。
- en: The first element is always chosen as the pivot. This choice to make the first
    element the pivot is a random decision. It often does not yield a good split—and
    subsequently—a good partition. However, the `i^(th)` element will eventually be
    found, even though the pivot is chosen at random.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个元素总是选择为枢轴。这种选择使第一个元素成为枢轴是一个随机决定。通常不会产生良好的分割，随后也不会产生良好的分区。然而，最终将找到第`i^(th)`个元素，即使枢轴是随机选择的。
- en: The `partition` function returns the pivot index pointed to by `less_than_pivot_index`,
    as we saw in the preceding chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`partition`函数返回由`less_than_pivot_index`指向的枢轴索引，正如我们在前一章中看到的。'
- en: Deterministic selection
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定性选择
- en: The worst-case performance of a randomized selection algorithm is `O(n²)`. It
    is possible to improve the section of an element of the randomized selection algorithm
    to obtain a worst-case performance of `O(n)`. We can obtain the performance of
    `O(n)` by using an algorithm, that is, **deterministic selection**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 随机选择算法的最坏情况性能是`O(n²)`。可以通过改进随机选择算法的元素部分来获得`O(n)`的最坏情况性能。我们可以通过使用一个算法，即**确定性选择**，获得`O(n)`的性能。
- en: Median of the median is an algorithm that provides us with the approximate median
    value, that is, a value close to the actual median for a given unsorted list of
    elements. This approximate median is often used as a pivot point in the quickselect
    algorithm for selecting the `i^(th)` smallest element from a list. It is due to
    the fact that the median of median algorithm finds out the estimated median in
    a linear time, and when this estimated median is used as a pivot point in the
    quickselect algorithm, the worst-case running time's complexity drastically improves
    from `O(n²)` to the linear `O(n)`. Therefore, the median of the median algorithm
    helps the quickselect algorithm to perform significantly better because of the
    choice of a good pivot value.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 中位数中位数是一种算法，它为我们提供了近似中位数值，即接近给定未排序元素列表的实际中位数的值。这个近似中位数通常用作快速选择算法中选择列表中第`i^(th)`最小元素的枢轴点。这是因为中位数中位数算法在线性时间内找到了估计中位数，当这个估计中位数用作快速选择算法中的枢轴点时，最坏情况下的运行时间复杂度从`O(n²)`大幅提高到线性的`O(n)`。因此，中位数中位数算法帮助快速选择算法表现得更好，因为选择了一个好的枢轴值。
- en: 'The general approach to the deterministic algorithm to select the `i^(th)`
    smallest element is listed here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 确定性算法选择第`i^(th)`最小元素的一般方法如下：
- en: 'Select a pivot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个枢轴：
- en: Split a list of unordered items into groups of five elements each.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将未排序项目的列表分成每组五个元素。
- en: Sort and find the median of all the groups.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对所有组进行排序并找到中位数。
- en: Repeat *steps 1* and* 2* recursively to obtain the true median of the list.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 递归执行*步骤1*和*2*，以获得列表的真实中位数。
- en: Use the true median to partition the list of unordered items.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用真实中位数来分区未排序项目的列表。
- en: Recurse into the part of the partitioned list that may contain the `i^(th)` smallest
    element.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 递归到可能包含第`i^(th)`最小元素的分区列表部分。
- en: Let's consider an example list of 15 elements to understand the working of the
    deterministic approach to determine the third smallest element from the list.
    First, you need to divide the lists that have 5 elements each, and then we sort
    the sublists. Once we have sorted the lists, we find out the median of the sublists,
    that is, items **23**, **52**, and **34** are the medians of these three sublists.
    We prepare a list of medians of all the sublists, and then we sort the list of
    medians. Next, we determine the median of this list, that is, the median of the
    median, which is **34**. This value is the estimated median of the whole list,
    and is used to select the partition/pivot point for the whole list. Since the
    index of the pivot value is 7, which is greater than the `i^(th)` value, we recursively
    consider the left sublist.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个包含15个元素的示例列表，以了解确定性方法确定列表中第三个最小元素的工作原理。首先，您需要将具有5个元素的列表分成两个，并对子列表进行排序。一旦我们对列表进行了排序，我们就找出子列表的中位数，也就是说，元素**23**、**52**和**34**是这三个子列表的中位数。我们准备了所有子列表中位数的列表，然后对中位数列表进行排序。接下来，我们确定这个列表的中位数，也就是中位数的中位数，即**34**。这个值是整个列表的估计中位数，并用于选择整个列表的分区/枢轴点。由于枢轴值的索引为7，大于`i^(th)`值，我们递归考虑左子列表。
- en: 'The functionality of the algorithm is shown in the following diagram:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的功能如下图所示：
- en: '![](Images/b894d148-b32e-4111-88f6-9d397cbc815b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b894d148-b32e-4111-88f6-9d397cbc815b.png)'
- en: Pivot selection
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枢轴选择
- en: 'To implement the deterministic algorithm to efficiently determine the `i^(th)`
    smallest value from the list, we start by implementing the pivot selection method.
    Previously, in the random selection algorithm, we selected the first element as
    the pivot. We shall replace that step with a sequence of steps that enables us
    to obtain the approximate median. This will improve the partitioning of the list
    regarding the pivot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地确定列表中第i个最小值的确定性算法，我们首先要实现枢轴选择方法。在随机选择算法中，我们以前选择第一个元素作为枢轴。我们将用一系列步骤替换该步骤，使我们能够获得近似中位数。这将改善关于枢轴的列表的分区：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s now understand the code for the `partition` function. The `nearest_median`
    variable stores the true or approximate median of a given list:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们了解partition函数的代码。nearest_median变量存储给定列表的真实或近似中位数：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the `unsorted_array` parameter has only one element, `first_index` and `last_index`
    will be equal. Therefore, `first_index` is, returned anyway.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果unsorted_array参数只有一个元素，first_index和last_index将相等。因此，first_index会被返回。
- en: However, if the list size is greater than one, we call the `median_of_medians`
    function with the section of the array, demarcated by `first_index` and `last_index`.
    The return value is yet again stored in `nearest_median`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果列表的大小大于1，我们将使用由first_index和last_index标记的数组部分调用median_of_medians函数。返回值再次存储在nearest_median中。
- en: Median of medians
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中位数中位数
- en: 'The `median_of_medians` function is responsible for finding the approximate
    median of any given list of items. The function uses recursion to return the true
    median:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: median_of_medians函数负责找到任何给定项目列表的近似中位数。该函数使用递归返回真正的中位数：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The function begins by splitting the list, `elems`, into groups of five elements
    each. This means that if `elems` contains 100 items, there will be 20 groups that
    are created by the `sublists = [elems[j:j+5] for j in range(0, len(elems), 5)]` statement,
    with each containing exactly five elements or fewer:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数首先将列表elems分成每组五个元素。这意味着如果elems包含100个项目，将会有20个组，由sublists = [elems[j:j+5]
    for j in range(0, len(elems), 5)]语句创建，每个组包含恰好五个元素或更少：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: An empty array is created and assigned to `medians`, which stores the medians
    in each of the five element arrays assigned to `sublists`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个空数组并将其分配给medians，它存储分配给sublists的每个五个元素数组中的中位数。
- en: The for loop iterates over the list of lists inside `sublists`. Each sublist
    is sorted, the median is found, and is stored in the `medians` list.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: for循环遍历sublists中的列表列表。每个子列表都被排序，找到中位数，并存储在medians列表中。
- en: The `medians.append(sorted(sublist)[len(sublist)//2])` statement will sort the
    list and obtain the element stored in its middle index. This becomes the median
    of the five-element list. The use of an existing sorting function will not impact
    the performance of the algorithm due to the list's small size.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: medians.append(sorted(sublist)[len(sublist)//2])语句将对列表进行排序并获得存储在其中间索引的元素。这成为五个元素列表的中位数。由于列表的大小很小，使用现有的排序函数不会影响算法的性能。
- en: We understood from the outset that we would not sort the list in order to find
    the `i^(th)` smallest element, so why employ Python's sorted method? Well, since
    we are sorting a very small list of five elements or fewer, the impact of that
    operation on the overall performance of the algorithm is considered negligible.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始我们就明白，我们不会对列表进行排序以找到第i个最小的元素，那么为什么要使用Python的sorted方法呢？嗯，因为我们要对一个非常小的列表进行排序，只有五个元素或更少，所以这个操作对算法的整体性能的影响被认为是可以忽略的。
- en: 'Thereafter, if the list now contains five or fewer elements, we shall sort
    the `medians` list and return the element located in its middle index:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，如果列表现在包含五个或更少的元素，我们将对medians列表进行排序，并返回位于其中间索引的元素：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If, on the other hand, the size of the list is greater than five, we recursively
    call the `median_of_medians` function again, supplying it with the list of the
    medians stored in `medians`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果列表的大小大于五，我们将再次递归调用median_of_medians函数，向其提供存储在medians中的中位数列表。
- en: 'Take, for instance, another example to better understand the concept of the
    median of median algorithm, with the following list of numbers:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了更好地理解中位数中位数算法的概念，我们可以看下面的数字列表：
- en: '*[2, 3, 5, 4, 1, 12, 11, 13, 16, 7, 8, 6, 10, 9, 17, 15, 19, 20, 18, 23, 21,
    22, 25, 24, 14]*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*[2, 3, 5, 4, 1, 12, 11, 13, 16, 7, 8, 6, 10, 9, 17, 15, 19, 20, 18, 23, 21,
    22, 25, 24, 14]*'
- en: 'We can break this list into groups of five elements each with the `sublists
    = [elems[j:j+5] for j in range(0, len(elems), 5)]` code statement in order to
    obtain the following list:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个列表分成每组五个元素，使用代码语句sublists = [elems[j:j+5] for j in range(0, len(elems),
    5]来获得以下列表：
- en: '*[[2, 3, 5, 4, 1], [12, 11, 13, 16, 7], [8, 6, 10, 9, 17], [15, 19, 20, 18,
    23], [21, 22, 25, 24, 14]]*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*[[2, 3, 5, 4, 1], [12, 11, 13, 16, 7], [8, 6, 10, 9, 17], [15, 19, 20, 18,
    23], [21, 22, 25, 24, 14]]*'
- en: 'Sorting each of the five-element lists and obtaining their medians produces
    the following list:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个五个元素的列表进行排序并获得它们的中位数，得到以下列表：
- en: '*[3, 12, 9, 19, 22]*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*[3, 12, 9, 19, 22]*'
- en: Since the list is five elements in size, we only return the median of the sorted
    list; otherwise, we would have made another call to the `median_of_median` function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列表有五个元素，我们只返回排序后列表的中位数；否则，我们将再次调用median_of_median函数。
- en: The median of medians algorithm can also be used to choose a pivot point in
    the quicksort algorithm for sorting a list of elements. This significantly improves
    the worst-case performance of the quicksort algorithm from `O(n²)` to a complexity
    of `O(n log n)`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 中位数中位数算法也可以用于选择快速排序算法中的枢轴点，从而将快速排序算法的最坏情况性能从O(n²)显著提高到O(n log n)的复杂度。
- en: Partitioning step
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分区步骤
- en: 'Now that we have obtained the approximate median, the `get_index_of_nearest_median`
    function takes the bounds of the list indicated by the `first` and `last` parameters:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了近似中位数，get_index_of_nearest_median函数使用first和last参数指示的列表边界：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once again, we only return the first index if there is only one element in
    the list. However, `arraylist[first:second]` returns an array with an index of
    `0` up to the size of the `list -1`. When we find the index of the median, we
    lose the portion in the list where it occurs because of the new range indexing
    that the `[first:second]` code returns. Therefore, we must add whatever index
    is returned by `arraylist[first:second]` to `first` to obtain the true index where
    the median was found:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，如果列表中只有一个元素，我们只返回第一个索引。但是，`arraylist[first:second]`返回一个索引从`0`到`list-1`大小的数组。当我们找到中位数的索引时，由于`[first:second]`代码返回的新范围索引，我们失去了它所在的列表部分。因此，我们必须将`arraylist[first:second]`返回的任何索引添加到`first`以获得中位数的真实索引位置：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We then swap the first element in `unsorted_array` with `index_of_nearest_median`,
    using the `swap` function.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`swap`函数将`unsorted_array`中的第一个元素与`index_of_nearest_median`进行交换。
- en: 'The `utility` function to swap two array elements is shown here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 交换两个数组元素的`utility`函数如下所示：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our approximate median is now stored at `first_index` of the unsorted list.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的近似中位数现在存储在未排序列表的`first_index`处。
- en: 'The partition function continues as it would in the code of the quickselect
    algorithm. After the partitioning step, the array looks like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 分区函数继续进行，就像在快速选择算法的代码中一样。分区步骤之后，数组看起来是这样的：
- en: '![](Images/ae12fc42-27b4-4a09-b4ad-561e164c2163.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ae12fc42-27b4-4a09-b4ad-561e164c2163.png)'
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you will have already observed, the main function of the deterministic selection
    algorithm looks exactly the same as its random selection counterpart. After the
    initial `array_list` has been partitioned for the approximate median, a comparison
    with the `k^(th)` element is made.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您已经观察到的那样，确定性选择算法的主要函数看起来与其随机选择对应函数完全相同。在对初始的`array_list`进行分区以获得近似中位数之后，会与第`k`个元素进行比较。
- en: If `split` is less than `k`, then a recursive call to `deterministic_select(array_list,
    split + 1, right, k)` is made. This will look for the `k^(th)` element in that
    half of the array. Otherwise, the function call to `deterministic_select(array_list,
    left, split-1, k)` is made.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`split`小于`k`，那么会对`deterministic_select(array_list, split + 1, right, k)`进行递归调用。这将在数组的一半中寻找第`k`个元素。否则，会调用`deterministic_select(array_list,
    left, split-1, k)`函数。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed various ways to answer the question of how to
    find the `i^(th)` smallest element in a list. The trivial solution of simply sorting
    a list to perform the operation of finding the `i^(th)` smallest element was explored.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了回答如何在列表中找到第`i`个最小元素的各种方法。探讨了简单地对列表进行排序以执行找到第`i`个最小元素操作的平凡解决方案。
- en: There is also the possibility of not necessarily sorting the list before we
    can determine the `i^(th)` smallest element. The random selection algorithm allows
    us to modify the quicksort algorithm to determine the `i^(th)` smallest element.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 还有可能不一定在确定第`i`个最小元素之前对列表进行排序。随机选择算法允许我们修改快速排序算法以确定第`i`个最小元素。
- en: To further improve upon the random selection algorithm so that we can obtain
    a time complexity of `O(n)`, we embarked on finding the median of medians to enable
    us to find a good split during partitioning.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步改进随机选择算法，以便获得`O(n)`的时间复杂度，我们着手寻找中位数中的中位数，以便在分区过程中找到一个良好的分割点。
- en: In the next chapter, we will explore the world of strings. We will learn how
    to efficiently store and manipulate large amounts of text. Data structures and
    common string operations will be covered too.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨字符串的世界。我们将学习如何高效地存储和操作大量文本。还将涵盖数据结构和常见的字符串操作。
