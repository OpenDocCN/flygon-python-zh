["```py\n$ pip install --user setuptools wheel pyinstaller\n```", "```py\nclass TicTacToeEngine(qtc.QObject):\n\n    winning_sets = [\n        {0, 1, 2}, {3, 4, 5}, {6, 7, 8},\n        {0, 3, 6}, {1, 4, 7}, {2, 5, 8},\n        {0, 4, 8}, {2, 4, 6}\n    ]\n    players = ('X', 'O')\n\n    game_won = qtc.pyqtSignal(str)\n    game_draw = qtc.pyqtSignal()\n\n    def __init__(self):\n        super().__init__()\n        self.board = [None] * 9\n        self.current_player = self.players[0]\n```", "```py\n    def next_player(self):\n        self.current_player = self.players[\n            not self.players.index(self.current_player)]\n```", "```py\n    def mark_square(self, square):\n        if any([\n                not isinstance(square, int),\n                not (0 <= square < len(self.board)),\n                self.board[square] is not None\n        ]):\n            return False\n        self.board[square] = self.current_player\n        self.next_player()\n        return True\n```", "```py\n    def check_board(self):\n        for player in self.players:\n            plays = {\n                index for index, value in enumerate(self.board)\n                if value == player\n            }\n            for win in self.winning_sets:\n                if not win - plays:  # player has a winning combo\n                    self.game_won.emit(player)\n                    return\n        if None not in self.board:\n            self.game_draw.emit()\n```", "```py\nclass TTTBoard(qtw.QGraphicsScene):\n\n    square_rects = (\n        qtc.QRectF(5, 5, 190, 190),\n        qtc.QRectF(205, 5, 190, 190),\n        qtc.QRectF(405, 5, 190, 190),\n        qtc.QRectF(5, 205, 190, 190),\n        qtc.QRectF(205, 205, 190, 190),\n        qtc.QRectF(405, 205, 190, 190),\n        qtc.QRectF(5, 405, 190, 190),\n        qtc.QRectF(205, 405, 190, 190),\n        qtc.QRectF(405, 405, 190, 190)\n    )\n\n    square_clicked = qtc.pyqtSignal(int)\n```", "```py\n    def __init__(self):\n        super().__init__()\n        self.setSceneRect(0, 0, 600, 600)\n        self.setBackgroundBrush(qtg.QBrush(qtc.Qt.cyan))\n        for square in self.square_rects:\n            self.addRect(square, brush=qtg.QBrush(qtc.Qt.white))\n        self.mark_pngs = {\n            'X': qtg.QPixmap('X.png'),\n            'O': qtg.QPixmap('O.png')\n        }\n        self.marks = []\n```", "```py\n    def set_board(self, marks):\n        for i, square in enumerate(marks):\n            if square in self.mark_pngs:\n                mark = self.addPixmap(self.mark_pngs[square])\n                mark.setPos(self.square_rects[i].topLeft())\n                self.marks.append(mark)\n```", "```py\n    def clear_board(self):\n        for mark in self.marks:\n            self.removeItem(mark)\n```", "```py\n    def mousePressEvent(self, mouse_event):\n        position = mouse_event.buttonDownScenePos(qtc.Qt.LeftButton)\n        for square, qrect in enumerate(self.square_rects):\n            if qrect.contains(position):\n                self.square_clicked.emit(square)\n                break\n```", "```py\n        self.board = TTTBoard()\n        self.board_view = qtw.QGraphicsView()\n        self.board_view.setScene(self.board)\n        self.setCentralWidget(self.board_view)\n```", "```py\n    def start_game(self):\n        self.board.clear_board()\n        self.game = TicTacToeEngine()\n        self.game.game_won.connect(self.game_won)\n        self.game.game_draw.connect(self.game_draw)\n```", "```py\n        self.start_game()\n```", "```py\n    def try_mark(self, square):\n        if self.game.mark_square(square):\n            self.board.set_board(self.game.board)\n            self.game.check_board()\n```", "```py\n        self.board.square_clicked.connect(self.try_mark)\n```", "```py\n    def game_won(self, player):\n        \"\"\"Display the winner and start a new game\"\"\"\n        qtw.QMessageBox.information(\n            None, 'Game Won', f'Player {player} Won!')\n        self.start_game()\n\n    def game_draw(self):\n        \"\"\"Display the lack of a winner and start a new game\"\"\"\n        qtw.QMessageBox.information(\n            None, 'Game Over', 'Game Over.  Nobody Won...')\n        self.start_game()\n```", "```py\nfrom .engine import TicTacToeEngine\nfrom .board import TTTBoard\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QApplication\nfrom .mainwindow import MainWindow\n\ndef main():\n    app = QApplication(sys.argv)\n    mainwindow = MainWindow()\n    sys.exit(app.exec())\n\nif __name__ == '__main__':\n    main()\n```", "```py\n$ python3 -m qtictactoe\n```", "```py\nQTicTacToe/\n\u251c\u2500\u2500 qtictactoe\n    \u251c\u2500\u2500 board.py\n    \u251c\u2500\u2500 engine.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u2514\u2500\u2500 mainwindow.py\n```", "```py\nfrom qtictactoe.__main__ import main\nmain()\n```", "```py\nQTicTacToe/\n\u251c\u2500\u2500 qtictactoe\n\u2502   \u251c\u2500\u2500 board.py\n\u2502   \u251c\u2500\u2500 engine.py\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2502   \u251c\u2500\u2500 O.png\n\u2502   \u2502   \u2514\u2500\u2500 X.png\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __main__.py\n\u2502   \u2514\u2500\u2500 mainwindow.py\n\u2514\u2500\u2500 run.py\n```", "```py\nfrom os import path\n```", "```py\n        directory = path.dirname(__file__)\n        self.mark_pngs = {\n            'X': qtg.QPixmap(path.join(directory, 'images', 'X.png')),\n            'O': qtg.QPixmap(path.join(directory, 'images', 'O.png'))\n        }\n```", "```py\n============\n QTicTacToe\n============\n```", "```py\nAuthors\n=======\nBy Alan D Moore -  https://www.alandmoore.com\n\nAbout\n=====\n\nThis is the classic game of **tic-tac-toe**, also known as noughts and crosses.  Battle your opponent in a desperate race to get three in a line.\n```", "```py\n= - ` : ' \" ~ ^ _ * + # < >\n```", "```py\nUsage\n=====\n\nSimply run `python qtictactoe.py` from within the project folder.\n\n- Players take turns clicking the mouse on the playing field to mark squares.\n- When one player gets 3 in a row, they win.\n- If the board is filled with nobody getting in a row, the game is a draw.\n```", "```py\nContributing\n============\n\nSubmit bugs and patches to the\n`public git repository <http://git.example.com/qtictactoe>`_.\n\nNotes\n=====\n\n    A strange game.  The only winning move is not to play.\n\n    *\u2014Joshua the AI, WarGames*\n```", "```py\nPyQt5\nPyQt5-sip\n```", "```py\n$ pip  install --user -r requirements.txt\n```", "```py\nPyQt5 >= 5.12\nPyQt5-sip == 4.19.4\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    # Arguments here\n)\n```", "```py\n    name='QTicTacToe',\n    version='1.0',\n    author='Alan D Moore',\n    author_email='alandmoore@example.com',\n    description='The classic game of noughts and crosses',\n    url=\"http://qtictactoe.example.com\",\n    license='MIT',\n```", "```py\n    long_description=open('README.rst', 'r').read(),\n```", "```py\n    keywords='game multiplayer example pyqt5',\n```", "```py\n    project_urls={\n        'Author Website': 'https://www.alandmoore.com',\n        'Publisher Website': 'https://packtpub.com',\n        'Source Code': 'https://git.example.com/qtictactoe'\n    },\n```", "```py\n    packages=['qtictactoe', 'qtictactoe.images'],\n```", "```py\nfrom setuptools import setup, find_package\n\nsetup(\n    #...\n    packages=find_packages(),\n)\n```", "```py\n    install_requires=['PyQt5'],\n```", "```py\n    install_requires=['PyQt5 >= 5.12'],\n```", "```py\n    python_requires='>=3.6',\n```", "```py\n    extras_require={\n        \"NetworkPlay\": [\"requests\"]\n    }\n```", "```py\n    install_requires=['QTicTacToe[NetworkPlay]'],\n```", "```py\ninclude README.rst\ninclude LICENSE\ninclude requirements.txt\ninclude docs/*\n```", "```py\n    include_package_data=True,\n```", "```py\n    package_data={\n        'qtictactoe.images': ['*.png'],\n        '': ['*.txt', '*.rst']\n    },\n```", "```py\n    entry_points={\n        'console_scripts': [\n            'qtictactoe = qtictactoe.__main__:main'\n        ]\n    }\n```", "```py\n'command_name = module.submodule:function'\n```", "```py\n$ python3 setup.py sdist\n```", "```py\n$ mkdir test_env\n$ virtualenv -p python3 test_env\n```", "```py\n# On Linux and Mac\n$ source test_env/bin/activate\n# On Windows\n$ test_env\\Scripts\\activate\n```", "```py\n$ pip install QTicTacToe/dist/QTicTacToe-1.0.tar.gz\n```", "```py\n$ pip uninstall QTicTacToe\n```", "```py\n$ python3 setup.py bdist_wheel\n```", "```py\n$ pip install qtictactoe/dist/QTicTacToe-1.0-py3-none-any.whl\n```", "```py\n$ pyinstaller my_python_script.py\n```", "```py\n$ pyinstaller --onefile qt_template.py\n```", "```py\n$ pyinstaller qt_template.spec\n```", "```py\na = Analysis(['qt_template.py'],\n             pathex=['/home/alanm/temp/qt_template'],\n             binaries=[],\n             datas=[],\n             hiddenimports=[],\n             hookspath=[],\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher,\n             noarchive=False)\n```", "```py\npyz = PYZ(a.pure, a.zipped_data,\n             cipher=block_cipher)\n```", "```py\n$ pyi-makespec --key=n0H4CK1ngPLZ qt_template.py\n```", "```py\nexe = EXE(pyz,\n          a.scripts,\n          [],\n          exclude_binaries=True,\n          name='qt_template',\n          debug=False,\n          bootloader_ignore_signals=False,\n          strip=False,\n          upx=True,\n          console=True )\n```", "```py\ncoll = COLLECT(exe,\n               a.binaries,\n               a.zipfiles,\n               a.datas,\n               strip=False,\n               upx=True,\n               name='qt_template')\n```", "```py\n$ pyinstaller run.py\n```", "```py\nTraceback (most recent call last):\n  File \"qtictactoe/__init__.py\", line 3, in <module>\n    from .mainwindow import MainWindow\nModuleNotFoundError: No module named '__main__.mainwindow'; '__main__' is not a package\n[3516] Failed to execute script qtictactoe\n```", "```py\n$ pyinstaller --name qtictactoe run.py\n# or, to just create the spec file:\n# pyi-makespec --name qtictactoe run.py\n```", "```py\nexe = EXE(pyz,\n          #...\n          name='qtictactoe',\n          #...\ncoll = COLLECT(exe,\n               #...\n               name='qtictactoe')\n```", "```py\n# On Linux and macOS:\n$ pyinstaller --name qtictactoe --add-data qtictactoe/images:images run.py\n# On Windows:\n$ pyinstaller --name qtictactoe --add-data qtictactoe\\images;images run.py\n```", "```py\na = Analysis(['run.py'],\n             #...\n             datas=[('qtictactoe/images', 'images')],\n```", "```py\n        if getattr(sys, 'frozen', False):\n            directory = sys._MEIPASS\n        else:  # Not frozen\n            directory = path.dirname(__file__)\n        self.mark_pngs = {\n            'X': qtg.QPixmap(path.join(directory, 'images', 'X.png')),\n            'O': qtg.QPixmap(path.join(directory, 'images', 'O.png'))\n        }\n```", "```py\n$ pyinstaller --log-level DEBUG my_project.py\n```"]