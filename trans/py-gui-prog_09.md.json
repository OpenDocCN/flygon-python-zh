["```py\nimport random\n\nclass MyCalc:\n\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def add(self):\n        return self.a + self.b\n\n    def mod_divide(self):\n        if self.b == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        return (int(self.a / self.b), self.a % self.b)\n\n    def rand_between(self):\n        return ((random.random() * abs(self.a - self.b)) + \n        min(self.a, self.b))\n```", "```py\nfrom mycalc import MyCalc\n\nmc1 = MyCalc(1, 100)\nmc2 = MyCalc(10, 4)\n\ntry:\n    assert mc1.add() == 101, \"Test of add() failed.\"\n    assert mc2.mod_divide() == (2, 2), \"Test of mod_divide() failed.\"\nexcept AssertionError as e:\n    print(\"Test failed: \", e)\nelse:\n    print(\"Tests succeeded!\")\n```", "```py\nif not statement:\n    raise AssertionError(\"message\")\n```", "```py\n    def add(self):\n        return self.a - self.b\n```", "```py\nTest failed:  Test of add() failed.\n```", "```py\n    def mod_divide(self):\n        ...\n        return (self.a // self.b, self.a % self.b)\n```", "```py\nfrom mycalc import MyCalc\nimport unittest\n\nclass TestMyCalc(unittest.TestCase):\n    def test_add(self):\n        mc = MyCalc(1, 10)\n        assert mc.add() == 11\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n```", "```py\n    def test_add(self):\n        mc = mycalc.MyCalc(1, 10)\n        assert mc.add() == 12\n```", "```py\nF\n======================================================================\nFAIL: test_add (__main__.TestMyCalc)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test_mycalc.py\", line 8, in test_add\n    assert mc.add() == 12\nAssertionError\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nFAILED (failures=1)\n```", "```py\n    def test_add(self):\n        mc = mycalc.MyCalc(1, 10)\n        self.assertEqual(mc.add(), 12)\n```", "```py\nTraceback (most recent call last):\n  File \"test_mycalc.py\", line 11, in test_add\n    self.assertEqual(mc.add(), 12)\nAssertionError: 11 != 12\n```", "```py\n    def test_mod_divide(self):\n        mycalc = mycalc.MyCalc(1, 0)\n        self.assertRaises(ValueError, mycalc.mod_divide)\n```", "```py\n        mycalc = MyCalc(1, 0)\n        with self.assertRaises(ValueError):\n            mycalc.mod_divide()\n```", "```py\n    def setUp(self):\n        self.mycalc1_0 = mycalc.MyCalc(1, 0)\n        self.mycalc36_12 = mycalc.MyCalc(36, 12)\n```", "```py\n    def test_add(self):\n        self.assertEqual(self.mycalc1_0.add(), 1)\n        self.assertEqual(self.mycalc36_12.add(), 48)\n```", "```py\n    def test_rand_between(self):\n        rv = self.mycalc1_0.rand_between()\n        self.assertLessEqual(rv, 1)\n        self.assertGreaterEqual(rv, 0)\n```", "```py\nfrom unittest.mock import Mock\n\n#... inside TestMyCalc\n    def test_rand_between(self):\n        fakerandom = Mock(return_value=.5)\n```", "```py\n        orig_random = mycalc.random.random\n        mycalc.random.random = fakerandom\n        rv = self.mycalc1_0.rand_between()\n        self.assertEqual(rv, 0.5)\n        mycalc.random.random = orig_random\n```", "```py\nfrom unittest.mock import patch\n\n    #... inside TestMyCalc\n    def test_rand_between(self):\n       with patch('mycalc.random.random') as fakerandom:\n            fakerandom.return_value = 0.5\n            rv = self.mycalc1_0.rand_between()\n            self.assertEqual(rv, 0.5)\n```", "```py\n    @patch('mycalc.random.random')\n    def test_rand_between2(self, fakerandom):\n        fakerandom.return_value = 0.5\n        rv = self.mycalc1_0.rand_between()\n        self.assertEqual(rv, 0.5)\n```", "```py\npython -m unittest\n```", "```py\nfrom .. import models\nfrom unittest import TestCase\nfrom unittest import mock\n\nclass TestCSVModel(TestCase):\n    def setUp(self):\n        self.file1_open = mock.mock_open(\n            read_data=(\n                \"Date,Time,Technician,Lab,Plot,Seed sample,Humidity,Light,\"\n                \"Temperature,Equipment Fault,Plants,Blossoms,Fruit,\"\n                \"Min Height,Max Height,Median Height,Notes\\r\\n\"\n                \"2018-06-01,8:00,J Simms,A,2,AX478,\n                 24.47,1.01,21.44,False,14,\"\n                \"27,1,2.35,9.2,5.09,\\r\\n\"\n                \"2018-06-01,8:00,J Simms,A,3,AX479,\n                24.15,1,20.82,False,18,49,\"\n                \"6,2.47,14.2,11.83,\\r\\n\"))\n        self.file2_open = mock.mock_open(read_data='')\n        self.model1 = models.CSVModel('file1')\n        self.model2 = models.CSVModel('file2')\n```", "```py\n    @mock.patch('abq_data_entry.models.os.path.exists')\n    def test_get_all_records(self, mock_exists):\n        mock_exists.return_value = True\n```", "```py\n        with mock.patch('abq_data_entry.models.open', self.file1_open):\n            records = self.model1.get_all_records()\n```", "```py\n    def get_all_records(self):\n        ...\n        with open(self.filename, 'r', encoding='utf-8') as fh:\n            csvreader = csv.DictReader(list(fh.readlines()))\n```", "```py\n        self.assertEqual(len(records), 2)\n        self.assertIsInstance(records, list)\n        self.assertIsInstance(records[0], dict)\n```", "```py\n        fields = (\n           'Date', 'Time', 'Technician', 'Lab', 'Plot',\n           'Seed sample', 'Humidity', 'Light', \n           'Temperature', 'Equipment Fault', 'Plants',\n           'Blossoms', 'Fruit', 'Min Height', 'Max Height', \n           'Median Height', 'Notes')\n        for field in fields:\n            self.assertIn(field, records[0].keys())\n        self.assertFalse(records[0]['Equipment Fault'])\n```", "```py\n        self.file1_open.assert_called_with('file1', 'r', encoding='utf-8')\n```", "```py\n    @patch('abq_data_entry.models.os.path.exists')\n    def test_save_record(self, mock_exists):\n```", "```py\n        record = {\n            \"Date\": '2018-07-01', \"Time\": '12:00', \n            \"Technician\": 'Test Tech', \"Lab\": 'E', \n             \"Plot\": '7', \"Seed sample\": 'test',\n            \"Humidity\": '10', \"Light\": '99', \n            \"Temperature\": '20', \"Equipment Fault\": False,\n            \"Plants\": '10', \"Blossoms\": '200', \"Fruit\": '250', \n            \"Min Height\": '40', \"Max Height\": '50',\n            \"Median Height\": '55', \"Notes\": 'Test Note\\r\\nTest Note\\r\\n'}\n        record_as_csv = (\n            '2018-07-01,12:00,Test Tech,E,17,test,10,99,20,False,'\n            '10,200,250,40,50,55,\"Test Note\\r\\nTest Note\\r\\n\"\\r\\n')\n```", "```py\n        mock_exists.return_value = True\n        with patch('abq_data_entry.models.open', self.file2_open):\n            self.model2.save_record(record, None)\n```", "```py\n            self.file2_open.assert_called_with('file2', 'a', \n                encoding='utf-8')\n```", "```py\n            file2_handle = self.file2_open()\n            file2_handle.write.assert_called_with(record_as_csv)\n```", "```py\n        with patch('abq_data_entry.models.open', self.file1_open):\n            self.model1.save_record(record, 1)\n            self.file1_open.assert_called_with('file1', 'w', \n            encoding='utf-8')\n```", "```py\n            file1_handle = self.file1_open()\n            file1_handle.write.assert_has_calls([\n                mock.call('Date,Time,Technician,Lab,Plot,Seed sample,'\n                     'Humidity,Light,Temperature,Equipment Fault,'\n                     'Plants,Blossoms,Fruit,Min Height,Max Height,'\n                     'Median Height,Notes\\r\\n'),\n                mock.call('2018-06-01,8:00,J Simms,A,2,AX478,24.47,1.01,'\n                    '21.44,False, '14,27,1,2.35,9.2,5.09,\\r\\n'),\n                mock.call('2018-07-01,12:00,Test Tech,E,17,test,10,99,20,'\n                    'False,10,200,250,'40,50,55,' \n                    '\"Test Note\\r\\nTest Note\\r\\n\"\\r\\n')\n            ])\n```", "```py\nclass TestApplication(TestCase):\n    records = [\n        {'Blossoms': '21', 'Date': '2018-06-01',\n         'Equipment Fault': 'False', 'Fruit': '3, \n         'Humidity': '24.09', 'Lab': 'A', 'Light': '1.03', \n         'Max Height': '8.7', 'Median Height': '2.73', \n         'Min Height': '1.67','Notes': '\\n\\n', 'Plants': '9', \n         'Plot': '1', 'Seed sample': 'AX477',\n         'Technician': 'J Simms', 'Temperature': '22.01', \n         'Time': '8:00'},\n        {'Blossoms': '27', 'Date': '2018-06-01', \n         'Equipment Fault': 'False', 'Fruit': '1', \n         'Humidity': '24.47', 'Lab': 'A', 'Light': '1.01',\n         'Max Height': '9.2', 'Median Height': '5.09', \n         'Min Height': '2.35', 'Notes': '', 'Plants': '14', \n         'Plot': '2', 'Seed sample': 'AX478', \n         'Technician': 'J Simms', 'Temperature': '21.44', \n         'Time': '8:00'}]\n    settings = {\n        'autofill date': {'type': 'bool', 'value': True},\n        'autofill sheet data': {'type': 'bool', 'value': True},\n        'font size': {'type': 'int', 'value': 9},\n        'theme': {'type': 'str', 'value': 'default'}}\n```", "```py\n  def setUp(self):\n      with \\\n          patch('abq_data_entry.application.m.CSVModel')\\\n              as csvmodel,\\\n          patch('abq_data_entry.application.m.SettingsModel') \\\n              as settingsmodel,\\\n          patch('abq_data_entry.application.v.DataRecordForm'), \\            \n          patch('abq_data_entry.application.v.RecordList'),\\    \n          patch('abq_data_entry.application.get_main_menu_for_os')\\\n        :\n```", "```py\n            settingsmodel().variables = self.settings\n            csvmodel().get_all_records.return_value = self.records\n```", "```py\n            self.app = application.Application()\n```", "```py\n    def tearDown(self):\n        self.app.update()\n        self.app.destroy()\n```", "```py\n    def test_show_recordlist(self):\n        self.app.show_recordlist()\n        self.app.update()\n        self.app.recordlist.tkraise.assert_called()\n```", "```py\n    def test_populate_recordlist(self):\n        self.app.populate_recordlist()\n        self.app.data_model.get_all_records.assert_called()\n        self.app.recordlist.populate.assert_called_with(self.records)\n```", "```py\n        self.app.data_model.get_all_records.side_effect = \n        Exception('Test message')\n```", "```py\n        with patch('abq_data_entry.application.messagebox'):\n            self.app.populate_recordlist()\n            application.messagebox.showerror.assert_called_with(\n                title='Error', message='Problem reading file',\n                detail='Test message')\n```", "```py\nclass TkTestCase(TestCase):\n    \"\"\"A test case designed for Tkinter widgets and views\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        cls.root = tk.Tk()\n        cls.root.wait_visibility()\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.root.update()\n        cls.root.destroy()\n```", "```py\nclass TestValidatedSpinbox(TkTestCase):\n\n    def setUp(self):\n        self.value = tk.DoubleVar()\n        self.vsb = widgets.ValidatedSpinbox(\n            self.root,\n            textvariable=self.value,\n            from_=-10, to=10, increment=1)\n        self.vsb.pack()\n        self.vsb.wait_visibility()\n\n    def tearDown(self):\n        self.vsb.destroy()\n```", "```py\n    def test__key_validate(self):\n        # test valid input\n        for x in range(10):\n            x = str(x)\n            p_valid = self.vsb._key_validate(x, 'end', '', '', x, '1')\n            n_valid = self.vsb._key_validate(\n                x, 'end', '-', '-' + x, '1')\n            self.assertTrue(p_valid)\n            self.assertTrue(n_valid)\n```", "```py\n    def key_validate(self, new, current=''):\n        # args are inserted char, insertion index, current value,\n        # proposed value, and action code (where '1' is 'insert')\n        return self.vsb._key_validate(new, 'end', current,\n        current + new, '1')\n```", "```py\n        # test letters\n        valid = self.key_validate('a')\n        self.assertFalse(valid)\n\n        # test non-increment number\n        valid = self.key_validate('1', '0.')\n        self.assertFalse(valid)\n\n        # test too high number\n        valid = self.key_validate('0', '10')\n        self.assertFalse(valid)\n```", "```py\n    def type_in_widget(self, widget, string):\n        widget.focus_force()\n        for char in string:\n            char = self.keysyms.get(char, char)\n```", "```py\n    keysyms = {'-': 'minus', ' ': 'space', ':': 'colon', ...}\n```", "```py\n            self.root.update()\n            widget.event_generate('<KeyPress-{}>'.format(char))\n            self.root.update()\n```", "```py\n    def click_on_widget(self, widget, x, y, button=1):\n        widget.focus_force()\n        self.root.update()\n        widget.event_generate(\"<ButtonPress-{}>\".format(button), \n        x=x, y=y)\n        self.root.update()\n```", "```py\n    def test__key_validate_integration(self):\n        self.vsb.delete(0, 'end')\n        self.type_in_widget(self.vsb, '10')\n        self.assertEqual(self.vsb.get(), '10')\n```", "```py\n        self.vsb.delete(0, 'end')\n        self.type_in_widget(self.vsb, 'abcdef')\n        self.assertEqual(self.vsb.get(), '')\n\n        self.vsb.delete(0, 'end')\n        self.type_in_widget(self.vsb, '200')\n        self.assertEqual(self.vsb.get(), '2')\n```", "```py\n    def click_arrow(self, arrow='inc', times=1):\n        x = self.vsb.winfo_width() - 5\n        y = 5 if arrow == 'inc' else 15\n        for _ in range(times):\n            self.click_on_widget(self.vsb, x=x, y=y)\n```", "```py\n    def test_arrows(self):\n        self.value.set(0)\n        self.click_arrow(times=1)\n        self.assertEqual(self.vsb.get(), '1')\n\n        self.click_arrow(times=5)\n        self.assertEqual(self.vsb.get(), '6')\n\n        self.click_arrow(arrow='dec', times=1)\n        self.assertEqual(self.vsb.get(), '5')\n```", "```py\nclass TestValidatedMixin(TkTestCase):\n\n    def setUp(self):\n        class TestClass(widgets.ValidatedMixin, ttk.Entry):\n            pass\n        self.vw1 = TestClass(self.root)\n```", "```py\n    def test__validate(self):\n        args = {'proposed': 'abc', 'current': 'ab', 'char': 'c', \n        'event': 'key', 'index': '2', 'action': '1'}\n        self.assertTrue(self.vw1._validate(**args))\n```", "```py\n        fake_key_val = Mock(return_value=False)\n        self.vw1._key_validate = fake_key_val\n        self.assertFalse(self.vw1._validate(**args))\n        fake_key_val.assert_called_with(**args)\n```", "```py\n        args['event'] = 'focusout'\n        self.assertTrue(self.vw1._validate(**args))\n        fake_focusout_val = Mock(return_value=False)\n        self.vw1._focusout_validate = fake_focusout_val\n        self.assertFalse(self.vw1._validate(**args))\n        fake_focusout_val.assert_called_with(event='focusout')\n```"]