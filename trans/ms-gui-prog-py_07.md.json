["```py\n        self.setWindowTitle('Fight Fighter Game Lobby')\n        cx_form = qtw.QWidget()\n        self.setCentralWidget(cx_form)\n        cx_form.setLayout(qtw.QFormLayout())\n        heading = qtw.QLabel(\"Fight Fighter!\")\n        cx_form.layout().addRow(heading)\n\n        inputs = {\n            'Server': qtw.QLineEdit(),\n            'Name': qtw.QLineEdit(),\n            'Password': qtw.QLineEdit(\n                echoMode=qtw.QLineEdit.Password),\n            'Team': qtw.QComboBox(),\n            'Ready': qtw.QCheckBox('Check when ready')\n        }\n        teams = ('Crimson Sharks', 'Shadow Hawks',\n                  'Night Terrors', 'Blue Crew')\n        inputs['Team'].addItems(teams)\n        for label, widget in inputs.items():\n            cx_form.layout().addRow(label, widget)\n        self.submit = qtw.QPushButton(\n            'Connect',\n            clicked=lambda: qtw.QMessageBox.information(\n                None, 'Connecting', 'Prepare for Battle!'))\n        self.reset = qtw.QPushButton('Cancel', clicked=self.close)\n        cx_form.layout().addRow(self.submit, self.reset)\n```", "```py\n        heading_font = qtg.QFont('Impact', 32, qtg.QFont.Bold)\n        heading_font.setStretch(qtg.QFont.ExtraExpanded)\n        heading.setFont(heading_font)\n```", "```py\n        label_font = qtg.QFont()\n        label_font.setFamily('Impact')\n        label_font.setPointSize(14)\n        label_font.setWeight(qtg.QFont.DemiBold)\n        label_font.setStyle(qtg.QFont.StyleItalic)\n\n        for inp in inputs.values():\n            cx_form.layout().labelForField(inp).setFont(label_font)\n```", "```py\n        button_font = qtg.QFont(\n            'Totally Nonexistant Font Family XYZ', 15.233)\n```", "```py\n        print(f'Font is {button_font.family()}')\n        # Prints: \"Font is Totally Nonexistent Font Family XYZ\"\n```", "```py\n        actual_font = qtg.QFontInfo(button_font).family()\n        print(f'Actual font used is {actual_font}')\n```", "```py\n$ python game_lobby.py\nFont is Totally Nonexistent Font Family XYZ\nActual font used is Bitstream Vera Sans\n```", "```py\n        button_font.setStyleHint(qtg.QFont.Fantasy)\n        button_font.setStyleStrategy(\n            qtg.QFont.PreferAntialias |\n            qtg.QFont.PreferQuality\n        )\n```", "```py\n        actual_font = qtg.QFontInfo(button_font)\n        print(f'Actual font used is {actual_font.family()}'\n              f' {actual_font.pointSize()}')\n        self.submit.setFont(button_font)\n        self.cancel.setFont(button_font)\n```", "```py\n$ python game_lobby.py\nActual font used is Impact 15\n```", "```py\n        logo = qtg.QPixmap('logo.png')\n```", "```py\n        heading.setPixmap(logo)\n```", "```py\n        if logo.width() > 400:\n            logo = logo.scaledToWidth(\n                400, qtc.Qt.SmoothTransformation)\n```", "```py\n        go_pixmap = qtg.QPixmap(qtc.QSize(32, 32))\n        stop_pixmap = qtg.QPixmap(qtc.QSize(32, 32))\n        go_pixmap.fill(qtg.QColor('green'))\n        stop_pixmap.fill(qtg.QColor('red'))\n```", "```py\n        connect_icon = qtg.QIcon()\n        connect_icon.addPixmap(go_pixmap, qtg.QIcon.Active)\n        connect_icon.addPixmap(stop_pixmap, qtg.QIcon.Disabled)\n```", "```py\n        self.submit.setIcon(connect_icon)\n        self.submit.setDisabled(True)\n        inputs['Server'].textChanged.connect(\n            lambda x: self.submit.setDisabled(x == '')\n        )\n```", "```py\n$ cd ..\n$ python ch05/game_lobby.py\n```", "```py\n<RCC>\n  <qresource prefix=\"teams\">\n    <file>crimson_sharks.png</file>\n    <file>shadow_hawks.png</file>\n    <file>night_terrors.png</file>\n    <file alias=\"blue_crew.png\">blue_crew2.png</file>\n  </qresource>\n</RCC>\n```", "```py\n$ pyrcc5 -o resources.py resources.qrc\n```", "```py\nimport resources\n```", "```py\n        inputs['Team'].setItemIcon(\n            0, qtg.QIcon(':/teams/crimson_sharks.png'))\n        inputs['Team'].setItemIcon(\n            1, qtg.QIcon(':/teams/shadow_hawks.png'))\n        inputs['Team'].setItemIcon(\n            2, qtg.QIcon(':/teams/night_terrors.png'))\n        inputs['Team'].setItemIcon(\n            3, qtg.QIcon(':/teams/blue_crew.png'))\n```", "```py\n<RCC>\n  <qresource prefix=\"teams\">\n    <file>crimson_sharks.png</file>\n    <file>shadow_hawks.png</file>\n    <file>night_terrors.png</file>\n    <file>blue_crew.png</file>\n  </qresource>\n  <qresource prefix=\"fonts\">\n    <file>LiberationSans-Regular.ttf</file>\n  </qresource>\n</RCC>\n```", "```py\n        libsans_id = qtg.QFontDatabase.addApplicationFont(\n            ':/fonts/LiberationSans-Regular.ttf')\n```", "```py\n        family = qtg.QFontDatabase.applicationFontFamilies(libsans_id)[0]\n        libsans = qtg.QFont(family)\n        inputs['Team'].setFont(libsans)\n```", "```py\n        app = qtw.QApplication.instance()\n        palette = app.palette()\n```", "```py\n        palette.setColor(\n            qtg.QPalette.Button,\n            qtg.QColor('#333')\n        )\n        palette.setColor(\n            qtg.QPalette.ButtonText,\n            qtg.QColor('#3F3')\n        )\n```", "```py\n        palette.setColor(\n            qtg.QPalette.Disabled,\n            qtg.QPalette.ButtonText,\n            qtg.QColor('#F88')\n        )\n        palette.setColor(\n            qtg.QPalette.Disabled,\n            qtg.QPalette.Button,\n            qtg.QColor('#888')\n        )\n```", "```py\n        self.submit.setPalette(palette)\n        self.cancel.setPalette(palette)\n```", "```py\n        dotted_brush = qtg.QBrush(\n            qtg.QColor('white'), qtc.Qt.Dense2Pattern)\n```", "```py\n        gradient = qtg.QLinearGradient(0, 0, self.width(), self.height())\n        gradient.setColorAt(0, qtg.QColor('navy'))\n        gradient.setColorAt(0.5, qtg.QColor('darkred'))\n        gradient.setColorAt(1, qtg.QColor('orange'))\n        gradient_brush = qtg.QBrush(gradient)\n```", "```py\n        window_palette = app.palette()\n        window_palette.setBrush(\n            qtg.QPalette.Window,\n            gradient_brush\n        )\n        window_palette.setBrush(\n            qtg.QPalette.Active,\n            qtg.QPalette.WindowText,\n            dotted_brush\n        )\n        self.setPalette(window_palette)\n```", "```py\n        stylesheet = \"\"\"\n        QMainWindow {\n            background-color: black;\n        }\n        QWidget {\n            background-color: transparent;\n            color: #3F3;\n        }\n        QLineEdit, QComboBox, QCheckBox {\n            font-size: 16pt;\n        }\"\"\"\n        self.setStyleSheet(stylesheet)\n```", "```py\nWidgetClass {\n    property-name: value;\n    property-name2: value2;\n}\n```", "```py\n        stylesheet += \"\"\"\n        QPushButton {\n            background-color: #333;\n        }\n        QCheckBox::indicator:unchecked {\n            border: 1px solid silver;\n            background-color: darkred;\n        }\n        QCheckBox::indicator:checked {\n            border: 1px solid silver;\n            background-color: #3F3;\n        }\n        \"\"\"\n        self.setStyleSheet(stylesheet)\n```", "```py\n        stylesheet += \"\"\"\n        .QWidget {\n           background: url(tile.png);\n        }\n        \"\"\"\n```", "```py\n        self.submit.setObjectName('SubmitButton')\n        stylesheet += \"\"\"\n        #SubmitButton:disabled {\n            background-color: #888;\n            color: darkred;\n        }\n        \"\"\"\n```", "```py\n        for inp in ('Server', 'Name', 'Password'):\n            inp_widget = inputs[inp]\n            inp_widget.setStyleSheet('background-color: black')\n```", "```py\n$ python3 calendar_app.py -style Windows\n```", "```py\n$ python3 calendar_app.py -style Fusion\n```", "```py\nif __name__ == '__main__':\n    app = qtw.QApplication(sys.argv)\n    windows_style = qtw.QStyleFactory.create('Windows')\n    app.setStyle(windows_style)\n```", "```py\nclass StyleOverrides(qtw.QProxyStyle):\n\n    def drawItemText(\n        self, painter, rect,\n        flags, palette, enabled,\n        text, textRole\n    ):\n        \"\"\"Force uppercase in all text\"\"\"\n        text = text.upper()\n        super().drawItemText(\n            painter, rect, flags,\n            palette, enabled, text,\n            textRole\n        )\n```", "```py\nif __name__ == '__main__':\n    app = qtw.QApplication(sys.argv)\n    proxy_style= StyleOverrides()\n    app.setStyle(proxy_style)\n```", "```py\n    def drawPrimitive(\n        self, element, option, painter, widget\n    ):\n        \"\"\"Outline QLineEdits in Green\"\"\"\n```", "```py\n        self.green_pen = qtg.QPen(qtg.QColor('green'))\n        self.green_pen.setWidth(4)\n        if element == qtw.QStyle.PE_FrameLineEdit:\n            painter.setPen(self.green_pen)\n            painter.drawRoundedRect(widget.rect(), 10, 10)\n        else:\n            super().drawPrimitive(element, option, painter, widget)\n```", "```py\n        self.heading_animation = qtc.QPropertyAnimation(\n            heading, b'maximumSize')\n```", "```py\n        self.heading_animation.setStartValue(qtc.QSize(10, logo.height()))\n        self.heading_animation.setEndValue(qtc.QSize(400, logo.height()))\n        self.heading_animation.setDuration(2000)\n```", "```py\n        self.heading_animation.start()\n```", "```py\nclass ColorButton(qtw.QPushButton):\n\n    def _color(self):\n        return self.palette().color(qtg.QPalette.ButtonText)\n\n    def _setColor(self, qcolor):\n        palette = self.palette()\n        palette.setColor(qtg.QPalette.ButtonText, qcolor)\n        self.setPalette(palette)\n```", "```py\n    color = qtc.pyqtProperty(qtg.QColor, _color, _setColor)\n```", "```py\n    @qtc.pyqtProperty(qtg.QColor)\n    def backgroundColor(self):\n        return self.palette().color(qtg.QPalette.Button)\n\n    @backgroundColor.setter\n    def backgroundColor(self, qcolor):\n        palette = self.palette()\n        palette.setColor(qtg.QPalette.Button, qcolor)\n        self.setPalette(palette)\n```", "```py\n        # Replace these definitions\n        # at the top of the MainWindow constructor\n        self.submit = ColorButton(\n            'Connect',\n            clicked=lambda: qtw.QMessageBox.information(\n                None,\n                'Connecting',\n                'Prepare for Battle!'))\n        self.cancel = ColorButton(\n            'Cancel',\n            clicked=self.close)\n```", "```py\n        self.text_color_animation = qtc.QPropertyAnimation(\n            self.submit, b'color')\n        self.text_color_animation.setStartValue(qtg.QColor('#FFF'))\n        self.text_color_animation.setEndValue(qtg.QColor('#888'))\n        self.text_color_animation.setLoopCount(-1)\n        self.text_color_animation.setEasingCurve(\n            qtc.QEasingCurve.InOutQuad)\n        self.text_color_animation.setDuration(2000)\n        self.text_color_animation.start()\n```", "```py\n        self.bg_color_animation = qtc.QPropertyAnimation(\n            self.submit, b'backgroundColor')\n        self.bg_color_animation.setStartValue(qtg.QColor('#000'))\n        self.bg_color_animation.setKeyValueAt(0.5, qtg.QColor('darkred'))\n        self.bg_color_animation.setEndValue(qtg.QColor('#000'))\n        self.bg_color_animation.setLoopCount(-1)\n        self.bg_color_animation.setDuration(1500)\n```", "```py\n        self.button_animations = qtc.QParallelAnimationGroup()\n        self.button_animations.addAnimation(self.text_color_animation)\n        self.button_animations.addAnimation(self.bg_color_animation)\n```", "```py\n        self.all_animations = qtc.QSequentialAnimationGroup()\n        self.all_animations.addAnimation(self.heading_animation)\n        self.all_animations.addAnimation(self.button_animations)\n        self.all_animations.start()\n```", "```py\n   <RCC>\n      <qresource prefix=\"foodItems\">\n        <file alias=\"pancakes.png\">pc_img.45234.png</file>\n      </qresource>\n   </RCC>\n```", "```py\n   deleteButton = qtw.QPushButton('Delete')\n   form.layout().addWidget(deleteButton)\n   form.setStyleSheet(\n      form.styleSheet() + 'deleteButton{ background-color: #8F8; }'\n   )\n```", "```py\n   stylesheet1 = \"QWidget {background-color: black;}\"\n   stylesheet2 = \".QWidget {background-color: black;}\"\n```", "```py\n    class MyWidget(qtw.QWidget):\n        def __init__(self):\n            super().__init__()\n            animation = qtc.QPropertyAnimation(\n                self, b'windowOpacity')\n            animation.setStartValue(0)\n            animation.setEndValue(1)\n            animation.setDuration(10000)\n            animation.start()\n```"]