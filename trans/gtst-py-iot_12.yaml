- en: Communication Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通信接口
- en: So far, we have discussed loops, conditional statements, and functions in Python.
    We also discussed interfacing output devices and simple digital input devices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了Python中的循环、条件语句和函数。我们还讨论了与树莓派接口的输出设备和简单的数字输入设备。
- en: 'In this chapter, we will discuss the following communication interfaces:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下通信接口：
- en: UART – serial port
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UART - 串行端口
- en: Serial Peripheral Interface
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 串行外围接口
- en: I²C interface
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I²C接口
- en: We will be making use of different sensors/electronic components to demonstrate
    writing code in Python for these interfaces. We leave it up to you to pick a component
    of your choice to explore these communication interfaces.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用不同的传感器/电子元件来演示在Python中编写这些接口的代码。我们留给您选择一个您喜欢的组件来探索这些通信接口。
- en: UART – serial port
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UART - 串行端口
- en: '**Universal Asynchronous Receiver/Transmitter** (**UART**), a serial port,
    is a communication interface where the data is transmitted serially in bits from
    a sensor to the host computer. Using a serial port is one of the oldest forms
    of communication protocol. It is used in data logging where microcontrollers collect
    data from sensors and transmit the data via a serial port. There are also sensors
    that transmit data via serial communication as responses to incoming commands.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用异步收发器**（**UART**），即串行端口，是一种通信接口，数据以位的形式从传感器串行传输到主机计算机。使用串行端口是最古老的通信协议之一。它用于数据记录，微控制器从传感器收集数据并通过串行端口传输数据。还有一些传感器以串行通信的形式响应传入的命令传输数据。'
- en: We will not go into the theory behind serial port communications (there's plenty
    of theory available on the Web at [https://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter](https://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter)).
    We will be discussing the use of the serial port to interface different sensors
    with the Raspberry Pi.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入讨论串行端口通信的理论（网络上有大量理论可供参考，网址为[https://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter](https://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter)）。我们将讨论使用串行端口与树莓派接口不同的传感器。
- en: Raspberry Pi Zero's UART port
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 树莓派Zero的UART端口
- en: 'Typically, UART ports consist of a receiver (*Rx*) and a transmitter (*Tx*)
    pin that receive and transmit data. The Raspberry Pi''s GPIO header comes with
    an UART port. The GPIO pins 14 (the *Tx* pin) and 15 (is the *Rx* pin) serve as
    the UART port for the Raspberry Pi:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，UART端口由接收器（*Rx*）和发送器（*Tx*）引脚组成，用于接收和发送数据。树莓派的GPIO引脚带有UART端口。 GPIO引脚14（*Tx*引脚）和15（*Rx*引脚）用作树莓派的UART端口：
- en: '![](Images/ba8f2fb4-fd2d-4800-89a9-acf61b5b8833.png)GPIO pins 14 and 15 are
    the UART pins (image source: https://www.rs-online.com/designspark/introducing-the-raspberry-pi-b-plus)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ba8f2fb4-fd2d-4800-89a9-acf61b5b8833.png)GPIO引脚14和15是UART引脚（图片来源：https://www.rs-online.com/designspark/introducing-the-raspberry-pi-b-plus）'
- en: Setting up the Raspberry Pi Zero serial port
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置树莓派Zero串行端口
- en: In order to use the serial port to talk to sensors, the serial port login/console
    needs to be disabled. In the **Raspbian** OS image, this is enabled by default
    as it enables easy debugging.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用串行端口与传感器通信，串行端口登录/控制台需要被禁用。在**Raspbian**操作系统镜像中，默认情况下启用此功能，因为它可以方便调试。
- en: 'The serial port login can be disabled via `raspi-config`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 串行端口登录可以通过`raspi-config`禁用：
- en: 'Launch the terminal and run this command:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动终端并运行此命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Select Advanced Options from the main menu of `raspi-config`:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`raspi-config`的主菜单中选择高级选项：
- en: '![](Images/2c7415ed-c2c3-40b8-83c0-bcc3548d9e69.png)Select Advanced Options
    from the raspi-config menu'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/2c7415ed-c2c3-40b8-83c0-bcc3548d9e69.png)从raspi-config菜单中选择高级选项'
- en: 'Select the A8 Serial option from the drop-down menu:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择A8串行选项：
- en: '![](Images/58a94cc8-560d-4c23-ad84-5bb5329bcaaf.png)Select A8 Serial from the
    dropdown'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/58a94cc8-560d-4c23-ad84-5bb5329bcaaf.png)从下拉菜单中选择A8串行'
- en: 'Disable serial login:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用串行登录：
- en: '![](Images/ba8f0b5b-4633-4cd2-9b9f-5a41ec3995d1.png)Disable serial login'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/ba8f0b5b-4633-4cd2-9b9f-5a41ec3995d1.png)禁用串行登录'
- en: 'Finish the configuration and reboot at the end:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成配置并在最后重新启动：
- en: '![](Images/631505a6-d950-47b8-8f9c-24bc22f50fff.png)Save config and reboot'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/631505a6-d950-47b8-8f9c-24bc22f50fff.png)保存配置并重新启动'
- en: Example 1 – interfacing a carbon dioxide sensor to the Raspberry Pi
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例1 - 将二氧化碳传感器与树莓派连接
- en: We will be making use of the K30 carbon dioxide sensor (its documentation is
    available here, [http://co2meters.com/Documentation/Datasheets/DS30-01%20-%20K30.pdf](http://co2meters.com/Documentation/Datasheets/DS30-01%20-%20K30.pdf)).
    It has a range of 0-10,000 ppm, and the sensor provides it carbon dioxide concentration
    readings via serial port as a response to certain commands from the Raspberry
    Pi.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用K30二氧化碳传感器（其文档可在此处找到，[http://co2meters.com/Documentation/Datasheets/DS30-01%20-%20K30.pdf](http://co2meters.com/Documentation/Datasheets/DS30-01%20-%20K30.pdf)）。它的范围是0-10,000
    ppm，传感器通过串行端口以响应来自树莓派的特定命令提供二氧化碳浓度读数。
- en: 'The following diagram shows the connections between the Raspberry Pi and the
    K30 carbon dioxide sensor:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了树莓派和K30二氧化碳传感器之间的连接：
- en: '![](Images/b9774d1e-a0bd-4f58-9a42-3bba84a0f6e4.png)K30 carbon dioxide sensor
    interfaced with the Raspberry Pi'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/b9774d1e-a0bd-4f58-9a42-3bba84a0f6e4.png)与树莓派连接的K30二氧化碳传感器'
- en: The receiver (*Rx*) pin of the sensor is connected to the transmitter (*Tx*-**GPIO
    14 (UART_TXD)**) pin of the Raspberry Pi Zero (the yellow wire in the preceding
    figure). The transmitter (*Tx*) pin of the sensor is connected to the receiver
    (*Rx*-**GPIO 15 (UART_RXD)**) pin of the Raspberry Pi Zero (the green wire in
    the preceding figure).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器的接收器（*Rx*）引脚连接到树莓派Zero的发送器（*Tx*-**GPIO 14（UART_TXD）**）引脚（前图中的黄色线）。传感器的发送器（*Tx*）引脚连接到树莓派Zero的接收器（*Rx*-**GPIO
    15（UART_RXD）**）引脚（前图中的绿色线）。
- en: In order to power the sensor, the G+ pin of the sensor (the red wire in the
    preceding figure) is connected to the **5V** pin of the Raspberry Pi Zero. The
    G0 pin of the sensor is connected to the **GND** pin of the Raspberry Pi Zero
    (black wire in the earlier figure).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给传感器供电，传感器的G+引脚（前图中的红线）连接到树莓派Zero的**5V**引脚。传感器的G0引脚连接到树莓派Zero的**GND**引脚（前图中的黑线）。
- en: Typically, serial port communication is initiated by specifying the baud rate,
    the number of bits in a frame, stop bit, and flow control.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，串行端口通信是通过指定波特率、帧中的位数、停止位和流控来初始化的。
- en: Python code for serial port communication
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于串行端口通信的Python代码
- en: 'We will make use of the **pySerial** library ([https://pyserial.readthedocs.io/en/latest/shortintro.html#opening-serial-ports](https://pyserial.readthedocs.io/en/latest/shortintro.html#opening-serial-ports))
    for interfacing the carbon dioxide sensor:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**pySerial**库（[https://pyserial.readthedocs.io/en/latest/shortintro.html#opening-serial-ports](https://pyserial.readthedocs.io/en/latest/shortintro.html#opening-serial-ports)）来接口二氧化碳传感器：
- en: 'As per the sensor''s documentation, the sensor output can be read by initiating
    the serial port at a baud rate of 9600, no parity, 8 bits, and 1 stop bit. The
    GPIO serial port is `ttyAMA0`. The first step in interfacing with the sensor is
    initiating serial port communication:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据传感器的文档，可以通过以波特率9600、无奇偶校验、8位和1个停止位初始化串行端口来读取传感器输出。 GPIO串行端口为`ttyAMA0`。与传感器进行接口的第一步是初始化串行端口通信：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As per the sensor documentation ([http://co2meters.com/Documentation/Other/SenseAirCommGuide.zip](http://co2meters.com/Documentation/Other/SenseAirCommGuide.zip)),
    the sensor responds to the following command for the carbon dioxide concentration:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据传感器文档（[http://co2meters.com/Documentation/Other/SenseAirCommGuide.zip](http://co2meters.com/Documentation/Other/SenseAirCommGuide.zip)），传感器对二氧化碳浓度的以下命令做出响应：
- en: '![](Images/f94c1fbd-f4b0-4ad7-965b-058f4cd1d3a1.png)Command to read carbon
    dioxide concentration from the sensor-borrowed from the sensor datasheet'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/f94c1fbd-f4b0-4ad7-965b-058f4cd1d3a1.png)从传感器数据表中借用的读取二氧化碳浓度的命令'
- en: 'The command can be transmitted to the sensor as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令可以如下传输到传感器：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The sensor responds with a 7-byte response, which can be read as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传感器以7个字节的响应做出响应，可以如下读取：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The sensor''s response is in the following format:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传感器的响应格式如下：
- en: '![](Images/e4c08dba-07ab-4ea3-8865-db3c17c1b9dd.png)Carbon dioxide sensor response'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/e4c08dba-07ab-4ea3-8865-db3c17c1b9dd.png)二氧化碳传感器响应'
- en: 'According to the datasheet, the sensor data size is 2 bytes. Each byte can
    be used to store a value of 0 and 255\. Two bytes can be used to store values
    up to 65,535 (255 * 255). The carbon dioxide concentration could be calculated
    from the message as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据数据表，传感器数据大小为2个字节。每个字节可用于存储0和255的值。两个字节可用于存储高达65,535的值（255 * 255）。二氧化碳浓度可以根据消息计算如下：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Put it all together:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 把它全部放在一起：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the code to a file and try executing it.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码保存到文件并尝试执行它。
- en: I2C communication
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: I2C通信
- en: '**Inter-Integrated Circuit** (**I²C**) communication is a type of serial communication
    that allows interfacing multiple sensors to the computer. I²C communication consists
    of two wires of a clock and a data line. The Raspberry Pi Zero''s clock and data
    pins for I²C communication are **GPIO 3** (**SCL**) and **GPIO 2** (**SDA**),
    respectively. In order to communicate with multiple sensors over the same bus,
    sensors/actuators that communicate via I²C protocol are usually addressed by their
    7-bit address. It is possible to have two or more Raspberry Pi boards talking
    to the same sensor on the same I²C bus. This enables building a sensor network
    around the Raspberry Pi.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**I²C**（Inter-Integrated Circuit）通信是一种串行通信类型，允许将多个传感器接口到计算机。 I²C通信由时钟和数据线两根线组成。树莓派Zero的I²C通信的时钟和数据引脚分别为**GPIO
    3**（**SCL**）和**GPIO 2**（**SDA**）。为了在同一总线上与多个传感器通信，通常通过I²C协议通信的传感器/执行器通常通过它们的7位地址进行寻址。可以有两个或更多树莓派板与同一I²C总线上的同一传感器进行通信。这使得可以在树莓派周围构建传感器网络。'
- en: 'The I²C communication lines are open drain lines; hence, they are pulled up
    using resistors, as shown in the following figure:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: I²C通信线是开漏线路；因此，它们使用电阻上拉，如下图所示：
- en: '![](Images/9a174b4f-84ae-4b04-8bae-8310ea6cdaa3.png)I²C setup'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/9a174b4f-84ae-4b04-8bae-8310ea6cdaa3.png)I²C设置'
- en: Let's review an example of I²C communication using an example.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来回顾一下I²C通信。
- en: Example 2 – PiGlow
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2 - PiGlow
- en: The **PiGlow** is a piece of add-on hardware for the Raspberry Pi that consists
    of 18 LEDs interfaced with the **SN3218** chip. This chip permits controlling
    the LEDs via the I²C interface. The chip's 7-bit address is `0x54`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**PiGlow**是树莓派的一个附加硬件，由18个LED与**SN3218**芯片接口。该芯片允许通过I²C接口控制LED。芯片的7位地址为`0x54`。'
- en: To interface the add-on hardware, the **SCL** pin is connected to **GPIO 3**
    and **SDA** pin to **GPIO 2**; the ground pins and the power supply pins are connected
    to the counterparts of the add-on hardware, respectively.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了接口附加硬件，**SCL**引脚连接到**GPIO 3**，**SDA**引脚连接到**GPIO 2**；地线引脚和电源引脚分别连接到附加硬件的对应引脚。
- en: 'The PiGlow comes with a library that comes which abstracts the I²C communication:
    [https://github.com/pimoroni/piglow](https://github.com/pimoroni/piglow).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: PiGlow附带了一个抽象I²C通信的库：[https://github.com/pimoroni/piglow](https://github.com/pimoroni/piglow)。
- en: 'Although the library is a wrapper around the I²C interface for the library,
    we recommend reading through the code to understand the internal mechanism to
    operate the LEDs:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管该库是对I²C接口的封装，但我们建议阅读代码以了解操作LED的内部机制：
- en: '![](Images/681f2d8e-b110-4ae4-b62b-f326cdef6450.jpg)PiGlow stacked on top of
    the Raspberry Pi'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/681f2d8e-b110-4ae4-b62b-f326cdef6450.jpg)PiGlow叠放在Raspberry Pi上'
- en: Installing libraries
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装库
- en: 'The PiGlow library may be installed by running the following from the command-line
    terminal:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: PiGlow库可以通过从命令行终端运行以下命令来安装：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Example
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: 'On the completion of installation, switch to the example folder (`/home/pi/Pimoroni/piglow`)
    and run one of the examples:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，切换到示例文件夹（`/home/pi/Pimoroni/piglow`）并运行其中一个示例：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It should run *blinky* light effects as shown in the following figure:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该运行*闪烁*灯效果，如下图所示：
- en: '![](Images/2ac65de6-24b3-4945-ae7d-406e5946ed31.jpg)Blinky lights on the PiGlow'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/2ac65de6-24b3-4945-ae7d-406e5946ed31.jpg)PiGlow上的闪烁灯'
- en: Similarly, there are libraries to talk to real-time clocks, LCD displays, and
    so on using I²C communication. If you are interested in writing your own interface
    that provides the nitty-gritty detail of I²C communication with sensors/output
    devices, check out this book's accompanying website for some examples.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，还有库可以使用I²C通信与实时时钟、LCD显示器等进行通信。如果你有兴趣编写自己的接口，提供I²C通信与传感器/输出设备的细节，请查看本书附带网站上的一些示例。
- en: Example 3 – Sensorian add-on hardware for the Raspberry Pi
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例3 - 用于树莓派的Sensorian附加硬件
- en: The **Sensorian** is an add-on hardware designed for the Raspberry Pi. This
    add-on hardware comes with different types of sensors, including a light sensor,
    barometer, accelerometer, LCD display interface, flash memory, capacitive touch
    sensors, and a real-time clock.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sensorian**是为树莓派设计的附加硬件。这个附加硬件配备了不同类型的传感器，包括光传感器、气压计、加速度计、LCD显示器接口、闪存存储器、电容触摸传感器和实时时钟。'
- en: 'The sensors on this add-on hardware is sufficient to learn using all the communication
    interfaces discussed in this chapter:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个附加硬件上的传感器足以学习本章讨论的所有通信接口的使用方法：
- en: '![](Images/23b57438-e4a5-4997-bc46-e485b31a001a.jpg)Sensorian hardware stacked
    on top of the Raspberry Pi Zero'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/23b57438-e4a5-4997-bc46-e485b31a001a.jpg)堆叠在树莓派Zero上的Sensorian硬件'
- en: In this section, we will discuss an example where we will measure the ambient
    light levels using a Raspberry Pi Zero via the I²C interface. The sensor on the
    add-on hardware board is the **APDS-9300** sensor ([www.avagotech.com/docs/AV02-1077EN](http://www.avagotech.com/docs/AV02-1077EN)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一个示例，我们将使用I²C接口通过树莓派Zero测量环境光水平。附加硬件板上的传感器是**APDS-9300**传感器（[www.avagotech.com/docs/AV02-1077EN](http://www.avagotech.com/docs/AV02-1077EN)）。
- en: I2C drivers for the lux sensor
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于光传感器的I2C驱动程序
- en: 'The drivers are available from the GitHub repository for the Sensorian hardware
    ([https://github.com/sensorian/sensorian-firmware.git](https://github.com/sensorian/sensorian-firmware.git)).
    Let''s clone the repository from the command-line terminal:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器硬件的驱动程序可从GitHub存储库中获取（[https://github.com/sensorian/sensorian-firmware.git](https://github.com/sensorian/sensorian-firmware.git)）。让我们从命令行终端克隆存储库：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s make use of the drivers (which is available in the ` ~/sensorian-firmware/Drivers_Python/APDS-9300`
    folder) to read the values from the two ADC channels of the sensor:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用驱动程序（位于` ~/sensorian-firmware/Drivers_Python/APDS-9300`文件夹中）从传感器的两个ADC通道读取值：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the ADC values available from both the channel, the ambient light value
    can be calculated by the driver using the following formula (retrieved from the
    sensor datasheet):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有了两个通道的ADC值，驱动程序可以使用以下公式（从传感器数据表中检索）计算环境光值：
- en: '![](Images/3af23ebe-b270-47a2-93a3-e379b7a6bea7.png)Ambient light levels calculated
    using the ADC values'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/3af23ebe-b270-47a2-93a3-e379b7a6bea7.png)使用ADC值计算的环境光水平'
- en: This calculation is performed by the attribute `getLuxLevel`. Under normal lighting
    conditions, the ambient light level (measured in lux) was around `2`. The measured
    output was `0` when we covered the lux sensor with the palm. This sensor could
    be used to measure ambient light and adjust the room lighting accordingly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个计算是由属性`getLuxLevel`执行的。在正常照明条件下，环境光水平（以勒克斯为单位）约为`2`。当我们用手掌遮住光传感器时，测得的输出为`0`。这个传感器可以用来测量环境光，并相应地调整房间照明。
- en: Challenge
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: We discussed measuring ambient light levels using the lux sensor. How do we
    make use of the lux output (ambient light levels) to control the room lighting?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了使用光传感器测量环境光水平。我们如何利用光输出（环境光水平）来控制房间照明？
- en: The SPI interface
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SPI接口
- en: There is another type of serial communication interface named the **Serial Peripheral
    Interface** (**SPI**). This interface has to be enabled via `raspi-config` (this
    is similar to enabling serial port interface earlier in this chapter). Using the
    SPI interface is similar to that of I²C interface and the serial port.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种名为**串行外围接口**（**SPI**）的串行通信接口。必须通过`raspi-config`启用此接口（这类似于在本章前面启用串行端口接口）。使用SPI接口类似于I²C接口和串行端口。
- en: Typically, an SPI interface consists of a clock line, data-in, data-out, and
    a **Slave Select** (**SS**) line. Unlike I²C communication (where we could connect
    multiple masters), there can be only one master (the Raspberry Pi Zero), but multiple
    slaves on the same bus. The **SS** pin enables selecting a specific sensor that
    the Raspberry Pi Zero is reading/writing data when there are multiple sensors
    connected to the same bus.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，SPI接口由时钟线、数据输入、数据输出和**从机选择**（**SS**）线组成。与I²C通信不同（在那里我们可以连接多个主机），在同一总线上可以有一个主机（树莓派Zero），但可以有多个从机。**SS**引脚用于选择树莓派Zero正在读取/写入数据的特定传感器，当同一总线上连接了多个传感器时。
- en: Example 4 – writing to external memory chip
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例4 - 写入外部存储器芯片
- en: Let's review an example where we write to a flash memory chip on the Sensorian
    add-on hardware via the SPI interface. The drivers for the SPI interface and the
    memory chip are available from the same GitHub repository.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看一个示例，我们将通过SPI接口向Sensorian附加硬件上的闪存存储器写入数据。SPI接口和存储器芯片的驱动程序可从同一GitHub存储库中获取。
- en: 'Since we already have the drivers downloaded, let''s review an example available
    with drivers:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经下载了驱动程序，让我们查看一下驱动程序中提供的示例：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s initialize and write the message `hello` to the memory:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们初始化并将消息`hello`写入存储器：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s try to read the data we just wrote to the external memory:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试读取刚刚写入外部存储器的数据：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The code sample is available for download with this chapter (`memory_test.py`).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了代码示例，可通过下载获得（`memory_test.py`）。
- en: We were able to demonstrate using the SPI to read/write to an external memory
    chip.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地演示了使用SPI读/写外部存储器芯片。
- en: Challenge to the reader
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向读者提出挑战
- en: In the figure here, there is an LED strip ([https://www.adafruit.com/product/306](https://www.adafruit.com/product/306))
    interfaced to the SPI interface of the Raspberry Pi add on hardware using the
    Adafruit Cobbler ([https://www.adafruit.com/product/914](https://www.adafruit.com/product/914)).
    We are providing a clue on how to interface the LED strip to the Raspberry Pi
    Zero. We would like to see if you are able to find a solution to interface the
    LED strip by yourself. Refer to this book's website for the answer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里的图中，有一个LED灯带（[https://www.adafruit.com/product/306](https://www.adafruit.com/product/306)）与树莓派附加硬件的SPI接口相连，使用了Adafruit
    Cobbler（[https://www.adafruit.com/product/914](https://www.adafruit.com/product/914)）。我们提供了一个线索，说明如何将LED灯带与树莓派Zero相连。我们希望看到您能否自己找到将LED灯带与树莓派Zero相连的解决方案。请参考本书网站获取答案。
- en: '![](Images/34f59388-5614-4414-be56-a3c8f829033f.png)LED strip interfaced with
    the Adafruit Cobbler for the Raspberry Pi Zero'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: LED灯带与树莓派Zero的Adafruit Cobbler接口
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have discussed different communication interfaces that are
    available on the Raspberry Pi Zero. These interfaces include I²C, SPI, and UART.
    We will be making use of these interfaces in our final projects. We discussed
    these interfaces using a carbon dioxide sensor, LED driver, and a sensor platform.
    In the next chapter, we will discuss object-oriented programming and its distinct
    advantages. We will discuss the need for object-oriented programming using an
    example. Object-oriented programming can be especially helpful in scenarios where
    you have to write your own drivers to control a component of your robot or write
    an interface library for a sensor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了树莓派Zero上可用的不同通信接口。这些接口包括I²C、SPI和UART。我们将在我们的最终项目中使用这些接口。我们使用了二氧化碳传感器、LED驱动器和传感器平台来讨论这些接口。在下一章中，我们将讨论面向对象编程及其独特的优势。我们将通过一个例子讨论面向对象编程的必要性。面向对象编程在您需要编写自己的驱动程序来控制机器人的组件或编写传感器的接口库的情况下尤其有帮助。
