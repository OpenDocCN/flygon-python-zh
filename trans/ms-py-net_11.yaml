- en: Working with Git
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Git
- en: We have worked on various aspects of network automation with Python, Ansible,
    and many other tools. If you have been following along with the examples, in the
    first nine chapters of the book, we have used over 150 files containing over 5,300
    lines of code. That's pretty good for network engineers who may have been working
    primarily with the command-line interface! With our new set of scripts and tools,
    we are now ready to go out and conquer our network tasks, right? Well, not so
    fast, my fellow network ninjas.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用Python、Ansible和许多其他工具在网络自动化的各个方面进行了工作。如果您一直在阅读本书的前九章的示例，我们已经使用了超过150个文件，其中包含超过5300行代码。对于可能主要使用命令行界面的网络工程师来说，这是相当不错的！有了我们的新一套脚本和工具，我们现在准备好去征服我们的网络任务了，对吗？嗯，我的同行网络忍者们，不要那么快。
- en: The first task we face with the code files is how to keep them in a location
    where they can be retrieved and used by us and others. Ideally, this location
    would be the only place where the latest version of the file is kept. After the
    initial release, we might add features and fix bugs in the future, so we would
    like a way to track these changes and keep the latest ones available for download.
    If the new changes do not work, we would like to rollback the changes and reflect
    the differences in the history of the file. This would give us a good idea of
    the evolution of the code files.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们面对的第一个任务是如何将代码文件保存在一个位置，以便我们和其他人可以检索和使用。理想情况下，这个位置应该是保存文件的最新版本的唯一位置。在初始发布之后，我们可能会在未来添加功能和修复错误，因此我们希望有一种方式来跟踪这些更改并保持最新版本可供下载。如果新的更改不起作用，我们希望回滚更改并反映文件历史中的差异。这将给我们一个关于代码文件演变的良好概念。
- en: The second question is the collaboration process between our team members. If
    we work with other network engineers, we will need to work collectively on the
    files. The files can be the Python scripts, Ansible Playbook, Jinja2 templates,
    INI-style configuration files, and many others. The point is any kind of text-based
    files should be tracked with multiple input that everybody in the team should
    be able to see.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是我们团队成员之间的协作过程。如果我们与其他网络工程师合作，我们将需要共同在文件上工作。这些文件可以是Python脚本、Ansible Playbook、Jinja2模板、INI风格的配置文件等等。关键是任何一种基于文本的文件都应该被多方输入跟踪，以便团队中的每个人都能看到。
- en: The third question is accountability. Once we have a system that allows for
    multiple inputs and changes, we need to mark these changes with an appropriate
    track record to reflect the owner of the change. The track record should also
    include a brief reason for the change so the person reviewing the history can
    get an understanding of why the change was made.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个问题是责任制。一旦我们有了一个允许多方输入和更改的系统，我们需要用适当的记录来标记这些更改，以反映更改的所有者。记录还应包括更改的简要原因，以便审查历史的人能够理解更改的原因。
- en: These are some of the main challenges a version-control (or source-control)
    system tries to solve. To be fair, version control can exist in forms other than
    a dedicated system. For example, if I open up my Microsoft Word program, the file
    constantly saves itself, and I can go back in time to revisit the changes or rollback
    to a previous version. The version-control system we are focused on here is standalone
    software tools with the primary purpose of tracking software changes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是版本控制（或源代码控制）系统试图解决的一些主要挑战。公平地说，版本控制可以存在于专用系统以外的形式。例如，如果我打开我的Microsoft Word程序，文件会不断保存自身，并且我可以回到过去查看更改或回滚到以前的版本。我们在这里关注的版本控制系统是具有主要目的跟踪软件更改的独立软件工具。
- en: There is no shortage of different source-control tools in software engineering,
    both proprietary and open source. Some of the more popular open source version-control
    systems are CVS, SVN, Mercurial, and Git. In this chapter, we will focus on the
    source-control system **Git**, the tool that we have been downloading in many
    of the `.software` packages we have used in this book. We will be taking a more
    in-depth look at the tool. Git is the de facto version-control system for many
    large, open source projects, including Python and the Linux kernel.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，有各种不同的源代码控制工具，既有专有的也有开源的。一些更受欢迎的开源版本控制系统包括CVS、SVN、Mercurial和Git。在本章中，我们将专注于源代码控制系统**Git**，这是我们在本书中使用的许多`.software`软件包中下载的工具。我们将更深入地了解这个工具。Git是许多大型开源项目的事实上的版本控制系统，包括Python和Linux内核。
- en: As of February 2017, the CPython development process has moved to GitHub. It
    was a work in progress since January 2015\. For more information, check out PEP
    512 at [https://www.python.org/dev/peps/pep-0512/](https://www.python.org/dev/peps/pep-0512/).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2017年2月，CPython开发过程已经转移到GitHub。自2015年1月以来一直在进行中。有关更多信息，请查看[https://www.python.org/dev/peps/pep-0512/](https://www.python.org/dev/peps/pep-0512/)上的PEP
    512。
- en: Before we dive into the working examples of Git, let's take a look at the history
    and advantages of the Git system.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解Git的工作示例之前，让我们先来看看Git系统的历史和优势。
- en: Introduction to Git
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git简介
- en: Git was created by Linus Torvalds, the creator of the Linux kernel, in April
    2005\. With his dry wit, he has affectionately called the tool the information
    manager from hell. In an interview with the Linux Foundation, Linus mentioned
    that he felt source-control management was just about the least interesting thing
    in the computing world ([https://www.linuxfoundation.org/blog/10-years-of-git-an-interview-with-git-creator-linus-torvalds/](https://www.linuxfoundation.org/blog/10-years-of-git-an-interview-with-git-creator-linus-torvalds/)).
    Nevertheless, he created the tool after a disagreement between the Linux kernel
    developer community and BitKeeper, the proprietary system they were using at the
    time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Git是由Linux内核的创造者Linus Torvalds于2005年4月创建的。他幽默地称这个工具为“来自地狱的信息管理者”。在Linux基金会的一次采访中，Linus提到他觉得源代码控制管理在计算世界中几乎是最不有趣的事情。然而，在Linux内核开发社区和当时他们使用的专有系统BitKeeper之间发生分歧后，他还是创建了这个工具。
- en: What does the name Git stand for? In British English slang, a Git is an insult
    denoting an unpleasant, annoying, childish person. With his dry humor, Linus said
    he is an egotistical bastard and that he named all of his projects after himself.
    First Linux, now Git. However, some suggested that the name is short for **Global
    Information Tracker** (**GIT**). You can be the judge.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Git这个名字代表什么？在英国俚语中，Git是一个侮辱性词语，表示一个令人不愉快、恼人、幼稚的人。Linus以他的幽默说他是一个自负的混蛋，所以他把所有的项目都以自己的名字命名。首先是Linux，现在是Git。然而，也有人建议这个名字是**全球信息跟踪器**（**GIT**）的缩写。你可以做出判断。
- en: The project came together really quickly. About ten days after its creation
    (yeah, you read that right), Linus felt the basic ideas for Git were right and
    started to commit the first Linux kernel code with Git. The rest, as they say,
    is history. More than ten years after its creation, it is still meeting all the
    expectations of the Linux kernel project. It took over as the version-control
    system for many other open source projects despite the inherent inertia in switching
    source-control systems. After many years of hosting the Python code from Mercurial
    at [https://hg.python.org/](https://hg.python.org/), the project was switched
    to Git on GitHub in February of 2017.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目很快就成形了。在创建后大约十天（没错，你没看错），Linus觉得Git的基本理念是正确的，开始用Git提交第一个Linux内核代码。其余的，就像他们说的那样，就成了历史。在创建十多年后，它仍然满足Linux内核项目的所有期望。尽管切换源代码控制系统存在固有的惯性，它已经成为许多其他开源项目的版本控制系统。在多年托管Python代码后，该项目于2017年2月在GitHub上切换到Git。
- en: Benefits of Git
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git的好处
- en: 'The success of hosting large and distributed open source projects, such as
    the Linux kernel and Python, speaks to the advantages of Git. This is especially
    significant given that Git is a relatively new source-control tool and people
    do not tend to switch to a new tool unless it offers significant advantages over
    the old tool. Let''s look at some of the benefits of Git:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 像Linux内核和Python这样的大型分布式开源项目的成功托管，证明了Git的优势。这尤其重要，因为Git是一个相对较新的源代码控制工具，人们不倾向于切换到新工具，除非它比旧工具有显著的优势。让我们看看Git的一些好处：
- en: '**Distributed development**: Git supports parallel, independent, and simultaneous
    development in private repositories offline. Compare this to some other version-control
    systems that require constant synchronization with a central repository; this
    allows significantly greater flexibility for the developers.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式开发**：Git支持在私人仓库中进行并行、独立和同时的离线开发。与其他一些版本控制系统需要与中央仓库进行不断同步相比，这为开发人员提供了更大的灵活性。'
- en: '**Scale to handle thousands of developers**: The number of developers working
    on different parts of some of the open source projects is in the thousands. Git
    supports the integration of their work reliably.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展以处理成千上万的开发人员**：许多开源项目的开发人员数量达到了成千上万。Git支持可靠地集成他们的工作。'
- en: '**Performance**: Linus was determined to make sure Git was fast and efficient.
    To save space and transfer time for the sheer volume of updates for the Linux
    kernel code alone, compression and a delta check would be needed to make Git fast
    and efficient.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：Linus决心确保Git快速高效。为了节省空间和传输时间，仅Linux内核代码的更新量就需要压缩和增量检查来使Git快速高效。'
- en: '**Accountability and immutability**: Git enforces a change log on every commit
    that changes a file so that there is a trail for all the changes and the reason
    behind them. The data objects in Git cannot be modified after they were created
    and placed in the database, making them immutable. This further enforces accountability.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**责任和不可变性**：Git强制在每次更改文件的提交时记录更改日志，以便对所有更改和更改原因进行跟踪。Git中的数据对象在创建并放入数据库后无法修改，使它们不可变。这进一步强化了责任。'
- en: '**Atomic transactions**: The integrity of the repository is ensured as the
    different, but related, change is performed either all together or not at all.
    This will ensure the repository is not left in a partially-changed or corrupted
    state.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子事务**：确保仓库的完整性，不同但相关的更改要么一起执行，要么不执行。这将确保仓库不会处于部分更改或损坏的状态。'
- en: '**Complete repositories**: Each repository has a complete copy of all historical
    revisions of every file.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整的仓库**：每个仓库都有每个文件的所有历史修订版本的完整副本。'
- en: '**Free, as in freedom**: The origin of the Git tool was born out of the disagreement
    between free, as in beer version of the Linux kernel with BitKeeper VCS, it makes
    sense that the tool has a very liberal usage license.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自由，就像自由**：Git工具的起源源于Linux内核的免费版本与BitKeeper VCS之间的分歧，因此这个工具有一个非常自由的使用许可证。'
- en: Let's take a look at some of the terms used in Git.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Git中使用的一些术语。
- en: Git terminology
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git术语
- en: 'Here are some Git terminologies we should be familiar with:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些我们应该熟悉的Git术语：
- en: '**Ref**: The name that begins with `refs` that point to an object.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ref**：以`refs`开头指向对象的名称。'
- en: '**Repository**: A database that contains all of a project''s information, files,
    metadata, and history. It contains a collection of `ref` for all the collections
    of objects.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库**：包含项目所有信息、文件、元数据和历史记录的数据库。它包含了所有对象集合的`ref`。'
- en: '**Branch**: An active line of development. The most recent commit is the `tip`
    or the `HEAD` of that branch. A repository can have multiple branches, but your
    `working tree` or `working directory` can only be associated with one branch.
    This is sometimes referred to as the current or `checked out` branch.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支**：活跃的开发线。最近的提交是该分支的`tip`或`HEAD`。存储库可以有多个分支，但您的`工作树`或`工作目录`只能与一个分支关联。有时这被称为当前或`checked
    out`分支。'
- en: '**Checkout**: The action of updating all or part of the working tree to a particular
    point.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检出**：将工作树的全部或部分更新到特定点的操作。'
- en: '**Commit**: A point in time in Git history, or it can mean to store a new snapshot
    into the repository.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交**：Git历史中的一个时间点，或者可以表示将新的快照存储到存储库中。'
- en: '**Merge**: The action to bring the content of another branch into the current
    branch. For example, I am merging the `development` branch with the `master` branch.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并**：将另一个分支的内容合并到当前分支的操作。例如，我正在将`development`分支与`master`分支合并。'
- en: '**Fetch**: The action of getting the content from a remote repository.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取**：从远程存储库获取内容的操作。'
- en: '**Pull**: Fetching and merging a repository.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取**：获取并合并存储库的内容。'
- en: '**Tag**: A mark in a point in time in a repository that is significant. In
    [Chapter 4](2784e1ec-c5d2-4b04-9e57-7db3caf0e310.xhtml), *The Python Automation
    Framework – Ansible Basics*, we saw the tag used to specify the release points, `v2.5.0a1`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：存储库中某个时间点的标记。在[第4章](2784e1ec-c5d2-4b04-9e57-7db3caf0e310.xhtml)中，*Python自动化框架-
    Ansible基础*，我们看到标签用于指定发布点，`v2.5.0a1`。'
- en: This is not a complete list; please refer to the Git glossary, [https://git-scm.com/docs/gitglossary](https://git-scm.com/docs/gitglossary),
    for more terms and their definitions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个完整的列表；请参考Git术语表，[https://git-scm.com/docs/gitglossary](https://git-scm.com/docs/gitglossary)，了解更多术语及其定义。
- en: Git and GitHub
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git和GitHub
- en: Git and GitHub are not the same thing. Sometimes, for engineers who are new
    to version-control systems, this is confusing. Git is a revision-control system
    while GitHub, [https://github.com/](https://github.com/), is a centralized hosting
    service for Git repositories.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Git和GitHub并不是同一回事。对于新手来说，这有时会让工程师感到困惑。Git是一个版本控制系统，而GitHub，[https://github.com/](https://github.com/)，是Git存储库的集中式托管服务。
- en: Because Git is a decentralized system, GitHub stores a copy of our project's
    repository, just like any other developer. Often, we just designate the GitHub
    repository as the project's central repository and all other developers push and
    pull their changes to and from that repository.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Git是一个分散的系统，GitHub存储了我们项目的存储库的副本，就像其他任何开发人员一样。通常，我们将GitHub存储库指定为项目的中央存储库，所有其他开发人员将其更改推送到该存储库，并从该存储库拉取更改。
- en: GitHub takes this idea of being the centralized repository in a distributed
    system further by using the `fork` and `pull requests` mechanisms. For projects
    hosted on GitHub, encourage developers to `fork` the repository, or make a copy
    of the repository, and work on that copy as their centralized repository. After
    making changes, they can send a `pull request` to the main project, and the project
    maintainers can review the changes and `commit` the changes if they see fit. GitHub
    also adds the web interface to the repositories besides command line; this makes
    Git more user-friendly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub通过使用`fork`和`pull requests`机制，进一步将这个在分布式系统中的集中存储库的概念发扬光大。对于托管在GitHub上的项目，鼓励开发人员`fork`存储库，或者复制存储库，并在该复制品上工作作为他们的集中存储库。在做出更改后，他们可以向主项目发送`pull
    request`，项目维护人员可以审查更改，并在适当的情况下`commit`更改。GitHub还除了命令行之外，还为存储库添加了Web界面；这使得Git更加用户友好。
- en: Setting up Git
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Git
- en: So far, we have been using Git to just download files from GitHub. In this section,
    we will go a bit further by setting up Git variables so we can start committing
    our files. I am going to use the same Ubuntu 16.04 host in the example. The installation
    process is well-documented; if you are using a different version of Linux or other
    operating systems, a quick search should land you at the right set of instructions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是使用Git从GitHub下载文件。在本节中，我们将进一步设置Git变量，以便开始提交我们的文件。我将在示例中使用相同的Ubuntu
    16.04主机。安装过程有很好的文档记录；如果您使用的是不同版本的Linux或其他操作系统，快速搜索应该能找到正确的指令集。
- en: 'If you have not done so already, install Git via the `apt` package-management
    tool:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请通过`apt`软件包管理工具安装Git：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once `git` is installed, we need to configure a few things so our commit messages
    can contain the correct information:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`git`之后，我们需要配置一些东西，以便我们的提交消息可以包含正确的信息：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Alternatively, you can modify the information in the `~/.gitconfig` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以修改`~/.gitconfig`文件中的信息：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are many other options in Git that we can change, but the name and email
    are the ones that allow us to commit the change without getting a warning. Personally,
    I like to use VIM, instead of the default Emac, as my text editor for typing commit
    messages:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Git中还有许多其他选项可以更改，但是名称和电子邮件是允许我们提交更改而不会收到警告的选项。个人而言，我喜欢使用VIM，而不是默认的Emac，作为我的文本编辑器来输入提交消息：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before we move on to using Git, let's go over the idea of a `gitignore` file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续使用Git之前，让我们先了解一下`gitignore`文件的概念。
- en: Gitignore
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gitignore
- en: From time to time, there are files you do not want Git to check into GitHub
    or other repositories. The easiest way to do this is to create `.gitignore` in
    the `repository` folder; Git will use it to determine which files a directory
    should ignore before you make a commit. This file should be committed into the
    repository to share the ignore rules with other users.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，有些文件您不希望Git检查到GitHub或其他存储库中。这样做的最简单方法是在`repository`文件夹中创建`.gitignore`；Git将使用它来确定在进行提交之前应该忽略哪些文件。这个文件应该提交到存储库中，以便与其他用户共享忽略规则。
- en: 'This file can include language-specific files, for example, let''s exclude
    the Python `Byte-compiled` files:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件可以包括特定于语言的文件，例如，让我们排除Python的`Byte-compiled`文件：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can also include files that are specific to your operating system:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以包括特定于您的操作系统的文件：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can learn more about `.gitignore` on GitHub''s help page: [https://help.github.com/articles/ignoring-files/](https://help.github.com/articles/ignoring-files/).
    Here are some other references:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub的帮助页面上了解更多关于`.gitignore`的信息：[https://help.github.com/articles/ignoring-files/](https://help.github.com/articles/ignoring-files/)。以下是一些其他参考资料：
- en: Gitignore manual: [https://git-scm.com/docs/gitignore](https://git-scm.com/docs/gitignore)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gitignore手册：[https://git-scm.com/docs/gitignore](https://git-scm.com/docs/gitignore)
- en: GitHub's collection of `.gitignore` templates: [https://github.com/github/gitignore](https://github.com/github/gitignore)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub的`.gitignore`模板集合：[https://github.com/github/gitignore](https://github.com/github/gitignore)
- en: Python language `.gitignore` example: [https://github.com/github/gitignore/blob/master/Python.gitignore](https://github.com/github/gitignore/blob/master/Python.gitignore)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python语言`.gitignore`示例：[https://github.com/github/gitignore/blob/master/Python.gitignore](https://github.com/github/gitignore/blob/master/Python.gitignore)
- en: The `.gitignore` file for this book's repository: [https://github.com/PacktPublishing/Mastering-Python-Networking-Second-Edition/blob/master/.gitignore](https://github.com/PacktPublishing/Mastering-Python-Networking-Second-Edition/blob/master/.gitignore)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书存储库的`.gitignore`文件：[https://github.com/PacktPublishing/Mastering-Python-Networking-Second-Edition/blob/master/.gitignore](https://github.com/PacktPublishing/Mastering-Python-Networking-Second-Edition/blob/master/.gitignore)
- en: I see the `.gitignore` file as a file that should be created at the same time
    as any new repository. That is why this concept is introduced as early as possible.
    We will take a look at some of the Git usage examples in the next section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为`.gitignore`文件应该与任何新存储库同时创建。这就是为什么这个概念尽早被引入的原因。我们将在下一节中看一些Git使用示例。
- en: Git usage examples
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git使用示例
- en: 'Most of the time, when we work with Git, we will use the command line:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，当我们使用Git时，我们会使用命令行：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will create a `repository` and create a file inside the repository:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`repository`并在其中创建一个文件：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the repository was initialized with Git, a new hidden folder of `.git`
    was added to the directory. It contains all the Git-related files:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Git初始化存储库时，会在目录中添加一个新的隐藏文件夹`.git`。它包含所有与Git相关的文件：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are several locations Git receives its configurations in a hierarchy
    format. You can use the `git config -l` command to see the aggregated configuration:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Git接收其配置的位置有几个层次结构。您可以使用`git config -l`命令来查看聚合配置：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When we create a file in the repository, it is not tracked. For `git` to be
    aware of the file, we need to add the file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在存储库中创建一个文件时，它不会被跟踪。为了让`git`意识到这个文件，我们需要添加这个文件：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When you add the file, it is in a staged status. To make the changes official,
    we will need to commit the change:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当您添加文件时，它处于暂存状态。为了使更改生效，我们需要提交更改：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the last example, we provided the commit message with the `-m` option when
    we issue the commit statement. If we did not use the option, we would have been
    taken to a page to provide the commit message. In our scenario, we configured
    the text editor to be vim so we will be able to use vim to edit the message.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们在发出提交语句时使用了`-m`选项来提供提交消息。如果我们没有使用该选项，我们将被带到一个页面上来提供提交消息。在我们的情况下，我们配置了文本编辑器为vim，因此我们将能够使用vim来编辑消息。
- en: 'Let''s make some changes to the file and commit it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对文件进行一些更改并提交它：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `git commit` number is a `SHA1 hash`, which an important feature. If we
    had followed the same step on another computer, our `SHA1 hash` value would be
    the same. This is how Git knows the two repositories are identical even when they
    are worked on in parallel.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`git commit`号是一个`SHA1哈希`，这是一个重要的特性。如果我们在另一台计算机上按照相同的步骤操作，我们的`SHA1哈希`值将是相同的。这就是Git知道这两个存储库在并行工作时是相同的方式。'
- en: 'We can show the history of the commits with `git log`. The entries are shown
    in reverse chronological order; each commit shows the author''s name and email
    address, the date, the log message, as well as the internal identification number
    of the commit:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`git log`来显示提交的历史记录。条目以相反的时间顺序显示；每个提交显示作者的姓名和电子邮件地址，日期，日志消息，以及提交的内部标识号：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can also show more details about the change using the commit ID:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用提交ID来显示更改的更多细节：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you need to revert the changes you have made, you can choose between `revert`
    and `reset`. Revert changes all the file for a specific commit back to their state
    before the commit:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要撤消所做的更改，您可以选择`revert`和`reset`之间。`revert`将特定提交的所有文件更改回到它们在提交之前的状态：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `revert` command will keep the commit you reverted and make a new commit.
    You will be able to see all the changes up to that point, including the revert:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`revert`命令将保留您撤消的提交并创建一个新的提交。您将能够看到到那一点的所有更改，包括撤消：'
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `reset` option will reset the status of your repository to an older version
    and discard all the changes in between:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`reset`选项将将存储库的状态重置为旧版本，并丢弃其中的所有更改：'
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Personally, I like to keep all the history, including any rollbacks that I have
    done. Therefore, when I need to rollback a change, I usually pick `revert` instead
    of `reset`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我喜欢保留所有历史记录，包括我所做的任何回滚。因此，当我需要回滚更改时，我通常选择`revert`而不是`reset`。
- en: 'A `branch` in `git` is a line of development within a repository. Git allows
    many branches and thus different lines of development within a repository. By
    default, we have the master branch. There are many reasons for branching, but
    most of them represent an individual customer release or a development phase,
    that is, the `dev` branch. Let''s create a `dev` branch within our repository:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`git`中的`分支`是存储库内的开发线。Git允许在存储库内有许多分支和不同的开发线。默认情况下，我们有主分支。分支的原因有很多，但大多数代表单个客户发布或开发阶段，即`dev`分支。让我们在我们的存储库中创建一个`dev`分支：'
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To start working on the branch, we will need to `checkout` the branch:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在分支上工作，我们需要`检出`该分支：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s add a second file to the `dev` branch:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`dev`分支中添加第二个文件：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can go back to the `master` branch and verify that the two lines of development
    are separate:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以回到`master`分支并验证两行开发是分开的：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To have the contents in the `dev` branch be written into the `master` branch,
    we will need to `merge` them:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将`dev`分支中的内容写入`master`分支，我们需要将它们`合并`：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can use `git rm` to remove a file. Let''s create a third file and remove
    it:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`git rm`来删除文件。让我们创建第三个文件并将其删除：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will be able to see the last two changes in the log:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将能够在日志中看到最后两次更改：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have gone through most of the basic operations we would use for Git. Let's
    take a look at how to use GitHub to share our repository.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了Git的大部分基本操作。让我们看看如何使用GitHub共享我们的存储库。
- en: GitHub example
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub示例
- en: In this example, we will use GitHub as the centralized location to synchronize
    our local repository and share with other users.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用GitHub作为同步我们的本地存储库并与其他用户共享的集中位置。
- en: 'We will create a repository on GitHub. By default, GitHub has a free public
    repository; in my case, I pay a small monthly fee to host private repositories.
    At the time of creation, you can choose to create the license and the `.gitignore`
    file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在GitHub上创建一个存储库。默认情况下，GitHub有一个免费的公共存储库；在我的情况下，我支付一个小额的月费来托管私人存储库。在创建时，您可以选择创建许可证和`.gitignore`文件：
- en: '![](assets/62b8ab5d-063e-438a-9705-88d7472f9f8f.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62b8ab5d-063e-438a-9705-88d7472f9f8f.png)'
- en: GitHub private repository
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub私人存储库
- en: 'Once the repository is created, we can find the URL for this repository:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库创建后，我们可以找到该存储库的URL：
- en: '![](assets/f0203a9a-1927-4afc-9b44-492d918e31d4.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f0203a9a-1927-4afc-9b44-492d918e31d4.png)'
- en: GitHub repository URL
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub存储库URL
- en: 'We will use this URL to create a `remote` target; we will name it `gitHubRepo`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用此URL创建一个`远程`目标；我们将其命名为`gitHubRepo`：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Since we chose to create a `README.md` and `LICENSE` file during creation,
    the remote repository and current repository are not the same. If we were to push
    local changes to the GitHub repository, we would receive the following error:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们选择在创建时创建`README.md`和`LICENSE`文件，远程存储库和当前存储库不同。如果我们将本地更改推送到GitHub存储库，将收到以下错误：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will go ahead and use `git pull` to get the new files from GitHub:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用`git pull`从GitHub获取新文件：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we will be able to `push` the contents over to GitHub:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将能够将内容`推送`到GitHub：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can verify the content of the GitHub repository on the web page:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在网页上验证GitHub存储库的内容：
- en: '![](assets/d7d01d22-b4a7-45e3-9230-faa30494b5af.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d7d01d22-b4a7-45e3-9230-faa30494b5af.png)'
- en: GitHub repository
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub存储库
- en: 'Now another user can simply make a copy, or `clone`, of the repository:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在另一个用户可以简单地制作存储库的副本，或`克隆`：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This copied repository will be the exact copy of my original repository, including
    all the commit history:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个复制的存储库将是我原始存储库的精确副本，包括所有提交历史：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'I can also invite another person as a collaborator for the project under the
    repository setting:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我还可以在存储库设置下邀请另一个人作为项目的合作者：
- en: '![](assets/49c734fa-c413-4bc2-98fe-b392520dec52.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/49c734fa-c413-4bc2-98fe-b392520dec52.png)'
- en: Repository invite
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库邀请
- en: In the next example, we will see how we can fork a repository and perform a
    pull request for a repository that we do not maintain.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个例子中，我们将看到如何分叉存储库并为我们不维护的存储库发起拉取请求。
- en: Collaborating with pull requests
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过拉取请求进行协作
- en: As mentioned, Git supports collaboration between developers for a single project.
    We will take a look at how it is done when the code is hosted on GitHub.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Git支持开发人员之间的合作，用于单个项目。我们将看看当代码托管在GitHub上时是如何完成的。
- en: 'In this case, I am going to take a look at the GitHub repository for this book.
    I am going to use a different GitHub handle, so I appear as a different user.
    I will click on the Fork bottom to make a copy of the repository in my personal
    account:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我将查看这本书的GitHub存储库。我将使用不同的GitHub句柄，所以我会以不同的用户身份出现。我将点击分叉按钮，在我的个人帐户中制作存储库的副本：
- en: '![](assets/5e9563c6-d5df-41b6-a780-797aa8e88afb.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e9563c6-d5df-41b6-a780-797aa8e88afb.png)'
- en: Git fork bottom
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Git分叉底部
- en: 'It will take a few seconds to make a copy:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 制作副本需要几秒钟：
- en: '![](assets/7c4ffe85-465d-4874-a9aa-12e02fa89634.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c4ffe85-465d-4874-a9aa-12e02fa89634.png)'
- en: Git fork in progress
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Git正在进行分叉
- en: 'After it is forked, we will have a copy of the repository in our personal account:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉后，我们将在我们的个人帐户中拥有存储库的副本：
- en: '![](assets/6ec1babb-d96b-4b24-9dc5-e160acb2440f.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6ec1babb-d96b-4b24-9dc5-e160acb2440f.png)'
- en: Git fork
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Git分叉
- en: 'We can follow the same steps we have used before to make some modifications
    to the files. In this case, I will make some changes to the `README.md` file.
    After the change is made, I can click on the New pull request button to create
    a pull request:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照之前使用过的相同步骤对文件进行一些修改。在这种情况下，我将对`README.md`文件进行一些更改。更改完成后，我可以点击“新拉取请求”按钮来创建一个拉取请求：
- en: '![](assets/080bb0d8-2ecc-4778-b9be-8753ed38db7b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/080bb0d8-2ecc-4778-b9be-8753ed38db7b.png)'
- en: Pull request
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求
- en: 'When making a pull request, we should fill in as much information as possible
    to provide justifications for making the change:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在发起拉取请求时，我们应尽可能填写尽可能多的信息，以提供更改的理由：
- en: '![](assets/87417bd2-789c-42f5-b5cc-d79e341451cd.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/87417bd2-789c-42f5-b5cc-d79e341451cd.png)'
- en: Pull request details
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求详细信息
- en: 'The repository maintainer will receive a notification of the pull request;
    if accepted, the change will make its way to the original repository:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库维护者将收到拉取请求的通知；如果被接受，更改将传递到原始存储库：
- en: '![](assets/8cecc7d3-149e-4400-a506-7b4404e530bf.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8cecc7d3-149e-4400-a506-7b4404e530bf.png)'
- en: Pull request record
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求记录
- en: GitHub provides an excellent platform for collaboration with other developers;
    this is quickly becoming the de facto development choice for many large, open
    source projects. In the following section, let's take a look at how we can use
    Git with Python.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub为与其他开发人员合作提供了一个出色的平台；这很快成为了许多大型开源项目的事实开发选择。在接下来的部分，让我们看看如何使用Python与Git。
- en: Git with Python
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python的Git
- en: There are some Python packages that we can use with Git and GitHub. In this
    section, we will take a look at the GitPython and PyGithub libraries.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些Python包可以与Git和GitHub一起使用。在本节中，我们将看一下GitPython和PyGithub库。
- en: GitPython
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitPython
- en: 'We can use the GitPython package, [https://gitpython.readthedocs.io/en/stable/index.html](https://gitpython.readthedocs.io/en/stable/index.html),
    to work with our Git repository. We will install the package and use the Python
    shell to construct a `Repo` object. From there, we can list all the commits in
    the repository:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用GitPython包[https://gitpython.readthedocs.io/en/stable/index.html](https://gitpython.readthedocs.io/en/stable/index.html)来处理我们的Git存储库。我们将安装该包并使用Python
    shell来构建一个`Repo`对象。从那里，我们可以列出存储库中的所有提交：
- en: '[PRE31]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can also look at the index entries:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看索引条目：
- en: '[PRE32]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: GitPython offers good integration with all the Git functions. However, it is
    not the easiest to work with. We need to understand the terms and structure of
    Git to take full advantage of GitPython. But it is always good to keep it in mind
    in case we need it for other projects.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: GitPython与所有Git功能集成良好。但是它并不是最容易使用的。我们需要了解Git的术语和结构，以充分利用GitPython。但是要记住，以防我们需要它用于其他项目。
- en: PyGitHub
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyGitHub
- en: 'Let''s look at using the PyGitHub package, [http://pygithub.readthedocs.io/en/latest/](http://pygithub.readthedocs.io/en/latest/),
    to interact with GitHub repositories. The package is a wrapper around GitHub APIv3,
    [https://developer.github.com/v3/](https://developer.github.com/v3/):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用PyGitHub包[http://pygithub.readthedocs.io/en/latest/](http://pygithub.readthedocs.io/en/latest/)与GitHub存储库进行交互。该包是围绕GitHub
    APIv3的包装器[https://developer.github.com/v3/](https://developer.github.com/v3/)：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s use the Python shell to print out the user''s current repository:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Python shell来打印用户当前的存储库：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For more programmatic access, we can also create more granular control using
    an access token. Github allows a token to be associated with the selected rights:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更多的编程访问，我们还可以使用访问令牌创建更细粒度的控制。Github允许令牌与所选权限关联：
- en: '![](assets/ee987cae-5c00-4fc8-a0d7-78299cbf0e9a.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ee987cae-5c00-4fc8-a0d7-78299cbf0e9a.png)'
- en: GitHub token generation
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub令牌生成
- en: 'The output is a bit different if you use the access token as the authentication
    mechanism:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用访问令牌作为认证机制，输出会有些不同：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now that we are familiar with Git, GitHub, and some of the Python packages,
    we can use them to work with the technology. We will take a look at some practical
    examples in the coming section.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们熟悉了Git、GitHub和一些Python包，我们可以使用它们来处理技术。在接下来的部分，我们将看一些实际的例子。
- en: Automating configuration backup
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化配置备份
- en: In this example, we will use PyGithub to back up a directory containing our
    router configurations. We have seen how we can retrieve the information from our
    devices with Python or Ansible; we can now check them into GitHub.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用PyGithub来备份包含我们路由器配置的目录。我们已经看到了如何使用Python或Ansible从我们的设备中检索信息；现在我们可以将它们检入GitHub。
- en: 'We have a subdirectory, named `config`, with our router configs in text format:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个子目录，名为`config`，其中包含我们的路由器配置的文本格式：
- en: '[PRE36]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can use the following script to retrieve the latest index from our GitHub
    repository, build the content that we need to commit, and automatically commit
    the configuration:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下脚本从我们的GitHub存储库中检索最新的索引，构建我们需要提交的内容，并自动提交配置：
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can see the `configs` directory in the GitHub repository:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在GitHub存储库中看到`configs`目录：
- en: '![](assets/bbc515e8-57e3-4942-87ce-cd5f36ba8662.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bbc515e8-57e3-4942-87ce-cd5f36ba8662.png)'
- en: Configs directory
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Configs目录
- en: 'The commit history shows the commit from our script:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 提交历史显示了我们脚本的提交：
- en: '![](assets/74cb1602-7bad-4888-b920-78a54d3c3051.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/74cb1602-7bad-4888-b920-78a54d3c3051.png)'
- en: Commit history
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 提交历史
- en: In the *GitHub example* section, we saw how we could collaborate with other
    developers by forking the repository and making pull requests. Let's look at how
    we can further collaborate with Git.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在*GitHub示例*部分，我们看到了如何通过分叉存储库并发出拉取请求与其他开发人员合作。让我们看看如何进一步使用Git进行协作。
- en: Collaborating with Git
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Git协作
- en: Git is an awesome collaboration technology, and GitHub is an incredibly effective
    way to develop projects together. GitHub provides a place for anyone in the world
    with internet access to share their thoughts and code for free. We know how to
    use Git and some of the basic collaboration steps using GitHub, but how do we
    join and contribute to a project? Sure, we would like to give back to these open
    source projects that have given us so much, but how do we get started?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一种很棒的协作技术，而GitHub是一种非常有效的共同开发项目的方式。GitHub为世界上任何有互联网访问权限的人提供了一个免费分享他们的想法和代码的地方。我们知道如何使用Git和一些基本的GitHub协作步骤，但是我们如何加入并为一个项目做出贡献呢？当然，我们想回馈给那些给予我们很多的开源项目，但是我们如何开始呢？
- en: 'In this section, we''ll look at some of the things to know about software-development
    collaboration using Git and GitHub:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一些关于使用Git和GitHub进行软件开发协作的要点：
- en: '**Start small**: One of the most important things to understand is the role
    we can play within a team. We might be awesome at network engineering but a mediocre
    Python developer. There are plenty of things we can do that don''t involve being
    a highly-skilled developer. Don''t be afraid to start small, documentation and
    testing are two good ways to get your foot in the door as a contributor.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从小开始**：理解的最重要的事情之一是我们在团队中可以扮演的角色。我们可能擅长网络工程，但是Python开发水平一般。有很多事情我们可以做，不一定要成为高技能的开发者。不要害怕从小事做起，文档编写和测试是成为贡献者的好方法。'
- en: '**Learn the ecosystem**: With any project, large or small, there is a set of
    conventions and a culture that has been established. We are all drawn to Python
    for its easy-to-read syntax and beginner-friendly culture; they also have a development
    guide that is centered around that ideology ([https://devguide.python.org/](https://devguide.python.org/)).
    The Ansible project, on the other hand, also has an extensive community guide
    ([https://docs.ansible.com/ansible/latest/community/index.html](https://docs.ansible.com/ansible/latest/community/index.html)).
    It includes the code of conduct, the pull request process, how to report bugs,
    and the release process. Read these guides and learn the ecosystem for the project
    of interest.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习生态系统**：对于任何项目，无论大小，都有一套已经建立的惯例和文化。我们都被Python的易于阅读的语法和初学者友好的文化所吸引；他们还有一个围绕这种意识形态的开发指南（[https://devguide.python.org/](https://devguide.python.org/)）。另一方面，Ansible项目还有一个广泛的社区指南（[https://docs.ansible.com/ansible/latest/community/index.html](https://docs.ansible.com/ansible/latest/community/index.html)）。它包括行为准则、拉取请求流程、如何报告错误以及发布流程。阅读这些指南，了解感兴趣项目的生态系统。'
- en: '**Make a branch**: I have made the mistake of forking a project and making
    a pull request for the main branch. The main branch should be left alone for the
    core contributors to make changes to. We should create a separate branch for our
    contribution and allow the branch to be merged at a later date.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建分支**：我犯了一个错误，分叉了一个项目并为主分支提出了拉取请求。主分支应该留给核心贡献者进行更改。我们应该为我们的贡献创建一个单独的分支，并允许在以后的某个日期合并该分支。'
- en: '**Keep forked repository synchronized**: Once you have forked a project, there
    is no rule that forces the cloned repository to sync with the main repository.
    We should make a point to regularly do `git pull` (get the code and merge locally)
    or `git fetch` (get the code with any change locally) to make sure we have the
    latest copy of the main repository.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持分叉存储库同步**：一旦您分叉了一个项目，就没有规则强制克隆存储库与主存储库同步。我们应该定期执行`git pull`（获取代码并在本地合并）或`git
    fetch`（获取本地任何更改的代码）以确保我们拥有主存储库的最新副本。'
- en: '**Be friendly**: Just as in the real world, the virtual world has no place
    for hostility. When discussing an issue, be civil and friendly, even in disagreements.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**友善相处**：就像现实世界一样，虚拟世界也不容忍敌意。讨论问题时，要文明友好，即使意见不一致也是如此。'
- en: Git and GitHub provide a way for any motivated individual to make a difference
    by making it easy to collaborate on projects. We are all empowered to contribute
    to any open source or private projects that we find interesting.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Git和GitHub为任何有动力的个人提供了一种方式，使其易于在项目上进行协作，从而产生影响。我们都有能力为任何我们感兴趣的开源或私有项目做出贡献。
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the version-control system known as Git and its
    close sibling, GitHub. Git was developed by Linus Torvolds in 2005 to help develop
    the Linux kernel and later adopted by other open source projects as the source-control
    system. Git is a fast, distributed, and scalable system. GitHub provides a centralized
    location to host Git repositories on the internet that allow anybody with an internet
    connection to collaborate.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下被称为Git的版本控制系统及其近亲GitHub。Git是由Linus Torvolds于2005年开发的，用于帮助开发Linux内核，后来被其他开源项目采用为源代码控制系统。Git是一个快速、分布式和可扩展的系统。GitHub提供了一个集中的位置在互联网上托管Git存储库，允许任何有互联网连接的人进行协作。
- en: 'We looked at how to use Git in the command line, its various operations, and
    how they are applied in GitHub. We also studied two of the popular Python libraries
    for working with Git: GitPython and PyGitHub. We ended the chapter with a configuration
    backup example and notes about project collaboration.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看了如何在命令行中使用Git，以及它的各种操作，以及它们在GitHub中的应用。我们还研究了两个用于处理Git的流行Python库：GitPython和PyGitHub。我们以一个配置备份示例和关于项目协作的注释结束了本章。
- en: 'In [Chapter 12](5a99fe1f-da17-491c-96a2-4511ff2f4803.xhtml), *Continuous Integration
    with Jenkins*, we will look at another popular open source tool used for continuous
    integration and deployment: Jenkins.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](5a99fe1f-da17-491c-96a2-4511ff2f4803.xhtml)中，*使用Jenkins进行持续集成*，我们将看另一个流行的开源工具，用于持续集成和部署：Jenkins。
