- en: HTTP Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP编程
- en: This chapter will introduces you to the HTTP protocol and covers how we can
    retrieve and manipulate web content using Python. We will also review the `urllib`
    standard library and `requests` package. `urllib2` is a Python module for fetching
    URLs. It offers a very simple interface, in the form of the `urlopen` function.
    The request package is a very useful tool if we want to make requests to API endpoints
    to streamline HTTP workflows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍HTTP协议，并介绍如何使用Python检索和操作Web内容。我们还将回顾`urllib`标准库和`requests`包。`urllib2`是用于获取URL的Python模块。它提供了一个非常简单的接口，以`urlopen`函数的形式。如果我们想要向API端点发出请求以简化HTTP工作流程，请求包是一个非常有用的工具。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the HTTP Protocol and building HTTP clients in Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解HTTP协议和在Python中构建HTTP客户端
- en: Understanding the `urllib` package to query a REST API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`urllib`包以查询REST API
- en: Understanding the `requests` package to query a REST API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`requests`包以查询REST API
- en: Understanding the different authentication mechanisms and how they are implemented
    in Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解不同的身份验证机制以及它们在Python中的实现方式
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter 4` folder: [https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security.](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security.)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例和源代码可在GitHub存储库的`第4章`文件夹中找到：[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security.](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security.)
- en: You will need to install Python distribution in your local machine and have
    some basic knowledge about the HTTP protocol.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在本地计算机上安装Python发行版，并对HTTP协议有一些基本的了解。
- en: HTTP protocol and building HTTP clients in python
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP协议和在Python中构建HTTP客户端
- en: 'In this section, we are going to introduce the HTTP protocol and how we can
    build HTTP clients with httplib. HTTP is an application-layer protocol that basically
    consists of two elements: a request made by the client, which requests from the
    server a specific resource specified by a URL, and a response, sent by the server,
    that supplies the resource that the client requested.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍HTTP协议以及如何使用httplib构建HTTP客户端。HTTP是一个应用层协议，基本上由两个元素组成：客户端发出的请求，该请求从服务器请求由URL指定的特定资源，以及服务器发送的响应，提供客户端请求的资源。
- en: Introduction to  the HTTP Protocol
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP协议介绍
- en: The HTTP protocol is a stateless hyper-text data-transfer protocol that does
    not store the information exchanged between the client and server. This protocol
    defines the rules that clients, proxies, and servers must follow to exchange information.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议是一种无状态的超文本数据传输协议，不存储客户端和服务器之间交换的信息。该协议定义了客户端、代理和服务器必须遵循的规则以交换信息。
- en: Being a stateless protocol for storing information related to an HTTP transaction,
    it is necessary to resort to other techniques, such as cookies (values stored
    on the client side) or sessions (temporary memory spaces reserved to store information
    about one or more HTTP transactions on the server side).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 作为存储与HTTP事务相关信息的无状态协议，有必要采用其他技术，如cookie（存储在客户端上的值）或会话（用于在服务器端临时存储有关一个或多个HTTP事务的信息的临时内存空间）。
- en: The servers returns an HTTP code indicating the result of an operation requested
    by the client; in addition, headers can be used in the requests to include extra
    information in both requests and responses.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器返回一个HTTP代码，指示客户端请求的操作结果；此外，头部可以在请求中使用，以在请求和响应中包含额外信息。
- en: The HTTP protocol uses the sockets at the lowest level to establish a connection
    between the client and server. In Python, we have the possibility of using a module
    of a higher level that abstracts us from the operation of the sockets at a low
    level.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议在最低级别使用套接字来建立客户端和服务器之间的连接。在Python中，我们有可能使用一个更高级别的模块，它将我们从低级别套接字的操作中抽象出来。
- en: Building an HTTP Client with httplib
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用httplib构建HTTP客户端
- en: Python provides a series of modules to create an HTTP client. The modules that
    Python provides in the standard library are `httplib`, `urllib`, and `urllib2`.
    These modules have different capabilities among all of them, but they are useful
    for most of your web tests. We can also find `httplib` packages and requests that
    provide some improvements over the standard `httplib` module.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了一系列模块来创建HTTP客户端。Python提供的标准库中的模块有`httplib`、`urllib`和`urllib2`。这些模块在所有模块中具有不同的功能，但它们对于大多数Web测试都是有用的。我们还可以找到提供一些改进的`httplib`模块和请求的包。
- en: This module defines a class that implements the `HTTPConnection` class.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块定义了一个实现`HTTPConnection`类的类。
- en: 'The class accepts a host and a port as parameters. The host is required and
    the port is optional. An instance of this class represents a transaction with
    an HTTP server. It must be instantiated by passing a server identifier and an
    optional port number. If the port number is not specified, the port number of
    the server-identification string is extracted if it has the form host: port, otherwise
    the default HTTP port (80) is used.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该类接受主机和端口作为参数。主机是必需的，端口是可选的。该类的实例表示与HTTP服务器的交易。必须通过传递服务器标识符和可选的端口号来实例化它。如果未指定端口号，则如果服务器标识字符串具有主机：端口的形式，则提取端口号，否则使用默认的HTTP端口（80）。
- en: 'You can find the following code in the `request_httplib.py`file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`request_httplib.py`文件中找到以下代码：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Building an HTTP Client with urllib2
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用urllib2构建HTTP客户端
- en: In this section, we will learn how to use `urllib2` and how we can build HTTP
    clients with that module.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用`urllib2`以及如何使用该模块构建HTTP客户端。
- en: Introduction to urllib2
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍urllib2
- en: '`urllib2` can read data from a URL using various protocols, such as HTTP, HTTPS,
    FTP, or Gopher. This module provides `urlopen` function used to create an object
    similar to a file with which can to read from the URL. This object has methods
    such as `read()`, `readline()`, `readlines()`, and `close()`, which work exactly
    the same as in the file objects, although in reality we are working with a wrapper
    that abstracts us from using a socket at low level.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`urllib2`可以使用各种协议（如HTTP、HTTPS、FTP或Gopher）从URL读取数据。该模块提供了`urlopen`函数，用于创建类似文件的对象，可以从URL读取数据。该对象具有诸如`read()`、`readline()`、`readlines()`和`close()`等方法，其工作方式与文件对象完全相同，尽管实际上我们正在使用一个抽象我们免于使用底层套接字的包装器。'
- en: The `read` method, as you will remember, is used to read the complete "file"
    or the number of bytes specified as a parameter, readline to read a line, and
    readlines to read all the lines and return a list with them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`方法，正如您记得的那样，用于读取完整的“文件”或作为参数指定的字节数，readline用于读取一行，readlines用于读取所有行并返回一个包含它们的列表。'
- en: We also have a couple of `geturl` methods, to get the URL of the one we are
    reading (which can be useful to check whether there was a redirection) and info
    that returns an object with the server response headers (which can also be accessed
    through the headers attribute).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一些`geturl`方法，用于获取我们正在读取的URL（这对于检查是否有重定向很有用），以及返回一个带有服务器响应头的对象的info（也可以通过headers属性访问）。
- en: In the next example we open a web page using `urlopen()`. When we pass a URL
    to the `urlopen()` method, it will return an object, we can use the `read()` attribute
    to get the data from this object in a string format.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们使用`urlopen()`打开一个网页。当我们将URL传递给`urlopen()`方法时，它将返回一个对象，我们可以使用`read()`属性以字符串格式获取该对象的数据。
- en: 'You can find the following code in the `urllib2_basic.py`file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`urllib2_basic.py`文件中找到以下代码：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When working with `urllib2` module, also we need manage errors and exception
    type `URLError`.  If we work with HTTP, we can also find errors in the subclass
    of `URLError` `HTTPError`, which are thrown when the server returns an HTTP error
    code, such as 404 error when the resource is not found.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`urllib2`模块时，我们还需要处理错误和异常类型`URLError`。如果我们使用HTTP，还可以在`URLError`的子类`HTTPError`中找到错误，当服务器返回HTTP错误代码时会抛出这些错误，比如当资源未找到时返回404错误。
- en: The `urlopen` function has an optional data parameter with which to send information
    to HTTP addresses using POST (parameters are sent in the request itself), for
    example to respond to a form. This parameter is a properly-encoded string, following
    the format used in the URLs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`urlopen`函数有一个可选的数据参数，用于使用POST发送信息到HTTP地址（参数在请求本身中发送），例如响应表单。该参数是一个正确编码的字符串，遵循URL中使用的格式。'
- en: Response objects
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应对象
- en: Let's explore the response object in detail. We can see in the previous example
    that `urlopen ()` returns an instance of the `http.client.HTTPResponse` class.
    The response object returns information about the requested resource data, and
    the properties and metadata of the response.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细探讨响应对象。我们可以在前面的示例中看到`urlopen()`返回`http.client.HTTPResponse`类的实例。响应对象返回有关请求的资源数据以及响应的属性和元数据。
- en: 'The following code makes a simple request with urllib2:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用urllib2进行简单的请求：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `read()` method allows us to read the requested resource data and return
    the specified number of bytes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`read()`方法允许我们读取请求的资源数据并返回指定的字节数。'
- en: Status codes
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态码
- en: 'We can read the status code of a response using its **status** property. The
    value of 200 is an HTTP status code that tells us that the request is OK:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用其**status**属性读取响应的状态码。200的值是一个告诉我们请求OK的HTTP状态码：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Status codes are classified into the following groups:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 状态码分为以下几组：
- en: '**100:** Informational'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**100:** 信息'
- en: '**200:** Success'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**200:** 成功'
- en: '**300:** Redirection'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**300:** 重定向'
- en: '**400:** Client error'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**400:** 客户端错误'
- en: '**500:** Server error'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**500:** 服务器错误'
- en: Checking HTTP headers with urllib2
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用urllib2检查HTTP头
- en: 'HTTP requests consist of two main parts: headers and a body. Headers are the
    lines of information that contain specific metadata about the response that tells
    the client how to interpret it. With this module we can check whether the headers
    can provide information about the web server.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求由两个主要部分组成：头部和主体。头部是包含有关响应的特定元数据的信息行，告诉客户端如何解释它。使用此模块，我们可以检查头部是否可以提供有关Web服务器的信息。
- en: The `http_response.headers` statement provides the header of the web server.
    Before we access this property, we need to check whether the code response is
    equal to `200`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`http_response.headers`语句提供了Web服务器的头部。在访问此属性之前，我们需要检查响应代码是否等于`200`。'
- en: 'You can find the following code in the `urllib_headers_basic.py`file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`urllib_headers_basic.py`文件中找到以下代码：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the following screenshot, we can see the script executing for the python.org
    domain:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以看到脚本在python.org域上执行：
- en: '![](assets/3bff218f-4c01-4cae-8d3d-815f784da3ca.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3bff218f-4c01-4cae-8d3d-815f784da3ca.png)'
- en: 'Also, you can get details on headers:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以获取头部的详细信息：
- en: '![](assets/8da41655-5f6d-4a6f-bdda-0625c41acb8d.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8da41655-5f6d-4a6f-bdda-0625c41acb8d.png)'
- en: 'Another way to retrieve response headers is by using the `info()` method from
    the response object, which will return a dictionary:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 检索响应头的另一种方法是使用响应对象的`info()`方法，它将返回一个字典：
- en: '![](assets/89591d31-8be7-41e9-8a6b-043834987c4a.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/89591d31-8be7-41e9-8a6b-043834987c4a.png)'
- en: 'We can also use the `**keys()**`method to get all the response header keys:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`**keys()**`方法获取所有响应头键：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the urllib2 Request class
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用urllib2的Request类
- en: The `urlopen` function of `urllib2` can also take a Request object as a parameter,
    instead of the URL and the data to send. The Request class defines objects that
    encapsulate all the information related to a request. Through this object, we
    can make more complex requests, adding our own headers, such as the User-Agent.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`urllib2`的`urlopen`函数还可以将Request对象作为参数，而不是URL和要发送的数据。Request类定义了封装与请求相关的所有信息的对象。通过这个对象，我们可以进行更复杂的请求，添加我们自己的头部，比如User-Agent。'
- en: The simplest constructor for the Request object only takes one string as an
    argument, indicating the URL to connect to, so using this object as a parameter
    of urlopen would be equivalent to using a string with the URL directly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Request对象的最简构造函数只接受一个字符串作为参数，指示要连接的URL，因此将此对象作为urlopen的参数将等同于直接使用URL字符串。
- en: However, the Request constructor also has as optional parameters a data string
    for sending data by POST and a dictionary of headers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Request构造函数还有一个可选参数，用于通过POST发送数据的数据字符串和标头字典。
- en: Customizing requests with urllib2
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用urllib2自定义请求
- en: We can customize a request to retrieve a specific version of a website. For
    this task, we can use the Accept-Language header, which tells the server our preferred
    language for the resource it returns.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以自定义请求以检索网站的特定版本。为此任务，我们可以使用Accept-Language标头，告诉服务器我们首选的资源语言。
- en: In this section, we are going to see how to add our own headers using the User-Agent
    header. User-Agent is a header used to identify the browser and operating system
    that we are using to connect to that URL. By default, urllib2 is identified as
    "Python-urllib / 2.5";  if we wanted to identify ourselves, for example, as a
    Chrome browser, we could redifine the headers parameter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用User-Agent标头添加我们自己的标头。User-Agent是一个用于识别我们用于连接到该URL的浏览器和操作系统的标头。默认情况下，urllib2被标识为“Python-urllib
    / 2.5”；如果我们想要将自己标识为Chrome浏览器，我们可以重新定义标头参数。
- en: 'In this example, we create the same GET request using the Request class by
    passing as parameter a custom HTTP User-Agent header:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用Request类创建相同的GET请求，通过将自定义的HTTP User-Agent标头作为参数传递：
- en: 'You can find the following code in the`urllib_requests_headers.py`file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`urllib_requests_headers.py`文件中找到以下代码：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With the Request class of the `urllib` module, it is possible to create custom
    headers, for this it is necessary to define in the headers argument a header dictionary
    with the key and value format. In the previous example, we set the agent header
    configuration and assign it the Chrome value and supplied the headers as a dictionary
    to the Request constructor.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`urllib`模块的Request类，可以创建自定义标头，为此需要在标头参数中定义一个带有键和值格式的标头字典。在上一个例子中，我们设置了代理标头配置，并将其分配为Chrome值，并将标头作为字典提供给Request构造函数。
- en: Getting emails from a URL with urllib2
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用urllib2从URL获取电子邮件
- en: In this example we can see how extract emails using urllib2 and regular expressions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到如何使用urllib2和正则表达式提取电子邮件。
- en: 'You can find the following code in the`get_emails_from_url.py`file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`get_emails_from_url.py`文件中找到以下代码：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this screen capture, we can see the script in execution for the packtpub.com
    domain:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，我们可以看到packtpub.com域的脚本正在执行：
- en: '![](assets/44ec2eea-dcbe-4720-bd07-2d0de1bdd9dd.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/44ec2eea-dcbe-4720-bd07-2d0de1bdd9dd.png)'
- en: Getting links from a URL with urllib2
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用urllib2从URL获取链接
- en: In this script, we can see how to extract links using `urllib2` and `HTMLParser`.
    `HTMLParser` is a module that allows us to parse text files formatted in HTML.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们可以看到如何使用`urllib2`和`HTMLParser`提取链接。`HTMLParser`是一个允许我们解析HTML格式的文本文件的模块。
- en: You can get more information at [https://docs.python.org/2/library/htmlparser.html](https://docs.python.org/2/library/htmlparser.html).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.python.org/2/library/htmlparser.html](https://docs.python.org/2/library/htmlparser.html)获取更多信息。
- en: 'You can find the following code in the`get_links_from_url.py` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`get_links_from_url.py`文件中找到以下代码：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the following screenshot, we can see the script in execution for the python.org
    domain:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到python.org域的脚本正在执行：
- en: '![](assets/276cc13e-834b-4a2a-bedf-942e292279d9.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/276cc13e-834b-4a2a-bedf-942e292279d9.png)'
- en: Building an HTTP Client with requests
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用requests构建HTTP客户端
- en: Being able to interact with RESTful APIs based on HTTP is an increasingly common
    task in projects in any programming language. In Python, we also have the option
    of interacting with a REST API in a simple way with the `Requests` module. In
    this section, we review the different ways in which we can interact with an HTTP-based
    API using the `Python Requests` package.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 能够与基于HTTP的RESTful API进行交互是任何编程语言项目中越来越常见的任务。在Python中，我们还可以使用`Requests`模块以简单的方式与REST
    API进行交互。在本节中，我们将回顾使用`Python Requests`包与基于HTTP的API进行交互的不同方式。
- en: Introduction to requests
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求简介
- en: 'One of the best options within the Python ecosystem for making HTTP requests
    is a library of third-party requests. You can install the requests library in
    your system in a easy way with `pip` command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python生态系统中进行HTTP请求的最佳选择之一是第三方请求库。您可以使用`pip`命令轻松在系统中安装requests库：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This module is available on the PyPi repository as the `requests` package. It
    can either be installed through Pip or downloaded from [http://docs.python-requests.org](http://docs.python-requests.org),
    which hosts the documentation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块在PyPi存储库中可用，名称为`requests`包。它可以通过Pip安装，也可以从[http://docs.python-requests.org](http://docs.python-requests.org)下载，该网站提供了文档。
- en: To test the library in our script, you just have to import it like the other
    modules. Basically, request is a wrapper of `urllib2` along with other Python
    modules to provide us with simple methods with the REST structure, because we
    have the "post," "get," "put," "patch," "delete," "head," and "options" methods,
    which are all the necessary methods to communicate with a RESTful API without
    problems.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的脚本中测试该库，只需像其他模块一样导入它。基本上，request是`urllib2`的一个包装器，以及其他Python模块，为我们提供了与REST结构的简单方法，因为我们有“post”，“get”，“put”，“patch”，“delete”，“head”和“options”方法，这些都是与RESTful
    API通信所需的方法。
- en: 'This module has a very simple form of implementation, for example, a `GET`
    query using requests would be:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块有一个非常简单的实现形式，例如，使用requests进行`GET`查询将是：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we can see here, the requests.get method is returning a "response" object;
    in this object you will find all the information corresponding to the response
    of our request.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里看到的，requests.get方法返回一个“response”对象；在这个对象中，您将找到与我们请求的响应对应的所有信息。
- en: 'These are the main properties of the response object:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是响应对象的主要属性：
- en: '**response.status_code**: This is the HTTP code returned by the server.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**response.status_code**：这是服务器返回的HTTP代码。'
- en: '**response.content**: Here we will find the content of the server response.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**response.content**：在这里我们将找到服务器响应的内容。'
- en: '**response.json()**: In the case that the answer is a JSON, this method serializes
    the string and returns a dictionary structure with the corresponding JSON structure.
    In the case of not receiving a JSON for each response, the method triggers a exception.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**response.json()**：如果答案是JSON，这个方法会序列化字符串并返回一个带有相应JSON结构的字典结构。如果每个响应都没有收到JSON，该方法会触发一个异常。'
- en: In this script, we can also view the request properties through the response
    object in the python.org domain.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，我们还可以通过python.org域中的响应对象查看请求属性。
- en: 'You can find the following code in the  **`requests_headers.py` **file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**`requests_headers.py`**文件中找到以下代码：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the following screen capture, we can see the script in execution for the
    python.org domain.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到python.org域的脚本正在执行。
- en: 'In the last line of the execution, we can highlight the presence of **python-requests**
    in the U**ser-Agent** header:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行的最后一行，我们可以看到**User-Agent**标头中存在**python-requests**：
- en: '![](assets/93c9b235-8b16-44cd-b09d-2aeb8299b1ae.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/93c9b235-8b16-44cd-b09d-2aeb8299b1ae.png)'
- en: In a similar way, we can obtain only `keys()` from the object response dictionary.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，我们只能从对象响应字典中获得`keys()`。
- en: 'You can find the following code in the`requests_headers_keys.py`file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`requests_headers_keys.py`文件中找到以下代码：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Requests advantages
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求的优势
- en: 'Among the main advantages of the `requests` module, we can notice the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在`requests`模块的主要优势中，我们可以注意到以下几点：
- en: A Library focused on the creation of fully-functional HTTP clients.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个专注于创建完全功能的HTTP客户端的库。
- en: Supports all methods and features defined in the HTTP protocol.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持HTTP协议中定义的所有方法和特性。
- en: It is "Pythonic," that is, it is completely written in Python and all operations
    are done in a simple way and with just a few lines of code.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是“Pythonic”的，也就是说，它完全是用Python编写的，所有操作都是以简单的方式和只有几行代码完成的。
- en: Tasks such as integration with web services, the pooling of HTTP connections,
    coding of POST data in forms, and handling of cookies. All these feature are handled
    automatically using Requests.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如与web服务集成、HTTP连接的汇集、在表单中编码POST数据以及处理cookies等任务。所有这些特性都是使用Requests自动处理的。
- en: Making GET Requests with the REST API
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST API进行GET请求
- en: 'For testing requests with this module, we can use the [http://httpbin.org](http://httpbin.org)
    service and try these requests, executing each type separately. In all cases,
    the code to execute to get the desired output will be the same, the only thing
    that will change will be the type of request and the data that is sent to the
    server:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这个模块进行请求测试，我们可以使用[http://httpbin.org](http://httpbin.org)服务并尝试这些请求，分别执行每种类型。在所有情况下，执行以获得所需输出的代码将是相同的，唯一变化的将是请求类型和发送到服务器的数据：
- en: '![](assets/36067bfe-7767-42c3-9d83-1dfe4f7538b4.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36067bfe-7767-42c3-9d83-1dfe4f7538b4.png)'
- en: '[http://httpbin.org](http://httpbin.org) [offers a service that lets you test
    REST requests through predefined endpoints using the get, post, patch, put, and
    delete methods.](http://httpbin.org)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://httpbin.org](http://httpbin.org) [提供了一个服务，让您通过预定义的端点使用get、post、patch、put和delete方法来测试REST请求。](http://httpbin.org)'
- en: 'You can find the following code in the `testing_api_rest_get_method.py`file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`testing_api_rest_get_method.py`文件中找到以下代码：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you run the preceding code, you should see the following output with the
    headers obtained for request and response:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行上述代码时，您应该看到为请求和响应获取的标头的以下输出：
- en: '![](assets/a6a89921-2970-40b9-9434-a6c6a7ab02af.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a6a89921-2970-40b9-9434-a6c6a7ab02af.png)'
- en: Making POST Requests with the REST API
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST API进行POST请求
- en: Unlike the GET method that sends the data in the URL, the POST method allows
    us to send data to the server in the body of the request.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 与将数据发送到URL的GET方法不同，POST方法允许我们将数据发送到请求的正文中。
- en: For example, suppose we have a service to register a user to whom you must pass
    an ID and email. This information would be passed through the data attribute through
    a dictionary structure.The post method requires an extra field called "data,"
    in which we send a dictionary with all the elements that we will send to the server
    through the corresponding method.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个用于注册用户的服务，您必须通过数据属性传递ID和电子邮件。这些信息将通过数据属性通过字典结构传递。post方法需要一个额外的字段叫做“data”，我们通过这个字段发送一个包含我们将通过相应方法发送到服务器的所有元素的字典。
- en: In this example, we are going to simulate the sending of an HTML form through
    a POST request, just like browsers do when we send a form to a website. Form data
    is always sent in a key-value dictionary format.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将模拟通过POST请求发送HTML表单，就像浏览器在向网站发送表单时所做的那样。表单数据总是以键值字典格式发送。
- en: 'The POST method is available in the [http://httpbin.org/post](http://httpbin.org/post)
    service:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: POST方法在[http://httpbin.org/post](http://httpbin.org/post)服务中可用：
- en: '![](assets/1cc80100-be73-4344-9850-b8124eb1d97e.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1cc80100-be73-4344-9850-b8124eb1d97e.png)'
- en: 'In the following code we define a data dictionary that we are using with post
    method for passing data in the body request:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们定义了一个数据字典，我们正在使用它与post方法一起传递请求正文中的数据：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There are cases where the server requires that the request contains headers
    indicating that we are communicating with the JSON format; for those cases, we
    can add our own headers or modify existing ones with the **"headers"** parameter:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，服务器要求请求包含标头，指示我们正在使用JSON格式进行通信；对于这些情况，我们可以添加自己的标头或使用**“headers”**参数修改现有的标头：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, in addition to using the POST method, you must pass the data
    that you want to send to the server as a parameter in the data attribute. In the
    answer, we see how the ID is being sent in the form object.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，除了使用POST方法，您还必须将要发送到服务器的数据作为数据属性中的参数传递。在答案中，我们看到ID是如何被发送到表单对象中的。
- en: Making Proxy Requests
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行代理请求
- en: An interesting feature offered by the `requests` module is the possibility to
    make requests through a proxy or intermediate machine between our internal network
    and the external network.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`requests`模块提供的一个有趣功能是可以通过代理或内部网络与外部网络之间的中间机器进行请求。'
- en: 'A proxy is defined in the following way:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 代理的定义方式如下：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To make a request through a proxy, the proxies attribute of the get method
    is used:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过代理进行请求时，使用get方法的proxies属性：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The proxy parameter must be passed in the form of a dictionary, that is, you
    have to create a dictionary type where we specify the protocol with the IP address
    and the port where the proxy is listening:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 代理参数必须以字典形式传递，即必须创建一个指定协议、IP地址和代理监听端口的字典类型：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Managing exceptions with requests
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用requests处理异常
- en: 'Errors in requests are handled differently from other modules. The following
    example generates a 404 error indicating that it cannot find the requested resource:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请求中的错误与其他模块处理方式不同。以下示例生成了一个404错误，表示无法找到请求的资源：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this case, the `requests` module returns a 404 error. To see the **exception**
    generated internally, we can use the`raise_for_status ()` method:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`requests`模块返回了一个404错误。要查看内部生成的**异常**，我们可以使用`raise_for_status()`方法：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the event of making a request to a host that does not exist, and once the
    timeout has been produced, we get a `ConnectionError` exception:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果向不存在的主机发出请求，并且一旦产生了超时，我们会得到一个`ConnectionError`异常：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this screen capture, we can see the execution of the previous commands in
    Python idle:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，我们可以看到在Python空闲中执行之前的命令：
- en: '![](assets/9f4f5df0-2856-4f83-8f5d-ec1217064cd3.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f4f5df0-2856-4f83-8f5d-ec1217064cd3.png)'
- en: The request library makes it easier to use HTTP requests in Python compared
    to urllib. Unless you have a requirement to use urllib, I would always recommend
    using Requests for your projects in Python.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 与urllib相比，请求库使得在Python中使用HTTP请求更加容易。除非有使用urllib的要求，我总是建议在Python项目中使用Requests。
- en: Authentication mechanisms with Python
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的身份验证机制
- en: The authentication mechanisms supported natively in the HTTP protocol are **HTTP
    Basic** and **HTTP Digest**. Both mechanisms are supported in Python through the
    requests library.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP协议本身支持的身份验证机制是**HTTP基本**和**HTTP摘要**。这两种机制都可以通过Python的requests库来支持。
- en: 'The HTTP Basic authentication mechanism is based on forms and uses Base64 to
    encode the user composed with the password separated by a "colon" (user: password).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP基本身份验证机制基于表单，并使用Base64对由“冒号”（用户：密码）分隔的用户组成进行编码。
- en: The HTTP Digest authentication mechanism uses MD5 to encrypt user, key, and
    realm hashes. The main difference between both methods is that the Basic only
    encodes, without actually encrypting, while the Digest encrypts the user's information
    in the MD5 format.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP摘要身份验证机制使用MD5加密用户、密钥和领域哈希。两种方法之间的主要区别在于基本只进行编码，而不实际加密，而摘要会以MD5格式加密用户信息。
- en: Authentication with the requests module
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用requests模块进行身份验证
- en: With the `requests` module, we can connect with servers that support Basic and
    Digest authentication. With basic authentication, the information about the user
    and password is sent in `base64` format, and with digest the information about
    the user and password is sent in hash with the `md5` or `sha1` algorithm.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`requests`模块，我们可以连接支持基本和摘要身份验证的服务器。使用基本身份验证，用户和密码的信息以`base64`格式发送，而使用摘要身份验证，用户和密码的信息以`md5`或`sha1`算法的哈希形式发送。
- en: HTTP Basic authentication
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP基本身份验证
- en: HTTP Basic is a simple mechanism that allows you to implement basic authentication
    over HTTP resources. The main advantage is the ease of implementing it in Apache
    web servers, using standard Apache directives and the httpasswd utility.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP基本是一种简单的机制，允许您在HTTP资源上实现基本身份验证。其主要优势在于可以在Apache Web服务器中轻松实现，使用标准Apache指令和httpasswd实用程序。
- en: The problem with this mechanism is that it is relatively simple with a Wireshark
    sniffer to obtain the user's credentials since the information in sent in plain
    text; for an attacker, it would be enough to decode the information in Base64
    format. If the client knows that a resource is protected with this mechanism,
    you can send the login and password in the Authorization header with Base64 encoding.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这种机制的问题在于，使用Wireshark嗅探器相对简单地获取用户凭据，因为信息是以明文发送的；对于攻击者来说，解码Base64格式的信息就足够了。如果客户端知道资源受到此机制的保护，可以使用Base64编码的Authorization标头发送登录名和密码。
- en: 'Basic-access authentication assumes that the client will be identified by a
    username and a password. When the browser client initially accesses a site using
    this system, the server replies with a response of type 401, which contains the
    "**WWW-Authenticate**" tag, with the "Basic" value and the name of the protected
    domain (such as WWW-Authenticate: Basic realm = "www.domainProtected.com").'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 基本访问身份验证假定客户端将通过用户名和密码进行标识。当浏览器客户端最初使用此系统访问站点时，服务器会以包含“**WWW-Authenticate**”标签的401响应进行回复，其中包含“Basic”值和受保护域的名称（例如WWW-Authenticate：Basic
    realm =“www.domainProtected.com”）。
- en: 'The browser responds to the server with an "Authorization" tag, which contains
    the "Basic" value and the concatenation in base64 encoding of the login, the colon
    punctuation mark (":"), and the password (for example, Authorization : Basic b3dhc3A6cGFzc3dvcmQ
    =).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器用“Authorization”标签回应服务器，其中包含“Basic”值和登录名、冒号标点符号（“：”）和密码的Base64编码连接（例如，Authorization：Basic
    b3dhc3A6cGFzc3dvcmQ =）。
- en: 'Assuming that we have a URL protected with this type of authentication, in
    Python with the `requests` module, it would be as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个受到此类身份验证保护的URL，在Python中使用`requests`模块，如下所示：
- en: '[PRE22]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We can use this script to test the access to a protected resource with **basic
    authentication. **In this example, we apply a **brute-force process** to obtain
    the user and password credentials over the protected resource.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用此脚本来测试对受保护资源的访问，使用**基本身份验证。**在此示例中，我们应用了**暴力破解过程**来获取受保护资源上的用户和密码凭据。
- en: 'You can find the following code in the `BasicAuthRequests.py`file:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`BasicAuthRequests.py`文件中找到以下代码：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: HTTP Digest Authentication
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP摘要身份验证
- en: HTTP Digest is a mechanism used to improve the basic authentication process
    in the HTTP protocol. MD5 is normally used to encrypt user information, key, and
    realm, although other algorithms, such as SHA, can also be used in its different
    variants, which improve the security. It is implemented in Apache web servers
    with the `mod_auth_digest` module and the `htdigest` utility.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP摘要是用于改进HTTP协议中基本身份验证过程的机制。通常使用MD5来加密用户信息、密钥和领域，尽管其他算法，如SHA，也可以在其不同的变体中使用，从而提高安全性。它在Apache
    Web服务器中实现了`mod_auth_digest`模块和`htdigest`实用程序。
- en: 'The process that a client must follow to send a response that results in access
    to a protected resource is:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端必须遵循的过程以发送响应，从而获得对受保护资源的访问是：
- en: '`Hash1= MD5(“user:realm:password”)`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Hash1= MD5(“user:realm:password”)`'
- en: '`Hash2 = MD5(“HTTP-Method-URI”)`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Hash2 = MD5(“HTTP-Method-URI”)`'
- en: '`response = MD5(Hash1:Nonce:Hash2)`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`response = MD5(Hash1:Nonce:Hash2)`'
- en: Digest-based access authentication extends basic-access authentication by using
    a one-way hashing cryptographic algorithm (MD5) to first encrypt authentication
    information, and then add a unique connection value.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 基于摘要的访问身份验证通过使用单向哈希加密算法（MD5）扩展基本访问身份验证，首先加密认证信息，然后添加唯一的连接值。
- en: This value is used by the client browser in the process of calculating the password
    response in the hash format. Although the password is obfuscated by the use of
    a cryptographic hash and the use of the unique value prevents the threat of a
    replay attack, the login name is sent in plain text.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端浏览器在计算密码响应的哈希格式时使用该值。尽管密码通过使用加密哈希和唯一值的使用来防止重放攻击的威胁，但登录名以明文形式发送。
- en: 'Assuming we have a URL protected with this type of authentication, in Python
    it would be as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个受此类型身份验证保护的URL，在Python中将如下所示：
- en: '[PRE24]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We can use this script to test the access to a protected-resource **digest authentication. **In
    this example, we apply a brute-force process to obtain the user and password credentials
    over the protected resource. The script is similar to the previous one with basic
    authentication. The main difference is the part where we send the username and
    password  over the protectedResource URL.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用此脚本来测试对受保护资源的访问**摘要身份验证。**在此示例中，我们应用了**暴力破解过程**来获取受保护资源上的用户和密码凭据。该脚本类似于基本身份验证的先前脚本。主要区别在于我们发送用户名和密码的部分，这些用户名和密码是通过protectedResource
    URL发送的。
- en: 'You can find the following code in the `DigestAuthRequests.py`file:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`DigestAuthRequests.py`文件中找到以下代码：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the `httplib` and `urllib` modules, and requests
    for building HTTP clients. The `requests` module is a very useful tool if we want
    to consume API endpoints from our Python application. In the last section, we
    reviewed the main authentication mechanisms and how to implement them with the
    `request` module.At this point, I would like to emphasize that it is very important
    to always read the official documentation of all the tools with which we work,
    since that is where you can resolve more specific questions.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了`httplib`和`urllib`模块，以及用于构建HTTP客户端的请求。如果我们想要从Python应用程序消耗API端点，`requests`模块是一个非常有用的工具。在最后一节中，我们回顾了主要的身份验证机制以及如何使用`request`模块实现它们。在这一点上，我想强调的是，始终阅读我们使用的所有工具的官方文档非常重要，因为那里可以解决更具体的问题。
- en: In the next [chapter](40fd3a5e-4f71-4067-a0ce-6f0ba212af70.xhtml), we will explore
    network programming packages in Python to analyze network traffic using the `pcapy`
    and `scapy` modules.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索Python中的网络编程包，使用`pcapy`和`scapy`模块来分析网络流量。
- en: Questions
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which module is the easiest to use since it is designed to facilitate requests
    to a REST API?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个模块是最容易使用的，因为它旨在简化对REST API的请求？
- en: How is a POST request made by passing a dictionary-type data structure that
    would be sent in the body of the request?
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何通过传递字典类型的数据结构来进行POST请求，该请求将被发送到请求的正文中？
- en: What is the correct way to make a POST request through a proxy server and modify
    the information of the headers at the same time?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过代理服务器正确进行POST请求并同时修改标头信息的方法是什么？
- en: What data structure is necessary to mount if we need to send a request with
    requests through a proxy?
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们需要通过代理发送请求，需要构建哪种数据结构？
- en: How do we obtain the code of an HTTP request returned by the server if in the
    response object we have the response of the server?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在响应对象中有服务器的响应，我们如何获得服务器返回的HTTP请求的代码？
- en: With which module can we indicate the number of connections that we are going
    to reserve using the PoolManager class?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个模块来指示我们将使用PoolManager类预留的连接数？
- en: Which module of the requests library offers the possibility of performing Digest-type
    authentication?
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求库的哪个模块提供了执行摘要类型身份验证的可能性？
- en: What coding system does the Basic authentication mechanism use to send the username
    and password?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基本身份验证机制使用哪种编码系统来发送用户名和密码？
- en: Which mechanism is used to improve the basic authentication process by using
    a one-way hashing cryptographic algorithm (MD5)?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用单向哈希加密算法（MD5）来改进基本身份验证过程使用了哪种机制？
- en: Which header is used to identify the browser and operating system that we are
    using to send requests to a URL?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个标头用于识别我们用于向URL发送请求的浏览器和操作系统？
- en: Further Reading
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In these links, you will find more information about the mentioned tools and
    the official Python documentation for some of the commented modules:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些链接中，您将找到有关提到的工具的更多信息，以及一些被注释模块的官方Python文档：
- en: '[https://docs.python.org/2/library/httplib.html](https://docs.python.org/2/library/httplib.html)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/2/library/httplib.html](https://docs.python.org/2/library/httplib.html)'
- en: '[https://docs.python.org/2/library/urllib2.html](https://docs.python.org/2/library/urllib2.html)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/2/library/urllib2.html](https://docs.python.org/2/library/urllib2.html)'
- en: '[http://urllib3.readthedocs.io/en/latest/](http://urllib3.readthedocs.io/en/latest/)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://urllib3.readthedocs.io/en/latest/](http://urllib3.readthedocs.io/en/latest/)'
- en: '[https://docs.python.org/2/library/htmlparser.html](https://docs.python.org/2/library/htmlparser.html)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/2/library/htmlparser.html](https://docs.python.org/2/library/htmlparser.html)'
- en: '[http://docs.python-requests.org/en/latest](http://docs.python-requests.org/en/latest)'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.python-requests.org/en/latest](http://docs.python-requests.org/en/latest)'
