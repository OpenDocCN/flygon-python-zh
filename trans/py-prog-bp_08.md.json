["```py\nmkdir microservices && cd microservices\n```", "```py\npipenv --python ~/Install/Python3.6/bin/python3.6\n```", "```py\npipenv install django djangorestframework requests python-dateutil\n```", "```py\n[[source]]\n\nverify_ssl = true\nname = \"pypi\"\nurl = \"https://pypi.python.org/simple\"\n\n[packages]\n\ndjango = \"*\"\ndjangorestframework = \"*\"\n\n[dev-packages]\n\n[requires]\n\npython_version = \"3.6\"\n```", "```py\ndjango-admin startproject order\n```", "```py\ncd order\n```", "```py\ndjango-admin startapp main\n```", "```py\n.\n\u251c\u2500\u2500 main\n\u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 migrations\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u2514\u2500\u2500 views.py\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 order\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n```", "```py\nclass OrderCustomer(models.Model):\n    customer_id = models.IntegerField()\n    name = models.CharField(max_length=100)\n    email = models.CharField(max_length=100)\n```", "```py\nclass Order(models.Model):\n\n    ORDER_STATUS = (\n        (1, 'Received'),\n        (2, 'Processing'),\n        (3, 'Payment complete'),\n        (4, 'Shipping'),\n        (5, 'Completed'),\n        (6, 'Cancelled'),\n    )\n\n    order_customer = models.ForeignKey(\n        OrderCustomer, \n        on_delete=models.CASCADE\n    )    \n    total = models.DecimalField(\n        max_digits=9,\n        decimal_places=2,\n        default=0\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    last_updated = models.DateTimeField(auto_now=True)\n    status = models.IntegerField(choices=ORDER_STATUS, default='1')   \n```", "```py\nclass OrderItems(models.Model):\n    class Meta:\n        verbose_name_plural = 'Order items'\n\n    product_id = models.IntegerField()\n    name = models.CharField(max_length=200)\n    quantity = models.IntegerField()\n    price_per_unit = models.DecimalField(\n        max_digits=9,\n        decimal_places=2,\n        default=0 \n    )\n    order = models.ForeignKey(\n        Order, on_delete=models.CASCADE, related_name='items')\n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'main',\n]\n```", "```py\npython manage.py makemigrations\n```", "```py\npython manage.py migrate\n```", "```py\nclass InvalidArgumentError(Exception):\n    def __init__(self, argument_name):\n        message = f'The argument {argument_name} is invalid'\n        super().__init__(message)\n```", "```py\nclass OrderAlreadyCompletedError(Exception):\n    def __init__(self, order):\n        message = f'The order with ID: {order.id} is already  \n        completed.'\n  super().__init__(message)\n\nclass OrderAlreadyCancelledError(Exception):\n    def __init__(self, order):\n        message = f'The order with ID: {order.id} is already  \n        cancelled.'\n  super().__init__(message)\n```", "```py\nclass OrderCancellationError(Exception):\n    pass     class OrderNotFoundError(Exception):\n    pass\n```", "```py\nORDER_STATUS = (\n    (1, 'Received'),\n    (2, 'Processing'),\n    (3, 'Payment complete'),\n    (4, 'Shipping'),\n    (5, 'Completed'),\n    (6, 'Cancelled'),\n)\n```", "```py\n  Order.objects.filter(status=5)\n```", "```py\nfrom enum import Enum, auto\n\nclass Status(Enum):\n    Received = auto()\n    Processing = auto()\n    Payment_Complete = auto()\n    Shipping = auto()\n    Completed = auto()\n    Cancelled = auto()\n```", "```py\nOrder.objects.filter(Status.Received.value)\n```", "```py\nfrom datetime import datetime\nfrom django.db.models import Manager, Q\n\nfrom .status import Status\n\nfrom .exceptions import InvalidArgumentError\nfrom .exceptions import OrderAlreadyCompletedError\nfrom .exceptions import OrderCancellationError\n\nfrom . import models\n```", "```py\nclass OrderManager(Manager):\n\n    def set_status(self, order, status):\n        if status is None or not isinstance(status, Status):\n            raise InvalidArgumentError('status')\n\n        if order is None or not isinstance(order, models.Order):\n            raise InvalidArgumentError('order')\n\n        if order.status is Status.Completed.value:\n            raise OrderAlreadyCompletedError()\n\n        order.status = status.value\n        order.save()\n```", "```py\ndef cancel_order(self, order):\n    if order is None or not isinstance(order, models.Order):\n        raise InvalidArgumentError('order')\n\n    if order.status != Status.Received.value:\n        raise OrderCancellationError()\n\n    self.set_status(order, Status.Cancelled)\n```", "```py\ndef get_all_orders_by_customer(self, customer_id):\n    try:\n        return self.filter(\n            order_customer_id=customer_id).order_by(\n            'status', '-created_at')\n    except ValueError:\n        raise InvalidArgumentError('customer_id')\n```", "```py\ndef get_customer_incomplete_orders(self, customer_id):\n    try:\n        return self.filter(\n            ~Q(status=Status.Completed.value),\n            order_customer_id=customer_id).order_by('status')\n    except ValueError:\n        raise InvalidArgumentError('customer_id')\n\ndef get_customer_completed_orders(self, customer_id):\n    try:\n        return self.filter(\n            status=Status.Completed.value,\n            order_customer_id=customer_id)\n    except ValueError:\n        raise InvalidArgumentError('customer_id')\n```", "```py\ndef get_orders_by_status(self, status):\n    if status is None or not isinstance(status, Status):\n        raise InvalidArgumentError('status')\n\n    return self.filter(status=status.value)\n```", "```py\ndef get_orders_by_period(self, start_date, end_date):\n    if start_date is None or not isinstance(start_date, datetime):\n        raise InvalidArgumentError('start_date')\n\n    if end_date is None or not isinstance(end_date, datetime):\n        raise InvalidArgumentError('end_date')\n\n    result = self.filter(created_at__range=[start_date, end_date])\n    return result\n```", "```py\ndef set_next_status(self, order):\n    if order is None or not isinstance(order, models.Order):\n        raise InvalidArgumentError('order')\n\n    if order.status is Status.Completed.value:\n        raise OrderAlreadyCompletedError()\n\n    order.status += 1\n    order.save()\n```", "```py\nobjects = OrderManager()\n```", "```py\nfrom dateutil.relativedelta import relativedelta\n\nfrom django.test import TestCase\nfrom django.utils import timezone\n\nfrom .models import OrderCustomer, Order\nfrom .status import Status\n\nfrom .exceptions import OrderAlreadyCompletedError\nfrom .exceptions import OrderCancellationError\nfrom .exceptions import InvalidArgumentError\n```", "```py\nclass OrderModelTestCase(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.customer_001 = OrderCustomer.objects.create(\n            customer_id=1,\n            email='customer_001@test.com'\n        )\n\n        Order.objects.create(order_customer=cls.customer_001)\n\n        Order.objects.create(order_customer=cls.customer_001,\n                             status=Status.Completed.value)\n\n        cls.customer_002 = OrderCustomer.objects.create(\n            customer_id=1,\n            email='customer_002@test.com'\n        )\n\n        Order.objects.create(order_customer=cls.customer_002)\n```", "```py\ndef test_cancel_order(self):\n    order = Order.objects.get(pk=1)\n\n    self.assertIsNotNone(order)\n    self.assertEqual(Status.Received.value, order.status)\n\n    Order.objects.cancel_order(order)\n\n    self.assertEqual(Status.Cancelled.value, order.status)\n\ndef test_cancel_completed_order(self):\n    order = Order.objects.get(pk=2)\n\n    self.assertIsNotNone(order)\n    self.assertEqual(Status.Completed.value, order.status)\n\n    with self.assertRaises(OrderCancellationError):\n        Order.objects.cancel_order(order)\n\ndef test_cancel_order_with_invalid_argument(self):\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.cancel_order({'id': 1})\n```", "```py\ndef test_get_all_orders_by_customer(self):\n    orders = Order.objects.get_all_orders_by_customer(customer_id=1)\n\n    self.assertEqual(2, len(orders),\n                     msg='It should have returned 2 orders.')\n\ndef test_get_all_order_by_customer_with_invalid_id(self):\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.get_all_orders_by_customer('o')\n```", "```py\ndef test_get_customer_incomplete_orders(self):\n    orders = Order.objects.get_customer_incomplete_orders(customer_id=1)\n\n    self.assertEqual(1, len(orders))\n    self.assertEqual(Status.Received.value, orders[0].status)\n\ndef test_get_customer_incomplete_orders_with_invalid_id(self):\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.get_customer_incomplete_orders('o')\n```", "```py\ndef test_get_customer_completed_orders(self):\n    orders = Order.objects.get_customer_completed_orders(customer_id=1)\n\n    self.assertEqual(1, len(orders))\n    self.assertEqual(Status.Completed.value, orders[0].status)\n\ndef test_get_customer_completed_orders_with_invalid_id(self):\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.get_customer_completed_orders('o')\n```", "```py\ndef test_get_order_by_status(self):\n    order = Order.objects.get_orders_by_status(Status.Received)\n\n    self.assertEqual(2, len(order),\n                     msg=('There should be only 2 orders '\n                          'with status=Received.'))\n\n    self.assertEqual('customer_001@test.com',\n                     order[0].order_customer.email)\n\ndef test_get_order_by_status_with_invalid_status(self):\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.get_orders_by_status(1)\n```", "```py\ndef test_get_orders_by_period(self):\n\n    date_from = timezone.now() - relativedelta(days=1)\n    date_to = date_from + relativedelta(days=2)\n\n    orders = Order.objects.get_orders_by_period(date_from, date_to)\n\n    self.assertEqual(3, len(orders))\n\n    date_from = timezone.now() + relativedelta(days=3)\n    date_to = date_from + relativedelta(months=1)\n\n    orders = Order.objects.get_orders_by_period(date_from, date_to)\n\n    self.assertEqual(0, len(orders))\n\ndef test_get_orders_by_period_with_invalid_start_date(self):\n    start_date = timezone.now()\n\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.get_orders_by_period(start_date, None)\n\ndef test_get_orders_by_period_with_invalid_end_date(self):\n    end_date = timezone.now()\n\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.get_orders_by_period(None, end_date)\n```", "```py\ndef test_set_next_status(self):\n    order = Order.objects.get(pk=1)\n\n    self.assertTrue(order is not None,\n                    msg='The order is None.')\n\n    self.assertEqual(Status.Received.value, order.status,\n                     msg='The status should have been \n                     Status.Received.')\n\n    Order.objects.set_next_status(order)\n\n    self.assertEqual(Status.Processing.value, order.status,\n                     msg='The status should have been \n                     Status.Processing.')\n\ndef test_set_next_status_on_completed_order(self):\n    order = Order.objects.get(pk=2)\n\n    with self.assertRaises(OrderAlreadyCompletedError):\n        Order.objects.set_next_status(order)\n\ndef test_set_next_status_on_invalid_order(self):\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.set_next_status({'order': 1})\n```", "```py\ndef test_set_status(self):\n    order = Order.objects.get(pk=1)\n\n    Order.objects.set_status(order, Status.Processing)\n\n    self.assertEqual(Status.Processing.value, order.status)\n\ndef test_set_status_on_completed_order(self):\n    order = Order.objects.get(pk=2)\n\n    with self.assertRaises(OrderAlreadyCompletedError):\n        Order.objects.set_status(order, Status.Processing)\n\ndef test_set_status_on_cancelled_order(self):\n    order = Order.objects.get(pk=1)\n    Order.objects.cancel_order(order)\n\n    with self.assertRaises(OrderAlreadyCancelledError):\n        Order.objects.set_status(order, Status.Processing)\n\ndef test_set_status_with_invalid_order(self):\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.set_status(None, Status.Processing)\n\ndef test_set_status_with_invalid_status(self):\n    order = Order.objects.get(pk=1)\n\n    with self.assertRaises(InvalidArgumentError):\n        Order.objects.set_status(order, {'status': 1})\n```", "```py\nimport functools\n\nfrom rest_framework import serializers\n\nfrom .models import Order, OrderItems, OrderCustomer\n```", "```py\nclass OrderCustomerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OrderCustomer\n        fields = ('customer_id', 'email', 'name', )\n```", "```py\nclass OrderItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OrderItems\n        fields = ('name', 'price_per_unit', 'product_id', 'quantity', )\n```", "```py\nclass OrderSerializer(serializers.ModelSerializer):\n    items = OrderItemSerializer(many=True)\n    order_customer = OrderCustomerSerializer()\n    status = serializers.SerializerMethodField()\n```", "```py\n    class Meta:\n        depth = 1\n        model = Order\n        fields = ('items', 'total', 'order_customer',\n                  'created_at', 'id', 'status', )\n```", "```py\n    def get_status(self, obj):\n        return obj.get_status_display()\n```", "```py\n    def _create_order_item(self, item, order):\n        item['order'] = order\n        return OrderItems(**item)\n```", "```py\ndef create(self, validated_data):\n    validated_customer = validated_data.pop('order_customer')\n    validated_items = validated_data.pop('items')\n\n    customer = OrderCustomer.objects.create(**validated_customer)\n\n    validated_data['order_customer'] = customer\n    order = Order.objects.create(**validated_data)\n\n    mapped_items = map(\n        functools.partial(\n        self._create_order_item, order=order), validated_items\n    )\n\n    OrderItems.objects.bulk_create(mapped_items)\n\n    return order\n```", "```py\n{\n    \"items\": [\n        {\n            \"name\": \"Prod 001\",\n            \"price_per_unit\": 10,\n            \"product_id\": 1,\n            \"quantity\": 2\n        },\n        {\n            \"name\": \"Prod 002\",\n            \"price_per_unit\": 12,\n            \"product_id\": 2,\n            \"quantity\": 2\n        }\n    ],\n    \"order_customer\": {\n        \"customer_id\": 14,\n        \"email\": \"test@test.com\",\n        \"name\": \"Test User\"\n    },\n    \"order_id\": 1,\n    \"status\": 4,\n    \"total\": \"190.00\"\n}\n```", "```py\ncustomer = OrderCustomer.objects.create(**validated_customer)\n```", "```py\nvalidated_data['order_customer'] = customer\norder = Order.objects.create(**validated_data)\n```", "```py\nmapped_items = map(\n    functools.partial(\n        self._create_order_item, order=order), validated_items\n)\n\nOrderItems.objects.bulk_create(mapped_items)\n```", "```py\nfrom rest_framework import generics, status\nfrom rest_framework.response import Response\n\nfrom django.http import HttpResponse\n\nfrom .exceptions import InvalidArgumentError\nfrom .exceptions import OrderAlreadyCancelledError\nfrom .exceptions import OrderAlreadyCompletedError\n\nfrom .serializers import OrderSerializer\n```", "```py\nclass OrderListAPIBaseView(generics.ListAPIView):\n    serializer_class = OrderSerializer\n    lookup_field = ''\n\n    def get_queryset(self, lookup_field_id):\n        pass\n\n    def list(self, request, *args, **kwargs):\n        try:\n            result = self.get_queryset(kwargs.get(self.lookup_field, None))\n        except Exception as err:\n            return Response(err, status=status.HTTP_400_BAD_REQUEST)\n\n        serializer = OrderSerializer(result, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n```", "```py\ndef set_status_handler(set_status_delegate):\n    try:\n        set_status_delegate()\n    except (\n            InvalidArgumentError,\n            OrderAlreadyCancelledError,\n            OrderAlreadyCompletedError) as err:\n        return HttpResponse(err, status=status.HTTP_400_BAD_REQUEST)\n\n    return HttpResponse(status=status.HTTP_204_NO_CONTENT)\n```", "```py\nfrom django.http import HttpResponse\nfrom django.shortcuts import get_object_or_404\n\nfrom rest_framework import generics, status\nfrom rest_framework.response import Response\n\nfrom .models import Order\nfrom .status import Status\nfrom .view_helper import OrderListAPIBaseView\nfrom .view_helper import set_status_handler\nfrom .serializers import OrderSerializer\n```", "```py\nclass OrdersByCustomerView(OrderListAPIBaseView):\n    lookup_field = 'customer_id'\n\n    def get_queryset(self, customer_id):\n        return Order.objects.get_all_orders_by_customer(customer_id)\n```", "```py\nclass IncompleteOrdersByCustomerView(OrderListAPIBaseView):\n    lookup_field = 'customer_id'\n\n    def get_queryset(self, customer_id):\n        return Order.objects.get_customer_incomplete_orders(\n            customer_id\n        )\n\nclass CompletedOrdersByCustomerView(OrderListAPIBaseView):\n    lookup_field = 'customer_id'\n\n    def get_queryset(self, customer_id):\n        return Order.objects.get_customer_completed_orders(\n            customer_id\n        )\n```", "```py\nclass OrderByStatusView(OrderListAPIBaseView):\n    lookup_field = 'status_id'\n\n    def get_queryset(self, status_id):\n        return Order.objects.get_orders_by_status(\n            Status(status_id)\n        )\n```", "```py\nclass CreateOrderView(generics.CreateAPIView):\n\n    def post(self, request, *arg, **args):\n        serializer = OrderSerializer(data=request.data)\n\n        if serializer.is_valid():\n            order = serializer.save()\n            return Response(\n                {'order_id': order.id},\n                status=status.HTTP_201_CREATED)\n\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n```", "```py\ndef cancel_order(request, order_id):\n    order = get_object_or_404(Order, order_id=order_id)\n\n    return set_status_handler(\n        lambda: Order.objects.cancel_order(order)\n    )\n\ndef set_next_status(request, order_id):\n    order = get_object_or_404(Order, order_id=order_id)\n\n    return set_status_handler(\n        lambda: Order.objects.set_next_status(order)\n    )\n\ndef set_status(request, order_id, status_id):\n    order = get_object_or_404(Order, order_id=order_id)\n\n    try:\n        status = Status(status_id)\n    except ValueError:\n        return HttpResponse(\n            'The status value is invalid.',\n            status=status.HTTP_400_BAD_REQUEST)\n\n    return set_status_handler(\n        lambda: Order.objects.set_status(order, status)\n    )\n```", "```py\nfrom .views import (\n    cancel_order,\n    set_next_status,\n    set_status,\n    OrdersByCustomerView,\n    IncompleteOrdersByCustomerView,\n    CompletedOrdersByCustomerView,\n    OrderByStatusView,\n    CreateOrderView,\n)\n```", "```py\nurlpatterns = [\n    path(\n        r'order/add/',\n        CreateOrderView.as_view()\n    ),\n    path(\n        r'customer/<int:customer_id>/orders/get/',\n        OrdersByCustomerView.as_view()\n    ),\n    path(\n        r'customer/<int:customer_id>/orders/incomplete/get/',\n        IncompleteOrdersByCustomerView.as_view()\n    ),\n    path(\n        r'customer/<int:customer_id>/orders/complete/get/',\n        CompletedOrdersByCustomerView.as_view()\n    ),\n    path(\n        r'order/<int:order_id>/cancel',\n        cancel_order\n    ),\n    path(\n        r'order/status/<int:status_id>/get/',\n        OrderByStatusView.as_view()\n    ),\n    path(\n        r'order/<int:order_id>/status/<int:status_id>/set/',\n        set_status\n    ),\n    path(\n        r'order/<int:order_id>/status/next/',\n        set_next_status\n    ),\n]\n```", "```py\n\"\"\"order URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/2.0/topics/http/urls/\nExamples:\nFunction views\n    1\\. Add an import: from my_app import views\n    2\\. Add a URL to urlpatterns: path('', views.home, name='home')\nClass-based views\n    1\\. Add an import: from other_app.views import Home\n    2\\. Add a URL to urlpatterns: path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1\\. Import the include() function: from django.urls import include, path\n    2\\. Add a URL to urlpatterns: path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n```", "```py\npath('api/', include('main.urls')),\n```", "```py\nfrom django.urls import include\n```", "```py\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    )\n}\n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'main',\n    'rest_framework',\n    'rest_framework.authtoken',\n]\n```", "```py\npython manage.py migrate\n```", "```py\npython manage.py runserver\n```", "```py\nimport json\nimport sys\nimport argparse\nfrom http import HTTPStatus\n\nimport requests\n\ndef setUpData(order_id):\n    data = {\n        \"items\": [\n            {\n                \"name\": \"Prod 001\",\n                \"price_per_unit\": 10,\n                \"product_id\": 1,\n                \"quantity\": 2\n            },\n            {\n                \"name\": \"Prod 002\",\n                \"price_per_unit\": 12,\n                \"product_id\": 2,\n                \"quantity\": 2\n            }\n        ],\n        \"order_customer\": {\n            \"customer_id\": 14,\n            \"email\": \"test@test.com\",\n            \"name\": \"Test User\"\n        },\n        \"order_id\": order_id,\n        \"status\": 1,\n        \"total\": \"190.00\"\n    }\n\n    return data\n\ndef send_order(data):\n\n    response = requests.put(\n        'http://127.0.0.1:8000/api/order/add/',\n        data=json.dumps(data))\n\n    if response.status_code == HTTPStatus.NO_CONTENT:\n        print('Ops! Something went wrong!')\n        sys.exit(1)\n\n    print('Request was successfull')\n\nif __name__ == '__main__':\n\n    parser = argparse.ArgumentParser(\n        description='Create a order for test')\n\n    parser.add_argument('--orderid',\n                        dest='order_id',\n                        required=True,\n                        help='Specify the the order id')\n\n    args = parser.parse_args()\n\n    data = setUpData(args.order_id)\n    send_order(data)\n```", "```py\npython manage.py runserver\n```", "```py\npython send_order.py --orderid 10\n```", "```py\n[21/Jan/2018 09:30:37] \"PUT /api/order/add/ HTTP/1.1\" 401 58\n```", "```py\ntoken = '744cf4f8bd628e62f248444a478ce06681cb8089'\n\nheaders = {\n    'Authorization': f'Token {token}',\n    'Content-type': 'application/json'\n}\n```", "```py\nresponse = requests.put(\n    'http://127.0.0.1:8000/api/order/add/',\n    data=json.dumps(data))\n```", "```py\nresponse = requests.put(\n    'http://127.0.0.1:8000/api/order/add/',\n    headers=headers,\n    data=json.dumps(data))\n```", "```py\n[21/Jan/2018 09:49:40] \"PUT /api/order/add/ HTTP/1.1\" 201 0\n```", "```py\n  http http://127.0.0.1:8000/api/customer/1/orders/get/ 'Authorization: Token 744cf4f8bd628e62f248444a478ce06681cb8089'\n```", "```py\nHTTP/1.1 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Length: 270\nContent-Type: application/json\nDate: Sun, 21 Jan 2018 10:03:00 GMT\nServer: WSGIServer/0.2 CPython/3.6.2\nVary: Accept\nX-Frame-Options: SAMEORIGIN\n\n[\n {\n \"items\": [\n {\n \"name\": \"Prod 001\",\n \"price_per_unit\": 10,\n \"product_id\": 1,\n \"quantity\": 2\n },\n {\n \"name\": \"Prod 002\",\n \"price_per_unit\": 12,\n \"product_id\": 2,\n \"quantity\": 2\n }\n ],\n \"order_customer\": {\n \"customer_id\": 14,\n \"email\": \"test@test.com\",\n \"name\": \"Test User\"\n },\n \"order_id\": 10,\n \"status\": 1,\n \"total\": \"190.00\"\n }\n]\n```", "```py\nORDER_SERVICE_AUTHTOKEN = '744cf4f8bd628e62f248444a478ce06681cb8089'\nORDER_SERVICE_BASEURL = 'http://127.0.0.1:8001'\n```", "```py\nfrom collections import namedtuple\n```", "```py\ndef empty(self, cart):\n    cart_items = ShoppingCartItem.objects.filter(\n        cart__id=cart.id\n    )\n\n    for item in cart_items:\n        item.delete()\n```", "```py\nOrderItem = namedtuple('OrderItem', \n                         'name price_per_unit product_id quantity')\n```", "```py\n<button class='btn btn-primary'>\n  <i class=\"fa fa-check\" aria-hidden=\"true\"></i>\n  &nbsp;SEND ORDER\n</button>\n```", "```py\n<form action=\"/cart/send\">\n  {% csrf_token %}\n  <button class='btn btn-primary'>\n    <i class=\"fa fa-check\" aria-hidden=\"true\"></i>\n    &nbsp;SEND ORDER\n  </button>\n</form>\n```", "```py\npath(r'cart/send', views.send_cart),\npath(r'my-orders/', views.my_orders),\n```", "```py\nimport json\nimport requests\nfrom http import HTTPStatus\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom gamestore import settings\n```", "```py\ndef _prepare_order_data(cart):\n\n    cart_items = ShoppingCartItem.objects.values_list(\n        'game__name',\n        'price_per_unit',\n        'game__id',\n        'quantity').filter(cart__id=cart.id)\n\n    order = cart_items.aggregate(\n        total_order=Sum(F('price_per_unit') * F('quantity'),\n                        output_field=DecimalField(decimal_places=2))\n    )\n\n    order_items = [OrderItem(*x)._asdict() for x in cart_items]\n\n    order_customer = {\n        'customer_id': cart.user.id,\n        'email': cart.user.email,\n        'name': f'{cart.user.first_name} {cart.user.last_name}'\n    }\n\n    order_dict = {\n        'items': order_items,\n        'order_customer': order_customer,\n        'total': order['total_order']\n    }\n\n    return json.dumps(order_dict, cls=DjangoJSONEncoder)\n```", "```py\n@login_required\ndef send_cart(request):\n    cart = ShoppingCart.objects.get(user_id=request.user.id)\n\n    data = _prepare_order_data(cart)\n\n    headers = {\n        'Authorization': f'Token {settings.ORDER_SERVICE_AUTHTOKEN}',\n        'Content-type': 'application/json'\n    }\n\n    service_url = f'{settings.ORDER_SERVICE_BASEURL}/api/order/add/'\n\n    response = requests.post(\n        service_url,\n        headers=headers,\n        data=data)\n\n    if HTTPStatus(response.status_code) is HTTPStatus.CREATED:\n        request_data = json.loads(response.text)\n        ShoppingCart.objects.empty(cart)\n        messages.add_message(\n            request,\n            messages.INFO,\n            ('We received your order!'\n             'ORDER ID: {}').format(request_data['order_id']))\n    else:\n        messages.add_message(\n            request,\n            messages.ERROR,\n            ('Unfortunately, we could not receive your order.'\n             ' Try again later.'))\n\n    return HttpResponseRedirect(reverse_lazy('user-cart'))\n```", "```py\n@login_required\ndef my_orders(request):\n    headers = {\n        'Authorization': f'Token {settings.ORDER_SERVICE_AUTHTOKEN}',\n        'Content-type': 'application/json'\n    }\n\n    get_order_endpoint = f'/api/customer/{request.user.id}/orders/get/'\n    service_url = f'{settings.ORDER_SERVICE_BASEURL}{get_order_endpoint}'\n\n    response = requests.get(\n        service_url,\n        headers=headers\n    )\n\n    if HTTPStatus(response.status_code) is HTTPStatus.OK:\n        request_data = json.loads(response.text)\n        context = {'orders': request_data}\n    else:\n        messages.add_message(\n            request,\n            messages.ERROR,\n            ('Unfortunately, we could not retrieve your orders.'\n             ' Try again later.'))\n        context = {'orders': []}\n\n    return render(request, 'main/my-orders.html', context)\n```", "```py\n{% extends 'base.html' %}\n\n{% block 'content' %}\n\n<h3>Order history</h3>\n\n{% for order in orders %}\n\n<div class=\"order-container\">\n  <div><strong>Order ID:</strong> {{order.id}}</div>\n  <div><strong>Create date:</strong> {{ order.created_at }}</div>\n  <div><strong>Status:</strong> <span class=\"label label-success\">{{order.status}}</span></div>\n  <div class=\"table-container\">\n    <table class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>Product name</th>\n          <th>Quantity</th>\n          <th>Price per unit</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for item in order.items %}\n        <tr>\n          <td>{{item.name}}</td><td>{{item.quantity}}</td>  \n          <td>${{item.price_per_unit}}</td>\n        </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </div>\n  <div><strong>Total amount:</strong>{{order.total}}</div>\n  <hr/>\n</div>\n{% endfor %}\n{% endblock %}\n```", "```py\n.nav.navbar-nav .fa-home,\n.nav.navbar-nav .fa-shopping-cart {\n    font-size: 1.5em;\n}\n```", "```py\n.nav.navbar-nav .fa-home,\n.nav.navbar-nav .fa-shopping-cart,\n.nav.navbar-nav .fa-truck {\n    font-size: 1.5em;\n}\n```", "```py\n.order-container {\n    border: 1px solid #000;\n    margin: 20px;\n    padding: 10px;\n}\n```", "```py\n<li>\n  <a href=\"/cart/\">\n    <i class=\"fa fa-shopping-cart\" aria-hidden=\"true\"></i> CART\n  </a>\n</li>\n```", "```py\n<li>\n  <a href=\"/my-orders/\">\n    <i class=\"fa fa-truck\" aria-hidden=\"true\"></i> ORDERS\n  </a>\n</li>\n```", "```py\n{% if messages %}\n  {% for message in messages %}    \n    {{message}}\n    </div>\n  {% endfor %}\n{% endif %}\n```", "```py\n{% if messages %}\n  {% for message in messages %}\n    {% if message.tags == 'error' %}\n      <div class=\"alert alert-danger\" role=\"alert\">\n    {% else %}\n      <div class=\"alert alert-info\" role=\"alert\">\n    {% endif %}\n    {{message}}\n    </div>\n  {% endfor %}\n{% endif %}\n```", "```py\npython manage.py runserver\n```", "```py\npython manage.py runserver 127.0.0.1:8001\n```", "```py\nssh -i gamestore-keys.pem ec2-user@35.176.16.157\n```", "```py\nsudo yum update\n```", "```py\nsudo yum install python36.x86_64 python36-pip.noarch python36- setuptools.noarch\n```", "```py\nsudo yum install nginx\n```", "```py\nsudo pip-3.6 install django requests pillow gunicorn\n```", "```py\nscp -R -i gamestore-keys.pem ./gamestore ec2-user@35.176.16.157:~/gamestore\n```", "```py\nALLOWED_HOSTS=[\"35.176.16.157\"]\n```", "```py\nORDER_SERVICE_BASEURL = \"http://35.176.194.15\"\n```", "```py\nsudo mkdir /app && sudo cp -R ./gamestore /app/\n```", "```py\ncd / && sudo chown -R nginx:nginx ./gamestore\n```", "```py\nlocation / {\n  proxy_pass http://127.0.0.1:8000;\n  proxy_set_header Host $host;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n\nlocation /static {\n  root /app/gamestore;\n}\n```", "```py\nsudo service nginx restart\n```", "```py\ncd /app/gamestore\n```", "```py\nsudo gunicorn -u nginx gamestore.wsgi\n```", "```py\nsudo pip-3.6 install django djangorestframework requests\n```", "```py\nscp -R -i order-service-keys.pem ./order ec2-user@35.176.194.15:~/gamestore\n```", "```py\nALLOWED_HOSTS=[\"35.176.194.15\"]\n```", "```py\nsudo mkdir /srv && sudo cp -R ./order /srv/\n```", "```py\ncd / && sudo chown -R nginx:nginx ./order\n```", "```py\nlocation / {\n  proxy_pass http://127.0.0.1:8000;\n  proxy_set_header Host $host;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```", "```py\nsudo service nginx restart\n```", "```py\ncd /srv/order\n```", "```py\nsudo gunicorn -u nginx order.wsgi\n```"]