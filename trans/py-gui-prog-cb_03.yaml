- en: Chapter 3. Look and Feel Customization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。外观定制
- en: 'In this chapter, we will customize our GUI using Python 3:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Python 3自定义我们的GUI：
- en: Creating message boxes – information, warning, and error
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建消息框-信息、警告和错误
- en: How to create independent message boxes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建独立的消息框
- en: How to create the title of a tkinter window form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建tkinter窗体的标题
- en: Changing the icon of the main root window
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改主根窗口的图标
- en: Using a spin box control
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用旋转框控件
- en: Relief, sunken, and raised appearance of widgets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件的浮雕、凹陷和凸起外观
- en: Creating tooltips using Python
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python创建工具提示
- en: How to use the canvas widget
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用画布小部件
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we will customize some of the widgets in our GUI by changing
    some of their properties. We are also introducing a few new widgets tkinter offers
    us.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过更改一些属性来自定义GUI中的一些小部件。我们还介绍了一些tkinter提供给我们的新小部件。
- en: The *Creating tooltips using Python* recipe will create a ToolTip OOP-style
    class, which will be a part of the one single Python module we have been using
    up to now.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用Python创建工具提示*示例将创建一个ToolTip面向对象的类，它将成为我们到目前为止一直在使用的单个Python模块的一部分。'
- en: Creating message boxes – information, warning, and error
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建消息框-信息、警告和错误
- en: A message box is a pop-up window that gives feedback to the user. It can be
    informational, hinting at potential problems, and even catastrophic errors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框是一个弹出窗口，向用户提供反馈。它可以是信息性的，暗示潜在问题，甚至是灾难性的错误。
- en: Using Python to create message boxes is very easy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python创建消息框非常容易。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will add functionality to the **Help** | **About** menu item we created in
    the previous recipe. The typical feedback to the user when clicking the **Help**
    | **About** menu in most applications is informational. We start with this information
    and then vary the design pattern to show warnings and errors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为上一个示例中创建的“帮助”|“关于”菜单项添加功能。在大多数应用程序中，单击“帮助”|“关于”菜单时向用户提供的典型反馈是信息性的。我们从这个信息开始，然后变化设计模式以显示警告和错误。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Add the following line of code to the top of the module where the import statements
    live:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到导入语句所在的模块顶部：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we will create a callback function that will display a message box. We
    have to locate the code of the callback above the code where we attach the callback
    to the menu item, because this is still procedural and not OOP code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个回调函数来显示一个消息框。我们必须将回调的代码放在我们将回调附加到菜单项的代码上面，因为这仍然是过程性的而不是面向对象的代码。
- en: 'Add this code just above the lines where we create the help menu:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码添加到创建帮助菜单的行的上方：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Clicking **Help** | **About** now causes the following pop-up window to appear:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在单击“帮助”|“关于”会导致以下弹出窗口出现：
- en: '![How to do it...](graphics/B04829_03_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](graphics/B04829_03_01.jpg)'
- en: 'Let''s transform this code into a warning message box pop-up window instead.
    Comment out the previous line and add the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这段代码转换为警告消息框弹出窗口。注释掉上一行并添加以下代码：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running the above code will now result in the following slightly modified message
    box:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上面的代码现在会导致以下略微修改的消息框出现：
- en: '![How to do it...](graphics/B04829_03_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](graphics/B04829_03_02.jpg)'
- en: 'Displaying an error message box is simple and usually warns the user of a serious
    problem. As above, so below. Comment out and add this code, as we have done here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 显示错误消息框很简单，通常警告用户存在严重问题。如上所述，注释掉并添加此代码，如我们在这里所做的：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![How to do it...](graphics/B04829_03_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](graphics/B04829_03_03.jpg)'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We have added another callback function and attached it as a delegate to handle
    the click event. Now, when we click the **Help** | **About** menu, an action takes
    place. We are creating and displaying the most common pop-up message box dialogs.
    They are modal, so the user can't use the GUI until they click the **OK** button.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了另一个回调函数，并将其附加为处理单击事件的委托。现在，当我们单击“帮助”|“关于”菜单时，会发生一个动作。我们正在创建和显示最常见的弹出式消息框对话框。它们是模态的，因此用户在点击“确定”按钮之前无法使用GUI。
- en: In the first example we display an information box, as can be seen by the icon
    to the left of it. Next, we create warning and error message boxes that automatically
    change the icon associated with the pop-up. All we have to do is specify which
    mBox we want to display.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我们显示了一个信息框，可以看到其左侧的图标。接下来，我们创建警告和错误消息框，它们会自动更改与弹出窗口关联的图标。我们只需指定要显示哪个mBox。
- en: There are different message boxes that display more than one **OK** button and
    we can program our responses according to the user's selection.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的消息框显示多个“确定”按钮，我们可以根据用户的选择来编程我们的响应。
- en: 'The following is a simple example that illustrates this technique:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的例子，说明了这种技术：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Running this GUI code results in a pop-up whose user response can be used to
    branch on the answer of this event-driven GUI loop by saving it in the `answer`
    variable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此GUI代码会导致弹出一个用户响应可以用来分支的窗口，通过将其保存在“answer”变量中来驱动此事件驱动的GUI循环的答案。
- en: '![How it works...](graphics/B04829_03_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](graphics/B04829_03_04.jpg)'
- en: The console output using Eclipse shows that clicking the **Yes** button results
    in the Boolean value of `True` being assigned to the `answer` variable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse中使用控制台输出显示，单击“是”按钮会导致将布尔值“True”分配给“answer”变量。
- en: '![How it works...](graphics/B04829_03_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](graphics/B04829_03_05.jpg)'
- en: 'For example, we could use the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用以下代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to create independent message boxes
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建独立的消息框
- en: In this recipe, we will create our tkinter message boxes as stand-alone top-level
    GUI windows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建我们的tkinter消息框作为独立的顶层GUI窗口。
- en: We will first notice that, by doing so, we end up with an extra window so we
    will explore ways to hide this window.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先注意到，这样做会多出一个窗口，因此我们将探索隐藏此窗口的方法。
- en: In the previous recipe, we invoked tkinter message boxes via our **Help** |
    **About** menu from our main GUI form.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们通过我们主GUI表单中的“帮助”|“关于”菜单调用了tkinter消息框。
- en: So why would we wish to create an independent message box?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么我们希望创建一个独立的消息框呢？
- en: One reason is that we might customize our message boxes and reuse them in several
    of our GUIs. Instead of having to copy and paste the same code into every Python
    GUI we design, we can factor it out of our main GUI code. This can create a small
    reusable component, which we can then import into different Python GUIs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个原因是我们可能会自定义我们的消息框，并在我们的GUI中重用它们。我们可以将它们从我们的主GUI代码中分离出来，而不是在我们设计的每个Python GUI中复制和粘贴相同的代码。这可以创建一个小的可重用组件，然后我们可以将其导入到不同的Python
    GUI中。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have already created the title of a message box in the previous recipe. We
    will not reuse the code from the previous recipe, but instead we will build a
    new GUI in very few lines of Python code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一个食谱中创建了消息框的标题。我们不会重用上一个食谱中的代码，而是会用很少的Python代码构建一个新的GUI。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We can create a simple message box like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像这样创建一个简单的消息框：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will result in these two windows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致这两个窗口：
- en: '![How to do it...](graphics/B04829_03_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_06.jpg)'
- en: This does not look like what we had in mind. Now we have two windows, one undesired
    and the second having its text displayed as its title.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不像我们想象的那样。现在我们有两个窗口，一个是不需要的，第二个是其文本显示为标题。
- en: Oops.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀。
- en: Let's fix this now. We can change the Python code by adding a single or double
    quote, followed by a comma.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来修复这个问题。我们可以通过添加一个单引号或双引号，后跟一个逗号来更改Python代码。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![How to do it...](graphics/B04829_03_07.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_07.jpg)'
- en: The first parameter is the title and the second is the text displayed in the
    pop-up message box. By adding an empty pair of single or double quotes followed
    by a comma, we can move our text from the title into the pop-up message box.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是标题，第二个是弹出消息框中显示的文本。通过添加一对空的单引号或双引号，后跟一个逗号，我们可以将我们的文本从标题移到弹出消息框中。
- en: We still need a title and we definitely want to get rid of this unnecessary
    second window.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要一个标题，而且我们肯定想摆脱这个不必要的第二个窗口。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In languages like C#, the same phenomenon of a second window appears. It is
    basically a DOS-style debug window. Many programmers seem not to mind having this
    extra window floating around. I personally find it distasteful from a GUI programming
    perspective. We will remove it next.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在像C#这样的语言中，会出现第二个窗口的相同现象。基本上是一个DOS风格的调试窗口。许多程序员似乎不介意有这个额外的窗口漂浮。从GUI编程的角度来看，我个人觉得这很不雅。我们将在下一步中删除它。
- en: The second window is caused by a Windows event loop. We can get rid of it by
    suppressing it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个窗口是由Windows事件循环引起的。我们可以通过抑制它来摆脱它。
- en: 'Add the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we have only one window. The `withdraw()` function removes the debug window
    we are not interested in having floating around.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只有一个窗口。`withdraw()`函数移除了我们不希望漂浮的调试窗口。
- en: '![How to do it...](graphics/B04829_03_08.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_08.jpg)'
- en: In order to add a title, all we have to do is place some string into our empty
    first argument.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加标题，我们只需将一些字符串放入我们的空第一个参数中。
- en: 'For example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now our dialog has a title:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的对话框有了标题：
- en: '![How to do it...](graphics/B04829_03_09.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_09.jpg)'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are passing more arguments into the tkinter constructor of the message box
    to add a title to the window form and display the text in the message box, instead
    of displaying it as its title. This happens due to the position of the arguments
    we are passing. If we leave out an empty quote or double quote, then the message
    box widget takes the first position of the arguments as the title, not the text
    to be displayed within the message box. By passing an empty quote followed by
    a comma, we change where the message box displays the text we are passing into
    the function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更多参数传递给消息框的tkinter构造函数，以添加窗体的标题并在消息框中显示文本，而不是将其显示为标题。这是由于我们传递的参数的位置。如果我们省略空引号或双引号，那么消息框小部件将把第一个参数的位置作为标题，而不是要在消息框中显示的文本。通过传递一个空引号后跟一个逗号，我们改变了消息框显示我们传递给函数的文本的位置。
- en: We suppress the second pop-op window that automatically gets created by the
    tkinter message box widget by calling the `withdraw()` method on our main root
    window.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在我们的主根窗口上调用`withdraw()`方法来抑制tkinter消息框小部件自动创建的第二个弹出窗口。
- en: How to create the title of a tkinter window form
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建tkinter窗体的标题
- en: The principle of changing the title of a tkinter main root window is the same
    as was discussed in the previous recipe. We just pass in a string as the first
    argument to the constructor of the widget.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 更改tkinter主根窗口的标题的原则与前一个食谱中讨论的原则相同。我们只需将一个字符串作为小部件的构造函数的第一个参数传递进去。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Instead of a pop-up dialog window, we create the main root window and give it
    a title.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与弹出对话框窗口不同，我们创建主根窗口并给它一个标题。
- en: The GUI displayed in this recipe is the code from the previous chapter. It does
    not build upon the previous recipe in this chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中显示的GUI是上一章的代码。它不是在本章中基于上一个食谱构建的。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The following code creates the main window and adds a title to it. We have already
    done this in previous recipes. Here, we just focus on this aspect of our GUI.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了主窗口并为其添加了标题。我们已经在以前的食谱中做过这个。在这里，我们只关注GUI的这个方面。
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![How to do it...](graphics/B04829_03_10.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_10.jpg)'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This gives a title to the main root window by using the built-in tkinter `title`
    property. After we create a `Tk()` instance we can use all of the built-in tkinter
    properties to customize our GUI.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用内置的tkinter `title` 属性，为主根窗口添加标题。在创建`Tk()`实例后，我们可以使用所有内置的tkinter属性来自定义我们的GUI。
- en: Changing the icon of the main root window
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改主根窗口的图标
- en: One way to customize our GUI is to give it a different icon than the default
    icon that ships out of the box with tkinter. Here is how we do this.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义GUI的一种方法是给它一个与tkinter默认图标不同的图标。下面是我们如何做到这一点。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are improving our GUI from the previous recipe. We will use an icon that
    ships with Python but you can use any icon you find useful. Make sure you have
    the full path to where the icon lives in your code, or you might get errors.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在改进上一个配方的GUI。我们将使用一个随Python一起提供的图标，但您可以使用任何您认为有用的图标。确保您在代码中有图标所在的完整路径，否则可能会出错。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While it might seem a little bit confusing which recipe of the last chapter
    this recipe refers to, the best approach is to just download the code for this
    book and then step through the code to understand it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可能会有点混淆，上一章的这个配方指的是哪个配方，最好的方法就是只下载本书的代码，然后逐步执行代码以理解它。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Place the following code somewhere above the main event loop. The example uses
    the path where I installed Python 3.4\. You might have to adjust it to match your
    installation directory.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码放在主事件循环的上方某处。示例使用了我安装Python 3.4的路径。您可能需要调整它以匹配您的安装目录。
- en: Notice how the "feather" default icon in the top-left corner of the GUI changed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意GUI左上角的“feather”默认图标已更改。
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![How to do it...](graphics/B04829_03_11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_11.jpg)'
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is another property that ships with tkinter, which ships with Python 3.x.
    `iconbitmap`, is the property we are using to change the icon of our main root
    window form by passing in the absolute (hard-coded) path to an icon. This overrides
    tkinter's default icon, replacing it with our icon of choice.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个与Python 3.x一起提供的tkinter的属性。 `iconbitmap`是我们使用的属性，通过传递图标的绝对（硬编码）路径来改变主根窗口的图标。这将覆盖tkinter的默认图标，用我们选择的图标替换它。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using "r" in the string of the absolute path in the code above escapes the backslashes,
    so instead of writing `C:\\` we can use the "raw" string, which lets us write
    the more natural single backslash `C:\`. This is a neat trick Python has created
    for us.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，使用绝对路径的字符串中的“r”来转义反斜杠，因此我们可以使用“raw”字符串，而不是写`C:\\`，这让我们可以写更自然的单个反斜杠`C:\`。这是Python为我们创建的一个巧妙的技巧。
- en: Using a spin box control
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用旋转框控件
- en: In this recipe, we will use a `Spinbox` widget and we will also bind the *Enter*
    key on the keyboard to one of our widgets.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`Spinbox`小部件，并且还将绑定键盘上的*Enter*键到我们的小部件之一。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are using our tabbed GUI and will add a `Spinbox` widget above the `ScrolledText`
    control. This simply requires us to increment the `ScrolledText` row value by
    one and to insert our new `Spinbox` control in the row above the `Entry` widget.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用我们的分页GUI，并将在`ScrolledText`控件上方添加一个`Spinbox`小部件。这只需要我们将`ScrolledText`行值增加一，并在`Entry`小部件上面的行中插入我们的新`Spinbox`控件。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, we add the `Spinbox` control. Place the following code above the `ScrolledText`
    widget:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加了`Spinbox`控件。将以下代码放在`ScrolledText`小部件上方：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will modify our GUI, as shown:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将修改我们的GUI，如下所示：
- en: '![How to do it...](graphics/B04829_03_12.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_12.jpg)'
- en: Next, we will reduce the size of the `Spinbox` widget.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将减小`Spinbox`小部件的大小。
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![How to do it...](graphics/B04829_03_13.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_13.jpg)'
- en: Next, we add another property to customize our widget further, `bd` is a short-hand
    notation for the `borderwidth` property.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加另一个属性来进一步自定义我们的小部件，`bd`是`borderwidth`属性的简写表示。
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![How to do it...](graphics/B04829_03_14.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_14.jpg)'
- en: Here, we add functionality to the widget by creating a callback and linking
    it to the control.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过创建回调并将其链接到控件来为小部件添加功能。
- en: This will print the selection of the Spinbox into `ScrolledText` as well as
    onto stdout. The variable named `scr` is our reference to the `ScrolledText` widget.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把Spinbox的选择打印到`ScrolledText`中，也打印到标准输出。名为`scr`的变量是我们对`ScrolledText`小部件的引用。
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![How to do it...](graphics/B04829_03_15.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_15.jpg)'
- en: Instead of using a range, we can also specify a set of values.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用范围，我们还可以指定一组值。
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will create the following GUI output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建以下GUI输出：
- en: '![How to do it...](graphics/B04829_03_16.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_16.jpg)'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Notice how, in the first screenshot, our new `Spinbox` control defaulted to
    a width of 20, pushing out the column width of all controls in this column. This
    is not what we want. We gave the widget a range from 0 to 10 and it defaults to
    show the `to=10` value, which is the highest value. If we try to reverse the `from_/to`
    range from 10 to 0, tkinter does not like it. Do try this out for yourself.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在第一个屏幕截图中，我们的新`Spinbox`控件默认为宽度20，推出了此列中所有控件的列宽。这不是我们想要的。我们给小部件一个从0到10的范围，并且默认显示`to=10`值，这是最高值。如果我们尝试将`from_/to`范围从10到0反转，tkinter不会喜欢。请自行尝试。
- en: In the second screenshot, we reduced the width of the `Spinbox` control, which
    aligned it in the center of the column.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个屏幕截图中，我们减小了`Spinbox`控件的宽度，这使其与列的中心对齐。
- en: In the third screenshot, we added the `borderwidth` property of the Spinbox,
    which automatically made the entire `Spinbox` appear no longer flat but three-dimensional.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个屏幕截图中，我们添加了Spinbox的`borderwidth`属性，这自动使整个`Spinbox`看起来不再是平的，而是三维的。
- en: In the fourth screenshot, we added a callback function to display the number
    chosen in the `ScrolledText` widget and print it to the standard out-stream. We
    added "\n" to print on new lines. Notice how the default value does not get printed.
    It is only when we click the control that the callback function gets called. By
    clicking the up arrow with the default of 10, we can print the "10" value.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四个屏幕截图中，我们添加了一个回调函数，以显示在`ScrolledText`小部件中选择的数字，并将其打印到标准输出流中。我们添加了“\n”以打印在新行上。请注意默认值不会被打印。只有当我们单击控件时，回调函数才会被调用。通过单击默认为10的向上箭头，我们可以打印值“10”。
- en: Lastly, we restrict the values available to a hard-coded set. This could also
    be read in from a data source (for example, a text or XML file).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将限制可用的值为硬编码集。这也可以从数据源（例如文本或XML文件）中读取。
- en: Relief, sunken, and raised appearance of widgets
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件的Relief、sunken和raised外观
- en: We can control the appearance of our `Spinbox` widgets by a property that makes
    them look either in relief, sunken, or in a raised format.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个属性来控制`Spinbox`小部件的外观，使它们看起来是凸起的、凹陷的，或者是凸起的格式。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will add one more `Spinbox` control to demonstrate the available appearances
    of widgets using the relief property of the `Spinbox` control.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个`Spinbox`控件来演示`Spinbox`控件的`relief`属性的可用外观。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, let's increase the `borderwidth` to distinguish our second `Spinbox`
    from the first `Spinbox`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们增加`borderwidth`以区分我们的第二个`Spinbox`和第一个`Spinbox`。
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![How to do it...](graphics/B04829_03_17.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_17.jpg)'
- en: Both of our Spinbox widgets above have the same relief style. The only difference
    is that our new widget to the right of the first Spinbox has a much larger border
    width.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面的两个Spinbox小部件具有相同的`relief`样式。唯一的区别是，我们右边的新小部件的边框宽度要大得多。
- en: In our code, we did not specify which relief property to use, so the relief
    defaulted to tk.SUNKEN.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们没有指定使用哪个`relief`属性，所以`relief`默认为`tk.SUNKEN`。
- en: 'Here are the available relief property options that can be set:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以设置的可用`relief`属性选项：
- en: '| tk.SUNKEN | tk.RAISED | tk.FLAT | tk.GROOVE | tk.RIDGE |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| tk.SUNKEN | tk.RAISED | tk.FLAT | tk.GROOVE | tk.RIDGE |'
- en: By assigning the different available options to the `relief` property, we can
    create different appearances for this widget.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将不同的可用选项分配给`relief`属性，我们可以为这个小部件创建不同的外观。
- en: 'Assigning the tk.RIDGE relief and reducing the border width to the same value
    as our first Spinbox widget results in the following GUI:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将`tk.RIDGE`的`relief`属性分配给它，并将边框宽度减小到与我们的第一个`Spinbox`小部件相同的值，结果如下GUI所示：
- en: '![How to do it...](graphics/B04829_03_18.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_03_18.jpg)'
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we created a second `Spinbox` aligned in the second column (index ==
    1). It defaults to `SUNKEN`, so it looks similar to our first `Spinbox`. We distinguished
    the two widgets by increasing the border width of the second control (the one
    to the right).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个第二个`Spinbox`，对齐到第二列（索引==1）。它默认为`SUNKEN`，所以它看起来类似于我们的第一个`Spinbox`。我们通过增加第二个控件（右边的控件）的边框宽度来区分这两个小部件。
- en: Next, we implicitly set the relief property of the Spinbox widget. We made the
    border width the same as our first Spinbox because, by giving it a different relief,
    the differences became visible without having to change any other properties.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们隐式地设置了`Spinbox`小部件的`relief`属性。我们使边框宽度与我们的第一个`Spinbox`相同，因为通过给它一个不同的`relief`，不需要改变任何其他属性，差异就变得可见了。
- en: Creating tooltips using Python
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python创建工具提示
- en: This recipe will show us how to create ToolTips. When the user hovers the mouse
    over a widget, additional information will be available in the form of a ToolTip.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将向我们展示如何创建工具提示。当用户将鼠标悬停在小部件上时，将以工具提示的形式提供额外的信息。
- en: We will code this additional information into our GUI.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这些额外的信息编码到我们的GUI中。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are adding more useful functionality to our GUI. Surprisingly, adding a ToolTip
    to our controls should be simple, but it is not as simple as we wish it to be.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在为我们的GUI添加更多有用的功能。令人惊讶的是，向我们的控件添加工具提示应该很简单，但实际上并不像我们希望的那样简单。
- en: In order to achieve this desired functionality, we will place our ToolTip code
    into its own OOP class.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这种期望的功能，我们将把我们的工具提示代码放入自己的面向对象编程类中。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Add this class just below the import statements:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入语句的下面添加这个类：
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In an **object-oriented programming** (**OOP**) approach we create a new class
    in our Python module. Python allows us to place more than one class into the same
    Python module and it also enables us to "mix-and-match" classes and regular functions
    in the same module.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在**面向对象编程**（**OOP**）方法中，我们在Python模块中创建一个新的类。Python允许我们将多个类放入同一个Python模块中，并且还可以在同一个模块中“混合和匹配”类和常规函数。
- en: The code above is doing exactly this.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码正在做这个。
- en: The `ToolTip` class is a Python class and in order to use it, we have to instantiate
    it.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`ToolTip`类是一个Python类，为了使用它，我们必须实例化它。'
- en: If you are not familiar with OOP programming, "instantiating an object to create
    an instance of the class" may sound rather boring.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉面向对象的编程，“实例化一个对象以创建类的实例”可能听起来相当无聊。
- en: The principle is quite simple and very similar to creating a Python function
    via a `def` statement and then later in the code actually calling this function.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则非常简单，非常类似于通过`def`语句创建一个Python函数，然后在代码中稍后调用这个函数。
- en: 'In a very similar manner, we first create a blueprint of a class and simply
    assign it to a variable by adding parentheses to the name of the class as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以非常相似的方式，我们首先创建一个类的蓝图，并通过在类的名称后面添加括号将其分配给一个变量：
- en: '[PRE19]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The above code prints out a memory address and also shows that our variable
    now has a reference to this class instance.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码打印出一个内存地址，并且显示我们的变量现在引用了这个类实例。
- en: The cool thing about OOP is that we can create many instances of the same class.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程的很酷的一点是，我们可以创建同一个类的许多实例。
- en: In our preceding code, we declare a Python class and explicitly make it inherit
    from the object that is the foundation of all Python classes. We can also leave
    it out as we have done in the `AClass` code example because it is the default
    for all Python classes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的代码中，我们声明了一个Python类，并明确地让它继承自所有Python类的基础对象。我们也可以将其省略，就像我们在`AClass`代码示例中所做的那样，因为它是所有Python类的默认值。
- en: After all of the necessary tooltip creation code that occurs within the `ToolTip`
    class, we next switch over to non-OOP Python programming by creating a function
    just below it.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ToolTip`类中发生的所有必要的工具提示创建代码之后，我们接下来转到非面向对象的Python编程，通过在其下方创建一个函数。
- en: We define the function `createToolTip()` and it expects one of our GUI widgets
    to be passed in as an argument so we can display a ToolTip when we hover our mouse
    over this control.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了函数`createToolTip()`，它期望我们的GUI小部件之一作为参数传递进来，这样当我们将鼠标悬停在这个控件上时，我们就可以显示一个工具提示。
- en: The `createToolTip()` function actually creates a new instance of our `ToolTip`
    class for every widget we call it for.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`createToolTip()`函数实际上为我们为每个调用它的小部件创建了`ToolTip`类的一个新实例。'
- en: 'We can add a tooltip for our Spinbox widget, like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为我们的Spinbox小部件添加一个工具提示，就像这样：
- en: '[PRE20]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As well as for all of our other GUI widgets in the very same manner. We just
    have to pass in the parent of the widget we wish to have a tooltip displaying
    some extra information. For our ScrolledText widget we made the variable `scr`
    point to it so this is what we pass into the constructor of our ToolTip creation
    function.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以及我们所有其他GUI小部件的方式完全相同。我们只需传入我们希望显示一些额外信息的工具提示的小部件的父级。对于我们的ScrolledText小部件，我们使变量`scr`指向它，所以这就是我们传递给我们的ToolTip创建函数构造函数的内容。
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is the beginning of OOP programming in this book. This might appear a little
    bit advanced, but do not worry, we will explain everything and it actually does
    work!
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书中面向对象编程的开始。这可能看起来有点高级，但不用担心，我们会解释一切，它确实有效！
- en: Well, running this code actually does NOT work or make any difference as of
    yet.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，实际上运行这段代码并没有起作用，也没有任何区别。
- en: 'Add the following code just below the creation of the spinner:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建微调器之后，添加以下代码：
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, when we hover the mouse over the spinner widget, we get a tooltip, providing
    additional information to the user.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们将鼠标悬停在微调小部件上时，我们会得到一个工具提示，为用户提供额外的信息。
- en: '![How it works...](graphics/B04829_03_19.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/B04829_03_19.jpg)'
- en: We are calling the function that creates the tooltip, and then we pass in a
    reference to the widget and the text we wish to display when we hover the mouse
    over the widget.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用创建工具提示的函数，然后将对小部件的引用和我们希望在悬停鼠标在小部件上时显示的文本传递进去。
- en: The rest of the recipes in this book will use OOP when it makes sense. Here,
    we show the simplest OOP example possible. As a default, every Python class we
    create inherits from the `object` base class. Python, being the pragmatic programming
    language that it truly is, simplifies the class creation process.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的其余示例将在合适的情况下使用面向对象编程。在这里，我们展示了可能的最简单的面向对象编程示例。作为默认，我们创建的每个Python类都继承自`object`基类。作为一个真正的务实的编程语言，Python简化了类的创建过程。
- en: 'We can write this syntax:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以写成这样：
- en: '[PRE23]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can also simplify it by leaving the default base class out:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过省略默认的基类来简化它：
- en: '[PRE24]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this same pattern, we can inherit and expand any tkinter class.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在同样的模式中，我们可以继承和扩展任何tkinter类。
- en: How to use the canvas widget
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用画布小部件
- en: This recipe shows how to add dramatic color effects to our GUI by using the
    tkinter canvas widget.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何通过使用tkinter画布小部件为我们的GUI添加戏剧性的颜色效果。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will improve our previous code and the look of our GUI by adding some more
    colors to it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过为其添加更多的颜色，我们将改进我们先前的代码和GUI的外观。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we will create a third tab in our GUI in order to isolate our new code.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在我们的GUI中创建第三个选项卡，以便隔离我们的新代码。
- en: 'Here is the code to create the new third tab:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建新的第三个选项卡的代码：
- en: '[PRE25]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Next, we use another built-in widget of tkinter, the canvas. A lot of people
    like this widget because it has powerful capabilities.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用tkinter的另一个内置小部件，即画布。很多人喜欢这个小部件，因为它具有强大的功能。
- en: '[PRE26]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The following screenshot shows the result created by running the preceding code
    and clicking on the new **Tab 3**. It really is orange and blue when you run the
    code. In this non-colored book, this might not be so visually obvious, but those
    colors are true; you can trust me on this.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了通过运行上述代码并单击新的**Tab 3**创建的结果。当你运行代码时，它真的是橙色和蓝色的。在这本无色的书中，这可能不太明显，但这些颜色是真实的；你可以相信我。
- en: You can check out the graphing and drawing capabilities by searching online.
    I will not go deeper into this widget in this book (but it is very cool).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在线搜索来查看绘图和绘制功能。我不会在这本书中深入探讨这个小部件（但它确实很酷）。
- en: '![How it works...](graphics/B04829_03_20.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/B04829_03_20.jpg)'
