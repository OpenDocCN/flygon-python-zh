["```py\n\"^(*d{3})*( |-)*d{3}( |-)*d{4}$\"\n```", "```py\n>>> fnmatch.fnmatch('hello.txt', '*.txt')\nTrue\n>>> fnmatch.fnmatch('hello.zip', '*.txt')\nFalse\n```", "```py\n>>> def declare(decl):\n...   if not fnmatch.fnmatch(decl, '*:*:*'):\n...     return False\n...   t, n, v = decl.split(':', 2)\n...   globals()[n] = getattr(__builtins__, t)(v)\n...   return True\n... \n>>> declare('int:somenum:3')\nTrue\n>>> somenum\n3\n>>> declare('bool:somebool:True')\nTrue\n>>> somebool\nTrue\n>>> declare('int:a')\nFalse\n```", "```py\n>>> os.listdir()\n['.git', '.gitignore', '.vscode', 'algorithms.rst', 'concurrency.rst', \n 'conf.py', 'crypto.rst', 'datastructures.rst', 'datetimes.rst', \n 'devtools.rst', 'filesdirs.rst', 'gui.rst', 'index.rst', 'io.rst', \n 'make.bat', 'Makefile', 'multimedia.rst', 'networking.rst', \n 'requirements.txt', 'terminal.rst', 'text.rst', 'venv', 'web.rst']\n>>> fnmatch.filter(os.listdir(), '*.git*')\n['.git', '.gitignore']\n```", "```py\n>>> reg = '({})|({})'.format(fnmatch.translate('*.git*'), \n                             fnmatch.translate('*vs*'))\n>>> reg\n'(.*\\.git.*\\Z(?ms))|(.*vs.*\\Z(?ms))'\n>>> import re\n>>> [s for s in os.listdir() if re.match(reg, s)]\n['.git', '.gitignore', '.vscode']\n```", "```py\n>>> senders = ['Jane Smith', 'Smith Lincoln']\n>>> fnmatch.filter(senders, 'Smith*')\n['Smith Lincoln']\n>>> fnmatch.filter(senders, '*Smith')\n['Jane Smith']\n```", "```py\n>>> s = 'Today the weather is nice'\n```", "```py\n>>> s2 = 'Today the weater is nice'\n>>> s3 = 'Yesterday the weather was nice'\n>>> s4 = 'Today my dog ate steak'\n```", "```py\n>>> import difflib\n>>> difflib.SequenceMatcher(None, s, s2, False).ratio()\n0.9795918367346939\n>>> difflib.SequenceMatcher(None, s, s3, False).ratio()\n0.8\n>>> difflib.SequenceMatcher(None, s, s4, False).ratio()\n0.46808510638297873\n```", "```py\n>>> a = 'aaaaaaaaaaaaaXaaaaaaaaaa'\n>>> b = 'X'\n>>> difflib.SequenceMatcher(lambda c: c=='a', a, b, False).ratio()\n0.08\n>>> difflib.SequenceMatcher(None, a, b, False).ratio()\n0.08    \n```", "```py\n>>> difflib.SequenceMatcher(None, a, b, False).get_matching_blocks()\n[Match(a=13, b=0, size=1), Match(a=24, b=1, size=0)]\n>>> difflib.SequenceMatcher(lambda c: c=='a', a, b, False).get_matching_blocks()\n[Match(a=13, b=0, size=1), Match(a=24, b=1, size=0)]\n```", "```py\n>>> discardmap = str.maketrans({\"a\": None})\n>>> difflib.SequenceMatcher(None, a.translate(discardmap), b.translate(discardmap), False).ratio()\n1.0\n```", "```py\ndictionary = {'ability', 'able', 'about', 'above', 'accept',    \n              'according', \n              'account', 'across', 'act', 'action', 'activity', \n              'actually', \n              'add', 'address', 'administration', 'admit', 'adult', \n              'affect', \n              'after', 'again', 'against', 'age', 'agency', \n              'agent', 'ago', \n              'agree', 'agreement', 'ahead', 'air', 'all', 'allow',  \n              'almost', \n              'alone', 'along', 'already', 'also', 'although', \n              'always', \n              'American', 'among', 'amount', 'analysis', 'and', \n              'animal', \n              'another', 'answer', 'any', 'anyone', 'anything', \n              'appear', \n              'apply', 'approach', 'area', 'argue', \n              'arm', 'around', 'arrive', \n              'art', 'article', 'artist', 'as', 'ask', 'assume', \n              'at', 'attack', \n              'attention', 'attorney', 'audience', 'author',  \n              'authority', \n              'available', 'avoid', 'away', 'baby', 'back', 'bad', \n              'bag', \n              'ball', 'bank', 'bar', 'base', 'be', 'beat', \n              'beautiful', \n              'because', 'become'}\n```", "```py\nimport difflib\n\ndef suggest(phrase):\n    changes = 0\n    words = phrase.split()\n    for idx, w in enumerate(words):\n        if w not in dictionary:\n            changes += 1\n            matches = difflib.get_close_matches(w, dictionary)\n            if matches:\n                words[idx] = matches[0]\n    return changes, ' '.join(words)\n```", "```py\n>>> suggest('assume ani answer')\n(1, 'assume any answer')\n>>> suggest('anoter agrement ahead')\n(2, 'another agreement ahead')\n```", "```py\n>>> suggest('beautiful art')\n(0, 'beautiful art')\n```", "```py\nname = 'Alessandro'\nmessages = ['Message 1', 'Message 2']\n\ntxt = 'Hello %s, You have %s message' % (name, len(messages))\nif len(messages) > 1:\n    txt += 's'\ntxt += ':n'\nfor msg in messages:\n    txt += msg + 'n'\nprint(txt)\n```", "```py\nimport string\n\nclass TemplateFormatter(string.Formatter):\n    def get_field(self, field_name, args, kwargs):\n        if field_name.startswith(\"$\"):\n            code = field_name[1:]\n            val = eval(code, {}, dict(kwargs))\n            return val, field_name\n        else:\n            return super(TemplateFormatter, self).get_field(field_name, args, kwargs)\n```", "```py\nmessages = ['Message 1', 'Message 2']\n\ntmpl = TemplateFormatter()\ntxt = tmpl.format(\"Hello {name}, \"\n                  \"You have {$len(messages)} message{$len(messages) and 's'}:n{$'\\n'.join(messages)}\", \n                  name='Alessandro', messages=messages)\nprint(txt)\n```", "```py\nHello Alessandro, You have 2 messages:\nMessage 1\nMessage 2\n```", "```py\nstring.Formatter().format(\"Hello {name}\", name='Alessandro')\n```", "```py\nHello Alessandro\n```", "```py\nclass TemplateFormatter(string.Formatter):\n    def get_field(self, field_name, args, kwargs):\n```", "```py\nif field_name.startswith(\"$\"):\n    code = field_name[1:]\n    val = eval(code, {}, dict(kwargs))\n```", "```py\nreturn val, field_name\n```", "```py\n{$3/2.0:.2f}\n```", "```py\n>>> import shlex\n>>>\n>>> text = 'I was sleeping at the \"Windsdale Hotel\"'\n>>> print(shlex.split(text))\n['I', 'was', 'sleeping', 'at', 'the', 'Windsdale Hotel']\n```", "```py\ntxt = \"\"\"And he looked over at the alarm clock,\nticking on the chest of drawers. \"God in Heaven!\" he thought.\nIt was half past six and the hands were quietly moving forwards,\nit was even later than half past, more like quarter to seven.\nHad the alarm clock not rung? He could see from the bed that it\nhad been set for four o'clock as it should have been; it certainly must have rung.\nYes, but was it possible to quietly sleep through that furniture-rattling noise?\nTrue, he had not slept peacefully, but probably all the more deeply because of that.\"\"\"\n```", "```py\n>>> import string\n>>> trans = str.maketrans('', '', string.punctuation)\n>>> txt = txt.lower().translate(trans)\n```", "```py\n\"\"\"and he looked over at the alarm clock\nticking on the chest of drawers god in heaven he thought\nit was half past six and the hands were quietly moving forwards\nit was even later than half past more like quarter to seven\nhad the alarm clock not rung he could see from the bed that it\nhad been set for four oclock as it should have been it certainly must have rung\nyes but was it possible to quietly sleep through that furniturerattling noise\ntrue he had not slept peacefully but probably all the more deeply because of that\"\"\"\n```", "```py\n>>> str.maketrans('a', 'b', 'c')\n{97: 98, 99: None}\n```", "```py\n>>> print(ord('a'), ord('b'), ord('c'))\n97 98 99\n```", "```py\n>>> 'ciao'.translate(str.maketrans('a', 'b', 'c'))\n'ibo'\n```", "```py\n>>> string.punctuation\n'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n```", "```py\n>>> str.maketrans('', '', string.punctuation)\n{64: None, 124: None, 125: None, 91: None, 92: None, 93: None,\n 94: None, 95: None, 96: None, 33: None, 34: None, 35: None,\n 36: None, 37: None, 38: None, 39: None, 40: None, 41: None,\n 42: None, 43: None, 44: None, 45: None, 46: None, 47: None,\n 123: None, 126: None, 58: None, 59: None, 60: None, 61: None,\n 62: None, 63: None}\n```", "```py\n>>> 'This, is. A test!'.translate(str.maketrans('', '', string.punctuation))\n'This is A test'\n```", "```py\nimport unicodedata, sys\n\nclass unaccented_map(dict):\n    def __missing__(self, key):\n        ch = self.get(key)\n        if ch is not None:\n            return ch\n        de = unicodedata.decomposition(chr(key))\n        if de:\n            try:\n                ch = int(de.split(None, 1)[0], 16)\n            except (IndexError, ValueError):\n                ch = key\n        else:\n            ch = key\n        self[key] = ch\n        return ch\n\nunaccented_map = unaccented_map()\n```", "```py\n>>> '\u00dcber'.translate(unaccented_map) Uber >>> 'gar\u00e7on'.translate(unaccented_map) garcon\n```", "```py\n>>> import unicodedata\n>>> unicodedata.decomposition('\u00e9')\n'0065 0301'\n```", "```py\n>>> unicodedata.decomposition('\u00e9').split()[0]\n'0065'\n```", "```py\n>>> int('0065', 16)\n101\n```", "```py\n>>> chr(101)\n'e'\n```", "```py\ncol1 | col2-1\ncol1-2 | col2-2\n```", "```py\ncol1-000001 | col2-1\ncol1-2 | col2-2\n```", "```py\ncols = ['hello world', \n        'this is a long text, maybe longer than expected, surely long enough', \n        'one more column']\n```", "```py\nCOLSIZE = 20\n```", "```py\nimport textwrap, itertools\n\ndef maketable(cols):\n    return 'n'.join(map(' | '.join, itertools.zip_longest(*[\n        [s.ljust(COLSIZE) for s in textwrap.wrap(col, COLSIZE)] for col in cols\n    ], fillvalue=' '*COLSIZE)))\n```", "```py\n>>> print(maketable(cols))\nhello world          | this is a long text, | one more column     \n                     | maybe longer than    |                     \n                     | expected, surely     |                     \n                     | long enough          |                     \n```", "```py\n[textwrap.wrap(col, COLSIZE) for col in cols]\n```", "```py\n[['hello world'], \n ['this is a long text,', 'maybe longer than', 'expected, surely', 'long enough'],\n ['one more column']]\n```", "```py\n[[s.ljust(COLSIZE) for s in textwrap.wrap(col, COLSIZE)] for col in cols]\n```", "```py\n[['hello world         '], \n ['this is a long text,', 'maybe longer than   ', 'expected, surely    ', 'long enough         '],\n ['one more column     ']]\n```", "```py\nlist(itertools.zip_longest(*[\n    [s.ljust(COLSIZE) for s in textwrap.wrap(col, COLSIZE)] for col in cols\n], fillvalue=' '*COLSIZE))\n```", "```py\n[('hello world         ', 'this is a long text,', 'one more column     '), \n ('                    ', 'maybe longer than   ', '                    '), \n ('                    ', 'expected, surely    ', '                    '), \n ('                    ', 'long enough         ', '                    ')]\n```", "```py\nmap(' | '.join, itertools.zip_longest(*[\n    [s.ljust(COLSIZE) for s in textwrap.wrap(col, COLSIZE)] for col in cols\n], fillvalue=' '*COLSIZE))\n```", "```py\n['hello world          | this is a long text, | one more column     ', \n '                     | maybe longer than    |                     ', \n '                     | expected, surely     |                     ', \n '                     | long enough          |                     ']\n```", "```py\n'''hello world          | this is a long text, | one more column     \n                        | maybe longer than    |                     \n                        | expected, surely     |                     \n                        | long enough          |                     '''\n```"]