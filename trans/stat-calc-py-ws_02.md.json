["```py\n$ pip install numpy\n```", "```py\n$ conda install numpy\n```", "```py\n>>> import numpy as np\n>>> a = np.array([1, 2, 3])\n>>> a\narray([1, 2, 3])\n>>> a[1]\n2\n```", "```py\n>>> b = np.array([1, 2, 'a'])\n>>> b\narray(['1', '2', 'a'], dtype='<U21')\n```", "```py\n>>> c = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> c\narray([[1, 2, 3],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[4, 5, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[7, 8, 9]])\n```", "```py\n>>> zero_array = np.zeros((2, 2))  # 2 by 2 zero matrix\n>>> zero_array\narray([[0., 0.],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0., 0.]])\n```", "```py\n>>> one_array = np.ones((2, 2, 3), dtype=int)  # 3D one integer matrix\n>>> one_array\narray([[[1, 1, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 1, 1]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[1, 1, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 1, 1]]])\n```", "```py\n>>> rand_array = np.random.rand(2, 3)\n>>> rand_array\narray([[0.90581261, 0.88732623, 0.291661  ],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.44705149, 0.25966191, 0.73547706]])\n```", "```py\n>>> a = np.array([1, 2, 3])\n>>> a[0]\n1\n>>> a[1]\n2\n```", "```py\n>>> b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> b\narray([[1, 2, 3],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[4, 5, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[7, 8, 9]])\n>>> b[1, 1]\n5\n```", "```py\n>>> a = np.random.rand(2, 3, 4)  # random 2-by-3-by-4 matrix\n>>> a\narray([[[0.54376986, 0.00244875, 0.74179644, 0.14304955],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.77229612, 0.32254451, 0.0778769 , 0.2832851 ],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.26492963, 0.5217093 , 0.68267418, 0.29538502]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[0.94479229, 0.28608588, 0.52837161, 0.18493272],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.08970716, 0.00239815, 0.80097454, 0.74721516],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.70845696, 0.09788526, 0.98864408, 0.82521871]]])\n>>> a[1, 0: 2, 1:]\narray([[0.28608588, 0.52837161, 0.18493272],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.00239815, 0.80097454, 0.74721516]])\n```", "```py\n>>> a\narray([[[0.54376986, 0.00244875, 0.74179644, 0.14304955],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.77229612, 0.32254451, 0.0778769 , 0.2832851 ],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.26492963, 0.5217093 , 0.68267418, 0.29538502]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[0.94479229, 0.28608588, 0.52837161, 0.18493272],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.08970716, 0.00239815, 0.80097454, 0.74721516],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.70845696, 0.09788526, 0.98864408, 0.82521871]]])\n>>> a.shape \n(2, 3, 4)\n>>> np.reshape(a, (3, 2, 4))\narray([[[0.54376986, 0.00244875, 0.74179644, 0.14304955],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.77229612, 0.32254451, 0.0778769 , 0.2832851 ]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[0.26492963, 0.5217093 , 0.68267418, 0.29538502],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.94479229, 0.28608588, 0.52837161, 0.18493272]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[0.08970716, 0.00239815, 0.80097454, 0.74721516],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.70845696, 0.09788526, 0.98864408, 0.82521871]]])\n```", "```py\n>>> np.reshape(a, (3, 3, 3))\n-------------------------------------------------------------------------\nValueError                          Traceback (most recent call last)\n...\nValueError: cannot reshape array of size 24 into shape (3,3,3)\n```", "```py\n>>> a.T\narray([[[0.54376986, 0.94479229],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.77229612, 0.08970716],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.26492963, 0.70845696]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[0.00244875, 0.28608588],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.32254451, 0.00239815],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.5217093 , 0.09788526]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[0.74179644, 0.52837161],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.0778769 , 0.80097454],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.68267418, 0.98864408]],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[[0.14304955, 0.18493272],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.2832851 , 0.74721516],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0.29538502, 0.82521871]]])\n```", "```py\n    import numpy as np\n    from timeit import Timer\n    ```", "```py\n    my_list = list(range(10 ** 6))\n    my_array = np.array(my_list)\n    ```", "```py\n    def for_add():\n    \u00a0\u00a0\u00a0\u00a0return [item + 1 for item in my_list]\n    def vec_add():\n    \u00a0\u00a0\u00a0\u00a0return my_array + 1\n    ```", "```py\n    print('For-loop addition:')\n    print(min(Timer(for_add).repeat(10, 10)))\n    print('Vectorized addition:')\n    print(min(Timer(vec_add).repeat(10, 10)))\n    ```", "```py\n    For-loop addition:\n    0.5640330809999909\n    Vectorized addition:\n    0.006047582000007878\n    ```", "```py\n    def for_mul():\n    \u00a0\u00a0\u00a0\u00a0return [item * 2 for item in my_list]\n    def vec_mul():\n    \u00a0\u00a0\u00a0\u00a0return my_array * 2\n    print('For-loop multiplication:')\n    print(min(Timer(for_mul).repeat(10, 10)))\n    print('Vectorized multiplication:')\n    print(min(Timer(vec_mul).repeat(10, 10)))\n    ```", "```py\n    For-loop multiplication: 0.5431750800000259\n    Vectorized multiplication: 0.005795304000002943\n    ```", "```py\n    import math\n    def for_sqrt():\n    \u00a0\u00a0\u00a0\u00a0return [math.sqrt(item) for item in my_list]\n    def vec_sqrt():\n    \u00a0\u00a0\u00a0\u00a0return np.sqrt(my_array)\n    print('For-loop square root:')\n    print(min(Timer(for_sqrt).repeat(10, 10)))\n    print('Vectorized square root:')\n    print(min(Timer(vec_sqrt).repeat(10, 10)))\n    ```", "```py\n    For-loop square root:\n    1.1018582749999268\n    Vectorized square root:\n    0.01677640299999439\n    ```", "```py\n>>> sample = np.random.normal()\n>>> sample\n-0.43658969989465696\n```", "```py\n>>> sample = np.random.normal(loc=100, scale=10)\n>>> sample\n80.31187658687652\n```", "```py\n>>> samples = np.random.normal(loc=100, scale=10, size=(2, 3))\n>>> samples\narray([[ 82.7834678 , 109.16410976, 101.35105681],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[112.54825751, 107.79073472,  77.70239823]])\n```", "```py\n>>> samples = np.random.poisson(lam=10, size=(2, 2))\n>>> samples\narray([[11, 10],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[15, 11]])\n```", "```py\n>>> np.random.randint(low=0, high=10, size=(2, 5))\narray([[6, 4, 1, 3, 6],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 8, 8, 8, 8]])\n>>> np.random.choice([1, 3, 4, -6], size=(2, 2))\narray([[1, 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[1, 4]])\n>>> a = [1, 2, 3, 4]\n>>> for _ in range(3):\n...        np.random.shuffle(a)\n...        print(a)\n[4, 1, 3, 2]\n[4, 1, 2, 3]\n[1, 2, 4, 3]\n```", "```py\n>>> import random\n>>> random.seed(0)  # can use any other number\n```", "```py\n>>> np.random.seed(0)\n```", "```py\n$ pip install pandas\n```", "```py\n$ conda install pandas\n```", "```py\n>>> import pandas as pd\n```", "```py\n>>> import pandas as pd\n>>> my_dict = {'col1': [1, 2], 'col2': np.array([3, 4]),'col3': [5, 6]}\n>>> df = pd.DataFrame(my_dict)\n>>> df\n\u00a0\u00a0\u00a0\u00a0\u00a0col1    col2    col3\n0    1       3       5\n1    2       4       6\n```", "```py\n>>> my_array = np.array([[1, 3, 5], [2, 4, 6]])\n>>> alt_df = pd.DataFrame(my_array, columns=['col1', 'col2', 'col3'])\n>>> alt_df\n\u00a0\u00a0\u00a0\u00a0\u00a0col1    col2    col3\n0    1       3       5\n1    2       4       6\n```", "```py\n>>> df.loc[0]\ncol1    1\ncol2    3\ncol3    5\nName: 0, dtype: int64\n```", "```py\n>>> df.loc[[0, 1]]\n\u00a0\u00a0\u00a0\u00a0\u00a0col1    col2    col3\n0    1       3       5\n1    2       4       6\n```", "```py\n>>> df.loc[0, ['col2', 'col3']]\ncol2    3\ncol3    5\nName: 0, dtype: int64\n```", "```py\n>>> df['col3']\n0    5\n1    6\nName: col3, dtype: int64\n```", "```py\n>>> for item in df.loc[:, 'col3']:\n...     print(item)\n5\n6\n```", "```py\n>>> df.loc[0] = [3, 6, 9]  # change first row\n>>> df\n\u00a0\u00a0\u00a0\u00a0\u00a0col1    col2    col3\n0    3       6       9\n1    2       4       6\n>>> df['col2'] = [0, 0]  # change second column\n>>> df\n\u00a0\u00a0\u00a0\u00a0\u00a0col1    col2    col3\n0    3       0       9\n1    2       0       6\n```", "```py\n>>> df['col4'] = [10, 10]\n>>> df.loc[3] = [1, 2, 3, 4]\n>>> df\n\u00a0\u00a0\u00a0\u00a0\u00a0col1    col2    col3    col4\n0    3       0       9       10\n1    2       0       6       10\n3    1       2       3       4\n```", "```py\n>>> df.loc[[False, True, False], [False, True, False, True]]\n\u00a0\u00a0\u00a0\u00a0\u00a0col2    col4\n1    0       10\n```", "```py\n>>> df.loc[:, df.loc[0] > 5]\n\u00a0\u00a0\u00a0\u00a0\u00a0col3    col4\n0    9       10\n1    6       10\n3    3       4\n```", "```py\n    id,x,y,z\n    0,1,1,3\n    1,1,0,9\n    2,1,3,\n    3,2,0,10\n    4,1,,4\n    5,2,2,3\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    df = pd.read_csv('dataset.csv', index_col='id')\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x     y      z\n    id\n    0    1      1.0    3.0\n    1    1      0.0    9.0\n    2    1      3.0    NaN\n    3    2      0.0    10.0\n    4    1      NaN    4.0\n    5    2      2.0    3.0\n    ```", "```py\n    df = df.rename(columns={'x': 'col_x', 'y': 'col_y', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'z': 'col_z'})\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0col_x     col_y     col_z\n    id\n    0    1         1.0       3.0\n    1    1         0.0       9.0\n    2    1         3.0       NaN\n    3    2         0.0       10.0\n    4    1         NaN       4.0\n    5    2         2.0       3.0\n    ```", "```py\n    df = df.fillna(0)\n    df = df.astype(int)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0col_x    col_y    col_z\n    id\n    0    1        1        3\n    1    1        0        9\n    2    1        3        0\n    3    2        0        10\n    4    1        0        4\n    5    2        2        3\n    ```", "```py\n    df = df.drop([1, 3, 4], axis=0)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0col_x    col_y    col_z\n    id\n    0    1        1        3\n    2    1        3        0\n    5    2        2        3\n    ```", "```py\n    zero_df = pd.DataFrame(np.zeros((2, 3)),                       columns=['col_x', 'col_y', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'col_z'])\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0col_x    col_y    col_z\n    0    0.0      0.0      0.0\n    1    0.0      0.0      0.0\n    ```", "```py\n    df = pd.concat([df, zero_df], axis=0)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0col_x    col_y    col_z\n    0    1.0      1.0      3.0\n    2    1.0      3.0      0.0\n    5    2.0      2.0      3.0\n    0    0.0      0.0      0.0\n    1    0.0      0.0      0.0\n    ```", "```py\n    df = df.sort_values('col_x', axis=0)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0col_x    col_y    col_z\n    0    0.0      0.0      0.0\n    1    0.0      0.0      0.0\n    0    1.0      1.0      3.0\n    2    1.0      3.0      0.0\n    5    2.0      2.0      3.0\n    ```", "```py\n    df = df.astype(int)\n    df.to_csv('output.csv', index=False)\n    ```", "```py\n    col_x, col_y, col_z\n    0,0,0\n    0,0,0\n    1,1,3\n    1,3,0\n    2,2,3\n    ```", "```py\n>>> df = pd.DataFrame({'x': [1, 2, -1], 'y': [-3, 6, 5], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'z': [1, 3, 2]})\n>>> df\n\u00a0\u00a0\u00a0\u00a0\u00a0x     y     z\n0    1     -3    1\n1    2     6     3\n2    -1    5     2\n```", "```py\n>>> df['x_squared'] = df['x'].apply(lambda x: x ** 2)\n>>> df\n\u00a0\u00a0\u00a0\u00a0\u00a0x     y    z    x_squared\n0    1     -3   1    1\n1    2     6    3    4\n2    -1    5    2    1\n```", "```py\n>>> df['x_squared'] = df['x'] ** 2\n```", "```py\n>>> def parity_str(x):\n...     if x % 2 == 0:\n...         return 'even'\n\n...     return 'odd'\n>>> df['x_parity'] = df['x'].apply(parity_str)\n>>> df\n\u00a0\u00a0\u00a0\u00a0\u00a0x     y     z    x_squared    x_parity\n0    1     -3    1    1            odd\n1    2     6     3    4            even\n2    -1    5     2    1            odd\n```", "```py\n>>> df['x_parity']\n0     odd\n1    even\n2     odd\nName: x_parity, dtype: object\n```", "```py\n>>> pd.get_dummies(df['x_parity'])\n\u00a0\u00a0\u00a0\u00a0\u00a0even    odd\n0    0       1\n1    1       0\n2    0       1\n```", "```py\n>>> df['x_parity'].value_counts()\nodd     2\neven    1\nName: x_parity, dtype: int64\n```", "```py\n    import pandas as pd\n    student_df = pd.DataFrame({'name': ['Alice', 'Bob', 'Carol', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Dan', 'Eli', 'Fran'],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'gender': ['female', 'male', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'female', 'male', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'male', 'female'],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'class': ['FY', 'SO', 'SR', \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'SO',' JR', 'SR'],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'gpa': [90, 93, 97, 89, 95, 92],\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'num_classes': [4, 3, 4, 4, 3, 2]})\n    student_df\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0name    gender    class    gpa    num_classes\n    0    Alice   female    FY       90     4\n    1    Bob     male      SO       93     3\n    2    Carol   female    SR       97     4\n    3    Dan     male      SO       89     4\n    4    Eli     male      JR       95     3\n    5    Fran    female    SR       92     2\n    ```", "```py\n    student_df['female_flag'] = student_df['gender']\\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.apply(lambda x: x == 'female')\n    ```", "```py\n    student_df['female_flag'] = student_df['gender'] == 'female'\n    ```", "```py\n    student_df = student_df.drop('gender', axis=1)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0name    class    gpa    num_classes    female_flag\n    0    Alice   FY       90     4              True\n    1    Bob     SO       93     3              False\n    2    Carol   SR       97     4              True\n    3    Dan     SO       89     4              False\n    4    Eli     JR       95     3              False\n    5    Fran    SR       92     2              True\n    ```", "```py\n    pd.get_dummies(student_df['class'])\n    ```", "```py\n    student_df = pd.concat([student_df.drop('class', axis=1), \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pd.get_dummies(student_df['class'])], axis=1)\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0\u00a0name    gpa    num_classes    female_flag    JR    FY    SO    SR\n    0    Alice   90     4              True           1     0     0     0\n    1    Bob     93     3              False          0     0     1     0\n    2    Carol   97     4              True           0     0     0     1\n    3    Dan     89     4              False          0     0     1     0\n    4    Eli     95     3              False          0     1     0     0\n    5    Fran    92     2              True           0     0     0     1\n    ```", "```py\n    gender_group = student_df.groupby('female_flag')\n    ```", "```py\n    <pandas.core.groupby.generic.DataFrameGroupBy object at  0x11d492550>\n    ```", "```py\n    gender_group['gpa'].mean()\n    ```", "```py\n    female_flag\n    False    92.333333\n    True     93.000000\n    Name: gpa, dtype: float64\n    ```", "```py\n    gender_group['num_classes'].sum()\n    ```", "```py\n    female_flag\n    False    10\n    True     10\n    Name: num_classes, dtype: int64\n    ```", "```py\n$ pip install matplotlib\n$ conda install matplotlib\n```", "```py\n>>> import matplotlib.pyplot as plt\n```", "```py\n>>> x = [1, 2, 3, 1.5, 2]\n>>> y = [-1, 5, 2, 3, 0]\n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> plt.scatter(x, y)\n>>> plt.show()\n```", "```py\n>>> sizes = [10, 40, 60, 80, 100]\n>>> colors = ['r', 'b', 'y', 'g', 'k']\n>>> plt.scatter(x, y, s=sizes, c=colors)\n>>> plt.show()\n```", "```py\n>>> import numpy as np\n>>> x = np.linspace(0, 10, 1000)\n>>> y = np.sin(x)\n>>> plt.plot(x, y)\n>>> plt.show()\n```", "```py\nx = np.linspace(1, 10, 1000)\nlinear_line = x\nlog_curve = np.log(x)\nsin_wave = np.sin(x)\ncurves = [linear_line, log_curve, sin_wave]\ncolors = ['k', 'r', 'b']\nstyles = ['-', '--', ':']\nfor curve, color, style in zip(curves, colors, styles):\n\u00a0\u00a0\u00a0\u00a0plt.plot(x, curve, c=color, linestyle=style)\nplt.show()\n```", "```py\nlabels = ['Type 1', 'Type 2', 'Type 3']\ncounts = [2, 3, 5]\nplt.bar(labels, counts)\nplt.show()\n```", "```py\ntype_1 = [1, 1]  # 1 of type A and 1 of type B\ntype_2 = [1, 2]  # 1 of type A and 2 of type B\ntype_3 = [2, 3]  # 2 of type A and 3 of type B\ncounts = [type_1, type_2, type_3]\n```", "```py\nlocations = np.array([0, 1, 2])\nwidth = 0.3\n```", "```py\nbars_a = plt.bar(locations - width / 2,   [my_type[0] for my_type in counts], width=width)\nbars_b = plt.bar(locations + width / 2,   [my_type[1] for my_type in counts], width=width)\n```", "```py\nplt.xticks(locations, ['Type 1', 'Type 2', 'Type 3'])\nplt.legend([bars_a, bars_b], ['Type A', 'Type B'])\n```", "```py\nbars_a = plt.bar(locations, [my_type[0] for my_type in counts])\nbars_b = plt.bar(locations, [my_type[1] for my_type in counts], \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bottom=[my_type[0] for my_type in counts])\nplt.xticks(locations, ['Type 1', 'Type 2', 'Type 3'])\nplt.legend([bars_a, bars_b], ['Type A', 'Type B'])\nplt.show()\n```", "```py\nx = np.random.randn(100)\nplt.hist(x)\nplt.show()\n```", "```py\nplt.hist(x, bins=100)\nplt.show()\n```", "```py\ny = np.random.randn(100) * 4 + 5\nplt.hist(x, color='b', bins=20, alpha=0.2)\nplt.hist(y, color='r', bins=20, alpha=0.2)\nplt.show()\n```", "```py\n>>> plt.hist(x)\n(array([ 9.,  7., 19., 18., 23., 12.,  6.,  4.,  1.,  1.]),\n\u00a0\u00a0\u00a0\u00a0array([-1.86590701, -1.34312205, -0.82033708, -0.29755212,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.22523285, 0.74801781,  1.27080278,  1.79358774,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02.31637271,  2.83915767, 3.36194264]),\n  <a list of 10 Patch objects>)\n```", "```py\nmy_map = np.random.randn(10, 10)\nplt.imshow(my_map)\nplt.colorbar()\nplt.show()\n```", "```py\n    $ pip install scipy\n    ```", "```py\n    $ conda install scipy\n    ```", "```py\n    import numpy as np\n    import scipy.stats as stats\n    import matplotlib.pyplot as plt\n    ```", "```py\n    samples = np.random.normal(0, 1, size=1000)\n    ```", "```py\n    x = np.linspace(samples.min(), samples.max(), 1000)\n    y = stats.norm.pdf(x)\n    ```", "```py\n    plt.hist(samples, alpha=0.2, bins=20, density=True)\n    plt.plot(x, y)\n    plt.show()\n    ```", "```py\n    samples = np.random.beta(2, 5, size=1000)\n    x = np.linspace(samples.min(), samples.max(), 1000)\n    y = stats.beta.pdf(x, 2, 5)\n    plt.hist(samples, alpha=0.2, bins=20, density=True)\n    plt.plot(x, y)\n    plt.show()\n    ```", "```py\n    samples = np.random.gamma(1, size=1000)\n    x = np.linspace(samples.min(), samples.max(), 1000)\n    y = stats.gamma.pdf(x, 1)\n    plt.hist(samples, alpha=0.2, bins=20, density=True)\n    plt.plot(x, y)\n    plt.show()\n    ```", "```py\nx = np.random.normal(0, 1, 1000)\ny = np.random.normal(5, 2, 1000)\ndf = pd.DataFrame({'Column 1': x, 'Column 2': y})\ndf.head()\n```", "```py\nimport seaborn as sns\nsns.jointplot(x='Column 1', y='Column 2', data=df)\nplt.show()\n```", "```py\nstudent_df = pd.DataFrame({\n\u00a0\u00a0\u00a0\u00a0'name': ['Alice', 'Bob', 'Carol', 'Dan', 'Eli', 'Fran', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'George', 'Howl', 'Ivan', 'Jack', 'Kate'],\\\n\u00a0\u00a0\u00a0\u00a0'gender': ['female', 'male', 'female', 'male', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'male', 'female', 'male', 'male', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'male', 'male', 'female'],\\\n\u00a0\u00a0\u00a0\u00a0'class': ['JR', 'SO', 'SO', 'SO', 'JR', 'SR', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'FY', 'SO', 'SR', 'JR', 'FY'],\\\n\u00a0\u00a0\u00a0\u00a0'gpa': [90, 93, 97, 89, 95, 92, 90, 87, 95, 100, 95],\\\n\u00a0\u00a0\u00a0\u00a0'num_classes': [4, 3, 4, 4, 3, 2, 2, 3, 3, 4, 2]})\n```", "```py\nsns.catplot(x='class', y='gpa', hue='gender', kind='bar', \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data=student_df)\nplt.show()\n```", "```py\nstudent_df['gpa'].plot.hist()\nplt.show()\n```", "```py\nstudent_df['class'].value_counts().plot.pie()\nplt.show()\n```"]