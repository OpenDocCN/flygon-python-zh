["```py\n<?xml version='1.0'?>\n<inventory>\n    <cheese id=\"c01\">\n        <name>Caerphilly</name>\n        <stock>0</stock>\n    </cheese>\n    <cheese id=\"c02\">\n        <name>Illchester</name>\n        <stock>0</stock>\n    </cheese>\n</inventory>\n```", "```py\n**>>> import xml.etree.ElementTree as ET**\n**>>> root = ET.Element('inventory')**\n**>>> ET.dump(root)**\n**<inventory />**\n\n```", "```py\n**>>> cheese = ET.Element('cheese')**\n**>>> root.append(cheese)**\n**>>> ET.dump(root)**\n**<inventory><cheese /></inventory>**\n\n```", "```py\n**>>> name = ET.SubElement(cheese, 'name')**\n**>>> name.text = 'Caerphilly'**\n**>>> ET.dump(root)**\n**<inventory><cheese><name>Caerphilly</name></cheese></inventory>**\n\n```", "```py\n**>>> temp = ET.SubElement(root, 'temp')**\n**>>> ET.dump(root)**\n**<inventory><cheese><name>Caerphilly</name></cheese><temp /></inventory>**\n**>>> root.remove(temp)**\n**>>> ET.dump(root)**\n**<inventory><cheese><name>Caerphilly</name></cheese></inventory>**\n\n```", "```py\n**>>> import xml.dom.minidom as minidom**\n\n```", "```py\n**>>> print(minidom.parseString(ET.tostring(root)).toprettyxml())**\n**<?xml version=\"1.0\" ?>**\n**<inventory>**\n **<cheese>**\n **<name>Caerphilly</name>**\n **</cheese>**\n**</inventory>**\n\n```", "```py\n**>>> def xml_pprint(element):**\n**...     s = ET.tostring(element)**\n**...     print(minidom.parseString(s).toprettyxml())**\n\n```", "```py\n**>>> xml_pprint(root)**\n**<?xml version=\"1.0\" ?>**\n**<inventory>**\n **<cheese>**\n**...**\n\n```", "```py\n**>>> cheese.attrib['id'] = 'c01'**\n**>>> xml_pprint(cheese)**\n**<?xml version=\"1.0\" ?>**\n**<cheese id=\"c01\">**\n **<name>Caerphilly</name>**\n**</cheese>**\n\n```", "```py\n**>>> text = ET.tostring(name)**\n**>>> print(text)**\n**b'<name>Caerphilly</name>'**\n\n```", "```py\n**>>> text = ET.tostring(name, encoding='utf-8')**\n\n```", "```py\n**$ pip install requests-aws4auth**\n**Downloading/unpacking requests-aws4auth**\n**...**\n\n```", "```py\nimport sys\nimport requests\nimport requests_aws4auth as aws4auth\nimport xml.etree.ElementTree as ET\nimport xml.dom.minidom as minidom\n\naccess_id = '<ACCESS ID>'\naccess_key = '<ACCESS KEY>'\nregion = '<REGION>'\nendpoint = 's3-{}.amazonaws.com'.format(region)\nauth = aws4auth.AWS4Auth(access_id, access_key, region, 's3')\nns = 'http://s3.amazonaws.com/doc/2006-03-01/'\n\ndef xml_pprint(xml_string):\n    print(minidom.parseString(xml_string).toprettyxml())\n\ndef create_bucket(bucket):\n    print('Bucket name: {}'.format(bucket))\n\nif __name__ == '__main__':\n    cmd, *args = sys.argv[1:]\n    globals()[cmd](*args)\n```", "```py\n**$ python3.4 s3_client.py create_bucket mybucket**\n**Bucket name: mybucket**\n\n```", "```py\ndef create_bucket(bucket):\n    XML = ET.Element('CreateBucketConfiguration')\n    XML.attrib['xmlns'] = ns\n    location = ET.SubElement(XML, 'LocationConstraint')\n    location.text = auth.region\n    data = ET.tostring(XML, encoding='utf-8')\n    xml_pprint(data)\n```", "```py\n**$ python3.4 s3_client.py create_bucket mybucket.example.com**\n**<?xml version=\"1.0\" ?>**\n**<CreateBucketConfiguration >**\n **<LocationConstraint>eu-west-1</LocationConstraint>**\n**</CreateBucketConfiguration>**\n\n```", "```py\n    url = 'http://{}.{}'.format(bucket, endpoint)\n    r = requests.put(url, data=data, auth=auth)\n    if r.ok:\n        print('Created bucket {} OK'.format(bucket))\n    else:\n        xml_pprint(r.text)\n```", "```py\n**$ python3.4 s3_client.py create_bucket mybucket.example.com**\n**Created bucket mybucket.example.com OK**\n\n```", "```py\ndef upload_file(bucket, s3_name, local_path):\n    data = open(local_path, 'rb').read()\n    url = 'http://{}.{}/{}'.format(bucket, endpoint, s3_name)\n    r = requests.put(url, data=data, auth=auth)\nif r.ok:\n        print('Uploaded {} OK'.format(local_path))\n    else:\n        xml_pprint(r.text)\n```", "```py\n**$ python3.4 s3_client.py mybucket.example.com test.jpg ~/test.jpg**\n**Uploaded ~/test.jpg OK**\n\n```", "```py\ndef upload_file(bucket, s3_name, local_path, acl='private'):\n    data = open(local_path, 'rb').read()\n    url = 'http://{}.{}/{}'.format(bucket, endpoint, s3_name)\n    headers = {'x-amz-acl': acl}\n    r = requests.put(url, data=data, headers=headers, auth=auth)\nif r.ok:\n        print('Uploaded {} OK'.format(local_path))\n    else:\n        xml_pprint(r.text)\n```", "```py\n**$ python3.4 s3_client.py mybucket.example.com test.jpg ~/test.jpg public-read**\n**Uploaded test.jpg OK**\n\n```", "```py\nimport mimetypes\n```", "```py\ndef upload_file(bucket, s3_name, local_path, acl='private'):\n    data = open(local_path, 'rb').read()\n    url = 'http://{}.{}/{}'.format(bucket, endpoint, s3_name)\n    headers = {'x-amz-acl': acl}\n    mimetype = mimetypes.guess_type(local_path)[0]\n    if mimetype:\n        headers['Content-Type'] = mimetype\n    r = requests.put(url, data=data, headers=headers, auth=auth)\nif r.ok:\n        print('Uploaded {} OK'.format(local_path))\n    else:\n        xml_pprint(r.text)\n```", "```py\ndef download_file(bucket, s3_name, local_path):\n    url = 'http://{}.{}/{}'.format(bucket, endpoint, s3_name)\n    r = requests.get(url, auth=auth)\n    if r.ok:\n        open(local_path, 'wb').write(r.content)\n        print('Downloaded {} OK'.format(s3_name))\n    else:\n        xml_pprint(r.text)\n```", "```py\n**$ python3.4 s3_client.py download_file mybucket.example.com test.jpg ~/test_downloaded.jpg**\n**Downloaded test.jpg OK**\n\n```", "```py\naccess_secret = ''\n```", "```py\n**$ python3.4 s3_client.py create_bucket failbucket.example.com**\n**<?xml version=\"1.0\" ?>**\n**<Error>**\n **<Code>SignatureDoesNotMatch</Code>**\n **<Message>The request signature we calculated does not match the signature you provided. Check your key and signing method.</Message>**\n **<AWSAccessKeyId>AKIAJY5II3SZNHZ25SUA</AWSAccessKeyId>**\n **<StringToSign>AWS4-HMAC-SHA256...</StringToSign>**\n **<SignatureProvided>e43e2130...</SignatureProvided>**\n **<StringToSignBytes>41 57 53 34...</StringToSignBytes>**\n **<CanonicalRequest>PUT...</CanonicalRequest>**\n **<CanonicalRequestBytes>50 55 54...</CanonicalRequestBytes>**\n **<RequestId>86F25A39912FC628</RequestId>**\n **<HostId>kYIZnLclzIW6CmsGA....</HostId>**\n**</Error>**\n\n```", "```py\n**>>> import requests**\n**>>> import requests_aws4auth**\n**>>> auth = requests_aws4auth.AWS4Auth('<ID>', '', 'eu-west-1', '')**\n**>>> r = requests.get('http://s3.eu-west-1.amazonaws.com', auth=auth)**\n\n```", "```py\n**>>> import xml.etree.ElementTree as ET**\n**>>> root = ET.fromstring(r.text)**\n\n```", "```py\n**>>> for element in root:**\n**...     print('Tag: ' + element.tag)**\n**Tag: Code**\n**Tag: Message**\n**Tag: AWSAccessKeyId**\n**Tag: StringToSign**\n**Tag: SignatureProvided**\n**...**\n\n```", "```py\n**>>> for element in root.findall('Message'):**\n**...     print(element.tag + ': ' + element.text)**\n**Message: The request signature we calculated does not match the signature you provided. Check your key and signing method.**\n\n```", "```py\ndef handle_error(response):\n    output = 'Status code: {}\\n'.format(response.status_code)\n    root = ET.fromstring(response.text)\n    code =  root.find('Code').text\n    output += 'Error code: {}\\n'.format(code)\n    message = root.find('Message').text\n    output += 'Message: {}\\n'.format(message)\n    print(output)\n```", "```py\n**$ python3.4 s3_client.py create_bucket failbucket.example.com**\n**Status code: 403**\n**Error code: SignatureDoesNotMatch**\n**Message: The request signature we calculated does not match the signature you provided. Check your key and signing method.**\n\n```", "```py\n**$ pip install boto**\n**Downloading/unpacking boto**\n**...**\n\n```", "```py\n**>>> import boto**\n**>>> conn = boto.connect_s3('<ACCESS ID>', '<ACCESS SECRET>')**\n\n```", "```py\n**>>> conn.create_bucket('mybucket.example.com')**\n\n```", "```py\n**>>> from boto.s3.connection import Location**\n**>>> conn.create_bucket('mybucket.example.com', location=Location.EU)**\n\n```", "```py\n**>>> [x for x in dir(Location) if x.isalnum()]**\n**['APNortheast', 'APSoutheast', 'APSoutheast2', 'CNNorth1', 'DEFAULT', 'EU', 'SAEast', 'USWest', 'USWest2']**\n\n```", "```py\n**>>> buckets = conn.get_all_buckets()**\n**>>> [b.name for b in buckets]**\n**['mybucket.example.com', 'mybucket2.example.com']**\n\n```", "```py\n**>>> bucket = conn.get_bucket('mybucket.example.com')**\n\n```", "```py\n**>>> [k.name for k in bucket.list()]**\n**['cheesehop.txt', 'parrot.txt']**\n\n```", "```py\n**>>> bucket = conn.get_bucket('mybucket.example.com')**\n**>>> from boto.s3.key import Key**\n**>>> key = Key(bucket)**\n\n```", "```py\n**>>> key.key = 'lumberjack_song.txt'**\n**>>> key.set_contents_from_filename('~/lumberjack_song.txt')**\n\n```", "```py\n**>>> bucket = conn.get_bucket('mybucket.example.com')**\n**>>> key = bucket.get_key('parrot.txt')**\n**>>> key.get_contents_to_filename('~/parrot.txt')**\n\n```", "```py\n**>>> key.set_acl('public-read')**\n\n```", "```py\n**>>> import json**\n**>>> l = ['a', 'b', 'c']**\n**>>> json.dumps(l)**\n**'[\"a\", \"b\", \"c\"]'**\n\n```", "```py\n**>>> s = json.dumps(['a', 'b', 'c'])**\n**>>> type(s)**\n**<class 'str'>**\n**>>> s[0]**\n**'['**\n\n```", "```py\n**>>> s = '[\"a\", \"b\", \"c\"]'**\n**>>> l = json.loads(s)**\n**>>> l**\n**['a', 'b', 'c']**\n**>>> l[0]**\n**'a'**\n\n```", "```py\n**>>> json.dumps({'A':'Arthur', 'B':'Brian', 'C':'Colonel'})**\n**'{\"A\": \"Arthur\", \"C\": \"Colonel\", \"B\": \"Brian\"}'**\n\n```", "```py\n**>>> d = {**\n**...     'Chapman': ['King Arthur', 'Brian'],**\n**...     'Cleese': ['Sir Lancelot', 'The Black Knight'],**\n**...     'Idle': ['Sir Robin', 'Loretta'],**\n**... }**\n**>>> json.dumps(d)**\n**'{\"Chapman\": [\"King Arthur\", \"Brian\"], \"Idle\": [\"Sir Robin\", \"Loretta\"], \"Cleese\": [\"Sir Lancelot\", \"The Black Knight\"]}'**\n\n```", "```py\n**>>> json.dumps({1:10, 2:20, 3:30})**\n**'{\"1\": 10, \"2\": 20, \"3\": 30}'**\n\n```", "```py\n**>>> j = json.dumps({1:10, 2:20, 3:30})**\n**>>> d_raw = json.loads(j)**\n**>>> d_raw**\n**{'1': 10, '2': 20, '3': 30}**\n**>>> {int(key):val for key,val in d_raw.items()}**\n**{1: 10, 2: 20, 3: 30}**\n\n```", "```py\n**>>> json.dumps(('a', 'b', 'c'))**\n**'[\"a\", \"b\", \"c\"]'**\n\n```", "```py\n**>>> j = json.dumps(('a', 'b', 'c'))**\n**>>> json.loads(j)**\n**['a', 'b', 'c']**\n\n```", "```py\n**>>> s = set(['a', 'b', 'c'])**\n**>>> json.dumps(s)**\n**...**\n**TypeError: {'a', 'c', 'b'} is not JSON serializable**\n**>>> json.dumps(list(s))**\n**'[\"a\", \"b\", \"c\"]'**\n\n```", "```py\n**$ pip install requests-oauthlib**\n**Downloading/unpacking requests-oauthlib**\n**...**\n\n```", "```py\nimport requests, requests_oauthlib, sys\n\nconsumer_key = '<CONSUMER_KEY>'\nconsumer_secret = '<CONSUMER_SECRET>'\naccess_token = '<ACCESS_TOKEN>'\naccess_secret = '<ACCESS_KEY>'\n\ndef init_auth():\n    auth_obj = requests_oauthlib.OAuth1(\n                    consumer_key, consumer_secret,\n                    access_token, access_secret)\n\n    if verify_credentials(auth_obj):\n        print('Validated credentials OK')\n        return auth_obj\n    else:\n        print('Credentials validation failed')\n        sys.exit(1)\t\n\ndef verify_credentials(auth_obj):\n    url = 'https://api.twitter.com/1.1/' \\\n          'account/verify_credentials.json'\n    response = requests.get(url, auth=auth_obj)\n    return response.status_code == 200\n\nif __name__ == '__main__':\n    auth_obj = init_auth()\n```", "```py\ndef get_mentions(since_id, auth_obj):\n    params = {'count': 200, 'since_id': since_id,\n              'include_rts':  0, 'include_entities': 'false'}\n    url = 'https://api.twitter.com/1.1/' \\\n          'statuses/mentions_timeline.json'\n    response = requests.get(url, params=params, auth=auth_obj)\n    response.raise_for_status()\n    return json.loads(response.text)\n\nif __name__ == '__main__':\n    auth_obj = init_auth()\n    since_id = 1\n    for tweet in get_mentions(since_id, auth_obj):\n        print(tweet['text'])\n```", "```py\n**$ pip install pytz**\n**Downloading/unpacking pytz**\n**...**\n\n```", "```py\ndef process_tweet(tweet):\n    username = tweet['user']['screen_name']\n    text = tweet['text']\n    words = [x for x in text.split() if\n                        x[0] not in ['@', '#']]\n    place = ' '.join(words)\n    check = place.replace(' ', '_').lower()\n    found = False\n    for tz in pytz.common_timezones:\n        tz_low = tz.lower()\n        if check in tz_low.split('/'):\n            found = True\n            break\n    if found:\n        timezone = pytz.timezone(tz)\n        time = datetime.datetime.now(timezone).strftime('%H:%M')\n        reply = '@{} The time in {} is currently {}'.format(username, place, time)\n    else:\n        reply = \"@{} Sorry, I didn't recognize \" \\\n                        \"'{}' as a city\".format(username, place)\n    print(reply)\n\nif __name__ == '__main__':\n    auth_obj = init_auth()\n    since_id = 1\n    for tweet in get_mentions(since_id, auth_obj):\n        process_tweet(tweet)\n```", "```py\n**>>> from twitter_worldclock import ***\n**>>> auth_obj = init_auth()**\n**Credentials validated OK**\n**>>> mentions = get_mentions(1, auth_obj)**\n**>>> json.dump(mentions, open('test_mentions.json', 'w'))**\n\n```", "```py\nif __name__ == '__main__':\n    mentions = json.load(open('test_mentions.json'))\n    for tweet in mentions:\n        process_tweet(tweet)\n```", "```py\ndef post_reply(reply_to_id, text, auth_obj):\n    params = {\n        'status': text,\n        'in_reply_to_status_id': reply_to_id}\n    url = 'https://api.twitter.com/1.1./statuses/update.json'\n    response = requests.post(url, params=params, auth=auth_obj)\n    response.raise_for_status()\n```", "```py\npost_reply(tweet['id'], reply, auth_obj)\n```", "```py\nif __name__ == '__main__':\n    auth_obj = init_auth()\n    since_id = 1\n    error_count = 0\n    while error_count < 15:\n        try:\n            for tweet in get_mentions(since_id, auth_obj):\n                process_tweet(tweet)\n                since_id = max(since_id, tweet['id'])\n            error_count =  0\n        except requests.exceptions.HTTPError as e:\n            print('Error: {}'.format(str(e)))\n            error_count += 1\n        time.sleep(60)\n```", "```py\n**$ sudo apt-get install build-essential**\n\n```", "```py\n**$ sudo STATIC_DEPS=true pip install lxml**\n\n```", "```py\n**$ CFLAGS=\"$CFLAGS -fPIC\" STATIC_DEPS=true pip install lxml**\n\n```", "```py\n**>>> import requests**\n**>>> response = requests.get('https://www.debian.org/releases/stable')**\n\n```", "```py\n**>>> from lxml.etree import HTML**\n**>>> root = HTML(response.content)**\n\n```", "```py\n**>>> [e.tag for e in root]**\n**['head', 'body']**\n**>>> root.find('head').find('title').text**\n**'Debian \u2013- Debian \\u201cjessie\\u201d Release Information'**\n\n```", "```py\n<body>\n...\n<div id=\"content\">\n<h1>Debian &ldquo;jessie&rdquo; Release Information</h1>\n<p>**Debian 8.0** was\nreleased October 18th, 2014.\nThe release included many major\nchanges, described in\n...\n```", "```py\n**>>> root.find('body').findall('div')[1].find('p').text**\n**Debian 8.0 was.**\n**...**\n\n```", "```py\n**>>> root.xpath('body')**\n**[<Element body at 0x39e0908>]**\n\n```", "```py\n**>>> root.xpath('body/div')**\n**[<Element div at 0x39e06c8>, <Element div at 0x39e05c8>, <Element div at 0x39e0608>]**\n\n```", "```py\n**>>> root.xpath('//h1')**\n**[<Element h1 at 0x2ac3b08>]**\n\n```", "```py\n**>>> root.find('head').xpath('.//h1')**\n**[]**\n\n```", "```py\n**>>> root.xpath('//div[@id=\"content\"]')**\n**[<Element div at 0x39e05c8>]**\n\n```", "```py\n**>>> root.xpath('//div[h1]')**\n**[<Element div at 0x39e05c8>]**\n\n```", "```py\n**>>> root.xpath('body/div[2]'):**\n**[<Element div at 0x39e05c8>]**\n\n```", "```py\nimport re\nimport requests\nfrom lxml.etree import HTML\n\nresponse = requests.get('http://www.debian.org/releases/stable/')\nroot = HTML(response.content)\ntitle_text = root.find('head').find('title').text\nrelease = re.search('\\u201c(.*)\\u201d', title_text).group(1)\np_text = root.xpath('//div[@id=\"content\"]/p[1]')[0].text\nversion = p_text.split()[1]\n\nprint('Codename: {}\\nVersion: {}'.format(release, version))\n```", "```py\n**$ python3.4 get_debian_version.py**\n**Codename: jessie**\n**Version: 8.0**\n\n```"]