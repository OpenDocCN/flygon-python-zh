["```py\n$ sudo pip3 install awscli\n$ aws --version\naws-cli/1.15.59 Python/3.5.2 Linux/4.15.0-30-generic botocore/1.10.58\n```", "```py\n$ aws configure\nAWS Access Key ID [None]: <key>\nAWS Secret Access Key [None]: <secret>\nDefault region name [None]: us-east-1\nDefault output format [None]: json\n```", "```py\n$ sudo pip install boto3\n$ sudo pip3 install boto3\n\n# verification\n$ python3\nPython 3.5.2 (default, Nov 23 2017, 16:37:01)\n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import boto3\n>>> exit()\n```", "```py\n$ aws ec2 describe-regions\n{\n \"Regions\": [\n {\n \"RegionName\": \"ap-south-1\",\n \"Endpoint\": \"ec2.ap-south-1.amazonaws.com\"\n },\n {\n \"RegionName\": \"eu-west-3\",\n \"Endpoint\": \"ec2.eu-west-3.amazonaws.com\"\n },\n...\n```", "```py\n$ aws ec2 describe-availability-zones --region us-east-1\n{\n \"AvailabilityZones\": [\n {\n \"Messages\": [],\n \"RegionName\": \"us-east-1\",\n \"State\": \"available\",\n \"ZoneName\": \"us-east-1a\"\n },\n {\n \"Messages\": [],\n \"RegionName\": \"us-east-1\",\n \"State\": \"available\",\n \"ZoneName\": \"us-east-1b\"\n },\n...\n```", "```py\n$ cat Chapter10_1_query_vpc.py\n#!/usr/bin/env python3\n\nimport json, boto3\n\nregion = 'us-east-1'\nvpc_name = 'mastering_python_networking_demo'\n\nec2 = boto3.resource('ec2', region_name=region)\nclient = boto3.client('ec2')\n\nfilters = [{'Name':'tag:Name', 'Values':[vpc_name]}]\n\nvpcs = list(ec2.vpcs.filter(Filters=filters))\nfor vpc in vpcs:\n    response = client.describe_vpcs(\n                 VpcIds=[vpc.id,]\n                )\n    print(json.dumps(response, sort_keys=True, indent=4))\n```", "```py\n$ python3 Chapter10_1_query_vpc.py\n{\n \"ResponseMetadata\": {\n \"HTTPHeaders\": {\n \"content-type\": \"text/xml;charset=UTF-8\",\n ...\n },\n \"HTTPStatusCode\": 200,\n \"RequestId\": \"48e19be5-01c1-469b-b6ff-9c45f2745483\",\n \"RetryAttempts\": 0\n },\n \"Vpcs\": [\n {\n \"CidrBlock\": \"10.0.0.0/16\",\n \"CidrBlockAssociationSet\": [\n {\n \"AssociationId\": \"...\",\n \"CidrBlock\": \"10.0.0.0/16\",\n \"CidrBlockState\": {\n \"State\": \"associated\"\n }\n }\n ],\n \"DhcpOptionsId\": \"dopt-....\",\n \"InstanceTenancy\": \"default\",\n \"IsDefault\": false,\n \"State\": \"available\",\n \"Tags\": [\n {\n \"Key\": \"Name\",\n \"Value\": \"mastering_python_networking_demo\"\n }\n ],\n \"VpcId\": \"vpc-....\"\n }\n ]\n}\n\n```", "```py\n$ cat Chapter10_2_query_route_tables.py\n#!/usr/bin/env python3\n\nimport json, boto3\n\nregion = 'us-east-1'\nvpc_name = 'mastering_python_networking_demo'\n\nec2 = boto3.resource('ec2', region_name=region)\nclient = boto3.client('ec2')\n\nresponse = client.describe_route_tables()\nprint(json.dumps(response['RouteTables'][0], sort_keys=True, indent=4))\n```", "```py\n$ python3 Chapter10_2_query_route_tables.py\n{\n \"Associations\": [\n {\n ....\n }\n ],\n \"PropagatingVgws\": [],\n \"RouteTableId\": \"rtb-6bee5514\",\n \"Routes\": [\n {\n \"DestinationCidrBlock\": \"10.0.0.0/16\",\n \"GatewayId\": \"local\",\n \"Origin\": \"CreateRouteTable\",\n \"State\": \"active\"\n },\n {\n \"DestinationCidrBlock\": \"0.0.0.0/0\",\n \"GatewayId\": \"igw-...\",\n \"Origin\": \"CreateRoute\",\n \"State\": \"active\"\n }\n ],\n \"Tags\": [\n {\n \"Key\": \"Name\",\n \"Value\": \"public_internet_gateway\"\n }\n ],\n \"VpcId\": \"vpc-...\"\n}\n```", "```py\n$ cat Chapter10_3_cloud_formation.yml\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Create VPC in us-west-1\nResources:\n myVPC:\n Type: AWS::EC2::VPC\n Properties:\n CidrBlock: '10.1.0.0/16'\n EnableDnsSupport: 'false'\n EnableDnsHostnames: 'false'\n Tags:\n - Key: Name\n Value: 'mastering_python_networking_demo_2'\n```", "```py\n$ aws --region us-west-1 cloudformation create-stack --stack-name 'mpn-ch10-demo' --template-body file://Chapter10_3_cloud_formation.yml\n{\n \"StackId\": \"arn:aws:cloudformation:us-west-1:<skip>:stack/mpn-ch10-demo/<skip>\"\n}\n```", "```py\n$ aws --region us-west-1 cloudformation describe-stacks --stack-name mpn-ch10-demo\n{\n \"Stacks\": [\n {\n \"CreationTime\": \"2018-07-18T18:45:25.690Z\",\n \"Description\": \"Create VPC in us-west-1\",\n \"DisableRollback\": false,\n \"StackName\": \"mpn-ch10-demo\",\n \"RollbackConfiguration\": {},\n \"StackStatus\": \"CREATE_COMPLETE\",\n \"NotificationARNs\": [],\n \"Tags\": [],\n \"EnableTerminationProtection\": false,\n \"StackId\": \"arn:aws:cloudformation:us-west-1<skip>\"\n }\n ]\n}\n```", "```py\n$ cat Chapter10_4_cloud_formation_full.yml\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Create subnet in us-west-1\nResources:\n myVPC:\n Type: AWS::EC2::VPC\n Properties:\n CidrBlock: '10.1.0.0/16'\n EnableDnsSupport: 'false'\n EnableDnsHostnames: 'false'\n Tags:\n - Key: Name\n Value: 'mastering_python_networking_demo_2'\n\n mySubnet:\n Type: AWS::EC2::Subnet\n Properties:\n VpcId: !Ref myVPC\n CidrBlock: '10.1.0.0/24'\n AvailabilityZone: 'us-west-1a'\n Tags:\n - Key: Name\n Value: 'mpn_demo_subnet_1'\n```", "```py\n$ aws --region us-west-1 cloudformation create-stack --stack-name mpn-ch10-demo-2 --template-body file://Chapter10_4_cloud_formation_full.yml\n{\n \"StackId\": \"arn:aws:cloudformation:us-west-1:<skip>:stack/mpn-ch10-demo-2/<skip>\"\n}\n\n$ aws --region us-west-1 cloudformation describe-stacks --stack-name mpn-ch10-demo-2\n{\n \"Stacks\": [\n {\n \"StackStatus\": \"CREATE_COMPLETE\",\n ...\n \"StackName\": \"mpn-ch10-demo-2\",\n \"DisableRollback\": false\n }\n ]\n}\n```", "```py\n$ cat Chapter10_5_security_group.py\n#!/usr/bin/env python3\n\nimport boto3\n\nec2 = boto3.client('ec2')\n\nresponse = ec2.describe_vpcs()\nvpc_id = response.get('Vpcs', [{}])[0].get('VpcId', '')\n\n# Query for security group id\nresponse = ec2.create_security_group(GroupName='mpn_security_group',\n Description='mpn_demo_sg',\n VpcId=vpc_id)\nsecurity_group_id = response['GroupId']\ndata = ec2.authorize_security_group_ingress(\n GroupId=security_group_id,\n IpPermissions=[\n {'IpProtocol': 'tcp',\n 'FromPort': 80,\n 'ToPort': 80,\n 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},\n {'IpProtocol': 'tcp',\n 'FromPort': 22,\n 'ToPort': 22,\n 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}\n ])\nprint('Ingress Successfully Set %s' % data)\n\n# Describe security group\n#response = ec2.describe_security_groups(GroupIds=[security_group_id])\nprint(security_group_id)\n```", "```py\n$ python3 Chapter10_5_security_group.py\nIngress Successfully Set {'ResponseMetadata': {'RequestId': '<skip>', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'AmazonEC2', 'content-type': 'text/xml;charset=UTF-8', 'date': 'Wed, 18 Jul 2018 20:51:55 GMT', 'content-length': '259'}, 'RetryAttempts': 0}}\nsg-<skip>\n```"]