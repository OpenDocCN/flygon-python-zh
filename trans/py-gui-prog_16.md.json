["```py\ngetInt(self, window title, label before LineEdit widget, default value, minimum, maximum and step size)\n```", "```py\nquantity, ok = QInputDialog.getInt(self, \"Order Quantity\", \"Enter quantity:\", 2, 1, 100, 1)\n```", "```py\ngetDouble(self, window title, label before LineEdit widget, default value, minimum, maximum and number of decimal places desired)\n```", "```py\nprice, ok = QInputDialog.getDouble(self, \"Price of the product\", \"Enter price:\", 1.50,0, 100, 2)\n```", "```py\ngetText(self, window title, label before LineEdit widget)\n```", "```py\nname, ok = QtGui.QInputDialog.getText(self, 'Get Customer Name', 'Enter your name:')\n```", "```py\ngetItem(self, window title, label before combo box, array , current item, Boolean Editable)\n```", "```py\ncountryName, ok = QInputDialog.getItem(self, \"Input Dialog\", \"List of countries\", countries, 0, False)\n```", "```py\nC:\\Pythonbook\\PyQt5>pyuic5 demoInputDialog.ui -o demoInputDialog.py\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication, QInputDialog\nfrom demoInputDialog import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.ui.pushButtonCountry.clicked.connect(self.dispmessage)\n        self.show()\n    def dispmessage(self):\n        countries = (\"Albania\", \"Algeria\", \"Andorra\", \"Angola\",   \n        \"Antigua and Barbuda\", \"Argentina\", \"Armenia\", \"Aruba\", \n        \"Australia\", \"Austria\", \"Azerbaijan\")\n        countryName, ok = QInputDialog.getItem(self, \"Input  \n        Dialog\", \"List of countries\", countries, 0, False)\n        if ok and countryName:\n            self.ui.lineEditCountry.setText(countryName)\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication, QColorDialog\nfrom PyQt5.QtGui import QColor\nfrom demoColorDialog import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        col = QColor(0, 0, 0)\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.ui.frameColor.setStyleSheet(\"QWidget { background-\n        color: %s }\" % col.name())\n        self.ui.pushButtonColor.clicked.connect(self.dispcolor)\n        self.show()\n    def dispcolor(self):\n        col = QColorDialog.getColor()\n        if col.isValid():\n        self.ui.frameColor.setStyleSheet(\"QWidget { background-  \n        color: %s }\" % col.name())\n        self.ui.labelColor.setText(\"You have selected the color with \n        code: \" + str(col.name()))\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QDialog, QApplication, QFontDialog\nfrom demoFontDialog import *\nclass MyForm(QDialog):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_Dialog()\n        self.ui.setupUi(self)\n        self.ui.pushButtonFont.clicked.connect(self.changefont)\n        self.show()\n    def changefont(self):\n        font, ok = QFontDialog.getFont()\n        if ok:\n        self.ui.textEdit.setFont(font)\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```", "```py\nfile_name = QFileDialog.getOpenFileName(self, dialog_title, path, filter)\n```", "```py\nfile_name = QFileDialog.getOpenFileName(self, 'Open file', '/home')\n\nIn the preceding example, file dialog is opened that shows all the files of home directory to browse from.\n\nfile_name = QFileDialog.getOpenFileName(self, 'Open file', '/home', \"Images (*.png *.jpg);;Text files (.txt);;XML files (*.xml)\")\n```", "```py\nfile_name = QFileDialog.getSaveFileName(self, dialog_title, path, filter, options)\n```", "```py\nfile_name, _ = QFileDialog.getSaveFileName(self,\"QFileDialog.getSaveFileName()\",\"\",\"All Files (*);;Text Files (*.txt)\", options=options)\n\nIn the preceding example, the File Save dialog box will be opened allowing you to save the files with the desired extension. If you don't specify the file extension, then it will be saved with the default extension, .txt.\n```", "```py\nimport sys\nfrom PyQt5.QtWidgets import QMainWindow, QApplication, QAction, QFileDialog\nfrom demoFileDialog import *\nclass MyForm(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n        self.ui.actionOpen.triggered.connect(self.openFileDialog)\n        self.ui.actionSave.triggered.connect(self.saveFileDialog)\n        self.show()\n    def openFileDialog(self):\n        fname = QFileDialog.getOpenFileName(self, 'Open file', \n        '/home')\n        if fname[0]:\n            f = open(fname[0], 'r')\n        with f:\n            data = f.read()\n            self.ui.textEdit.setText(data)\n    def saveFileDialog(self):\n        options = QFileDialog.Options()\n        options |= QFileDialog.DontUseNativeDialog\n        fileName, _ = QFileDialog.getSaveFileName(self,\n        \"QFileDialog.\n        getSaveFileName()\",\"\",\"All Files (*);;Text Files (*.txt)\",   \n        options=options)\n        f = open(fileName,'w')\n        text = self.ui.textEdit.toPlainText()\n        f.write(text)\n        f.close()\nif __name__==\"__main__\":\n    app = QApplication(sys.argv)\n    w = MyForm()\n    w.show()\n    sys.exit(app.exec_())\n```"]