- en: Chapter 5. Matplotlib Charts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。Matplotlib图表
- en: In this chapter, we will create beautiful charts using Python 3 with the Matplotlib
    module.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用Python 3和Matplotlib模块创建美丽的图表。
- en: Creating beautiful charts using Matplotlib
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Matplotlib创建美丽的图表
- en: Matplotlib – downloading modules using pip
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib - 使用pip下载模块
- en: Matplotlib – downloading modules with whl extensions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib - 使用whl扩展名下载模块
- en: Creating our first chart
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个图表
- en: Placing labels on charts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图表上放置标签
- en: How to give the chart a legend
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何给图表加上图例
- en: Scaling charts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整图表的比例
- en: Adjusting the scale of charts dynamically
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态调整图表的比例
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we will create beautiful charts that visually represent data.
    Depending on the format of the data source, we can plot one or several columns
    of data in the same chart.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建美丽的图表，以直观地表示数据。根据数据源的格式，我们可以在同一图表中绘制一个或多个数据列。
- en: We will be using the Python Matplotlib module to create our charts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python Matplotlib模块来创建我们的图表。
- en: In order to create these graphical charts, we need to download additional Python
    modules and there are several ways to install them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这些图形图表，我们需要下载额外的Python模块，有几种安装方法。
- en: This chapter will explain how to download the Matplotlib Python module, all
    other required Python modules, and the ways to do this.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何下载Matplotlib Python模块，所有其他所需的Python模块，以及如何做到这一点的方法。
- en: After we have the required modules installed, we will then create our own Pythonic
    charts.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装所需的模块之后，我们将创建自己的Python图表。
- en: Creating beautiful charts using Matplotlib
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Matplotlib创建美丽的图表
- en: This recipe introduces us to the Matplotlib Python module, which enables us
    to create visual charts using Python 3.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例向我们介绍了Matplotlib Python模块，它使我们能够使用Python 3创建可视化图表。
- en: 'The following URL is a great place to start exploring the world of Matplotlib
    and will teach you how to create many charts that are not presented in this chapter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下URL是开始探索Matplotlib世界的好地方，并将教您如何创建本章中未提及的许多图表：
- en: '[http://matplotlib.org/users/screenshots.html](http://matplotlib.org/users/screenshots.html)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://matplotlib.org/users/screenshots.html](http://matplotlib.org/users/screenshots.html)'
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to use the Matplotlib Python module, we first have to install this
    module, as well as several other related Python modules such as numpy.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Matplotlib Python模块，我们首先必须安装该模块，以及诸如numpy等其他相关的Python模块。
- en: If you are running a version of Python less than 3.4.3, I would encourage you
    to upgrade your version of Python as we will be using the Python pip module throughout
    this chapter to install the required Python modules, and pip is installed with
    3.4.3 and above.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的Python版本低于3.4.3，我建议您升级Python版本，因为在本章中我们将使用Python pip模块来安装所需的Python模块，而pip是在3.4.3及以上版本中安装的。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to install pip with earlier versions of Python 3 but the process
    is not very intuitive, so it is definitely better to upgrade to 3.4.3 or above.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用较早版本的Python 3安装pip，但这个过程并不是很直观，因此最好升级到3.4.3或更高版本。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The following picture is an example of what incredible graphical charts can
    be created using Python with the Matplotlib module.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片是使用Python和Matplotlib模块创建的令人难以置信的图表的示例。
- en: I have copied the following code from the [http://matplotlib.org/](http://matplotlib.org/)
    website, which creates this incredible chart. There are many examples available
    on this site and I encourage you to try them out until you find the kind of charts
    you like to create.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我从[http://matplotlib.org/](http://matplotlib.org/)网站复制了以下代码，它创建了这个令人难以置信的图表。该网站上有许多示例，我鼓励您尝试它们，直到找到您喜欢创建的图表类型。
- en: Here is the code to create the chart, in less than 25 lines of Python code,
    including whitespaces.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建图表的代码，包括空格在内，不到25行的Python代码。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running the code creates the chart pictured as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码会创建以下图片中显示的图表：
- en: '![How to do it...](graphics/B04829_05_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_01.jpg)'
- en: Running the code using Python 3.4 or above with the Eclipse PyDev plugin might
    show some unresolved import errors. This seems to be a bug in PyDev or Java.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python 3.4或更高版本与Eclipse PyDev插件运行代码可能会显示一些未解决的导入错误。这似乎是PyDev或Java中的一个错误。
- en: Just ignore those errors if you are developing using Eclipse, as the code will
    run successfully.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Eclipse进行开发，请忽略这些错误，因为代码将成功运行。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to create beautiful graphs as shown in the preceding screenshot, we
    need to download several other Python modules.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建如前面截图所示的美丽图表，我们需要下载其他几个Python模块。
- en: The following recipes will guide us through how to successfully download all
    the required modules, which enables us to create our own beautiful charts.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将指导我们如何成功下载所有所需的模块，从而使我们能够创建自己的美丽图表。
- en: Matplotlib – downloading modules using pip
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib - 使用pip下载模块
- en: The usual way to download additional Python modules is by using pip. The pip
    module comes pre-installed with the latest version of Python (3.4 and above).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下载额外的Python模块的常规方法是使用pip。pip模块预装在最新版本的Python（3.4及以上）中。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using an older version of Python, you might have to download both
    pip and setuptools yourself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是较旧版本的Python，可能需要自己下载pip和setuptools。
- en: In addition to using the Python installer, there are several other precompiled
    Windows executables that make it easy for us to install Python modules such as
    Matplotlib.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用Python安装程序外，还有其他几个预编译的Windows可执行文件，可以让我们轻松安装Matplotlib等Python模块。
- en: This recipe will show how to successfully install Matplotlib via a Windows executable,
    as well as using pip in order to install the additional modules that the Matplotlib
    library requires.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将展示如何通过Windows可执行文件成功安装Matplotlib，以及使用pip安装Matplotlib库所需的其他模块。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All we need to do to download the required Python modules to use the Matplotlib
    module is to have a Python release of 3.4 (or later) installed on our PC.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是在我们的PC上安装一个Python 3.4（或更高版本）的发行版，以便下载所需的Python模块来使用Matplotlib模块。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We can install Matplotlib via a Windows executable from the official Matplotlib
    website.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过官方Matplotlib网站上的Windows可执行文件来安装Matplotlib。
- en: Make sure you install the Matplotlib version that matches the Python version
    you are using. For example, download and install `Matplotlib-1.4.3.win-amd64-py3.4.exe`
    if you have Python 3.4 installed on a 64-bit OS such as Microsoft Windows 7.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安装与您正在使用的Python版本匹配的Matplotlib版本。例如，如果您在64位操作系统（如Microsoft Windows 7）上安装了Python
    3.4，则下载并安装`Matplotlib-1.4.3.win-amd64-py3.4.exe`。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The "amd64" in the middle of the executable name means you are installing the
    64-bit version. If you are using a 32-bit x86 system then installing amd64 will
    not work. Similar problems can occur if you have installed a 32-bit version of
    Python and download 64-bit Python modules.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行文件名称中的"amd64"表示您正在安装64位版本。如果您使用32位x86系统，则安装amd64将不起作用。如果您安装了32位版本的Python并下载了64位Python模块，则可能会出现类似的问题。
- en: '![How to do it...](graphics/B04829_05_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_02.jpg)'
- en: 'Running the executable will get us started and looks like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行可执行文件将启动我们，并且看起来像这样：
- en: '![How to do it...](graphics/B04829_05_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_03.jpg)'
- en: We can verify that we have successfully installed Matplotlib by looking at our
    Python installation directory.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看我们的Python安装目录来验证我们是否成功安装了Matplotlib。
- en: 'After a successful installation, the Matplotlib folder is added to site-packages.
    Using a default installation, the full path to the site-packages folder on Windows
    is:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，Matplotlib文件夹将添加到site-packages。在Windows上使用默认安装，site-packages文件夹的完整路径是：
- en: '`C:\Python34\Lib\site-packages\matplotlib\`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Python34\Lib\site-packages\matplotlib\`'
- en: '![How to do it...](graphics/B04829_05_04.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_04.jpg)'
- en: The simplest plotting example on the official Matplotlib website requires the
    use of the Python numpy module, so let's download and install this module next.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方Matplotlib网站上最简单的绘图示例需要使用Python numpy模块，所以让我们下载并安装这个模块。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Numpy is a mathematical module that enables the graphing of the Matplotlib charts
    but goes well beyond Matplotlib. If the software you are developing requires a
    lot of mathematical computations, you definitely want to check out numpy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy是一个数学模块，它使Matplotlib图表的绘制成为可能，但远不止于Matplotlib。如果您正在开发的软件需要大量的数学计算，您肯定会想要查看numpy。
- en: There is one excellent website that gives us quick links to pretty much all
    the Python modules out there. It serves as a great time saver by pointing out
    which other Python modules are necessary to use Matplotlib successfully and gives
    us hyperlinks to download these modules, which enables us to install them quickly
    and easily.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个优秀的网站，为我们提供了几乎所有Python模块的快速链接。它作为一个很好的时间节省者，指出了成功使用Matplotlib所需的其他Python模块，并给我们提供了下载这些模块的超链接，这使我们能够快速轻松地安装它们。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Here is the link:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是链接：
- en: '[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
- en: '![How to do it...](graphics/B04829_05_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_05.jpg)'
- en: Notice how the file extensions of the installer packages all end in whl. In
    order to use them, we have to install the Python wheel module, and we do this
    using pip.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意安装程序包的文件扩展名都以whl结尾。为了使用它们，我们必须安装Python wheel模块，我们使用pip来做到这一点。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Wheels are the new standard of Python distribution and are intended to replace
    eggs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Wheels是Python分发的新标准，旨在取代eggs。
- en: 'You can find more details at the following website:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网站找到更多详细信息：
- en: '[http://pythonwheels.com/](http://pythonwheels.com/)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://pythonwheels.com/](http://pythonwheels.com/)'
- en: It is best to run the Windows command processor as an administrator to avoid
    potential installation errors.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最好以管理员身份运行Windows命令处理器，以避免潜在的安装错误。
- en: '![How to do it...](graphics/B04829_05_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_06.jpg)'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The common way to download Python modules is by using pip, as shown above. In
    order to install all the modules that Matplotlib requires, the download format
    of the main website where we can download them has changed to using a whl format.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Python模块的常见方法是使用pip，就像上面所示的那样。为了安装Matplotlib所需的所有模块，我们可以从主网站下载它们的下载格式已更改为使用whl格式。
- en: The next recipe will explain how to install Python modules using wheel.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个配方将解释如何使用wheel安装Python模块。
- en: Matplotlib – downloading modules with whl extensions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib - 使用whl扩展名下载模块
- en: We will use several additional Python modules that Matplotlib requires and,
    in this recipe, we will download them using Python's new module distribution standard,
    called wheel.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用几个Matplotlib需要的额外Python模块，在这个配方中，我们将使用Python的新模块分发标准wheel来下载它们。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the Python Enhancement Proposal (PEP) for the new wheel standard
    at the following URL: [https://www.python.org/dev/peps/pep-0427/](https://www.python.org/dev/peps/pep-0427/)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址找到新的wheel标准的Python增强提案（PEP）：[https://www.python.org/dev/peps/pep-0427/](https://www.python.org/dev/peps/pep-0427/)
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to download Python modules with a whl extension, the Python wheel module
    has to be installed first, which was explained in the previous recipe.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了下载带有whl扩展名的Python模块，必须首先安装Python wheel模块，这在前面的配方中已经解释过了。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's download `numpy-1.9.2+mkl-cp34-none-win_amd64.whl` from the web. After
    installing the wheel module, we can use pip to install packages with whl file
    extensions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从网上下载`numpy-1.9.2+mkl-cp34-none-win_amd64.whl`。安装了wheel模块后，我们可以使用pip来安装带有whl文件扩展名的软件包。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Pip ships with Python 3.4.3 and above. If you are using an older version of
    Python, I would recommend installing pip because it makes installing all other
    additional Python modules so much easier.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Pip随Python 3.4.3及以上版本一起提供。如果您使用的是较旧版本的Python，我建议安装pip，因为它可以让安装所有其他额外的Python模块变得更加容易。
- en: An even better suggestion might be to upgrade your Python version to the latest
    stable release. By the time you read this book, that most likely will be Python
    3.5.0 or above.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的建议可能是将您的Python版本升级到最新的稳定版本。当您阅读本书时，最有可能的是Python 3.5.0或更高版本。
- en: Python is free software. It does not cost us anything to upgrade.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Python是免费软件。升级对我们来说是没有成本的。
- en: 'Browse to the folder where the package to be installed is located, and install
    it using the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到要安装的软件包所在的文件夹，并使用以下命令进行安装：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![How to do it...](graphics/B04829_05_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_07.jpg)'
- en: Now we can create our first Matplotlib chart, using the simplest example application
    from the official website. After that, we will be creating our own charts.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用官方网站上最简单的示例应用程序创建我们的第一个Matplotlib图表。之后，我们将创建自己的图表。
- en: '![How to do it...](graphics/B04829_05_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_08.jpg)'
- en: The fact that we are not quite ready to run the preceding code shows that we
    need to download more modules. While at first having to download more modules
    might seem to be a little bit annoying, it really is a form of code reuse.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有准备好运行前面的代码，这表明我们需要下载更多的模块。虽然一开始需要下载更多的模块可能会有点烦人，但实际上这是一种代码重用的形式。
- en: So let's download and install the six and all the other required modules (dateutil,
    pyparsing, and so on) using pip with wheel until our code works and creates a
    nice chart from only a few lines of Python code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们使用pip和wheel下载并安装six和所有其他所需的模块（如dateutil、pyparsing等），直到我们的代码能够工作并从只有几行Python代码中创建一个漂亮的图表。
- en: We can download all the required modules from the same website we just used
    to install numpy. This website even lists all of the other modules the module
    we are installing depends on and has hyperlinks to jump to the installation software
    located in this very same website.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从刚刚用来安装numpy的同一个网站下载所有所需的模块。这个网站甚至列出了我们正在安装的模块所依赖的所有其他模块，并提供了跳转到这个网站上的安装软件的超链接。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'As mentioned previously, the URL for installing Python modules is: [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，安装Python模块的URL是：[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The website that enables us to download many Python modules from one convenient
    place also provides other Python modules. Not all dependencies shown are required.
    It depends on what you are developing. You might have to download and install
    additional modules as your journey into using the Matplotlib library advances.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使我们能够从一个便利的地方下载许多Python模块的网站还提供其他Python模块。并非所有显示的依赖项都是必需的。这取决于您正在开发的内容。随着您使用Matplotlib库的旅程的推进，您可能需要下载和安装其他模块。
- en: '![How it works...](graphics/B04829_05_09.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/B04829_05_09.jpg)'
- en: Creating our first chart
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个图表
- en: Now that we have all of the required Python modules installed, we can create
    our own charts using Matplotlib.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有所需的Python模块，我们可以使用Matplotlib创建自己的图表。
- en: We can create charts from only a few lines of Python code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以只用几行Python代码创建图表。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Using the code from the previous recipe, we can now create a chart that looks
    similar to the one shown next.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前一个示例中的代码，我们现在可以创建一个看起来类似于下一个示例的图表。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Using the minimum amount of code as presented on the official website, we can
    create our first chart. Well, almost. The sample code shown on the website does
    not work until we import the `show` method and then call it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方网站上提供的最少量的代码，我们可以创建我们的第一个图表。嗯，几乎。网站上显示的示例代码在导入`show`方法并调用它之前是无法工作的。
- en: '![How to do it...](graphics/B04829_05_10.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_10.jpg)'
- en: We can simplify the code and even improve it by using another of many examples
    provided on the official Matplotlib website.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简化代码，甚至通过使用官方Matplotlib网站提供的许多示例之一来改进它。
- en: '![How to do it...](graphics/B04829_05_11.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_11.jpg)'
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Python Matplotlib module, combined with add-ons such as numpy, create a
    very rich programming environment that enables us to do mathematical computations
    and plot them in visual charts very easily.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Python Matplotlib模块，结合诸如numpy之类的附加组件，创建了一个非常丰富的编程环境，使我们能够轻松进行数学计算并在可视化图表中绘制它们。
- en: The Python numpy method `arange` does not intend to arrange anything. It means
    to create "a range", which in Python is used for the built-in "range" operator.
    The `linspace` method can create similar confusion. Who is "lin" and in what "space"?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Python numpy方法`arange`并不打算安排任何事情。它的意思是创建“一个范围”，在Python中用于内置的“range”运算符。`linspace`方法可能会造成类似的混淆。谁是“lin”，在什么“空间”？
- en: As it turns out, the name means "linear spaced vector".
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，该名称意味着“线性间隔向量”。
- en: The pyglet function `show` displays the graph we created. Calling `show()` has
    some side-effects when you try to plot another graph after successfully creating
    the first one.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: pyglet函数`show`显示我们创建的图形。在成功创建第一个图形后，调用`show()`会产生一些副作用，当您尝试绘制另一个图形时。
- en: Placing labels on charts
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图表上放置标签
- en: So far, we have used the default Matplotlib GUI. Now we will create some tkinter
    GUIs using Matplotlib.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了默认的Matplotlib GUI。现在我们将使用Matplotlib创建一些tkinter GUI。
- en: This will require a few more lines of Python code and importing some more libraries,
    and it is well worth the effort, because we are gaining control of our paintings
    using canvases.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要更多的Python代码行和导入更多的库，但这是值得的，因为我们正在通过画布控制我们的绘画。
- en: We will position labels onto both the horizontal as well as the vertical axes,
    aka *x* and *y*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将标签放在水平轴和垂直轴上，也就是*x*和*y*。
- en: We will do this by creating a Matplotlib figure upon which we will draw.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个Matplotlib图形来实现这一点。
- en: We will also learn how to use sub plots, which will enable us to draw more than
    one graph in the same window.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习如何使用子图，这将使我们能够在同一个窗口中绘制多个图形。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: With the necessary Python modules installed and knowing where to find the official
    online documentation and tutorials, we can now carry on with our creation of Matplotlib
    charts.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 安装必要的Python模块并知道在哪里找到官方在线文档和教程后，我们现在可以继续创建Matplotlib图表。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: While `plot` is the easiest way to create a Matplotlib chart, using `Figure`
    in combination with `Canvas` creates a more custom-made graph, which looks much
    better and also enables us to add buttons and other widgets to it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`plot`是创建Matplotlib图表的最简单方法，但是结合`Canvas`使用`Figure`创建一个更定制的图表，看起来更好，还可以让我们向其添加按钮和其他小部件。
- en: '[PRE2]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running the preceding code results in the following chart:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码会得到以下图表：
- en: '![How to do it...](graphics/B04829_05_12.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_12.jpg)'
- en: In the first line of code after the import statements, we create an instance
    of a `Figure` object. Next, we add sub plots to this figure by calling `add_subplot(211)`.
    The first number in 211 tells the figure how many plots to add, the second number
    determines the number of columns and the third tells the figure in which order
    to display the plots.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入语句之后的第一行代码中，我们创建了一个`Figure`对象的实例。接下来，我们通过调用`add_subplot(211)`向这个图添加子图。211中的第一个数字告诉图要添加多少个图，第二个数字确定列数，第三个数字告诉图以什么顺序显示图。
- en: We also add a grid and change its default line style.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个网格并更改了其默认线型。
- en: Even though we only display one plot in the chart, by choosing 2 for the number
    of sub plots, we are moving the plot up, which results in extra whitespace at
    the bottom of the chart. This first plot now only occupies 50% of the screen,
    which affects how large the grid lines of this plot are when being displayed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在图表中只显示一个图，但通过选择2作为子图的数量，我们将图向上移动，这导致图表底部出现额外的空白。这第一个图现在只占据屏幕的50％，这会影响在显示时此图的网格线有多大。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Experiment with the code by uncommenting the code for `axis =` and `axis.grid()`
    to see the different effects.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过取消注释`axis =`和`axis.grid()`的代码来尝试该代码，以查看不同的效果。
- en: We can add more sub plots by assigning them to the second position using `add_subplot(212)`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将它们分配到第二个位置使用`add_subplot(212)`来添加更多的子图。
- en: '[PRE3]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Running the slightly modified code now adds axis1 to the chart. For the grid
    of the bottom plot, we left the line style at its default.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行略微修改的代码会将axis1添加到图表中。对于底部图的网格，我们将线型保留为默认值。
- en: '![How to do it...](graphics/B04829_05_13.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_13.jpg)'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We imported the necessary Matplotlib modules to create a figure and a canvas
    onto which to draw the chart. We gave it some values for the *x* and *y* axes
    and set a few of very many configuration options.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入了必要的Matplotlib模块来创建一个图和一个画布，用于在其上绘制图表。我们为*x*和*y*轴给出了一些值，并设置了很多配置选项中的一些。
- en: We created our own tkinter window in which to display the chart and customized
    the positioning of the plots.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了自己的tkinter窗口来显示图表并自定义了绘图的位置。
- en: As we have seen in previous chapters, in order to create a tkinter GUI, we first
    have to import the tkinter module and then create an instance of the `Tk` class.
    We assign this class instance to a variable we named `root`, which is a name that
    is often used in examples.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中看到的，为了创建一个tkinter GUI，我们首先必须导入tkinter模块，然后创建`Tk`类的实例。我们将这个类实例分配给一个我们命名为`root`的变量，这是在示例中经常使用的名称。
- en: Our tkinter GUI will not become visible until we start the main event loop and,
    to do that, we use `root.mainloop()`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的tkinter GUI直到我们启动主事件循环才会变得可见，为此，我们使用`root.mainloop()`。
- en: One important reason to avoid the Matplotlib default GUI here and instead create
    our own GUI using tkinter is that we wanted to improve the not very pretty appearance
    of the default Matplotlib GUI and we can very easily do this using tkinter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在这里使用Matplotlib默认GUI并改为使用tkinter创建自己的GUI的一个重要原因是，我们想要改善默认Matplotlib GUI的外观，而使用tkinter可以很容易地实现这一点。
- en: We no longer have those out-of-date looking buttons appearing at the bottom
    of the Matplotlib GUI if we build our GUI with tkinter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用tkinter构建GUI，就不会再出现那些过时的按钮出现在Matplotlib GUI底部。
- en: At the same time, the Matplotlib GUI has a feature our tkinter GUI does not
    have and that is that we can actually see the x and y coordinates in the Matplotlib
    GUI when we move our mouse around within the chart. The x and y coordinate positions
    are displayed in the bottom right corner.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，Matplotlib GUI具有我们的tkinter GUI没有的功能，即当我们在图表内移动鼠标时，我们实际上可以看到Matplotlib GUI中的x和y坐标。
    x和y坐标位置显示在右下角。
- en: How to give the chart a legend
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何给图表添加图例
- en: Once we start plotting more than one line of data points, things might become
    a little bit unclear. By adding a legend to our graphs, we can tell which data
    is what, and what it actually means.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们开始绘制多条数据点的线，事情可能会变得有点不清楚。通过向我们的图表添加图例，我们可以知道哪些数据是什么，它们实际代表什么。
- en: We do not have to choose different colors to represent the different data. Matplotlib
    automatically assigns a different color to each line of data points.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必选择不同的颜色来表示不同的数据。Matplotlib会自动为每条数据点的线分配不同的颜色。
- en: All we have to do is create the chart and add a legend to it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所要做的就是创建图表并向其添加图例。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will enhance the chart from the previous recipe. We will
    only plot one chart.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将增强上一个示例中的图表。我们只会绘制一个图表。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we will plot more lines of data in the same chart and then we will add
    a legend to the chart.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在同一图表中绘制更多的数据线，然后我们将向图表添加图例。
- en: We do this by modifying the code from the previous recipe.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过修改上一个示例中的代码来实现这一点。
- en: '[PRE4]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the modified code creates the following chart, which has a legend in
    the upper right corner:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行修改后的代码会创建以下图表，图例位于右上角：
- en: '![How to do it...](graphics/B04829_05_14.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_14.jpg)'
- en: We are only plotting one graph in this recipe and we do this by changing `fig.add_subplot(111)`.
    We also slightly modify the size of the figure via the `figsize` property.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们只绘制了一个图表，我们通过更改`fig.add_subplot(111)`来实现这一点。我们还通过`figsize`属性略微修改了图表的大小。
- en: Next, we create three Python lists that contain the values to be plotted. When
    we plot the data, we save the references to the plots in local variables.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了三个包含要绘制的值的Python列表。当我们绘制数据时，我们将图表的引用保存在本地变量中。
- en: We create the legend by passing in a tuple with the references to the three
    plots, another tuple that contains the strings that are then displayed in the
    legend, and in the third argument we position the legend within the chart.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过传入一个包含三个图表引用的元组，另一个包含随后在图例中显示的字符串的元组来创建图例，并在第三个参数中定位图例在图表中的位置。
- en: The default settings of Matplotlib assign a color scheme to the lines being
    plotted.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib的默认设置为正在绘制的线条分配了一个颜色方案。
- en: We can easily change this default setting of colors to the colors we prefer
    by setting a property when we plot each axis.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在绘制每个轴时设置属性来轻松地将这些默认颜色设置更改为我们喜欢的颜色。
- en: We do this by using the color property and assigning it an available color value.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用颜色属性并为其分配一个可用的颜色值来实现这一点。
- en: '[PRE5]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note how the comma after the variable assignments of t0, t1, and t2 is not a
    mistake but is required in order to create the legend.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，t0、t1和t2的变量赋值后面的逗号不是错误，而是为了创建图例而需要的。
- en: The comma after each variable turns a list into a tuple. If we leave this out,
    our legend will not be displayed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个变量后面的逗号将列表转换为元组。如果我们省略这一点，我们的图例将不会显示。
- en: The code will still run, just without the intended legend.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 代码仍将运行，只是没有预期的图例。
- en: Note
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we remove the comma after the t0 = assignment, we get an error and the
    first line no longer appears in the figure. The chart and legend still get created,
    but without the first line appearing in the legend.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在t0 =赋值后移除逗号时，我们会得到一个错误，第一行不再出现在图中。图表和图例仍然会被创建，但图例中不再出现第一行。
- en: '![How to do it...](graphics/B04829_05_15.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_15.jpg)'
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We enhanced our chart by plotting three lines of data in the same chart and
    giving it a legend in order to distinguish the data that those three lines plot.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在同一图表中绘制三条数据线并为其添加图例来增强了我们的图表，以区分这三条线绘制的数据。
- en: Scaling charts
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整图表的比例
- en: In the previous recipes, while creating our first charts and enhancing them,
    we hard-coded the scaling of how those values are visually represented.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的示例中，当我们创建我们的第一个图表并增强它们时，我们硬编码了这些值的视觉表示方式。
- en: While this served us well for the values we were using, we often plot charts
    from very large databases.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这对我们使用的值很有帮助，但我们经常从非常大的数据库中绘制图表。
- en: Depending on the range of that data, our hard-coded values for the vertical
    y-dimension might not always be the best solution, which may make it hard to see
    the lines in our charts.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 根据数据的范围，我们为垂直y维度的硬编码值可能并不总是最佳解决方案，这可能会使我们的图表中的线条难以看清。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will improve our code from the previous recipe. If you have not typed in
    all of the code from all of the previous recipes, just download the code for this
    chapter and it will get you started (and then you can have a lot of fun creating
    GUIs, charts, and so on, using Python).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改进我们在上一个示例中的代码。如果您没有输入所有以前示例中的代码，只需下载本章的代码，它将让您开始（然后您可以通过使用Python创建GUI、图表等来玩得很开心）。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Modify the `yValues1` line of code from the previous recipe to use 50 as the
    third value.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 将上一个示例中的`yValues1`代码行修改为使用50作为第三个值。
- en: '[PRE6]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The only difference to the code that created the chart in the previous recipe
    is one data value.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一个示例中创建图表的代码唯一的区别是一个数据值。
- en: By changing one value that is not close to the average range of all the other
    values for all plotted lines, the visual representation of data has dramatically
    changed and we lost a lot of details about the overall data and now mainly see
    one high spike.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改一个与所有其他值的平均范围不接近的值，数据的视觉表示已经发生了戏剧性的变化，我们失去了关于整体数据的许多细节，现在主要看到一个高峰。
- en: '![How to do it...](graphics/B04829_05_16.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_16.jpg)'
- en: So far, our charts have adjusted themselves according to the data they visually
    represent.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的图表已根据它们所呈现的数据自动调整。
- en: While this is a practical feature of Matplotlib, this is not always what we
    want. We can restrict the scale of the chart being represented by limiting the
    vertical y-dimension.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是Matplotlib的一个实用功能，但这并不总是我们想要的。我们可以通过限制垂直y维度来限制图表的比例。
- en: '[PRE7]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `axis.set_ylim(5, 8)` line of code now limits the beginning value to 5 and
    the ending value of the vertical display to 8.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`axis.set_ylim(5, 8)`这行代码限制了起始值为5，垂直显示的结束值为8。
- en: Now, when we create our chart, the high value peak no longer has the impact
    it had before.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们创建图表时，高值峰值不再像以前那样有影响。
- en: '![How to do it...](graphics/B04829_05_17.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_17.jpg)'
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We increased one value in the data, which resulted in a dramatic effect. By
    setting limits to the vertical and horizontal displays of the chart, we can see
    the data we are most interested in.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们增加了数据中的一个值，这产生了戏剧性的效果。通过设置图表的垂直和水平显示限制，我们可以看到我们最感兴趣的数据。
- en: Spikes such as the ones just shown, can be of great interest too. It all depends
    on what we are looking for. The visual representation of data is of great value.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 像刚才显示的那样的尖峰也可能非常有趣。这一切取决于我们要寻找什么。数据的视觉表示具有很大的价值。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A picture is worth a thousand words.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一图胜千言。
- en: Adjusting the scale of charts dynamically
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态调整图表的比例
- en: In the previous recipe, we learned how we can limit the scaling of our charts.
    In this recipe, we will go one step further by dynamically adjusting the scaling
    by setting both a limit and analyzing our data before we represent it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们学习了如何限制我们图表的缩放。在这个示例中，我们将进一步通过在表示数据之前动态调整缩放来设置限制并分析我们的数据。
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will enhance the code from the previous recipe by reading in the data we
    are plotting dynamically, averaging it, and then adjusting our chart.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过动态读取数据、对其进行平均并调整我们的图表来增强上一个示例中的代码。
- en: While we would typically read in the data from an external source, in this recipe,
    we create the data we are plotting using Python lists, as can be seen in the following
    code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们通常会从外部来源读取数据，在这个示例中，我们使用Python列表创建我们要绘制的数据，如下面的代码所示。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We are creating our own data in our Python module by assigning lists with data
    to the xvalues and yvalues variables.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将数据分配给xvalues和yvalues变量来在我们的Python模块中创建自己的数据。
- en: In many graphs, the beginning of the x and y coordinate system starts at (0,
    0). This is usually a good idea, so let's adjust our chart coordinate code accordingly.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多图表中，x和y坐标系的起始点通常是(0, 0)。这通常是一个好主意，所以让我们相应地调整我们的图表坐标代码。
- en: 'Let''s modify the code to set limits on both the x and y dimensions:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改代码以限制x和y两个维度：
- en: '[PRE8]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have set the same limits for x and y, our chart might look more
    balanced. When we run the modified code, we get the following result:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为x和y设置了相同的限制，我们的图表可能看起来更加平衡。当我们运行修改后的代码时，我们得到了以下结果：
- en: '![How to do it...](graphics/B04829_05_18.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_18.jpg)'
- en: Maybe starting at (0, 0) was not such a great idea after all…
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 也许从(0, 0)开始并不是一个好主意...
- en: What we really want to do is to adjust our chart dynamically according to the
    range of the data, while at the same time, restricting values that are too high
    or too low.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想做的是根据数据的范围动态调整我们的图表，同时限制过高或过低的值。
- en: We can do this by parsing all the data to be represented in the chart while
    at the same time, setting some explicit limits.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过解析要在图表中表示的所有数据，同时设置一些明确的限制来实现这一点。
- en: 'Modify the code, as shown here:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码如下所示：
- en: '[PRE9]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running the code results in the following chart. We adjusted both its x and
    y dimensions dynamically. Note how the y-dimension now starts at 5.5 instead of
    5.0, as it did before. The chart also no longer starts at (0, 0), giving us more
    valuable information about our data.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码会得到以下图表。我们动态调整了它的x和y维度。请注意，现在y维度从5.5开始，而不是之前的5.0。图表也不再从(0, 0)开始，这为我们提供了更有价值的关于我们的数据的信息。
- en: '![How to do it...](graphics/B04829_05_19.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_05_19.jpg)'
- en: We are creating a list of lists for the y-dimension data and then using a list
    comprehension wrapped into a call to Python's `min()` and `max()` functions.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在为y维度数据创建一个列表的列表，然后使用一个列表推导包装成对Python的`min()`和`max()`函数的调用。
- en: If list comprehensions seem to be a little bit advanced, what they basically
    are is a very compressed loop.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表推导似乎有点高级，它们基本上是一个非常压缩的循环。
- en: They are also designed to be faster than a regular programming loop.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还被设计为比常规编程循环更快。
- en: In the Python code that creates the preceding chart, we created three lists
    that hold the y-dimensional data to be plotted. We then created another list that
    holds those three lists, which created a list of lists.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建上述图表的Python代码中，我们创建了三个包含要绘制的y维度数据的列表。然后我们创建了另一个包含这三个列表的列表，从而创建了一个列表的列表。
- en: 'Like this:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这样：
- en: '[PRE10]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are interested in getting both the minimum value of all of the y-dimensional
    data, as well as the maximum value contained within these three lists.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对获取所有y维度数据的最小值以及包含在这三个列表中的最大值感兴趣。
- en: We can do this via a Python list comprehension.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Python列表推导来实现这一点。
- en: '[PRE11]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After running the list comprehension, `minY` is: 5.5.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行列表推导后，`minY`为5.5。
- en: The one line of code above is the list comprehension that runs through all the
    values of all the data contained within the three lists and finds the minimum
    value using the Python `min` keyword.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的一行代码是列表推导，它遍历三个列表中包含的所有数据的所有值，并使用Python的`min`关键字找到最小值。
- en: 'In the very same pattern, we find the maximum value contained in the data we
    wish to plot. This time, we also set a limit within our list comprehension that
    ignores all values that are above the limit we specified, like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在同样的模式中，我们找到了我们希望绘制的数据中包含的最大值。这次，我们还在列表推导中设置了一个限制，忽略了所有超过我们指定限制的值，就像这样：
- en: '[PRE12]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After running the preceding code with our chosen restriction, `maxY` has the
    value of 8 (not 50).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用我们选择的限制条件运行上述代码后，`maxY`的值为8（而不是50）。
- en: We applied a restriction for the max value, according to a predefined condition
    choosing 20 as the maximum value to be displayed in the chart.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据预定义条件选择20作为图表中显示的最大值，对最大值应用了限制。
- en: For the x-dimension, we simply called `min()` and `max()` in the Matplotlib
    method to scale the limits of the chart dynamically.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对于x维度，我们只需在Matplotlib方法中调用`min()`和`max()`来动态调整图表的限制。
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we created several Matplotlib charts and adjusted some of the
    many available properties. We also used core Python to control the scaling of
    the charts dynamically.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了几个Matplotlib图表，并调整了其中一些可用属性。我们还使用核心Python动态控制了图表的缩放。
