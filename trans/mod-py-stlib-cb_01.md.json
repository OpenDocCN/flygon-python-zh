["```py\n>>> txt = \"This is a vast world you can't traverse world in a day\"\n>>>\n>>> from collections import Counter\n>>> counts = Counter(txt.split())\n```", "```py\nCounter({'a': 2, 'world': 2, \"can't\": 1, 'day': 1, 'traverse': 1, \n         'is': 1, 'vast': 1, 'in': 1, 'you': 1, 'This': 1})\n```", "```py\n>>> counts.most_common(2)\n[('world', 2), ('a', 2)]\n```", "```py\n>>> counts['world']\n2\n```", "```py\n>>> sum(counts.values())\n12\n```", "```py\n>>> Counter([\"hello\", \"world\"]) + Counter([\"hello\", \"you\"])\nCounter({'hello': 2, 'you': 1, 'world': 1})\n>>> Counter([\"hello\", \"world\"]) & Counter([\"hello\", \"you\"])\nCounter({'hello': 1})\n```", "```py\ncounts = dict(hello=0, world=0, nice=0, day=0)\n```", "```py\nfor word in 'hello world this is a very nice day'.split():\n    if word in counts:\n        counts[word] += 1\n```", "```py\nfor word in 'hello world this is a very nice day'.split():\n    counts[word] = counts.get(word, 0) + 1\n```", "```py\nfrom collections import defaultdict\n\ncounts = defaultdict(int)\nfor word in 'hello world this is a very nice day'.split():\n    counts[word] += 1\n```", "```py\ndefaultdict(<class 'int'>, {'day': 1, 'is': 1, 'a': 1, 'very': 1, 'world': 1, 'this': 1, 'nice': 1, 'hello': 1})\n```", "```py\nvalue = command_line_options.get('optname')\nif value is None:\n    value = os.environ.get('optname')\nif value is None:\n    value = config_file_options.get('optname')\nif value is None:\n    value = 'default-value'\n```", "```py\nimport os\nfrom collections import ChainMap\n\noptions = ChainMap(command_line_options, os.environ, config_file_options)\nvalue = options.get('optname', 'default-value')\n```", "```py\nimport os\nfrom collections import ChainMap, defaultdict\n\noptions = ChainMap(command_line_options, os.environ, config_file_options,\n                   defaultdict(lambda: 'default-value'))\nvalue = options['optname']\nvalue2 = options['other-option']\n```", "```py\noptvalue\ndefault-value\n```", "```py\n>>> population=dict(italy=60, japan=127, uk=65) >>> changes = dict()\n>>> editablepop = ChainMap(changes, population)\n\n>>> print(editablepop['japan'])\n127\n>>> editablepop['japan'] += 1\n>>> print(editablepop['japan'])\n128\n```", "```py\n>>> print(population['japan'])\n127\n```", "```py\n>>> print(changes.keys()) \ndict_keys(['japan']) \n>>> print(population.keys() - changes.keys()) \n{'italy', 'uk'}\n```", "```py\n>>> citizens = dict(torino=['Alessandro'], amsterdam=['Bert'], raleigh=['Joseph']) >>> changes = dict() \n>>> editablecits = ChainMap(changes, citizens) \n>>> editablecits['torino'].append('Simone') \n>>> print(editablecits['torino']) ['Alessandro', 'Simone']\n>>> print(changes)\n{}\n>>> print(citizens)\n{'amsterdam': ['Bert'], \n 'torino': ['Alessandro', 'Simone'], \n 'raleigh': ['Joseph']} \n```", "```py\n>>> def f(a, b, c, d):\n...     print (a, b, c, d)\n...\n>>> d1 = dict(a=5, b=6)\n>>> d2 = dict(b=7, c=8, d=9)\n```", "```py\n>>> f(**ChainMap(d1, d2))\n5 6 8 9\n```", "```py\n>>> f(**{**d1, **d2})\n5 7 8 9\n```", "```py\n>>> def f(a, b, c, d):\n...     print (a, b, c, d)\n...\n>>> d1 = dict(a=5, b=6)\n>>> d2 = dict(c=7, d=8)\n>>> f(**d1, **d2)\n5 6 7 8\n```", "```py\n>>> d1 = dict(a=5, b=6)\n>>> d2 = dict(b=7, c=8, d=9)\n>>> f(**d1, **d2)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nTypeError: f() got multiple values for keyword argument 'b'\n```", "```py\n>>> attrs = dict(style=\"background-color:red\", id=\"header\")\n>>> '<span {}>'.format(' '.join('%s=\"%s\"' % a for a in attrs.items()))\n'<span id=\"header\" style=\"background-color:red\">'\n```", "```py\n'<span id=\"header\" style=\"background-color:red\">'\n```", "```py\n'<span style=\"background-color:red\" id=\"header\">'\n```", "```py\n>>> attrs = OrderedDict([('id', 'header'), ('style', 'background-color:red')])\n>>> '<span {}>'.format(' '.join('%s=\"%s\"' % a for a in attrs.items()))\n'<span id=\"header\" style=\"background-color:red\">'\n```", "```py\n>>> attrs = OrderedDict(id=\"header\", style=\"background-color:red\")\n```", "```py\n>>> OrderedDict((('id', 'header'), ('style', 'background-color:red')))\nOrderedDict([('id', 'header'), ('style', 'background-color:red')])\n```", "```py\n>>> from collections import defaultdict\n>>> rd = defaultdict(list)\n```", "```py\n>>> for name, num in [('ichi', 1), ('one', 1), ('uno', 1), ('un', 1)]:\n...   rd[num].append(name)\n...\n>>> rd\ndefaultdict(<class 'list'>, {1: ['ichi', 'one', 'uno', 'un']})\n```", "```py\n>>> rd = {1: ['one', 'uno', 'un', 'ichi'],\n...       2: ['two', 'due', 'deux', 'ni'],\n...       3: ['three', 'tre', 'trois', 'san']}\n>>> rd[2]\n['two', 'due', 'deux', 'ni']\n```", "```py\n>>> rd[2].append('dos')\n>>> rd[2]\n['two', 'due', 'deux', 'ni', 'dos']\n```", "```py\n>>> rd[4].append('four')\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nKeyError: 4\n```", "```py\n>>> rd = {}\n>>> for k,v in d.items():\n...     rd[v].append(k)\nTraceback (most recent call last):\n    File \"<stdin>\", line 2, in <module>\nKeyError: 1\n```", "```py\nimport time\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self._q = []\n\n    def add(self, value, priority=0):\n        heapq.heappush(self._q, (priority, time.time(), value))\n\n    def pop(self):\n        return heapq.heappop(self._q)[-1]\n```", "```py\n>>> def f1(): print('hello')\n>>> def f2(): print('world')\n>>>\n>>> pq = PriorityQueue()\n>>> pq.add(f2, priority=1)\n>>> pq.add(f1, priority=0)\n>>> pq.pop()()\nhello\n>>> pq.pop()()\nworld\n```", "```py\nscores = [(123, 'Alessandro'),\n          (143, 'Chris'),\n          (192, 'Mark']\n```", "```py\n>>> (10, 'B') > (10, 'A')\nTrue\n>>> (11, 'A') > (10, 'B')\nTrue\n```", "```py\n>>> scores = sorted(scores)\n>>> scores[-1]\n(192, 'Mark')\n```", "```py\n>>> scores.append((137, 'Rick'))\n>>> scores[-1]\n(137, 'Rick')\n>>> scores = sorted(scores)\n>>> scores[-1]\n(192, 'Mark')\n```", "```py\n>>> import heapq\n>>> l = []\n>>> heapq.heappush(l, (192, 'Mark'))\n>>> heapq.heappush(l, (123, 'Alessandro'))\n>>> heapq.heappush(l, (137, 'Rick'))\n>>> heapq.heappush(l, (143, 'Chris'))\n>>> l[0]\n(123, 'Alessandro')\n```", "```py\n>>> l = []\n>>> heapq.heappush(l, (-143, 'Chris'))\n>>> heapq.heappush(l, (-137, 'Rick'))\n>>> heapq.heappush(l, (-123, 'Alessandro'))\n>>> heapq.heappush(l, (-192, 'Mark'))\n>>> l[0]\n(-192, 'Mark')\n```", "```py\n>>> request = dict(host='www.example.org', path='/index.html')\n```", "```py\n>>> request = object(host='www.example.org', path='/index.html')\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nTypeError: object() takes no parameters\n```", "```py\n>>> request = object()\n>>> request.host = 'www.example.org'\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nAttributeError: 'object' object has no attribute 'host'\n```", "```py\n>>> class Bunch(dict):\n...    def __getattribute__(self, key):\n...        try: \n...            return self[key]\n...        except KeyError:\n...            raise AttributeError(key)\n...    \n...    def __setattr__(self, key, value): \n...        self[key] = value\n...\n>>> b = Bunch(a=5)\n>>> b.a\n5\n>>> b['a']\n5\n```", "```py\n>>> b.items()\ndict_items([('a', 5)])\n```", "```py\n>>> b.c = 7\n>>> b.c\n7\n>>> b.items()\ndict_items([('a', 5), ('c', 7)])\n```", "```py\n>>> class BunchBase(dict):\n...    def __getattribute__(self, key):\n...        try: \n...            return self[key]\n...        except KeyError:\n...            raise AttributeError(key)\n...    \n...    def __setattr__(self, key, value): \n...        self[key] = value\n...\n>>> def Bunch(_classname=\"Bunch\", **attrs):\n...     return type(_classname, (BunchBase, ), {})(**attrs)\n>>>\n```", "```py\n>>> b = Bunch(\"Request\", path=\"/index.html\", host=\"www.example.org\")\n>>> print(b)\n{'path': '/index.html', 'host': 'www.example.org'}\n>>> print(b.path)\n/index.html\n>>> print(b.host)\nwww.example.org\n```", "```py\n>>> print(b.__class__)\n<class '__main__.Request'>\n```", "```py\nclass Person(object):\n    def __init__(name, surname):\n        self.name = name\n        self.surname = surname\n\n    @property\n    def fullname(self):\n        return '{} {}'.format(self.name, self.surname)\n```", "```py\ndef hello(p):\n    if not isinstance(p, Person):\n        raise ValueError(\"Sorry, can only greet people\")\n    print(\"Hello {}\".format(p.fullname))\n```", "```py\ndef Bunch(_classname=\"Bunch\", _parent=None, **attrs):\n    parents = (_parent, ) if parent else tuple()\n    return type(_classname, (BunchBase, ) + parents, {})(**attrs)\n```", "```py\n>>> p = Bunch(\"Person\", Person, fullname='Alessandro Molina')\n>>> hello(p)\nHello Alessandro Molina\n```", "```py\nclass Bunch(dict):\n    def __init__(self, **kwds):\n        super().__init__(**kwds)\n        self.__dict__ = self\n```", "```py\n>>> from enum import IntEnum\n>>> \n>>> class RequestType(IntEnum):\n...     POST = 1\n...     GET = 2\n>>>\n>>> request_type = RequestType.POST\n>>> print(request_type)\nRequestType.POST\n```", "```py\n>>> def do_request(kind):\n...    if kind == RequestType.POST:\n...        print('POST')\n...    else:\n...        print('OTHER')\n```", "```py\n>>> do_request(RequestType.POST)\nPOST\n>>> do_request(1)\nPOST\n```", "```py\n>>> from enum import Enum\n>>> \n>>> class RequestType(Enum):\n...     POST = 1\n...     GET = 2\n>>>\n>>> do_request(RequestType.POST)\nPOST\n>>> do_request(1)\nOTHER\n```"]