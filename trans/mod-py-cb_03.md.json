["```py\n     **>>> import random** \n\n     **>>> def die():** \n\n     **...    return random.randint(1,6)** \n\n     **>>> def craps():** \n\n     **...    return (die(), die())** \n\n    ```", "```py\n     **>>> random.seed(113)** \n\n     **>>> die(), die()** \n\n     **(1, 6)** \n\n    ```", "```py\n     **>>> craps()** \n\n     **(6, 3)** \n\n     **>>> craps()** \n\n     **(1, 4)** \n\n    ```", "```py\n     **>>> def zonk():** \n\n     **...    return tuple(die() for x in range(6))** \n\n    ```", "```py\n     **>>> zonk()** \n\n     **(5, 3, 2, 4, 1, 1)** \n\n    ```", "```py\n     **>>> def craps():** \n\n     **...     return tuple(die() for x in range(2))** \n\n    ```", "```py\n     **>>> def dice(n):** \n\n     **...     return tuple(die() for x in range(n))** \n\n    ```", "```py\n     **>>> dice(2)** \n\n     **(3, 2)** \n\n     **>>> dice(6)** \n\n     **(5, 3, 4, 3, 3, 4)** \n\n    ```", "```py\n     **>>> def dice(n=2):** \n\n     **...     return tuple(die() for x in range(n))** \n\n    ```", "```py\n     **>>> def dice(n):** \n\n     **...    return (die() for x in range(n))** \n\n    ```", "```py\n     **>>> def dice(n=2):** \n\n     **...     return tuple(die() for x in range(n))** \n\n    ```", "```py\n **>>> def craps():** \n\n **...     return dice(2)** \n\n **>>> def zonk():** \n\n **...     return dice(6)** \n\n```", "```py\n **>>> def die(sides=6):** \n\n **...     return random.randint(1,6)** \n\n```", "```py\n **>>> def dice(n=2, sides=6):** \n\n **... return tuple(die(sides) for x in range(n))** \n\n```", "```py\n **>>> import warnings** \n\n```", "```py\n            if distance is None:\n                distance = rate * time\n            elif rate is None:\n                rate = distance / time\n            elif time is None:\n                time = distance / rate\n\n    ```", "```py\n            else:\n                warnings.warning( \"Nothing to solve for\" )\n\n    ```", "```py\n            return dict(distance=distance, rate=rate, time=time)\n\n    ```", "```py\n            def rtd(distance=None, rate=None, time=None):\n                if distance is None:\n                    distance = rate * time\n                elif rate is None:\n                    rate = distance / time\n                elif time is None:\n                    time = distance / rate\n                else:\n                    warnings.warning( \"Nothing to solve for\" )\n                return dict(distance=distance, rate=rate, time=time)\n\n    ```", "```py\n **>>> def rtd(distance=None, rate=None, time=None):\n...     if distance is None:\n...         distance = rate * time\n...     elif rate is None:\n...         rate = distance / time\n...     elif time is None:\n...         time = distance / rate\n...     else:\n...         warnings.warning( \"Nothing to solve for\" )\n...     return dict(distance=distance, rate=rate, time=time)\n>>> rtd(distance=31.2, rate=6) \n{'distance': 31.2, 'time': 5.2, 'rate': 6}** \n\n```", "```py\n **>>> result= rtd(distance=31.2, rate=6)** \n\n **>>> ('At {rate}kt, it takes '** \n\n **... '{time}hrs to cover {distance}nm').format_map(result)** \n\n **'At 6kt, it takes 5.2hrs to cover 31.2nm'** \n\n```", "```py\n    def rtd2(distance, rate, time, **keywords): \n        print(keywords) \n\n```", "```py\n    rtd2(rate=6, time=6.75, something_else=60) \n\n```", "```py\n    def rtd2(**keywords): \n        rate= keywords.get('rate', None) \n        time= keywords.get('time', None) \n        distance= keywords.get('distance', None) \n        etc. \n\n```", "```py\n    import pathlib \n\n    def Twc(T, V): \n        return 13.12 + 0.6215*T - 11.37*V**0.16 + 0.3965*T*V**0.16 \n\n    def wind_chill(start_T, stop_T, step_T, \n        start_V, stop_V, step_V, path): \n        \"\"\"Wind Chill Table.\"\"\" \n        with path.open('w', newline='') as target: \n            writer= csv.writer(target) \n            heading = [None]+list(range(start_T, stop_T, step_T)) \n            writer.writerow(heading) \n            for V in range(start_V, stop_V, step_V): \n                row = [V] + [Twc(T, V) \n                    for T in range(start_T, stop_T, step_T)] \n                writer.writerow(row) \n\n```", "```py\n    import pathlib \n    p=pathlib.Path('code/wc.csv') \n    wind_chill(0,-45,-5,0,20,2,p) \n\n```", "```py\n    def wind_chill(*, start_T, stop_T, step_T, start_V, stop_V, step_V, path): \n\n```", "```py\n **>>> wind_chill(0,-45,-5,0,20,2,p) \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nTypeError: wind_chill() takes 0 positional arguments but 7 were given** \n\n```", "```py\n    wind_chill(start_T=0, stop_T=-45, step_T=-5, \n        start_V=0, stop_V=20, step_V=2, \n        path=p) \n\n```", "```py\n    import sys \n    def wind_chill(*, start_T, stop_T, step_T, start_V, stop_V, step_V, output=sys.stdout): \n\n```", "```py\n                wind_chill( \n                    start_T=0, stop_T=-45, step_T=-5, \n                    start_V=0, stop_V=20, step_V=2) \n\n    ```", "```py\n                path = pathlib.Path(\"code/wc.csv\") \n                with path.open('w', newline='') as target: \n                    wind_chill(output=target, \n                        start_T=0, stop_T=-45, step_T=-5, \n                        start_V=0, stop_V=20, step_V=2) \n\n    ```", "```py\n    def temperature(*, f_temp=None, c_temp=None): \n        if c_temp is None: \n            return {'f_temp': f_temp, 'c_temp': 5*(f_temp-32)/9} \n        elif f_temp is None: \n            return {'f_temp': 32+9*c_temp/5, 'c_temp': c_temp} \n        else: \n            raise Exception(\"Logic Design Problem\") \n\n```", "```py\n    from numbers import Number \n    def c_temp(f_temp): \n        assert isinstance(F, Number) \n        return 5*(f_temp-32)/9 \n\n```", "```py\n    def temperature(*, f_temp=None, c_temp=None): \n        \"\"\"Convert between Fahrenheit temperature and \n        Celsius temperature. \n\n        :key f_temp: Temperature in \u00b0F. \n        :key c_temp: Temperature in \u00b0C. \n        :returns: dictionary with two keys: \n            :f_temp: Temperature in \u00b0F. \n            :c_temp: Temperature in \u00b0C. \n        \"\"\"\n\n```", "```py\n    from typing import * \n\n```", "```py\n **$ pip3 install git+git://github.com/JukkaL/mypy.git** \n\n```", "```py\n            from decimal import Decimal \n            from typing import * \n            Number = Union[int, float, complex, Decimal] \n\n    ```", "```py\n            def temperature(*, \n                f_temp: Optional[Number]=None, \n                c_temp: Optional[Number]=None): \n\n    ```", "```py\n            def temperature(*, \n                f_temp: Optional[Number]=None, \n                c_temp: Optional[Number]=None) -> Dict[str, Number]: \n\n    ```", "```py\n            result = {'c_temp': c_temp, \n                'f_temp': f_temp} # type: Dict[str, Number] \n\n    ```", "```py\n    def temperature_bad(*, \n        f_temp: Optional[Number]=None, \n        c_temp: Optional[Number]=None) -> Number: \n\n        if c_temp is None: \n            c_temp = 5*(f_temp-32)/9 \n        elif f_temp is None: \n            f_temp = 32+9*c_temp/5 \n        else: \n            raise Exception( \"Logic Design Problem\" ) \n        result = {'c_temp': c_temp, \n            'f_temp': f_temp} # type: Dict[str, Number] \n        return result \n\n```", "```py\n    ch03_r04.py: note: In function \"temperature_bad\": \n    ch03_r04.py:37: error: Incompatible return value type: \n        expected Union[builtins.int, builtins.float, builtins.complex, decimal.Decimal], \n        got builtins.dict[builtins.str, \n        Union[builtins.int, builtins.float, builtins.complex, decimal.Decimal]] \n\n```", "```py\n    a = {(1, 2, 3): ['Poe', 'E'], \n         (3, 4, 5): ['Near', 'a', 'Raven'], \n        } \n\n```", "```py\nDict[Tuple[int, int, int], List[str]] \n\n```", "```py\nColor = Tuple[int, int, int] \nLine = List[str] \nDict[Color, Line] \n\n```", "```py\n    from math import radians, sin, cos, sqrt, asin \n\n    MI= 3959 \n    NM= 3440 \n    KM= 6372 \n\n    def haversine(lat_1: float, lon_1: float, \n        lat_2: float, lon_2: float, R: float) -> float: \n        \"\"\"Distance between points. \n\n        R is Earth's radius. \n        R=MI computes in miles. Default is nautical miles. \n\n    >>> round(haversine(36.12, -86.67, 33.94, -118.40, R=6372.8), 5) \n    2887.25995 \n    \"\"\" \n    \u0394_lat = radians(lat_2) - radians(lat_1) \n    \u0394_lon = radians(lon_2) - radians(lon_1) \n    lat_1 = radians(lat_1) \n    lat_2 = radians(lat_2) \n\n    a = sin(\u0394_lat/2)**2 + cos(lat_1)*cos(lat_2)*sin(\u0394_lon/2)**2 \n    c = 2*asin(sqrt(a)) \n\n    return R * c \n\n```", "```py\n            def haversine(lat_1: float, lon_1: float, \n                lat_2: float, lon_2: float, *, R: float) -> float: \n\n    ```", "```py\n            def nm_haversine(*args): \n                return haversine(*args, R=NM) \n\n    ```", "```py\n            def haversine(lat_1: float, lon_1: float, \n                lat_2: float, lon_2: float, *, R: float) -> float: \n\n    ```", "```py\n            from functools import partial \n            nm_haversine = partial(haversine, R=NM) \n\n    ```", "```py\n **>>> round(nm_haversine(36.12, -86.67, 33.94, -118.40), 2) \n1558.53** \n\n```", "```py\n            def haversine(R: float, lat_1: float, lon_1: float, \n                lat_2: float, lon_2: float) -> float: \n\n    ```", "```py\n            from functools import partial \n            nm_haversine = partial(haversine, NM) \n\n    ```", "```py\n **>>> round(nm_haversine(36.12, -86.67, 33.94, -118.40), 2) \n1558.53** \n\n```", "```py\n    nm_haversine = lambda *args: haversine(*args, R=NM) \n\n```", "```py\n **>>> def Twc(T, V): \n...     \"\"\"Wind Chill Temperature.\"\"\" \n...     if V < 4.8 or T > 10.0: \n...         raise ValueError(\"V must be over 4.8 kph, T must be below 10\u00b0C\") \n...     return 13.12 + 0.6215*T - 11.37*V**0.16 + 0.3965*T*V**0.16** \n\n```", "```py\n            def Twc(T, V): \n                \"\"\"Computes the wind chill temperature.\"\"\" \n\n    ```", "```py\n            def Twc(T, V): \n                \"\"\"Computes the wind chill temperature \n\n                The wind-chill, :math:`T_{wc}`, is based on \n                air temperature, T, and wind speed, V. \n                \"\"\" \n\n    ```", "```py\n            def Twc(T: float, V: float): \n                \"\"\"Computes the wind chill temperature \n\n                The wind-chill, :math:`T_{wc}`, is based on \n                air temperature, T, and wind speed, V. \n\n                :param T: Temperature in \u00b0C \n                :param V: Wind Speed in kph \n                \"\"\" \n\n    ```", "```py\n            def Twc(T: float, V: float) -> float: \n                \"\"\"Computes the wind chill temperature \n\n                The wind-chill, :math:`T_{wc}`, is based on \n                air temperature, T, and wind speed, V. \n\n                :param T: Temperature in \u00b0C \n                :param V: Wind Speed in kph \n                :returns: Wind-Chill temperature in \u00b0C \n                \"\"\" \n\n    ```", "```py\n            def Twc(T: float, V: float) -> float: \n                \"\"\"Computes the wind chill temperature \n\n                The wind-chill, :math:`T_{wc}`, is based on \n                air temperature, T, and wind speed, V. \n\n                :param T: Temperature in \u00b0C \n                :param V: Wind Speed in kph \n                :returns: Wind-Chill temperature in \u00b0C \n                :raises ValueError: for wind speeds under over 4.8 kph or T above 10\u00b0C \n                \"\"\" \n\n    ```", "```py\n            def Twc(T: float, V: float) -> float: \n                \"\"\"Computes the wind chill temperature \n\n                The wind-chill, :math:`T_{wc}`, is based on \n                air temperature, T, and wind speed, V. \n\n                :param T: Temperature in \u00b0C \n                :param V: Wind Speed in kph \n                :returns: Wind-Chill temperature in \u00b0C \n                :raises ValueError: for wind speeds under over 4.8 kph or T above 10\u00b0C \n\n                >>> round(Twc(-10, 25), 1) \n                -18.8 \n\n                \"\"\" \n\n    ```", "```py\n                See https://en.wikipedia.org/wiki/Wind_chill \n\n                ..  math:: \n\n                    T_{wc}(T_a, V) = 13.12 + 0.6215 T_a - 11.37 V^{0.16} + 0.3965 T_a V^{0.16} \n\n    ```", "```py\n    def wind_chill_table(): \n        \"\"\"Uses :func:`Twc` to produce a wind-chill \n        table for temperatures from -30\u00b0C to 10\u00b0C and \n        wind speeds from 5kph to 50kph. \n        \"\"\" \n\n```", "```py\ndef fact(n: int) -> int: \n    if n == 0: \n        return 1 \n    return n*fact(n-1) \n\n```", "```py\n            N = (f(i) for i in range(1,n+1)) \n\n    ```", "```py\n            def prod(int_iter): \n                p = 1 \n                for x in int_iter: \n                    p *= x \n                return p \n\n    ```", "```py\n    def fact(n): \n        return prod(range(1, n+1)) \n\n```", "```py\n            def ugly_fact(n): \n                if n > 0: \n                    return fact(n-1) * n \n                elif n == 0: \n                    return 1 \n                else: \n                    raise Exception(\"Logic Error\") \n\n    ```", "```py\n            p = n \n            while n != 1: \n                n = n-1 \n                p *= n \n\n    ```", "```py\n    def fibo(n): \n        if n <= 1: \n            return 1 \n        else: \n            return fibo(n-1)+fibo(n-2) \n\n```", "```py\n    from functools import lru_cache \n\n    @lru_cache(128) \n    def fibo(n): \n        if n <= 1: \n            return 1 \n        else: \n            return fibo(n-1)+fibo(n-2) \n\n```", "```py\n    def fibo_iter(): \n        a = 1 \n        b = 1 \n        yield a \n        while True: \n            yield b \n            a, b = b, a+b \n\n```", "```py\n    def fibo(n): \n        \"\"\" \n        >>> fibo(7) \n        21 \n        \"\"\" \n        for i, f_i in enumerate(fibo_iter()): \n            if i == n: break \n        return f_i \n\n```", "```py\n    import csv \n    import pathlib \n    from math import radians, sin, cos, sqrt, asin \n    from functools import partial \n\n    MI= 3959 \n    NM= 3440 \n    KM= 6373 \n\n    def haversine( lat_1: float, lon_1: float, \n        lat_2: float, lon_2: float, *, R: float ) -> float: \n        ... and more ... \n\n    nm_haversine = partial(haversine, R=NM) \n\n    source_path = pathlib.Path(\"waypoints.csv\") \n    with source_path.open() as source_file: \n        reader= csv.DictReader(source_file) \n        start = next(reader) \n        for point in reader: \n            d = nm_haversine( \n                float(start['lat']), float(start['lon']), \n                float(point['lat']), float(point['lon']) \n                ) \n            print(start, point, d) \n            start= point \n\n```", "```py\n            MI= 3959 \n            NM= 3440 \n            KM= 6373 \n\n            def haversine( lat_1: float, lon_1: float, \n                lat_2: float, lon_2: float, *, R: float ) -> float: \n                ... and more ... \n\n            nm_haversine = partial(haversine, R=NM) \n\n    ```", "```py\n            def analyze(): \n                source_path = pathlib.Path(\"waypoints.csv\") \n                with source_path.open() as source_file: \n                    reader= csv.DictReader(source_file) \n                    start = next(reader) \n                    for point in reader: \n                        d = nm_haversine( \n                            float(start['lat']), float(start['lon']), \n                            float(point['lat']), float(point['lon']) \n                            ) \n                        print(start, point, d) \n                        start= point \n\n    ```", "```py\n            def analyze(): \n                source_path = pathlib.Path(\"waypoints.csv\") \n\n    ```", "```py\n            def analyze(source_name=\"waypoints.csv\"): \n                source_path = pathlib.Path(source_name) \n\n    ```", "```py\n            if __name__ == \"__main__\": \n                analyze() \n\n    ```", "```py\n    from ch03_r08 import analyze \n    analyze('trip_1.csv') \n\n```", "```py\n    from ch03_r08 import analyze \n    for trip in 'trip_1.csv', 'trip_2.csv': \n        analyze(trip) \n\n```"]