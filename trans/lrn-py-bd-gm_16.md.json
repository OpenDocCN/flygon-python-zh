["```py\n#pseudocode for random movement\nstate.player_movement():\n    if state.hits_boundary:\n        state.change_movement()\n```", "```py\n#pseudocode for check if human player and computer are near\nif state.player == \"explore\":\n    if human(x, y) == computer(x, y):\n        state.fire_player()\n    else:\n        state.player_movement()\n```", "```py\nfrom pygame.locals import *\nfrom random import randint\nimport pygame\nimport time\nfrom operator import *\n```", "```py\nclass Player:\n    x = [0] #x-position\n    y = [0] #y-position\n    size = 44 #step size must be same for Player, Computer, Food\n  direction = 0 #to track which direction snake is moving\n  length = 3 #initial length of snake    MaxMoveAllow = 2\n  updateMove = 0    def __init__(self, length):\n        self.length = length\n        for i in range(0, 1800):\n            self.x.append(-100)\n            self.y.append(-100)\n\n        # at first rendering no collision\n  self.x[0] = 1 * 44\n  self.x[0] = 2 * 44\n```", "```py\ndef update(self):\n\n    self.updateMove = self.updateMove + 1\n  if gt(self.updateMove, self.MaxAllowedMove):\n\n        # update previous to new position\n  for i in range(self.length - 1, 0, -1):\n            self.x[i] = self.x[i - 1]\n            self.y[i] = self.y[i - 1]\n\n        # updating the position of snake by size of block (44)\n  if self.direction == 0:\n            self.x[0] = self.x[0] + self.size\n        if self.direction == 1:\n            self.x[0] = self.x[0] - self.size\n        if self.direction == 2:\n            self.y[0] = self.y[0] - self.size\n        if self.direction == 3:\n            self.y[0] = self.y[0] + self.size\n\n        self.updateMove = 0\n```", "```py\ndef moveRight(self):\n    self.direction = 0   def moveLeft(self):\n    self.direction = 1   def moveUp(self):\n    self.direction = 2   def moveDown(self):\n    self.direction = 3   def draw(self, surface, image):\n for item in range(0, self.length):\n surface.blit(image, (self.x[item], self.y[item]))\n```", "```py\nclass Computer:\n    x = [0]\n    y = [0]\n    size = 44 #size of each block of snake\n  direction = 0\n  length = 3    MaxAllowedMove = 2\n  updateMove = 0    def __init__(self, length):\n        self.length = length\n        for item in range(0, 1800):\n            self.x.append(-100)\n            self.y.append(-100)\n\n      # making sure no collision with player\n  self.x[0] = 1 * 44\n  self.y[0] = 4 * **44** \n```", "```py\ndef update(self):\n\n    self.updateMove = self.updateMove + 1\n  if gt(self.updateMove, self.MaxAllowedMove):\n\n        # Previous position changes one by one\n  for i in range(self.length - 1, 0, -1):\n            self.x[i] = self.x[i - 1]\n            self.y[i] = self.y[i - 1]\n\n        # head position change\n  if self.direction == 0:\n            self.x[0] = self.x[0] + self.size\n        if self.direction == 1:\n            self.x[0] = self.x[0] - self.size\n        if self.direction == 2:\n            self.y[0] = self.y[0] - self.size\n        if self.direction == 3:\n            self.y[0] = self.y[0] + self.size\n\n        self.updateMove = 0\n```", "```py\ndef moveRight(self):\n    self.direction = 0   def moveLeft(self):\n    self.direction = 1   def moveUp(self):\n    self.direction = 2   def moveDown(self):\n    self.direction = 3\n```", "```py\ndef target(self, food_x, food_y):\n    if gt(self.x[0] , food_x):\n\n        self.moveLeft()\n\n    if lt(self.x[0] , food_x):\n        self.moveRight()\n\n    if self.x[0] == food_x:\n        if lt(self.y[0] , food_y):\n            self.moveDown()\n\n        if gt(self.y[0] , food_y):\n            self.moveUp()\n\ndef draw(self, surface, image):\n     for item in range(0, self.length):\n         surface.blit(image, (self.x[item], self.y[item]))\n```", "```py\nclass Game:\n    def checkCollision(self, x1, y1, x2, y2, blockSize):\n        if ge(x1 , x2) and le(x1 , x2 + blockSize):\n            if ge(y1 , y2) and le(y1, y2 + blockSize):\n                return True\n return False \n```", "```py\nclass Frog:\n    x = 0\n  y = 0\n  size = 44    def __init__(self, x, y):\n        self.x = x * self.size\n        self.y = y * self.size\n\n    def draw(self, surface, image):\n        surface.blit(image, (self.x, self.y))\n```", "```py\nclass App:\n    Width = 800 #window dimension\n  Height = 600\n  player = 0 #to track either human or computer \n Frog = 0 #food    def __init__(self):\n        self._running = True\n  self.surface = None\n  self._image_surf = None\n  self._Frog_surf = None\n  self.game = Game()\n        self.player = Player(5) #instance of Player with length 5 (5            \n        blocks) \n        self.Frog = Frog(8, 5) #instance of Frog with x and y position\n        self.computer = Computer(5) #instance of Computer player with \n        length 5 \n```", "```py\ndef loader(self):\n pygame.init()\n self.surface = pygame.display.set_mode((self.Width, self.Height), \n pygame.HWSURFACE)\n\n self._running = True\n  self._image_surf = pygame.image.load(\"snake.png\").convert()\n self._Frog_surf = pygame.image.load(\"frog-main.png\").convert()\n```", "```py\ndef on_event(self, event):\n if event.type == QUIT:\n self._running = False\ndef on_cleanup(self):\n    pygame.quit() \n```", "```py\ndef main(self):\n    self.computer.target(self.Frog.x, self.Frog.y)\n    self.player.update()\n    self.computer.update()\n```", "```py\ndef renderer(self):\n    self.surface.fill((0, 0, 0))\n    self.player.draw(self.surface, self._image_surf)\n    self.Frog.draw(self.surface, self._Frog_surf)\n    self.computer.draw(self.surface, self._image_surf)\n    pygame.display.flip()\n```", "```py\ndef handler(self):\n    if self.loader() == False:\n        self._running = False   while (self._running):\n        keys = pygame.key.get_pressed()\n\n        if (keys[K_RIGHT]):\n            self.player.moveRight()\n\n        if (keys[K_LEFT]):\n            self.player.moveLeft()\n\n        if (keys[K_UP]):\n            self.player.moveUp()\n\n        if (keys[K_DOWN]):\n            self.player.moveDown()     self.main()\n        self.renderer()\n\n        time.sleep(50.0 / 1000.0);\n```", "```py\nif __name__ == \"__main__\":\n    main = App()\n    main.handler()\n```", "```py\n# Does human player snake eats Frog for i in range(0, self.player.length):\n    if self.game.checkCollision(self.Frog.x, self.Frog.y, \n    self.player.x[i], self.player.y[i], 44):\n        #after each player eats frog; next frog should be spawn in next  \n        position\n        self.Frog.x = randint(2, 9) * 44\n  self.Frog.y = randint(2, 9) * 44\n  self.player.length = self.player.length + 1   # Does computer player eats Frog for i in range(0, self.player.length):\n    if self.game.checkCollision(self.Frog.x, self.Frog.y, \n        self.computer.x[i], self.computer.y[i], 44):\n        self.Frog.x = randint(2, 9) * 44\n  self.Frog.y = randint(2, 9) * 44\n```", "```py\n# To check if the human player snake collides with its own body for i in range(2, self.player.length):\n    if self.game.checkCollision(self.player.x[0], self.player.y[0], \n   self.player.x[i], self.player.y[i], 40):\n        print(\"You lose!\")\n        exit(0)\n pass\n```", "```py\nself.computer.length = self.computer.length + 1\n```"]