["```py\nclass MainWindow(qtw.QMainWindow):\n```", "```py\n        self.textedit = qtw.QTextEdit()\n        self.setCentralWidget(self.textedit)\n```", "```py\n        status_bar = qtw.QStatusBar()\n        self.setStatusBar(status_bar)\n        status_bar.showMessage('Welcome to text_editor.py')\n```", "```py\n        self.statusBar().showMessage('Welcome to text_editor.py')\n```", "```py\n        charcount_label = qtw.QLabel(\"chars: 0\")\n        self.textedit.textChanged.connect(\n            lambda: charcount_label.setText(\n                \"chars: \" +\n                str(len(self.textedit.toPlainText()))\n                )\n            )\n        self.statusBar().addPermanentWidget(charcount_label)\n```", "```py\n        menubar = self.menuBar()\n```", "```py\n        file_menu = menubar.addMenu('File')\n        edit_menu = menubar.addMenu('Edit')\n        help_menu = menubar.addMenu('Help')\n```", "```py\n        open_action = file_menu.addAction('Open')\n        save_action = file_menu.addAction('Save')\n```", "```py\n        quit_action = file_menu.addAction('Quit', self.destroy)\n        edit_menu.addAction('Undo', self.textedit.undo)\n```", "```py\n        redo_action = qtw.QAction('Redo', self)\n        redo_action.triggered.connect(self.textedit.redo)\n        edit_menu.addAction(redo_action)\n```", "```py\n        self.menuBar().setNativeMenuBar(False)\n```", "```py\n        toolbar = self.addToolBar('File')\n```", "```py\n        toolbar.addAction(open_action)\n        toolbar.addAction(\"Save\")\n```", "```py\n        toolbar.setMovable(False)\n        toolbar.setFloatable(False)\n```", "```py\n        toolbar.setAllowedAreas(\n            qtc.Qt.TopToolBarArea |\n            qtc.Qt.BottomToolBarArea\n        )\n```", "```py\n        open_icon = self.style().standardIcon(qtw.QStyle.SP_DirOpenIcon)\n        save_icon = self.style().standardIcon(qtw.QStyle.SP_DriveHDIcon)\n```", "```py\n        open_action.setIcon(open_icon)\n        toolbar.addAction(open_action)\n```", "```py\n        toolbar.addAction(\n            save_icon,\n            'Save',\n            lambda: self.statusBar().showMessage('File Saved!')\n        )\n```", "```py\n        help_action = qtw.QAction(\n            self.style().standardIcon(qtw.QStyle.SP_DialogHelpButton),\n            'Help',\n            self,  # important to pass the parent!\n            triggered=lambda: self.statusBar().showMessage(\n                'Sorry, no help yet!'\n                )\n        )\n        toolbar.addAction(help_action)\n```", "```py\n        toolbar2 = qtw.QToolBar('Edit')\n        toolbar2.addAction('Copy', self.textedit.copy)\n        toolbar2.addAction('Cut', self.textedit.cut)\n        toolbar2.addAction('Paste', self.textedit.paste)\n        self.addToolBar(qtc.Qt.RightToolBarArea, toolbar2)\n```", "```py\n        dock = qtw.QDockWidget(\"Replace\")\n        self.addDockWidget(qtc.Qt.LeftDockWidgetArea, dock)\n```", "```py\n        dock.setFeatures(\n            qtw.QDockWidget.DockWidgetMovable |\n            qtw.QDockWidget.DockWidgetFloatable\n        )\n```", "```py\n        replace_widget = qtw.QWidget()\n        replace_widget.setLayout(qtw.QVBoxLayout())\n        dock.setWidget(replace_widget)\n\n        self.search_text_inp = qtw.QLineEdit(placeholderText='search')\n        self.replace_text_inp = qtw.QLineEdit(placeholderText='replace')\n        search_and_replace_btn = qtw.QPushButton(\n            \"Search and Replace\",\n            clicked=self.search_and_replace\n            )\n        replace_widget.layout().addWidget(self.search_text_inp)\n        replace_widget.layout().addWidget(self.replace_text_inp)\n        replace_widget.layout().addWidget(search_and_replace_btn)\n        replace_widget.layout().addStretch()\n```", "```py\n    def search_and_replace(self):\n        s_text = self.search_text_inp.text()\n        r_text = self.replace_text_inp.text()\n\n        if s_text:\n            self.textedit.setText(\n                self.textedit.toPlainText().replace(s_text, r_text)\n                )\n```", "```py\n    def showAboutDialog(self):\n        qtw.QMessageBox.about(\n            self,\n            \"About text_editor.py\",\n```", "```py\n            \"This is a text editor written in PyQt5.\"\n        )\n```", "```py\n        help_menu.addAction('About', self.showAboutDialog)\n```", "```py\n        response = qtw.QMessageBox.question(\n            self,\n            'My Text Editor',\n            'This is beta software, do you want to continue?'\n        )\n        if response == qtw.QMessageBox.No:\n            self.close()\n            sys.exit()\n```", "```py\n        response = qtw.QMessageBox.question(\n            self,\n            'My Text Editor',\n            'This is beta software, do you want to continue?',\n            qtw.QMessageBox.Yes | qtw.QMessageBox.Abort\n        )\n        if response == qtw.QMessageBox.Abort:\n            self.close()\n            sys.exit()\n```", "```py\n        splash_screen = qtw.QMessageBox()\n        splash_screen.setWindowTitle('My Text Editor')\n        splash_screen.setText('BETA SOFTWARE WARNING!')\n        splash_screen.setInformativeText(\n            'This is very, very beta, '\n            'are you really sure you want to use it?'\n        )\n        splash_screen.setDetailedText(\n            'This editor was written for pedagogical '\n            'purposes, and probably is not fit for real work.'\n        )\n        splash_screen.setWindowModality(qtc.Qt.WindowModal)\n        splash_screen.addButton(qtw.QMessageBox.Yes)\n        splash_screen.addButton(qtw.QMessageBox.Abort)\n        response = splash_screen.exec()\n        if response == qtw.QMessageBox.Abort:\n            self.close()\n            sys.exit()\n```", "```py\n    def openFile(self):\n        filename, _ = qtw.QFileDialog.getOpenFileName()\n        if filename:\n            try:\n                with open(filename, 'r') as fh:\n                    self.textedit.setText(fh.read())\n            except Exception as e:\n                qtw.QMessageBox.critical(f\"Could not load file: {e}\")\n```", "```py\n        filename, _ = qtw.QFileDialog.getOpenFileName(\n            self,\n            \"Select a text file to open\u2026\",\n            qtc.QDir.homePath(),\n            'Text Files (*.txt) ;;Python Files (*.py) ;;All Files (*)',\n            'Python Files (*.py)',\n            qtw.QFileDialog.DontUseNativeDialog |\n            qtw.QFileDialog.DontResolveSymlinks\n        )\n```", "```py\n    def saveFile(self):\n        filename, _ = qtw.QFileDialog.getSaveFileName(\n            self,\n            \"Select the file to save to\u2026\",\n            qtc.QDir.homePath(),\n            'Text Files (*.txt) ;;Python Files (*.py) ;;All Files (*)'\n        )\n        if filename:\n            try:\n                with open(filename, 'w') as fh:\n                    fh.write(self.textedit.toPlainText())\n            except Exception as e:\n                qtw.QMessageBox.critical(f\"Could not save file: {e}\")\n```", "```py\n        open_action.triggered.connect(self.openFile)\n        save_action.triggered.connect(self.saveFile)\n```", "```py\n    def set_font(self):\n        current = self.textedit.currentFont()\n        font, accepted = qtw.QFontDialog.getFont(current, self)\n        if accepted:\n            self.textedit.setCurrentFont(font)\n```", "```py\n        font, accepted = qtw.QFontDialog.getFont(\n            current,\n            self,\n            options=(\n                qtw.QFontDialog.DontUseNativeDialog |\n                qtw.QFontDialog.MonospacedFonts\n            )\n        )\n```", "```py\nclass SettingsDialog(qtw.QDialog):\n    \"\"\"Dialog for setting the settings\"\"\"\n\n    def __init__(self, settings, parent=None):\n        super().__init__(parent, modal=True)\n        self.setLayout(qtw.QFormLayout())\n        self.settings = settings\n        self.layout().addRow(\n            qtw.QLabel('<h1>Application Settings</h1>'),\n        )\n        self.show_warnings_cb = qtw.QCheckBox(\n            checked=settings.get('show_warnings')\n        )\n        self.layout().addRow(\"Show Warnings\", self.show_warnings_cb)\n\n        self.accept_btn = qtw.QPushButton('Ok', clicked=self.accept)\n        self.cancel_btn = qtw.QPushButton('Cancel', clicked=self.reject)\n        self.layout().addRow(self.accept_btn, self.cancel_btn)\n```", "```py\n    def accept(self):\n        self.settings['show_warnings'] = self.show_warnings_cb.isChecked()\n        super().accept()\n```", "```py\nclass MainWindow(qtw.QMainWindow):\n\n    settings = {'show_warnings': True}\n\n    def show_settings(self):\n        settings_dialog = SettingsDialog(self.settings, self)\n        settings_dialog.exec()\n```", "```py\nclass MainWindow(qtw.QMainWindow):\n\n    settings = qtc.QSettings('Alan D Moore', 'text editor')\n```", "```py\n        if self.settings.value('show_warnings', False, type=bool):\n            # Warning dialog code follows...\n```", "```py\n        self.settings.setValue(\n            'show_warnings',\n            self.show_warnings_cb.isChecked()\n        )\n```", "```py\napp = qtw.QApplication([])\ns = qtc.QSettings('test')\ns.setValue('app', app)\n# Prints: QVariant::save: unable to save type 'QObject*' (type id: 39).\n```", "```py\n    answer = qtw.QMessageBox.question(\n        None, 'Continue?', 'Run this program?')\n    if not answer:\n        sys.exit()\n```", "```py\n    settings = qtc.QSettings()\n    settings.setValue('config_file', 'SuperPhoto.conf')\n    settings.setValue('default_color', QColor('black'))\n    settings.sync()\n```", "```py\n    settings = qtc.QSettings('My Company', 'SuperPhoto')\n    settings.setValue('Default Name', dialog.default_name_edit.text)\n    settings.setValue('Use GPS', dialog.gps_checkbox.isChecked)\n    settings.setValue('Default Color', dialog.color_picker.color)\n```"]