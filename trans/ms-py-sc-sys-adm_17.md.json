["```py\n$ pip3 install numpy\n```", "```py\nimport numpy as np my_list1 = [1,2,3,4] my_array1 = np.array(my_list1) print(my_list11, type(my_list1))\nprint(my_array1, type(my_array1))\n```", "```py\nstudent@ubuntu:~$ python3 simple_array.py\n```", "```py\n[1, 2, 3, 4] <class 'list'>\n[1 2 3 4] <class 'numpy.ndarray'>\n```", "```py\nimport numpy as np my_list1 = [1,2,3,4] my_list2 = [11,22,33,44] my_lists = [my_list1, my_list2]\nmy_array = np.array(my_lists)\nprint(my_lists, type(my_lists)) print(my_array, type(my_array))\n```", "```py\nstudent@ubuntu:~$ python3 mult_dim_array.py\n```", "```py\n[[1, 2, 3, 4], [11, 22, 33, 44]] <class 'list'>\n[[ 1 2 3 4]\n [11 22 33 44]] <class 'numpy.ndarray'>\n```", "```py\nimport numpy as np my_list1 = [1,2,3,4] my_list2 = [11,22,33,44] my_lists = [my_list1,my_list2] my_array = np.array(my_lists) print(my_array) size = my_array.shape print(size) data_type = my_array.dtype print(data_type)\n```", "```py\nstudent@ubuntu:~$ python3 size_and_dtype.py\n```", "```py\n[[ 1  2  3  4]\n [11 22 33 44]] (2, 4) int64\n```", "```py\nstudent@ubuntu:~$ python3 Python 3.6.7 (default, Oct 22 2018, 11:32:17) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import numpy as np >>> np.zeros(5) array([0., 0., 0., 0., 0.]) >>> \n```", "```py\n>>> np.ones((5,5)) array([[1., 1., 1., 1., 1.],\n [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.]]) >>> \n```", "```py\n>>> np.empty([2,2]) array([[6.86506982e-317,  0.00000000e+000],\n [6.89930557e-310,  2.49398949e-306]]) >>> \n```", "```py\n>>> np.eye(5) array([[1., 0., 0., 0., 0.],\n [0., 1., 0., 0., 0.], [0., 0., 1., 0., 0.], [0., 0., 0., 1., 0.], [0., 0., 0., 0., 1.]]) >>> \n```", "```py\n>>> np.arange(10) array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) >>> \n```", "```py\nstudent@ubuntu:~$ python3 Python 3.6.7 (default, Oct 22 2018, 11:32:17) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import numpy as np >>> from __future__ import division >>> arr = np.array([[4,5,6],[7,8,9]]) >>> arr array([[4, 5, 6],\n [7, 8, 9]]) >>> \n```", "```py\n>>> arr*arr array([[16, 25, 36],\n [49, 64, 81]]) >>> \n```", "```py\n>>> arr-arr array([[0, 0, 0],\n [0, 0, 0]]) >>> \n```", "```py\n>>> 1 / arr array([[0.25             ,  0.2        ,   0.16666667],\n [0.14285714 ,   0.125     ,  0.11111111]]) >>> \n```", "```py\n>>> arr ** 3 array([[ 64, 125, 216],\n [343, 512, 729]]) >>> \n```", "```py\nstudent@ubuntu:~$ python3 Python 3.6.7 (default, Oct 22 2018, 11:32:17) [GCC 8.2.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import numpy as np >>> arr = np.arange(0,16) >>> arr array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15]) >>> \n```", "```py\n>>> arr[7] 7 >>> \n```", "```py\n>>> arr[2:10] array([2, 3, 4, 5, 6, 7, 8, 9]) >>> arr[2:10:2] array([2, 4, 6, 8])>>>\n```", "```py\n>>> arr[5:] array([ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15]) >>> \n```", "```py\n>>> arr_slice = arr[0:8] >>> arr_slice array([0, 1, 2, 3, 4, 5, 6, 7]) >>> \n```", "```py\n>>> arr_slice[:] = 29 >>> arr_slice array([29, 29, 29, 29, 29, 29, 29, 29]) >>> \n```", "```py\n>>> arr array([29, 29, 29, 29, 29, 29, 29, 29,  8,  9, 10, 11, 12, 13, 14, 15]) >>>\n```", "```py\n>>> cpying_arr = arr.copy() >>> cpying_arr array([29, 29, 29, 29, 29, 29, 29, 29,  8,  9, 10, 11, 12, 13, 14, 15]) >>> \n```", "```py\n>>> td_array = np.array(([5,6,7],[8,9,10],[11,12,13])) >>> td_array array([[  5,   6,    7],\n [  8,   9,  10], [11, 12,  13]]) >>> \n```", "```py\n>>> td_array[1] array([ 8,  9, 10]) >>>\n```", "```py\n>>> td_array[1,0] 8 >>> \n```", "```py\n>>> td_array = np.zeros((10,10)) >>> td_array array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]) >>> for i in range(10):\n ...     td_array[i] = i ... >>> td_array array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [5., 5., 5., 5., 5., 5., 5., 5., 5., 5.], [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.], [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.], [9., 9., 9., 9., 9., 9., 9., 9., 9., 9.]]) >>>\n```", "```py\n>>> td_array[[1,3,5,7]] array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.], [5., 5., 5., 5., 5., 5., 5., 5., 5., 5.], [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.]]) >>> \n```", "```py\nimport numpy as np array = np.arange(16) print(\"The Array is : \",array) Square_root = np.sqrt(array) print(\"Square root of given array is : \", Square_root)\n```", "```py\nstudent@ubuntu:~/work$ python3 sqrt_array.py\n```", "```py\nThe Array is : [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15] Square root of given array is : [0\\. 1\\. 1.41421356 1.73205081 2\\. 2.23606798\n 2.44948974 2.64575131 2.82842712 3\\. 3.16227766 3.31662479 3.46410162 3.60555128 3.74165739 3.87298335]\n```", "```py\nimport numpy as np array = np.arange(16) print(\"The Array is : \",array) exp = np.exp(array) print(\"exponential of given array is : \", exp)\n```", "```py\nstudent@ubuntu:~/work$ python3 expo_array.py\n```", "```py\nThe Array is :  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15] exponential of given array is :  [1.00000000e+00 2.71828183e+00 7.38905610e+00 2.00855369e+01\n 5.45981500e+01 1.48413159e+02 4.03428793e+02 1.09663316e+03 2.98095799e+03 8.10308393e+03 2.20264658e+04 5.98741417e+04 1.62754791e+05 4.42413392e+05 1.20260428e+06 3.26901737e+06]\n```", "```py\n$ pip3 install pandas $ pip3 install matplotlib\n```", "```py\nimport pandas as pd import numpy as np s_data = pd.Series([10, 20, 30, 40], name = 'numbers') print(s_data)\n```", "```py\nstudent@ubuntu:~/work$ python3 series_without_index.py\n```", "```py\n0 10 1 20 2 30 3 40 Name: numbers, dtype: int64\n```", "```py\nimport pandas as pd import numpy as np s_data = pd.Series([10, 20, 30, 40], index = ['a', 'b', 'c', 'd'], name = 'numbers') print(s_data) print() print(\"The data at index 2 is: \", s_data[2]) print(\"The data from range 1 to 3 are:\\n\", s_data[1:3])\n```", "```py\nstudent@ubuntu:~/work$ python3 series_with_index.py a    10 b    20 c    30 d    40 Name: numbers, dtype: int64 \n\nThe data at index 2 is:  30 The data from range 1 to 3 are:\n b    20 c    30 Name: numbers, dtype: int64\n```", "```py\nId, Name, Department, Country 101, John, Finance, US 102, Mary, HR, Australia 103, Geeta, IT, India 104, Rahul, Marketing, India 105, Tom, Sales, Russia\n```", "```py\nimport pandas as pd file_name = 'employee.csv' df = pd.read_csv(file_name) print(df) print() print(df.head(3)) print() print(df.tail(1))\n```", "```py\nstudent@ubuntu:~/work$ python3 read_csv_dataframe.py Output:\n Id    Name  Department     Country 0  101    John     Finance          US 1  102    Mary          HR   Australia 2  103   Geeta          IT       India 3  104   Rahul   Marketing       India 4  105     Tom       Sales      Russia \n\n Id    Name  Department     Country 0  101    John     Finance          US 1  102    Mary          HR   Australia 2  103   Geeta          IT       India\nId  Name  Department  Country 4  105   Tom       Sales   Russia\n```", "```py\n$ pip3 install matplotlib\n```", "```py\n$ sudo apt install python3-tk\n```", "```py\nimport matplotlib.pyplot as plt import numpy as np x = np.linspace(0, 5, 10) y = x**2 plt.plot(x,y) plt.title(\"sample plot\") plt.xlabel(\"x axis\") plt.ylabel(\"y axis\") plt.show()\n```", "```py\nstudent@ubuntu:~/work$ python3 simple_plot.py\n```", "```py\nimport matplotlib.pyplot as plt from matplotlib import style style.use('ggplot') x1 = [0,5,10]\ny1 = [12,16,6] x2 = [6,9,11] y2 = [6,16,8] plt.subplot(2,1,1) plt.plot(x1, y1, linewidth=3) plt.title(\"sample plot\") plt.xlabel(\"x axis\") plt.ylabel(\"y axis\") plt.subplot(2,1,2) plt.plot(x2, y2, color = 'r', linewidth=3) plt.xlabel(\"x2 axis\") plt.ylabel(\"y2 axis\") plt.show()\n```", "```py\nstudent@ubuntu:~/work$ python3 simple_plot2.py\n```", "```py\nimport matplotlib.pyplot as plt from matplotlib import style style.use('ggplot') x1 = [0,5,10] y1 = [12,16,6] x2 = [6,9,11] y2 = [6,16,8] plt.figure(1) plt.plot(x1, y1, color = 'g', linewidth=3) plt.title(\"sample plot\") plt.xlabel(\"x axis\") plt.ylabel(\"y axis\") plt.savefig('my_sample_plot1.jpg') plt.figure(2) plt.plot(x2, y2, color = 'r', linewidth=3) plt.xlabel(\"x2 axis\") plt.ylabel(\"y2 axis\") plt.savefig('my_sample_plot2.jpg') plt.show()\n```", "```py\nstudent@ubuntu:~/work$ python3 simple_plot3.py\n```", "```py\nimport matplotlib.pyplot as plt import matplotlib.image as mpimg plt.imshow(mpimg.imread('my_sample_plot1.jpg')) plt.show()\n```", "```py\nstudent@ubuntu:~/work$ python3 open_image.py\n```", "```py\nimport matplotlib.pyplot as plt import numpy as np x = np.random.randn(500) plt.hist(x) plt.show()\n```", "```py\nstudent@ubuntu:~/work$ python3 histogram_example.py\n```", "```py\nimport matplotlib.pyplot as plt import numpy as np x = np.linspace(-2,2,100) y = np.random.randn(100) colors = np.random.rand(100) plt.scatter(x,y,c=colors) plt.show()\n```", "```py\nstudent@ubuntu:~/work$ python3 scatterplot_example.py\n```", "```py\nimport matplotlib.pyplot as plt from matplotlib import style style.use('ggplot') x1 = [4,8,12] y1 = [12,16,6] x2 = [5,9,11] y2 = [6,16,8] plt.bar(x1,y1,color = 'g',linewidth=3) plt.bar(x2,y2,color = 'r',linewidth=3) plt.title(\"Bar plot\") plt.xlabel(\"x axis\") plt.ylabel(\"y axis\") plt.show()\n```", "```py\nstudent@ubuntu:~/work$ python3 bar_chart.py\n```", "```py\n$ pip3 install plotly\n```", "```py\n plotly.tools.set_credentials_file(username='Username', api_key='APIkey')\n```", "```py\nimport plotly from plotly.graph_objs import Scatter, Layout plotly.offline.plot({\n \"data\": [Scatter(x=[1, 4, 3, 4], y=[4, 3, 2, 1])], \"layout\": Layout(title=\"plotly_sample_plot\") })\n```", "```py\nstudent@ubuntu:~/work$ python3 sample_plotly.py\n```", "```py\nimport plotly import plotly.graph_objs as go import numpy as np  x_axis = np.random.randn(100) y_axis = np.random.randn(100)  trace = go.Scatter(x=x_axis, y=y_axis, mode = 'markers') data_set = [trace] plotly.offline.plot(data_set, filename='scatter_plot.html')\n```", "```py\nstudent@ubuntu:~/work$ python3 scatter_plot_plotly.py\n```", "```py\nimport plotly import plotly.graph_objs as go import numpy as np x_axis = np.linspace(0, 1, 50) y0_axis = np.random.randn(50)+5 y1_axis = np.random.randn(50) y2_axis = np.random.randn(50)-5 trace0 = go.Scatter(x = x_axis,y = y0_axis,mode = 'markers',name = 'markers') trace1 = go.Scatter(x = x_axis,y = y1_axis,mode = 'lines+markers',name = 'lines+markers') trace2 = go.Scatter(x = x_axis,y = y2_axis,mode = 'lines',name = 'lines') data_sets = [trace0, trace1, trace2] plotly.offline.plot(data_sets, filename='line_scatter_plot.html')\n```", "```py\nstudent@ubuntu:~/work$ python3 line_scatter_plot.py\n```", "```py\nimport random import plotly from numpy import * N = 50. c = ['hsl('+str(h)+',50%'+',50%)' for h in linspace(0, 360, N)] data_set = [{\n 'y': 3.5*sin(pi * i/N) + i/N+(1.5+0.5*cos(pi*i/N))*random.rand(20), 'type':'box', 'marker':{'color': c[i]} } for i in range(int(N))] layout = {'xaxis': {'showgrid':False,'zeroline':False, 'tickangle':45,'showticklabels':False},\n 'yaxis': {'zeroline':False,'gridcolor':'white'}, 'paper_bgcolor': 'rgb(233,233,233)', 'plot_bgcolor': 'rgb(233,233,233)', } plotly.offline.plot(data_set)\n```", "```py\nstudent@ubuntu:~/work$ python3 plotly_box_plot.py\n```", "```py\nfrom plotly import tools import plotly import plotly.graph_objs as go trace0 = go.Contour(\n z=[[1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 7, 12, 13, 14, 15, 16], [3, 1, 6, 11, 12, 13, 16, 17], [4, 2, 7, 7, 11, 14, 17, 18], [5, 3, 8, 8, 13, 15, 18, 19], [7, 4, 10, 9, 16, 18, 20, 19], [9, 10, 5, 27, 23, 21, 21, 21]], line=dict(smoothing=0), ) trace1 = go.Contour(\n z=[[1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 7, 12, 13, 14, 15, 16], [3, 1, 6, 11, 12, 13, 16, 17], [4, 2, 7, 7, 11, 14, 17, 18], [5, 3, 8, 8, 13, 15, 18, 19], [7, 4, 10, 9, 16, 18, 20, 19], [9, 10, 5, 27, 23, 21, 21, 21]], line=dict(smoothing=0.95), ) data = tools.make_subplots(rows=1, cols=2,\n subplot_titles=('Smoothing_not_applied', 'smoothing_applied')) data.append_trace(trace0, 1, 1) data.append_trace(trace1, 1, 2) plotly.offline.plot(data)\n```", "```py\nstudent@ubuntu:~/work$ python3 contour_plotly.py This is the format of your plot grid: [ (1,1) x1,y1 ]  [ (1,2) x2,y2 ]\n```", "```py\nimport numpy as np\n# input array\nin_arr1 = np.array([[ 1, 2, 3], [ -1, -2, -3]] )\nprint (\"1st Input array : \\n\", in_arr1) \nin_arr2 = np.array([[ 4, 5, 6], [ -4, -5, -6]] )\nprint (\"2nd Input array : \\n\", in_arr2) \n# Stacking the two arrays horizontally\nout_arr = np.hstack((in_arr1, in_arr2))\nprint (\"Output stacked array :\\n \", out_arr)\n```"]