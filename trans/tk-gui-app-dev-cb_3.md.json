["```py\nfrom functools import partial\n\nimport tkinter as tk\nfrom tkinter.colorchooser import askcolor\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Colors demo\")\n        text = \"The quick brown fox jumps over the lazy dog\"\n        self.label = tk.Label(self, text=text)\n        self.fg_btn = tk.Button(self, text=\"Set foreground color\",\n                                command=partial(self.set_color, \"fg\")) \n        self.bg_btn = tk.Button(self, text=\"Set background color\",\n                                command=partial(self.set_color, \"bg\"))\n\n        self.label.pack(padx=20, pady=20)\n        self.fg_btn.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        self.bg_btn.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n\n    def set_color(self, option):\n        color = askcolor()[1]\n        print(\"Chosen color:\", color)\n        self.label.config(**{option: color})\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ntk.Button(self, command=partial(self.set_color, \"fg\"), ...)\n```", "```py\ntk.Button(self, command=lambda: self.set_color(\"fg\"), ...)\n```", "```py\ndef set_color(self, option):\n    color = askcolor()[1]\n    print(\"Chosen color:\", color)\n    self.label.config(**{option: color}) # same as (fg=color)\n                      or (bg=color)\n```", "```py\nrgb = widget.winfo_rgb(\"lightblue\")\nred, green, blue = [x>>8 for x in rgb]\nprint(\"#{:02x}{:02x}{:02x}\".format(red, green, blue))\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Fonts demo\")\n        text = \"The quick brown fox jumps over the lazy dog\"\n        self.label = tk.Label(self, text=text)\n\n        self.family = tk.StringVar()\n        self.family.trace(\"w\", self.set_font)\n        families = (\"Times\", \"Courier\", \"Helvetica\")\n        self.option = tk.OptionMenu(self, self.family, *families)\n\n        self.size = tk.StringVar()\n        self.size.trace(\"w\", self.set_font)\n        self.spinbox = tk.Spinbox(self, from_=8, to=18,\n                                  textvariable=self.size)\n\n        self.family.set(families[0])\n        self.size.set(\"10\")\n        self.label.pack(padx=20, pady=20)\n        self.option.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n        self.spinbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\n\n    def set_font(self, *args):\n        family = self.family.get()\n        size = self.size.get()\n        self.label.config(font=(family, size))\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ndef set_font(self, *args):\n    family = self.family.get()\n    size = self.size.get()\n    self.label.config(font=(family, size))\n```", "```py\nwidget1.config(font=(\"Times\", \"20\", \"bold\"))\nwidget2.config(font=(\"Helvetica\", \"16\", \"italic underline\"))\n```", "```py\nimport tkinter as tk\nfrom tkinter import font\n\nroot = tk.Tk()\nprint(font.families())\n```", "```py\nfrom tkinter import font\ncourier_18 = font.Font(family=\"Courier\", size=18, weight=font.BOLD)\n```", "```py\nfamily = courier_18.cget(\"family\")\ncourier_18.configure(underline=1)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Options demo\")\n        self.option_add(\"*font\", \"helvetica 10\")\n        self.option_add(\"*header.font\", \"helvetica 18 bold\")\n        self.option_add(\"*subtitle.font\", \"helvetica 14 italic\")\n        self.option_add(\"*Button.foreground\", \"blue\")\n        self.option_add(\"*Button.background\", \"white\")\n        self.option_add(\"*Button.activeBackground\", \"gray\")\n        self.option_add(\"*Button.activeForeground\", \"black\")\n\n        self.create_label(name=\"header\", text=\"This is the header\")\n        self.create_label(name=\"subtitle\", text=\"This is the subtitle\")\n        self.create_label(text=\"This is a paragraph\")\n        self.create_label(text=\"This is another paragraph\")\n        self.create_button(text=\"See more\")\n\n    def create_label(self, **options):\n        tk.Label(self, **options).pack(padx=20, pady=5, anchor=tk.W)\n\n    def create_button(self, **options):\n        tk.Button(self, **options).pack(padx=5, pady=5, anchor=tk.E)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\nself.option_add(\"*font\", \"helvetica 10\")\n```", "```py\nself.option_add(\"*header.font\", \"helvetica 18 bold\")\n```", "```py\nself.option_add(\"*Button.foreground\", \"blue\")\nself.option_add(\"*Button.background\", \"white\")\nself.option_add(\"*Button.activeBackground\", \"gray\")\nself.option_add(\"*Button.activeForeground\", \"black\")\n```", "```py\n*font: helvetica 10\n*header.font: helvetica 18 bold\n*subtitle.font: helvetica 14 italic\n*Button.foreground: blue\n*Button.background: white\n*Button.activeBackground: gray\n*Button.activeForeground: black\n```", "```py\ndef __init__(self):\n        super().__init__()\n        self.title(\"Options demo\")\n        self.option_readfile(\"my_options_file\")\n        # ...\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Cursors demo\")\n        self.resizable(0, 0)\n        self.label = tk.Label(self, text=\"Click the button to start\")\n        self.btn_launch = tk.Button(self, text=\"Start!\",\n                                    command=self.perform_action)\n        self.btn_help = tk.Button(self, text=\"Help\",\n                                  cursor=\"question_arrow\")\n\n        btn_opts = {\"side\": tk.LEFT, \"expand\":True, \"fill\": tk.X,\n                    \"ipadx\": 30, \"padx\": 20, \"pady\": 5}\n        self.label.pack(pady=10)\n        self.btn_launch.pack(**btn_opts)\n        self.btn_help.pack(**btn_opts)\n\n    def perform_action(self):\n        self.config(cursor=\"watch\")\n        self.btn_launch.config(state=tk.DISABLED)\n        self.btn_help.config(state=tk.DISABLED)\n        self.label.config(text=\"Working...\")\n        self.after(3000, self.end_action)\n\n    def end_action(self):\n        self.config(cursor=\"arrow\")\n        self.btn_launch.config(state=tk.NORMAL)\n        self.btn_help.config(state=tk.NORMAL)\n        self.label.config(text=\"Done!\")\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ndef perform_action(self):\n    self.config(cursor=\"watch\")\n    # ...\n```", "```py\nself.btn_help = tk.Button(self, text=\"Help\",\n                          cursor=\"question_arrow\")\n```", "```py\ndef perform_action(self):\n    self.set_watch_cursor(self)\n    # ...\n\ndef end_action(self):\n self.restore_cursor(self)\n    # ...\n\ndef set_watch_cursor(self, widget):\n    widget._old_cursor = widget.cget(\"cursor\")\n    widget.config(cursor=\"watch\")\n    for w in widget.winfo_children():\n        self.set_watch_cursor(w)\n\ndef restore_cursor(self, widget):\n    widget.config(cursor=widget._old_cursor)\n    for w in widget.winfo_children():\n        self.restore_cursor(w)\n```", "```py\nimport tkinter as tk\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Text demo\")\n        self.resizable(0, 0)\n        self.text = tk.Text(self, width=50, height=10)\n        self.btn_clear = tk.Button(self, text=\"Clear text\",\n                                   command=self.clear_text)\n        self.btn_insert = tk.Button(self, text=\"Insert text\",\n                                    command=self.insert_text)\n        self.btn_print = tk.Button(self, text=\"Print selection\",\n                                   command=self.print_selection)\n        self.text.pack()\n        self.btn_clear.pack(side=tk.LEFT, expand=True, pady=10)\n        self.btn_insert.pack(side=tk.LEFT, expand=True, pady=10)\n        self.btn_print.pack(side=tk.LEFT, expand=True, pady=10)\n\n    def clear_text(self):\n        self.text.delete(\"1.0\", tk.END)\n\n    def insert_text(self):\n        self.text.insert(tk.INSERT, \"Hello, world\")\n\n    def print_selection(self):\n        selection = self.text.tag_ranges(tk.SEL)\n        if selection:\n            content = self.text.get(*selection)\n            print(content)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ndef clear_text(self):\n    self.text.delete(\"1.0\", tk.END)\n```", "```py\ndef insert_text(self):\n    self.text.insert(tk.INSERT, \"Hello, world\")\n```", "```py\ndef print_selection(self):\n    selection = self.text.tag_ranges(tk.SEL)\n    if selection:\n        content = self.text.get(*selection)\n        print(content)\n```", "```py\nimport tkinter as tk\nimport webbrowser\n\nclass App(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Text tags demo\")\n        self.text = tk.Text(self, width=50, height=10)\n        self.btn_link = tk.Button(self, text=\"Add hyperlink\",\n                                  command=self.add_hyperlink)\n\n        self.text.tag_config(\"link\", foreground=\"blue\", underline=1)\n        self.text.tag_bind(\"link\", \"<Button-1>\", self.open_link)\n        self.text.tag_bind(\"link\", \"<Enter>\",\n                           lambda _: self.text.config(cursor=\"hand2\"))\n        self.text.tag_bind(\"link\", \"<Leave>\",\n                           lambda e: self.text.config(cursor=\"\"))\n\n        self.text.pack()\n        self.btn_link.pack(expand=True)\n\n    def add_hyperlink(self):\n        selection = self.text.tag_ranges(tk.SEL)\n        if selection:\n            self.text.tag_add(\"link\", *selection)\n\n    def open_link(self, event):\n        position = \"@{},{} + 1c\".format(event.x, event.y)\n        index = self.text.index(position)\n        prevrange = self.text.tag_prevrange(\"link\", index)\n        url = self.text.get(*prevrange)\n        webbrowser.open(url)\n\nif __name__ == \"__main__\":\n    app = App()\n    app.mainloop()\n```", "```py\ndef __init__(self):\n    # ...\n    self.text.tag_config(\"link\", foreground=\"blue\", underline=1)\n    self.text.tag_bind(\"link\", \"<Button-1>\", self.open_link)\n    self.text.tag_bind(\"link\", \"<Enter>\",\n                       lambda e: self.text.config(cursor=\"hand2\"))\n    self.text.tag_bind(\"link\", \"<Leave>\",\n                       lambda e: self.text.config(cursor=\"\"))\n```", "```py\nposition = \"@{},{} + 1c\".format(event.x, event.y)\nindex = self.text.index(position)\nprevrange = self.text.tag_prevrange(\"link\", index)\n```", "```py\nurl = self.text.get(*prevrange)\nwebbrowser.open(url)\n```", "```py\nfrom urllib.parse import urlparse def validate_hyperlink(self, url):\n    return urlparse(url).netloc\n```"]