["```py\n>>> from datetime import datetime\n```", "```py\n>>> TEMPLATE = '''\nMovies report\n-------------\n\nDate: {date}\nMovies seen in the last 30 days: {num_movies}\nTotal minutes: {total_minutes}\n'''\n```", "```py\n>>> data = {\n    'date': datetime.utcnow(),\n 'num_movies': 3,\n    'total_minutes': 376,\n}\n```", "```py\n>>> report = TEMPLATE.format(**data)\n```", "```py\n>>> FILENAME_TMPL = \"{date}_report.txt\"\n>>> filename = FILENAME_TMPL.format(date=data['date'].strftime('%Y-%m-%d'))\n>>> filename\n2018-06-26_report.txt\n>>> with open(filename, 'w') as file:\n...     file.write(report)\n```", "```py\n$ cat 2018-06-26_report.txt\n\nMovies report\n-------------\n\nDate: 2018-06-26 23:40:08.737671\nMovies seen in the last 30 days: 3\nTotal minutes: 376\n```", "```py\n$ echo \"jinja2==2.20\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> from jinja2 import Template\n>>> from datetime import datetime\n```", "```py\n>>> with open('jinja_template.html') as file:\n...     template = Template(file.read())\n```", "```py\n>>> context = {\n    'date': datetime.now(),\n    'movies': ['Casablanca', 'The Sound of Music', 'Vertigo'],\n    'total_minutes': 404,\n}\n```", "```py\n>>> with open('report.html', 'w') as file:\n...    file.write(template.render(context))\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title> Movies Report</title>\n</head>\n<body>\n    <h1>Movies Report</h1>\n    <p>Date {{date}}</p>\n    <p>Movies seen in the last 30 days: {{movies|length}}</p>\n    <ol>\n        {% for movie in movies %}\n        <li>{{movie}}</li>\n        {% endfor %}\n    </ol>\n    <p>Total minutes: {{total_minutes}} </p>\n</body>\n</html>\n```", "```py\n{% if movies|length > 5 %}\n  Wow, so many movies this month!\n{% else %}\n  Regular number of movies\n{% endif %}\n```", "```py\n>>> Template('{{variable}}', autoescape=False).render({'variable': '<'})\n'<'\n>>> Template('{{variable}}', autoescape=True).render({'variable': '<'})\n'<'\n```", "```py\n$ echo \"mistune==0.8.3\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n>>> import mistune\n```", "```py\n>>> with open('markdown_template.md') as file:\n...     template = file.read()\n```", "```py\ncontext = {\n    'date': datetime.now(),\n    'pmovies': ['Casablanca', 'The Sound of Music', 'Vertigo'],\n    'total_minutes': 404,\n}\n```", "```py\n>>> context['num_movies'] = len(context['pmovies'])\n>>> context['movies'] = '\\n'.join('* {}'.format(movie) for movie in context['pmovies'])\n```", "```py\n>>> md_report = template.format(**context)\n>>> report = mistune.markdown(md_report)\n```", "```py\n>>> with open('report.html', 'w') as file:\n...    file.write(report)\n```", "```py\n>>> '\\n'.join('* {}'.format(movie) for movie in context['pmovies'])\n'* Casablanca\\n* The Sound of Music\\n* Vertigo'\n```", "```py\nMovies Report\n=======\n\nDate: 2018-06-29 20:47:18.930655\n\nMovies seen in the last 30 days: 3\n\n* Casablanca\n* The Sound of Music\n* Vertigo\n\nTotal minutes: 404\n```", "```py\n>>> echo \"python-docx==0.8.6\" >> requirements.txt\n>>> pip install -r requirements.txt\n```", "```py\n>>> import docx\n>>> from datetime import datetime\n```", "```py\ncontext = {\n    'date': datetime.now(),\n    'movies': ['Casablanca', 'The Sound of Music', 'Vertigo'],\n    'total_minutes': 404,\n}\n```", "```py\n>>> document = docx.Document()\n>>> document.add_heading('Movies Report', 0)\n```", "```py\n>>> paragraph = document.add_paragraph('Date: ')\n>>> paragraph.add_run(str(context['date'])).italic = True\n```", "```py\n>>> paragraph = document.add_paragraph('Movies see in the last 30 days: ')\n>>> paragraph.add_run(str(len(context['movies']))).italic = True\n```", "```py\n>>> for movie in context['movies']:\n...     document.add_paragraph(movie, style='List Bullet')\n```", "```py\n>>> paragraph = document.add_paragraph('Total minutes: ')\n>>> paragraph.add_run(str(context['total_minutes'])).italic = True\n>>> document.save('word-report.docx')\n```", "```py\n>>> echo \"python-docx==0.8.6\" >> requirements.txt\n>>> pip install -r requirements.txt\n```", "```py\n>>> import docx\n```", "```py\n>>> document = docx.Document()\n```", "```py\n>>> p = document.add_paragraph('This shows different kinds of emphasis: ')\n>>> p.add_run('bold').bold = True\n>>> p.add_run(', ')\n<docx.text.run.Run object at ...>\n>>> p.add_run('italics').italic = True\n>>> p.add_run(' and ')\n<docx.text.run.Run object at ...>\n>>> p.add_run('underline').underline = True\n>>> p.add_run('.')\n<docx.text.run.Run object at ...>\n```", "```py\n>>> document.add_paragraph('a few', style='List Bullet')\n<docx.text.paragraph.Paragraph object at ...>\n>>> document.add_paragraph('bullet', style='List Bullet')\n<docx.text.paragraph.Paragraph object at ...>\n>>> document.add_paragraph('points', style='List Bullet')\n<docx.text.paragraph.Paragraph object at ...>\n>>>\n>>> document.add_paragraph('Or numbered', style='List Number')\n<docx.text.paragraph.Paragraph object at ...>\n>>> document.add_paragraph('that will', style='List Number')\n<docx.text.paragraph.Paragraph object at ...>\n>>> document.add_paragraph('that keep', style='List Number')\n<docx.text.paragraph.Paragraph object at ...>\n>>> document.add_paragraph('count', style='List Number')\n<docx.text.paragraph.Paragraph object at ...>\n>>> \n>>> document.add_paragraph('And finish with a quote', style='Quote')\n<docx.text.paragraph.Paragraph object at 0x10d2336d8>\n```", "```py\n>>> from docx.shared import Pt\n>>> from docx.enum.text import WD_ALIGN_PARAGRAPH\n>>> p = document.add_paragraph('This paragraph will have a manual styling and right alignment')\n>>> p.runs[0].font.name = 'Arial'\n>>> p.runs[0].font.size = Pt(25)\n>>> p.alignment = WD_ALIGN_PARAGRAPH.RIGHT\n```", "```py\n>>> document.save('word-report-style.docx')\n```", "```py\n>>> from docx.shared import RGBColor\n>>> DARK_BLUE = RGBColor.from_string('1b3866')\n>>> run.font.color.rbg = DARK_BLUE\n```", "```py\n>>> echo \"python-docx==0.8.6\" >> requirements.txt\n>>> pip install -r requirements.txt\n```", "```py\n>>> import docx\n```", "```py\n>>> document = docx.Document()\n```", "```py\n>>> p = document.add_paragraph('This is the start of the paragraph')\n>>> run = p.add_run()\n>>> run.add_break(docx.text.run.WD_BREAK.LINE)\n>>> p.add_run('And now this in a different line')\n>>> p.add_run(\". Even if it's on the same paragraph.\")\n```", "```py\n>>> document.add_page_break()\n>>> document.add_paragraph('This appears in a new page')\n```", "```py\n>>> section = document.add_section( docx.enum.section.WD_SECTION.NEW_PAGE)\n>>> section.orientation = docx.enum.section.WD_ORIENT.LANDSCAPE\n>>> section.page_height, section.page_width = section.page_width, section.page_height\n>>> document.add_paragraph('This is part of a new landscape section')\n```", "```py\n>>> section = document.add_section( docx.enum.section.WD_SECTION.NEW_PAGE)\n>>> section.orientation = docx.enum.section.WD_ORIENT.PORTRAIT\n>>> section.page_height, section.page_width = section.page_width, section.page_height\n>>> document.add_paragraph('In this section, recover the portrait orientation')\n```", "```py\n>>> document.save('word-report-structure.docx')\n```", "```py\n>>> from docx.shared import Inches, Cm \n>>> section.page_height = Inches(10)\n>>> section.page_width = Cm(20)\n```", "```py\n>>> section.left_margin = Inches(1.5) >>> section.right_margin = Cm(2.81) >>> section.top_margin = Inches(1) >>> section.bottom_margin = Cm(2.54)\n```", "```py\n>>> document.add_section( docx.enum.section.WD_SECTION.ODD_PAGE)\n```", "```py\n$ echo \"python-docx==0.8.6\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n$ wget https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter04/images/photo-dublin-a1.jpg\n```", "```py\n>>> import docx\n```", "```py\n>>> document = docx.Document()\n```", "```py\n>>> document.add_paragraph('This is a document that includes a picture taken in Dublin')\n```", "```py\n>>> image = document.add_picture('photo-dublin-a1.jpg')\n```", "```py\n>>> from docx.shared import Cm\n>>> image.width = Cm(14)\n>>> image.height = Cm(10)\n```", "```py\n>>> paragraph = document.paragraphs[-1]\n>>> from docx.enum.text import WD_ALIGN_PARAGRAPH\n>>> paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER\n>>> paragraph.add_run().add_break()\n>>> paragraph.add_run('A picture of Dublin')\n```", "```py\n>>> document.add_paragraph('Keep adding text after the image')\n<docx.text.paragraph.Paragraph object at XXX>\n>>> document.save('report.docx')\n```", "```py\n>>> image = document.add_picture('photo-dublin-a1.jpg')\n>>> image.height / image.width\n0.75\n>>> RELATION = image.height / image.width\n>>> image.width = Cm(12)\n>>> image.height = Cm(12 * RELATION)\n```", "```py\n>>> image.width.cm\n12.0\n>>> image.width.mm\n120.0\n>>> image.width.inches\n4.724409448818897\n>>> image.width.pt\n340.15748031496065\n```", "```py\n>>> echo \"fpdf==1.7.2\" >> requirements.txt\n>>> pip install -r requirements.txt\n```", "```py\n>>> import fpdf\n```", "```py\n>>> document = fpdf.FPDF()\n```", "```py\n>>> document.set_font('Times', 'B', 14)\n>>> document.set_text_color(19, 83, 173)\n>>> document.add_page()\n```", "```py\n>>> document.cell(0, 5, 'PDF test document')\n>>> document.ln()\n```", "```py\n>>> document.set_font('Times', '', 12)\n>>> document.set_text_color(0)\n>>> document.multi_cell(0, 5, 'This is an example of a long paragraph. ' * 10)\n[]\n>>> document.ln()\n```", "```py\n>>> document.multi_cell(0, 5, 'Another long paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit.' * 20) \n```", "```py\n>>> document.output('report.pdf')\n```", "```py\n>>> BODY_TEXT_HEIGHT = 5\n>>> document.multi_cell(0, BODY_TEXT_HEIGHT, text)\n```", "```py\n>>> document.multi_cell(0, BODY_TEXT_HEIGHT, text, align='L')\n```", "```py\n>>> echo \"fpdf==1.7.2\" >> requirements.txt\n>>> pip install -r requirements.txt\n```", "```py\nimport fpdf\nfrom random import randint\n\nclass StructuredPDF(fpdf.FPDF):\n    LINE_HEIGHT = 5\n\n    def footer(self):\n        self.set_y(-15)\n        self.set_font('Times', 'I', 8)\n        page_number = 'Page {number}/{{nb}}'.format(number=self.page_no())\n        self.cell(0, self.LINE_HEIGHT, page_number, 0, 0, 'R')\n\n    def chapter(self, title, paragraphs):\n        self.add_page()\n        link = self.title_text(title)\n        page = self.page_no()\n        for paragraph in paragraphs:\n            self.multi_cell(0, self.LINE_HEIGHT, paragraph)\n            self.ln()\n\n        return link, page\n\n    def title_text(self, title):\n        self.set_font('Times', 'B', 15)\n        self.cell(0, self.LINE_HEIGHT, title)\n        self.set_font('Times', '', 12)\n        self.line(10, 17, 110, 17)\n        link = self.add_link()\n        self.set_link(link)\n        self.ln()\n        self.ln()\n\n        return link\n\n    def get_full_line(self, head, tail, fill):\n        ...\n```", "```py\n    def toc(self, links):\n        self.add_page()\n        self.title_text('Table of contents')\n        self.set_font('Times', 'I', 12)\n\n        for title, page, link in links:\n            line = self.get_full_line(title, page, '.')\n            self.cell(0, self.LINE_HEIGHT, line, link=link)\n            self.ln()\n\nLOREM_IPSUM = ...\n\ndef main():\n    document = StructuredPDF()\n    document.alias_nb_pages()\n    links = []\n    num_chapters = randint(5, 40)\n    for index in range(1, num_chapters):\n        chapter_title = 'Chapter {}'.format(index)\n        num_paragraphs = randint(10, 15)\n        link, page = document.chapter(chapter_title,\n                                      [LOREM_IPSUM] * num_paragraphs)\n        links.append((chapter_title, page, link))\n\n    document.toc(links)\n    document.output('report.pdf')\n```", "```py\n$ python3 structuring_pdf.py\n```", "```py\n link = self.add_link()\n self.set_link(link)\n```", "```py\n$ echo \"PyPDF2==1.26.0\" >> requirements.txt\n$ echo \"pdf2image==0.1.14\" >> requirements.txt\n$ echo \"Pillow==5.1.0\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\n$ python watermarking_pdf.py report.pdf -u automate_user -o report2.pdf\n```", "```py\n>>> import PyPDF2\n>>> output_pdf = PyPDF2.PdfFileWriter()\n```", "```py\n>>> file1 = open('report.pdf', 'rb')\n>>> pdf1 = PyPDF2.PdfFileReader(file1)\n```", "```py\n>>> output_pdf.appendPagesFromReader(pdf1)\n```", "```py\n>>> file2 = open('report2.pdf', 'rb')\n>>> pdf2 = PyPDF2.PdfFileReader(file2)\n>>> output_pdf.appendPagesFromReader(pdf2)\n```", "```py\n>>> with open('result.pdf', 'wb') as out_file:\n...     output_pdf.write(out_file)\n```", "```py\n>>> file1.close()\n>>> file2.close()\n```", "```py\n>>> page = pdf1.getPage(3)\n>>> output_pdf.addPage(page)\n```", "```py\n$ echo \"pdf2image==0.1.14\" >> requirements.txt\n$ echo \"Pillow==5.1.0\" >> requirements.txt\n$ echo \"PyPDF2==1.26.0\" >> requirements.txt\n$ pip install -r requirements.txt\n```", "```py\ndef encrypt(out_pdf, password):\n    output_pdf = PyPDF2.PdfFileWriter()\n\n    in_file = open(out_pdf, \"rb\")\n    input_pdf = PyPDF2.PdfFileReader(in_file)\n    output_pdf.appendPagesFromReader(input_pdf)\n    output_pdf.encrypt(password)\n\n    # Intermediate file\n    with open(INTERMEDIATE_ENCRYPT_FILE, \"wb\") as out_file:\n        output_pdf.write(out_file)\n\n    in_file.close()\n\n    # Rename the intermediate file\n    os.rename(INTERMEDIATE_ENCRYPT_FILE, out_pdf)\n\ndef create_watermark(watermarked_by):\n    mask = Image.new('L', WATERMARK_SIZE, 0)\n    draw = ImageDraw.Draw(mask)\n    font = ImageFont.load_default()\n    text = 'WATERMARKED BY {}\\n{}'.format(watermarked_by, datetime.now())\n    draw.multiline_text((0, 100), text, 55, font=font)\n\n    watermark = Image.new('RGB', WATERMARK_SIZE)\n    watermark.putalpha(mask)\n    watermark = watermark.resize((1950, 1950))\n    watermark = watermark.rotate(45)\n    # Crop to only the watermark\n    bbox = watermark.getbbox()\n    watermark = watermark.crop(bbox)\n\n    return watermark\n\ndef apply_watermark(watermark, in_pdf, out_pdf):\n    # Transform from PDF to images\n    images = convert_from_path(in_pdf)\n    ...\n    # Paste the watermark in each page\n    for image in images:\n        image.paste(watermark, position, watermark)\n\n    # Save the resulting PDF\n    images[0].save(out_pdf, save_all=True, append_images=images[1:])\n```", "```py\n$ python watermarking_pdf.py report.pdf -u automate_user -o out.pdf\nCreating a watermark\nWatermarking the document\n$\n```", "```py\n$ python watermarking_pdf.py report.pdf -u automate_user -o out.pdf -p secretpassword\nCreating a watermark\nWatermarking the document\nEncrypting the document\n$\n```", "```py\nfont = ImageFont.truetype('my_font.ttf', SIZE)\n```"]