- en: Automating AWS with Boto3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Boto3自动化AWS
- en: In previous chapters, we explored how to automate the OpenStack and VMware private
    clouds using Python. We will continue on our cloud automation journey by automating
    one of the most popular public clouds: **Amazon Web Services** (**AWS**). In this
    chapter, we will explore how to create Amazon **Elastic Compute Cloud** (**EC2**)
    and Amazon **Simple Storage Systems** (**S3**) using Python script.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们探讨了如何使用Python自动化OpenStack和VMware私有云。我们将继续通过自动化最受欢迎的公共云之一——亚马逊网络服务（AWS）来继续我们的云自动化之旅。在本章中，我们将探讨如何使用Python脚本创建Amazon
    Elastic Compute Cloud（EC2）和Amazon Simple Storage Systems（S3）。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: AWS Python modules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Python模块
- en: Managing AWS instances
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理AWS实例
- en: Automating AWS S3 services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化AWS S3服务
- en: AWS Python modules
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Python模块
- en: Amazon EC2 is a scalable computing system that is used to provide virtualization
    layers for hosting different virtual machines (such as the nova-compute project
    in the OpenStack ecosystem). It can communicate with other services, such as S3,
    Route 53, and AMI, in order to instantiate instances. Basically, you can think
    of EC2 as an abstraction layer above other hypervisors that are set over the virtual
    infrastructure manager (such as KVM and VMware). EC2 will receive the incoming
    API calls then will translate them into suitable calls for each hypervisor.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon EC2是一个可扩展的计算系统，用于为托管不同虚拟机（例如OpenStack生态系统中的nova-compute项目）提供虚拟化层。它可以与其他服务（如S3、Route
    53和AMI）通信，以实例化实例。基本上，您可以将EC2视为其他在虚拟基础设施管理器上设置的虚拟化程序（如KVM和VMware）之上的抽象层。EC2将接收传入的API调用，然后将其转换为适合每个虚拟化程序的调用。
- en: The **Amazon Machine Image **(**AMI**) is a packaged image system that contains
    the operating system and packages needed to start a virtual machine (like Glance
    in OpenStack). You can create your own AMI from existing virtual machines and
    use it when you need to replicate those machines on other infrastructures, or
    you can simply choose from publicly available AMIs on the internet or on the Amazon
    Marketplace. We will need to get the AMI ID from the Amazon web console and add
    it to our Python script.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Machine Image（AMI）是一个打包的镜像系统，其中包含了启动虚拟机所需的操作系统和软件包（类似于OpenStack中的Glance）。您可以从现有的虚拟机创建自己的AMI，并在需要在其他基础设施上复制这些机器时使用它，或者您可以简单地从互联网或亚马逊市场上选择公开可用的AMI。我们需要从亚马逊网络控制台获取AMI
    ID，并将其添加到我们的Python脚本中。
- en: AWS designed an SDK called **Boto3** ([https://github.com/boto/boto3](https://github.com/boto/boto3))
    that allows Python developers to have scripts and software that interact and consume
    the APIs of different services, like Amazon EC2 and Amazon S3\. The library was
    written to provide native support for Python 2.6.5, 2.7+, and 3.3.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: AWS设计了一个名为Boto3的SDK（[https://github.com/boto/boto3](https://github.com/boto/boto3)），允许Python开发人员编写与不同服务的API进行交互和消费的脚本和软件，如Amazon
    EC2和Amazon S3。该库是为提供对Python 2.6.5、2.7+和3.3的本地支持而编写的。
- en: 'The major Boto3 features are described in the official documentation at [https://boto3.readthedocs.io/en/latest/guide/new.html](https://boto3.readthedocs.io/en/latest/guide/new.html),
    and below are some important features:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Boto3的主要功能在官方文档中有描述，网址为[https://boto3.readthedocs.io/en/latest/guide/new.html](https://boto3.readthedocs.io/en/latest/guide/new.html)，以下是一些重要功能：
- en: '**Resources**: A high-level, object-oriented interface.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源：高级、面向对象的接口。
- en: '**Collections**: A tool to iterate and manipulate groups of resources.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合：用于迭代和操作资源组的工具。
- en: '**Clients**: A low-level service connection.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端：低级服务连接。
- en: '**Paginators**: Automatic paging of responses.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分页器：自动分页响应。
- en: '**Waiters**: A way to suspend execution until a certain state has been reached
    or a failure occurs. Each AWS resource has a waiter name that could be accessed
    using `<resource_name>.waiter_names`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待者：一种暂停执行直到达到某种状态或发生故障的方式。每个AWS资源都有一个等待者名称，可以使用`<resource_name>.waiter_names`访问。
- en: Boto3 installation
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Boto3安装
- en: 'A few things are needed before connecting to AWS:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接到AWS之前需要一些东西：
- en: First, you will need an Amazon admin account that has privileges to create,
    modify, and delete from the infrastructure.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要一个具有创建、修改和删除基础设施权限的亚马逊管理员帐户。
- en: Secondly, install the `boto3` Python modules that are used to interact with
    AWS. You can create a user dedicated to sending API requests by going to the AWS
    **Identity and Access Management** (**IAM**) console and adding a new user. You
    should see the Programmatic access option, available under the Access Type section.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '其次，安装用于与AWS交互的`boto3` Python模块。您可以通过转到AWS身份和访问管理（IAM）控制台并添加新用户来创建一个专用于发送API请求的用户。您应该在“访问类型”部分下看到“编程访问”选项。 '
- en: Now, you will need to assign a policy that allows full access across the Amazon
    services, such as EC2 and S3\. Do that by clicking on Attach existing policy to
    user and attaching AmazonEC2FullAccess and AmazonS3FullAccess policies to the
    username.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要分配一个允许在亚马逊服务中具有完全访问权限的策略，例如EC2和S3。通过单击“附加现有策略到用户”并将AmazonEC2FullAccess和AmazonS3FullAccess策略附加到用户名来实现。
- en: At the end, click on Create user to add the user with the configured options
    and policies.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击“创建用户”以添加具有配置选项和策略的用户。
- en: You can sign up for a free tier account on AWS, which will give you access to
    many services offered by Amazon for up to 12 months. Free access can be acquired
    at [https://aws.amazon.com/free/](https://aws.amazon.com/free/).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在AWS上注册免费的基础套餐帐户，这将使您在12个月内获得亚马逊提供的许多服务。免费访问可以在[https://aws.amazon.com/free/](https://aws.amazon.com/free/)上获得。
- en: When using Python script to manage AWS, the access key ID is used to send API
    requests and get the responses back from the API server. We won't use the username
    or the password for sending requests, as they're easily captured by others. This
    information is obtained by downloading the text file that appears after creating
    the username. It's important to keep this file in a safe place and provide a proper
    Linux permission for it, for opening and reading file content.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Python脚本管理AWS时，访问密钥ID用于发送API请求并从API服务器获取响应。我们不会使用用户名或密码发送请求，因为它们很容易被他人捕获。此信息是通过下载创建用户名后出现的文本文件获得的。重要的是将此文件放在安全的位置并为其提供适当的Linux权限，以打开和读取文件内容。
- en: 'Another method is to create a `.aws` directory under your home user directory
    and place two files under it: `credentials` and `config`. The first file will
    have both the access key ID and the secret access ID.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是在您的家目录下创建一个`.aws`目录，并在其中放置两个文件：`credentials`和`config`。第一个文件将同时包含访问密钥ID和秘密访问ID。
- en: '`~/.aws/credentials` appears as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`~/.aws/credentials`如下所示：'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The second file will hold user-specific configurations, such as the preferred
    data center (zone) that will host the created virtual machines. (This is like
    the availability zone option in OpenStack.) In the following example, we are specifying
    that we want to host our machines in the `us-west-2` data center.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个文件将保存用户特定的配置，例如首选数据中心（区域），用于托管创建的虚拟机。在下面的示例中，我们指定要在`us-west-2`数据中心托管我们的机器。
- en: 'The config file, `~/.aws/config`, looks like the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件`~/.aws/config`如下所示：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, installing `boto3` requires using the usual `pip` command to get the latest
    `boto3` version:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装`boto3`需要使用通常的`pip`命令来获取最新的`boto3`版本：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../images/00203.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00203.jpeg)'
- en: 'To verify that the module has successfully installed, import `boto3` in the
    Python console, and you shouldn''t see any import errors reported:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证模块是否成功安装，请在Python控制台中导入`boto3`，您不应该看到任何导入错误报告：
- en: '![](../images/00204.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00204.jpeg)'
- en: Managing AWS instances
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理AWS实例
- en: 'Now, we''re ready to create our first virtual machine using `boto3`. As we
    have discussed, we need the AMI that we will instantiate an instance from. Think
    of an AMI as a Python class; creating an instance will create an object from it.
    We will use the Amazon Linux AMI, which is a special Linux operating system maintained
    by Amazon and used for deploying Linux machines without any extra charges. You
    can find a full AMI ID, per region, at [https://aws.amazon.com/amazon-linux-ami/](https://aws.amazon.com/amazon-linux-ami/):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备使用`boto3`创建我们的第一个虚拟机。正如我们所讨论的，我们需要AMI，我们将从中实例化一个实例。将AMI视为Python类；创建一个实例将从中创建一个对象。我们将使用Amazon
    Linux AMI，这是由Amazon维护的特殊Linux操作系统，用于部署Linux机器而不收取任何额外费用。您可以在每个区域找到完整的AMI ID，网址为[https://aws.amazon.com/amazon-linux-ami/](https://aws.amazon.com/amazon-linux-ami/)：
- en: '![](../images/00205.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00205.jpeg)'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding example, the following applies:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，以下内容适用：
- en: We imported the `boto3` module that we installed previously.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入了之前安装的`boto3`模块。
- en: Then, we specified a resource type that we wanted to interact with, which is
    EC2, and assigned that to the `ec2` object.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们指定了要与之交互的资源类型，即EC2，并将其分配给`ec2`对象。
- en: Now, we are eligible to use the `create_instance()` method and provide it with
    instance parameters, such as `ImageID` and `InstanceType` (like flavor in OpenStack,
    which determines the instance specs in terms of computing and memory), and where
    we should create this instance in the `AvailabilityZone`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有资格使用`create_instance()`方法，并为其提供实例参数，例如`ImageID`和`InstanceType`（类似于OpenStack中的flavor，它确定了计算和内存方面的实例规格），以及我们应该在`AvailabilityZone`中创建此实例。
- en: '`MinCount` and `MaxCount` determine how far EC2 can go when scaling our instances.
    For example, when a high CPU has occurred on one of the instances, EC2 will deploy
    another instance automatically, to share the loads and keep the service in a healthy
    state.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MinCount`和`MaxCount`确定EC2在扩展我们的实例时可以走多远。例如，当一个实例发生高CPU时，EC2将自动部署另一个实例，以分享负载并保持服务处于健康状态。'
- en: Finally, we printed the instance ID to be used in the next script.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们打印了要在下一个脚本中使用的实例ID。
- en: 'The output is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![](../images/00206.jpeg)You can check all valid Amazon EC2 instance types
    at the following link; please read them carefully, in order to not be overcharged
    from choosing the wrong type: [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00206.jpeg)您可以在以下链接中检查所有有效的Amazon EC2实例类型；请仔细阅读，以免因选择错误的类型而被过度收费：[https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/)'
- en: Instance termination
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例终止
- en: 'The printed ID is used in CRUD operations to manage or terminate the instance
    later. For example, we can terminate the instance by using the `terminate()` method
    also provided to the `ec2` resource created earlier:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 打印的ID用于CRUD操作，以便稍后管理或终止实例。例如，我们可以使用之前创建的`ec2`资源提供的`terminate()`方法来终止实例：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that we hardcoded  `instance_id` in the preceding code (which is not
    always the case when you need to create a dynamic Python script that can be used
    in different environments). We can use other input methods that are available
    in Python, such as `raw_input()`, to take the input from the user or query the
    available instances in our accounts and make Python prompt us on which instances
    need to be terminated. Another use case is to create a Python script that checks
    the last login time or the resource consumption in our instance; if they exceed
    a specific value, we will terminate the instance. This is useful in a lab environment,
    where you don't want to be charged for consuming additional resources with a malicious
    or a poorly designed software.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的代码中我们硬编码了`instance_id`（当您需要创建一个可以在不同环境中使用的动态Python脚本时，这并不总是适用）。我们可以使用Python中可用的其他输入方法，例如`raw_input()`，从用户那里获取输入或查询我们帐户中可用的实例，并让Python提示我们需要终止哪些实例。另一个用例是创建一个Python脚本，检查我们实例的最后登录时间或资源消耗；如果它们超过特定值，我们将终止该实例。这在实验室环境中非常有用，您不希望因为恶意或设计不良的软件而被收取额外资源的费用。
- en: Automating AWS S3 services
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化AWS S3服务
- en: The AWS **Simple Storage Systems** (**S3**) provides a safe and highly scalable
    object storage service. You can use this service to store  any amount of data
    and restore it from anywhere. The system provides you with a versioning option,
    so you can roll back to any previous version of the files. Additionally, it provides
    the REST web services API, so you can access it from external applications.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: AWS **简单存储系统**（**S3**）提供了安全和高度可扩展的对象存储服务。您可以使用此服务存储任意数量的数据，并从任何地方恢复它。系统为您提供了版本控制选项，因此您可以回滚到文件的任何先前版本。此外，它提供了REST
    Web服务API，因此您可以从外部应用程序访问它。
- en: When data comes to S3, S3 will create an `object` for it, and these objects
    will be stored inside `Buckets` (think of them like folders). You can provide
    a sophisticated user permission for each created bucket, and can also control
    its visibility (public, shared, or private). The bucket access can be either a
    policy or an **Access Control List** (**ACL**).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据传入S3时，S3将为其创建一个`对象`，并将这些对象存储在`存储桶`中（将它们视为文件夹）。您可以为每个创建的存储桶提供复杂的用户权限，并且还可以控制其可见性（公共、共享或私有）。存储桶访问可以是策略或**访问控制列表**（**ACL**）。
- en: The bucket is also stored with metadata that describes the object in key-value
    pairs, which you can create and set by HTTP `POST` methods. Metadata can include
    the object's name, size, and date, or any other customized key-values that you
    want. The user account has a limit of 100 buckets, but there's no limit on the
    size of the object hosted inside each bucket.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 存储桶还存储有描述键值对中对象的元数据，您可以通过HTTP `POST`方法创建和设置。元数据可以包括对象的名称、大小和日期，或者您想要的任何其他自定义键值对。用户帐户最多可以拥有100个存储桶，但每个存储桶内托管的对象大小没有限制。
- en: Creating buckets
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建存储桶
- en: 'The first logical thing to do, when interacting with an AWS S3 service, is
    create a bucket that can be used to store files. In that case, we will provide
    the `S3` to the `boto3.resource()` . That will tell the `boto3` to start the initialization
    process and will load required commands to interact with the S3 API system:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与AWS S3服务交互时，首先要做的事情是创建一个用于存储文件的存储桶。在这种情况下，我们将`S3`提供给`boto3.resource()`。这将告诉`boto3`开始初始化过程，并加载与S3
    API系统交互所需的命令：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding example, the following applies:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，以下内容适用：
- en: We imported the `boto3` module that we installed previously.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入了之前安装的`boto3`模块。
- en: Then, we specified a resource type that we wanted to interact with, which is
    `s3`, and assigned that to the `s3_resource` object.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们指定了我们想要与之交互的资源类型，即`s3`，并将其分配给`s3_resource`对象。
- en: Now, we can use the `create_bucket()` method inside the resource and provide
    it with the required parameter to create buckets, such as `Bucket`, where we can
    specify its name. Remember, the bucket name must be unique and cannot have been
    used previously. The second parameter is the `CreateBucketConfiguration` dictionary,
    where we set the data center location for the created bucket.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在资源内部使用`create_bucket()`方法，并为其提供所需的参数来创建存储桶，例如`Bucket`，我们可以指定其名称。请记住，存储桶名称必须是唯一的，且之前不能已经使用过。第二个参数是`CreateBucketConfiguration`字典，我们在其中设置了创建存储桶的数据中心位置。
- en: Uploading a file to a bucket
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文件上传到存储桶
- en: 'Now, we need to make use of the created bucket and upload a file to it. Remember,
    the file representation inside the bucket is an object. So, `boto3` provides some
    methods that contain the object as a part of it. We will start by using `put_object()`.
    This method will upload a file to the created bucket and store it as an object:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要利用创建的存储桶并将文件上传到其中。请记住，存储桶中的文件表示为对象。因此，`boto3`提供了一些包含对象作为其一部分的方法。我们将从使用`put_object()`开始。此方法将文件上传到创建的存储桶并将其存储为对象：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding example, the following applies:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，以下内容适用：
- en: We imported the `boto3` module that we installed previously.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入了之前安装的`boto3`模块。
- en: Then, we specified a resource type that we wanted to interact with, which is
    `s3`, and assigned that to the `s3_resource` object.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们指定了我们想要与之交互的资源类型，即`s3`，并将其分配给`s3_resource`对象。
- en: We accessed `my_first_bucket` through the `Bucket()` method and assigned the
    returned value to the bucket variable.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过`Bucket()`方法访问了`my_first_bucket`并将返回的值分配给了存储桶变量。
- en: Then, we opened a file using the `with` clause and named it `uploaded_data`.
    Notice that we opened the file as a binary data, using the `rb` flag.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`with`子句打开了一个文件，并将其命名为`uploaded_data`。请注意，我们以二进制数据的形式打开了文件，使用了`rb`标志。
- en: Finally, we uploaded the binary data to our bucket using the `put_object()`
    method provided within the bucket space.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用存储桶空间中提供的`put_object()`方法将二进制数据上传到我们的存储桶。
- en: Deleting a bucket
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除存储桶
- en: 'To complete the CRUD operation for the bucket, the last thing we need to do
    is remove the bucket. This happens through calling the `delete()` method on our
    bucket variable, given that it already exists and we are referencing it by name,
    in the same manner that we created it and uploaded data to it. However,  `delete()`
    may fail when the bucket is not empty. So, we will use the `bucket_objects.all().delete()`
    method to get all of the objects inside the bucket, then apply the `delete()`
    operation on them, and finally, delete the bucket:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成对存储桶的CRUD操作，我们需要做的最后一件事是删除存储桶。这是通过在我们的存储桶变量上调用`delete()`方法来实现的，前提是它已经存在，并且我们通过名称引用它，就像我们创建它并向其中上传数据一样。然而，当存储桶不为空时，`delete()`可能会失败。因此，我们将使用`bucket_objects.all().delete()`方法获取存储桶内的所有对象，然后对它们应用`delete()`操作，最后删除存储桶：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to install the Amazon **Elastic Compute Cloud**
    (**EC2**), and we learned about Boto3 and its installation. We also learned how
    to automate AWS S3 services.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装亚马逊弹性计算云（EC2），以及学习了Boto3及其安装。我们还学习了如何自动化AWS S3服务。
- en: In the next chapter, we will learn about the SCAPY framework, which is a powerful
    Python tool used to build and craft packets and send them on the wire.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习SCAPY框架，这是一个强大的Python工具，用于构建和制作数据包并将其发送到网络上。
