- en: Basic Switching
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本开关
- en: It must have been an epic journey so far! Recollect the time when you would
    have started reading this book, did you ever imagine that things could be this
    simple? It is worth noting that everything starts off very simple and, slowly
    and steadily, with the need for more sophisticated systems, the complexity of
    the technology also increases. Go back to the time when personal computing was
    not really a thing. It was only used in business and companies such as IBM were
    only servicing business clients. At that time, people who wanted a personal computer
    had only one option. They needed to build it from scratch, and to be honest, a
    lot of people used to do that. It really wasn't that hard either at least from
    my perspective. But, in contrast to that time, think about what they have become
    right now. Ever thought of building a computer at home? By building, I mean designing
    everything and not just assembly of the CPU. It is not very easy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一定是一段史诗般的旅程！回想一下你开始阅读这本书的时候，你是否曾想象过事情会变得如此简单？值得注意的是，一切都是从非常简单的开始，然后慢慢地，随着对更复杂系统的需求，技术的复杂性也增加了。回到个人计算并不是真正的事情的时候。它只在商业中使用，像IBM这样的公司只为商业客户提供服务。那时，想要个人计算机的人只有一个选择。他们需要从头开始建造，老实说，很多人过去都这样做。至少从我的角度来看，这真的并不难。但是，与那个时代相比，想想它们现在变成了什么样子。曾经想过在家里建造一台计算机吗？我说的是设计一切，而不仅仅是组装CPU。这并不容易。
- en: What I am trying to tell you here is that there was a time when computers were
    exotic; they were not very common, and they had very limited functionalities.
    However, with time and the brains of people, such as Steve Jobs, Bill Gates, and
    Hewlett and Packard, computers became more user-friendly, more easily available,
    and a desirable commodity. Think of the same thing with robots. They are expensive;
    for most people, there is not much they can do with them and also they are rare
    in the public space. But, as you have learned, it is not very hard to build a
    robot for our personal use, and with some tweaking here and there and with inventive
    minds such as yours, things can be taken in an altogether different direction.
    You could be the next Steve Jobs or Bill Gates. All we need is zeal, passion,
    and out-of-the-box thinking. You may be ridiculed for your vision. But do remember
    every inventor has been called mad at some point in time. So the next time someone
    calls you mad, you can be very sure that you are progressing!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里想告诉你的是，曾经有一段时间，计算机是稀有的；它们并不常见，功能也非常有限。然而，随着时间的推移和像史蒂夫·乔布斯、比尔·盖茨、休利特和帕卡德这样的人的智慧，计算机变得更加用户友好，更容易获得，并成为一种令人向往的商品。想象一下同样的情况发生在机器人身上。它们很昂贵；对于大多数人来说，它们并没有太多用处，而且在公共场所也很少见。但是，正如你所学到的，为我们个人使用构建机器人并不是很难，再加上一些调整和你这样有创造力的头脑，事情可以朝着完全不同的方向发展。你可能会因为你的愿景而受到嘲笑。但请记住，每个发明家在某个时候都被称为疯子。所以下次有人称你为疯子时，你可以非常确定你正在进步！
- en: Well, I'm quite sure that, if you are a robotic enthusiast, then you must have
    seen the movie *Iron Man*. If you haven't seen it yet, then take a break from
    reading this book and go ahead and open Netflix and see that movie.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我非常确定，如果你是一个机器人爱好者，那么你一定看过电影《钢铁侠》。如果你还没有看过，那就停下来阅读这本书，去打开Netflix看看那部电影。
- en: 'Once I saw that movie, there were two main things that I wanted to build: one,
    the suit of Iron Man and other his personal assistant Jarvis, who takes care of
    all his needs. Though suits seem to be something that I may have to work on for
    a while, but, by that time, you can go ahead and build the personal assistant
    for yourself.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有一次我看了那部电影，我想要制作两件东西：一件是钢铁侠的战衣，另一件是他的个人助手贾维斯，他照顾他的一切需求。虽然战衣似乎是我可能需要一段时间来研究的东西，但到那时，你可以继续为自己建立个人助手。
- en: Imagine your home doing things for itself. How cool would it be? It knows what
    you like, what time you wake up, when you come back home, and, based on that,
    it automatically does things for you. Best of all, it would not be something you
    buy off the shelf, rather you would be making it with your own hands.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你的家自己做事情。那会多酷啊？它知道你喜欢什么，你什么时候醒来，你什么时候回家，基于此，它会自动为你做事情。最重要的是，它不会是你从货架上购买的东西，而是你亲手制作的。
- en: Before you do any of this, I must tell you that you will be dealing with high
    voltages and considerable currents. Electricity is no joke, and you must take
    care at all times and wear all the safety equipment. If you are not sure of it,
    then it would be a good idea to get an electrician to help you. Before you touch
    or open any of the electrical boards, make sure that you are wearing non-conductive
    shoes; also inspect whether the tools such as screwdrivers, pliers, nose pliers,
    cutters, and other tools are well insulated and in good condition. It is a good
    idea to wear gloves for added safety. If you are under 18, then you must have
    an adult with you all times to help you.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在你做任何这些之前，我必须告诉你，你将处理高电压和相当大的电流。电力不是闹着玩的，你必须随时小心并佩戴所有安全设备。如果你不确定，那么最好找一个电工来帮助你。在触摸或打开任何电气板之前，确保你穿着不导电的鞋子；还要检查螺丝刀、钳子、鼻钳、剪刀和其他工具是否绝缘良好且处于良好状态。戴手套是个好主意，增加安全性。如果你未满18岁，那么你必须有一个成年人随时帮助你。
- en: Now that that's said, let's get started and see what we have got here.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 既然说到这里，让我们开始看看我们有什么。
- en: Making Jarvis wake you up
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让贾维斯叫醒你
- en: Now, this one is very interesting, as you all know our human body is programmed
    in a certain way. Hence, we react to different stimuli in a very known way. Like
    when it gets dark, our brain produces hormones that trigger sleep. Once the sunlight
    falls on our eyes, we tend to wake up. Well, at least this should be the case!
    In recent times, our lifestyle has changed enormously, which has started to defy
    this cycle. That's why, we are seeing more and more cases of insomnia. Waking
    up by an alarm is certainly not natural. Hence, you are never happy listening
    to an alarm in the morning, even if it has your favorite song as its tone. Our
    sleep cycle is supposed to be synchronized with the sunlight, but nowadays hardly
    anyone wakes up by this method. So, in this chapter, let's first make a smart
    alarm that will replicate the natural way we wake up.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个非常有趣，正如大家所知，我们的人体是按照一定的方式编程的。因此，我们对不同的刺激作出非常熟悉的反应。比如当天黑了，我们的大脑会产生触发睡眠的激素。一旦阳光照到我们的眼睛，我们就会醒来。好吧，至少应该是这样！最近，我们的生活方式发生了巨大变化，开始违背这种周期。这就是为什么我们看到越来越多的失眠病例。被闹钟吵醒绝对不是自然的。因此，即使它的铃声是您最喜欢的歌曲，您早上听到闹钟也不会开心。我们的睡眠周期应该与阳光同步，但现在几乎没有人会通过这种方式醒来。因此，在本章中，让我们首先制作一个智能闹钟，模拟我们醒来的自然方式。
- en: Working with relay and PIR sensor
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用继电器和PIR传感器
- en: 'As we are dealing with high voltage and higher currents, we would be using
    a relay. To do this, connect the wires as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在处理高电压和更高电流，我们将使用继电器。为此，请按以下方式连接电线：
- en: '![](Images/7f4fd337-c5a2-4a66-93c5-8e0155e8e213.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7f4fd337-c5a2-4a66-93c5-8e0155e8e213.png)'
- en: 'Once you are done connecting it, upload the following code and let''s see what
    happens:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 连接完成后，上传以下代码，让我们看看会发生什么：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: OK, then it is a fairly simple code with not much explanation needed. We have
    done a very similar code before as well. Do you remember when? It was in the first
    few chapters when we were making a gardening robot where we had to fetch water
    to the plants at a certain time. All it is doing at this time is to check the
    time and whether the time is `06` hours and the minute is less than `20`. That
    is, the light would be switched on between 07:00 hours to 07:19 hours. Thereafter,
    it would switch off.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是一个非常简单的代码，不需要太多解释。我们以前也做过一个非常类似的代码。你还记得吗？那是在最初的几章，当我们正在制作一个浇水机器人时，我们必须在特定时间给植物浇水。现在它所做的就是检查时间，以及时间是否为“06”小时，分钟是否小于“20”。也就是说，灯会在07:00到07:19之间打开。之后，它会关闭。
- en: Making the alarm irritating
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作令人讨厌的闹钟
- en: But there is a problem. The problem is that the lights will be switched on and,
    no matter whether you get up, the light would automatically switch itself off
    within 20 minutes. That is a bit of problem because not every time will you wake
    up in just 20 minutes. So, in that case, what should we do? The first thing we
    need to do is to detect whether you have woken up. This is very simple and not
    much needs to be told here. If you wake up in the morning, it is very certain
    that you will move out of the bed. Once you do, we can detect the motion that
    can tell our automated system whether you have really woken up.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一个问题。问题是灯会打开，无论您是否起床，灯都会在20分钟内自动关闭。这有点问题，因为您并不是每次都会在20分钟内醒来。那么，在这种情况下，我们应该怎么办呢？我们需要做的第一件事是检测您是否醒来了。这非常简单，这里不需要太多解释。如果您早上醒来，非常肯定您会离开床。一旦您离开床，我们就可以检测到运动，告诉我们的自动系统您是否真的醒来了。
- en: Now, what we can do here is something very simple. We can detect your motion,
    and based on that detection, we can be decisive on whether you have really woken
    up. This doesn't seem much of a task. All we need to do is to add a motion detection
    sensor. For this purpose, we can use a PIR sensor, which can tell us whether the
    motion has been detected. So, let's go ahead, add another layer of sensor on top
    of our system, and see what happens.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在这里做一些非常简单的事情。我们可以检测您的动作，并根据检测结果决定您是否真的醒来了。这似乎不是什么大任务。我们只需要添加一个运动检测传感器。为此，我们可以使用PIR传感器，它可以告诉我们是否检测到了运动。所以，让我们继续，在我们的系统顶部添加另一层传感器，看看会发生什么。
- en: 'So, first, connect the circuit as follows. While mounting the PIR sensor, do
    make sure that it is facing the bed and detecting any motion on and around it.
    Once the PIR is set up, wire the sensors as shown in the following diagram and
    see what happens:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按以下方式连接电路。在安装PIR传感器时，请确保它面向床，并检测其周围的任何运动。一旦PIR设置好，将传感器连接如下图所示，并看看会发生什么：
- en: '![](Images/e0c96c13-a539-42bc-bf6c-ae78bdad8e4c.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e0c96c13-a539-42bc-bf6c-ae78bdad8e4c.png)'
- en: 'Once done, then go ahead and write the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，继续编写以下代码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'OK, let''s see what we have done. The code is extremely simple, but we had
    a small twist in it, that is,  `Irritation_Flag`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们看看我们做了什么。代码非常简单，但我们在其中有一个小变化，那就是“烦躁标志”：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now this variable works something like a snooze button. As we know, when we
    wake up sometimes, or in fact, most of the time, we again go back to sleep only
    to wake up much later to realize that we are late. To prevent this, we have this
    `Irritation_flag`, and what this basically would be used for is to detect the
    number of times you have performed the action to stop the alarm. How it would
    be used we will see later:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个变量的作用有点像贪睡按钮。我们知道，当我们醒来时，有时，或者事实上，大多数时候，我们会再次回去睡觉，直到很久以后才意识到我们迟到了。为了防止这种情况，我们有这个“烦躁标志”，它的基本作用是检测您停止闹钟的次数。我们稍后会看到它的使用方法：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this line, we are simply comparing time values by hours and minutes. If
    the hours is `07` and minutes are fewer than or equal to `15`, then the lights
    would be switched off. There is also a condition that says `Irritation_Flag >
    0` as we have already declared in the beginning that the value of `Irritation_flag
    = 3`; hence, initially this condition will always be true. The last condition
    is `GPIO.input(PIR) == 0`; which means that the condition will only be satisfied
    when the PIR has not detected any motion. In very simple words, the alarm will
    go off every time between 07:00 and 07:15 if the PIR does not detect any motion:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们只是比较小时和分钟的时间值。如果小时是`07`，分钟少于或等于`15`，那么灯将关闭。还有一个条件是`Irritation_Flag >
    0`，因为我们在开始时已经声明了`Irritation_flag = 3`；因此，最初这个条件总是为真。最后一个条件是`GPIO.input(PIR) ==
    0`；这意味着只有当PIR没有检测到任何运动时，条件才会满足。简单地说，如果PIR没有检测到任何运动，那么闹钟将在每天07:00和07:15之间响起：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this part of the program, the condition will only be true if the hours or `H`
    is equal to `7` and when the PIR is detecting some motion. Hence, every time when
    the time is between 07:00 and 07:59 and whenever the motion is detected, the condition
    will be true. Once true, the program will first switch off the light using the
    line `GPIO.output*LIGHT,GPIO.LOW`. Once it is turned off, it waits for `10` seconds
    using `time.sleep(10)`. Once the time is over, it will implement the following
    operation: `Irritation_Flag - Irritation_Flag - 1`. Now what it does is that it
    decrements the value of `Irritation_Flag` by `1` every time it detects a motion.
    So the first time a motion happens, the value of `Irritation_Flag` would be `2`;
    thereafter, it would be `1`, and finally, it would be `0`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的这一部分，只有当小时或`H`等于`7`并且PIR检测到一些运动时，条件才会为真。因此，每当时间在07:00和07:59之间，以及每当检测到运动时，条件就会为真。一旦为真，程序将首先使用`GPIO.output*LIGHT,GPIO.LOW`关闭灯。一旦关闭，它会使用`time.sleep(10)`等待`10`秒。时间到后，它将执行以下操作：`Irritation_Flag
    - Irritation_Flag - 1`。现在它所做的是每次检测到运动时将`Irritation_Flag`的值减少`1`。因此，第一次发生运动时，`Irritation_Flag`的值将为`2`；之后将为`1`，最后将为`0`。
- en: 'If you look at the previous part of the code, you will be able to make out
    that the light would be switched on if the value of `Irritation_Flag` was greater
    than `0`. So if you want to turn off the light, you would have to move at least
    three times. Why three times? Because then the code `Irritation_Flag = Irritation
    - 1` would be executed three times so as to make the value get down to `0`, which
    obviously makes the condition `GPIO.input(PIR) > 0` false:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下代码的前一部分，你会发现只有当`Irritation_Flag`的值大于`0`时，灯才会打开。因此，如果你想关闭灯，你至少要移动三次。为什么是三次？因为代码`Irritation_Flag
    = Irritation - 1`将被执行三次，以使值减少到`0`，这显然会使条件`GPIO.input(PIR) > 0`为假：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s say even after of all this, you still do not wake up. Then what
    should happen? We have something special for you here. Now, instead of an `if`
    condition, we have a `for` loop. What this will check for is that the time should
    be `07` hours, and minutes should be greater than `15`, `Irritation_Flag > 0`,
    and obviously no motion is being detected. Till the time all of these are true,
    the light would be switched on thereafter for `5` seconds, it would be kept switched
    on using the `time.sleep(5)`. The lights would be again switched on. Now this
    will keep on happening till the time the conditions are true or in other words,
    till the time is between 07:15 and 07:59. `Irritation)_Flag > 0`, that is, the
    motion is not detected for three times and there is no motion detected. Till that
    time, the for loop would keep on the switch on and off of the light in action. Due
    to frequent biking of light, there is a very higher chance of you waking up. This
    may be very effective, but surely not the most convenient. Well, however inconvenient
    it is, it will still be better than the conventional alarm:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设即使经过了所有这些，你仍然没有醒来。那么应该发生什么？我们在这里为您准备了一些特别的东西。现在，我们不是使用`if`条件，而是使用`for`循环。它将检查时间是否为`07`小时，分钟是否大于`15`，`Irritation_Flag
    > 0`，显然没有检测到运动。只要所有这些条件都为真，灯就会在之后打开`5`秒，使用`time.sleep(5)`保持打开。然后灯会再次打开。这将一直持续下去，直到条件为真，或者换句话说，直到时间在07:15和07:59之间。`Irritation)_Flag
    > 0`，也就是说，连续三次未检测到运动。在此期间，for循环将继续打开和关闭灯。由于频繁的灯光闪烁，你醒来的机会非常高。这可能非常有效，但肯定不是最方便的。然而，无论多么不方便，它仍然比传统的闹钟要好：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have the entire light-based alarm ready for us to wake us up every morning.
    However, there is a problem. Once it is turned off, the value of `Irritation_Flag`
    will be `0`. Once it is turned to `0`, then no matter what the time is, the light
    would never start up. Hence, to make sure that the alarm is always operational
    at the same time every single day, we would need to set the value of the flag
    to any number more than `0`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了整个基于灯光的闹钟，可以在每天早上叫醒我们。但是，有一个问题。一旦关闭，`Irritation_Flag`的值将为`0`。一旦变为`0`，无论时间如何，灯都不会启动。因此，为了确保闹钟每天都在同一时间运行，我们需要将标志的值设置为大于`0`的任何数字。
- en: Now in the preceding line, if `H != '07'`, then the `Irritation_flag` would
    be `3`. That is whenever the time is anything other than `07` hours, then the
    value of `Irritation_Flag` would be `3`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在前一行中，如果`H != '07'`，那么`Irritation_flag`将为`3`。也就是说，每当时间不是`07`小时时，`Irritation_Flag`的值将为`3`。
- en: It was simple, wasn't it? But I'm sure that it would do a good job to make sure
    you wake up on time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，不是吗？但我相信它会很好地确保你按时醒来。
- en: Making it even more irritating
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让它变得更加恼人
- en: Can you completely rely on the preceding system? If you really have control
    over your morning emotions of not getting out of the bed, then, yes, sure you
    can. But for those who just love to be in bed and sleep again after hitting the
    snooze button, then I am sure you would be able to find a way to switch off the
    light without properly waking up. So as in the code, the light would switch off
    whenever the motion was detected three times. But the motion can be anything.
    You can simply wave your hand while still being in the bed, and the system would
    detect it as a motion, which would defy the whole purpose. So what should we do
    now?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您能完全依赖前面的系统吗？如果您真的能控制自己早上不想起床的情绪，那么，是的，您可以。但对于那些喜欢躺在床上并在按掉贪睡按钮后再次入睡的人来说，我相信您一定能找到一种方法来关闭灯光而不是真正醒来。因此，就像代码中一样，当检测到运动三次时，灯光会关闭。但运动可以是任何东西。您可以在床上挥手，系统会将其检测为运动，这将违背整个目的。那么现在我们该怎么办呢？
- en: 'We have a solution for it! We can use a way by which we can be sure that you
    have to get out of bed. For this very purpose, we will be using our IR proximity
    sensor, which we have used earlier in our projects, and based on the distance
    reading of the sensor, we can detect whether you have gone past any specific area.
    This can be really interesting as you can fit this sensor pointing away from the
    bed or maybe on the gate of the bathroom, and till the time, you do not cross
    that specific line. The system would not switch off the alarm. So let''s see how
    we would do it. First, connect the hardware, as shown in the following diagram:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个解决方案！我们可以使用一种方法，确保您必须起床。为此，我们将使用我们之前在项目中使用过的红外近距传感器，并根据传感器的距离读数，我们可以检测您是否已经穿过了特定区域。这可能非常有趣，因为您可以将该传感器安装在床的另一侧，或者可能安装在浴室的门口，直到您穿过特定线路为止。系统不会关闭闹钟。所以让我们看看我们将如何做。首先，按照以下图表连接硬件：
- en: '![](Images/4b798678-b477-4322-86ad-e480bc2a2583.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4b798678-b477-4322-86ad-e480bc2a2583.png)'
- en: 'Once you are done with the diagram, go ahead and upload the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完成图表后，继续上传以下代码：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Mind blown? This code seems quite complex, having conditions inside conditions
    and again some more conditions. Say hello to robotics! These conditions make up
    a lot of robot's programming. A robot has to see continuously what is happening
    around and make decisions according to it. It's also the way humans work, don't
    we?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 震惊了吗？这段代码似乎相当复杂，内部嵌套了条件，再加上更多的条件。欢迎来到机器人领域！这些条件构成了大部分机器人的编程。机器人必须不断观察周围发生的事情，并根据情况做出决策。这也是人类的工作方式，不是吗？
- en: 'So, that being said, let''s see what we are actually doing here. Most of the
    code is pretty much the same as the last one. The main difference comes somewhere
    around the middle of the programming section:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，让我们看看我们实际上在这里做了什么。大部分代码基本上与上一个相同。主要区别在于编程部分的中间某处：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We are switching on the lights as soon as the time is between 07:00 and 07:15:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会在时间介于07:00和07:15之间时打开灯光：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the hour of `07` whenever the PIR sensor is triggered or in other words,
    the PIR sensor detects any motion, then it will do a set of activities inside
    the `if` condition, which includes noting down the time by the function `datetime.datetime.now().strftime('%M')`
    and then storing it down in a variable named `M_snooze`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`07`点的时候，每当PIR传感器被触发，或者换句话说，PIR传感器检测到任何运动，那么它将在`if`条件内执行一系列活动，包括通过函数`datetime.datetime.now().strftime('%M')`记录时间，然后将其存储在名为`M_snooze`的变量中。
- en: 'In the next line, we are taking the value of that minute stored in `M_snooze`
    and adding another `5` minutes to it. So the value of `M_snooze` is now incremented
    by `5`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们取出存储在`M_snooze`中的分钟值，并再加上`5`分钟。因此，`M_snooze`的值现在增加了`5`：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, in the same `if` condition that we used previously, we have placed a `for`
    loop, which looks like this: `for M <= M_snooze`. But what does this mean? Here,
    what we are doing is pretty simple. The program inside the `for` loop will keep
    on running and will stay in the loop till the time the condition that we have
    stated is true. Now, the condition here states that till the time `M` is smaller
    or equal to `M_snooze`, the condition will stay true. As you have learned earlier, `M`
    is the current minute value and `M_snooze` is the value of `M` at the time of
    starting of this loop, which is incremented by `5`. Hence, the loop would be true
    for `5` minutes from the time of starting:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们之前使用的相同`if`条件中，我们放置了一个`for`循环，看起来像这样：`for M <= M_snooze`。但这是什么意思？在这里，我们所做的事情非常简单。`for`循环内的程序将继续运行，并且会一直保持在循环中，直到我们所述的条件为真。现在，这里的条件规定了只要`M`小于或等于`M_snooze`的时间，条件就会保持为真。正如您之前学到的，`M`是当前的分钟值，而`M_snooze`是循环开始时的`M`的值，增加了`5`。因此，循环将在开始时的`5`分钟内保持为真：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, this is the most interesting part of the program. Till the time, the `for`
    loop `for M <= M_snooze` is true, the preceding lines of code will run. Let's
    see what it is doing. In the line, `F-value = adc0.get_last_result()`, it is taking
    the value of the IR proximity sensor and storing it in `F_value`. Thereafter,
    in the line `F1 = (1.0/(F_value/13.15))-0.35`, we are simply calculating the distance
    in centimeters. We have already studied how this is happening, so not much explanation
    needs to be done here. The value of distance is stored in a variable named `F1`.
    Thereafter, using the function `time.sleep(0.1)`, we are pausing the program for
    `0.1` seconds. Thereafter, we are again repeating the same task again; that is,
    we are again taking the value of distance. But this time, the distance value calculated
    is stored in an another variable named `F2`. Finally, after all of this is done,
    we are calculating `F_final`, which is `F_final = F1 - F2`. So we are simply calculating
    the difference in distance between the first and the second reading. But, you
    must be asking why are we doing this. What good does it do?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是程序中最有趣的部分。直到`for M <= M_snooze`为真，前面的代码行将运行。让我们看看它在做什么。在`F-value = adc0.get_last_result()`这一行中，它获取红外距离传感器的值并将其存储在`F_value`中。然后，在`F1
    = (1.0/(F_value/13.15))-0.35`这一行中，我们简单地计算了以厘米为单位的距离。我们已经学习了这是如何发生的，所以这里不需要做太多解释。距离的值存储在一个名为`F1`的变量中。然后，使用`time.sleep(0.1)`函数，我们暂停程序`0.1`秒。然后，我们再次重复相同的任务；也就是说，我们再次获取距离的值。但是这次，计算出的距离值存储在另一个名为`F2`的变量中。最后，在所有这些都完成之后，我们计算`F_final`，即`F_final
    = F1 - F2`。所以我们只是计算了第一次和第二次读数之间的距离差。但是，你可能会问我们为什么要这样做。这有什么好处呢？
- en: Well, as you remember, we have placed the IR proximity sensor in front of our
    bathroom gate. Now, if no one is passing in front of it, the value will remain
    fairly constant. But whenever a person passes through it, there will be a change
    in distance. So if there is a change in the overall distance from first to last
    reading, then we can say that someone has passed through the IR sensor.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，你还记得，我们把红外距离传感器放在浴室门口。现在，如果没有人经过，数值将保持相当恒定。但是每当有人经过时，距离就会发生变化。因此，如果从第一次到最后一次读数的总距离发生变化，那么我们可以说有人通过了红外传感器。
- en: 'That is pretty cool, but why don''t we simply keep a threshold value like we
    have done previously? The answer to this is simple. That is because if you need
    to change the position of the sensor, then you again need to recalibrate the sensor
    according to the position. So this is a simple yet robust solution that can be
    used anywhere:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这很酷，但为什么我们不像以前那样保留一个阈值呢？答案很简单。因为如果你需要改变传感器的位置，那么你又需要根据位置重新校准传感器。所以这是一个简单但健壮的解决方案，可以在任何地方使用：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now we have got the reading, which can tell us whether a person has passed in
    front of it. But this data will not be useful until we put it somewhere.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经得到了读数，可以告诉我们是否有人经过。但是除非我们把它放在某个地方，否则这些数据是没有用的。
- en: So, here in the condition `if F_final > 10`, whenever the distance change is
    more than `10` cm, then the condition would be true and the line `Irritation_flag`
    would be set to `1`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在条件`if F_final > 10`中，每当距离变化超过`10`厘米时，条件就会成立，`Irritation_flag`将被设置为`1`。
- en: If you go back to the previous lines, then you will be able to make out that
    the lights will only be on when the time is between 07:00 and 07:15 and the `Irritation_flag`
    must be `0`. As with this condition, we have set a part of the condition false
    by making the `Irritation_flag = 1`; hence, the program to switch on the lights
    will not work.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回到前面的行，你就会发现只有在时间在07:00和07:15之间，且`Irritation_flag`必须为`0`时，灯才会亮起。由于这个条件，我们通过将`Irritation_flag
    = 1`使条件的一部分变为假；因此，开灯的程序将不起作用。
- en: 'Now, let''s look back and see what we have done so far:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下我们到目前为止所做的事情：
- en: Whenever the time is 07:00–07:15, the lights would be switched on
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当时间是07:00-07:15时，灯将被打开
- en: If a movement is detected, then the lights would be switched off
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果检测到有人移动，灯将被关闭
- en: A condition will be true for another five minutes, which will wait for detection
    of human motion through the IR proximity sensor
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个条件将再持续五分钟，等待红外距离传感器检测到人体运动
- en: If a person crosses that within five minutes, then the alarm would be deactivated
    or else the alarm will again start to switch on the light
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个人在五分钟内通过，那么警报将被停用，否则警报将再次开始打开灯
- en: 'Pretty cool, huh? That being said, let''s add another added functionality from
    the previous program:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 挺酷的，是吧？ 话虽如此，让我们从之前的程序中再添加另一个功能：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You know what this does. If you do not move around in the first `15` minutes,
    that is from 07:00 to 07:15, then it will start blinking the lights every five
    seconds, forcing you to wake up:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道这是做什么的。如果在第一个`15`分钟内你不活动，也就是从07:00到07:15，那么它将开始每五秒闪烁灯，迫使你醒来：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, we use the condition `if H != '07':`. So, whenever the value of `H`
    is anything other than `07`, then the condition would be true, and this will reset
    the `Irritation_flag` to `0`. By now, you know what turning  `Irritation_flag` to
    `0` does.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用条件`if H != '07':`。所以，每当`H`的值不是`07`时，条件就会成立，这将把`Irritation_flag`重置为`0`。到现在为止，你知道将`Irritation_flag`设置为`0`的作用。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So, finally, we have made our first mini Jarvis, which wakes you up in the morning
    and even irritates you if you don't wake up on time. I hope you have really enjoyed
    this chapter by learning about two-motion sensors and their application in automating
    the electrical appliance. So, go ahead and try one at home, modify the code according
    to your needs, and bring out some really cool stuff. Next up, we will make our
    Jarvis do some more cool stuff, and we will cover some more exciting stuff on
    human detection.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，最后，我们做出了我们的第一个迷你贾维斯，它可以在早上叫醒你，甚至在你没有按时醒来时还会惹你生气。希望你通过学习两个运动传感器及其在自动化电器中的应用来真正享受了这一章节。所以，继续在家里尝试一下，根据自己的需求修改代码，制作一些真正酷炫的东西。接下来，我们将让我们的贾维斯做一些更酷炫的事情，并且我们将介绍一些更令人兴奋的有关人体检测的东西。
