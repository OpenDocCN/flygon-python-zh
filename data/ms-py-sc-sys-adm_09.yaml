- en: Working with Various Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理各种文件
- en: In this chapter, you will learn about working with various types of files, such
    as PDF files, Excel , CSV , and `txt` files. Python has modules for performing
    operations on these files. You will learn how to open, edit, and get data from
    these files using Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您将学习如何处理各种类型的文件，如PDF文件、Excel文件、CSV文件和`txt`文件。Python有用于在这些文件上执行操作的模块。您将学习如何使用Python打开、编辑和获取这些文件中的数据。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下主题：
- en: Working with PDF files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理PDF文件
- en: Working with Excel files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Excel文件
- en: Working with CSV files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理CSV文件
- en: Working with `txt` files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理`txt`文件
- en: Working with PDF files
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理PDF文件
- en: In this section, we are going to learn about how to work with PDF files using
    Python modules. PDF is a widely used document format and PDF files have `.pdf`
    extensions. Python has a module named `PyPDF2`, that's useful to do various operations
    on `pdf` files. It is third-party module which is a Python library built as a
    PDF toolkit.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用Python模块处理PDF文件。PDF是一种广泛使用的文档格式，PDF文件的扩展名为`.pdf`。Python有一个名为`PyPDF2`的模块，对`pdf`文件进行各种操作非常有用。它是一个第三方模块，是作为PDF工具包构建的Python库。
- en: 'We must install this module first. To install `PyPDF2`, run the following command
    in your Terminal:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须首先安装这个模块。要安装`PyPDF2`，请在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, we are going to look at some of the operations to work on PDF files, such
    as reading a PDF, getting the number of pages, extracting text, and rotating PDF
    pages.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一些操作来处理PDF文件，比如读取PDF、获取页面数、提取文本和旋转PDF页面。
- en: Reading a PDF document and getting the number of pages
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读PDF文档并获取页面数
- en: 'In this section, we are going read a PDF file using the `PyPDF2` module. Also,
    we are going to get the number of pages of that PDF. This module has a function
    called  `PdfFileReader()` that helps in reading a PDF file. Make sure you have
    a PDF file in your system. Right now, I have the `test.pdf` file present in my
    system so I will use this file throughout this section. Enter your PDF filename
    in place of `test.pdf`. Create a script called `read_pdf.py` and write the following
    content in it:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`PyPDF2`模块读取PDF文件。此外，我们将获取该PDF的页面数。该模块有一个名为`PdfFileReader()`的函数，可以帮助读取PDF文件。确保您的系统中有一个PDF文件。现在，我在我的系统中有`test.pdf`文件，所以我将在本节中使用这个文件。在`test.pdf`的位置输入您的PDF文件名。创建一个名为`read_pdf.py`的脚本，并在其中编写以下内容：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the script and you will get the following output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Following is the output:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, we used the `PyPDF2` module. Next, we created a `pdf`
    file object. `PdfFileReader()` will read the created object. After reading the
    PDF file, we are going to get the number of pages of that `pdf` file using the `numPages`
    property. In this case, it is `20` pages.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了`PyPDF2`模块。接下来，我们创建了一个`pdf`文件对象。`PdfFileReader()`将读取创建的对象。读取PDF文件后，我们将使用`numPages`属性获取该`pdf`文件的页面数。在这种情况下，有`20`页。
- en: Extracting text
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取文本
- en: 'To extract the pages of the `pdf` file, the `PyPDF2` module has the `extractText()`
    method. Create a script called `extract_text.py` and write the following content
    in it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取`pdf`文件的页面，`PyPDF2`模块有`extractText()`方法。创建一个名为`extract_text.py`的脚本，并在其中编写以下内容：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the script and you will get the following output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Following is the output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding example, we created a file reader object. The `pdf` reader
    object has a function called `getPage()`, which gets the page number (it starts
    from the `0th` index) as an argument and returns the page object. Next, we used
    the `extractText()` method, which will extract the text from the page number that
    we mentioned in `getPage()`. The page index starts from `0`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个文件阅读器对象。`pdf`阅读器对象有一个名为`getPage()`的函数，它以页面编号（从第0页开始）作为参数，并返回页面对象。接下来，我们使用`extractText()`方法，它将从我们在`getPage()`中提到的页面编号中提取文本。页面索引从`0`开始。
- en: Rotating PDF pages
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转PDF页面
- en: 'In this section, we are going to see how to rotate PDF pages. For that, we
    will use the  `rotate.Clockwise()` method of a `PDF` object. Create a script called `rotate_pdf.py`
    and write the following content in it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何旋转PDF页面。为此，我们将使用`PDF`对象的`rotate.Clockwise()`方法。创建一个名为`rotate_pdf.py`的脚本，并在其中编写以下内容：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the script and you will get the following output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Following is the output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, for the rotation of `pdf`, we first create a `pdf` file
    reader object of the original `pdf` file. Then the rotated pages will be written
    to a new `pdf` file . So, for writing to a new `pdf`, we use the `PdfFileWriter()`
    function of the `PyPDF2` module. The new `pdf` file will be saved with the name
    `rotated.pdf`. Now, we will rotate the pages of the `pdf` file by using the `rotateClockwise()`
    method. Then, using the `addPage()` method, the pages to the rotated `pdf`. Now,
    we have to write those `pdf` pages to a new `pdf` file. So, first we have to open
    the new file object (`pdf_out`) and write `pdf` pages to it using the `write()`
    method of the `pdf` writer object. After all this, we're going to close the original
    (`test.pdf`) file object and the new (`pdf_out`) file object.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，为了旋转`pdf`，我们首先创建了原始`pdf`文件的`pdf`文件阅读器对象。然后旋转的页面将被写入一个新的`pdf`文件。因此，为了写入新的`pdf`，我们使用`PyPDF2`模块的`PdfFileWriter()`函数。新的`pdf`文件将以名称`rotated.pdf`保存。现在，我们将使用`rotateClockwise()`方法旋转`pdf`文件的页面。然后，使用`addPage()`方法将页面添加到旋转后的`pdf`中。现在，我们必须将这些`pdf`页面写入新的`pdf`文件。因此，首先我们必须打开新的文件对象（`pdf_out`），并使用`pdf`写入对象的`write()`方法将`pdf`页面写入其中。在所有这些之后，我们将关闭原始（`test.pdf`）文件对象和新的（`pdf_out`）文件对象。
- en: Working with Excel files
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Excel文件
- en: In this section, we are going to work with Excel files, which have the `.xlsx`
    extension. This file extension is for an open XML spreadsheet file format, which
    is used by Microsoft Excel.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将处理具有`.xlsx`扩展名的Excel文件。这个文件扩展名是用于Microsoft Excel使用的一种开放的XML电子表格文件格式。
- en: Python has different modules: `xlrd` , pandas, and `openpyxl` to work with Excel
    files. In this section, we will learn how to handle Excel files using these three
    modules.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python有不同的模块：`xlrd`，pandas和`openpyxl`用于处理Excel文件。在本节中，我们将学习如何使用这三个模块处理Excel文件。
- en: First, we will look at an example using the `xlrd` module. The `xlrd` module
    is used for reading, writing, and modifying Excel spreadsheets and doing a lot
    of work.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看一个使用`xlrd`模块的例子。`xlrd`模块用于读取、写入和修改Excel电子表格以及执行大量工作。
- en: Using the xlrd module
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用xlrd模块
- en: 'First, we have to install the `xlrd` module. Run the following command in your
    Terminal to install the `xlrd` module:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须安装`xlrd`模块。在终端中运行以下命令以安装`xlrd`模块：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note: Make sure you have an Excel file present in your system. I have `sample.xlsx`
    present in my system. So I''m going to use that file throughout this section.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：确保您的系统中有一个Excel文件。我在我的系统中有`sample.xlsx`。所以我将在本节中始终使用该文件。
- en: We are going to look at how to read an Excel file and how to extract rows and
    columns from the Excel file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何读取Excel文件以及如何从Excel文件中提取行和列。
- en: Reading an Excel file
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取Excel文件
- en: 'In this section, we will look at how to read an Excel file. We are going to
    use the `xlrd` module. Create a script called `read_excel.py` and write the following
    content in it:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何读取Excel文件。我们将使用`xlrd`模块。创建一个名为`read_excel.py`的脚本，并在其中写入以下内容：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the script and you will get the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Following is the output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding example, we imported the `xlrd` module to read the Excel file.
    We also mentioned the location of the Excel file. Then, we created a file object,
    then we mentioned the index value, so that the reading will start from that index.
    Finally, we printed the results.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们导入了`xlrd`模块来读取Excel文件。我们还提到了Excel文件的位置。然后，我们创建了一个文件对象，然后我们提到了索引值，以便从该索引开始阅读。最后，我们打印了结果。
- en: Extracting the names of columns
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取列名
- en: 'In this section, we are extracting column names from the Excel sheet. Create
    a script called `extract_column_names.py` and write the following content in it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们正在从Excel表中提取列名。创建一个名为`extract_column_names.py`的脚本，并在其中写入以下内容：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the script and you will get the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Following is the output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding example, we are extracting the column names from the Excel
    sheet. We fetched the column names using the `ncols` attribute.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们正在从Excel表中提取列名。我们使用`ncols`属性获取了列名。
- en: Using pandas
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pandas
- en: 'Before proceeding to read Excel files using Pandas, first we have to install
    the `pandas` module. We can install `pandas` using the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Pandas读取Excel文件之前，我们首先必须安装`pandas`模块。我们可以使用以下命令安装`pandas`：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note: Make sure you have an Excel file present in your system. I have `sample.xlsx` present
    in my system. So I am going to use that file throughout this section.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：确保您的系统中有一个Excel文件。我在我的系统中有`sample.xlsx`。所以我将在本节中始终使用该文件。
- en: Now, we will look at some examples using `pandas`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一些使用`pandas`的例子。
- en: Reading an Excel file
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取Excel文件
- en: In this section, we are going to read Excel files using the  `pandas`  module.
    Now, let's look at an example of reading an Excel file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`pandas`模块读取Excel文件。现在，让我们看一个读取Excel文件的例子。
- en: 'Create a script called  `rd_excel_pandas.py` and write the following content
    in it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`rd_excel_pandas.py`的脚本，并在其中写入以下内容：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the preceding script and you will get the following output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述脚本，您将获得以下输出：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Following is the output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding example, we are reading an Excel file using the `pandas` module.
    First, we imported the `pandas` module. Then, we created a string called `excel_file`
    to hold the name of the file to be opened, which we want to manipulate using pandas.
    Later on, we created a `df data frame` object. In this example, we used the `read_excel`
    method of pandas to read data from the Excel file with default functions. The
    reading starts with index zero. Finally, we printed the `pandas` data frame.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们正在使用`pandas`模块读取Excel文件。首先，我们导入了`pandas`模块。然后，我们创建了一个名为`excel_file`的字符串，用于保存要打开的文件的名称，我们希望使用pandas进行操作。随后，我们创建了一个`df数据框`对象。在这个例子中，我们使用了pandas的`read_excel`方法来从Excel文件中读取数据。读取从索引零开始。最后，我们打印了`pandas`数据框。
- en: Reading specific columns in an Excel file
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Excel文件中读取特定列
- en: When we use the pandas module to read an Excel file using the `read_excel` method,
    we can also read specific columns in that file. For reading specific columns,
    we need to use the  `usecols` parameter in the `read_excel` method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用pandas模块使用`read_excel`方法读取Excel文件时，我们还可以读取该文件中的特定列。要读取特定列，我们需要在`read_excel`方法中使用`usecols`参数。
- en: 'Now, let’s look at an example to read specific columns in an Excel file. Create
    a script called  `rd_excel_pandas1.py`  and write the following content in it:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一个示例，读取Excel文件中的特定列。创建一个名为`rd_excel_pandas1.py`的脚本，并在其中写入以下内容：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the preceding script and you will get the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述脚本，您将获得以下输出：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Following is the output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE23]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding example, first we imported the pandas module. Then, we created
    a string called `excel_file` to hold the filename. Then we defined the `cols`
    variable and put index values of the columns inside it. So, when we used the `read_excel`
    method, within that method, we also provided the `usecols` parameter to fetch
    a particular column through the index, which we defined previously in the `cols`
    variable. Therefore, after running the script, we are getting only specific columns
    from the Excel file.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，首先我们导入了pandas模块。然后，我们创建了一个名为`excel_file`的字符串来保存文件名。然后我们定义了`cols`变量，并将列的索引值放在其中。因此，当我们使用`read_excel`方法时，在该方法内部，我们还提供了`usecols`参数，通过该参数可以通过之前在`cols`变量中定义的索引获取特定列。因此，在运行脚本后，我们只从Excel文件中获取特定列。
- en: We can also perform various operations on Excel files using the pandas module,
    such as reading an Excel file with missing data, skipping particular rows, and
    reading multiple Excel sheets.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用pandas模块对Excel文件执行各种操作，例如读取具有缺失数据的Excel文件，跳过特定行以及读取多个Excel工作表。
- en: Using openpyxl
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用openpyxl
- en: '`openpyxl` is a Python library that''s used to read and write `xlsx`, `xlsm`,
    `xltx`, and `xltm` files. First, we have to install `openpyxl.` Run the following
    command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`openpyxl`是一个用于读写`xlsx`，`xlsm`，`xltx`和`xltm`文件的Python库。首先，我们必须安装`openpyxl`。运行以下命令：'
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, we will look at some some examples of using `openpyxl`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一些使用`openpyxl`的示例。
- en: Creating a new Excel file
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的Excel文件
- en: 'In this section, we will learn to create a new Excel file using `openpyxl`.
    Create a script called `create_excel.py` and write the following content in it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习使用`openpyxl`创建新的Excel文件。创建一个名为`create_excel.py`的脚本，并在其中写入以下内容：
- en: '[PRE25]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the script and you will get the following output:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Following is the output:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, check your current working directory and you will find that `test.xlsx` has
    been created successfully. In the preceding example, we write data into four cells.
    Then, from the `openpyxl` module, we import the `Workbook` class. A workbook is
    the container for all other parts of the document. Next, we set the reference
    object to the active sheet and write values in the cells `A1`, `A2` and `B1`,
    `B2`. Finally, we've written the contents to the `test.xlsx` file with the `save()`
    method.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查您当前的工作目录，您会发现`test.xlsx`已成功创建。在前面的示例中，我们将数据写入了四个单元格。然后，从`openpyxl`模块中导入`Workbook`类。工作簿是文档的所有其他部分的容器。接下来，我们将引用对象设置为活动工作表，并在单元格`A1`，`A2`和`B1`，`B2`中写入数值。最后，我们使用`save()`方法将内容写入`test.xlsx`文件。
- en: Appending values
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 追加数值
- en: 'In this section, we are going to append values in Excel. For that, we are going
    to use the `append()` method. We can add a group of values at the bottom of the
    current sheet in which we want to put the values. Create a script called `append_values.py`
    and write the following content in it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Excel中追加数值。为此，我们将使用`append()`方法。我们可以在当前工作表的底部添加一组数值。创建一个名为`append_values.py`的脚本，并在其中写入以下内容：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the script and you will get the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Following is the output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding example, we appended three columns of data in the `append_values.xlsx`
    files sheet. The data we stored was in a tuple of tuples and to append that data
    we went through the container row by row and inserted it using the `append()`
    method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在`append_values.xlsx`文件的工作表中追加了三列数据。我们存储的数据是元组的元组，并且为了追加这些数据，我们逐行通过容器并使用`append()`方法插入它。
- en: Reading multiple cells
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取多个单元格
- en: 'In this section, we are going to read multiple cells. We will use the `openpyxl`
    module. Create a script called `read_multiple.py` and write the following content
    in it:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将读取多个单元格。我们将使用`openpyxl`模块。创建一个名为`read_multiple.py`的脚本，并在其中写入以下内容：
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the script and you will get the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE32]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Following is the output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE33]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding example, we are reading the data of three columns by using
    the `range` operation. Then, we read the data from the cells `A1 – C6`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用`range`操作读取了三列数据。然后，我们从单元格`A1 – C6`中读取数据。
- en: Similarly, we can perform lots of operations, such as merging and, splitting cells,
    on the Excel file using the `openpyxl` module.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们可以使用`openpyxl`模块在Excel文件上执行许多操作，比如合并和拆分单元格。
- en: Working with CSV files
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理CSV文件
- en: The **CSV** format stands for **Comma Separated Values**. The commas are used
    to separate the fields in a record. These are commonly used for importing and
    exporting the format for spreadsheets and databases.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSV**格式代表**逗号分隔值**。逗号用于分隔记录中的字段。这些通常用于导入和导出电子表格和数据库的格式。'
- en: A CSV file is a plain text file that uses a specific type of structuring to
    arrange tabular data. Python has the  built-in `csv` module that allows Python
    to parse these types of files. The `csv` module can be mostly used to work with
    data that is exported from spreadsheets, as well as databases in text file format,
    with fields and records.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件是使用特定类型的结构来排列表格数据的纯文本文件。Python具有内置的`csv`模块，允许Python解析这些类型的文件。`csv`模块主要用于处理从电子表格以及数据库以文本文件格式导出的数据，包括字段和记录。
- en: 'The `csv` module has all of the required functions built-in, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`csv`模块具有所有必需的内置函数，如下所示：'
- en: '`csv.reader`: This function is used to return a `reader` object, which iterates
    over lines of a CSV file'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv.reader`：此函数用于返回一个`reader`对象，该对象迭代CSV文件的行'
- en: '`csv.writer`: This function is used to return a `writer` object, which writes
    data into CSV file'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv.writer`：此函数用于返回一个`writer`对象，该对象将数据写入CSV文件'
- en: '`csv.register_dialect`: This function is used to register a CSV dialect'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv.register_dialect`：此函数用于注册CSV方言'
- en: '`csv.unregister_dialect`: This function is used to unregister a CSV dialect'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv.unregister_dialect`：此函数用于取消注册CSV方言'
- en: '`csv.get_dialect:` This function is used to returns a dialect with a given
    name'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv.get_dialect`：此函数用于返回具有给定名称的方言'
- en: '`csv.list_dialects`: This function is used to return all registered dialects'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv.list_dialects`：此函数用于返回所有已注册的方言'
- en: '`csv.field_size_limit`: This function is used to return the current maximum
    field size allowed by the parser'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csv.field_size_limit`：此函数用于返回解析器允许的当前最大字段大小'
- en: In this section, we are going to look at `csv.reader` and `csv.writer`  only.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将只看`csv.reader`和`csv.writer`。
- en: Reading a CSV file
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取CSV文件
- en: 'Python has an in-built module, `csv`, which we are going to use here to work
    with CSV files. We will use the `csv.reader` module to read a CSV file. Create
    a script called `csv_read.py` and write the following content in it:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Python具有内置模块`csv`，我们将在此处使用它来处理CSV文件。我们将使用`csv.reader`模块来读取CSV文件。创建一个名为`csv_read.py`的脚本，并在其中写入以下内容：
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the script and you will get the following output:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE35]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Following is the output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE36]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the preceding program, we opened our `test.csv` file as `csv_file`. Then,
    we used the `csv.reader()` function to extract the data into the `reader` object,
    which we can iterate over to get each line of our data. Now, we are going to look
    at the second function, `csv.Writer()`
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们将`test.csv`文件作为`csv_file`打开。然后，我们使用`csv.reader()`函数将数据提取到`reader`对象中，我们可以迭代以获取数据的每一行。现在，我们将看一下第二个函数`csv.Writer()`
- en: Writing into a CSV file
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入CSV文件
- en: 'To write data in a `csv` file, we use the `csv.writer` module. In this section,
    we will store some data into the Python list and then put that data into the `csv`
    file. Create a script called `csv_write.py` and write the following content in
    it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`csv`文件中写入数据，我们使用`csv.writer`模块。在本节中，我们将一些数据存储到Python列表中，然后将该数据放入`csv`文件中。创建一个名为`csv_write.py`的脚本，并在其中写入以下内容：
- en: '[PRE37]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run the script and you will get the following output:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE38]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Following is the output:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE39]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the preceding program, we created a list named `write_csv` with a `Name` and
    its `Sport`. Then, after creating the list, we opened the newly created `csv_write.csv`
    file and inserted the `write_csv` list into it using the `csvWriter()` function.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们创建了一个名为`write_csv`的列表，其中包含`Name`和`Sport`。然后，在创建列表后，我们打开了新创建的`csv_write.csv`文件，并使用`csvWriter()`函数将`write_csv`列表插入其中。
- en: Working with txt files
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理txt文件
- en: A plain text file is used to store data that represents only characters or strings
    and doesn't consider any structured metadata. In Python, there's no need to import
    any external library to read and write text files. Python provides an built-in
    function to create, open, close, and write and read text files. To do the operations,
    there are different access modes to govern the type of operation possible in an
    opened file.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 纯文本文件用于存储仅表示字符或字符串的数据，并且不考虑任何结构化元数据。在Python中，无需导入任何外部库来读写文本文件。Python提供了一个内置函数来创建、打开、关闭、写入和读取文本文件。为了执行操作，有不同的访问模式来管理在打开文件中可能的操作类型。
- en: 'The access modes in Python are as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的访问模式如下：
- en: '**R****ead Only Mode (**`''r''`**)**:This mode opens a text file for  the purpose.
    If that file doesn''t exist, it raises an I/O error. We can also call this mode
    the default mode in which the file will open.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅读取模式（`''r''`）**：此模式打开文本文件以供读取。如果文件不存在，它会引发I/O错误。我们也可以称此模式为文件将打开的默认模式。'
- en: '**Read and Write Mode (**`''r+''`**)**:This mode opens a text file for reading
    as well as writing purposes and raises an I/O error if the file does not exist.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读写模式（`''r+''`）**：此模式打开文本文件以供读取和写入，并在文件不存在时引发I/O错误。'
- en: '**Write Only Mode (**`''w''`**): **This mode will open a text file for writing.
    It creates the file if the file does not exist and, for existing file, the data
    is overwritten.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅写入模式（`''w''`）**：此模式将打开文本文件以供写入。如果文件不存在，则创建文件，并且对于现有文件，数据将被覆盖。'
- en: '**Write and Read Mode (**`''w+''`**)**:  This mode will open a text file for
    reading and writing. For the existing file, the data is overwritten.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写入和读取模式（`''w+''`）**：此模式将打开文本文件以供读取和写入。对于现有文件，数据将被覆盖。'
- en: '**Append Only Mode (**`''a''`**)**:  This mode will open a text file for writing.
    It creates the file if the file does not exist and the data will be inserted at
    the end of existing data.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅追加模式（`''a''`）**：此模式将打开文本文件以供写入。如果文件不存在，则创建文件，并且数据将被插入到现有数据的末尾。'
- en: '**Append and Read Mode (**`''a+''`**)**: This mode will open a text file for
    reading, as well as writing . It creates the file if the file does not exist and
    the data will be inserted at the end of the existing data.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追加和读取模式（`''a+''`）**：此模式将打开文本文件以供读取和写入。如果文件不存在，则会创建文件，并且数据将被插入到现有数据的末尾。'
- en: The open() function
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`open()`函数'
- en: This function is used to open a file and does not require any external module
    to be imported.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于打开文件，不需要导入任何外部模块。
- en: 'The syntax is as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE40]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'For the preceding syntax, the file must be in the same directory that our Python
    program resides in. If the file is not in the same directory, then we also have
    to define the file path while opening the file. The syntax for such a condition
    is shown here:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面的语法，文件必须在我们的Python程序所在的相同目录中。如果文件不在同一目录中，那么在打开文件时我们还必须定义文件路径。这种情况的语法如下所示：
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: File opening
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件打开
- en: The `open` function to open the file is `"test.txt"` .
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件的`open`函数为`"test.txt"`。
- en: 'The file is in the same directory as the `append` mode:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 文件与`追加`模式相同的目录中：
- en: '[PRE42]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If the file is not in the same directory, we have to define the path in the `append`
    mode:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件不在相同的目录中，我们必须在`追加`模式中定义路径：
- en: '[PRE43]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The close() function
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: close()函数
- en: This function is used to close the file, which frees the memory acquired by
    the file. This function is used when the file is not needed anymore or it is going
    to be opened in a different file mode.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于关闭文件，释放文件获取的内存。当文件不再需要或将以不同的文件模式打开时使用此函数。
- en: 'The syntax is as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE44]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following code syntax can be use to simply open and close a file:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码语法可用于简单地打开和关闭文件：
- en: '[PRE45]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Writing a text file
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入文本文件
- en: 'By using Python, you can create a text file (`test.txt`). By using the code,
    writing to a text file is easy. To open a file for writing, we set the second
    parameter that is in access mode to `"w"`. To write the data into this `test.txt`
    file, we use the `write()` method of the `file handle` object. Create a script
    called  `text_write.py` and write the following content in it:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Python，您可以创建一个文本文件（`test.txt`）。通过使用代码，写入文本文件很容易。要打开一个文件进行写入，我们将第二个参数设置为访问模式中的`"w"`。要将数据写入`test.txt`文件，我们使用`file
    handle`对象的`write()`方法。创建一个名为`text_write.py`的脚本，并在其中写入以下内容：
- en: '[PRE46]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Run the preceding script and you will get the output as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述脚本，您将获得以下输出：
- en: '![](assets/6620eefb-81eb-459b-b9b1-8c43968a5850.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6620eefb-81eb-459b-b9b1-8c43968a5850.jpg)'
- en: Now, check your current working directory. You'll find a `test.txt` file that
    we created. Now, check the contents of the file. You will find that the days that
    we have written in the `write()` function will be saved in `test.txt`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查您的当前工作目录。您会发现一个我们创建的`test.txt`文件。现在，检查文件的内容。您会发现我们在`write()`函数中写入的日期将保存在`test.txt`中。
- en: 'In the preceding program, we''ve declared the `text_file` variable to open
    a file named `test.txt`. The `open` function takes two arguments: first, the file
    that we want to open, and second, the access mode that represents the permission
    or operation that we want to do or apply on the file. In our program, we used
    the `"w"` letter in our second argument, which indicates `write`. Then, we used **`text_file.close()`**
    to close the instance of the stored `test.txt` file.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们声明了`text_file`变量来打开名为`test.txt`的文件。`open`函数接受两个参数：第一个是我们要打开的文件，第二个是表示我们要在文件上执行的权限或操作的访问模式。在我们的程序中，我们在第二个参数中使用了`"w"`字母，表示写入。然后，我们使用`text_file.close()`来关闭存储的`test.txt`文件的实例。
- en: Reading a text file
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取文本文件
- en: 'Reading a file is as easy as writing from a file. To open a file for reading,
    we set the second parameter that is the access mode  to `"r"` instead of `"w"`.
    To read the data from this file, we use the `read()` method of the `file handle`
    object. Create a script called  `text_read.py` and write the following content
    in it:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 读取文件和写入文件一样容易。要打开一个文件进行读取，我们将第二个参数即访问模式设置为`"r"`，而不是`"w"`。要从该文件中读取数据，我们使用`文件句柄`对象的`read()`方法。创建一个名为`text_read.py`的脚本，并在其中写入以下内容：
- en: '[PRE47]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Following is the output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE48]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the preceding program, we''ve declared the `text_file` variable to open
    a file named `test.txt`. The `open` function takes two arguments: first, the file
    that we want to open, and second, the access mode that represents the permission
    or operation we want to do or apply on the file. In our program, we used the `"r"`
    letter in our second argument, which indicates a `read` operation. Then, we used `text_file.close()`
    to close the instance of the stored `test.txt` file. After running the Python
    program, we can easily see the content in our text file in our Terminal.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们声明了`text_file`变量来打开名为`test.txt`的文件。`open`函数接受两个参数：第一个是我们要打开的文件，第二个是表示我们要在文件上执行的权限或操作的访问模式。在我们的程序中，我们在第二个参数中使用了`"r"`字母，表示读取操作。然后，我们使用`text_file.close()`来关闭存储的`test.txt`文件的实例。运行Python程序后，我们可以在终端中轻松看到文本文件中的内容。
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about various files. We learned about PDF, Excel,
    CSV, and text files. We used Python modules to perform some operations on these
    types of files.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了各种文件。我们学习了PDF、Excel、CSV和文本文件。我们使用Python模块对这些类型的文件执行了一些操作。
- en: In the next chapter, we are going to learn about basic networking and internet
    modules in Python.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Python中的基本网络和互联网模块。
- en: Questions
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between `readline()` and `readlines()` ?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`readline()`和`readlines()`之间有什么区别？'
- en: What is the difference between `open()` and `with open()`?
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`open()`和`with open()`之间有什么区别？'
- en: What is the significance of `r c:\\Downloads` at starting?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`r c:\\Downloads`的意义是什么？'
- en: What is the generators object?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成器对象是什么？
- en: What is the use of `pass`?
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pass`的用途是什么？'
- en: What is a lambda expression?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是lambda表达式？
- en: Further reading
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'XLRD: [https://xlrd.readthedocs.io/en/latest/api.html](https://xlrd.readthedocs.io/en/latest/api.html)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XLRD：[https://xlrd.readthedocs.io/en/latest/api.html](https://xlrd.readthedocs.io/en/latest/api.html)
- en: '`openoyxl`: [http://www.python-excel.org/](http://www.python-excel.org/)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openoyxl`：[http://www.python-excel.org/](http://www.python-excel.org/)'
- en: 'Regarding generator concepts: [https://wiki.python.org/moin/Generators](https://wiki.python.org/moin/Generators)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于生成器概念：[https://wiki.python.org/moin/Generators](https://wiki.python.org/moin/Generators)
