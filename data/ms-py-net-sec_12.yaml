- en: Extracting Geolocation and Metadata from Documents, Images, and Browsers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文档、图像和浏览器中提取地理位置和元数据
- en: This chapter covers the main modules we have in Python for extracting information
    about geolocation IP address, extracting metadata from images and documents, and
    identifying the web technology used by a site in the frontend and backend. Also,
    we cover how to extract metadata for chrome and firefox browsers and information
    related to downloads, cookies, and history data stored in the sqlite database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了Python中用于提取IP地址地理位置信息、从图像和文档中提取元数据以及识别网站前端和后端使用的Web技术的主要模块。此外，我们还介绍了如何从Chrome和Firefox浏览器中提取元数据以及与存储在sqlite数据库中的下载、cookie和历史数据相关的信息。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The `pygeoip` and `pygeocoder` modules for geolocation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于地理位置的`pygeoip`和`pygeocoder`模块
- en: How to extract metadata from images with `Python Image` Library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`Python Image`库从图像中提取元数据
- en: How to extract metadata from PDF documents with `pypdf` module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`pypdf`模块从PDF文档中提取元数据
- en: How to identify technology used by a website
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何识别网站使用的技术
- en: How to extract metadata from web browsers such as chrome and firefox
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从Chrome和Firefox等网络浏览器中提取元数据
- en: Technical Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter 12` folder: [https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例和源代码可在GitHub存储库的`chapter 12`文件夹中找到：[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)。
- en: You will need to install python distribution in your local machine with at least
    4 GB memory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在本地计算机上安装至少4GB内存的Python发行版。
- en: Extracting geolocation information
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取地理位置信息
- en: In this section, we review  how to extract geolocation information from an IP
    address or domain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾如何从IP地址或域名中提取地理位置信息。
- en: Introduction to geolocation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理位置介绍
- en: One way to obtain geolocation from an ip address or domain is using a service
    that provides this kind of information. Among the services that provide this information,
    we can highlight hackertarget.com ([https://hackertarget.com/geoip-ip-location-lookup/](https://hackertarget.com/geoip-ip-location-lookup/)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从IP地址或域名获取地理位置的一种方法是使用提供此类信息的服务。在提供此信息的服务中，我们可以强调hackertarget.com ([https://hackertarget.com/geoip-ip-location-lookup/](https://hackertarget.com/geoip-ip-location-lookup/))。
- en: 'With [hackertarget.com](http://hackertarget.com), we can get a geolocation
    from an ip address:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[hackertarget.com](http://hackertarget.com)，我们可以从IP地址获取地理位置：
- en: '![](assets/04da526f-00a3-4154-b344-e4ec7d7f5970.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/04da526f-00a3-4154-b344-e4ec7d7f5970.png)'
- en: This service also provides a REST API for obtaining a geolocation from an ip
    address: [https://api.hackertarget.com/geoip/?q=8.8.8.8](https://api.hackertarget.com/geoip/?q=8.8.8.8).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务还提供了一个用于从IP地址获取地理位置的REST API：[https://api.hackertarget.com/geoip/?q=8.8.8.8](https://api.hackertarget.com/geoip/?q=8.8.8.8)。
- en: 'Another service is `api.hostip.info`, which provides a query by ip address:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个服务是`api.hostip.info`，它提供了按IP地址查询的服务：
- en: '![](assets/3ca09e55-c965-4e81-b66c-4f4bdd84e344.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ca09e55-c965-4e81-b66c-4f4bdd84e344.png)'
- en: In the next script, we are using this service and the `requests` module to obtain
    a json response with the information for geolocation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个脚本中，我们使用此服务和`requests`模块来获取包含地理位置信息的json响应。
- en: 'You can find the following code in the`ip_to_geo.py` file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`ip_to_geo.py`文件中找到以下代码：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the **output** of the previous script:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前一个脚本的**输出**：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Introduction to Pygeoip
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pygeoip介绍
- en: '`Pygeoip` is one of the modules available in Python that allows you to retrieve
    geographic information from an IP address. It is based on GeoIP databases, which
    are distributed in several files depending on their type (City, Region, Country,
    ISP). The module contains several functions to retrieve data, such as the country
    code, time zone, or complete registration with all the information related to
    a specific address.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pygeoip`是Python中可用的模块之一，允许您从IP地址检索地理信息。它基于GeoIP数据库，这些数据库根据其类型（城市、地区、国家、ISP）分布在几个文件中。该模块包含几个函数来检索数据，例如国家代码、时区或包含与特定地址相关的所有信息的完整注册。'
- en: '`Pygeoip` can be downloaded from the official GitHub repository: [http://github.com/appliedsec/pygeoip](http://github.com/appliedsec/pygeoip).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pygeoip`可以从官方GitHub存储库下载：[http://github.com/appliedsec/pygeoip](http://github.com/appliedsec/pygeoip)。'
- en: 'If we query the help of the module, we see the main class that must be used
    to instantiate an object that allows us to make the queries:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查询模块的帮助，我们会看到必须使用的主要类来实例化允许我们进行查询的对象：
- en: '![](assets/0ee0956f-9aa4-4942-a081-23a5431e4c64.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0ee0956f-9aa4-4942-a081-23a5431e4c64.png)'
- en: To build the object, we use a constructor that accepts a file as a database
    by parameter. An example of this file can be downloaded from: [http://dev.maxmind.com/geoip/legacy/geolite](http://dev.maxmind.com/geoip/legacy/geolite).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建对象，我们使用一个接受文件作为参数的数据库的构造函数。此文件的示例可以从以下网址下载：[http://dev.maxmind.com/geoip/legacy/geolite](http://dev.maxmind.com/geoip/legacy/geolite)。
- en: '![](assets/1062cdc6-46f3-4ce5-b7d2-713f98345e54.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1062cdc6-46f3-4ce5-b7d2-713f98345e54.png)'
- en: The following methods that we have available in this class allow you to obtain
    the name of the country from the IP address or the domain name.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此类中可用的以下方法允许您从IP地址或域名获取国家名称。
- en: 'You can find the following code in the `**geoip.py**` file in the `pygeopip`
    folder:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`**geoip.py**`文件中找到以下代码，该文件位于`pygeopip`文件夹中：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are also methods to obtain the organization and the service provider
    from the ip and host addresses:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些方法可以从IP和主机地址中获取组织和服务提供商：
- en: '![](assets/8926cf88-04bd-4d61-91aa-f29823539be8.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8926cf88-04bd-4d61-91aa-f29823539be8.png)'
- en: 'This is an example of obtaining information for a specific organization from
    the ip address and domain:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从IP地址和域名获取特定组织信息的示例：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are also methods that allow us to obtain, in dictionary form, a structure
    with data about the country, city, latitude, or longitude:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些方法可以让我们以字典形式获取有关国家、城市、纬度或经度的数据结构：
- en: '![](assets/b1cca883-a48c-4887-93eb-6da123e990bd.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1cca883-a48c-4887-93eb-6da123e990bd.png)'
- en: 'This is an example of obtaining geolocation information from an ip address:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个从IP地址获取地理位置信息的示例：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can see all the geolocation information returned by the previous script:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到上一个脚本返回的所有地理位置信息：
- en: '![](assets/971e5d90-8cd3-4b50-9499-d2a27403a429.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/971e5d90-8cd3-4b50-9499-d2a27403a429.png)'
- en: In the next script we have two methods, `geoip_city()` to obtain information
    about the location, and `geoip_country()` to obtain the country, both from the
    ip address.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个脚本中，我们有两种方法，`geoip_city()`用于获取有关位置的信息，`geoip_country()`用于获取国家，两者都是从IP地址获取的。
- en: In both methods, first instantiate a `GeoIP` class with the path of the file
    that contains the database. Next, we will query the database for a specific record,
    specifying the IP address or domain. This returns a record containing fields for
    city, `region_name`, `postal_code`, `country_name`, `latitude`, and `longitude`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种方法中，首先实例化一个带有包含数据库的文件路径的`GeoIP`类。接下来，我们将查询特定记录的数据库，指定IP地址或域。这将返回一个包含城市、`region_name`、`postal_code`、`country_name`、`latitude`和`longitude`字段的记录。
- en: 'You can find the following code in the `pygeoip_test.py` file in the `pygeopip`
    folder:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`pygeopip`文件夹中的`pygeoip_test.py`文件中找到以下代码：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can see that the returned information is the same for both cases:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到返回的信息对于两种情况是相同的：
- en: '![](assets/4c071006-cd8a-48ea-8b8b-06e00dfdf1ec.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4c071006-cd8a-48ea-8b8b-06e00dfdf1ec.png)'
- en: Introduction to pygeocoder
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pygeocoder简介
- en: '`pygeocoder` is a Python module that facilitates the use of Google''s geolocation
    functionality. With this module, you can easily find the addresses corresponding
    to the coordinates and vice versa. We can also use it to validate and format addresses.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`pygeocoder`是一个简化使用Google地理位置功能的Python模块。使用此模块，您可以轻松找到与坐标对应的地址，反之亦然。我们还可以使用它来验证和格式化地址。'
- en: The module is inside the official Python repository, so you can use `pip` to
    install it. In the [https://pypi.python.org/pypi/pygeocoder ](https://pypi.python.org/pypi/pygeocoder)URL,
    we can see the latest version of this module: `$ pip install pygeocoder`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块位于官方Python存储库中，因此您可以使用`pip`来安装它。在[https://pypi.python.org/pypi/pygeocoder](https://pypi.python.org/pypi/pygeocoder)URL中，我们可以看到此模块的最新版本：`$
    pip install pygeocoder`。
- en: 'The module uses the Google Geocoding API v3 services to retrieve the coordinates
    from a specific address:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块使用Google Geocoding API v3服务从特定地址检索坐标：
- en: '![](assets/7360aef5-9517-48e7-a26e-29c8c7a9d535.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7360aef5-9517-48e7-a26e-29c8c7a9d535.png)'
- en: The main class of this module is the `Geocoder` class, which allows queries
    to be made both from the description of a place and from a specific location.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块的主要类是`Geocoder`类，它允许从地点描述和特定位置进行查询。
- en: 'In this screenshot, we can see the return of the `help` command for the `GeoCoder`
    class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到`GeoCoder`类的`help`命令的返回：
- en: '![](assets/874c59b5-88f5-49f3-a0bf-a8b1b9f20865.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/874c59b5-88f5-49f3-a0bf-a8b1b9f20865.png)'
- en: Example where from a description in the form of a place, coordinates, latitude,
    longitude, country and postal code are obtained. You can also perform the reverse
    process, that is, starting from coordinates corresponding to latitude and longitude
    of a geographical point, it is possible to recover the address of said site.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从地点描述中获取地点、坐标、纬度、经度、国家和邮政编码的示例。您还可以执行反向过程，即从对应于地理点的纬度和经度的坐标开始，可以恢复该站点的地址。
- en: 'You can find the following code in the `PyGeoCoderExample.py` file in the `pygeocoder`
    folder:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`pygeocoder`文件夹中的`PyGeoCoderExample.py`文件中找到以下代码：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can see all the geolocation information returned by the previous script:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到上一个脚本返回的所有地理位置信息：
- en: '![](assets/7c2b63cf-17e6-4c0b-8fd1-3fe517203204.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c2b63cf-17e6-4c0b-8fd1-3fe517203204.png)'
- en: The MaxMind database in Python
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的MaxMind数据库
- en: 'There are other Python modules that are using the MaxMind database:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他使用MaxMind数据库的Python模块：
- en: '**geoip2:** Provides access to the GeoIP2 web services and databases'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**geoip2:** 提供对GeoIP2网络服务和数据库的访问'
- en: '[https://github.com/maxmind/GeoIP2-python](https://github.com/maxmind/GeoIP2-python)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/maxmind/GeoIP2-python](https://github.com/maxmind/GeoIP2-python)'
- en: '**maxminddb-geolite2:** Provides a simple MaxMindDB reader extension'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**maxminddb-geolite2:** 提供一个简单的MaxMindDB阅读器扩展'
- en: '[https://github.com/rr2do2/maxminddb-geolite2](https://github.com/rr2do2/maxminddb-geolite2)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/rr2do2/maxminddb-geolite2](https://github.com/rr2do2/maxminddb-geolite2)'
- en: In the next script, we can see an example of how to use the `maxminddb-geolite2`
    package.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个脚本中，我们可以看到如何使用`maxminddb-geolite2`包的示例。
- en: 'You can find the following code in the `geolite2_example.py` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`geolite2_example.py`文件中找到以下代码：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this screenshot, we can see the execution of the previous script using google.com
    as a hostname:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到使用google.com作为主机名执行上一个脚本：
- en: '`python geolite2_example.py --hostname google.com`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`python geolite2_example.py --hostname google.com`'
- en: 'This script will show an output similar to the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将显示类似于以下内容的输出：
- en: '![](assets/39c1d15f-fd21-4639-b49c-70fc88b615cc.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/39c1d15f-fd21-4639-b49c-70fc88b615cc.png)'
- en: Extracting metadata from images
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从图像中提取元数据
- en: In this section, we review how to extract EXIF metadata from images with the
    PIL module.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将回顾如何使用PIL模块从图像中提取EXIF元数据。
- en: Introduction to Exif and the PIL module
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Exif和PIL模块简介
- en: One of the main modules that we find within Python for the processing and manipulation
    of images is `PIL`. The `PIL` module allows us to extract the metadata of images
    in `EXIF`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Python中找到的用于处理和操作图像的主要模块之一是`PIL`。`PIL`模块允许我们提取图像的`EXIF`元数据。
- en: '**Exif (Exchange Image File Format)** is a specification that indicates the
    rules that must be followed when we are going to save images and defines how to
    store metadata in image and audio files. This specification is applied today in
    most mobile devices and digital cameras.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Exif（Exchange Image File Format）**是一个规范，指示在保存图像时必须遵循的规则，并定义了如何在图像和音频文件中存储元数据。这个规范今天在大多数移动设备和数码相机中应用。'
- en: 'The `PIL.ExifTags` module allows us to extract information from these tags:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`PIL.ExifTags`模块允许我们从这些标签中提取信息：'
- en: '![](assets/f92bcdd3-de77-40ae-b712-31142fd3c023.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f92bcdd3-de77-40ae-b712-31142fd3c023.png)'
- en: We can see the official documentation for the `exiftags` package inside the
    pillow module at [https://pillow.readthedocs.io/en/latest/reference/ExifTags.html](https://pillow.readthedocs.io/en/latest/reference/ExifTags.html).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`pillow`模块内的`exiftags`包的官方文档中查看官方文档：
- en: ExifTags contains a dictionary  structure with constants and names for many
    well-known `EXIF tags`**.**
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ExifTags包含一个带有许多众所周知的`EXIF标签`的常量和名称的字典结构。
- en: In this image, we can see all tags returned by `TAGS.values()` method**:**
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张图片中，我们可以看到`TAGS.values()`方法返回的所有标签：
- en: '![](assets/5d180f44-29e7-424e-b1c4-523fcc817f78.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d180f44-29e7-424e-b1c4-523fcc817f78.png)'
- en: Getting the EXIF data from an image
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从图像获取EXIF数据
- en: First, we imported the `PIL` image and `PIL TAGS` modules. `PIL` is an image-processing
    module in Python. It supports many file formats and has a powerful image-processing
    capability. Then we iterate through the results and print the values. There are
    many other modules that support EXIF data extraction, such as `ExifRead`. In this
    example, to acquire the `EXIF` data, we can use the `_getexif()` method.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入了`PIL`图像和`PIL TAGS`模块。`PIL`是Python中的图像处理模块。它支持许多文件格式，并具有强大的图像处理能力。然后我们遍历结果并打印值。还有许多其他模块支持EXIF数据提取，例如`ExifRead`。在这个例子中，为了获取`EXIF`数据，我们可以使用`_getexif()`方法。
- en: 'You can find the following code in the `get_exif_tags.py` file in the `exiftags`
    folder:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`exiftags`文件夹中的`get_exif_tags.py`文件中找到以下代码：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Understanding Exif Metadata
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Exif元数据
- en: To obtain the information of the `EXIF` tags of an image, the `_getexif()` method
    of the image object can be used. For example, we can have a function where, from
    the image path, we can return information from `EXIF` tags.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取图像的`EXIF`标签信息，可以使用图像对象的`_getexif()`方法。例如，我们可以编写一个函数，在图像路径中，可以返回`EXIF`标签的信息。
- en: 'The following functions are available in the `extractDataFromImages.py` file
    in the `exiftags` folder:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在`exiftags`文件夹中的`extractDataFromImages.py`文件中提供了以下函数：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This information can be improved by decoding the information we have obtained
    in a latitude-longitude values format, for them we can make a function that, given
    an `exif` attribute of the `GPSInfo` type, decodes that information:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息可以通过解码我们以纬度-经度值格式获得的信息来改进，对于它们，我们可以编写一个函数，给定`GPSInfo`类型的`exif`属性，解码该信息：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the previous script, we parsed the Exif data into an array, indexed by the
    metadata type. With the array complete, we can search the array to see whether
    it contains an `Exif` tag for `GPSInfo`. If it does contain a `GPSInfo` tag, then
    we will know the object contains GPS Metadata and we can print a message to the
    screen.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个脚本中，我们将Exif数据解析为一个由元数据类型索引的数组。有了完整的数组，我们可以搜索数组，看它是否包含`GPSInfo`的`Exif`标签。如果它包含`GPSInfo`标签，那么我们将知道该对象包含GPS元数据，我们可以在屏幕上打印一条消息。
- en: 'In the following image, we can see that we have also obtained information in
    the `GPSInfo` object about the location of the image:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图像中，我们可以看到我们还在`GPSInfo`对象中获取了有关图像位置的信息：
- en: '![](assets/e0157494-f454-414c-a0bc-088c111e5445.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e0157494-f454-414c-a0bc-088c111e5445.png)'
- en: Extracting metadata from web images
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从网络图像中提取元数据
- en: In this section, we are going to build a script to connect to a Website, download
    all the images on the site, and then check them for `Exif` metadata.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个脚本，连接到一个网站，下载网站上的所有图像，然后检查它们的`Exif`元数据。
- en: 'For this task, we are using the `urllib` module from python3 that provides
    `parse` and `request` packages:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个任务，我们使用了Python3的`urllib`模块，提供了`parse`和`request`包：
- en: '[https://docs.python.org/3.0/library/urllib.parse.html](https://docs.python.org/3.0/library/urllib.parse.html)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3.0/library/urllib.parse.html](https://docs.python.org/3.0/library/urllib.parse.html)'
- en: '[https://docs.python.org/3.0/library/urllib.request.html](https://docs.python.org/3.0/library/urllib.request.html)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3.0/library/urllib.request.html](https://docs.python.org/3.0/library/urllib.request.html)'
- en: You can find the following code in the  `exif_images_web_page.py` file in the
    `exiftags` folder.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`exiftags`文件夹中的`exif_images_web_page.py`文件中找到以下代码。
- en: 'This script contains the methods for find images in a website with `BeautifulSoup`
    and the `lxml parser`, and download images in an images folder:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本包含使用`BeautifulSoup`和`lxml解析器`在网站中查找图像以及在图像文件夹中下载图像的方法：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is the function that extract metadata from images inside the images directory:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从图像目录中提取图像元数据的函数：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is our main method that gets a url from parameter and calls the `findImages(url)`, `downloadImage(imgTags)`,and
    `printMetadata()` methods:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的主要方法，它从参数中获取一个url，并调用`findImages(url)`，`downloadImage(imgTags)`和`printMetadata()`方法：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Extracting metadata from pdf documents
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从pdf文档中提取元数据
- en: In this section, we review how to extract metadata from pdf documents with `pyPDF2`
    module.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾如何使用`pyPDF2`模块从pdf文档中提取元数据。
- en: Introduction to PyPDF2
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyPDF2简介
- en: One of the modules available in Python to extract data from PDF documents is
    `PyPDF2`. The module can be downloaded directly with the pip install utility since
    it is located in the official Python repository .
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Python中用于从PDF文档中提取数据的模块之一是`PyPDF2`。该模块可以直接使用pip install实用程序下载，因为它位于官方Python存储库中。
- en: 'In the [https://pypi.org/project/PyPDF2/](https://pypi.org/project/PyPDF2/) URL,
    we can see the last version of this module:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://pypi.org/project/PyPDF2/](https://pypi.org/project/PyPDF2/) URL中，我们可以看到这个模块的最新版本：
- en: '![](assets/96634174-b564-4c43-a5db-ad1ba4d42650.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/96634174-b564-4c43-a5db-ad1ba4d42650.png)'
- en: 'This module offers us the ability to extract document information, and encrypt
    and decrypt documents. To extract metadata, we can use the `PdfFileReader` class
    and the `getDocumentInfo()` method, which returns a dictionary with the data of
    the document:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块为我们提供了提取文档信息、加密和解密文档的能力。要提取元数据，我们可以使用`PdfFileReader`类和`getDocumentInfo()`方法，它返回一个包含文档数据的字典：
- en: '![](assets/084b4e2a-7946-45d5-b287-cacaee766c70.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/084b4e2a-7946-45d5-b287-cacaee766c70.png)'
- en: The following function would allow us to obtain the information of all the PDF
    documents that are in the "`pdf`" folder.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数将允许我们获取“pdf”文件夹中所有PDF文档的信息。
- en: 'You can find the following code in the  `extractDataFromPDF.py` file in the
    `pypdf` folder:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`pypdf`文件夹中的`extractDataFromPDF.py`文件中找到以下代码：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this part of code, we use the `getXmpMetadata()` method to obtain other
    information related to the document, such as the contributors, publisher, and
    pdf version:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分代码中，我们使用`getXmpMetadata()`方法获取与文档相关的其他信息，如贡献者、发布者和PDF版本：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The "`walk`" function within the os (operating system) module is useful for
    navigating all the files and directories that are included in a specific directory.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: os（操作系统）模块中的“walk”函数对于浏览特定目录中包含的所有文件和目录非常有用。
- en: 'In this screenshot, we can see the output of the previous script that is reading
    a file inside the pdf folder:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到先前的脚本正在读取pdf文件夹中的文件的输出：
- en: '![](assets/72fb6e0e-abf0-49bf-bbbb-9e77bd3b737d.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/72fb6e0e-abf0-49bf-bbbb-9e77bd3b737d.png)'
- en: 'Another feature it offers is the ability to decode a document that is encrypted
    with a password:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供的另一个功能是解密使用密码加密的文档：
- en: '![](assets/9e6c1da5-031c-45fe-8ef0-8206d186fcf1.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9e6c1da5-031c-45fe-8ef0-8206d186fcf1.png)'
- en: Peepdf
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Peepdf
- en: '`Peepdf` is a Python tool that analyzes PDF files and allows us to visualize
    all the objects in the document. It also has the ability to analyze different
    versions of a PDF file, sequences of objects and encrypted files, as well as modify
    and obfuscate PDF files: [http://eternal-todo.com/tools/peepdf-pdf-analysis-tool](http://eternal-todo.com/tools/peepdf-pdf-analysis-tool).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`Peepdf`是一个分析PDF文件的Python工具，允许我们可视化文档中的所有对象。它还具有分析PDF文件的不同版本、对象序列和加密文件的能力，以及修改和混淆PDF文件的能力：[http://eternal-todo.com/tools/peepdf-pdf-analysis-tool](http://eternal-todo.com/tools/peepdf-pdf-analysis-tool)。'
- en: Identifying the technology used by a website
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别网站使用的技术
- en: In this section, we review  how to identify the technology used by a website
    with builtwith and Wappalyzer.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将回顾如何使用builtwith和Wappalyzer来识别网站使用的技术。
- en: Introduction to the builtwith module
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍builtwith模块
- en: 'The type of technology used to build a website will affect the way you track
    it. To identify this information, you can make use of tools such as Wappalyzer
    and Builtwith ([https://builtwith.com](https://builtwith.com)). A useful tool
    to verify the type of technologies a website is built with the module is builtWith,
    which can be installed with:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 构建网站所使用的技术类型将影响您跟踪它的方式。要识别这些信息，您可以利用Wappalyzer和Builtwith等工具（[https://builtwith.com](https://builtwith.com)）。验证网站所使用的技术类型的有用工具是builtWith模块，可以通过以下方式安装：
- en: '`pip install builtwith`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install builtwith`'
- en: 'This module has a method called `parse`, which is passed by the URL parameter
    and returns as a response the technologies used by the website. Here is an example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块有一个名为`parse`的方法，通过URL参数传递，并返回网站使用的技术作为响应。以下是一个示例：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The documentation is available at [https://bitbucket.org/richardpenman/builtwith](https://bitbucket.org/richardpenman/builtwith) and
    the module is available on the pypi repository at [https://pypi.org/project/builtwith/](https://pypi.org/project/builtwith/).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 文档可在[https://bitbucket.org/richardpenman/builtwith](https://bitbucket.org/richardpenman/builtwith)上找到，模块可在pypi存储库的[https://pypi.org/project/builtwith/](https://pypi.org/project/builtwith/)上找到。
- en: Wappalyzer
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wappalyzer
- en: Another tool for recovering this kind of information is Wappalyzer. Wappalyzer
    has a database of web application signatures that allows you to identify more
    than 900 web technologies from more than 50 categories.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用于恢复此类信息的工具是Wappalyzer。Wappalyzer具有Web应用程序签名数据库，允许您从50多个类别中识别900多种Web技术。
- en: 'The tool analyzes multiple elements of the website to determine its technologies,
    it analyzes the following HTML elements:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具分析网站的多个元素以确定其技术，它分析以下HTML元素：
- en: HTTP response headers on the server
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器上的HTTP响应头
- en: Meta HTML tags
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meta HTML标签
- en: JavaScript files, both separately and embedded in the HTML
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript文件，包括单独的文件和嵌入在HTML中的文件
- en: Specific HTML content
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定的HTML内容
- en: HTML-specific comments
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML特定注释
- en: '`python-Wappalyzer` is a Python interface for obtaining this information from
    a Python script ([https://github.com/chorsley/python-Wappalyzer](https://github.com/chorsley/python-Wappalyzer)):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`python-Wappalyzer`是一个用于从Python脚本获取此信息的Python接口（[https://github.com/chorsley/python-Wappalyzer](https://github.com/chorsley/python-Wappalyzer)）：'
- en: '`pip install python-Wappalyzer`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install python-Wappalyzer`'
- en: 'We can easily use the wappalyzer module to obtain information about technologies
    used in frontend and backend layers in a website:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地使用wappalyzer模块获取网站前端和后端层中使用的技术的信息：
- en: '![](assets/8e3d7549-09c9-4ca7-97d8-7249430b6263.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8e3d7549-09c9-4ca7-97d8-7249430b6263.png)'
- en: wig – webapp information gatherer
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wig - webapp信息收集器
- en: wig is a tool developed in Python3 of information collection of web applications,
    which can identify numerous content-management systems and other administrative
    applications. Each detected CMS is displayed along with the most probable version
    of it. Internally, it obtains the operating system on the server from the 'server'
    and 'x powered-by' headers ([https://github.com/jekyc/wig](https://github.com/jekyc/wig)).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: wig是一个用Python3开发的Web应用信息收集工具，可以识别多个内容管理系统和其他管理应用。每个检测到的CMS都会显示其最可能的版本。在内部，它从'server'和'x
    powered-by'头部获取服务器上的操作系统（[https://github.com/jekyc/wig](https://github.com/jekyc/wig)）。
- en: 'These are the options provided by wig script over the Python3 environment:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是wig脚本在Python3环境中提供的选项：
- en: '![](assets/dab0ef28-bbd1-447e-83d9-c69820d648cc.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dab0ef28-bbd1-447e-83d9-c69820d648cc.png)'
- en: 'In this image, we can see the technologies used by the [testphp.vulneb.com](http://testphp.vulneb.com)
    site:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张图片中，我们可以看到[testphp.vulneb.com](http://testphp.vulneb.com)网站使用的技术：
- en: '![](assets/da6a018b-c973-400c-ba94-be4bd3af290b.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/da6a018b-c973-400c-ba94-be4bd3af290b.png)'
- en: 'In this image, we can see how it detects the CMS version and other interesting
    files used by the [drupal.com](http://drupal.com) site:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张图片中，我们可以看到它是如何检测到[drupal.com](http://drupal.com)网站使用的CMS版本和其他有趣的文件：
- en: '![](assets/9305f9f7-6133-4d00-8e5c-b4f1643a74f3.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9305f9f7-6133-4d00-8e5c-b4f1643a74f3.png)'
- en: Extracting metadata from web browsers
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Web浏览器中提取元数据
- en: In this section, we review how to extract metadata from web browsers, such as
    chrome and firefox.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将审查如何从浏览器中提取元数据，例如chrome和firefox。
- en: Firefox Forensics in Python with dumpzilla
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用dumpzilla进行Python中的Firefox取证
- en: Dumpzilla is a very useful, versatile, and intuitive tool dedicated to forensic
    analysis in Mozilla browsers. Dumpzilla has the ability to extract all the relevant
    information from the Firefox, Iceweasel, and Seamonkey browsers for further analysis
    in order to offer clues about suffered attacks, passwords, and emails. It runs
    under Unix systems and windows 32/64 bits.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Dumpzilla是一个非常有用，多功能和直观的工具，专门用于Mozilla浏览器的取证分析。Dumpzilla能够从Firefox，Iceweasel和Seamonkey浏览器中提取所有相关信息，以便进一步分析，以提供有关遭受攻击，密码和电子邮件的线索。它在Unix系统和Windows
    32/64位下运行。
- en: 'The application works under the command line and we can access a large volume
    of valuable information, among which we can find:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序在命令行下运行，我们可以访问大量有价值的信息，其中包括：
- en: Cookies + DOM Storage (HTML 5)
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookies + DOM存储（HTML 5）
- en: User preferences (domain permissions, Proxy settings)
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户偏好（域权限，代理设置）
- en: View Download history
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看下载历史记录
- en: Data of web forms (searches, emails, comments, and so on)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web表单数据（搜索，电子邮件，评论等）
- en: Markers
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记
- en: Passwords saved in the browser
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器中保存的密码
- en: Extraction of the HTML5 Cache (Offline cache)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取HTML5缓存（离线缓存）
- en: Addons and extensions and the routes or urls they have used
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件和扩展以及它们使用的路由或URL
- en: SSL certificates added as exceptions
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加为例外的SSL证书
- en: To complete the forensic analysis of the browser, it is recommended to use a
    data-extraction application from the cache, such as MozCache ([http://mozcache.sourceforge.net](http://mozcache.sourceforge.net)).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成对浏览器的取证分析，建议使用缓存中的数据提取应用程序，例如MozCache ([http://mozcache.sourceforge.net](http://mozcache.sourceforge.net))。
- en: 'Requeriments:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要求：
- en: Python 3.x version
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.x版本
- en: Unix systems (Linux or Mac) or Windows System
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix系统（Linux或Mac）或Windows系统
- en: 'Optional `Python Magic` Module: [https://github.com/ahupp/python-magic](https://github.com/ahupp/python-magic)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的`Python Magic`模块：[https://github.com/ahupp/python-magic](https://github.com/ahupp/python-magic)
- en: Dumpzilla command line
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dumpzilla命令行
- en: Locate the browser profile directory to be audited. The profiles are located
    in different directories, depending your operating system. The first step is to
    know the directory where the information of the user profiles of the browser is
    stored.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 找到要进行审计的浏览器配置文件目录。这些配置文件位于不同的目录中，具体取决于您的操作系统。第一步是了解存储浏览器用户配置文件信息的目录。
- en: 'These are the locations for each operating system:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作系统的位置如下：
- en: 'Win7 and 10 profiles: `''C:\Users\%USERNAME%\AppData\Roaming\Mozilla\Firefox\Profiles\xxxx.default''`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win7和10配置文件：`'C:\Users\%USERNAME%\AppData\Roaming\Mozilla\Firefox\Profiles\xxxx.default'`
- en: 'MacOS profile: `''/Users/$USER/Library/Application Support/Firefox/Profiles/xxxx.default''`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MacOS配置文件：`'/Users/$USER/Library/Application Support/Firefox/Profiles/xxxx.default'`
- en: 'Unix profile: `''/home/$USER/.mozilla/firefox/xxxx.default''`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix配置文件：`'/home/$USER/.mozilla/firefox/xxxx.default'`
- en: You can download the `dumpzilla` Python script from the git repository and run
    the script with Python3 pointing it to the location of your browser profile directory: [https://github.com/Busindre/dumpzilla](https://github.com/Busindre/dumpzilla).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从git存储库下载`dumpzilla` Python脚本，并使用Python3运行该脚本，指向您的浏览器配置文件目录的位置：[https://github.com/Busindre/dumpzilla](https://github.com/Busindre/dumpzilla)。
- en: 'These are the options the script provides:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是脚本提供的选项：
- en: '[PRE17]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](assets/e2a8fff8-a533-46c2-b5cb-2d367f649f00.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e2a8fff8-a533-46c2-b5cb-2d367f649f00.png)'
- en: 'This returns a report about internet browsing information, then shows a summary
    chart of information gathered:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回有关互联网浏览信息的报告，然后显示所收集信息的摘要图表：
- en: '![](assets/f56fbaef-b459-4144-9333-b27ca3cc2bbd.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f56fbaef-b459-4144-9333-b27ca3cc2bbd.png)'
- en: Firefox forensics in Python with firefeed
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用firefeed进行Python中的Firefox取证
- en: Firefed is a tool, run in command-line mode, that allows you to inspect Firefox
    profiles. It is possible to extract stored passwords, preferences, plugins, and
    history ([https://github.com/numirias/firefed](https://github.com/numirias/firefed)).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Firefed是一个工具，以命令行模式运行，允许您检查Firefox配置文件。可以提取存储的密码，偏好设置，插件和历史记录（[https://github.com/numirias/firefed](https://github.com/numirias/firefed)）。
- en: 'These are the options available for the `firefed` script:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是`firefed`脚本提供的选项：
- en: '![](assets/316eecbb-179b-4dff-be66-172f3b61937d.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/316eecbb-179b-4dff-be66-172f3b61937d.png)'
- en: This tool reads the `profiles.ini` file that is located in your username firefox
    profile.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具读取位于您的用户名火狐配置文件中的`profiles.ini`文件。
- en: In window operating system this file is located in `C:\Users\username\AppData\Roaming\Mozilla\Firefox`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows操作系统中，此文件位于`C:\Users\username\AppData\Roaming\Mozilla\Firefox`。
- en: Also you can detect this folder with the `%APPDATA%\Mozilla\Firefox\Profiles`
    command.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`%APPDATA%\Mozilla\Firefox\Profiles`命令检测此文件夹。
- en: More information can be found in the official documentation from the mozilla
    website: [https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data#w_how-do-i-find-my-profile](https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data#w_how-do-i-find-my-profile).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅mozilla网站的官方文档：[https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data#w_how-do-i-find-my-profile](https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data#w_how-do-i-find-my-profile)。
- en: Chrome forensics with python
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行Chrome取证
- en: 'Google Chrome stores the browser history in a SQLite database in the following
    locations:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome将浏览历史记录存储在以下位置的SQLite数据库中：
- en: 'Windows 7 and 10: `C:\Users\[USERNAME]\AppData\Local\Google\Chrome\`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 7和10：`C:\Users\[USERNAME]\AppData\Local\Google\Chrome\`
- en: 'Linux: `/home/$USER/.config/google-chrome/`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux：`/home/$USER/.config/google-chrome/`
- en: The database file that contains the browsing history is stored under the Default
    folder as "History" and can be examined using any SQlite browser ([https://sqlitebrowser.org/](https://sqlitebrowser.org/)).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 包含浏览历史记录的数据库文件存储在名为“History”的Default文件夹下，可以使用任何SQlite浏览器（[https://sqlitebrowser.org/](https://sqlitebrowser.org/)）进行检查。
- en: 'On a Windows machine, this database usually can be found under the following
    path:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows计算机上，该数据库通常可以在以下路径下找到：
- en: '`C:\Users\<YOURUSERNAME>\AppData\Local\Google\Chrome\User Data\Default`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Users\<YOURUSERNAME>\AppData\Local\Google\Chrome\User Data\Default`'
- en: For example, with windows OS in path `C:\Users\<username>\AppData\Local\Google\Chrome\User
    Data\Default\History` we can find the sqlite database that stores Chrome's web
    history.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Windows操作系统中，路径为`C:\Users\<username>\AppData\Local\Google\Chrome\User Data\Default\History`，我们可以找到存储Chrome浏览历史记录的SQLite数据库。
- en: 'Here are the tables for the History Database and the associated fields:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是历史数据库和相关字段的表：
- en: '**downloads:** `id`, `current_path`, `target_path`, `start_time`, `received_bytes`,
    `total_bytes`, `state`, `danger_type`, `interrupt_reason`, `end_time`, `opened`,
    `referrer`, `by_ext_id`, `by_ext_name`, `etag`, `last_modified`, `mime_type`,
    `original_mime_type`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**downloads:** `id`, `current_path`, `target_path`, `start_time`, `received_bytes`,
    `total_bytes`, `state`, `danger_type`, `interrupt_reason`, `end_time`, `opened`,
    `referrer`, `by_ext_id`, `by_ext_name`, `etag`, `last_modified`, `mime_type`,
    `original_mime_type`'
- en: '**downloads_url_chains**: `id`, `chain_index`, `url`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**downloads_url_chains**: `id`, `chain_index`, `url`'
- en: '**keyword_search_terms:** `keyword_id`, `url_id`, `lower_term`, `term`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**keyword_search_terms:** `keyword_id`, `url_id`, `lower_term`, `term`'
- en: '**meta:** `key`, `value`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**meta:** `key`, `value`'
- en: '**segment_usage:**  `id`, `segment_id`, `time_slot`, `visit_count`'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**segment_usage:**  `id`, `segment_id`, `time_slot`, `visit_count`'
- en: '**segments:** `id`, `name`, `url_id`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**segments:** `id`, `name`, `url_id`'
- en: '**urls:** `id`, `url`, `title`, `visit_count`, `typed_count`, `last_visit_time`,
    `hidden`, `favicon_id`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**urls:** `id`, `url`, `title`, `visit_count`, `typed_count`, `last_visit_time`,
    `hidden`, `favicon_id`'
- en: 'In this image, we can see a screenshot of the SQlite browser with tables available
    in the History Database:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张图片中，我们可以看到一个SQlite浏览器的截图，显示了历史数据库中可用的表：
- en: '![](assets/adc00515-d4fc-4183-aa0e-2c22b59573a4.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/adc00515-d4fc-4183-aa0e-2c22b59573a4.png)'
- en: Chrome stores its data locally in a `SQLite database.` So all we need to do
    is write a Python script that would make a connection to the database, query the
    necessary fields, and extract the data from tables.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome将其数据本地存储在一个`SQLite数据库`中。因此，我们只需要编写一个Python脚本，该脚本将连接到数据库，查询必要的字段，并从表中提取数据。
- en: We can build a Python script that extracts information from the downloads table. Only
    you to need **`import the sqlite3`** module that comes with the Python installation.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写一个Python脚本，从下载表中提取信息。您只需要**`导入sqlite3`**模块，该模块随Python安装而来。
- en: 'You can find the following code in the `ChromeDownloads.py` file compatible
    with Python3.x:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在与Python3.x兼容的`ChromeDownloads.py`文件中找到以下代码：
- en: '[PRE18]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can see the options that provide the script with the `-h` argument:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到提供脚本使用`-h`参数的选项：
- en: '`python .\ChromeDownloads.py -h`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`python .\ChromeDownloads.py -h`'
- en: 'To execute the previous script, we need pass as a parameter the location of
    your history file database:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行前面的脚本，我们需要传递一个参数，即您的历史文件数据库的位置：
- en: '![](assets/26627db3-b833-4216-814a-422676282c04.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26627db3-b833-4216-814a-422676282c04.png)'
- en: Chrome forensics with Hindsight
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hindsight进行Chrome取证
- en: Hindsight is an open source tool for parsing a user’s Chrome browser data and allows
    you to analyze several different types of web artifacts, including URLs, download
    history, cache records, bookmarks, preferences, browser extensions, HTTP cookies,
    and local storage logs in the form of cookies.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Hindsight是一个用于解析用户Chrome浏览器数据的开源工具，允许您分析多种不同类型的Web工件，包括URL、下载历史、缓存记录、书签、偏好设置、浏览器扩展、HTTP
    cookie和以cookie形式的本地存储日志。
- en: 'The tool is available in the GitHub and pip repositories:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具可以在GitHub和pip存储库中找到：
- en: '[https://github.com/obsidianforensics/hindsight](https://github.com/obsidianforensics/hindsight)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/obsidianforensics/hindsight](https://github.com/obsidianforensics/hindsight)'
- en: '[https://pypi.org/project/pyhindsight/](https://pypi.org/project/pyhindsight/)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pypi.org/project/pyhindsight/](https://pypi.org/project/pyhindsight/)'
- en: 'In this screenshot, we can see the last version of this module:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到这个模块的最新版本：
- en: '![](assets/d756ebc5-251d-4a2f-814c-fd736f30110a.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d756ebc5-251d-4a2f-814c-fd736f30110a.png)'
- en: We can install it with the `pip install pyhindsight` command.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`pip install pyhindsight`命令进行安装。
- en: 'Once we have installed the module, we can download the source code from the
    GitHub repository:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了模块后，我们可以从GitHub存储库下载源代码：
- en: '[https://github.com/obsidianforensics/hindsight](https://github.com/obsidianforensics/hindsight)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/obsidianforensics/hindsight](https://github.com/obsidianforensics/hindsight)'
- en: '![](assets/a5bb0376-8c43-4192-a408-20ec966dec2b.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a5bb0376-8c43-4192-a408-20ec966dec2b.png)'
- en: We can execute it in two ways. The first one is using the `hindsight.py` script,
    and the second one is by launching the `hindsight_gui.py` script, which provides
    a web interface for entering the location where chrome profile is located.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以两种方式执行它。第一种是使用`hindsight.py`脚本，第二种是通过启动`hindsight_gui.py`脚本，它提供了一个用于输入Chrome配置文件位置的Web界面。
- en: 'For execution with `hindsight.py`, we only need to pass as a mandatory parameter
    (**`-i`,**`--input`) the location of your chrome profile, depending your operating
    system:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用`hindsight.py`执行，我们只需要传递一个强制参数(**`-i`,**`--input`)，即您的Chrome配置文件的位置，具体取决于您的操作系统：
- en: '![](assets/99747764-86a9-46c2-a70e-e9069eefbfe9.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/99747764-86a9-46c2-a70e-e9069eefbfe9.png)'
- en: 'These are the default locations for chrome profile that we need to know for
    setting the input parameter:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们需要了解的Chrome配置文件的默认位置，以设置输入参数：
- en: '![](assets/a369573f-47a5-45f5-89dc-8279e084dd7f.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a369573f-47a5-45f5-89dc-8279e084dd7f.png)'
- en: 'The second way is to run "`hindsight_gui.py`" and visit [http://localhost:8080](http://localhost:8080)
    in a browser:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是运行“`hindsight_gui.py`”并在浏览器中访问[http://localhost:8080](http://localhost:8080)：
- en: '![](assets/34b8947b-9ba6-4b35-bc92-289def323701.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/34b8947b-9ba6-4b35-bc92-289def323701.png)'
- en: 'The only mandatory field is the profile path:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一强制性的字段是配置文件路径：
- en: '![](assets/de7e2530-62f9-4383-be72-4ad4c5e50beb.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de7e2530-62f9-4383-be72-4ad4c5e50beb.png)'
- en: If we try to run the script with the chrome browser process opened, it will
    block the process, since we need to close the chrome browser before running it.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在打开Chrome浏览器进程的情况下运行脚本，它将阻止该进程，因为我们需要在运行之前关闭Chrome浏览器。
- en: 'This is the error message when you try to execute the script with the chrome
    process running:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当您尝试执行脚本时，chrome进程正在运行时的错误消息：
- en: '![](assets/b10ab9d9-ab8e-43d6-a1d4-80bdf11bd1bb.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b10ab9d9-ab8e-43d6-a1d4-80bdf11bd1bb.png)'
- en: Summary
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: One of the objectives of this chapter was to learn about the modules that allow
    us to extract metadata from documents and images, as well as to extract geolocation
    information from IP addresses and domain names. We discussed how to obtain domain,
    information such as how technologies and CMS are being used in a certain web page.
    Finally,we reviewed how to extract metadata from web browsers such as chrome and
    firefox. All the tools reviewed in this chapter allow us to get information that
    may be useful for later phases of our pentesting or audit process.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标之一是了解允许我们从文档和图像中提取元数据的模块，以及从IP地址和域名中提取地理位置信息的模块。我们讨论了如何获取域名信息，例如特定网页中使用的技术和CMS。最后，我们回顾了如何从Chrome和Firefox等网络浏览器中提取元数据。本章中审查的所有工具都允许我们获取可能对我们的渗透测试或审计过程的后续阶段有用的信息。
- en: In the next [chapter](7ae7e7c7-4cfb-48fc-9e38-d52ff21d9c9d.xhtml), we will explore
    programming packages and Python modules for implementing cryptography and steganography.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一[章节](7ae7e7c7-4cfb-48fc-9e38-d52ff21d9c9d.xhtml)中，我们将探讨用于实现加密和隐写术的编程包和Python模块。
- en: Questions
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which module available in Python allows us to retrieve geographic information
    from an IP address?
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中哪个模块允许我们从IP地址检索地理信息？
- en: Which module uses Google Geocoding API v3 services to retrieve the coordinates
    of a specific address?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个模块使用Google Geocoding API v3服务来检索特定地址的坐标？
- en: What is the main class of the `Pygeocoder` module that allows queries to be
    made both from the description of a place and from a specific location?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Pygeocoder`模块的主要类是什么，它允许从地点描述和特定位置进行查询？'
- en: Which method allows the reverse process to recover the address of said site
    from the coordinates corresponding to the latitude and longitude?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种方法允许反向过程从对应于纬度和经度的坐标中恢复所述站点的地址？
- en: Which method within the `pygeoip` module allows us to obtain the value of the
    country name from the ip address passed by parameter?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygeoip`模块中的哪个方法允许我们从传递的IP地址获取国家名称的值？'
- en: Which method within the `pygeoip` module allows us to obtain a structure in
    the form of a dictionary with the geographic data (country, city, area, latitude,
    longitude) from the ip address?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygeoip`模块中的哪个方法允许我们从IP地址获取地理数据（国家、城市、地区、纬度、经度）的字典形式的结构？'
- en: Which method within the `pygeoip` module allows us to obtain the name of the
    organization from the domain name?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygeoip`模块中的哪个方法允许我们从域名获取组织的名称？'
- en: Which Python module allows us to extract metadata from PDF documents?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Python模块允许我们从PDF文档中提取元数据？
- en: Which class and method can we use to obtain the information of a PDF document?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪个类和方法来获取PDF文档的信息？
- en: Which module allows us to extract the image information from the tags in EXIF?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个模块允许我们从EXIF标签中提取图像信息？
- en: Further reading
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In these links, you will find more information about the tools mentioned in
    this chapter and their official documentation:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些链接中，您将找到有关本章中提到的工具及其官方文档的更多信息：
- en: '[https://bitbucket.org/xster/pygeocoder/wiki/Home](https://bitbucket.org/xster/pygeocoder/wiki/Home)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://bitbucket.org/xster/pygeocoder/wiki/Home](https://bitbucket.org/xster/pygeocoder/wiki/Home)'
- en: '[https://chrisalbon.com/python/data_wrangling/geocoding_and_reverse_geocoding/](https://chrisalbon.com/python/data_wrangling/geocoding_and_reverse_geocoding/)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://chrisalbon.com/python/data_wrangling/geocoding_and_reverse_geocoding/](https://chrisalbon.com/python/data_wrangling/geocoding_and_reverse_geocoding/)'
- en: '[https://pythonhosted.org/PyPDF2](https://pythonhosted.org/PyPDF2)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://pythonhosted.org/PyPDF2](https://pythonhosted.org/PyPDF2)'
- en: '[http://www.dumpzilla.org](http://www.dumpzilla.org)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.dumpzilla.org](http://www.dumpzilla.org)'
- en: '[https://tools.kali.org/forensics/dumpzilla](https://tools.kali.org/forensics/dumpzilla)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://tools.kali.org/forensics/dumpzilla](https://tools.kali.org/forensics/dumpzilla)'
- en: '[http://forensicswiki.org/wiki/Google_Chrome](http://forensicswiki.org/wiki/Google_Chrome)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://forensicswiki.org/wiki/Google_Chrome](http://forensicswiki.org/wiki/Google_Chrome)'
- en: '[https://sourceforge.net/projects/chromensics](https://sourceforge.net/projects/chromensics)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://sourceforge.net/projects/chromensics](https://sourceforge.net/projects/chromensics)'
