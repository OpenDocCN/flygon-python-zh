- en: Reading Raspberry Pi GPIO Sensor Data Using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python读取树莓派GPIO传感器数据
- en: In [Chapter 7](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml), *Setting U**p a
    Raspberry Pi Web Server*, we used the GPIO Zero library to turn on servos and
    light up LEDs. In this chapter, we will use GPIO Zero to read inputs from the
    GPIO port. First, we will start with a simple button, before moving on to **Passive
    Infrared** (**PIR**) motion sensors and buzzers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](4c4cf44d-ff8a-4cb4-9d8c-85530b0d873b.xhtml)中，*设置树莓派Web服务器*，我们使用GPIO Zero库来控制舵机和LED灯。在本章中，我们将使用GPIO
    Zero来读取GPIO端口的输入。首先，我们将从一个简单的按钮开始，然后转向**被动红外**（**PIR**）运动传感器和蜂鸣器。
- en: Having the ability to read sensory data from the GPIO will allow us to build
    our IoT home security dashboard. By the end of this chapter, we should become
    very familiar with programming the Raspberry Pi with components connected to the
    GPIO.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 能够从GPIO读取传感器数据将使我们能够构建我们的物联网家庭安全仪表板。在本章结束时，我们应该对使用连接到GPIO的组件编程树莓派非常熟悉。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Reading the state of a button
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取按钮的状态
- en: Reading the state from an infrared motion sensor
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从红外运动传感器读取状态
- en: Modifying `Hello LED` using an infrared sensor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用红外传感器修改`Hello LED`
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: In this chapter, we will create two different types of alarm system. We will
    start by learning how to read GPIO sensory data from a push-button. We will then
    learn how to interact with a PIR sensor and distance sensor. Lastly, we will learn
    how to hook up an active buzzer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建两种不同类型的报警系统。我们将首先学习如何从按钮读取GPIO传感器数据。然后，我们将学习如何与PIR传感器和距离传感器交互。最后，我们将学习如何连接一个有源蜂鸣器。
- en: This chapter should take about 3 hours to complete.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章应该需要大约3小时完成。
- en: Getting started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'To complete this project, the following will be required:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个项目，需要以下材料：
- en: A Raspberry Pi Model 3 (2015 model or newer)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派3型（2015年或更新型号）
- en: A USB power supply
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB电源供应
- en: A computer monitor
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台电脑显示器
- en: A USB keyboard
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB键盘
- en: A USB mouse
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个USB鼠标
- en: A breadboard
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个面包板
- en: Jumper wires
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: A PIR sensor
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个PIR传感器
- en: A distance sensor
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个距离传感器
- en: A active buzzer
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有源蜂鸣器
- en: An LED
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LED
- en: A push-button (momentary)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮（瞬时）
- en: A push-button (latching)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮（锁定式）
- en: A key switch (optional)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个键开关（可选）
- en: Reading the state of a button
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取按钮的状态
- en: '`Button`, from the `GPIO Zero` library, gives us an easy way to interact with
    a typical button connected to the GPIO. We will cover the following in this section:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Button`，来自`GPIO Zero`库，为我们提供了一种与连接到GPIO的典型按钮进行交互的简单方法。本节将涵盖以下内容：'
- en: Using GPIO Zero with a button
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GPIO Zero与按钮
- en: Using the Sense HAT emulator and GPIO Zero button together
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sense HAT模拟器和GPIO Zero按钮
- en: Toggling an LED with a long button press
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用长按按钮切换LED
- en: Using GPIO Zero with a button
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GPIO Zero与按钮
- en: 'Connecting a push-button is relatively easy with the GPIO. The following is
    the connection diagram showing the process:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GPIO连接按钮相对容易。以下是显示连接过程的连接图：
- en: '![](assets/d70e80e0-3c45-4b64-acf3-417770f347c0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d70e80e0-3c45-4b64-acf3-417770f347c0.png)'
- en: Connect the push-button so that one end is connected to ground using a jumper.
    Connect the other end to GPIO 4 on the Raspberry Pi.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将按钮连接，使一端使用跳线连接到地。将另一端连接到树莓派上的GPIO 4。
- en: 'In Thonny, create a new file and call it `button_press.py`. Then, type following
    into the file and run it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中，创建一个新文件并将其命名为`button_press.py`。然后，输入以下内容并运行：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should now see the message `"The Button on GPIO 4 has been pressed"` in
    the shell whenever you push the button. The code will run continuously until you
    click on the Reset button.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下按钮时，你现在应该在壳中看到消息`“GPIO 4上的按钮已被按下”`。代码将持续运行，直到你点击重置按钮。
- en: 'Let''s take a look at the code. We start by importing `Button` from `GPIO Zero`,
    and `sleep` from the `time` library:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码。我们首先从`GPIO Zero`导入`Button`，并从`time`库导入`sleep`：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We then create a new `button` object and assign it to GPIO pin `4` with the
    following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个新的`button`对象，并使用以下代码将其分配给GPIO引脚`4`：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our continuous loop checks to see whether the button is currently pressed,
    and prints out a statement to our shell if it is:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的连续循环检查按钮当前是否被按下，并在壳中打印出一条语句：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using the Sense HAT emulator and GPIO Zero button together
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sense HAT模拟器和GPIO Zero按钮
- en: We use push-buttons every day, whether that be in selecting a floor in an elevator
    or starting our car. Modern technology allows us to separate the push-button from
    the physical device that it controls. In other words, pushing a button can set
    in motion many different events that really have nothing to do with the button.
    We can emulate this detachment with our push-button and the Sense HAT emulator.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天都使用按钮，无论是在电梯中选择楼层还是启动汽车。现代技术使我们能够将按钮与其控制的物理设备分离。换句话说，按下按钮可以引发许多与按钮无关的事件。我们可以使用我们的按钮和Sense
    HAT模拟器来模拟这种分离。
- en: I can just picture some of you wondering what separating a button from what
    it is controlling actually means. To help you visualize it, picture a latching
    push-button that controls a light. When the button is pressed down, the circuit
    is completed and electricity runs through the leads on the push-button. With the
    use of controllers and computers such as the Raspberry Pi, all that the push-button
    is required to do is change its state. The controller or computer takes that state
    and performs actions that are completely separated from the push-button itself.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以想象你们中的一些人在想分离按钮与其控制对象实际意味着什么。为了帮助你们形象化，想象一下一个控制灯的锁定式按钮。当按钮被按下时，电路闭合，电流通过按钮上的引线流动。通过使用控制器和计算机，比如树莓派，按钮所需做的就是改变它的状态。控制器或计算机接收该状态并执行与按钮本身完全分离的操作。
- en: 'Load the Sense HAT emulator from the Programming menu in Raspbian. Create a
    new Python file in Thonny and call it `sense-button.py`. Enter the following code
    into the file, and then click on the Run icon when done:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从Raspbian的编程菜单中加载Sense HAT模拟器。在Thonny中创建一个名为`sense-button.py`的新的Python文件。输入以下代码到文件中，然后在完成后单击运行图标：
- en: '![](assets/38d82455-991a-4e29-8de5-31d33de635a7.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/38d82455-991a-4e29-8de5-31d33de635a7.png)'
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you do not have any errors in your code, you should see that the display
    on the Sense HAT emulator changes to a red `X` on a white background when you
    press the button:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码没有任何错误，当您按下按钮时，您应该会看到Sense HAT模拟器上的显示屏变成白色背景上的红色`X`：
- en: 'Let''s explain the preceding code a bit. We start off by importing the libraries
    we need for our code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微解释一下上面的代码。我们首先导入我们代码所需的库：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We then create new button and Sense HAT emulator objects. Our `button` is once
    again connected to GPIO pin `4`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建新的按钮和Sense HAT模拟器对象。我们的`button`再次连接到GPIO引脚`4`：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `display_x_mark` method creates an `X` in the display by using the `SenseHat`
    method `set_pixels`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`display_x_mark`方法通过使用`SenseHat`方法`set_pixels`在显示器上创建一个`X`：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `X` and `O` variables are used to hold color codes, with `(255,0,0)` being
    red, and `(255,255,255)` as white. The variable `x_mark` creates an 8 x 8 pattern
    that matches the resolution of the Sense HAT emulator screen. `x_mark` is passed
    into the `set_pixels` method of the `SenseHAT` object.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`X`和`O`变量用于保存颜色代码，`(255,0,0)`表示红色，`(255,255,255)`表示白色。变量`x_mark`创建一个与Sense
    HAT模拟器屏幕分辨率匹配的8 x 8图案。`x_mark`被传递到`SenseHAT`对象的`set_pixels`方法中。'
- en: Our continuous loop checks the `is_pressed` status of the button and calls the
    `display_x_mark` method if the status returns `true`. This method then prints
    a red `X` against a white background.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的连续循环检查按钮的`is_pressed`状态，并在状态返回`true`时调用`display_x_mark`方法。然后该方法会在白色背景上打印一个红色的`X`。
- en: 'The display is cleared with `sense.clear()` when the button is not in the pressed
    state:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮未处于按下状态时，使用`sense.clear()`清除显示：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Toggling an LED with a long button press
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用长按按钮切换LED
- en: With the `GPIO Zero` library, we can not only detect when a button has been
    pressed, but can also detect how long it has been pressed for. We will use the
    `hold_time` property and the `when_held` method to determine whether the button
    has been pressed for a certain duration. If this duration time has been exceeded,
    then we will turn an LED on and off.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`GPIO Zero`库，我们不仅可以检测按钮何时被按下，还可以检测按下多长时间。我们将使用`hold_time`属性和`when_held`方法来确定按钮是否被按下了一段时间。如果超过了这段时间，我们将打开和关闭LED。
- en: 'The following is the circuit diagram for our program. Keep the push-button
    wired to GPIO pin 4\. Use GPIO pin 17 for the LED, as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们程序的电路图。将按钮连接到GPIO引脚4。使用GPIO引脚17来连接LED，如图所示：
- en: '![](assets/e895d707-f0b5-45aa-85f4-b08962d1569d.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e895d707-f0b5-45aa-85f4-b08962d1569d.png)'
- en: 'Create a new file in Thonny and call it `buttonheld-led.py`. Type in the following
    and click on Run:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中创建一个名为`buttonheld-led.py`的新文件。输入以下内容并单击运行：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Hold down the push-button for `5` seconds. You should see the LED toggle on.
    Now hold it again for another `5` seconds. The LED should toggle off.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 按下按钮保持`5`秒。您应该会看到LED切换开。现在再按下`5`秒。LED应该会切换关闭。
- en: 'We''ve covered the first four lines of the code in previous examples. Let''s
    look at where the hold time for the button is set:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前的示例中涵盖了代码的前四行。让我们看看按钮的保持时间是如何设置的：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This line sets the hold time for the button at `5` seconds. The `when_held`
    method is called in our continuous loop:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行将按钮的保持时间设置为`5`秒。`when_held`方法在我们的连续循环中被调用：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using lambda, we are able to create an anonymous function so that we may call
    `toggle()` on the `LED` object, `led`. This toggles the LED both on and off.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用lambda，我们能够创建一个匿名函数，以便我们可以在`LED`对象`led`上调用`toggle()`。这会将LED打开和关闭。
- en: Reading the state from an infrared motion sensor
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从红外运动传感器中读取状态
- en: 'Alarm systems using motion sensors are a ubiquitous part of our society. With
    our Raspberry Pi, they are incredibly easy to build. We will cover the following
    in this section:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用运动传感器的报警系统是我们社会中无处不在的一部分。使用我们的树莓派，它们非常容易构建。我们将在本节中涵盖以下内容：
- en: What is a PIR sensor?
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是PIR传感器？
- en: Using the `GPIO buzzer` class
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`GPIO蜂鸣器`类
- en: Building a basic alarm system
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个基本的报警系统
- en: What is a PIR sensor?
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是PIR传感器？
- en: 'PIR sensors, a type of motion sensor, are used to detect motion. Applications
    for PIR sensors are pretty much based on detecting motion for security systems.
    PIR stands for passive infrared, and PIR sensors contain a crystal that detects
    low-level radiation. PIR sensors are actually constructed in two halves, as it
    is the difference between the halves that detects motion. The following is a photo
    of an inexpensive PIR sensor:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: PIR传感器是一种运动传感器，用于检测运动。 PIR传感器的应用主要基于为安全系统检测运动。 PIR代表被动红外线，PIR传感器包含一个检测低级辐射的晶体。
    PIR传感器实际上是由两半构成的，因为两半之间的差异才能检测到运动。以下是一个廉价的PIR传感器的照片：
- en: '![](assets/80f92423-d6d9-4649-b969-40074ac2036a.png)In the preceding photo,
    we can see the positive (**+**), negative (**-**), and signal (**S**) pins. This
    particular PIR sensor sits well on a breadboard.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/80f92423-d6d9-4649-b969-40074ac2036a.png)在上面的照片中，我们可以看到正（**+**）、负（**-**）和信号（**S**）引脚。这个特定的PIR传感器很适合面包板上。'
- en: 'The following is the wiring diagram of our PIR circuit. The positive pin connects
    to the 5 V DC output on the Raspberry Pi. The negative pin connects to ground
    (GND), and the signal connects to GPIO pin 4:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们PIR电路的接线图。正极引脚连接到树莓派的5V DC输出。负极引脚连接到地（GND），信号引脚连接到GPIO引脚4：
- en: '![](assets/d056ccfc-b83f-47cb-b414-f5e204570fd2.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d056ccfc-b83f-47cb-b414-f5e204570fd2.png)'
- en: 'Create a new Python file in Thonny and call it `motion-sensor.py`. Type in
    the following code and run it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中创建一个名为`motion-sensor.py`的新的Python文件。输入以下代码并运行：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You should see a message reading `Detected Motion!` when you get close to the
    PIR sensor. Try staying still and see whether you can get the message `No Motion
    Detected!` to display in the shell.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当您靠近PIR传感器时，您应该看到一条消息，上面写着`检测到运动！`。尝试保持静止，看看是否可以在shell中显示消息`未检测到运动！`。
- en: 'Our code begins by importing the `MotionSensor` class from the `GPIO Zero`
    library:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码开始时从`GPIO Zero`库中导入`MotionSensor`类：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After importing the `sleep` class, we create a new `MotionSensor` object, called
    `motion_sensor`, with the number `4` appended in order to make our program look
    for the signal on GPIO pin 4:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`sleep`类后，我们创建一个名为`motion_sensor`的新`MotionSensor`对象，附加了数字`4`，以便让我们的程序在GPIO引脚4上寻找信号：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In our continuous loop, we check the `motion_sensor` for motion with this line:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的循环中，我们使用以下代码检查`motion_sensor`是否有运动：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From here on in the code, we define the messages to print to the shell.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们定义要打印到shell的消息。
- en: Using the GPIO Zero buzzer class
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GPIO Zero蜂鸣器类
- en: 'Generally, there are two types of electronic buzzers: active and passive. An
    active buzzer has an internal oscillator and will make a sound when a direct current,
    or DC, is applied to it. A passive buzzer requires an alternating current, or
    AC, in order for it to make a sound. Passive buzzers are basically small electromagnetic
    speakers. The easiest way to tell the difference is to apply a DC supply and listen
    for a sound. For the purposes of our code, we will be using an active buzzer,
    as shown in the following photo:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，有两种类型的电子蜂鸣器：有源和无源。有源蜂鸣器具有内部振荡器，当直流（DC）施加到它时会发出声音。无源蜂鸣器需要交流（AC）才能发出声音。无源蜂鸣器基本上是小型电磁扬声器。区分它们的最简单方法是施加直流电源并听声音。对于我们的代码目的，我们将使用有源蜂鸣器，如下图所示：
- en: '![](assets/9cabbcd7-9a5f-476a-a961-170e92323f84.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9cabbcd7-9a5f-476a-a961-170e92323f84.png)'
- en: 'There is a `buzzer` class in the `GPIO Zero` library. We will use this class
    to generate a piercing alarm sound with our active buzzer. Configure the circuit
    as shown in the following diagram. The positive wire on the active buzzer connects
    to GPIO pin 17:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`GPIO Zero`库中有一个`buzzer`类。我们将使用这个类来生成有源蜂鸣器的刺耳警报声。按照以下图表配置电路。有源蜂鸣器的正极导线连接到GPIO引脚17：'
- en: '![](assets/c1e46b62-c411-4348-beb9-266ae3e17aba.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c1e46b62-c411-4348-beb9-266ae3e17aba.png)'
- en: 'Create a new Python file in Thonny and call it `buzzer-test1.py`. Type in the
    following code and run it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中创建一个新的Python文件，并将其命名为`buzzer-test1.py`。输入以下代码并运行：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Depending on the active buzzer you chose, you should hear a piercing sound
    for two seconds followed by 2 seconds of silence. The following line turns on
    the buzzer:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您选择的有源蜂鸣器，您应该听到持续两秒的刺耳声音，然后是2秒的静音。以下一行打开了蜂鸣器：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Likewise, this line in the preceding code turns off the buzzer:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，前面代码中的这行关闭了蜂鸣器：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code may be simplified by using the `toggle` method on the `buzzer` object.
    Create a new Python file in Thonny. Call it `buzzer-test2.py`. Type in the following
    and run it:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`buzzer`对象上的`toggle`方法简化代码。在Thonny中创建一个新的Python文件。将其命名为`buzzer-test2.py`。输入以下内容并运行：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should get the same results. A third way to do the same thing would be
    to use the `beep` method from the `buzzer` object. Create a new Python file in
    Thonny. Call it `buzzer-test3.py`. Type in the following and run it:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到相同的结果。执行相同操作的第三种方法是使用`buzzer`对象的`beep`方法。在Thonny中创建一个新的Python文件。将其命名为`buzzer-test3.py`。输入以下内容并运行：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `buzzer` should turn on for `2` seconds, and then off for `2` seconds,
    and repeat this for a total of `10` times. The `beep` method takes the following
    four parameters:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`buzzer`应该在`2`秒内打开，然后关闭`2`秒，重复进行`10`次。`beep`方法接受以下四个参数：'
- en: '`on_time`: This is the number of seconds the sound is on. The default is `1`
    second.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`on_time`：这是声音开启的秒数。默认值为`1`秒。'
- en: '`off_time`: This is the number of seconds the sound is off. The default is
    `1` second.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`off_time`：这是声音关闭的秒数。默认值为`1`秒。'
- en: '`n`: This is the number of times the process will run. The default is `None`,
    which means forever.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：这是进程运行的次数。默认值为`None`，表示永远。'
- en: '`background`: This determines whether or not to start a background thread to
    run the process. A `True` value runs the process in a background thread and returns
    right away. When set to `False`, return does not happen until the process is finished
    (please note that when `n` is `None`, the method never returns).'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background`：这确定是否启动后台线程来运行进程。`True`值在后台线程中运行进程并立即返回。当设置为`False`时，直到进程完成才返回（请注意，当`n`为`None`时，该方法永远不会返回）。'
- en: Building a basic alarm system
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个基本的报警系统
- en: 'Now let''s build a basic alarm system around the buzzer. Hook up the PIR sensor
    to GPIO pin 4, and a latching push-button to GPIO pin 8\. The following is the circuit
    diagram for our system:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们围绕蜂鸣器构建一个基本的报警系统。将PIR传感器连接到GPIO引脚4，并将一个锁定按钮连接到GPIO引脚8。以下是我们系统的电路图：
- en: '![](assets/2227e962-05f3-42cd-8afd-f285c678cb38.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2227e962-05f3-42cd-8afd-f285c678cb38.png)'
- en: 'Create a new file in Thonny and call it `basic-alarm-system.py`. Type in the
    following and click on Run:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中创建一个新文件，并将其命名为`basic-alarm-system.py`。输入以下内容，然后点击运行：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'What we have done here is create an alarm system with our components. We are
    using a latching push-button to turn the alarm system on and off. We could easily
    replace the latching push-button with a key switch. The following picture shows
    this change:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是使用我们的组件创建一个报警系统。我们使用一个锁定按钮来打开和关闭报警系统。我们可以很容易地用一个钥匙开关替换锁定按钮。以下图片显示了这个变化：
- en: '![](assets/7850b80f-1614-4439-91b0-8dd9269c8ade.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7850b80f-1614-4439-91b0-8dd9269c8ade.png)'
- en: This circuit can easily be transferred to a project box for use as an alarm
    system.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路可以很容易地转移到项目盒中，用作报警系统。
- en: Modifying Hello LED using infrared sensor
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用红外传感器修改Hello LED
- en: We will continue our exploration of sensors by modifying our original `Hello
    LED` code. In this project, we will combine a distance sensor with our PIR sensor,
    and flash an LED based on the values of these sensors. This circuit will not only
    tell us that someone is approaching, but will also give us an indication of how
    close they are.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过修改我们最初的“Hello LED”代码来继续探索传感器。在这个项目中，我们将距离传感器与我们的PIR传感器相结合，并根据这些传感器的值闪烁LED。这个电路不仅会告诉我们有人靠近，还会告诉我们他们有多近。
- en: 'We will cover the following in this section:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中涵盖以下内容：
- en: Configuring a distance sensor
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置距离传感器
- en: Taking `Hello LED` to another level
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将“Hello LED”提升到另一个水平
- en: Configuring a distance sensor
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置距离传感器
- en: 'We will start by configuring the distance sensor and running some code. The
    following is a circuit diagram of our distance sensor circuit:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从配置距离传感器和运行一些代码开始。以下是我们距离传感器电路的电路图：
- en: '![](assets/b0566f96-1a30-491c-97be-90aff92585be.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0566f96-1a30-491c-97be-90aff92585be.png)'
- en: 'The following are the connections to be made:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 需要进行以下连接：
- en: VCC from the motion sensor connects to the 5 V DC output from the Raspberry
    Pi
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自运动传感器的VCC连接到树莓派的5V直流输出
- en: GPIO pin 17 connects to Trig on the distance sensor
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派的GPIO引脚17连接到距离传感器的Trig
- en: Echo on the distance sensor connects to a 330 Ohm resistor
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 距离传感器上的回波连接到330欧姆电阻
- en: GND on the distance sensor connects to GND on the Raspberry Pi and a 470 Ohm
    resistor
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 距离传感器上的GND连接到树莓派上的GND和一个470欧姆电阻
- en: The other end of the 330 Ohm resistor, from the echo pin on the distance sensor,
    connects to the 470 Ohm resistor (the two resistors create a voltage divider circuit)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自距离传感器回波引脚的330欧姆电阻的另一端连接到470欧姆电阻（这两个电阻创建了一个电压分压电路）
- en: GPIO pin 18 from the Raspberry Pi connects to the intersection of the resistors
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自树莓派的GPIO引脚18连接到电阻的交叉点
- en: Of note in this circuit is the voltage divider that is created by the two resistors.
    We use this divider to connect GPIO pin 18.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个电路中值得注意的是由两个电阻创建的电压分压器。我们使用这个分压器连接GPIO引脚18。
- en: 'Create a new Python file in Thonny and call it `distance-sensor-test.py`. Type
    in the following code and run it:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中创建一个新的Python文件，并将其命名为“distance-sensor-test.py”。输入以下代码并运行：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should see an output similar to following screenshot. As you place your
    hand, or any other object, in front of the distance sensor, the value printed
    to the Shell should change, as shown here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将手或其他物体放在距离传感器前时，Shell中打印的值应该会发生变化，如下所示：
- en: '![](assets/998c5ae2-fac9-47bf-80e5-508593e35f36.png)Be sure to have the distance
    sensor on a secure, non-moving surface, such as a breadboard.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/998c5ae2-fac9-47bf-80e5-508593e35f36.png)确保将距离传感器放在稳固的、不动的表面上，比如面包板。'
- en: Taking Hello LED to another level
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将“Hello LED”提升到另一个水平
- en: Our original `Hello LED!` system was a simple circuit, which involved making
    an LED, connected to the GPIO port, blink on and off. We have covered so much
    more since creating that circuit. We will take what we've learned and create a
    new `Hello LED` circuit. With this circuit, we will create an alarm system where
    the distance from the alarm is indicated by the blinking frequency of the LED.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初的“Hello LED！”系统是一个简单的电路，涉及制作一个LED，连接到GPIO端口，闪烁开关。自从创建该电路以来，我们已经涵盖了更多内容。我们将利用我们所学到的知识创建一个新的“Hello
    LED”电路。通过这个电路，我们将创建一个报警系统，LED的闪烁频率表示报警距离。
- en: 'The following is the circuit diagram for our new `Hello LED` system:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们新的“Hello LED”系统的电路图：
- en: '![](assets/91600d51-e1a3-4ba4-8942-ac3b62b33e2e.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/91600d51-e1a3-4ba4-8942-ac3b62b33e2e.png)'
- en: 'This may look a little complex, with wires going every which way; however,
    it is quite a simple circuit. The distance sensor part is the same as it was previously.
    For the other components, connect as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有点复杂，线路到处都是；然而，这是一个非常简单的电路。距离传感器部分与以前一样。对于其他组件，连接如下：
- en: The PIR sensor's positive pin connects to 5V DC on the breadboard
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PIR传感器的正极连接到面包板上的5V直流电源
- en: The PIR sensor's negative pin connects to GND on the breadboard
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PIR传感器的负极连接到面包板上的GND
- en: The PIR sensor's signal pin connects to GPIO pin 4
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PIR传感器的信号引脚连接到GPIO引脚4
- en: The LED's positive pin connects to GPIO pin 21 through a 220 Ohm resistor
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED的正极通过220欧姆电阻连接到GPIO引脚21
- en: The LED's negative pin connects to GND on the breadboard
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED的负极连接到面包板上的GND
- en: 'Create a new Python file in Thonny and call it `hello-led.py`. Type in the
    following code and run it:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在Thonny中创建一个新的Python文件，并将其命名为“hello-led.py”。输入以下代码并运行：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The LED should start blinking as soon as motion is detected. The frequency of
    the LED's blinking will speed up as you place your hand closer and closer to the
    distance sensor.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: LED应该在检测到运动后立即开始闪烁。当您将手靠近距离传感器时，LED的闪烁频率会加快。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We should now be quite familiar with interacting with sensors and our Raspberry
    Pi. This chapter should be considered an exercise in creating sensory circuits
    using our Raspberry Pi with ease.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该非常熟悉与传感器和树莓派的交互。这一章应该被视为使用我们的树莓派轻松创建感官电路的练习。
- en: We will use this knowledge in [Chapter 9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml),
    *Building a Home Security Dashboard*, where we will create an IoT home security
    dashboard.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第9章](1a50006e-75d3-4dc1-96db-82114b437795.xhtml)中使用这些知识，*构建家庭安全仪表板*，在那里我们将创建一个物联网家庭安全仪表板。
- en: Questions
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between an active buzzer and a passive buzzer?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主动蜂鸣器和被动蜂鸣器有什么区别？
- en: True or false? We check the `button.is_pressed` parameter to confirm whether
    or not our push-button has been pressed.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们检查`button.is_pressed`参数来确认我们的按钮是否被按下。
- en: True or false? We require a voltage divider circuit in order to connect our
    PIR sensor.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？我们需要一个电压分压电路才能连接我们的PIR传感器。
- en: What are the three different methods we can use to have our active buzzer beep
    on and off?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪三种不同的方法让我们的主动蜂鸣器发出蜂鸣声？
- en: True or false? Push-buttons must connect directly to a circuit in order to be
    useful.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？按键必须直接连接到电路才能发挥作用。
- en: Which `DistanceSensor` parameter do we use to check the distance of an object
    from the distance sensor?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪个`DistanceSensor`参数来检查物体与距离传感器的距离？
- en: Which method from the Sense HAT emulator do we use to print pixels to the screen?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用Sense HAT模拟器的哪个方法来将像素打印到屏幕上？
- en: How would we set up our `MotionSensor` to read from GPIO pin 4?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何设置我们的`MotionSensor`来从GPIO引脚4读取？
- en: True or false? Basic alarm systems are far too complicated for our Raspberry
    Pi to create.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？基本的报警系统对于我们的树莓派来说太复杂了。
- en: True or false? The Sense HAT emulator may be used to interact with outside sensors
    connected to the GPIO.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假？Sense HAT模拟器可以用来与连接到GPIO的外部传感器进行交互。
- en: Further reading
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Consult the GPIO Zero documentation [https://gpiozero.readthedocs.io/en/stable/](https://gpiozero.readthedocs.io/en/stable/)
    for further information on using this library.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅GPIO Zero文档[https://gpiozero.readthedocs.io/en/stable/](https://gpiozero.readthedocs.io/en/stable/)，了解如何使用这个库的更多信息。
