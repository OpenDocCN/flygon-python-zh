- en: Python Scripting Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python脚本概述
- en: Python is a scripting language, created by Guido van Rossum in 1991, which is
    used in various applications, such as game development, GIS programming, software
    development, web development, data analytics, machine learning, and system scripting.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种脚本语言，由Guido van Rossum于1991年创建，用于各种应用，如游戏开发，GIS编程，软件开发，Web开发，数据分析，机器学习和系统脚本。
- en: Python is an object-oriented, high-level programming language with dynamic semantics.
    Mainly, Python is an interpreted language. Python is used for rapid application
    development, as it has all of the advanced features for development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种面向对象的高级编程语言，具有动态语义。主要是Python是一种解释性语言。Python用于快速应用程序开发，因为它具有所有的高级开发功能。
- en: Python is simple and easy to learn, as its syntax makes programs more readable.
    Hence, the program maintenance cost is low.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python简单易学，因为其语法使程序更易读。因此，程序的维护成本较低。
- en: Python has one more important feature of importing modules and packages. This
    feature allows for code reuse. The Python interpreter is easy to understand. We
    can write the complete code one by one in it and, as Python is an interpreted
    language, the code gets executed line by line. Python also has a wide range of
    libraries for advanced functionality.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python还有一个重要的特性，即导入模块和包。这个特性允许代码重用。Python解释器易于理解。我们可以在其中逐行编写完整的代码，并且由于Python是一种解释性语言，代码会逐行执行。Python还有广泛的库，用于高级功能。
- en: 'This chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Python scripting
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python脚本
- en: Installing and using Python and various tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和使用Python以及各种工具
- en: Variables, numbers, and strings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量，数字和字符串
- en: Python supported data structures and how to use all of these concepts in a script
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python支持的数据结构以及如何在脚本中使用所有这些概念
- en: Decision making; that is, the `if` statement
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策制定；也就是`if`语句
- en: Looping statements; that is, the `for` and `while` loops
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环语句；也就是`for`和`while`循环
- en: Functions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Modules
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before you start reading this book, you should know the basics of Python programming,
    such as the basic syntax, variable types, tuple data type, list dictionary, functions,
    strings, and methods. Two versions, 3.7.2 and 2.7.15, are available at [python.org/downloads/](https://www.python.org/downloads/).
    In this book we'll work with version 3.7 for code examples and package installing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本书之前，您应该了解Python编程的基础知识，比如基本语法，变量类型，元组数据类型，列表字典，函数，字符串和方法。在[python.org/downloads/](https://www.python.org/downloads/)上有两个版本，3.7.2和2.7.15。在本书中，我们将使用版本3.7进行代码示例和包安装。
- en: Examples and source code for this chapter are available in the GitHub repository: [https://github.com/PacktPublishing/Mastering-Python-Scripting-for-System-Administrators-](https://github.com/PacktPublishing/Mastering-Python-Scripting-for-System-Administrators-).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例和源代码可在GitHub存储库中找到：[https://github.com/PacktPublishing/Mastering-Python-Scripting-for-System-Administrators-](https://github.com/PacktPublishing/Mastering-Python-Scripting-for-System-Administrators-)。
- en: Why Python?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Python？
- en: Python has a wide range of libraries for open source data analysis tools, web
    frameworks, testing, and so on. Python is a programming language that can be used
    on different platforms (Windows, Mac, Linux, and embedded Linux H/W platforms,
    such as Raspberry Pi). It's used to develop desktop as well as web applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python有广泛的库，用于开源数据分析工具，Web框架，测试等。Python是一种可以在不同平台（Windows，Mac，Linux和嵌入式Linux硬件平台，如树莓派）上使用的编程语言。它用于开发桌面应用程序和Web应用程序。
- en: Developers can write programs with fewer lines if they use Python. Prototyping
    is very quick, as Python runs on an interpreter system. Python can be treated
    in an object-oriented, a procedural, or a functional way.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用Python，开发人员可以用更少的行数编写程序。原型设计非常快速，因为Python运行在解释器系统上。Python可以以面向对象，过程式或函数式的方式处理。
- en: Python can do various tasks, such as creating web applications. It is used with
    the software to create workflows; it connects to database systems, handles files,
    handles big data, and performs complex mathematics.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python可以执行各种任务，比如创建Web应用程序。它与软件一起用于创建工作流程；连接到数据库系统，处理文件，处理大数据，并执行复杂的数学运算。
- en: Python syntax compared to other programming languages
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python语法与其他编程语言的比较
- en: The code written in Python is highly readable because it's similar to the English
    language. To complete a command, Python uses new lines.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python中编写的代码非常易读，因为它类似于英语。Python使用新行来完成命令。
- en: 'Python has a great feature: indentation. Using indentations, we can define
    the scope for decision-making statements, loops such as `for` and `while` loops,
    functions, and classes.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一个很棒的特性：缩进。使用缩进，我们可以定义决策语句，循环（如`for`和`while`循环），函数和类的范围。
- en: Python installation
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python安装
- en: In this section, we will be learning about the installation of Python on different
    platforms, such as Linux and Windows.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习Python在不同平台上的安装，比如Linux和Windows。
- en: Installation on the Linux platform
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux平台上安装
- en: Most Linux distributions have Python 2 in their default installations. Some
    of them also have Python 3 included.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux发行版在默认安装中都有Python 2。其中一些还包括Python 3。
- en: 'To install `python3` on Debian-based Linux, run the following command in the
    Terminal:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要在基于Debian的Linux上安装`python3`，请在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install `python3` on `centos`, run the following command in the Terminal:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`centos`上安装`python3`，请在终端中运行以下命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are unable to install Python using the preceding commands, download Python
    from [https://www.python.org/downloads/](https://www.python.org/downloads/) and
    follow the instructions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法使用上述命令安装Python，请从[https://www.python.org/downloads/](https://www.python.org/downloads/)下载Python并按照说明进行操作。
- en: Installation on the Windows platform
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows平台上安装
- en: For installing Python in Microsoft Windows, you'll have to download the executable
    from `python.org` and install it. Download `python.exe` from [https://www.python.org/downloads/](https://www.python.org/downloads/)
    and choose the Python version that you want install on your PC. Then, double-click
    on the downloaded `exe` and install Python. On the installation wizard, there's
    checkbox that says **Add Python to the path**. Check this checkbox and then follow
    the instructions to install `python3`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Microsoft Windows中安装Python，您需要从`python.org`下载可执行文件并安装。从[https://www.python.org/downloads/](https://www.python.org/downloads/)下载`python.exe`，选择要在您的PC上安装的Python版本。然后，双击下载的`exe`并安装Python。在安装向导中，有一个复选框，上面写着**将Python添加到路径**。选中此复选框，然后按照说明安装`python3`。
- en: Installing and using pip to install packages
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pip安装软件包的安装和使用
- en: 'In Linux, install `pip` as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，安装`pip`如下：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In Windows, install `pip` as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，安装`pip`如下：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installation on Mac
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上安装
- en: 'To install `python3`, first we must have `brew` installed on our system. To
    install `brew` on your system, run the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`python3`，首先必须在系统上安装`brew`。要在系统上安装`brew`，运行以下命令：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By running the preceding command. `brew` will get installed. Now we will install
    `python3` using `brew`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行上述命令，`brew`将被安装。现在我们将使用`brew`安装`python3`：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing Jupyter notebook
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Jupyter笔记本
- en: For installing the Jupyter Notebook, download Anaconda.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Jupyter笔记本，请下载Anaconda。
- en: Install the downloaded version of Anaconda and follow the instructions on the
    wizard.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装已下载的Anaconda并按照向导上的说明操作。
- en: 'Install Jupyter using `pip`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`安装Jupyter：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In Linux, `pip install jupyter` will install Jupyter for `python 2`. If you
    want to install `jupyter` for `python 3`, run the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，`pip install jupyter`将为`python 2`安装Jupyter。如果要为`python 3`安装`jupyter`，请运行以下命令：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Installing and using the virtual environment
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和使用虚拟环境
- en: Now we will see how to install the virtual environment and how to activate it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何安装虚拟环境以及如何激活它。
- en: 'To install the virtual environment on Linux, perform the following steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Linux上安装虚拟环境，请执行以下步骤：
- en: 'First check whether `pip` is installed or not. We are going to install `pip`
    for `python3`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先检查`pip`是否已安装。我们将为`python3`安装`pip`：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Install the virtual environment using `pip3`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pip3`安装虚拟环境：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we will create the virtual environment. You can give it any name; I have
    called it `pythonenv`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建虚拟环境。您可以给它任何名称；我称其为`pythonenv`：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Activate your virtual environment:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的虚拟环境：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After your work is done, you can deactivate `virtualenv` by using following
    command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作完成后，您可以使用以下命令停用`virtualenv`：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In Windows, run the `pip install virtualenv` command to install the virtual
    environment. The steps for installing `virtualenv` are same as with Linux.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，运行`pip install virtualenv`命令安装虚拟环境。安装`virtualenv`的步骤与Linux相同。
- en: Installing Geany and PyCharm
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Geany和PyCharm
- en: Download Geany from [https://www.geany.org/download/releases](https://www.geany.org/download/releases)
    and download the required binaries. Follow the instructions while installing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://www.geany.org/download/releases](https://www.geany.org/download/releases)下载Geany，并下载所需的二进制文件。在安装时按照说明操作。
- en: Download PyCharm from [https://www.jetbrains.com/pycharm/download/#section=windows](https://www.jetbrains.com/pycharm/download/#section=windows)
    and follow the instructions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://www.jetbrains.com/pycharm/download/#section=windows](https://www.jetbrains.com/pycharm/download/#section=windows)下载PyCharm并按照说明操作。
- en: Python interpreter
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python解释器
- en: Python is an interpreted language. It has an interactive console called the
    Python interpreter or Python shell. This shell provides a way to execute your
    program line by line without creating a script.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种解释性语言。它有一个名为Python解释器或Python shell的交互式控制台。这个控制台提供了一种逐行执行程序而不创建脚本的方法。
- en: You can access all of Python's built-in functions and libraries, installed modules,
    and command history in the Python interactive console. This console gives you
    the opportunity to to explore Python. You're able to paste code into scripts when
    you are ready.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Python交互式控制台中访问所有的内置函数和库、安装的模块和命令历史。这个控制台让您有机会探索Python。当您准备好时，可以将代码粘贴到脚本中。
- en: The difference between Python and Bash scripting
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python和Bash脚本之间的区别
- en: 'In this section, we''re going to learn about the difference between Python
    and Bash scripting. The differences are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python和Bash脚本之间的区别。区别如下：
- en: Python is a scripting language, whereas Bash is a shell used for entering and
    executing commands
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python是一种脚本语言，而Bash是用于输入和执行命令的Shell
- en: Dealing with larger programs is easier with Python
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python更容易处理更大的程序
- en: In Python, you can do most things just by calling a one-line function from imported
    modules
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中，您可以通过调用导入模块的一行函数来完成大多数事情
- en: Starting the interactive console
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动交互式控制台
- en: 'We can access Python''s interactive console from any computer that has Python
    already installed. Run the following command to start Python''s interactive console:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从已安装Python的任何计算机上访问Python的交互式控制台。运行以下命令启动Python的交互式控制台：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will start the default Python interactive console.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动默认的Python交互式控制台。
- en: In Linux, if we write `Python` in the Terminal, the `python2.7` console starts.
    If you want to start the `python3` console, then enter `python3` in the Terminal
    and press *Enter*.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux中，如果我们在终端中输入`Python`，则会启动`python2.7`控制台。如果要启动`python3`控制台，则在终端中输入`python3`并按*Enter*。
- en: In Windows, when you enter `Python` in Command Prompt, it will start the console
    of the downloaded Python version.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，当您在命令提示符中输入`Python`时，它将启动已下载Python版本的控制台。
- en: Writing scripts with the Python interactive console
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python交互式控制台编写脚本
- en: 'The Python interactive console starts from `>>> prefix`. This console will
    accept the Python commands, which you''ll write after `>>> prefix`. Refer to the
    following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Python交互式控制台从`>>>前缀`开始。这个控制台将接受您在`>>>前缀`后面写的Python命令。参考以下截图：
- en: '![](assets/d9a71f44-f130-456b-bbaa-3dbbe4b47bed.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d9a71f44-f130-456b-bbaa-3dbbe4b47bed.png)'
- en: 'Now, we will see how to assign values to the variable, as in the following
    example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看如何给变量赋值，就像下面的例子：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we''ve assigned a character value of `John` to the `name` variable. We
    pressed *Enter* and received a new line with `>>> prefix`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们给`name`变量赋了一个字符值`John`。我们按下*Enter*键，得到了一个带有`>>>前缀`的新行：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we will see an example of assigning values to variables and then we will
    perform a math operation to get the values:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个给变量赋值的例子，然后我们将执行一个数学运算来得到这些值：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, we assigned values to variables, added two variables, stored the result
    in a third variable, and printed the result on to the Terminal. Next, we subtracted
    one variable from the result variable, and the output will get stored in the fourth
    variable. Then, we printed the result on to the Terminal. So this tells us that
    we can also use the Python interpreter as a calculator:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们给变量赋值，添加了两个变量，将结果存储在第三个变量中，并将结果打印到终端上。接下来，我们从结果变量中减去一个变量，输出将存储在第四个变量中。然后，我们将结果打印到终端上。这告诉我们，我们也可以将Python解释器用作计算器：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we performed a division operation. We divided `509` by `22` and the result
    we got is `23.136363636363637.`
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们进行了除法运算。我们将`509`除以`22`，得到的结果是`23.136363636363637`。
- en: Multiple lines
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多行
- en: 'When we write multiple lines of code in the Python interpreter (for example,
    the `If` statement and `for` and `while` loop functions), then the interpreter
    uses three dots (`...`) as a secondary prompt for line continuation. To come out
    of these lines, you have to press the *Enter* key twice. Now we will look at the
    following example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Python解释器中编写多行代码（例如`if`语句和`for`和`while`循环函数），解释器会使用三个点(`...`)作为第二个提示符进行行继续。要退出这些行，你必须按两次*Enter*键。现在我们来看下面的例子：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In this example, we''ve assigned integer values to two variables, `val1` and
    `val2`, and we''re checking whether `val1` is greater than `val2` or not. In this
    case, `val1` is greater than `val2`, so the statement in the `if` block gets printed.
    Remember, statements in `if` and `else` blocks are indented. If you don''t use
    indentation, you will get the following error:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们给两个变量`val1`和`val2`赋了整数值，并且检查`val1`是否大于`val2`。在这种情况下，`val1`大于`val2`，所以`if`块中的语句被打印出来。记住，`if`和`else`块中的语句是缩进的。如果你不使用缩进，你会得到以下错误：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Importing modules through the Python interpreter
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Python解释器导入模块
- en: 'If you are importing any module, then the Python interpreter checks if that
    module is available or not. You can do this by using the `import` statement. If
    that module is available, then you will see the `>>>` prefix after pressing the *Enter*
    key. This indicates that the execution was successful. If that module doesn''t
    exist, the Python interpreter will show an error:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你导入任何模块，那么Python解释器会检查该模块是否可用。你可以使用`import`语句来做到这一点。如果该模块可用，那么在按下*Enter*键后你会看到`>>>`前缀。这表示执行成功。如果该模块不存在，Python解释器会显示一个错误：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After importing the `time` module, we get the `>>>` prefix. This means that
    the module exists and this command gets executed successfully:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`time`模块后，我们得到`>>>`前缀。这意味着模块存在，并且这个命令被成功执行了：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If the module doesn''t exist, then you will get `Traceback` error:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块不存在，你将得到`Traceback`错误：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So here, `matplotlib` isn''t available, so it gives an error: `ImportError:
    No module named ''matplotlib''.`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '所以在这里，`matplotlib`不可用，所以会出现错误：`ImportError: No module named ''matplotlib''`。'
- en: 'To solve this error, we will have to install `matplotlib` and then again try
    to import `matplotlib`. After installing `matplotlib`, you should be able to import
    the module, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个错误，我们需要安装`matplotlib`，然后再尝试导入`matplotlib`。安装`matplotlib`后，你应该能够导入模块，如下所示：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Exiting the Python console
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退出Python控制台
- en: 'We can come out of the Python console in two ways:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式退出Python控制台：
- en: The keyboard shortcut: *Ctrl + D*
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘快捷键：*Ctrl + D*
- en: Using the `quit()` or `exit()` functions
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`quit()`或`exit()`函数
- en: The keyboard shortcut
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键盘快捷键
- en: 'The keyboard shortcut, *Ctrl + D,* will give you the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘快捷键，*Ctrl + D*，将给出以下代码：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Using the quit() or exit() functions
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`quit()`或`exit()`函数
- en: '`quit()` will take you out of Python''s interactive console. It will also take
    you to the original Terminal you were previously in:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`quit()`会让你退出Python的交互式控制台。它还会把你带回到之前所在的原始终端：'
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Indentation and tabs
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩进和制表符
- en: Indentation is a must when writing block code in Python. Indentation is useful
    when you are writing functions, decision-making statements, looping statements,
    and classes. This makes it easy to read your Python programs.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中编写代码块时，缩进是必须的。当你编写函数、决策语句、循环语句和类时，缩进是有用的。这样可以方便阅读你的Python程序。
- en: 'We use indentation to indicate the block of code in Python programs. To indent
    a block of code, you can use spaces or tabs. Refer to the following example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Python程序中使用缩进来表示代码块。要缩进一个代码块，你可以使用空格或制表符。参考以下例子：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding example, we indented the `print` statement because it comes
    under the `if` block. The next print statement doesn't come under the `if` block
    and that's why we didn't indent it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们缩进了`print`语句，因为它属于`if`块。下一个打印语句不属于`if`块，所以我们没有对它进行缩进。
- en: Variables
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: Like other programming languages, there's no need to declare your variables
    first. In Python, just think of any name to give your variable and assign it a
    value. You can use that variable in your program. So, in Python, you can declare
    variables whenever you need them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他编程语言一样，不需要先声明变量。在Python中，只需想一个名字给你的变量并给它赋一个值。你可以在程序中使用该变量。所以在Python中，你可以在需要时声明变量。
- en: 'In Python, the value of a variable may change during the program execution,
    as well as the type. In the following line of code, we assign the value `100`
    to a variable:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，变量的值和类型在程序执行过程中可能会发生变化。在下面的代码行中，我们将值`100`赋给一个变量：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is an example of a type of variable that can change during execution:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个在执行过程中可以改变的变量类型的例子：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Python takes care of the representation for the different data types; that
    is, each type of value gets stored in different memory locations. A variable will
    be a name to which we''re going to assign a value:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Python会处理不同数据类型的表示；也就是说，每种类型的值都存储在不同的内存位置。变量将是一个我们将要为其分配值的名称：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This example makes three assignments. The first assignment is a string assignment
    to the variable named `msg`. The second assignment is an integer assignment to
    the variable named `a` and the last assignment is a `pi` value assignment.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子做了三个赋值。第一个赋值是将字符串赋给名为`msg`的变量。第二个赋值是将整数赋给名为`a`的变量，最后一个赋值是`pi`值的赋值。
- en: 'The type of a variable is the type of the value it refers to. Look at the following
    code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的类型是它所引用的值的类型。看看下面的代码：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Creating and assigning values to variables
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并为变量赋值
- en: In Python, variables don't need to be declared explicitly to reserve memory
    space. So, the declaration is done automatically whenever you assign a value to
    the variable. In Python, the equal sign `=` is used to assign values to variables.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，变量不需要显式声明以保留内存空间。因此，只要将值赋给变量，声明就会自动完成。在Python中，等号`=`用于为变量赋值。
- en: 'Consider the following example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding example, we assigned `John` to the `name` variable, `25` to
    the `age` variable, `USA` to the `address` variable, and `85.5` to the `percentage`
    variable.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们将`John`赋给`name`变量，将`25`赋给`age`变量，将`USA`赋给`address`变量，将`85.5`赋给`percentage`变量。
- en: We don't have to declare them first as we do in other languages. So, looking
    at the value interpreter will get the type of that variable. In the preceding
    example, `name` and `address` are `strings`, age is an integer, and percentage
    is a floating type.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必像其他语言那样首先声明它们。因此，查看值时，解释器将获取该变量的类型。在上面的例子中，`name`和`address`是`字符串`，age是整数，percentage是浮点类型。
- en: 'Multiple assignments for the same value can be done as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 可以如下进行相同值的多重赋值：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding example, we created three variables and assigned an integer
    value `1` to them, and all of these three variables will be assigned to the same
    memory location.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们创建了三个变量，并将整数值`1`分配给它们，所有这三个变量都将分配到相同的内存位置。
- en: 'In Python, we can assign multiple values to multiple variables in a single
    line:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们可以在一行中为多个变量分配多个值：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, we declared one string variable, `y`, and assigned the value `John` to
    it and two integer variables, `x` and `z`, and assigned values `10` and `80` to
    them, respectively.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们声明了一个字符串变量`y`，并将值`John`赋给它，还声明了两个整数变量`x`和`z`，并分别将值`10`和`80`赋给它们。
- en: Numbers
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字
- en: 'The Python interpreter can also act as a calculator. You just have to type
    an expression and it will return the value. Parentheses `( )` are used to do the
    grouping, as shown in the following example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Python解释器也可以充当计算器。您只需输入一个表达式，它就会返回值。括号`( )`用于进行分组，如下例所示：
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The integer numbers are of the `int` type and a fractional part is of the `float` type.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 整数是`int`类型的，小数部分是`float`类型的。
- en: In Python, the division (`/`) operation always returns a float value. The `floor`
    division (`//`) gets an integer result. The `%` operator is used to calculate
    the remainder.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，除法(`/`)操作始终返回一个浮点值。`floor`除法(`//`)得到一个整数结果。`%`运算符用于计算余数。
- en: 'Consider the following example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To calculate powers, Python has the `**` operator, as shown in the following
    example:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算幂，Python有`**`运算符，如下例所示：
- en: '[PRE36]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The equal sign (`=`) is used for assigning a value to a variable:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 等号(`=`)用于为变量赋值：
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If a variable does not have any value and we still try to use it, then the
    interpreter will show an error:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个变量没有任何值，但我们仍然尝试使用它，那么解释器将显示错误：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If the operators have mixed types of operands, then the value we get will be
    of a floating point:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运算符具有混合类型的操作数，则得到的值将是浮点数：
- en: '[PRE39]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the Python interactive console, `_` contains the last printed expression
    value, as shown in the following example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python交互式控制台中，`_`包含了最后一个打印的表达式值，如下例所示：
- en: '[PRE40]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Number data types store numeric values, which are immutable data types. If we
    do this, Python will allocate a new object for the changed data type.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 数字数据类型存储不可变的数值。如果我们这样做，Python将为更改后的数据类型分配一个新对象。
- en: 'We can create number objects just by assigning a value to them, as shown in
    the following example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过为它们分配一个值来创建数字对象，如下例所示：
- en: '[PRE41]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `del` statement is used to delete single or multiple variables. Refer to
    the following example:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`del`语句用于删除单个或多个变量。参考以下例子：'
- en: '[PRE42]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Number type conversion
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字类型转换
- en: In some situations, you need to convert a number explicitly from one type to
    another to satisfy some requirements. Python does this internally in an expression
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您需要显式地将一个类型的数字转换为另一个类型以满足某些要求。Python在表达式中内部执行此操作
- en: Type `int(a)` to convert `a` into an integer
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`int(a)`将`a`转换为整数
- en: Type `float(a)` to convert `a` into a floating-point number
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`float(a)`将`a`转换为浮点数
- en: Type `complex(a)` to convert `a` into a complex number with real part `x` and
    imaginary part `zero`
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入`complex(a)`将`a`转换为具有实部`x`和虚部`零`的复数
- en: Type `complex(a, b)` to convert `a` and `b` into a complex number with real
    part `a` and imaginary part `b`. `a` and `b` are numeric expressions
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`complex(a, b)`将`a`和`b`转换为具有实部`a`和虚部`b`的复数。`a`和`b`是数值表达式
- en: Strings
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: 'Like numbers, strings are also one of the data structures in Python. Python
    can manipulate strings. Strings can be expressed as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 与数字一样，字符串也是Python中的数据结构之一。Python可以操作字符串。字符串可以表示如下：
- en: Enclosed in single quotes (`'...'`)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用单引号(`'...'`)括起来
- en: Enclosed in double quotes (`"..."`)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用双引号(`"..."`)括起来
- en: 'See the following example:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 看下面的例子：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'A string is a set of characters. We can access the characters one at a time,
    as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是一组字符。我们可以按顺序访问字符，如下所示：
- en: '[PRE44]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the second statement, we are selecting the character number `1` from `city`
    and assigning it to `letter`. The number in those square brackets is an index.
    The index indicates which character you want to access. It starts from `0`. So,
    in the preceding example, when you will execute `letter = city[1]`, you will get
    the following output:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个语句中，我们从`city`中选择字符编号`1`并将其分配给`letter`。方括号中的数字是索引。索引表示您要访问的字符。它从`0`开始。因此，在上面的例子中，当您执行`letter
    = city[1]`时，您将得到以下输出：
- en: '[PRE45]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Concatenation (+) and repetition (*)
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接（+）和重复（*）
- en: 'Next, comes concatenation and repetition. Refer to the following code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是连接和重复。参考以下代码：
- en: '[PRE46]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In the preceding example, we are doing string concatenation and repetition.
    `3 * 'hi'` means `hi` gets printed `3` times and, using the `+` sign, we are joining
    the `hello` string next to `hi`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们正在进行字符串连接和重复。`3 * 'hi'`意味着`hi`被打印`3`次，并且使用`+`号，我们将`hello`字符串连接到`hi`旁边。
- en: 'We can automatically concatenate two strings just by writing them next to each
    other. These two strings must be enclosed between quotes, as shown here:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将它们写在一起来自动连接两个字符串。这两个字符串必须用引号括起来，如下所示：
- en: '[PRE47]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'This feature is really helpful when you have long strings and you want to break
    them. Here is an example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有很长的字符串并且想要打破它们时，这个功能真的很有帮助。这里有一个例子：
- en: '[PRE48]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: String slicing
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串切片
- en: Strings support slicing, which means getting characters by a specified range
    from your string. Let's take a look at the following example. Note that starting
    index value is always included and an end value is always excluded.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串支持切片，这意味着从字符串中按指定范围获取字符。让我们看看以下例子。请注意，起始索引值始终包括在内，结束值始终不包括在内。
- en: Consider a string, `str = "Programming":`
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个字符串，`str = "Programming":`
- en: '[PRE49]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, the default of an omitted first index is zero, as in the example:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，省略的第一个索引的默认值是零，就像例子中一样：
- en: '[PRE50]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Accessing values in strings
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在字符串中访问值
- en: 'We can access characters from strings using slicing by using square brackets.
    We can also access characters from strings between the specified range. Refer
    to the following example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以使用方括号切片从字符串中访问字符。我们还可以在指定范围内从字符串中访问字符。参考以下示例： '
- en: '[PRE51]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Updating strings
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新字符串
- en: 'We can update a string by reassigning a new value to the specified index. Refer
    to the following example:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将新值重新分配给指定的索引来更新字符串。参考以下示例：
- en: '[PRE52]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Escape characters
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转义字符
- en: 'Python supports escape characters that are non-printable and can be represented
    with a backslash notation. An escape character gets interpreted in both single
    and double quoted strings:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持转义字符，这些字符是不可打印的，可以用反斜杠表示。转义字符在单引号和双引号字符串中都会被解释：
- en: '| **Notations** | **Hex characters** | **Description** |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| **符号** | **十六进制字符** | **描述** |'
- en: '| `a` | `0x07` | Bell or alert |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `a` | `0x07` | 响铃或警报 |'
- en: '| `b` | `0x08` | Backspace |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `b` | `0x08` | 退格 |'
- en: '| `cx` |  | Control-`x` |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `cx` |  | 控制-`x` |'
- en: '| `n` | `0x0a` | Newline |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `n` | `0x0a` | 换行符 |'
- en: '| `C-x` |  | Control-`x` |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `C-x` |  | 控制-`x` |'
- en: '| `e` | `0x1b` | Escape |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `e` | `0x1b` | 转义 |'
- en: '| `f` | `0x0c` | Form feed |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `f` | `0x0c` | 换页符 |'
- en: '| `s` | `0x20` | Space |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `s` | `0x20` | 空格 |'
- en: '| `M-C-x` |  | Meta-control-`x` |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `M-C-x` |  | 元控制-`x` |'
- en: '| `x` |  | Character `x` |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `x` |  | 字符`x` |'
- en: '| `nnn` |  | Octal notation, where `n` is in the range 0.7 |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `nnn` |  | 八进制表示法，其中`n`在范围0.7内 |'
- en: '| `r` | `0x0d` | Carriage return |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `r` | `0x0d` | 回车 |'
- en: '| `xnn` |  | Hexadecimal notation, where `n` is in the range `0.9`, `a.f`,
    or `A.F` |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `xnn` |  | 十六进制表示法，其中`n`在范围`0.9`，`a.f`或`A.F`内 |'
- en: '| `t` | `0x09` | Tab |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `t` | `0x09` | 制表符 |'
- en: '| `v` | `0x0b` | Vertical tab |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `v` | `0x0b` | 垂直制表符 |'
- en: Special string operators
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊字符串运算符
- en: 'The following table shows string''s special operators. Consider `a` is `Hello`
    and `b` is `World`:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了字符串的特殊运算符。考虑`a`是`Hello`，`b`是`World`：
- en: '| **Operator** | **Description** | **Example** |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **描述** | **例子** |'
- en: '| `+` | Concatenation: adds values on either side of the operator | `a + b`
    will give `HelloWorld` |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 连接：在运算符的两侧添加值 | `a + b`会得到`HelloWorld` |'
- en: '| `[]` | Slice: gives the character from the given index | `a[7]` will give
    `r` |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `[]` | 切片：从给定索引中获取字符 | `a[7]`会得到`r` |'
- en: '| `[ : ]` | Range slice: gives the characters from the given range | `a[1:4]`
    will give `ell` |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `[ : ]` | 范围切片：给出给定范围内的字符 | `a[1:4]`会得到`ell` |'
- en: '| `*` | Repetition: creates new strings, concatenating multiple copies of the
    same string | `a*2` will give `HelloHello` |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 重复：创建新字符串，连接多个相同字符串的副本 | `a*2`会得到`HelloHello` |'
- en: '| `not in` | Membership: returns `true` if a character does not exist in the
    given string | `Z` not in a `will` give `1` |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `not in` | 成员资格：如果字符不存在于给定字符串中，则返回`true` | `Z`不在`will`中会得到`1` |'
- en: '| `in` | Membership: returns `true` if a character exists in the given string
    | `H` in `a` will give `1` |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `in` | 成员资格：如果字符存在于给定字符串中，则返回`true` | `H`在`a`中会得到`1` |'
- en: '| `%` | Format: performs string formatting |  |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `%` | 格式：执行字符串格式化 |  |'
- en: '%  string formatting operator'
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '% 字符串格式化运算符'
- en: '`%` is a string formatting operator in Python. Refer to the following example:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`%`是Python中的字符串格式化运算符。参考以下示例：'
- en: '[PRE53]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following table shows a list of symbols used along with `%`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了与`%`一起使用的符号列表：
- en: '| **S.No.** | **Format symbol and conversion** |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| **序号** | **格式符号和转换** |'
- en: '| 1 | `%c` – character |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `%c` – 字符 |'
- en: '| 2 | `%s` – string conversion via `str()` prior to formatting |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `%s` – 格式化之前通过`str()`进行字符串转换 |'
- en: '| 3 | `%i` – signed decimal integer |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `%i` – 有符号十进制整数 |'
- en: '| 4 | `%d` – signed decimal integer |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `%d` – 有符号十进制整数 |'
- en: '| 5 | `%u` – unsigned decimal integer |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `%u` – 无符号十进制整数 |'
- en: '| 6 | `%o` – octal integer |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `%o` – 八进制整数 |'
- en: '| 7 | `%x` – hexadecimal integer (lowercase letters) |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| 7 | `%x` – 十六进制整数（小写字母） |'
- en: '| 8 | `%X` – hexadecimal integer (uppercase letters) |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| 8 | `%X` – 十六进制整数（大写字母） |'
- en: '| 9 | `%e` – exponential notation (with lowercase `e`) |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 9 | `%e` – 指数表示法（小写`e`） |'
- en: '| 10 | `%E` – exponential notation (with uppercase `E`) |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 10 | `%E` – 指数表示法（大写`E`） |'
- en: '| 11 | `%f` – floating point real number |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 11 | `%f` – 浮点实数 |'
- en: Triple quotes in Python
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的三重引号
- en: 'Python''s triple quotes functionality for strings is used to span multiple
    lines, including newlines and tabs. The syntax for triple quotes consists of three
    consecutive single or double quotes. Refer to the following code:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Python的三重引号功能用于跨越多行，包括换行符和制表符。三重引号的语法由三个连续的单引号或双引号组成。参考以下代码：
- en: '[PRE54]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'It produces the following output. Note the tabs and newlines:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 它产生以下输出。请注意制表符和换行符：
- en: '[PRE55]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Strings are immutable
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串是不可变的
- en: 'Strings are immutable, meaning we can''t change the values. Refer to the given
    example:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是不可变的，意味着我们不能改变值。参考给定的示例：
- en: '[PRE56]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'As the strings are immutable; we cannot change an existing string. But we can
    create a new string that will be different from the original:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 由于字符串是不可变的；我们不能改变现有的字符串。但我们可以创建一个与原始字符串不同的新字符串：
- en: '[PRE57]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Understanding lists
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解列表
- en: 'Python supports a data structure called `list`, which is a mutable and ordered
    sequence of elements. Each element in that list is called as item. Lists are defined
    by inserting values between square brackets `[ ]`. Each element of `list` is given
    a number, which we call as a position or index. The index starts from zero; that
    is, the first index is zero, the second index is 1, and so on. We can perform
    the following operations on lists: indexing, slicing, adding, multiplying, and
    checking for membership.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持一种称为`list`的数据结构，它是一个可变的有序元素序列。列表中的每个元素称为项。列表是通过在方括号`[]`之间插入值来定义的。`list`的每个元素都被赋予一个数字，我们称之为位置或索引。索引从零开始；即第一个索引为零，第二个索引为1，依此类推。我们可以对列表执行以下操作：索引、切片、添加、乘法和检查成员资格。
- en: Python's built-in `length` function returns the length of that list. Python
    also has function for finding the largest and smallest item of `list`. Lists can
    be numbered lists, string lists, or mixed list.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: Python的内置`length`函数返回列表的长度。Python还有用于查找`list`的最大和最小项的函数。列表可以是编号列表、字符串列表或混合列表。
- en: 'The following is the code for creating a list:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建列表的代码：
- en: '[PRE58]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Here, we''ve created three lists: the first is `numbers`, the second is `animals`,
    and the third is `list1`. A list within another list is called as nested list.
    Our `list1` is a nested list. A list containing no elements is called an empty
    list; you can create one with empty brackets, `[]`.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了三个列表：第一个是`numbers`，第二个是`animals`，第三个是`list1`。列表中的另一个列表称为嵌套列表。我们的`list1`是一个嵌套列表。不包含任何元素的列表称为空列表；可以使用空括号`[]`创建一个空列表。
- en: 'As you might expect, you can assign list values to variables:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的，您可以将列表值分配给变量：
- en: '[PRE59]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Accessing values in lists
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问列表中的值
- en: 'We can access the values from a list by using index values. We will specify
    the index number in `[ and ]`. Index starts from `0`. Refer to the given example:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用索引值从列表中访问值。我们将在`[和]`中指定索引号。索引从`0`开始。参考给定的示例：
- en: '[PRE60]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Updating lists
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新列表
- en: 'You can update elements of lists, as shown in the following code:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更新列表的元素，如下面的代码所示：
- en: '[PRE61]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Deleting list elements
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除列表元素
- en: 'To remove a list element, you can use either the `del` statement if you know
    exactly which element(s) you are deleting. You can use the `remove()` method if
    you do not know exactly which items to delete. Refer to the following example:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除列表元素，可以使用`del`语句（如果知道要删除的确切元素），也可以使用`remove()`方法（如果不知道要删除哪些项目）。参考以下示例：
- en: '[PRE62]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Basic list operations
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本列表操作
- en: 'There are five basic list operations:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 有五种基本的列表操作：
- en: Concatenation
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接
- en: Repetition
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复
- en: Length
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度
- en: Membership
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员资格
- en: Iteration
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代
- en: '| **Description** | **Expression** | **Result** |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **表达式** | **结果** |'
- en: '|  Concatenation | ` [30, 50, 60] + [''Hello'', 75, 66]` | ` [30,50,60,''Hello'',75,66]`
    |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | ` [30, 50, 60] + [''Hello'', 75, 66]` | ` [30,50,60,''Hello'',75,66]`
    |'
- en: '|  Membership | ` 45 in [45,58,99,65]` | ` True` |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| 成员资格 | ` 45 in [45,58,99,65]` | ` True` |'
- en: '|  Iteration | ` for x in [45,58,99] : print (x,end = '' '')` | ` 45 58 99`
    |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| 迭代 | ` for x in [45,58,99] : print (x,end = '' '')` | ` 45 58 99` |'
- en: '|  Repetition | ` [''Python''] * 3` | ` [''python'', ''python'', ''python'']`
    |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| 重复 | ` [''Python''] * 3` | ` [''python'', ''python'', ''python'']` |'
- en: '|  Length | ` len([45, 58, 99, 65])` | ` 4` |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| 长度 | ` len([45, 58, 99, 65])` | ` 4` |'
- en: List operations
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表操作
- en: 'In this section, we are going to learn about basic list operations: concatenation
    and repetition.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习基本的列表操作：连接和重复。
- en: 'The `+` operator concatenates lists:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`+`运算符连接列表：'
- en: '[PRE63]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Similarly, the `*` operator repeats a list a given number of times:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`*`运算符重复给定次数的列表：
- en: '[PRE64]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Indexing, slicing, and matrices
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引、切片和矩阵
- en: List indices work the same way as string indices. Values can be accessed using
    `index`. If you try to read or write an element that does not exist, you get `IndexError`.
    If an index has a negative value, it counts backward from the end of the list.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 列表索引的工作方式与字符串索引相同。可以使用`index`访问值。如果尝试读取或写入不存在的元素，则会收到`IndexError`。如果索引具有负值，则从列表的末尾开始向后计数。
- en: 'Now, we will create a list named `cities` and we will see the index operations:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个名为`cities`的列表，并查看索引操作：
- en: '`cities = [''Mumbai'', ''Bangalore'', ''Chennai'', ''Pune'']`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`cities = [''Mumbai'', ''Bangalore'', ''Chennai'', ''Pune'']`'
- en: '| **Description** | **Expression** | **Results** |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **表达式** | **结果** |'
- en: '| Index start at zero | `cities[2]` | `''Chennai''` |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| 索引从零开始 | `cities[2]` | `''Chennai''` |'
- en: '| Slicing: getting sections | `cities[1:]` | `[''Bangalore'', ''Chennai'',
    ''Pune'']` |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| 切片：获取部分 | `cities[1:]` | `[''Bangalore'', ''Chennai'', ''Pune'']` |'
- en: '| Negative: count from the right | `cities[-3]` | `''Bangalore''` |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| 负数：从右边计数 | `cities[-3]` | `''Bangalore''` |'
- en: Tuples
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: 'Python''s tuple data structure is immutable, meaning we cannot change the elements
    of the tuples. Basically, a tuple is a sequence of values that are separated by
    commas and are enclosed in parentheses `( )`. Like lists, tuples are an ordered
    sequence of elements:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: Python的元组数据结构是不可变的，意味着我们不能改变元组的元素。基本上，元组是由逗号分隔并括在括号`( )`中的值序列。与列表一样，元组是有序的元素序列：
- en: '[PRE65]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Tuples are enclosed in parentheses `( )`:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 元组用括号`( )`括起来：
- en: '[PRE66]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'You can also create a tuple with a single element. You just have to put a final
    comma in the tuple:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建一个只有一个元素的元组。您只需在元组中放置最后一个逗号：
- en: '[PRE67]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'A value in parentheses is not a tuple:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 括号中的值不是元组：
- en: '[PRE68]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'We can create an empty tuple using the `tuple()` function:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`tuple()`函数创建一个空元组：
- en: '[PRE69]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'If the argument is a sequence (string, list, or tuple), the result is a tuple
    with the elements of the sequence:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是一个序列（字符串、列表或元组），则结果是具有序列元素的元组：
- en: '[PRE70]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Tuples have values between parentheses `( )` separated by commas:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 元组的值在括号`（）`之间用逗号分隔：
- en: '[PRE71]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The slice operator selects a range of elements.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 切片运算符选择一系列元素。
- en: '[PRE72]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Accessing values in tuples
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问元组中的值
- en: 'To access values in a tuple, use the square brackets for slicing along with
    the index or indices to obtain the value available at that index or indices, as
    shown in the following example:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问元组中的值，请使用方括号进行切片，并使用索引或索引来获取该索引或索引处的值，如下例所示：
- en: '[PRE73]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Updating tuples
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新元组
- en: 'Tuple updating is not possible in Python, as tuples are immutable. But you
    can create a new tuple with an existing tuple, as shown in the following example:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中无法更新元组，因为元组是不可变的。但是可以使用现有元组创建一个新元组，如下例所示：
- en: '[PRE74]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Deleting tuple elements
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除元组元素
- en: 'We cannot remove individual tuple elements. So, to remove an entire tuple explicitly,
    use the `del` statement. Refer to the following example:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法删除单个元组元素。因此，要显式删除整个元组，请使用`del`语句。请参阅以下示例：
- en: '[PRE75]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Basic tuple operations
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本元组操作
- en: 'Like lists, there are five basic tuple operations:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 与列表一样，元组有五种基本操作：
- en: Concatenation
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接
- en: Repetition
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复
- en: Length
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度
- en: Membership
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员资格
- en: Iteration
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代
- en: '| **Description** | **Expression** | **Results** |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **表达式** | **结果** |'
- en: '|  Iteration | ` for x in (45,58,99) : print (x,end = '' '')` | ` 45 58 99`
    |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '迭代 | ` for x in (45,58,99) : print (x,end = '' '')` | ` 45 58 99` |'
- en: '|  Repetition | ` (''Python'') * 3` | ` (''python'', ''python'', ''python'')`
    |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: 重复 | ` ('Python') * 3` | ` ('python', 'python', 'python')` |
- en: '|  Length | ` len(45, 58, 99, 65)` | ` 4` |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: 长度 | ` len(45, 58, 99, 65)` | ` 4` |
- en: '|  Concatenation | ` (30, 50, 60) + (''Hello'', 75, 66)` | ` (30,50,60,''Hello'',75,66)`
    |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: 连接 | ` (30, 50, 60) + ('Hello', 75, 66)` | ` (30,50,60,'Hello',75,66)` |
- en: '|  Membership | ` 45 in (45,58,99,65)` | ` True` |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: 成员资格 | ` 45 in (45,58,99,65)` | ` True` |
- en: Indexing, slicing, and matrices
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引、切片和矩阵
- en: Tuple indices work the same way as list indices. Values can be accessed using
    index. If you try to read or write an element that does not exist, you get `IndexError`.
    If an index has a negative value, it counts backward from the end of the list.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 元组索引的工作方式与列表索引相同。可以使用索引访问值。如果尝试读取或写入不存在的元素，则会收到`IndexError`。如果索引具有负值，则从列表末尾向后计数。
- en: 'Now, we will create a tuple named `cities` and perform some index operations:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个名为`cities`的元组并执行一些索引操作：
- en: '`cities = (''Mumbai'', ''Bangalore'', ''Chennai'', ''Pune'')`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`cities = (''Mumbai'', ''Bangalore'', ''Chennai'', ''Pune'')`'
- en: '| **Description** | **Expression** | **Results** |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **表达式** | **结果** |'
- en: '| Index starts at zero | `cities[2]` | `''Chennai''` |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: 索引从零开始 | `cities[2]` | `'Chennai'` |
- en: '| Slicing: getting sections | `cities[1:]` | `(''Bangalore'', ''Chennai'',
    ''Pune'')` |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: 切片：获取部分 | `cities[1:]` | `('Bangalore', 'Chennai', 'Pune')` |
- en: '| Negative: count from the right | `cities[-3]` | `''Bangalore''` |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: 负数：从右边计数 | `cities[-3]` | `'Bangalore'` |
- en: max() and min()
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: max()和min()
- en: 'Using the `max()` and `min()` functions, we can find the highest and lowest
    values from the tuple. These functions allow us to find out information about
    quantitative data. Let''s look at an example:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`max（）`和`min（）`函数，我们可以从元组中找到最高和最低的值。这些函数允许我们获取有关定量数据的信息。让我们看一个例子：
- en: '[PRE76]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Using `max(),` we will get the highest value in our tuple. Similarly, we can
    use the `min()` function:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`max（）`，我们将获得元组中的最大值。类似地，我们可以使用`min（）`函数：
- en: '[PRE77]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: So, here we are getting the minimum value.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这里我们得到了最小值。
- en: Sets
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: A set is an unordered collection of elements with no duplicates. The basic use
    of a set is to check membership testing and eliminate duplicate entries. These
    set objects support mathematical operations, such as union, intersection, difference,
    and symmetric difference. We can create a set using curly braces or the `set()`
    function. If you want create an empty set, then use `set()`, not `{}`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是一个无序的元素集合，没有重复项。集合的基本用途是检查成员资格测试和消除重复条目。这些集合对象支持数学运算，如并集、交集、差集和对称差。我们可以使用大括号或`set()`函数创建一个集合。如果要创建一个空集合，则使用`set()`而不是`{}`。
- en: 'Here is a brief demonstration:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简要演示：
- en: '[PRE78]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Set comprehensions are also supported in Python. Refer to the following code:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: Python还支持集合解析。请参阅以下代码：
- en: '[PRE79]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Dictionaries
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: A dictionary is a data type in Python, which consists of key value pairs and
    is enclosed in curly braces `{}`. Dictionaries are unordered and indexed by keys,
    where each key must be unique. These keys must be immutable type. Tuples can be
    used as keys if they contain only strings, numbers, or tuples.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是Python中的一种数据类型，由键值对组成，括在大括号`{}`中。字典是无序的，并由键索引，其中每个键必须是唯一的。这些键必须是不可变类型。如果元组只包含字符串、数字或元组，则可以将元组用作键。
- en: 'Just a pair of braces creates an empty dictionary: `{ }`. The main operations
    on a dictionary are storing a value with some key and extracting the value given
    to the key. It is also possible to delete a key value pair with `del`. If you
    store using a key that is already in use, the old value associated with that key
    is forgotten. It is an error to extract a value using a non-existent key. Here
    is a small example using a dictionary:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一对大括号会创建一个空字典：`{}`。字典的主要操作是使用某个键存储值并提取给定键的值。还可以使用`del`删除键值对。如果使用已经使用的键进行存储，则与该键关联的旧值将被遗忘。使用不存在的键提取值是错误的。以下是使用字典的一个小例子：
- en: '[PRE80]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Arbitrary key and value expressions along with dictionary comprehensions are
    used to create dictionaries:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字典解析还支持任意键和值表达式来创建字典：
- en: '[PRE81]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'When the keys are simple strings, it is sometimes easier to specify pairs using
    keyword arguments:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 当键是简单字符串时，有时使用关键字参数指定对更容易：
- en: '[PRE82]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Parsing command-line arguments
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析命令行参数
- en: In this section, we are going to learn about parsing arguments and the module
    used to parse arguments.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习解析参数和用于解析参数的模块。
- en: Command-line arguments in Python
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的命令行参数
- en: 'We can start a program with additional arguments, in the command line. Python
    programs can start with command-line arguments. Let''s look at an example:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在命令行中使用额外的参数来启动程序。Python程序可以使用命令行参数启动。让我们看一个例子：
- en: '[PRE83]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Here, `program_name.py` and `img.jpg` are arguments.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`program_name.py`和`img.jpg`是参数。
- en: 'Now, we are going to use modules to get the arguments:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用模块来获取参数：
- en: '| **Module** | **Use** | **Python version** |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| **模块** | **用途** | **Python版本** |'
- en: '| `optparse` | Deprecated | `< 2.7` |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| `optparse` | 已弃用 | `< 2.7` |'
- en: '| `sys` | All arguments in `sys.argv` (basic) | All |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| `sys` | `sys.argv`中的所有参数（基本） | 所有 |'
- en: '| `argparse` | Building a command-line interface | `>= 2.3` |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| `argparse` | 构建命令行界面 | `>= 2.3` |'
- en: '| `fire` | Automatically generating **Command-Line Interfaces** (**CLIs**)
    | All |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `fire` | 自动生成**命令行界面**（**CLIs**） | 所有 |'
- en: '| `docopt` | Creating CLIs interfaces | `>= 2.5` |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `docopt` | 创建CLIs界面 | `>= 2.5` |'
- en: Sys.argv
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sys.argv
- en: 'The `sys` module is used to access command-line parameters. The `len(sys.argv)` function
    contains the number of arguments. To print all of the arguments, simply execute
    `str(sys.argv)`. Let''s have a look at an example:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`sys`模块用于访问命令行参数。`len(sys.argv)`函数包含参数的数量。要打印所有参数，只需执行`str(sys.argv)`。让我们看一个例子：'
- en: '[PRE84]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Decision making
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决策制定
- en: When we want to execute a code block when the condition is `true`, decision
    making comes to the rescue. The `if...elif...else` statement is used in Python
    for decision making.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 当条件为`true`时，决策制定就派上用场了。`if...elif...else`语句用于在Python中进行决策制定。
- en: Python if statement syntax
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python if语句语法
- en: 'The following is the syntax for the `if` statement:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`if`语句的语法：
- en: '[PRE85]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Here, the program evaluates the test expression and will execute `statement(s)`
    only if the text expression is `true`. If the text expression is `false`, `statement(s)`
    isn't executed.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，程序评估测试表达式，并且只有在测试表达式为`true`时才执行`语句`。如果测试表达式为`false`，则不执行`语句`。
- en: 'In Python, the body of the `if` statement is indicated by the indentation.
    The body starts with an indentation and the first unindented line marks the end.
    Let''s look at an example:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，`if`语句的主体由缩进表示。主体以缩进开始，第一行不缩进的行标志着结束。让我们看一个例子：
- en: '[PRE86]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Python if...else statement syntax
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python if...else语句语法
- en: 'In this section, we are going to learn about the `if..else` statement. The
    `else` block will get executed only when the `if` condition is `false`. Refer
    to the following syntax:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`if..else`语句。只有当`if`条件为`false`时，`else`块才会被执行。请参考以下语法：
- en: '[PRE87]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The `if..else` statement evaluates the test expression and will execute the
    body of `if` only when the test condition is `true.` If the condition is `false,`
    the body of `else` is executed. Indentation is used to separate the blocks. Refer
    to the following example:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`if..else`语句评估测试表达式，并且只有在测试条件为`true`时才执行`if`的主体。如果条件为`false`，则执行`else`的主体。缩进用于分隔块。请参考以下示例：'
- en: '[PRE88]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Python if...elif...else statement
  id: totrans-400
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python if...elif...else语句
- en: 'The `elif` statement checks multiple statements for a `true` value. Whenever
    the value evaluates to `true`, that code block gets executed. Refer to the following
    syntax:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`elif`语句检查多个语句是否为`true`值。每当值评估为`true`时，该代码块就会被执行。请参考以下语法：'
- en: '[PRE89]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '`elif` is short for `else if`. It allows us to check for multiple expressions.
    If the condition written in the `if` statement is `false`, then it will check
    the condition of the next `elif` block, and so on. If all of the conditions are
    `false`, the body of `else` is executed.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`elif`是`else if`的缩写。它允许我们检查多个表达式。如果`if`语句中的条件为`false`，那么它将检查下一个`elif`块的条件，依此类推。如果所有条件都为`false`，则执行`else`的主体。'
- en: 'Only one block among the several `if...elif...else` blocks is executed according
    to the condition. The `if` block can have only one else block. But it can have
    multiple `elif` blocks. Let''s take a look at an example:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 根据条件，`if...elif...else`块中的多个块中只有一个块被执行。`if`块只能有一个`else`块。但它可以有多个`elif`块。让我们看一个例子：
- en: '[PRE90]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Loops
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环
- en: 'To handle all of the looping requirements in your script, Python supports two
    loops:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理脚本中的所有循环需求，Python支持两种循环：
- en: '`for loop`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for循环`'
- en: '`while loop`'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while循环`'
- en: Now, we are going to learn about `for loop` and `while loop`.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习`for循环`和`while循环`。
- en: for loop
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for循环
- en: '`for loop` iterates over each item of the sequence or any other iterable object
    and it will execute the statements in the for block each time. Refer to the following
    syntax:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`for循环`遍历序列或任何其他可迭代对象的每个项目，并且每次都会执行for块中的语句。请参考以下语法：'
- en: '[PRE91]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Here, `i` is the variable that takes the value of the item inside the sequence
    on each iteration. This loop continues until we reach the last item in the sequence.
    This is illustrated in the following diagram:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`i`是变量，它在每次迭代时取序列内的项目的值。这个循环会一直持续，直到我们到达序列中的最后一个项目。这在下面的图表中有所说明：
- en: '![](assets/822a75d6-353a-4464-9de9-1cfbff43b9e9.png)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/822a75d6-353a-4464-9de9-1cfbff43b9e9.png)'
- en: 'Refer to the following example:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下示例：
- en: '[PRE92]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The range() function
  id: totrans-418
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: range()函数
- en: The Python `range()` function will generate a sequence of numbers. For example,
    `range(10)` will generate numbers from `0` to `9` (10 numbers).
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`range()`函数将生成一个数字序列。例如，`range(10)`将生成从`0`到`9`的数字（10个数字）。
- en: 'We can also define the start, stop, and step size as parameters and `range()`
    will be as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将起始、停止和步长大小定义为参数，`range()`将如下所示：
- en: '[PRE93]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Let''s take a look at an example:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE94]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: while loop
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while循环
- en: '`while` is a looping statement that will iterate over a block of code until
    the entered test expression is `true`. We use this loop when we don''t know how
    many times the iterations will go on. Refer to the following syntax:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`是一个循环语句，它将在输入的测试表达式为`true`时迭代一段代码块。当我们不知道迭代将进行多少次时，我们使用这个循环。请参考以下语法：'
- en: '[PRE95]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'In the while loop, first we will check the test expression. The `while` block
    will get executed only if the test expression is `true`. After one iteration,
    the expression will be checked again and this process continues until `test_expression`
    evaluates to `false`. This is illustrated in the following diagram:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在while循环中，首先我们将检查测试表达式。只有在测试表达式为`true`时，`while`块才会被执行。经过一次迭代后，表达式将再次被检查，这个过程将继续，直到`test_expression`评估为`false`。这在下图中有所说明：
- en: '![](assets/9ce57a7e-fd01-43c8-87d0-61c72da1a24f.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ce57a7e-fd01-43c8-87d0-61c72da1a24f.png)'
- en: 'The following is an example of the `while` loop:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`while`循环的示例：
- en: '[PRE96]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Iterators
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代器
- en: In Python, an iterator is an object that can be iterated upon. It is an object
    that will return data, one element at a time. Python's iterator object implements
    two methods, `__iter__()` and `__next__()`. Mostly, iterators are implemented
    within loops, generators, and comprehensions.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，迭代器是可以被迭代的对象。它是一个对象，每次返回一个元素的数据。Python的迭代器对象实现了两个方法，`__iter__()`和`__next__()`。大多数情况下，迭代器在循环、生成器和推导式中实现。
- en: 'In the following example, we are using the `next()` function, which will iterate
    through all of the items. After reaching the end and there is no more data to
    be returned, it will raise `StopIteration`, as shown in the following example:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用`next()`函数，它将遍历所有项目。在到达末尾并且没有更多数据需要返回时，它将引发`StopIteration`，如下例所示：
- en: '[PRE97]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Generators
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器
- en: We can create iterators using Python generators. In Python, a generator is a
    function that returns an object that we can iterate over.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python生成器创建迭代器。在Python中，生成器是一个返回可以迭代的对象的函数。
- en: How to create a generator in Python?
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在Python中创建一个生成器？
- en: 'Creating a generator is easy in Python. You can create a generator just by
    defining a function with a `yield` statement instead of a `return` statement.
    If a function contains at least one `yield` statement, it becomes a generator
    function. `yield` and `return` statements will return some value from a function.
    Here is an example:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中创建生成器很容易。您可以通过定义一个带有`yield`语句而不是`return`语句的函数来创建生成器。如果一个函数包含至少一个`yield`语句，它就成为一个生成器函数。`yield`和`return`语句将从函数返回一些值。以下是一个例子：
- en: '[PRE98]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Functions
  id: totrans-440
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'A function is a set of statements that perform a specific task. Using functions
    helps in breaking our program into smaller parts. Programs will be more organized
    if we use functions as it avoids repetition and makes code reusable. Look at the
    following syntax:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是执行特定任务的一组语句。使用函数有助于将程序分解为更小的部分。如果使用函数，程序将更有组织性，因为它避免了重复，并使代码可重用。看一下以下语法：
- en: '[PRE99]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Refer to the following example:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下示例：
- en: '[PRE100]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: The return statement
  id: totrans-445
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回语句
- en: 'The `return` statement is used to exit a function. Refer to the following syntax:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`return`语句用于退出函数。参考以下语法：'
- en: '[PRE101]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'This statement may contain an expression where a value has to be returned.
    If there is no expression, then the function will return a None object, as shown
    in the following example:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句可能包含一个表达式，其中必须返回一个值。如果没有表达式，那么函数将返回一个None对象，如下例所示：
- en: '[PRE102]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Lambda functions
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda函数
- en: In Python, an anonymous function is a function that is defined without a name
    and is called a `lambda` function, as it is defined using a keyword `lambda`.
    We use these functions whenever we require a function for a short period of time.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，匿名函数是没有名称定义的函数，称为`lambda`函数，因为它是使用关键字`lambda`定义的。我们在需要短时间内使用函数时使用这些函数。
- en: Lambda functions are used along with built-in functions, such as `filter()`,
    and `map()`.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数与内置函数一起使用，例如`filter()`和`map()`。
- en: The filter() function returns a list of elements and has only one iterable as
    input. The following shows an example using `filter():`
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: filter()函数返回一个元素列表，并且只有一个可迭代的输入。以下是使用`filter()`的示例：
- en: '[PRE103]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: In this example, the `filter()` function is taking a `lambda` function and a
    list as an argument.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`filter()`函数接受一个`lambda`函数和一个列表作为参数。
- en: The `map()` function returns a list of results after applying the specified
    function. Now, let's look at an example using `map():`
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`map()`函数在应用指定函数后返回结果列表。现在，让我们看一个使用`map()`的示例：'
- en: '[PRE104]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Here, the `map()` function is taking a `lambda` function and a list.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`map()`函数接受一个`lambda`函数和一个列表。
- en: Modules
  id: totrans-459
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: Modules are just files that contain Python statements and definitions. A file
    that contains Python code (for example, `sample.py`) is called a module and its
    module name would be `sample`. Using modules, we can break larger programs into
    small and organized ones. An important feature of a module is re-usability. Instead
    of copying the definitions of the most used functions in different programs, you
    can define them in the module and just import them whenever needed.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 模块只是包含Python语句和定义的文件。包含Python代码的文件（例如，`sample.py`）被称为模块，其模块名称将是`sample`。使用模块，我们可以将较大的程序分解为小的有组织的部分。模块的一个重要特性是可重用性。您可以在模块中定义最常用的函数的定义，而不是在不同的程序中复制它们，只需在需要时导入它们。
- en: 'Let''s create a module and import it. We will create two scripts: `sample.py`
    and `add.py`. We will import a sample module in our `add.py`. Now, save the following
    code as `sample.py`. Let''s take a look with the following example:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个模块并导入它。我们将创建两个脚本：`sample.py`和`add.py`。我们将在`add.py`中导入一个示例模块。现在，将以下代码保存为`sample.py`。让我们看看以下示例：
- en: '[PRE105]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Here, we have defined a `addition()` function inside a module named `sample`.
    The function takes in two numbers and returns their sum. Now we have created a
    module. You can import this in any Python program.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在名为`sample`的模块中定义了一个`addition()`函数。该函数接受两个数字并返回它们的和。现在我们已经创建了一个模块。您可以在任何Python程序中导入它。
- en: Importing modules
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入模块
- en: 'Now, after creating a module, we will learn how to import that module. In the
    previous example, we created a sample module. Now we will import the sample module
    in `add.py script`:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在创建模块之后，我们将学习如何导入该模块。在前面的示例中，我们创建了一个示例模块。现在我们将在`add.py`脚本中导入示例模块：
- en: '[PRE106]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Summary
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've given an overview of the Python scripting language. We
    have learned about how to install Python and various tools. We also learned about the
    Python interpreter and how to use it. We learned about Python-supported data types,
    variables, numbers and strings, decision-making statements, and looping statements
    in Python. We also learned about functions and how to use them in scripts and
    modules and how to create and import them.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了Python脚本语言。我们学习了如何安装Python和各种工具。我们还学习了Python解释器以及如何使用它。我们了解了Python支持的数据类型、变量、数字和字符串、决策语句以及循环语句。我们还学习了函数以及如何在脚本和模块中使用它们以及如何创建和导入它们。
- en: In the next chapter, *Debugging and Profiling Python Scripts*, you will learn
    about Python debugging techniques, error handling (exception handling), debuggers
    tools, debugging basic program crashes, profiling and timing programs, and making
    programs run faster.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章《调试和分析Python脚本》中，您将学习Python调试技术、错误处理（异常处理）、调试工具、调试基本程序崩溃、程序分析和计时、以及使程序运行更快的方法。
- en: Questions
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are iterators and generators ?
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代器和生成器是什么？
- en: Are lists mutable or immutable ?
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表是可变的还是不可变的？
- en: What are the data structures in Python ?
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中的数据结构是什么？
- en: How to access values in a list ?
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何访问列表中的值？
- en: What are modules ?
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块是什么？
- en: Further reading
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: All of the Python documentation is available on the following site: [www.python.org](http://www.python.org).
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Python文档都可以在以下网站上找到：[www.python.org](http://www.python.org)。
- en: You can also check the following books, *Learn Python Hard Way* and *Byte of
    Python*, to cover the basics of Python.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以查阅以下书籍，《学习Python的艰难方式》和《Python之字节》，以了解Python的基础知识。
