- en: Database Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库处理
- en: 'Database handling plays a major role in any application as data needs to be
    stored for future use. You need to store customer information, user information,
    product information, order information, and so on. In this chapter, you will learn
    every task that is related to database handling:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库处理在任何应用程序中都起着重要作用，因为数据需要存储以备将来使用。您需要存储客户信息、用户信息、产品信息、订单信息等。在本章中，您将学习与数据库处理相关的每项任务：
- en: Creating a database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Creating a database table
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库表
- en: Inserting rows in the specified database table
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在指定的数据库表中插入行
- en: Displaying rows in the specified database table
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示指定数据库表中的行
- en: Navigating through the rows of the specified database table
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在指定的数据库表中导航行
- en: Searching a database table for specific information
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库表中搜索特定信息
- en: Creating a signin form – applying an authentication procedure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建登录表单-应用认证程序
- en: Updating a database table – changing a user's password
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新数据库表-更改用户密码
- en: Deleting a row from a database table
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库表中删除一行
- en: We will be using SQLite for database handling. Before we move further into the
    chapter, let's have a quick introduction to SQLite.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用SQLite进行数据库处理。在我们进入本章的更深入之前，让我们快速介绍一下SQLite。
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: SQLite is a very easy-to-use database engine. Basically, it is a lightweight
    database meant to be used in small applications that can be stored in a single
    disk file. It is a very popular database used in phones, tablets, small appliances,
    and instruments. SQLite does not require a separate server process, and does not
    even require any configuration.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是一个非常易于使用的数据库引擎。基本上，它是一个轻量级数据库，适用于存储在单个磁盘文件中的小型应用程序。它是一个非常受欢迎的数据库，用于手机、平板电脑、小型设备和仪器。SQLite不需要单独的服务器进程，甚至不需要任何配置。
- en: 'To make this database easy to use in Python scripts, the Python Standard Library
    includes a module called `sqlite3`. So, to use SQLite in any Python application,
    you need to import the `sqlite3` module using the `import` statement shown here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个数据库在Python脚本中更容易使用，Python标准库包括一个名为`sqlite3`的模块。因此，要在任何Python应用程序中使用SQLite，您需要使用`import`语句导入`sqlite3`模块，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first step to use any database is to create a `connect` object, by means
    of which you need to establish a connection with the database. The following example
    establishes a connection to the `ECommerce` database:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何数据库的第一步是创建一个`connect`对象，通过它您需要与数据库建立连接。以下示例建立到`ECommerce`数据库的连接：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This example will establish a connection to the `ECommerce` database if it already
    exists. If the database does not already exist, the database will be created first
    and then the connection established.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库已经存在，此示例将建立到`ECommerce`数据库的连接。如果数据库不存在，则首先创建数据库，然后建立连接。
- en: 'You can also create a temporary database in memory, that is, in RAM by using
    the `:memory:` argument in the `connect` method, as shown here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`connect`方法中的`:memory:`参数在内存中创建临时数据库。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can also supply the special name `:memory:` to create a database in RAM.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`:memory:`特殊名称在RAM中创建数据库。
- en: 'Once the job associated with the database is over, you need to close the connection
    using the following statement:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦与数据库相关的工作结束，您需要使用以下语句关闭连接：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating the cursor object
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建游标对象
- en: 'To work with database tables, you need to get a `cursor` object and pass the
    SQL statements to the `cursor` object to execute them. The following statement
    creates a `cursor` object called `cur`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用数据库表，您需要获取一个`cursor`对象，并将SQL语句传递给`cursor`对象以执行它们。以下语句创建一个名为`cur`的`cursor`对象：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using the `cursor` object, `cur`, you can execute SQL statements. For example,
    the following set of statements creates a `Users` table consisting of three columns,
    `id`, `EmailAddress`, and `Password`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`cursor`对象`cur`，您可以执行SQL语句。例如，以下一组语句创建一个包含三列`id`、`EmailAddress`和`Password`的`Users`表：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Remember, you need to commit the changes to the database by invoking the `commit()` method
    on the connection object, otherwise all the changes made to the database will
    be lost.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您需要通过在连接对象上调用`commit()`方法来提交对数据库的更改，否则对数据库所做的所有更改都将丢失。
- en: 'The following set of statements will drop the `Users` table:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一组语句将删除`Users`表：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating a database
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: In this recipe, we will be prompting the user to enter a database name, followed
    by clicking the push button. Upon clicking the push button, if the specified database
    does not exist, it is created and, if it already exists, it is connected.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将提示用户输入数据库名称，然后点击按钮。点击按钮后，如果指定的数据库不存在，则创建它，如果已经存在，则连接它。
- en: How to do it…
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow this step-by-step procedure to create a database in SQLite:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按照逐步过程在SQLite中创建数据库：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add two `QLabel` widgets, one `QLineEdit` widget, and one `QPushButton` widget
    to the form by dragging and dropping two Label widget, one Line Edit widget, and
    a Push Button widget on the form.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放两个标签小部件、一个行编辑小部件和一个按钮小部件到表单上，添加两个`QLabel`小部件、一个`QLineEdit`小部件和一个`QPushButton`小部件。
- en: Set the text property of the first Label widget to `Enter database name`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个标签小部件的文本属性设置为`输入数据库名称`。
- en: Delete the text property of the second Label widget because this is established.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第二个标签小部件的文本属性，因为这是已经建立的。
- en: Set the objectName property of the Line Edit widget to `lineEditDBName`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行编辑小部件的对象名称属性设置为`lineEditDBName`。
- en: Set the objectName property of the Push Button widget to `pushButtonCreateDB`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮小部件的对象名称属性设置为`pushButtonCreateDB`。
- en: Set the objectName property of the second Label widget to `labelResponse`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个标签小部件的对象名称属性设置为`labelResponse`。
- en: 'Save the application by name as `demoDatabase.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDatabase.ui`。表单现在将显示如下截图所示：
- en: '![](assets/14fd5deb-fdad-4905-8ce4-b20927514f75.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/14fd5deb-fdad-4905-8ce4-b20927514f75.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. By applying the `pyuic5`
    utility, the XML file is converted into Python code. The Python script generated,
    `demoDatabase.py`, can be seen in the source code bundle of the book.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。通过应用`pyuic5`实用程序，将XML文件转换为Python代码。生成的Python脚本`demoDatabase.py`可以在本书的源代码包中看到。
- en: Treat the `demoDatabase.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoDatabase.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callDatabase.pyw` and import the
    `demoDatabase.py` code into it:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDatabase.pyw`的Python文件，并将`demoDatabase.py`代码导入其中：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can see in the script that the click() event of the push button with the
    objectName property `pushButtonCreateDB` is connected to the `createDatabase()`
    method. This means that,  whenever the push button is clicked, the `createDatabase()`
    method is invoked. In the `createDatabase()` method, the `connect()` method is
    invoked on the `sqlite3` class and the database name entered by the user in the
    Line Edit widget is passed to the `connect()` method. The `connect()` method will
    create the database if it does not exist already. If no error occurs in creating
    the database, the message Database is created is displayed via the Label widget
    to inform the user; otherwise, a Some error has occurred message is displayed
    via the Label widget to indicate the occurrence of an error.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中看到，具有objectName属性`pushButtonCreateDB`的按钮的click()事件与`createDatabase()`方法连接在一起。这意味着每当单击按钮时，就会调用`createDatabase()`方法。在`createDatabase()`方法中，调用了`sqlite3`类的`connect()`方法，并将用户在Line
    Edit小部件中输入的数据库名称传递给`connect()`方法。如果在创建数据库时没有发生错误，则通过Label小部件显示消息“数据库已创建”以通知用户；否则，通过Label小部件显示消息“发生了一些错误”以指示发生错误。
- en: 'On running the application, you will be prompted to enter the database name.
    Suppose we enter the database name as `Ecommerce`. Upon clicking the Create Database
    button, the database will be created and you get the message Database is created:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将提示您输入数据库名称。假设我们输入数据库名称为`Ecommerce`。单击“创建数据库”按钮后，将创建数据库并收到消息“数据库已创建”：
- en: '![](assets/6f1378e9-e4d2-44b9-ae9b-4d586e8ebc92.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f1378e9-e4d2-44b9-ae9b-4d586e8ebc92.png)'
- en: Creating a database table
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库表
- en: In this recipe, we will be learning to create a database table. The user will
    be prompted to specify the database name, followed by the table name that is to
    be created. The recipe enables you to enter column names and their data types.
    Upon clicking the push button, the table with the defined columns will be created
    in the specified database.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何创建一个数据库表。用户将被提示指定数据库名称，然后是要创建的表名称。该示例使您能够输入列名及其数据类型。单击按钮后，将在指定的数据库中创建具有定义列的表。
- en: How to do it…
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here are the steps to create a GUI that enables the user to enter all the information
    for the database table to be created. Using this GUI, the user can specify the
    database name, column names, and choose column types too:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建一个GUI的步骤，使用户能够输入有关要创建的数据库表的所有信息。使用此GUI，用户可以指定数据库名称、列名，并且还可以选择列类型：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add five `QLabel`, three `QLineEdit`, one `QComboBox`, and two `QPushButton`
    widgets to the form by dragging and dropping five Label, three Line Edit, one Combo
    Box, and two Push Button widgets on the form.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放五个Label、三个Line Edit、一个Combo Box和两个Push Button小部件到表单上，添加五个QLabel、三个QLineEdit、一个QComboBox和两个QPushButton小部件。
- en: Set the text property of the first four Label widgets to `Enter database name`,
    `Enter table name`, `Column Name`, and `Data Type`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前四个Label小部件的文本属性设置为`输入数据库名称`，`输入表名称`，`列名`和`数据类型`。
- en: Delete the text property of the fifth Label widget because this is established
    through code.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第五个Label小部件的文本属性，因为这是通过代码建立的。
- en: Set the text property of the two push buttons to `Add Column` and `Create Table`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个push按钮的文本属性设置为`添加列`和`创建表`。
- en: Set the objectName property of the three Line Edit widgets to `lineEditDBName`,
    `lineEditTableName`, and `lineEditColumnName`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个Line Edit小部件的objectName属性设置为`lineEditDBName`、`lineEditTableName`和`lineEditColumnName`。
- en: Set the objectName property of the Combo Box widget to `ComboBoxDataType`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Combo Box小部件的objectName属性设置为`ComboBoxDataType`。
- en: Set the objectName property of the two push buttons to `pushButtonAddColumn`
    and `pushButtonCreateTable`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个push按钮的objectName属性设置为`pushButtonAddColumn`和`pushButtonCreateTable`。
- en: Set the objectName property of the fifth Label widget to `labelResponse`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第五个Label小部件的objectName属性设置为`labelResponse`。
- en: 'Save the application by name as `demoCreateTable.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoCreateTable.ui`。表单现在将显示如下截图所示：
- en: '![](assets/25a283f1-b10b-41da-a13d-ba1d67c4ae55.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/25a283f1-b10b-41da-a13d-ba1d67c4ae55.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. The `pyuic5` command
    is used to convert the XML file into Python code. The Python script generated,
    `demoCreateTable.py`, can be seen in the source code bundle of this book.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。使用`pyuic5`命令将XML文件转换为Python代码。本书的源代码包中可以看到生成的Python脚本`demoCreateTable.py`。
- en: Treat the `demoCreateTable.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoCreateTable.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callCreateTable.pyw` and import the
    `demoCreateTable.py` code into it:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callCreateTable.pyw`的Python文件，并将`demoCreateTable.py`代码导入其中：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: You can see in the script that the click() event of the push button with the
    objectName property `pushButtonCreateTable` is connected to the `createTable()`
    method. This means that, whenever this push button is clicked, the `createTable()`
    method will be invoked. Similarly, the click() event of the push button with the
    objectName property `pushButtonAddColumn` is connected to the `addColumns()` method.
    That is, this button, when clicked, will invoke the `addColumns()` method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中可以看到，具有objectName属性`pushButtonCreateTable`的按钮的click()事件与`createTable()`方法相连。这意味着每当单击此按钮时，将调用`createTable()`方法。类似地，具有objectName属性`pushButtonAddColumn`的按钮的click()事件与`addColumns()`方法相连。也就是说，单击此按钮将调用`addColumns()`方法。
- en: In the `addColumns()` method, the `CREATE TABLE SQL` statement is defined, which
    consists of the column name entered in the Line Edit widget and the data type
    selected from the combo box. The user can add any number of columns to the table.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`addColumns()`方法中，定义了`CREATE TABLE SQL`语句，其中包括在LineEdit小部件中输入的列名和从组合框中选择的数据类型。用户可以向表中添加任意数量的列。
- en: In the `createTable()` method, first the connection to the database is established,
    and thereafter the `CREATE TABLE SQL` statement defined in the `addColumns()`
    method is executed. If the table is successfully created, a message is displayed
    informing you of the successful creation of the table through the last Label widget.
    Finally, the connection to the database is closed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`createTable()`方法中，首先建立与数据库的连接，然后执行`addColumns()`方法中定义的`CREATE TABLE SQL`语句。如果成功创建表，将通过最后一个Label小部件显示一条消息，通知您表已成功创建。最后，关闭与数据库的连接。
- en: On running the application, you will be prompted to enter the database name
    and table name that you want to create, followed by the columns required in that
    table. Let's assume you want to create a `Users` table in the `ECommerce` table
    consisting of two columns, `EmailAddress` and `Password`. Both the columns are
    assumed to be of the text type.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将提示您输入要创建的数据库名称和表名称，然后输入该表中所需的列。假设您要在`ECommerce`表中创建一个`Users`表，其中包括`EmailAddress`和`Password`两列，这两列都假定为文本类型。
- en: 'The first column name, `Email Address`, in the `Users` table can be defined
    as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Users`表中的第一列名为`Email Address`，如下面的屏幕截图所示：'
- en: '![](assets/e6805d8b-ee5e-45dd-9d1b-f32c6aa86b7b.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e6805d8b-ee5e-45dd-9d1b-f32c6aa86b7b.png)'
- en: 'Let''s define one more column, called `Password`, of the text type in the `Users`
    table, followed by clicking the Create Table button. If the table is created with
    the specified number of columns successfully, a message, Table is successfully
    created, is displayed via the last Label widget, as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Users`表中定义另一列，称为`Password`，类型为文本，然后点击Create Table按钮。如果成功创建了指定列数的表，将通过最后一个Label小部件显示消息“表已成功创建”，如下面的屏幕截图所示：
- en: '![](assets/37ac3783-9136-42eb-a3d5-cefc0d2d003f.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/37ac3783-9136-42eb-a3d5-cefc0d2d003f.png)'
- en: 'To verify that the table was created, I will be making use of a visual tool
    that enables you to create, edit, and view the database tables and rows inside
    them. That visual tool is DB Browser for SQLite, which I downloaded from [http://sqlitebrowser.org/](http://sqlitebrowser.org/).
    On launching DB Browser for SQLite, click the Open Database tab below the main
    menu. Browse and select the `ECommerce` database from the current folder. The
    `ECommerce` database shows the `Users` table consisting of two columns, `EmailAddress`
    and `Password`, as shown in the following screenshot, confirming that the database
    table was created successfully:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证表是否已创建，我将使用一种可视化工具，该工具可以让您创建、编辑和查看数据库表及其中的行。这个可视化工具是SQLite的DB Browser，我从[http://sqlitebrowser.org/](http://sqlitebrowser.org/)下载了它。在启动DB
    Browser for SQLite后，点击主菜单下方的“打开数据库”选项卡。浏览并选择当前文件夹中的`ECommerce`数据库。`ECommerce`数据库显示了一个包含两列`EmailAddress`和`Password`的`Users`表，如下面的屏幕截图所示，证实数据库表已成功创建：
- en: '![](assets/e64bbee5-b2a2-4f18-b53f-ee14777e310e.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e64bbee5-b2a2-4f18-b53f-ee14777e310e.png)'
- en: Inserting rows in the specified database table
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在指定的数据库表中插入行
- en: In this recipe, we will be learning to insert rows into a table. We assume a
    table called `Users` consisting of two columns, `EmailAddress` and `Password`,
    already exists in a database called `ECommerce`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何向表中插入行。我们假设一个名为`Users`的表已经存在于名为`ECommerce`的数据库中，包含两列`EmailAddress`和`Password`。
- en: After entering the email address and password in the respective Line Edit widgets,
    when the user clicks the Insert Row button, the row will be inserted into the
    specified database table.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在分别输入电子邮件地址和密码后，当用户点击“插入行”按钮时，将会将行插入到指定的数据库表中。
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Here are the steps to insert rows into a database table that exists in SQLite:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是向存在于SQLite中的数据库表中插入行的步骤：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个基于无按钮对话框模板的应用程序。
- en: Add five `QLabel` widgets, four `QLineEdit` widgets, and one `QPushButton` widgets
    to the form by dragging and dropping five Label widgets, four Line Edit widgtes,
    and one Push Button widget on the form.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放五个Label小部件、四个LineEdit小部件和一个PushButton小部件将它们添加到表单中。
- en: Set the text property of the first four Label widgets to `Enter database name`,
    `Enter table name`, `Email Address`, and `Password`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前四个Label小部件的文本属性设置为“输入数据库名称”、“输入表名称”、“电子邮件地址”和“密码”。
- en: Delete the text property of the fifth Label widget this is established through
    code.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第五个Label小部件的文本属性，这是通过代码建立的。
- en: Set the text property of the push button to Insert Row.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的文本属性设置为“插入行”。
- en: Set the objectName property of the four Line Edit widgets to `lineEditDBName`,
    `lineEditTableName`, `lineEditEmailAddress`, and `lineEditPassword`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个Line Edit小部件的objectName属性设置为`lineEditDBName`、`lineEditTableName`、`lineEditEmailAddress`和`lineEditPassword`。
- en: Set the objectName property of the Push Button widget to `pushButtonInsertRow`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为`pushButtonInsertRow`。
- en: Set the objectName property of the fifth Label widget to `labelResponse`. As
    we don't want the password to be displayed, we want asterisks to appear when the
    user enters their password.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第五个Label小部件的objectName属性设置为`labelResponse`。由于我们不希望密码显示出来，我们希望用户输入密码时显示星号。
- en: 'To do this, select the Line Edit widget that is meant for entering the password
    and, from the Property Editor window, select the echoMode property and set it
    to Password, instead of the default Normal, as shown in the following screenshot:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，选择用于输入密码的Line Edit小部件，并从Property Editor窗口中选择echoMode属性，并将其设置为Password，而不是默认的Normal，如下屏幕截图所示：
- en: '![](assets/24010fe7-0bcd-490a-bdbf-82206bfbc3a2.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/24010fe7-0bcd-490a-bdbf-82206bfbc3a2.png)'
- en: 'The echoMode property shows the following four options:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: echoMode属性显示以下四个选项：
- en: 'Normal: It is the default property and it displays characters when typed in
    the Line Edit widget.'
  id: totrans-99
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Normal: 这是默认属性，当在Line Edit小部件中键入字符时显示。'
- en: 'NoEcho: It does not display anything when typed in the Line Edit widget, that
    is, you will not even know the length of the text entered.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NoEcho: 在Line Edit小部件中键入时不显示任何内容，也就是说，您甚至不会知道输入的文本长度。'
- en: 'Password: It is used mostly for passwords. It displays asterisks when typed
    in the Line Edit widget.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Password: 主要用于密码。在Line Edit小部件中键入时显示星号。'
- en: 'PasswordEchoOnEdit: It displays the password while being typed in the Line
    Edit widget, although the content typed is quickly replaced by asterisks.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PasswordEchoOnEdit: 在Line Edit小部件中键入密码时显示密码，尽管输入的内容会很快被星号替换。'
- en: 'Save the application by name as `demoInsertRowsInTable.ui`. The form will now
    appear as shown in the following screenshot:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoInsertRowsInTable.ui`。表单现在将显示如下屏幕截图所示：
- en: '![](assets/e1494e00-f106-4262-91bb-46543a2899ad.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e1494e00-f106-4262-91bb-46543a2899ad.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs to be converted into Python code. By applying the `pyuic5`
    utility, the XML file will be converted into Python code. The Python script generated,
    `demoInsertRowsInTable.py`, can be seen in the source code bundle of the book.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。通过应用`pyuic5`实用程序，XML文件将被转换为Python代码。生成的Python脚本`demoInsertRowsInTable.py`可以在本书的源代码包中找到。
- en: 'Create another Python file with the name `callInsertRows.pyw` and import the
    `demoInsertRowsInTable.py` code into it. The code in the Python script `callInsertRows.pyw`
    is as shown here:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callInsertRows.pyw`的Python文件，并将`demoInsertRowsInTable.py`代码导入其中。Python脚本`callInsertRows.pyw`中的代码如下所示：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can see in the script that the click event of the push button with the objectName
    property `pushButtonInsertRow` is connected to the `InsertRows()` method. This
    means that, whenever this push button is clicked, the `InsertRows()` method will
    be invoked. In the `InsertRows()` method, an `INSERT SQL` statement is defined
    that fetches the email address and password entered in the Line Edit widgets.
    A connection is established with the database whose name is entered in the Line
    Edit widget. Thereafter, the `INSERT SQL` statement is executed, which adds a
    new row to the specified database table. Finally, the connection to the database
    is closed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中看到，具有objectName属性`pushButtonInsertRow`的push按钮的单击事件连接到`InsertRows()`方法。这意味着每当单击此push按钮时，将调用`InsertRows()`方法。在`InsertRows()`方法中，定义了一个`INSERT
    SQL`语句，用于获取在Line Edit小部件中输入的电子邮件地址和密码。与输入数据库名称的Line Edit小部件建立连接。然后，执行`INSERT SQL`语句，将新行添加到指定的数据库表中。最后，关闭与数据库的连接。
- en: 'On running the application, you will be prompted to specify the database name,
    table name, and the data for the two columns, `Email Address` and `Password`.
    After entering the required information, when you click the Insert Row button,
    a new row will be added to the table and a message, Row successfully inserted,
    will be displayed, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将提示您指定数据库名称、表名称以及两个列`Email Address`和`Password`的数据。输入所需信息后，单击插入行按钮，将向表中添加新行，并显示消息“成功插入行”，如下屏幕截图所示：
- en: '![](assets/69102eea-f463-4a74-9b7e-45251474e952.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/69102eea-f463-4a74-9b7e-45251474e952.png)'
- en: To verify that the row was inserted into the `Users` table, I will be making
    use of a visual tool called DB Browser for SQLite. It is a wonderful tool that
    enables you to create, edit, and view the database tables and rows inside them.
    You can download DB Browser for SQLite from [http://sqlitebrowser.org/](http://sqlitebrowser.org/).
    On launching DB Browser for SQLite, you need to first open the database. To do
    so, click the Open Database tab below the main menu. Browse and select the `Ecommerce`
    database from the current folder. The `Ecommerce` database shows the `Users` table.
    Click on the Execute SQL button; you get a small window to type the SQL statement.
    Write an SQL statement, `select * from Users`, and click the Run icon above the
    window.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证行是否插入了`Users`表，我将使用一个名为DB Browser for SQLite的可视化工具。这是一个很棒的工具，可以让您创建、编辑和查看数据库表及其中的行。您可以从[http://sqlitebrowser.org/](http://sqlitebrowser.org/)下载DB
    Browser for SQLite。启动DB Browser for SQLite后，您需要首先打开数据库。要这样做，请单击主菜单下方的打开数据库选项卡。浏览并选择当前文件夹中的`Ecommerce`数据库。`Ecommerce`数据库显示`Users`表。单击执行SQL按钮；您会得到一个小窗口来输入SQL语句。编写一个SQL语句，`select
    * from Users`，然后单击窗口上方的运行图标。
- en: 'All the rows entered in the `Users` table will be displayed in tabular format,
    as shown in the following screenshot. It confirms that the application made in
    our recipe is working perfectly well:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Users`表中输入的所有行将以表格格式显示，如下屏幕截图所示。确认我们在本教程中制作的应用程序运行良好：
- en: '![](assets/1a25fa44-24c3-4eec-9392-3540580713b0.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1a25fa44-24c3-4eec-9392-3540580713b0.png)'
- en: Displaying rows in the specified database table
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在指定的数据库表中显示行
- en: In this recipe, we will be learning to fetch rows from a given database table
    and display them in tabular format via the Table widget. We assume a table called
    `Users` consisting of two columns, `EmailAddress` and `Password`, already exists
    in a database called `ECommerce`. Also, we assume that the `Users` table contains
    some rows in it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习从给定数据库表中获取行并通过表小部件以表格格式显示它们。我们假设一个名为`Users`的表包含两列，`EmailAddress`和`Password`，已经存在于名为`ECommerce`的数据库中。此外，我们假设`Users`表中包含一些行。
- en: How to do it…
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow this step-by-step procedure to access rows from the database table in
    SQLite:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下逐步过程访问SQLite数据库表中的行：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add three `QLabel` widgets, two `QLineEdit` widgets, one `QPushButton`, and
    one `QTableWidget` widget to the form by dragging and dropping three Label widgets,
    two Line Edit widgets, one Push Button widget, and a Table widget on the form.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放三个标签小部件、两个行编辑小部件、一个按钮和一个表小部件到表单上，向表单添加三个`QLabel`小部件、两个`QLineEdit`小部件、一个`QPushButton`小部件和一个`QTableWidget`小部件。
- en: Set the text property of the two Label widgets to `Enter database name` and
    `Enter table name`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个标签小部件的文本属性设置为`输入数据库名称`和`输入表名称`。
- en: Delete the text property of the third Label widget because its text property
    will be set through code.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第三个标签小部件的文本属性，因为它的文本属性将通过代码设置。
- en: Set the text property of the push button to `Display Rows`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的文本属性设置为`显示行`。
- en: Set the objectName property of the two Line Edit widgets to `lineEditDBName`
    and `lineEditTableName`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个行编辑小部件的objectName属性设置为`lineEditDBName`和`lineEditTableName`。
- en: Set the objectName property of the Push Button widget to `pushButtonDisplayRows`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮小部件的objectName属性设置为`pushButtonDisplayRows`。
- en: Set the `objectName` property of the third Label widget to `labelResponse`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个标签小部件的objectName属性设置为`labelResponse`。
- en: 'Save the application by name as `demoDisplayRowsOfTable.ui`. The form will
    now appear as shown in the following screenshot:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDisplayRowsOfTable.ui`。表单现在将显示如下截图所示：
- en: '![](assets/087f96d5-d68f-46ed-b734-460c08612c8e.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/087f96d5-d68f-46ed-b734-460c08612c8e.png)'
- en: The `Users` table whose rows will be displayed through the Table widget consists
    of two columns.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将通过表小部件显示的`Users`表包含两列。
- en: Select the Table widget and select its columnCount property in the Property
    Editor window.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择表小部件，并在属性编辑器窗口中选择其columnCount属性。
- en: 'Set the columnCount property to `2` and the rowCount property to `3`, as shown
    in the following screenshot:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将columnCount属性设置为`2`，将rowCount属性设置为`3`，如下截图所示：
- en: '![](assets/546d14f3-3cac-43df-81dd-b36542f6cc78.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/546d14f3-3cac-43df-81dd-b36542f6cc78.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs to be converted into Python code. By applying the `pyuic5`
    utility, the XML file will be converted into Python code. The Python script generated,
    `demoInsertRowsInTable.py`, can be seen in the source code bundle of this book.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。通过应用`pyuic5`实用程序，XML文件将被转换为Python代码。生成的Python脚本`demoInsertRowsInTable.py`可以在本书的源代码包中找到。
- en: Treat the `demoInsertRowsInTable.py` script as a header file, and import it
    into the file from which you will invoke its user interface design.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoInsertRowsInTable.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callDisplayRows.pyw` and import the
    `demoDisplayRowsOfTable.py` code into it:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDisplayRows.pyw`的Python文件，并将`demoDisplayRowsOfTable.py`代码导入其中：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: You can see in the script that the click() event of the push button with the
    objectName property `pushButtonDisplayRows` is connected to the `DisplayRows()`
    method. This means that, whenever this push button is clicked, the `DisplayRows()`
    method will be invoked. In the `DisplayRows()` method, an `SQL SELECT` statement
    is defined that fetches the rows from the table whose name is specified in the
    Line Edit widget. Also, a connection is established with the database whose name
    is entered in the Line Edit widget. Thereafter, the `SQL SELECT` statement is
    executed. The `fetchall()` method is executed on the cursor to keep all the rows
    that are accessed from the database table.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中看到，按钮的click()事件与objectName属性`pushButtonDisplayRows`连接到`DisplayRows()`方法。这意味着每当单击此按钮时，将调用`DisplayRows()`方法。在`DisplayRows()`方法中，定义了一个`SQL
    SELECT`语句，该语句从在行编辑小部件中指定的表中获取行。还与在行编辑小部件中输入的数据库名称建立了连接。然后执行`SQL SELECT`语句。在光标上执行`fetchall()`方法，以保留从数据库表中访问的所有行。
- en: A `for` loop is executed to access one tuple at a time from the received rows,
    and again a `for` loop is executed on the tuple to get data in each column of
    that row. The data accessed in each column of the row is assigned to the Table
    widget for display. After displaying the data in the first row, the second row
    is picked up from the rows and the procedure is repeated to display the data in
    the second row in the Table widget. The two nested `for` loops are executed until
    all the rows are displayed through the Table widget.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`for`循环以一次访问接收到的行中的一个元组，并再次在元组上执行`for`循环以获取该行中每一列的数据。在表小部件中显示分配给行每一列的数据。在显示第一行的数据后，从行中选择第二行，并重复该过程以在表小部件中显示第二行的数据。两个嵌套的`for`循环一直执行，直到通过表小部件显示所有行。
- en: 'Upon running the application, you will be prompted to specify the database
    name and table name. After entering the required information, when you click the
    Display Rows button, the content of the specified database table is displayed
    through the Table widget, as shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将被提示指定数据库名称和表名。输入所需信息后，单击“显示行”按钮，指定数据库表的内容将通过表部件显示，如下截图所示：
- en: '![](assets/5e0fe826-4244-4c96-8cde-7e30a582d172.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e0fe826-4244-4c96-8cde-7e30a582d172.png)'
- en: Navigating through the rows of the specified database table
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览指定数据库表的行
- en: In this recipe, we will be learning to fetch rows from a given database table
    one at a time. That is, on running the application, the first row of the database
    table will be displayed. You will be provided with four push buttons in the application,
    called Next, Previous, First, and Last. As the name suggests, upon clicking the
    Next button, the next row in the sequence will be displayed. Similarly, upon clicking
    the Previous button, the previous row in the sequence will be displayed. Upon
    clicking the Last button, the last row of the database table will be displayed
    and, upon clicking the First button, the first row of the database table will
    be displayed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习逐个从给定数据库表中获取行。也就是说，运行应用程序时，将显示数据库表的第一行。应用程序中提供了四个按钮，称为Next、Previous、First和Last。顾名思义，单击Next按钮将显示序列中的下一行。类似地，单击Previous按钮将显示序列中的上一行。单击Last按钮将显示数据库表的最后一行，单击First按钮将显示数据库表的第一行。
- en: How to do it…
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Here are the steps to understand how rows from a database table are accessed
    and displayed one by one:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是了解如何逐个访问和显示数据库表中的行的步骤：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add three `QLabel` widgets, two `QLineEdit` widgets, and four `QPushButton` widgets
    to the form by dragging and dropping three Label widgets, two Line Edit widgets,
    and four Push Button widgets on the form.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放三个标签部件、两个行编辑部件和四个按钮部件将它们添加到表单上。
- en: Set the text property of the two Label widgets to `Email Address` and `Password`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个标签部件的文本属性设置为`Email Address`和`Password`。
- en: Delete the text property of the third Label widget because its text property
    will be set through code.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第三个标签部件的文本属性，因为它的文本属性将通过代码设置。
- en: Set the text property of the four push buttons to `First Row`, `Previous`, `Next`,
    and `Last Row`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个按钮的文本属性设置为`First Row`、`Previous`、`Next`和`Last Row`。
- en: Set the objectName property of the two Line Edit widgets to `lineEditEmailAddress`
    and `lineEditPassword`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个行编辑部件的objectName属性设置为`lineEditEmailAddress`和`lineEditPassword`。
- en: Set the objectName property of the four push buttons to `pushButtonFirst`, `pushButtonPrevious`,
    `pushButtonNext`, and `pushButtonLast`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个按钮的objectName属性设置为`pushButtonFirst`、`pushButtonPrevious`、`pushButtonNext`和`pushButtonLast`。
- en: Set the objectName property of the third Label widget to `labelResponse`. Because
    we don't want the password to be displayed, we want the asterisks to appear when
    the user enters their password.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个标签部件的objectName属性设置为`labelResponse`。因为我们不希望密码被显示，我们希望用户输入密码时出现星号。
- en: Select the Line Edit widget that is meant for entering the password (`lineEditPassword`)
    and, from the Property Editor window, select the echoMode property and set it
    to Password instead of the default Normal.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择用于输入密码的行编辑部件（lineEditPassword），从属性编辑器窗口中选择echoMode属性，并将其设置为Password，而不是默认的Normal。
- en: 'Save the application by name as `demoShowRecords`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoShowRecords`。表单现在将显示如下截图所示：
- en: '![](assets/2a4ab6c3-609c-4fd9-96b0-b375a38941dd.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2a4ab6c3-609c-4fd9-96b0-b375a38941dd.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and on applying the `pyuic5` command, the XML file can be converted
    into Python code. The Python script generated, `demoShowRecords.py`, can be seen
    in the source code bundle of the book.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，应用`pyuic5`命令后，XML文件可以转换为Python代码。书籍的源代码包中可以看到生成的Python脚本`demoShowRecords.py`。
- en: Treat the `demoShowRecords.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoShowRecords.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: Create another Python file with the name `callShowRecords.pyw` and import the
    `demoShowRecords.py` code into it.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callShowRecords.pyw`的Python文件，并将`demoShowRecords.py`代码导入其中。
- en: '[PRE11]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: You can see in the script that the click() event of the push button with the
    objectName property `pushButtonFirst` is connected to the `ShowFirstRow()` method,
    the push button with the objectName property `pushButtonPrevious` is connected
    to the `ShowPreviousRow()` method, the push button with the objectName property
    `pushButtonNext` is connected to the `ShowNextRow()` method, and the push button
    with the objectName property `pushButtonLast` is connected to the `ShowLastRow()`
    method.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中看到，具有objectName属性`pushButtonFirst`的按钮的click()事件连接到`ShowFirstRow()`方法，具有objectName属性`pushButtonPrevious`的按钮连接到`ShowPreviousRow()`方法，具有objectName属性`pushButtonNext`的按钮连接到`ShowNextRow()`方法，具有objectName属性`pushButtonLast`的按钮连接到`ShowLastRow()`方法。
- en: Whenever a push button is clicked, the associated method will be invoked.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 每当单击按钮时，将调用相关方法。
- en: In the `ShowFirstRow()` method, an `SQL SELECT` statement is executed that fetches
    the email address and password columns of the `Users` table. The `fetchone()`
    method is executed on the cursor to access the first row from the rows that are
    received on execution of the `SQL SELECT` statement. The data in the `EmailAddress`
    and `Password` columns is displayed through two Line Edit widgets on the screen.
    If an error occurs when accessing the rows, an error message, `Error in accessing
    table`, will be displayed through the Label widget.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ShowFirstRow()`方法中，执行了一个`SQL SELECT`语句，获取了`Users`表的电子邮件地址和密码列。在光标上执行了`fetchone()`方法，以访问执行`SQL
    SELECT`语句后接收到的第一行。`EmailAddress`和`Password`列中的数据通过屏幕上的两个Line Edit小部件显示出来。如果在访问行时发生错误，错误消息`Error
    in accessing table`将通过标签小部件显示出来。
- en: To fetch the previous row, we make use of a global variable, `rowNo`, which
    is initialized to `1`. In the `ShowPreviousRow()` method, the value of the global
    variable, `rowNo`, is decremented by `1`. Thereafter, an `SQL SELECT` statement
    is executed that fetches the `EmailAddress` and `Password` columns of the `Users`
    table whose `rowid=rowNo`. Because the `rowNo` variable is decremented by `1`,
    the `SQL SELECT` statement will fetch the previous row in the sequence. The `fetchone()`
    method is executed on the cursor to access the received row, and the data in the
    `EmailAddress` and `Password` columns is displayed through two Line Edit widgets
    on the screen.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取上一行，我们使用了一个全局变量`rowNo`，它被初始化为`1`。在`ShowPreviousRow()`方法中，全局变量`rowNo`的值减少了`1`。然后，执行了一个`SQL
    SELECT`语句，获取了`Users`表的`EmailAddress`和`Password`列，其中`rowid=rowNo`。因为`rowNo`变量减少了`1`，所以`SQL
    SELECT`语句将获取序列中的上一行。在光标上执行了`fetchone()`方法，以访问接收到的行，`EmailAddress`和`Password`列中的数据通过屏幕上的两个Line
    Edit小部件显示出来。
- en: If the first row is already being displayed, then, upon clicking the Previous
    button, it will simply display a message, This is the first row, through the Label
    widget.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经显示了第一行，则点击“上一个”按钮，它将通过标签小部件简单地显示消息“This is the first row”。
- en: We make use of the global variable `rowNo` while accessing the next row in the
    sequence too. In the `ShowNextRow()` method, the value of the global variable
    `rowNo` is incremented by `1`. Thereafter, an `SQL SELECT` statement is executed
    that fetches the `EmailAddress` and `Password` columns of the `Users` table whose
    `rowid=rowNo`; hence, the next row, that is, the one whose `rowid` is one higher
    than the current row, is accessed. The `fetchone()` method is executed on the
    cursor to access the received row and the data in the `EmailAddress` and `Password`
    columns is displayed through two Line Edit widgets on the screen.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问序列中的下一行时，我们使用全局变量`rowNo`。在`ShowNextRow()`方法中，全局变量`rowNo`的值增加了`1`。然后，执行了一个`SQL
    SELECT`语句，获取了`Users`表的`EmailAddress`和`Password`列，其中`rowid=rowNo`；因此，访问了下一行，即`rowid`比当前行高`1`的行。在光标上执行了`fetchone()`方法，以访问接收到的行，`EmailAddress`和`Password`列中的数据通过屏幕上的两个Line
    Edit小部件显示出来。
- en: If you are looking at the last row in the database table, then, upon clicking
    the Next button, it will simply display a message, This is the last row, through
    the Label widget.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在查看数据库表中的最后一行，然后点击“下一个”按钮，它将通过标签小部件简单地显示消息“This is the last row”。
- en: In the `ShowLastRow()` method, an `SQL SELECT` statement is executed that fetches
    the `EmailAddress` and `Password` columns of the `Users` table. The `fetchall()`
    method is executed on the cursor to access the remainder of the rows in the database
    table. Using the `for` loop, a `row` variable is moved to the last row from the
    rows that are received upon execution of the `SQL SELECT` statement. The data
    in the `EmailAddress` and `Password` columns of the last row is displayed through
    two Line Edit widgets on the screen.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ShowLastRow()`方法中，执行了一个`SQL SELECT`语句，获取了`Users`表的`EmailAddress`和`Password`列。在光标上执行了`fetchall()`方法，以访问数据库表中其余的行。使用`for`循环，将`row`变量从执行`SQL
    SELECT`语句后接收到的行中移动到最后一行。最后一行的`EmailAddress`和`Password`列中的数据通过屏幕上的两个Line Edit小部件显示出来。
- en: 'Upon running the application, you will get the first row of the database table
    displayed on the screen, as shown in the following screenshot. If you click the
    Previous button now, you get the message, This is the first row:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您将在屏幕上看到数据库表的第一行，如下截图所示。如果现在点击“上一个”按钮，您将收到消息“This is the first row”。
- en: '![](assets/ab778559-635d-4314-b72e-c2ae0545b23f.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ab778559-635d-4314-b72e-c2ae0545b23f.png)'
- en: 'Upon clicking the Next button, the next row in the sequence will be displayed
    on the screen, as shown in the following screenshot:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一个”按钮后，序列中的下一行将显示在屏幕上，如下截图所示：
- en: '![](assets/e9aadf57-6616-4a5a-89c4-10a602b9eb67.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e9aadf57-6616-4a5a-89c4-10a602b9eb67.png)'
- en: 'Upon clicking the Last Row button, the last row in the database table will
    be displayed, as shown in the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“最后一行”按钮后，数据库表中的最后一行将显示出来，如下截图所示：
- en: '![](assets/a7f26b14-4a30-43ca-b31e-1f9b7aeebb8a.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a7f26b14-4a30-43ca-b31e-1f9b7aeebb8a.png)'
- en: Searching a database table for specific information
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索数据库表中的特定信息
- en: In this recipe, we will be learning how searching is performed in a database
    table to fetch the desired information. We assume that a user has forgotten their
    password. So, you will be prompted to enter the database name, table name, and
    email address of the user whose password is required. If any user with the email
    address supplied exists in the database table, then the password of that user
    will be searched for, accessed, and displayed on the screen.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何在数据库表中执行搜索，以获取所需的信息。我们假设用户忘记了他们的密码。因此，您将被提示输入数据库名称、表名称和需要密码的用户的电子邮件地址。如果数据库表中存在使用提供的电子邮件地址的用户，则将搜索、访问并在屏幕上显示该用户的密码。
- en: How to do it…
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow these steps to find out how data can be searched for in a database table
    in SQLite:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤了解如何在SQLite数据库表中搜索数据：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add five `QLabel` widgets, four `QLineEdit` widgets, and one `QPushButton` widget
    to the form by dragging and dropping five Label widgets, four Line Edit widgets,
    and one Push Button widget on the form.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放五个Label小部件、四个LineEdit小部件和一个PushButton小部件到表单上，向表单添加五个`QLabel`小部件、四个`QLineEdit`小部件和一个`QPushButton`小部件。
- en: Set the text property of the first three Label widgets to `Enter database name`,
    `Enter table name`, and `Email Address`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前三个Label小部件的文本属性设置为`输入数据库名称`、`输入表名称`和`电子邮件地址`。
- en: Delete the text property of the fourth Label widget this is established through
    code.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第四个Label小部件的文本属性，这是通过代码建立的。
- en: Set the text property of the fifth Label widget to `Password`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第五个Label小部件的文本属性设置为`Password`。
- en: Set the text property of the push button to `Search`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将PushButton的文本属性设置为`搜索`。
- en: Set the objectName property of the four Line Edit widgets to `lineEditDBName`,
    `lineEditTableName`, `lineEditEmailAddress`, and `lineEditPassword`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个LineEdit小部件的objectName属性设置为`lineEditDBName`、`lineEditTableName`、`lineEditEmailAddress`和`lineEditPassword`。
- en: Set the objectName property of the Push Button widget to `pushButtonSearch`.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将PushButton小部件的objectName属性设置为`pushButtonSearch`。
- en: Set the objectName property of the fourth Label widget to `labelResponse`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第四个Label小部件的objectName属性设置为`labelResponse`。
- en: 'Save the application by name as `demoSearchRows.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoSearchRows.ui`。表单现在将显示如下截图所示：
- en: '![](assets/3809324e-2973-4898-b19b-678430a5da8a.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3809324e-2973-4898-b19b-678430a5da8a.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, an XML
    file that needs to be converted into Python code through application of the `pyuic5`
    command. The generated Python script, `demoSearchRows.py`, can be seen in the
    source code bundle of the book.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在一个`.ui`文件中，这是一个需要通过`pyuic5`命令应用转换为Python代码的XML文件。书籍的源代码包中可以看到生成的Python脚本`demoSearchRows.py`。
- en: Treat the `demoSearchRows.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoSearchRows.py`脚本视为头文件，并将其导入到您将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callSearchRows.pyw` and import the
    `demoSearchRows.py` code into it:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callSearchRows.pyw`的Python文件，并将`demoSearchRows.py`代码导入其中：
- en: '[PRE12]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You can see in the script that the click() event of the push button with the
    objectName property `pushButtonSearch` is connected to the `SearchRows()` method.
    This means that, whenever the push button is clicked, the `SearchRows()` method
    is invoked. In the `SearchRows()` method, the `connect()` method is invoked on
    the `sqlite3` class and the database name entered by the user in the Line Edit
    widget is passed to the `connect()` method. The connection to the database is
    established. An SQL `search` statement is defined that fetches the `Password`
    column from the table supplied whose email address matches the email address supplied.
    The `search` SQL statement is executed on the given database table. The `fetchone()`
    method is executed on the cursor to fetch one row from the executed SQL statement.
    If the fetched row is not `None`, that is, there is a row in the database table
    that matches the given email address, the password in the row is accessed and
    assigned to the Line Edit widget with the object name `lineEditPassword` for display.
    Finally, the connection to the database is closed.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中看到，具有objectName属性`pushButtonSearch`的PushButton的click()事件连接到`SearchRows()`方法。这意味着每当单击PushButton时，都会调用`SearchRows()`方法。在`SearchRows()`方法中，对`sqlite3`类调用`connect()`方法，并将用户在LineEdit小部件中输入的数据库名称传递给`connect()`方法。建立与数据库的连接。定义一个SQL
    `search`语句，从所提供的表中获取`Password`列，该表中的电子邮件地址与提供的电子邮件地址匹配。在给定的数据库表上执行`search` SQL语句。在光标上执行`fetchone()`方法，从执行的SQL语句中获取一行。如果获取的行不是`None`，即数据库表中有一行与给定的电子邮件地址匹配，则访问该行中的密码，并将其分配给object名称为`lineEditPassword`的LineEdit小部件以进行显示。最后，关闭与数据库的连接。
- en: If an error occurs in the execution of the SQL statement, that is, if the database
    is not found, the table name is incorrectly entered, or the email address column
    does not exist in the given table, an error message, Error in accessing row, is
    displayed via the Label widget with the objectName property, `labelResponse`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行SQL语句时发生错误，即找不到数据库、表名输入错误，或者给定表中不存在电子邮件地址列，则会通过具有objectName属性`labelResponse`的Label小部件显示错误消息“访问行时出错”。
- en: 'Upon running the application, we get a dialog that prompts us for the database
    name, table name, and column name from the table. Suppose we want to find out
    the password of the user whose email address is `bmharwani@yahoo.com` in the `Users`
    table of the `ECommerce` database. After entering the required information in
    the boxes, when you click on the Search button, the password of the user will
    be accessed from the table and displayed through the Line Edit widget, as shown
    in the following screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，我们会得到一个对话框，提示我们输入数据库名称、表名和表中的列名。假设我们想要找出在`ECommerce`数据库的`Users`表中，邮箱地址为`bmharwani@yahoo.com`的用户的密码。在框中输入所需信息后，当点击搜索按钮时，用户的密码将从表中获取，并通过行编辑小部件显示，如下截图所示：
- en: '![](assets/ffecd662-0444-472c-adc9-b0709ffc4ed4.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ffecd662-0444-472c-adc9-b0709ffc4ed4.png)'
- en: 'If the email address supplied is not found in the Users table, you get the
    message "Sorry, No User found with this email address," which is displayed through
    the Label widget as shown here:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在Users表中找不到提供的电子邮件地址，您将收到消息“抱歉，找不到使用此电子邮件地址的用户”，该消息将通过Label小部件显示，如下所示：
- en: '![](assets/fa36f35c-539b-4640-b78b-5e75d9cd1447.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fa36f35c-539b-4640-b78b-5e75d9cd1447.png)'
- en: Creating a signin form – applying an authentication procedure
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个登录表单 - 应用认证程序
- en: In this recipe, we will be learning how rows can be accessed from a specific
    table and compared with the information supplied.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何访问特定表中的行，并将其与提供的信息进行比较。
- en: We assume that a database called `ECommerce` already exists and a table called
    `Users` also exists in the `ECommerce` database. The `Users` table consists of
    two columns, `EmailAddress` and `Password`. Also, we assume that the `Users` table
    contains a few rows in it. The user will be prompted to enter their email address
    and password in the signin form. The `Users` table is searched for the specified
    email address. If the email address is found in the `Users` table, then the password
    in that row is compared with the password entered. If the two passwords match,
    a welcome message is displayed; otherwise, an error message indicating that the
    email address or password don't match is displayed.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设数据库`ECommerce`已经存在，并且`ECommerce`数据库中也存在名为`Users`的表。`Users`表包括两列，`EmailAddress`和`Password`。此外，我们假设`Users`表中包含一些行。用户将被提示在登录表单中输入其电子邮件地址和密码。将在`Users`表中搜索指定的电子邮件地址。如果在`Users`表中找到电子邮件地址，则将比较该行中的密码与输入的密码。如果两个密码匹配，则显示欢迎消息；否则，显示指示电子邮件地址或密码不匹配的错误消息。
- en: How to do it…
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Here are the steps to understand how data in a database table can be compared
    with data entered by the user and authenticate a user:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是了解如何将数据库表中的数据与用户输入的数据进行比较并对用户进行身份验证的步骤：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add three `QLabel` widgets, two `QLineEdit` widgets, and one `QPushButton` widget
    to the form by dragging and dropping three Label widgets, two Line Edit widgets,
    and one Push Button widget on the form.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单中通过拖放三个Label小部件、两个Line Edit小部件和一个Push Button小部件，添加三个`QLabel`小部件、两个`QLineEdit`小部件和一个`QPushButton`小部件。
- en: Set the text property of the first two Label widgets to `Email Address` and
    `Password`.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前两个Label小部件的文本属性设置为`电子邮件地址`和`密码`。
- en: Delete the text property of the third Label widget this is established through
    code.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过代码删除第三个Label小部件的文本属性。
- en: Set the text property of the push button to `Sign In`.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的文本属性设置为`登录`。
- en: Set the objectName property of the two Line Edit widgets to `lineEditEmailAddress`
    and `lineEditPassword`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个Line Edit小部件的objectName属性设置为`lineEditEmailAddress`和`lineEditPassword`。
- en: Set the objectName property of the Push Button widget to `pushButtonSearch`.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为`pushButtonSearch`。
- en: Set the objectName property of the third Label widget to `labelResponse`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个Label小部件的objectName属性设置为`labelResponse`。
- en: 'Save the application by name as `demoSignInForm.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoSignInForm.ui`。表单现在将显示如下截图所示：
- en: '![](assets/8ed32324-b44a-44ce-93b7-6696182ccd07.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8ed32324-b44a-44ce-93b7-6696182ccd07.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. By applying the `pyuic5`
    command, the XML file can be converted into Python code. The Python script generated,
    `demoSignInForm.py`, can be seen in the source code bundle of the book.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。通过应用`pyuic5`命令，可以将XML文件转换为Python代码。生成的Python脚本`demoSignInForm.py`可以在本书的源代码包中找到。
- en: Treat the `demoSignInForm.py` file as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoSignInForm.py`文件视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callSignInForm.pyw` and import the
    `demoSignInForm.py` code into it:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callSignInForm.pyw`的Python文件，并将`demoSignInForm.py`代码导入其中：
- en: '[PRE14]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: You can see in the script that the click event of the push button with the objectName
    property `pushButtonSearch` is connected to the `SearchRows()` method. This means
    that, whenever the push button is clicked, the `SearchRows()` method is invoked.
    In the `SearchRows()` method, the `connect()` method is invoked on the `sqlite3`
    class to establish a connection with the `ECommerce` database. An SQL `search`
    statement is defined that fetches the `EmailAddress` and `Password` columns from
    the `Users` table whose email address matches the email address supplied. The
    `search` SQL statement is executed on the `Users` table. The `fetchone()` method
    is executed on the cursor to fetch one row from the executed SQL statement. If
    the fetched row is not `None`, that is, there is a row in the database table that
    matches the given email address and password, a welcome message is displayed with
    the Label widget with the objectName property, `labelResponse`. Finally, the connection
    to the database is closed.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中看到，具有objectName属性`pushButtonSearch`的按钮的单击事件与`SearchRows()`方法相连。这意味着每当单击按钮时，都会调用`SearchRows()`方法。在`SearchRows()`方法中，调用`sqlite3`类的`connect()`方法与`ECommerce`数据库建立连接。定义了一个SQL
    `search`语句，该语句从`Users`表中获取`EmailAddress`和`Password`列，这些列的电子邮件地址与提供的电子邮件地址匹配。在`Users`表上执行`search`
    SQL语句。在光标上执行`fetchone()`方法，以从执行的SQL语句中获取一行。如果获取的行不是`None`，即数据库表中存在与给定电子邮件地址和密码匹配的行，则会通过具有objectName属性`labelResponse`的Label小部件显示欢迎消息。最后，关闭与数据库的连接。
- en: If an error occurs in the execution of the SQL statement, if the database is
    not found, or if the table name is incorrectly entered, or the email address or
    password columns do not exist in the `Users` table, an error message, Error in
    accessing row, is displayed via the Label widget with the objectName property, `labelResponse`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行SQL语句时发生错误，如果找不到数据库，或者表名输入错误，或者`Users`表中不存在电子邮件地址或密码列，则通过具有objectName属性`labelResponse`的Label小部件显示错误消息“访问行时出错”。
- en: 'Upon running the application, you will be prompted to enter an email address
    and password. Upon entering the correct email address and password, when you click
    the Sign In button, you receive the message, You are welcome, as shown in the
    following screenshot:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将被提示输入电子邮件地址和密码。输入正确的电子邮件地址和密码后，当您单击“登录”按钮时，您将收到消息“欢迎”，如下截图所示：
- en: '![](assets/0b0a8b36-ce5e-46f4-9667-fdd73d9cded9.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0b0a8b36-ce5e-46f4-9667-fdd73d9cded9.png)'
- en: 'But if either email address or password is entered incorrectly, you get the
    message, Sorry, Incorrect email address or password, as shown in the following
    screenshot:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果电子邮件地址或密码输入不正确，您将收到消息“抱歉，电子邮件地址或密码不正确”，如下截图所示：
- en: '![](assets/827e320d-80a2-4214-bc21-a1020968ee47.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/827e320d-80a2-4214-bc21-a1020968ee47.png)'
- en: Updating a database table – changing a user's password
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新数据库表-更改用户密码
- en: In this recipe, you will learn how to update any information in the database.
    Changing passwords is a very common requirement in almost all applications. In
    this recipe, we assume that a database called `ECommerce` already exists and a
    table called `Users` also exists in the `ECommerce` database. The `Users` table
    consists of two columns, `EmailAddress` and `Password`. Also, we assume that the `Users`
    table contains a few rows in it. The user will be prompted to enter their email
    address and password in the form. The `Users` table is searched for the specified
    email address and password. If a row is found with the specified email address
    and password, the user will be prompted to enter a new password. The new password
    will be asked for twice, that is, the user will be asked to enter their new password
    in both the New Password box and the Re-enter New Password box. If the passwords
    entered in the two boxes match, the password will be changed, that is, the old
    password will be replaced by the new password.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将学习如何更新数据库中的任何信息。在几乎所有应用程序中，更改密码都是一个非常常见的需求。在这个示例中，我们假设一个名为`ECommerce`的数据库已经存在，并且`ECommerce`数据库中也存在一个名为`Users`的表。`Users`表包含两列，`EmailAddress`和`Password`。此外，我们假设`Users`表中已经包含了一些行。用户将被提示在表单中输入他们的电子邮件地址和密码。将搜索`Users`表以查找指定的电子邮件地址和密码。如果找到具有指定电子邮件地址和密码的行，则将提示用户输入新密码。新密码将被要求输入两次，也就是说，用户将被要求在新密码框和重新输入新密码框中输入他们的新密码。如果两个框中输入的密码匹配，密码将被更改，也就是说，旧密码将被新密码替换。
- en: How to do it…
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The procedure for deleting data from the database table is very critical, and
    any mistake in executing such an application can lead to disaster. Here come the
    steps to delete any row from the given database table:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库表中删除数据的过程非常关键，执行此类应用程序的任何错误都可能导致灾难。以下是从给定数据库表中删除任何行的步骤：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add five `QLabel` widgets, four `QLineEdit` widgets, and one `QPushButton` widget
    to the form by dragging and dropping five Label widgets, four Line Edit widgets,
    and one Push Button widget on the form.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放五个标签小部件、四个行编辑小部件和一个按钮小部件将它们添加到表单上。
- en: Set the text property of the first four Label widgets to `Email Address`, `Old
    Password`, `New Password`, and `Re-enter New Password`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前四个标签小部件的文本属性设置为`电子邮件地址`、`旧密码`、`新密码`和`重新输入新密码`。
- en: Delete the text property of the fifth Label widget this is established through
    code. Set the text property of the push button to `Change Password`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第五个标签小部件的文本属性，这是通过代码建立的。将按钮的文本属性设置为`更改密码`。
- en: Set the objectName property of the four Line Edit widgets to `lineEditEmailAddress`,
    `lineEditOldPassword`, `lineEditNewPassword`, and `lineEditRePassword`. Since
    we don't want the password to be displayed in any of the Line Edit widgets that
    are associated with the password, we want the asterisks to appear when the user
    enters the password.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个行编辑小部件的objectName属性设置为`lineEditEmailAddress`、`lineEditOldPassword`、`lineEditNewPassword`和`lineEditRePassword`。由于我们不希望密码显示在与密码相关联的任何行编辑小部件中，我们希望用户输入密码时显示星号。
- en: Select the three Line Edit widgets one at a time and from the Property Editor
    window.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 依次从属性编辑器窗口中选择三个行编辑小部件。
- en: Select the echoMode property and set it to `Password` instead of the default
    Normal.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择echoMode属性，并将其设置为`Password`，而不是默认的Normal。
- en: Set the objectName property of the Push Button widget to `pushButtonChangePassword`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮小部件的objectName属性设置为`pushButtonChangePassword`。
- en: Set the objectName property of the fifth Label widget to `labelResponse`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第五个标签小部件的objectName属性设置为`labelResponse`。
- en: 'Save the application by name as `demoChangePassword.ui`. The form will now
    appear as shown in the following screenshot:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoChangePassword.ui`。表单现在将显示如下截图所示：
- en: '![](assets/7ac023e9-4e95-4f52-b1ec-a2d92853d777.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7ac023e9-4e95-4f52-b1ec-a2d92853d777.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. The `pyuic5` command
    is used to convert the XML file into Python code. The Python script generated,
    `demoChangePassword.py`, can be seen in the source code bundle of this book.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。`pyuic5`命令用于将XML文件转换为Python代码。本书的源代码包中可以看到生成的Python脚本`demoChangePassword.py`。 '
- en: Treat the `demoChangePassword.py` script as a header file, and import it into
    the file from which you will invoke its user interface design.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoChangePassword.py`脚本视为头文件，并将其导入到您将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callChangePassword.pyw` and import
    the `demoChangePassword.py` code into it:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callChangePassword.pyw`的Python文件，并将`demoChangePassword.py`代码导入其中：
- en: '[PRE15]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can see in the script that the click() event of the push button with the
    objectName property `pushButtonChangePassword` is connected to the `ChangePassword()`
    method. This means that,  whenever the push button is clicked, the `ChangePassword()`
    method will be invoked. In the `ChangePassword()` method, the `connect()` method
    is invoked on the `sqlite3` class to establish a connection with the `ECommerce`
    database. An SQL `SELECT` statement is defined that fetches the `EmailAddress`
    and `Password` columns from the `Users` table whose email address and password
    matches the email address and password entered in the Line Edit widgets. The SQL
    `SELECT` statement is executed on the `Users` table. The `fetchone()` method is
    executed on the cursor to fetch one row from the executed SQL statement. If the
    fetched row is not `None`, that is, there is a row in the database table, then
    it is confirmed whether the new passwords entered in the two Line Edit widgets,
    `lineEditNewPassword` and `lineEditRePassword`, are exactly the same. If the two
    passwords are the same, then an `UPDATE` SQL statement is executed to update the
    `Users` table, changing the password to the new one.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中看到，具有objectName属性`pushButtonChangePassword`的按钮的click()事件与`ChangePassword()`方法相连。这意味着每当单击按钮时，都会调用`ChangePassword()`方法。在`ChangePassword()`方法中，调用`sqlite3`类的`connect()`方法与`ECommerce`数据库建立连接。定义了一个SQL
    `SELECT`语句，该语句从`Users`表中获取与在LineEdit小部件中输入的电子邮件地址和密码匹配的`EmailAddress`和`Password`列。在`Users`表上执行SQL
    `SELECT`语句。在光标上执行`fetchone()`方法，以从执行的SQL语句中获取一行。如果获取的行不是`None`，即数据库表中有一行，则确认两个LineEdit小部件`lineEditNewPassword`和`lineEditRePassword`中输入的新密码是否完全相同。如果两个密码相同，则执行`UPDATE`
    SQL语句来更新`Users`表，将密码更改为新密码。
- en: If the two passwords do not match, then no updating is applied to the database
    table and a message, The two passwords don't match, is displayed through the Label
    widget.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个密码不匹配，则不会对数据库表进行更新，并且通过Label小部件显示消息“两个密码不匹配”。
- en: If an error occurs in the execution of the SQL `SELECT` or `UPDATE` statement,
    then an error message, Error in accessing row, is displayed via a Label widget
    with the objectName property `labelResponse`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行SQL `SELECT`或`UPDATE`语句时发生错误，则会通过具有objectName属性`labelResponse`的Label小部件显示错误消息“访问行时出错”。
- en: 'Upon running the application, you will be prompted to enter the email address
    and password, along with the new password, too. If the email address or password
    does not match, an error message, Sorry, Incorrect email address or password,
    is displayed via the Label widget, as shown in the following screenshot:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将被提示输入电子邮件地址和密码，以及新密码。如果电子邮件地址或密码不匹配，则会通过Label小部件显示错误消息“抱歉，电子邮件地址或密码不正确”，如下面的屏幕截图所示：
- en: '![](assets/77868907-dab6-407a-ba11-6a3de7557bf2.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/77868907-dab6-407a-ba11-6a3de7557bf2.png)'
- en: 'If the email address and password entered are correct, but the new passwords
    entered in the New Password and Re-enter New Password boxes do not match, then
    the message The two passwords don''t match is displayed on the screen, as shown
    in the following screenshot:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入的电子邮件地址和密码正确，但在新密码和重新输入新密码框中输入的新密码不匹配，则屏幕上会显示消息“两个密码不匹配”，如下面的屏幕截图所示：
- en: '![](assets/d50c910f-cd03-4074-8b50-2e3c424b120c.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d50c910f-cd03-4074-8b50-2e3c424b120c.png)'
- en: 'If the email address and passwords are all entered correctly, that is, if the
    user row is found in the database table and the new passwords entered in the New
    Password and Re-enter New Password boxes match, then the `Users` table is updated
    and, upon successfully updating the table, a message, Password successfully changed,
    is displayed on the screen, as shown in the following screenshot:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如果电子邮件地址和密码都输入正确，也就是说，如果在数据库表中找到用户行，并且在新密码和重新输入新密码框中输入的新密码匹配，则更新`Users`表，并且在成功更新表后，屏幕上会显示消息“密码已成功更改”，如下面的屏幕截图所示：
- en: '![](assets/03512e11-26e0-47bc-a2b2-4ab3b27a238d.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03512e11-26e0-47bc-a2b2-4ab3b27a238d.png)'
- en: Deleting a row from a database table
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库表中删除一行
- en: In this recipe, we will be learning how to remove a row from a database table.
    We assume that a database called `ECommerce` already exists and a table called
    `Users` also exists in the `ECommerce` database. The `Users` table consists of
    two columns, `EmailAddress` and `Password`. Also, we assume that the `User` table
    contains a few rows in it. The user will be prompted to enter their email address
    and password in the form. The `Users` table is searched for the specified email
    address and password. If any row is found with the specified email address and
    password in the `Users` table, you will be prompted to confirm whether you are
    sure that you want to delete the row. If you click on the Yes button, the row
    will be deleted.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何从数据库表中删除一行。我们假设名为`ECommerce`的数据库已经存在，并且`ECommerce`数据库中也存在名为`Users`的表。`Users`表包含两列，`EmailAddress`和`Password`。此外，我们假设`User`表中包含一些行。用户将被提示在表单中输入他们的电子邮件地址和密码。将在`Users`表中搜索指定的电子邮件地址和密码。如果在`Users`表中找到具有指定电子邮件地址和密码的任何行，则将提示您确认是否确定要删除该行。如果单击“是”按钮，则将删除该行。
- en: How to do it…
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The procedure for deleting data from the database table is very critical, and
    any mistake in executing such an application can lead to disaster. The following
    are the steps for deleting any row from the given database table:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库表中删除数据的过程非常关键，执行此类应用程序时的任何错误都可能导致灾难。以下是从给定数据库表中删除任何行的步骤：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add four `QLabel` widgets, two `QLineEdit` widgets, and three `QPushButton` widgets
    to the form by dragging and dropping four Label widgets, two LineEdit widgets,
    and three Push Button widgets on the form.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将四个Label小部件、两个LineEdit小部件和三个PushButton小部件拖放到表单上，向表单添加四个`QLabel`小部件、两个`QLineEdit`小部件和三个`QPushButton`小部件。
- en: Set the text property of the first three Label widgets to `Email Address`, `Password`,
    and `Are you Sure?`
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前三个Label小部件的文本属性设置为`电子邮件地址`，`密码`和`你确定吗？`
- en: Delete the text property of the fourth Label widget this is established through
    code.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第四个Label小部件的文本属性，这是通过代码建立的。
- en: Set the text property of the three push buttons to `Delete User`, `Yes`, and
    `No`.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个按钮的文本属性设置为`删除用户`，`是`和`否`。
- en: Set the objectName property of the two Line Edit widgets to `lineEditEmailAddress`
    and `lineEditPassword`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个Line Edit小部件的objectName属性设置为`lineEditEmailAddress`和`lineEditPassword`。
- en: Set the objectName property of the three Push Button widgets to `pushButtonDelete`,
    `pushButtonYes`, and `pushButtonNo`.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个Push Button小部件的objectName属性设置为`pushButtonDelete`，`pushButtonYes`和`pushButtonNo`。
- en: Set the objectName property of the fourth Label widget to `labelResponse`.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第四个Label小部件的objectName属性设置为`labelResponse`。
- en: 'Save the application by name as `demoDeleteUser.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDeleteUser.ui`。表单现在将显示如下截图所示：
- en: '![](assets/da1a933e-c763-40db-8e88-c2e13c944c60.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/da1a933e-c763-40db-8e88-c2e13c944c60.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs to be converted into Python code. The `pyuic5` command
    is used for converting the XML file into Python code. The Python script generated,
    `demoDeleteUser.py`, can be seen in the source code bundle of this book.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在一个`.ui`文件中，这是一个XML文件，需要转换为Python代码。使用`pyuic5`命令将XML文件转换为Python代码。生成的Python脚本`demoDeleteUser.py`可以在本书的源代码包中找到。
- en: Treat the `demoDeleteUser.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoDeleteUser.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callDeleteUser.pyw` and import the
    `demoDeleteUser.py` code into it:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDeleteUser.pyw`的Python文件，并将`demoDeleteUser.py`代码导入其中：
- en: '[PRE16]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this application, the Label widget with the text Are you Sure? and the two
    push buttons, Yes and No, are initially hidden. These three widgets will be displayed
    only when the email address and password entered by the user are found in the
    database table. These three widgets enable the user to confirm that they really
    want to delete the row. So, the `hide()` method is invoked on these three widgets
    to make them initially invisible. Also, the click() event of the push button with
    the objectName property `pushButtonDelete` is connected to the `DeleteUser()`
    method. This means that whenever the Delete button is clicked, the `DeleteUser()`
    method is invoked. Similarly, the click() event of the push button with the objectName
    property `pushButtonYes` is connected to the `ConfirmDelete()` method. This means
    that when the user confirms deletion of the row by clicking the Yes button, the
    `ConfirmDelete()` method will be invoked.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，带有文本“你确定吗？”的Label小部件和两个按钮Yes和No最初是隐藏的。只有当用户输入的电子邮件地址和密码在数据库表中找到时，这三个小部件才会显示出来。这三个小部件使用户能够确认他们是否真的想要删除该行。因此，对这三个小部件调用`hide()`方法，使它们最初不可见。此外，将具有objectName属性`pushButtonDelete`的按钮的click()事件连接到`DeleteUser()`方法。这意味着每当单击删除按钮时，都会调用`DeleteUser()`方法。类似地，具有objectName属性`pushButtonYes`的按钮的click()事件连接到`ConfirmDelete()`方法。这意味着当用户通过单击Yes按钮确认删除该行时，将调用`ConfirmDelete()`方法。
- en: In the `DeleteUser()` method, you first search to see whether any row exists
    in the `Users` table that matches the email address and password entered. The
    `connect()` method is invoked on the `sqlite3` class to establish a connection
    with the `ECommerce` database. An SQL `SELECT` statement is defined that fetches
    the `EmailAddress` and `Password` columns from the `Users` table whose email address
    and password matches the email address and passwords supplied. The SQL `SELECT`
    statement is executed on the `Users` table. The `fetchone()` method is executed
    on the cursor to fetch one row from the executed SQL statement. If the fetched
    row is not `None`, that is, there is a row in the database table that matches
    the given email address and password, the three widgets, the Label, and two push
    buttons, will be made visible. The user will be shown the message Are you Sure?
    followed by two push buttons with the text Yes and No.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DeleteUser()`方法中，首先搜索是否存在与输入的电子邮件地址和密码匹配的`Users`表中的任何行。在`sqlite3`类上调用`connect()`方法，与`ECommerce`数据库建立连接。定义了一个SQL
    `SELECT`语句，从`Users`表中获取`EmailAddress`和`Password`列，其电子邮件地址和密码与提供的电子邮件地址和密码匹配。在`Users`表上执行SQL
    `SELECT`语句。在游标上执行`fetchone()`方法，从执行的SQL语句中获取一行。如果获取的行不是`None`，即数据库表中存在与给定电子邮件地址和密码匹配的行，则会使三个小部件，Label和两个按钮可见。用户将看到消息“你确定吗？”，然后是两个带有文本Yes和No的按钮。
- en: If the user clicks the Yes button, then the `ConfirmDelete()` method is executed.
    In the `ConfirmDelete()` method, an SQL `DELETE` method is defined that deletes
    the row that matches the entered email address and password from the `Users` table.
    After establishing a connection with the `ECommerce` database, the SQL `DELETE`
    method is executed. If the row is successfully deleted from the `Users` table,
    a message, User successfully deleted, will be displayed through the Label widget;
    otherwise, an error message, Error in deleting user account, will be displayed.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户单击Yes按钮，则会执行`ConfirmDelete()`方法。在`ConfirmDelete()`方法中，定义了一个SQL `DELETE`方法，用于从`Users`表中删除与输入的电子邮件地址和密码匹配的行。在与`ECommerce`数据库建立连接后，执行SQL
    `DELETE`方法。如果成功从`Users`表中删除了行，则通过Label小部件显示消息“用户成功删除”；否则，将显示错误消息“删除用户帐户时出错”。
- en: Before running the application, we will launch a visual tool called DB Browser
    for SQLite. The visual tool enables us to create, edit, and view the database
    tables and rows inside them. Using DB Browser for SQLite, we will first see the
    existing rows in the `Users` table. After that, the application will run and a
    row will be deleted. Again, from DB Browser for SQLite, we will confirm the row
    was really deleted from the `Users` table.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序之前，我们将启动一个名为SQLite数据库浏览器的可视化工具。该可视化工具使我们能够创建，编辑和查看数据库表及其中的行。使用SQLite数据库浏览器，我们将首先查看“用户”表中的现有行。之后，应用程序将运行并删除一行。再次从SQLite数据库浏览器中，我们将确认该行是否真的已从“用户”表中删除。
- en: 'So, launch DB Browser for SQLite and click the Open Database tab below the
    main menu. Browse and select the `Ecommerce` database from the current folder.
    The `Ecommerce` database shows the `Users` table consisting of two columns, `EmailAddress`
    and `Password`. Click on the Execute SQL button to write an SQL statement. In
    the window, write the SQL statement `select * from Users`, followed by clicking
    the Run icon. All existing rows in the `Users` table will be displayed on the
    screen. You can see in the following screenshot that the `Users` table has two
    rows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，启动SQLite数据库浏览器并在主菜单下方点击“打开数据库”选项卡。浏览并从当前文件夹中选择“电子商务”数据库。 “电子商务”数据库显示由两列“电子邮件地址”和“密码”组成的“用户”表。单击“执行SQL”按钮以编写SQL语句。在窗口中，写入SQL语句“select
    * from Users”，然后单击运行图标。 “用户”表中的所有现有行将显示在屏幕上。您可以在以下屏幕截图中看到“用户”表有两行：
- en: '![](assets/f8bf5ccc-af6f-405e-a4e6-775a76665be4.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8bf5ccc-af6f-405e-a4e6-775a76665be4.png)'
- en: 'Upon running the application, you will be prompted to enter your email address
    and password. If you enter the wrong email address and password, you get the message
    Sorry, Incorrect email address or password, as shown in the following screenshot:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您将被提示输入您的电子邮件地址和密码。如果您输入错误的电子邮件地址和密码，您将收到消息“抱歉，电子邮件地址或密码不正确”，如下面的屏幕截图所示：
- en: '![](assets/4e593290-b796-4841-8621-20bb4bba5aa5.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4e593290-b796-4841-8621-20bb4bba5aa5.png)'
- en: 'Upon entering the correct email address and password, when you click the Delete
    User button, the three widgets—the Label widget and two push buttons, will be
    made visible, and you get the message Are you Sure?, along with the two push buttons,
    Yes and No, as shown in the following screenshot:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入正确的电子邮件地址和密码后，当您点击删除用户按钮时，三个小部件——标签小部件和两个按钮，将变为可见，并且您会收到消息“您确定吗？”，以及两个按钮“Yes”和“No”，如下面的屏幕截图所示：
- en: '![](assets/889013f0-8d85-4888-a358-90ea905de172.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/889013f0-8d85-4888-a358-90ea905de172.png)'
- en: 'Upon clicking the Yes push button, the row in the `Users` table whose email
    address and password matches the email address and password supplied will be deleted
    and a confirmation message, User successfully deleted, will be displayed through
    the Label widget, as shown in the following screenshot:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“Yes”按钮后，“用户”表中与提供的电子邮件地址和密码匹配的行将被删除，并且通过标签小部件显示确认消息“用户成功删除”，如下面的屏幕截图所示：
- en: '![](assets/69261dfc-02f4-4a0d-a063-7d4c1fd4ba6c.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/69261dfc-02f4-4a0d-a063-7d4c1fd4ba6c.png)'
- en: Let's check through the visual tool as to whether the row was actually deleted
    from the Users table. Therefore, launch the DB Browser for SQLite and click the
    Open Database tab below the main menu. Browse and select the `Ecommerce` database
    from the current folder. The `Ecommerce` database will show the `Users` table.
    Click on the Execute SQL button to write an SQL statement. In the window, write
    the SQL statement `select * from Users`, followed by clicking the Run icon. All
    existing rows in the `Users` table will be displayed on the screen.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过可视化工具检查行是否实际上已从用户表中删除。因此，启动SQLite数据库浏览器并在主菜单下方点击“打开数据库”选项卡。浏览并从当前文件夹中选择“电子商务”数据库。
    “电子商务”数据库将显示“用户”表。单击“执行SQL”按钮以编写SQL语句。在窗口中，写入SQL语句“select * from Users”，然后单击运行图标。
    “用户”表中的所有现有行将显示在屏幕上。
- en: 'Before running the application, we saw that there were two rows in the `Users`
    table. This time, you see only one row in the `Users` table (see the following
    screenshot), confirming that a row was deleted from the `Users` table:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序之前，我们看到“用户”表中有两行。这次，您只能在“用户”表中看到一行（请参阅下面的屏幕截图），证实已从“用户”表中删除了一行：
- en: '![](assets/332e5a96-cbdf-4514-93c9-6a1aa708de21.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/332e5a96-cbdf-4514-93c9-6a1aa708de21.png)'
