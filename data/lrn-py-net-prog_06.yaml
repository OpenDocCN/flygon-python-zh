- en: Chapter 6. IP and DNS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。IP和DNS
- en: 'Every computer that is connected to a network needs an IP address. In [Chapter
    1](ch01.html "Chapter 1. Network Programming and Python"), *Network Programming
    and Python*, an introduction to TCP/IP networking was presented. The IP address
    labels a machine''s network interface with a numeric identifier, which also identifies
    the location of the machine, albeit with limited reliability. **Domain Name System**
    (**DNS**) is a core network service that maps the names to the IP addresses and
    vice-verse. In this chapter, we will mainly focus on manipulating the IP and DNS
    protocols with the help of Python. In addition to this, we will briefly discuss
    the **Network Time Protocol** (**NTP**), which helps in synchronizing the time
    with a centralized time server. The following topics will be discussed here:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到网络的每台计算机都需要一个IP地址。在[第1章](ch01.html "第1章。网络编程和Python")中，介绍了TCP/IP网络编程。IP地址使用数字标识符标记机器的网络接口，也标识了机器的位置，尽管可靠性有限。**域名系统**（**DNS**）是一种核心网络服务，将名称映射到IP地址，反之亦然。在本章中，我们将主要关注使用Python操作IP和DNS协议。除此之外，我们还将简要讨论**网络时间协议**（**NTP**），它有助于将时间与集中式时间服务器同步。以下主题将在此处讨论：
- en: Retrieving the network configuration of a local machine
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索本地计算机的网络配置
- en: Manipulating the IP addresses
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作IP地址
- en: The GeoIP look-ups
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoIP查找
- en: Working with DNS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DNS
- en: Working with NTP
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NTP
- en: Retrieving the network configuration of a local machine
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索本地计算机的网络配置
- en: Before doing anything else, let's ask in the Python language, *What's my name?*.
    In networking terms, this is equivalent to finding out the machine's name or the
    host's name. On the shell command-line, this can be discovered by using the `hostname`
    command. In Python, you can do this by using the socket module.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在做任何其他事情之前，让我们用Python语言问一下，*我的名字是什么？*。在网络术语中，这相当于找出机器的名称或主机的名称。在shell命令行上，可以使用`hostname`命令来发现这一点。在Python中，您可以使用socket模块来实现这一点。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we would like to see the local machine IP. This can be seen by using the
    `ifconfig` command in Linux and by using the `ipconfig` command in the Windows
    OS. But, we''d like to do this in Python by using the following built-in function:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要查看本地计算机的IP。这可以通过在Linux中使用`ifconfig`命令和在Windows OS中使用`ipconfig`命令来实现。但是，我们想要使用以下内置函数在Python中执行此操作：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, this is the IP of the first network interface. It can also
    show us the IP of the loopback interface (127.0.0.1) if your DNS or hostfile has
    not been configured properly. In Linux/UNIX, the following line can be added to
    your `/etc/hosts` file for obtaining the correct IP address:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是第一个网络接口的IP。如果您的DNS或主机文件未正确配置，它还可以显示我们的环回接口（127.0.0.1）的IP。在Linux/UNIX中，可以将以下行添加到您的`/etc/hosts`文件中以获取正确的IP地址：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This process is known as a host-file based name resolution. You can send a query
    to a DNS server and ask for the IP address of a specific host. If the name has
    been registered properly, then you will get a response from the server. But, before
    making a query to the remote server, let us first discover some more information
    about the network interface and the gateway machine of your network.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程被称为基于主机文件的名称解析。您可以向DNS服务器发送查询，询问特定主机的IP地址。如果名称已经正确注册，那么您将从服务器收到响应。但是，在向远程服务器发出查询之前，让我们先了解一些关于网络接口和网络的更多信息。
- en: 'In every LAN, a host is configured to act as a gateway, which talks to the
    *outside* world. In order to find the network address and the netmask, we can
    use the Python third-party library netifaces (version > 0.10.0 ). This will pull
    all the relevant information. For example, you can call `netifaces.gateways()`
    for finding the gateways that are configured to the outside world. Similarly,
    you can enumerate the network interfaces by calling `netifaces.interfaces()`.
    If you would like to know all the IP addresses of a particular interface *eth0,*
    then you can call `netifaces.ifaddresses(''eth0'')`. The following code listing
    shows the way in which you can list all the gateways and IP addresses of a local
    machine:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个局域网中，主机被配置为充当网关，与*外部*世界通信。为了找到网络地址和子网掩码，我们可以使用Python第三方库netifaces（版本> 0.10.0）。这将提取所有相关信息。例如，您可以调用`netifaces.gateways()`来查找配置为外部世界的网关。同样，您可以通过调用`netifaces.interfaces()`来枚举网络接口。如果您想要知道特定接口*eth0*的所有IP地址，那么可以调用`netifaces.ifaddresses('eth0')`。以下代码清单显示了如何列出本地计算机的所有网关和IP地址：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you run this code, then this will print a summary of the local network configuration,
    which will be similar to the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行此代码，则会打印本地网络配置的摘要，类似于以下内容：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Manipulating IP addresses
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作IP地址
- en: 'Often you will need to manipulate IP addresses and perform some sort of operations
    on them. Python3 has a built-in `ipaddress` module to help you in carrying out
    this task. It has convenient functions for defining the IP addresses and the IP
    networks and for finding lots of useful information. For example, if you would
    like to know how many IP addresses exist in a given subnet, for instance, `10.0.1.0/255.255.255.0`
    or `10.0.2.0/24`, then you can find them with the help of the code snippet shown
    here. This module will provide several classes and factory functions; for example,
    the IP address and the IP network has separate classes. Each class has a variant
    for both IP version 4 (IPv4) and IP version 6 (IPv6). Some of the features have
    been demonstrated in the following section:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您需要操作IP地址并对其执行某种操作。Python3具有内置的`ipaddress`模块，可帮助您执行此任务。它具有方便的函数来定义IP地址和IP网络，并查找许多有用的信息。例如，如果您想知道给定子网中存在多少IP地址，例如`10.0.1.0/255.255.255.0`或`10.0.2.0/24`，则可以使用此处显示的代码片段找到它们。此模块将提供几个类和工厂函数；例如，IP地址和IP网络具有单独的类。每个类都有IP版本4（IPv4）和IP版本6（IPv6）的变体。以下部分演示了一些功能：
- en: IP network objects
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP网络对象
- en: Let us import the `ipaddress` module and define a `net4` network.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入`ipaddress`模块并定义一个`net4`网络。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we can find some useful information, such as `netmask`, the network/broadcast
    address, and so on, of `net4`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以找到一些有用的信息，比如`net4`的`netmask`、网络/广播地址等：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `netmask` properties of `net4` will be displayed as an `IP4Address` object.
    If you are looking for its string representation, then you can call the `str()`
    method, as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`net4`的`netmask`属性将显示为`IP4Address`对象。如果您正在寻找其字符串表示形式，则可以调用`str()`方法，如下所示：'
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similarly, you can find the network and the broadcast addresses of `net4,`
    by doing the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过执行以下操作找到`net4`的网络和广播地址：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'How many addresses does `net4` hold in total? This can be found by using the
    command shown here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`net4`总共有多少个地址？这可以通过使用以下命令找到：'
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So, if we subtract the network and the broadcast addresses, then the total available
    IP addresses will be 254\. We can call the `hosts()` method on the `net4` object.
    It will produce a Python generator, which will supply all the hosts as `IPv4Adress`
    objects.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们减去网络和广播地址，那么总共可用的IP地址将是254。我们可以在`net4`对象上调用`hosts()`方法。它将生成一个Python生成器，它将提供所有主机作为`IPv4Adress`对象。
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can access the individual IP addresses by following the standard Python
    list access notation. For example, the first IP address would be the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过遵循标准的Python列表访问表示法来访问单个IP地址。例如，第一个IP地址将是以下内容：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can access the last IP address by using the list notation for accessing
    the last item of a list, as shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用列表表示法来访问最后一个IP地址，如下所示：
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also find the subnet information from the `IPv4Network` objects, as
    follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从`IPv4Network`对象中找到子网信息，如下所示：
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Any `IPv4Network` object can tell about its parent supernet, which is the opposite
    of the subnet.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 任何`IPv4Network`对象都可以告诉关于其父超网的信息，这与子网相反。
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Network interface objects
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络接口对象
- en: 'In the `ipaddress` module, a convenient class is used for representing an interface''s
    IP configuration in detail. The IPv4 Interface class takes an arbitrary address
    and behaves like a network address object. Let us define and discuss our network
    interface `eth0,` as shown in following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ipaddress`模块中，一个方便的类用于详细表示接口的IP配置。IPv4 Interface类接受任意地址并表现得像一个网络地址对象。让我们定义并讨论我们的网络接口`eth0`，如下截图所示：
- en: '![Network interface objects](graphics/6008OS_06_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![网络接口对象](graphics/6008OS_06_01.jpg)'
- en: As you can see in the preceding screenshot, a network interface eth0 with the
    `IPv4Address` class has been defined. It has some interesting properties, such
    as IP, network address, and so on. In the same way as with the network objects,
    you can check if the address is private, reserved, or multicast. These address
    ranges have been defined in various RFC documents. The `ipaddress` module's help
    page will show you the links to those RFC documents. You can search this information
    in other places as well.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的截图中所看到的，已经定义了一个带有`IPv4Address`类的网络接口eth0。它具有一些有趣的属性，例如IP、网络地址等。与网络对象一样，您可以检查地址是否为私有、保留或多播。这些地址范围已在各种RFC文档中定义。`ipaddress`模块的帮助页面将向您显示这些RFC文档的链接。您也可以在其他地方搜索这些信息。
- en: The IP address objects
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP地址对象
- en: 'The IP address classes have many more interesting properties. You can perform
    some arithmetic and logical operations on those objects. For example, if an IP
    address is greater than another IP address, then you can add numbers to the IP
    address objects, and this will give you a corresponding IP address. Let''s see
    a demonstration of this in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址类有许多其他有趣的属性。您可以对这些对象执行一些算术和逻辑操作。例如，如果一个IP地址大于另一个IP地址，那么您可以向IP地址对象添加数字，这将给您一个相应的IP地址。让我们在以下截图中看到这个演示：
- en: '![The IP address objects](graphics/6008OS_06_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![IP地址对象](graphics/6008OS_06_02.jpg)'
- en: Demonstration of the `ipaddress` module
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`ipaddress`模块的演示'
- en: Here, the `eth0` interface has been defined with a private IP address, which
    is `192.168.1.1,` and `eth1` has been defined with another private IP address,
    which is `192.168.2.1`. Similarly the loopback interface `lo` is defined with
    IP address `127.0.0.1`. As you can see, you can add numbers to the IP address
    and it will give you the next IP address with the same sequence.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，已经定义了带有私有IP地址`192.168.1.1`的`eth0`接口，以及已经定义了另一个私有IP地址`192.168.2.1`的`eth1`。同样，回环接口`lo`定义为IP地址`127.0.0.1`。正如您所看到的，您可以向IP地址添加数字，它将给您相同序列的下一个IP地址。
- en: You can check if an IP is a part of a specific network. Here, a network net
    has been defined by the network address, which is `192.168.1.0/24,` and the membership
    of `eth0` and `eth1` has been tested against that. A few other interesting properties,
    such as `is_loopback`, `is_private,` and so on, have also been tested here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查IP是否属于特定网络。在这里，网络net是由网络地址`192.168.1.0/24`定义的，并且已经测试了`eth0`和`eth1`的成员资格。还在这里测试了一些其他有趣的属性，比如`is_loopback`，`is_private`等。
- en: Planning IP addresses for your local area network
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为您的本地区域网络规划IP地址
- en: 'If you are wondering how to pick-up a suitable IP subnet, then you can experiment
    with the `ipaddress` module. The following code snippet will show an example of
    how to choose a specific subnet, based on the number of necessary host IP addresses
    for a small private network:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道如何选择合适的IP子网，那么您可以尝试使用`ipaddress`模块。以下代码片段将展示如何根据小型私有网络所需的主机IP地址数量选择特定子网的示例：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you run this script, then it will show an output similar to the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行此脚本，它将显示类似以下内容的输出：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: GeoIP look-ups
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GeoIP查找
- en: At times, it will be necessary for many applications to look-up the location
    of the IP addresses. For example, many website owners can be interested in tracking
    the location of their visitors and in classifying their IPs according to criteria,
    such as country, city, and so on. There is a third-party library called **python-geoip,**
    which has a robust interface for giving you the answer to your IP location query.
    This library is provided by MaxMind, which also provides the option for shipping
    a recent version of the Geolite2 database as the `python-geoip-geolite2` package.
    This includes the GeoLite2 data created by MaxMind, which is available at [www.maxmind.com](http://www.maxmind.com)
    under the creative commons Attribution-ShareAlike 3.0 Unported License. You can
    also buy a commercial license from their website.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，许多应用程序需要查找IP地址的位置。例如，许多网站所有者可能对跟踪其访问者的位置以及根据国家、城市等标准对其IP进行分类感兴趣。有一个名为**python-geoip**的第三方库，它具有一个强大的接口，可以为您提供IP位置查询的答案。这个库由MaxMind提供，还提供了将最新版本的Geolite2数据库作为`python-geoip-geolite2`软件包进行发布的选项。这包括由MaxMind创建的GeoLite2数据，可在[www.maxmind.com](http://www.maxmind.com)上以知识共享署名-相同方式共享3.0未本地化许可证下获得。您也可以从他们的网站购买商业许可证。
- en: 'Let''s see an example of how to use this Geo-lookup library.:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个如何使用这个Geo-lookup库的例子：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This script will show an output similar to the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将显示类似以下的输出：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can find more information about this package from the developer's website,
    which is at [http://pythonhosted.org/python-geoip/](http://pythonhosted.org/python-geoip/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从开发者网站[http://pythonhosted.org/python-geoip/](http://pythonhosted.org/python-geoip/)上找到有关此软件包的更多信息。
- en: DNS look-ups
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DNS查找
- en: The IP address can be translated into human readable strings called domain names.
    DNS is a big topic in the world of networking. In this section, we will create
    a DNS client in Python, and see how this client will talk to the server by using
    Wirshark.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址可以被翻译成称为域名的人类可读字符串。DNS是网络世界中的一个重要主题。在本节中，我们将在Python中创建一个DNS客户端，并看看这个客户端将如何通过使用Wirshark与服务器通信。
- en: 'A few DNS cleint libraries are available from PyPI. We will focus on the `dnspython`
    library, which is available at [http://www.dnspython.org/](http://www.dnspython.org/).
    You can install this library by using either the `easy_install` command or the
    `pip` command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: PyPI提供了一些DNS客户端库。我们将重点关注`dnspython`库，该库可在[http://www.dnspython.org/](http://www.dnspython.org/)上找到。您可以使用`easy_install`命令或`pip`命令安装此库：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Making a simple query regarding the IP address of a host is very simple. You
    can use the `dns.resolver` submodule, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对主机的IP地址进行简单查询非常简单。您可以使用`dns.resolver`子模块，如下所示：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you want to make a reverse look-up, then you need to use the `dns.reversename`
    submodule, as shown here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想进行反向查找，那么您需要使用`dns.reversename`子模块，如下所示：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let''s create an interactive DNS client script that will do a complete
    look-up of the possible records, as shown here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个交互式DNS客户端脚本，它将完成可能的记录查找，如下所示：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you run this script with some input, then you will have an output similar
    to the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用一些输入运行此脚本，那么您将得到类似以下的输出：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Inspecting DNS client/server communication
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查DNS客户端/服务器通信
- en: 'In previous chapters, perhaps you noticed how we captured network packets between
    the client and the server by using Wireshark. Here is an example of the session
    capturing, while a Python package was being installed from PyPI:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的章节中，也许您注意到我们如何通过使用Wireshark捕获客户端和服务器之间的网络数据包。这是一个示例，显示了从PyPI安装Python软件包时的会话捕获：
- en: '![Inspecting DNS client/server communication](graphics/6008OS_06_03.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![检查DNS客户端/服务器通信](graphics/6008OS_06_03.jpg)'
- en: FDNS client/server communication
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: FDNS客户端/服务器通信
- en: In Wireshark you can specify `port 53` by navigating to **Capture** | **Options**
    | **Capture filter**. This will capture all the DNS packets that were sent to/from
    your machine.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Wireshark中，您可以通过导航到**捕获** | **选项** | **捕获过滤器**来指定`端口53`。这将捕获所有发送到/从您的计算机的DNS数据包。
- en: As you can see in the following screenshot, the client and the server have several
    request/response cycles the DNS records. It was started with a standard request
    for the host's address (A) and it was followed by a suitable response.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下截图中所见，客户端和服务器有几个请求/响应周期的DNS记录。它是从对主机地址（A）的标准请求开始的，然后是一个合适的响应。
- en: '![Inspecting DNS client/server communication](graphics/6008OS_06_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![检查DNS客户端/服务器通信](graphics/6008OS_06_04.jpg)'
- en: 'If you look deep inside a packet, then you can see the request format of the
    response from the server, as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您深入查看数据包，您可以看到来自服务器的响应的请求格式，如下截图所示：
- en: '![Inspecting DNS client/server communication](graphics/6008OS_06_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![检查DNS客户端/服务器通信](graphics/6008OS_06_05.jpg)'
- en: NTP clients
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NTP客户端
- en: The final topic that will be covered in this chapter is NTP. Synchronizing time
    with a centralized time server is a key step in any corporate network. We would
    like to compare the log files between various servers and see if the timestamp
    on each server is accurate; the log events may not then co-relate. Many authentication
    protocols, such as Kerberos, strictly rely on the accuracy of the time stamp reported
    by the client to the servers. Here, a third-party Python `ntplib` library will
    be introduced, and then the communication between the NTP client and the server
    will be investigated.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的最后一个主题是NTP。与集中式时间服务器同步时间是任何企业网络中的关键步骤。我们想要比较各个服务器之间的日志文件，并查看每个服务器上的时间戳是否准确；日志事件可能不会相互关联。许多认证协议，如Kerberos，严格依赖于客户端报告给服务器的时间戳的准确性。在这里，将介绍第三方Python
    `ntplib`库，然后调查NTP客户端和服务器之间的通信。
- en: To create an NTP client, you need to call the ntplib's `NTPCLient` class.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个NTP客户端，您需要调用ntplib的`NTPCLient`类。
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we have selected `pool.ntp.org,` which is a load-balanced webserver. So,
    a pool of the NTP servers will be ready to respond to the client's request. Let's
    find more information regarding this from the response that was returned by an
    NTP server.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们选择了`pool.ntp.org`，这是一个负载平衡的网络服务器。因此，一组NTP服务器将准备好响应客户端的请求。让我们从NTP服务器返回的响应中找到更多信息。
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The detailed response will look like the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 详细的响应将如下所示：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding information was supplied by the NTP server to the client. This
    information can be used to determine the accuracy of the supplied time server.
    For example, the stratum value 2 indicates that the NTP server will query another
    NTP server with the stratum value 1, which may have a directly attached time source.
    For more information about the NTP protocol, you may either read the RFC 958 document
    at [https://tools.ietf.org/html/rfc958](https://tools.ietf.org/html/rfc958) or
    visit [http://www.ntp.org/](http://www.ntp.org/).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述信息是NTP服务器提供给客户端的。这些信息可用于确定所提供的时间服务器的准确性。例如，stratum值2表示NTP服务器将查询另一个具有直接附加时间源的stratum值1的NTP服务器。有关NTP协议的更多信息，您可以阅读[https://tools.ietf.org/html/rfc958](https://tools.ietf.org/html/rfc958)上的RFC
    958文档，或访问[http://www.ntp.org/](http://www.ntp.org/)。
- en: Inspecting the NTP client/server communication
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查NTP客户端/服务器通信
- en: 'You may be able to learn more about NTP by looking at captured packets. For
    this purpose, the preceding NTP client/server communication has been captured
    as shown in the following two screenshots:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看捕获的数据包来了解更多关于NTP的信息。为此，上述NTP客户端/服务器通信已被捕获，如下两个截图所示：
- en: The first screenshot shows the NTP client request. If you look inside the flag
    fields, then you will see the client's version number.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第一张截图显示了NTP客户端请求。如果您查看标志字段内部，您将看到客户端的版本号。
- en: '![Inspecting the NTP client/server communication](graphics/6008OS_06_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![检查NTP客户端/服务器通信](graphics/6008OS_06_06.jpg)'
- en: 'Similarly, the NTP server response has been shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，NTP服务器的响应显示在以下截图中：
- en: '![Inspecting the NTP client/server communication](graphics/6008OS_06_07.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![检查NTP客户端/服务器通信](graphics/6008OS_06_07.jpg)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, the standard Python libraries for IP address manipulation were
    discussed. Two third-party libraries `dnspython` and `ntplib` have been presented
    to interact with the DNS and the NTP servers respectively. As you have seen through
    the aforementioned examples, these libraries provide you with the necessary interface
    for talking to those services.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，讨论了用于IP地址操作的标准Python库。介绍了两个第三方库`dnspython`和`ntplib`，分别用于与DNS和NTP服务器交互。正如您通过上述示例所看到的，这些库为您提供了与这些服务通信所需的接口。
- en: In the following chapter, we will introduce socket programming in Python. This
    is another interesting and popular topic for networking programmers. There, you
    will find both low and high-level Python libraries for programming with BSD sockets.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍Python中的套接字编程。这是另一个对网络程序员来说非常有趣和受欢迎的主题。在那里，您将找到用于与BSD套接字编程的低级和高级Python库。
