- en: Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件
- en: 'In the previous chapter, we explored one of the most important features of
    pytest: fixtures. We learned how we can use fixtures to manage resources and make
    our lives easier when writing tests.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们探讨了pytest最重要的特性之一：fixture。我们学会了如何使用fixture来管理资源，并在编写测试时让我们的生活更轻松。
- en: pytest is constructed with customization and flexibility in mind, and allows
    developers to write powerful extensions called **plugins**. Plugins in pytest
    can do all sorts of things, from simply providing a new fixture, all the way to
    adding command line options, changing how tests are executed, and even running
    tests written in other languages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: pytest是以定制和灵活性为目标构建的，并允许开发人员编写称为**插件**的强大扩展。pytest中的插件可以做各种事情，从简单地提供新的fixture，到添加命令行选项，改变测试的执行方式，甚至运行用其他语言编写的测试。
- en: 'In this chapter, we will do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情：
- en: Learn how to find and install plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何查找和安装插件
- en: Have a taste of what plugins the ecosystem has to offer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 品尝生态系统提供的插件
- en: Finding and installing plugins
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找和安装插件
- en: As mentioned at the beginning of the chapter, pytest is written from the ground
    up with customization and flexibility in mind. The plugin mechanism is at the
    core of the pytest architecture, so much so that many of pytest's built-in features
    are implemented in terms of internal plugins, such as marks, parametrization,
    fixtures—nearly everything, even command-line options.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章开头提到的，pytest是从头开始以定制和灵活性为目标编写的。插件机制是pytest架构的核心，以至于pytest的许多内置功能都是以内部插件的形式实现的，比如标记、参数化、fixture——几乎所有东西，甚至命令行选项。
- en: This flexibility has led to an enormous and rich plugin ecosystem. At the time
    of writing, the number of plugins available is over 500, and that number keeps
    increasing at an astonishing rate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性导致了一个庞大而丰富的插件生态系统。在撰写本文时，可用的插件数量已经超过500个，而且这个数字以惊人的速度不断增加。
- en: Finding plugins
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找插件
- en: Given the large number of plugins, it would be nice if there was a site that
    showed all pytest plugins along with their descriptions. It would also be nice
    if this place also showed information about compatibility with different Python
    and pytest versions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到插件的数量众多，如果有一个网站能够展示所有pytest插件以及它们的描述，那将是很好的。如果这个地方还能显示关于不同Python和pytest版本的兼容性信息，那就更好了。
- en: 'Well, the good news is that such a site exists, and it is maintained by the
    core development team: pytest plugin compatibility ([http://plugincompat.herokuapp.com/](http://plugincompat.herokuapp.com/)).
    On it, you will find a list of all the pytest plugins available in PyPI, along
    with Python- and pytest-version compatibility information. The site is fed daily
    with new plugins and updates directly from PyPI, making it a great place to browse
    for new plugins.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，这样的网站已经存在了，并且由核心开发团队维护：pytest插件兼容性（[http://plugincompat.herokuapp.com/](http://plugincompat.herokuapp.com/)）。在这个网站上，你将找到PyPI中所有可用的pytest插件的列表，以及Python和pytest版本的兼容性信息。该网站每天都会从PyPI直接获取新的插件和更新，是一个浏览新插件的好地方。
- en: Installing plugins
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装插件
- en: 'Plugins are usually installed with `pip`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 插件通常使用`pip`安装：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, to install `pytest-mock`, we execute the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要安装`pytest-mock`，我们执行以下操作：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: No registration of any kind is necessary; pytest automatically detects the installed
    plugins in your virtual environment or Python installation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要任何注册；pytest会自动检测你的虚拟环境或Python安装中安装的插件。
- en: This simplicity makes it dead easy to try out new plugins.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单性使得尝试新插件变得非常容易。
- en: An overview of assorted plugins
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 各种插件概述
- en: Now, we will take a look at some useful and/or interesting plugins. Of course,
    it is not possible to cover all plugins here, so we will try to cover the ones
    that cover popular frameworks and general capabilities, with a few obscure plugins
    thrown in. Of course, this barely scratches the surface, but let's get to it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一些有用和/或有趣的插件。当然，不可能在这里覆盖所有的插件，所以我们将尝试覆盖那些涵盖流行框架和一般功能的插件，还有一些晦涩的插件。当然，这只是皮毛，但让我们开始吧。
- en: pytest-xdist
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-xdist
- en: This is a very popular plugin and is maintained by the core developers; it allows
    you to run tests under multiple CPUs, to speed up the test run.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常受欢迎的插件，由核心开发人员维护；它允许你在多个CPU下运行测试，以加快测试运行速度。
- en: 'After installing it, simply use the `-n` command-line flag to use the given
    number of CPUs to run the tests:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，只需使用`-n`命令行标志来使用给定数量的CPU来运行测试：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And that's it! Now, your tests will run across four cores and hopefully speed
    up the test suite quite a bit, if it is CPU intensive, thought I/O-bound tests
    won't see much improvement, though. You can also use `-n auto` to let `pytest-xdist`
    automatically figure out the number of CPUs you have available.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在，你的测试将在四个核心上运行，希望能够加快测试套件的速度，如果测试是CPU密集型的话，尽管I/O绑定的测试不会看到太多改进。你也可以使用`-n
    auto`来让`pytest-xdist`自动计算出你可用的CPU数量。
- en: Keep in mind that when your tests are running concurrently, and in random order,
    they must be careful to avoid stepping on each other's toes, for example, reading/writing
    to the same directory. While they should be idempotent anyway, running the tests
    in a random order often brings attention to problems that were lying dormant until
    then.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当你的测试并行运行，并且以随机顺序运行时，它们必须小心避免相互干扰，例如，读/写到同一个目录。虽然它们应该是幂等的，但以随机顺序运行测试通常会引起之前潜伏的问题。
- en: pytest-cov
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-cov
- en: The `pytest-cov` plugin provides integration with the popular coverage module,
    which provides detailed coverage reports for your code when running tests. This
    lets you detect sections of code that are not covered by any test code, which
    is an opportunity to write more tests to cover those cases.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-cov`插件与流行的coverage模块集成，当运行测试时提供详细的覆盖报告。这让你可以检测到没有被任何测试代码覆盖的代码部分，这是一个机会，可以编写更多的测试来覆盖这些情况。'
- en: 'After installation, you can use the `--cov` option to provide a coverage report
    at the end of the test run:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您可以使用`--cov`选项在测试运行结束时提供覆盖报告：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `--cov` option accepts a path to source files that should have reports generated,
    so you should pass your `src` or package directory depending on your project's
    layout.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`--cov`选项接受应生成报告的源文件路径，因此根据项目的布局，您应传递您的`src`或包目录。'
- en: 'You can also use the `--cov-report` option to generate reports in various formats:
    XML, annotate, and HTML. The latter is especially useful to use locally because
    it generates HTML files showing your code, with missed lines highlighted in red,
    making it very easy to find those uncovered spots.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`--cov-report`选项以生成各种格式的报告：XML，annotate和HTML。后者特别适用于本地使用，因为它生成HTML文件，显示您的代码，未覆盖的行以红色突出显示，非常容易找到这些未覆盖的地方。
- en: This plugin also works with `pytest-xdist` out of the box.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件还可以与`pytest-xdist`直接使用。
- en: Finally, the `.coverage` file generated by this plugin is compatible with many
    online services that provide coverage tracking and reporting, such as `coveralls.io`
    ([https://coveralls.io/](https://coveralls.io/)[) and `codecov.io` (](https://coveralls.io/)[https://codecov.io/](https://codecov.io/)[).](https://coveralls.io/)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，此插件生成的`.coverage`文件与许多提供覆盖跟踪和报告的在线服务兼容，例如`coveralls.io`（[https://coveralls.io/](https://coveralls.io/)）和`codecov.io`（[https://codecov.io/](https://codecov.io/)）。
- en: pytest-faulthandler
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-faulthandler
- en: This plugin automatically enables the built-in `faulthandler` ([https://docs.python.org/3/library/faulthandler.html](https://docs.python.org/3/library/faulthandler.html))
    module when running your tests, which outputs Python tracebacks in catastrophic
    cases such as a segmentation fault. After installed, no other setup or flag is
    required; the `faulthandler` module will be enabled automatically.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件在运行测试时自动启用内置的`faulthandler`（[https://docs.python.org/3/library/faulthandler.html](https://docs.python.org/3/library/faulthandler.html)）模块，该模块在灾难性情况下（如分段错误）输出Python回溯。安装后，无需其他设置或标志；`faulthandler`模块将自动启用。
- en: This plugin is strongly recommended if you regularly use extension modules written
    in C/C++, as those are more susceptible to crashes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您经常使用用C/C++编写的扩展模块，则强烈建议使用此插件，因为这些模块更容易崩溃。
- en: pytest-mock
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-mock
- en: The `pytest-mock` plugin provides a fixture that allows a smoother integration
    between pytest and the `unittest.mock` ([https://docs.python.org/3/library/unittest.mock.html](https://docs.python.org/3/library/unittest.mock.html))
    module of the standard library. It provides functionality similar to the built-in
    `monkeypatch` fixture, but the mock objects produced by `unittest.mock` also record
    information on how they are accessed. This makes many common testing tasks easier,
    such as verifying that a mocked function has been called, and with which arguments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-mock`插件提供了一个fixture，允许pytest和标准库的`unittest.mock`（[https://docs.python.org/3/library/unittest.mock.html](https://docs.python.org/3/library/unittest.mock.html)）模块之间更顺畅地集成。它提供了类似于内置的`monkeypatch`
    fixture的功能，但是`unittest.mock`产生的模拟对象还记录有关它们如何被访问的信息。这使得许多常见的测试任务更容易，例如验证已调用模拟函数以及使用哪些参数。'
- en: 'The plugin provides a `mocker` fixture that can be used for patching classes
    and methods. Using the `getpass` example from the last chapter, here is how you
    could write it using this plugin:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件提供了一个`mocker` fixture，可用于修补类和方法。使用上一章中的`getpass`示例，以下是您可以使用此插件编写它的方式：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that besides replacing `getpass.getpass()` and always returning the same
    value, we can also ensure that the `getpass` function has been called with the
    correct arguments.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除了替换`getpass.getpass()`并始终返回相同的值之外，我们还可以确保`getpass`函数已使用正确的参数调用。
- en: The same advice on how and where to patch the `monkeypatch` fixture from the
    previous chapter also applies when using this plugin.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此插件时，与上一章中如何以及在哪里修补`monkeypatch` fixture的建议也适用。
- en: pytest-django
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-django
- en: As the name suggests, this plugin allows you to test your `Django` ([https://www.djangoproject.com/](https://www.djangoproject.com/))
    applications using pytest. `Django` is one of the most famous web frameworks in
    use today.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，此插件允许您使用pytest测试您的`Django`（[https://www.djangoproject.com/](https://www.djangoproject.com/)）应用程序。`Django`是当今最著名的Web框架之一。
- en: 'The plugin provides a ton of features:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件提供了大量功能：
- en: A very nice Quick Start tutorial
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个非常好的快速入门教程
- en: Command-line and `pytest.ini` options to configure Django
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行和`pytest.ini`选项来配置Django
- en: Compatibility with `pytest-xdist`
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与`pytest-xdist`兼容
- en: Database access using the `django_db` mark, with automatic transaction rollback
    between tests, as well as a bunch of fixtures that let you control how the database
    is managed
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`django_db`标记访问数据库，在测试之间自动回滚事务，以及一堆fixture，让您控制数据库的管理方式
- en: 'Fixtures to make requests to your application: `client`, `admin_client`, and
    `admin_user`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于向应用程序发出请求的fixture：`client`，`admin_client`和`admin_user`
- en: A `live_server` fixture that runs a `Django` server in a background thread
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在后台线程中运行`Django`服务器的`live_server` fixture
- en: All in all, this is one of the most complete plugins available in the ecosystem,
    with too many features to cover here. It is a must-have for `Django` applications,
    so make sure to check out its extensive documentation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这是生态系统中最完整的插件之一，具有太多功能无法在此处覆盖。对于`Django`应用程序来说，这是必不可少的，因此请务必查看其广泛的文档。
- en: pytest-flakes
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-flakes
- en: This plugin allows you to check your code using `pyflakes` ([https://pypi.org/project/pyflakes/](https://pypi.org/project/pyflakes/)),
    which is a static checker of source files for common errors, such as missing imports
    and unknown variables.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件允许您使用`pyflakes`（[https://pypi.org/project/pyflakes/](https://pypi.org/project/pyflakes/)）检查您的代码，这是一个用于常见错误的源文件的静态检查器，例如丢失的导入和未知变量。
- en: 'After installed, use the `--flakes` option to activate it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，使用`--flakes`选项来激活它：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will run the flake checks alongside your normal tests, making it an easy
    and cheap way to keep your code tidy and prevent some errors. The plugin also
    keeps a local cache of files that have not changed since the last check, so it
    is fast and convenient to use locally.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的正常测试中运行flake检查，使其成为保持代码整洁和防止一些错误的简单而廉价的方法。该插件还保留了自上次检查以来未更改的文件的本地缓存，因此在本地使用起来快速和方便。
- en: pytest-asyncio
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-asyncio
- en: The `asyncio` ([https://docs.python.org/3/library/asyncio.html](https://docs.python.org/3/library/asyncio.html))
    module is one of the hot new additions to Python 3, providing a new framework
    for asynchronous applications. The `pytest-asyncio` plugin lets you write asynchronous
    test functions, making it a snap to test your asynchronous code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncio` ([https://docs.python.org/3/library/asyncio.html](https://docs.python.org/3/library/asyncio.html))模块是Python
    3的热门新功能之一，提供了一个新的用于异步应用程序的框架。`pytest-asyncio`插件让你编写异步测试函数，轻松测试你的异步代码。'
- en: 'All you need to do is make your test function `async def` and mark it with
    the `asyncio` mark:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要将你的测试函数标记为`async def`并使用`asyncio`标记：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The plugin also manages the event loop behind the scenes, providing a few options
    on how to change it if you need to use a custom event loop.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件还在后台管理事件循环，提供了一些选项，以便在需要使用自定义事件循环时进行更改。
- en: You are, of course, free to have normal synchronous test functions along with
    the asynchronous ones.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以在异步函数之外拥有正常的同步测试函数。
- en: pytest-trio
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-trio
- en: Trio's motto is Pythonic async I/O for humans ([https://trio.readthedocs.io/en/latest/](https://trio.readthedocs.io/en/latest/)).
    It uses the same `async def`/`await` keywords of the `asyncio` standard module,
    but it is considered simpler and more friendly to use, containing some novel ideas
    about how to deal with timeouts and groups of parallel tasks in a way to avoid
    common errors in parallel programming. It is definitely worth checking out if
    you are into asynchronous development.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Trio的座右铭是“Pythonic async I/O for humans” ([https://trio.readthedocs.io/en/latest/](https://trio.readthedocs.io/en/latest/))。它使用与`asyncio`标准模块相同的`async
    def`/`await`关键字，但被认为更简单和更友好，包含一些关于如何处理超时和一组并行任务的新颖想法，以避免并行编程中的常见错误。如果你对异步开发感兴趣，它绝对值得一试。
- en: '`pytest-trio` works similarly to `pytest-asyncio`: you write asynchronous test
    functions and mark them using the `trio` mark. It also provides other functionality
    that makes testing easier and more reliable, such as controllable clocks for testing
    timeouts, special functions to deal with tasks, mocking network sockets and streams,
    and a lot more.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-trio`的工作方式类似于`pytest-asyncio`：你编写异步测试函数，并使用`trio`标记它们。它还提供了其他功能，使测试更容易和更可靠，例如可控的时钟用于测试超时，处理任务的特殊函数，模拟网络套接字和流，以及更多。'
- en: pytest-tornado
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-tornado
- en: Tornado ([http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/))
    is a web framework and asynchronous network library. It is very mature, works
    in Python 2 and 3, and the standard `asyncio` module borrowed many ideas and concepts
    from it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Tornado ([http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/))是一个Web框架和异步网络库。它非常成熟，在Python
    2和3中工作，标准的`asyncio`模块从中借鉴了许多想法和概念。
- en: '`pytest-asyncio` was heavily inspired by `pytest-tornado`, so it works with
    the same idea of using a `gen_test` to mark your test as a coroutine. It uses
    the `yield` keyword instead of `await`, as it supports Python 2, but otherwise
    it looks very similar:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-asyncio`受`pytest-tornado`的启发，因此它使用相同的想法，使用`gen_test`来标记你的测试为协程。它使用`yield`关键字而不是`await`，因为它支持Python
    2，但除此之外它看起来非常相似：'
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: pytest-postgresql
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-postgresql
- en: This plugin allows you to test code that needs a running PostgreSQL database.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件允许你测试需要运行的PostgreSQL数据库的代码。
- en: 'Here''s a quick example of it in action:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它的一个快速示例：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It provides two fixtures:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了两个fixtures：
- en: '`postgresql`: a client fixture that starts and closes connections to the running
    test database. At the end of the test, it drops the test database to ensure tests
    don''t interfere with one another.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postgresql`：一个客户端fixture，启动并关闭到正在运行的测试数据库的连接。在测试结束时，它会删除测试数据库，以确保测试不会相互干扰。'
- en: '`postgresql_proc`: a session-scoped fixture that starts the PostgreSQL process
    once per session and ensures that it stops at the end.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postgresql_proc`：一个会话范围的fixture，每个会话启动一次PostgreSQL进程，并确保在结束时停止。'
- en: It also provides several configuration options on how to connect and configure
    the testing database.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了几个配置选项，用于连接和配置测试数据库。
- en: docker-services
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: docker-services
- en: This plugin starts and manages Docker services you need in order to test your
    code. This makes it simple to run the tests because you don't need to manually
    start the services yourself; the plugin will start and stop them during the test
    session, as needed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件启动和管理你需要的Docker服务，以便测试你的代码。这使得运行测试变得简单，因为你不需要手动启动服务；插件将在测试会话期间根据需要启动和停止它们。
- en: 'You configure the services using a `.services.yaml` file; here is a simple
    example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`.services.yaml`文件来配置服务；这里是一个简单的例子：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will start two services: `postgres` and `redis`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动两个服务：`postgres`和`redis`。
- en: 'With that, all that''s left to do is to run your suite with the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，剩下的就是用以下命令运行你的套件：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The plugin takes care of the rest.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 插件会处理剩下的事情。
- en: pytest-selenium
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-selenium
- en: Selenium is a framework targeted to automating browsers, to test web applications
    ([https://www.seleniumhq.org/](https://www.seleniumhq.org/)). It lets you do things
    such as opening a web page, clicking on a button, and then ensuring that a certain
    page loads, all programmatically. It supports all the major browsers out there
    and has a thriving community.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium是一个针对自动化浏览器的框架，用于测试Web应用程序 ([https://www.seleniumhq.org/](https://www.seleniumhq.org/))。它可以做诸如打开网页、点击按钮，然后确保某个页面加载等事情。它支持所有主流浏览器，并拥有一个蓬勃发展的社区。
- en: '`pytest-selenium` provides you with a fixture that lets you write tests that
    do all of those things, taking care of setting up `Selenium` for you.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-selenium`提供了一个fixture，让你编写测试来完成所有这些事情，它会为你设置`Selenium`。'
- en: 'Here''s a basic example of how to visit a page, click on a link, and check
    the title of the loaded page:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何访问页面，点击链接并检查加载页面的标题的基本示例：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`Selenium` and `pytest-selenium` are sophisticated enough to test a wide range
    of applications, from static pages to full single-page frontend applications.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Selenium`和`pytest-selenium`足够复杂，可以测试从静态页面到完整的单页前端应用程序的各种应用。'
- en: pytest-html
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-html
- en: '`pytest-html` generates beautiful HTML reports of your test results. After
    installing the plugin, simply run this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-html` 生成美丽的HTML测试结果报告。安装插件后，只需运行以下命令：'
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will generate a `report.html` file at the end of the test session.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在测试会话结束时生成一个`report.html`文件。
- en: 'Because pictures speak louder than words, here is an example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因为图片胜过千言万语，这里有一个例子：
- en: '![](assets/f71502c4-fb19-427a-8299-7d04fbb01c59.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f71502c4-fb19-427a-8299-7d04fbb01c59.png)'
- en: The reports can be served in a web server for easier viewing, plus they contain
    nice functionality such as checkboxes to show/hide different types of test results,
    and other plugins such as `pytest-selenium` are even able to attach screenshots
    to failed tests, as in the previous image.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 报告可以在Web服务器上进行服务以便更轻松地查看，而且它们包含了一些很好的功能，比如复选框来显示/隐藏不同类型的测试结果，还有其他插件如`pytest-selenium`甚至能够在失败的测试中附加截图，就像前面的图片一样。
- en: It's definitely worth checking out.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它绝对值得一试。
- en: pytest-cpp
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-cpp
- en: To prove the point that pytest's framework is very flexible, the `pytest-cpp`
    plugin allows you to run tests written in Google Test ([https://github.com/google/googletest](https://github.com/google/googletest))
    or Boost.Test ([https://www.boost.org](https://www.boost.org)[)](https://www.boost.org),
    which are frameworks for writing and running tests in the C++ language.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明pytest框架非常灵活，`pytest-cpp`插件允许你运行用Google Test ([https://github.com/google/googletest](https://github.com/google/googletest))
    或Boost.Test ([https://www.boost.org](https://www.boost.org))编写的测试，这些是用C++语言编写和运行测试的框架。
- en: 'After they are installed, you just need to run pytest as normal:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，你只需要像平常一样运行pytest：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Pytest will find executable files containing test cases, detecting  automatically
    whether they are written in `Google Test` or `Boost.Python`. It will run the tests
    and report results normally, with neat formatting that is familiar to pytest users.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest将找到包含测试用例的可执行文件，并自动检测它们是用`Google Test`还是`Boost.Python`编写的。它将正常运行测试并报告结果，格式整齐，熟悉pytest用户。
- en: Running those tests with pytest means that they now can make use of several
    features, such as parallel running with `pytest-xdist`, test selection with `-k`,
    JUnitXML reports, and so on. This plugin is particularly useful for code bases
    that use Python and C++ because it allows you to run all tests with a single command,
    and you can obtain a unique report.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pytest运行这些测试意味着它们现在可以利用一些功能，比如使用`pytest-xdist`进行并行运行，使用`-k`进行测试选择，生成JUnitXML报告等等。这个插件对于使用Python和C++的代码库特别有用，因为它允许你用一个命令运行所有测试，并且你可以得到一个独特的报告。
- en: pytest-timeout
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-timeout
- en: The `pytest-timeout` plugin terminates tests automatically after they reach
    a certain timeout.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-timeout`插件在测试达到一定超时后会自动终止测试。'
- en: 'You use it by setting a global timeout in the command-line:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在命令行中设置全局超时来使用它：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or you can mark individual tests with the `@pytest.mark.timeout` mark:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用`@pytest.mark.timeout`标记单独的测试：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'It works by using one of the two following methods to implement its timeout
    mechanism:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过以下两种方法之一来实现超时机制：
- en: '`thread`: during test setup, the plugin starts a thread that sleeps for the
    desired timeout period. If the thread wakes up, it will dump the tracebacks of
    all the threads to `stderr` and kill the current process. If the test finishes
    before the thread wakes up, then the thread is cancelled and the test run continues.
    This is the method that works on all platforms.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thread`：在测试设置期间，插件启动一个线程，该线程休眠指定的超时时间。如果线程醒来，它将将所有线程的回溯信息转储到`stderr`并杀死当前进程。如果测试在线程醒来之前完成，那么线程将被取消，测试继续运行。这是在所有平台上都有效的方法。'
- en: '`signal`: a `SIGALRM` is scheduled during test setup and canceled when the
    test finishes. If the alarm is triggered, it will dump the tracebacks of all threads
    to `stderr` and fail the test, but it will allow the test run to continue. The
    advantage over the thread method is that it won''t cancel the entire run when
    a timeout occurs, but it is not supported on all platforms.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signal`：在测试设置期间安排了一个`SIGALRM`，并在测试完成时取消。如果警报被触发，它将将所有线程的回溯信息转储到`stderr`并失败测试，但它将允许测试继续运行。与线程方法相比的优势是当超时发生时它不会取消整个运行，但它不支持所有平台。'
- en: The method is chosen automatically based on platform, but it can be changed
    in the command line or per-test by passing the `method=` parameter to `@pytest.mark.timeout`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法会根据平台自动选择，但可以在命令行或通过`@pytest.mark.timeout`的`method=`参数来进行更改。
- en: This plugin is indispensable in large test suites to avoid having tests hanging
    the CI.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件在大型测试套件中是不可或缺的，以避免测试挂起CI。
- en: pytest-annotate
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-annotate
- en: Pyannotate ([https://github.com/dropbox/pyannotate](https://github.com/dropbox/pyannotate)) is
    a project that observes runtime type information and can use that information
    to insert type annotations into the source code, and `pytest-annotate` makes it
    easy to use with pytest.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Pyannotate ([https://github.com/dropbox/pyannotate](https://github.com/dropbox/pyannotate))
    是一个观察运行时类型信息并将该信息插入到源代码中的项目，而`pytest-annotate`使得在pytest中使用它变得很容易。
- en: 'Let''s get back to this simple test case:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到这个简单的测试用例：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After installing `pytest-annotate`, we can generate an annotations file passing
    the `--annotations-output` flag:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`pytest-annotate`后，我们可以通过传递`--annotations-output`标志来生成一个注释文件：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will run the test suite as usual, but it will collect type information
    for later use.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将像往常一样运行测试套件，但它将收集类型信息以供以后使用。
- en: 'Afterward, you can call `PyAnnotate` to apply the type information directly
    to the source code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以调用`PyAnnotate`将类型信息直接应用到源代码中：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: It is very neat to quickly and efficiently annotate a large code base, especially
    if that code base is well covered by tests.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 快速高效地注释大型代码库是非常整洁的，特别是如果该代码库已经有了完善的测试覆盖。
- en: pytest-qt
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-qt
- en: The `pytest-qt` plugin allows you to write tests for GUI applications written
    in the `Qt` framework ([https://www.qt.io/](https://www.qt.io/)), supporting the
    more popular sets of Python bindings for `Qt`: `PyQt4`/`PyQt5`, and `PySide`/`PySide2`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-qt`插件允许您为使用`Qt`框架（[https://www.qt.io/](https://www.qt.io/)）编写的GUI应用程序编写测试，支持更受欢迎的Python绑定集：`PyQt4`/`PyQt5`和`PySide`/`PySide2`。'
- en: 'It provides a `qtbot` fixture that has methods to interact with a GUI application,
    such as clicking on buttons, entering text in fields, waiting for windows to pop
    up, and others. Here''s a quick example showing it in action:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个`qtbot`装置，其中包含与GUI应用程序交互的方法，例如单击按钮、在字段中输入文本、等待窗口弹出等。以下是一个快速示例，展示了它的工作原理：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we create a window, click on the about button, wait for the about box
    to show up, and then ensure it shows the text we expect.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建一个窗口，单击“关于”按钮，等待“关于”框弹出，然后确保它显示我们期望的文本。
- en: 'It also contains other goodies:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包含其他好东西：
- en: Utilities to wait for specific `Qt` signals
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待特定`Qt`信号的实用程序
- en: Automatic capturing of errors in virtual methods
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动捕获虚拟方法中的错误
- en: Automatic capturing of `Qt` logging messages
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动捕获`Qt`日志消息
- en: pytest-randomly
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-randomly
- en: Tests ideally should be independent from each other, making sure to clean up
    after themselves so they can be run in any order and don't affect one another
    in any way.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 测试理想情况下应该是相互独立的，确保在测试完成后进行清理，这样它们可以以任何顺序运行，而且不会以任何方式相互影响。
- en: '`pytest-randomly` helps you keep your test suite true to that point, by randomly
    ordering tests, changing their order every time you run your test suite. This
    helps detect whether the tests have hidden inter-dependencies that you would not
    find otherwise.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-randomly`通过随机排序测试，每次运行测试套件时更改它们的顺序，帮助您保持测试套件的真实性。这有助于检测测试是否具有隐藏的相互依赖性，否则您将无法发现。'
- en: It shuffles the order of the test items at module level, then at class level,
    and finally at the order of functions. It also resets `random.seed()` before each
    test to a fixed number, which is shown at the beginning of the test section. The
    random seed can be used at a later time to reproduce the same order with the `--randomly-seed`
    command line to reproduce a failure.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 它会在模块级别、类级别和函数顺序上对测试项进行洗牌。它还会在每个测试之前将`random.seed()`重置为一个固定的数字，该数字显示在测试部分的开头。可以在以后使用随机种子通过`--randomly-seed`命令行来重现失败。
- en: As an extra bonus, it also has special support for `factory boy` ([https://factoryboy.readthedocs.io/en/latest/reference.html](https://factoryboy.readthedocs.io/en/latest/reference.html)),
    `faker` ([https://pypi.python.org/pypi/faker](https://pypi.python.org/pypi/faker)),
    and `numpy` ([http://www.numpy.org/](http://www.numpy.org/)) libraries, resetting
    their random state before each test.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的奖励，它还特别支持`factory boy`（[https://factoryboy.readthedocs.io/en/latest/reference.html](https://factoryboy.readthedocs.io/en/latest/reference.html)）、`faker`（[https://pypi.python.org/pypi/faker](https://pypi.python.org/pypi/faker)）和`numpy`（[http://www.numpy.org/](http://www.numpy.org/)）库，在每个测试之前重置它们的随机状态。
- en: pytest-datadir
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-datadir
- en: Often, tests need a supporting file, for example a CSV file containing data
    about comedy series, as we saw in the last chapter. `pytest-datadir` allows you
    to save files alongside your tests and easily access them from the tests in a
    safe manner.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，测试需要一个支持文件，例如一个包含有关喜剧系列数据的CSV文件，就像我们在上一章中看到的那样。`pytest-datadir`允许您将文件保存在测试旁边，并以安全的方式从测试中轻松访问它们。
- en: 'Suppose you have a file structure such as this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有这样的文件结构：
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In addition to this, you have a `series.csv` file that you need to access from
    tests defined in `test_series.py`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，您还有一个`series.csv`文件，需要从`test_series.py`中定义的测试中访问。
- en: 'With `pytest-datadir` installed, all you need to do is to create a directory
    with the name of the test file in the same directory and put the file there:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`pytest-datadir`后，您只需要在相同目录中创建一个与测试文件同名的目录，并将文件放在其中：
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `test_series` directory and `series.csv` should be saved to your version-control
    system.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_series`目录和`series.csv`应该保存到您的版本控制系统中。'
- en: 'Now, tests in `test_series.py` can use the `datadir` fixture to access the
    file:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`test_series.py`中的测试可以使用`datadir`装置来访问文件：
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`datadir` is a Path instance pointing to the data directory ([https://docs.python.org/3/library/pathlib.html](https://docs.python.org/3/library/pathlib.html)).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`datadir`是一个指向数据目录的Path实例（[https://docs.python.org/3/library/pathlib.html](https://docs.python.org/3/library/pathlib.html)）。'
- en: One important thing to note is that when we use the `datadir` fixture in a test,
    we are not accessing the path to the original file, but a temporary copy. This
    ensures that tests can modify the files inside the data directory without affecting
    other tests because each test has its own copy.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，当我们在测试中使用`datadir`装置时，我们并不是访问原始文件的路径，而是临时副本。这确保了测试可以修改数据目录中的文件，而不会影响其他测试，因为每个测试都有自己的副本。
- en: pytest-regressions
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest-regressions
- en: It is normally the case that your application or library contains functionality
    that produces a data set as the result.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您的应用程序或库包含产生数据集作为结果的功能。
- en: 'Testing these results is often tedious and error-prone, producing tests such
    as this:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 经常测试这些结果是很繁琐且容易出错的，产生了这样的测试：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This gets old very quickly. Also, if any of the assertion fails, then the test
    stops at that point, and you won't know whether any other asserts after that point
    would also have failed. In other words, you don't get a clear picture of the overall
    failures. Most of all, this is also heavily unmaintainable because if the data
    returned by `obtain_series()` ever changes, you are in for a tedious and error-prone
    task of updating all the code.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这很快就会变得老套。此外，如果任何断言失败，那么测试就会在那一点停止，您将不知道在那一点之后是否还有其他断言失败。换句话说，您无法清楚地了解整体失败的情况。最重要的是，这也是非常难以维护的，因为如果`obtain_series()`返回的数据发生变化，您将不得不进行繁琐且容易出错的代码更新任务。
- en: '`pytest-regressions` provides fixtures to solve this kind of problem. General
    data such as the previous example is a job for the `data_regression` fixture:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-regressions`提供了解决这类问题的装置。像前面的例子一样，一般的数据是`data_regression`装置的工作：'
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The first time you execute this test, it will fail with a message such as this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次执行此测试时，它将失败，并显示如下消息：
- en: '[PRE25]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It will dump the data passed to `data_regression.check()` in a nicely formatted
    YAML file into the data directory of the `test_series.py` file (courtesy of the
    `pytest-datadir` fixture we saw earlier):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 它将以一个格式良好的YAML文件的形式将传递给`data_regression.check()`的数据转储到`test_series.py`文件的数据目录中（这要归功于我们之前看到的`pytest-datadir`装置）：
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The next time you run this test, `data_regression` now compares the data passed
    to `data_regressions.check()` with the data found in `test_obtain_series.yml`
    inside the data directory. If they match, the test passes.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 下次运行此测试时，`data_regression`现在将传递给`data_regressions.check()`的数据与数据目录中的`test_obtain_series.yml`中找到的数据进行比较。如果它们匹配，测试通过。
- en: 'If the data is changed, however, the test fails with a nicely formatted text
    differential  between the new data and the recorded one:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果数据发生了变化，测试将失败，并显示新数据与记录数据之间的差异：
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In some cases, this might be a regression, in which case you can hunt down the
    bug in the code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这可能是一个回归，这种情况下你可以在代码中找到错误。
- en: 'But in this case, the new data is *correct;* you just need to run pytest with
    the `--force-regen` flag and `pytest-regressions` will update the data file with
    the new content for you:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这种情况下，新数据是*正确的；*你只需要用`--force-regen`标志运行pytest，`pytest-regressions`将为你更新数据文件的新内容：
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, the test passes if we run it again, as the file contains the new data.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次运行测试，测试将通过，因为文件包含了新数据。
- en: This is an immense time saver when you have dozens of tests that suddenly produce
    different but correct results. You can bring them all up to date with a single
    pytest execution.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有数十个测试突然产生不同但正确的结果时，这将极大地节省时间。你可以通过单次pytest执行将它们全部更新。
- en: I use this plugin myself, and I can't count the hours it has saved me.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己使用这个插件，我数不清它为我节省了多少时间。
- en: Honorable mentions
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 值得一提的是
- en: There are just too many good plugins to fit into this chapter. The previous
    sample is really just a small taste, where I tried to strike a balance between
    useful, interesting, and showing the flexibility of the plugin architecture.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有太多好的插件无法放入本章。前面的示例只是一个小小的尝试，我试图在有用、有趣和展示插件架构的灵活性之间取得平衡。
- en: 'Here are a few other plugins that are worth mentioning:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些值得一提的其他插件：
- en: '`pytest-bdd`: a behavior-driven development for pytest'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-bdd`：pytest的行为驱动开发'
- en: '`pytest-benchmark`: a fixture to benchmark code. It outputs benchmark results
    with color output'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-benchmark`：用于对代码进行基准测试的装置。它以彩色输出输出基准测试结果'
- en: '`pytest-csv`: outputs test status as CSV files'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-csv`：将测试状态输出为CSV文件'
- en: '`pytest-docker-compose`: this manages Docker containers, using Docker compose
    during test runs'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-docker-compose`：在测试运行期间使用Docker compose管理Docker容器'
- en: '`pytest-excel`: outputs test status reports in Excel'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-excel`：以Excel格式输出测试状态报告'
- en: '`pytest-git`: provides a git fixture for tests that need to deal with git repositories'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-git`：为需要处理git仓库的测试提供git装置'
- en: '`pytest-json`: outputs test statuses as json files'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-json`：将测试状态输出为json文件'
- en: '`pytest-leaks`: detects memory leaks, by running tests repeatedly and comparing
    reference counts'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-leaks`：通过重复运行测试并比较引用计数来检测内存泄漏'
- en: '`pytest-menu`: lets the user select tests to run from a menu in the console'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-menu`：允许用户从控制台菜单中选择要运行的测试'
- en: '`pytest-mongo`: process and client fixtures for MongoDB'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-mongo`：MongoDB的进程和客户端装置'
- en: '`pytest-mpl`: plugin that tests figures output from Matplotlib'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-mpl`：测试Matplotlib输出的图形的插件'
- en: '`pytest-mysql`: process and client fixtures for MySQL'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-mysql`：MySQL的进程和客户端装置'
- en: '`pytest-poo`: replaces the `F` character for failing tests with the "pile of
    poo" emoji'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-poo`：用"pile of poo"表情符号替换失败测试的`F`字符'
- en: '`pytest-rabbitmq`: process and client fixtures for RabbitMQ'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-rabbitmq`：RabbitMQ的进程和客户端装置'
- en: '`pytest-redis`: process and client fixtures for Redis'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-redis`：Redis的进程和客户端装置'
- en: '`pytest-repeat`: repeats all tests or specific tests a number of times to find intermittent
    failures'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-repeat`：重复所有测试或特定测试多次以查找间歇性故障'
- en: '`pytest-replay`: saves test runs and allows the user to execute them later,
    so as to reproduce crashes and flaky tests'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-replay`：保存测试运行并允许用户以后执行它们，以便重现崩溃和不稳定的测试'
- en: '`pytest-rerunfailures`: this marks tests that can be run more than once to
    eliminate flaky tests'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-rerunfailures`：标记可以运行多次以消除不稳定测试的测试'
- en: '`pytest-sugar`: changes the look and feel of the pytest console, by adding
    progress bars, emojis, instant failures, and so on'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-sugar`：通过添加进度条、表情符号、即时失败等来改变pytest控制台的外观和感觉'
- en: '`pytest-tap`: toutputs test reports in TAP format'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-tap`：以TAP格式输出测试报告'
- en: '`pytest-travis-fold`: folds captured output and coverage reports in the Travis
    CI build log'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-travis-fold`：在Travis CI构建日志中折叠捕获的输出和覆盖报告'
- en: '`pytest-vagrant`: pytest fixture that works with vagrant boxes'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-vagrant`：与vagrant boxes一起使用的pytest装置'
- en: '`pytest-vcr`: automatically manages `VCR.py` cassettes ([https://vcrpy.readthedocs.io/en/latest/](https://vcrpy.readthedocs.io/en/latest/)),
    using a simple mark'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-vcr`：使用简单的标记自动管理`VCR.py`磁带'
- en: '`pytest-virtualenv`: this provides a virtualenv fixture to manage virtual environments
    in tests'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-virtualenv`：提供一个虚拟环境装置来管理测试中的虚拟环境'
- en: '`pytest-watch`: this continuously watches for changes in the source code and
    reruns pytest'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-watch`：持续监视源代码的更改并重新运行pytest'
- en: '`pytest-xvfb`: this runs `Xvfb` (a virtual frame buffer) for your UI tests'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pytest-xvfb`：为UI测试运行`Xvfb`（虚拟帧缓冲区）'
- en: '`tavern`: is tan automated test for APIs using a YAML-based syntax'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tavern`：使用基于YAML的语法对API进行自动化测试'
- en: '`xdoctest`: rewrite of the built-in doctests module, to make doctests easier
    to write and simpler to configure'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xdoctest`：重写内置的doctests模块，使得编写和配置doctests更加容易'
- en: Remember, at the time of writing, the number of pytest plugins available is
    over 500, so make sure to browse the list of plugins so that you can find something
    to your liking.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在撰写本文时，pytest插件的数量已经超过500个，所以一定要浏览插件列表，以便找到自己喜欢的东西。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how easy it is to find and install plugins. We
    also have been shown some plugins that I use daily and find interesting. I hope
    this has given you a taste of what's possible in pytest, but please explore the
    vast number of plugins to see whether you can find any that are useful.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了查找和安装插件是多么容易。我们还展示了一些我每天使用并且觉得有趣的插件。我希望这让你对pytest的可能性有所了解，但请探索大量的插件，看看是否有任何有用的。
- en: 'Creating your own plugins is not a topic that is covered in this book, but
    if you are interested, here are some resources to get you started:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自己的插件不是本书涵盖的主题，但如果你感兴趣，这里有一些资源可以帮助你入门：
- en: 'The pytest documentation: writing plugins ([https://docs.pytest.org/en/latest/writing_plugins.html](https://docs.pytest.org/en/latest/writing_plugins.html)).'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pytest文档：编写插件（[https://docs.pytest.org/en/latest/writing_plugins.html](https://docs.pytest.org/en/latest/writing_plugins.html)）。
- en: Brian Okken's wonderful book about pytest Python testing with pytest, which
    delves deeper than this book does, has an excellent chapter on how to write your
    own plugins.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Brian Okken的关于pytest的精彩书籍《Python测试与pytest》，比本书更深入地探讨了如何编写自己的插件。
- en: In the next chapter, we will learn how to use pytest with existing `unittest`-based
    test suites, including tips and suggestions on how to migrate them and incrementally
    use more of pytest's features.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何将pytest与现有的基于`unittest`的测试套件一起使用，包括有关如何迁移它们并逐步使用更多pytest功能的提示和建议。
