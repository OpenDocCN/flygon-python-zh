- en: Fun with Spreadsheets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与电子表格一起玩
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Writing a CSV spreadsheet
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写CSV电子表格
- en: Updating CSV spreadsheets
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新CSV电子表格
- en: Reading an Excel spreadsheet
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取Excel电子表格
- en: Updating an Excel spreadsheet
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新Excel电子表格
- en: Creating new sheets in an Excel spreadsheet
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Excel电子表格中创建新工作表
- en: Creating charts in Excel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Excel中创建图表
- en: Working with format in Excel
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Excel中处理格式
- en: Reading and writing in LibreOffice
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在LibreOffice中读写
- en: Creating a macro in LibreOffice
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在LibreOffice中创建宏
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Spreadsheets are one of the most versatile and omnipresent tools in the world
    of computing. Their intuitive approach of sheets and cells is used by virtually
    everyone that uses a computer as part of their day-to-day operations. There's
    even a joke that whole complex businesses are managed and described in a single
    spreadsheet. They are an incredibly powerful tool.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 电子表格是计算机世界中最通用和无处不在的工具之一。它们直观的表格和单元格的方法被几乎每个使用计算机作为日常操作的人所使用。甚至有一个笑话说整个复杂的业务都是在一个电子表格中管理和描述的。它们是一种非常强大的工具。
- en: That makes the ability to automate reading from and writing to spreadsheets
    so powerful. We'll see in this chapter how to process spreadsheets, mainly in
    the most common format, Excel. A final recipe will cover a free alternative, Libre
    Office, and in particular, how to use Python as a scripting language inside it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得自动从电子表格中读取和写入变得非常强大。在本章中，我们将看到如何处理电子表格，主要是在最常见的格式Excel中。最后一个食谱将涵盖一个免费的替代方案，Libre
    Office，特别是如何在其中使用Python作为脚本语言。
- en: Writing a CSV spreadsheet
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写CSV电子表格
- en: CSV files are simple spreadsheets that are easy to share. They are basically
    a text file with tabular data, separated by commas (hence the name Comma-Separated
    Values), in a simple table format. CSV files can be created using Python's standard
    library and can be read by most spreadsheet software.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件是简单的电子表格，易于共享。它们基本上是一个文本文件，其中包含用逗号分隔的表格数据（因此称为逗号分隔值），以简单的表格格式。CSV文件可以使用Python的标准库创建，并且可以被大多数电子表格软件读取。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, only the standard library of Python is required. Everything
    is ready out of the box!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，只需要Python的标准库。一切都已经准备就绪！
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Import the `csv` module:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`csv`模块：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Define the header with how the data will be ordered and the data to store:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义标题以及数据的存储方式：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Write the data into a CSV file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据写入CSV文件：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Check the resulting CSV file in a spreadsheet. In the following screenshot,
    the file is displayed using the LibreOffice software:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在电子表格中检查生成的CSV文件。在下面的屏幕截图中，使用LibreOffice软件显示文件：
- en: '![](assets/7608d599-692e-4267-93fd-e569ef57e858.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7608d599-692e-4267-93fd-e569ef57e858.png)'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: After the preparation work in steps 1 and 2 in the *How to do it…* section,
    step 3 is the part that does the work.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做*部分的步骤1和2中进行准备工作后，步骤3是执行工作的部分。
- en: It opens a new file, `movies.csv`, in write (`w`) mode. The raw file object
    in `csvfile` then creates a writer. All this happens in a `with` block, so it
    closes the file when it's over.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 它以写（`w`）模式打开一个名为`movies.csv`的新文件。然后在`csvfile`中创建一个原始文件对象。所有这些都发生在`with`块中，因此在结束时关闭文件。
- en: Note the `newline=''` parameter. This is done to make the `writer` store the
    newline directly and avoid incompatibility issues.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`newline=''`参数。这是为了让`writer`直接存储换行，并避免兼容性问题。
- en: The writer writes row by row the elements using `.writerow`. The first one is
    the `HEADER`, and then each of the lines of data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 写入器使用`.writerow`逐行写入元素。第一个是`HEADER`，然后是每行数据。
- en: There's more...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The code presented stores the data in the default dialect. The dialect defines
    what divides the data on each row (commas or other characters), how to escape,
    newlines, and so on. In case the dialect needs to be tweaked, each of these parameters
    can be defined in the `writer` call. See the following link for a list of all
    the parameters that can be defined:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所呈现的代码将数据存储在默认方言中。方言定义了每行数据之间的分隔符（逗号或其他字符），如何转义，换行等。如果需要调整方言，可以在`writer`调用中定义这些参数。请参见以下链接，了解可以定义的所有参数列表：
- en: '[https://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters](https://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters](https://docs.python.org/3/library/csv.html#dialects-and-formatting-parameters)。'
- en: CSV files are better when simple. If the data to be stored is complicated, maybe
    the best alternative is not a CSV file. But CSV files are extremely useful when
    dealing with tabular data. They can be understood by virtually all programs, and
    even dealing with them at a low level is easy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件在简单时更好。如果要存储的数据很复杂，也许最好的选择不是CSV文件。但是在处理表格数据时，CSV文件非常有用。它们几乎可以被所有程序理解，甚至在低级别处理它们也很容易。
- en: 'The full `csv` module documentation can be found here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`csv`模块文档可以在这里找到：
- en: '[https://docs.python.org/3/library/csv.html](https://docs.python.org/3/library/csv.html).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/library/csv.html](https://docs.python.org/3/library/csv.html)。'
- en: See also
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Reading CSV files* recipe *in *[Chapter 4](e8536572-46e4-41ec-87b8-7f775fd61e63.xhtml), *Searching
    and Reading Local Files*
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在*[第4章](e8536572-46e4-41ec-87b8-7f775fd61e63.xhtml)中的*读取和搜索本地文件*中的*读取CSV文件*食谱'
- en: The *Updating CSV files* recipe
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更新CSV文件*食谱'
- en: Updating the CSV files
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新CSV文件
- en: Given that CSV files are simple text files, the best solution to update their
    content is to read them, change them to internal Python objects, and then write
    the result in the same format. In this recipe, will see how to do this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于CSV文件是简单的文本文件，更新其内容的最佳解决方案是读取它们，将它们更改为内部Python对象，然后以相同的格式写入结果。在这个食谱中，我们将看到如何做到这一点。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we will use the `movies.csv` file that is available on GitHub
    at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.csv](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.csv).
    It contains the following data:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用GitHub上的`movies.csv`文件。它包含以下数据：
- en: '| **Admissions** | **Name** | **Year** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **招生** | **姓名** | **年份** |'
- en: '| 225.7 | Gone With the Wind | 1939 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 225.7 | 乱世佳人 | 1939年 |'
- en: '| 194.4 | Star Wars | 1968 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 194.4 | 星球大战 | 1968年 |'
- en: '| 161.0 | ET: The Extra-Terrestrial | 1982 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 161.0 | 外星人 | 1982年 |'
- en: Notice that the year of `Star Wars` is incorrect (it should be 1977). We'll
    change it in the recipe.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`星球大战`的年份是错误的（应为1977年）。我们将在配方中更改它。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import the `csv` module and define the filename:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`csv`模块并定义文件名：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Read the contents of the file using a `DictReader` and transform them into
    a list of ordered rows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`DictReader`读取文件的内容，并将其转换为有序行的列表：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Check the obtained data. Change the proper value from 1968 to 1977:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查获取的数据。将1968年的正确值更改为1977年：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open the file again, and store the values:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开文件，并存储值：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Check the result in spreadsheet software. The result is similar to that displayed
    in step 4 of the *Writing a CSV spreadsheet* recipe.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在电子表格软件中检查结果。结果与*编写CSV电子表格*配方中的第4步中显示的结果类似。
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: After importing the `csv` module in step 2 of the *How to do it…* section, we
    extract all the data from the file. The file is opened in a `with` block.  `DictReader`
    conveniently transforms it into a list of dictionaries, with the keys on the header
    values.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做...*部分的第2步中导入`csv`模块后，我们从文件中提取所有数据。文件在`with`块中打开。`DictReader`方便地将其转换为字典列表，其中键是标题值。
- en: The conveniently formatted data can then be manipulated and changed. We change
    the data to the proper value in step 3.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以操纵和更改方便格式化的数据。我们在第3步中将数据更改为适当的值。
- en: In this recipe, we change the value directly, but searching may be required
    in a more general case.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们直接更改值，但在更一般的情况下可能需要搜索。
- en: Step 4 overwrites the file and, using `DictWriter`, stores the data. `DictWriter`
    requires us to define the fields on the columns by requiring the `fieldnames`.
    To obtain it, we retrieve the keys of one of the rows and store them in `HEADER`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步将覆盖文件，并使用`DictWriter`存储数据。`DictWriter`要求我们通过`fieldnames`在列上定义字段。为了获得它，我们检索一行的键并将它们存储在`HEADER`中。
- en: The file is opened again in `w` mode to overwrite it. `DictWriter`  first stores
    the header with `.writeheader` and then stores all the rows with a single call
    to `.writerows`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 文件再次以`w`模式打开以覆盖它。`DictWriter`首先使用`.writeheader`存储标题，然后使用单个调用`.writerows`存储所有行。
- en: The rows can also be added one by one by calling `.writerow`
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过调用`.writerow`逐个添加行
- en: After closing the `with` block, the file is stored and can be checked.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭`with`块后，文件将被存储并可以进行检查。
- en: There's more...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The dialect of the CSV file typically known, but it may be the case that it
    is not. In that case, the `Sniffer` class can help. It analyses a sample of the
    file (or the whole file) and returns a `dialect` object to allow reading in the
    proper way:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件的方言通常是已知的，但也可能不是这种情况。在这种情况下，`Sniffer`类可以帮助。它分析文件的样本（或整个文件）并返回一个`dialect`对象，以允许以正确的方式进行读取：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The dialect then can be passed to the `DictReader` class when opening the file.
    The file will need to be opened twice for reading.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以在打开文件时将方言传递给`DictReader`类。需要两次打开文件进行读取。
- en: Remember to use the dialect on the `DictWriter` class as well to save the file
    in the same format.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在`DictWriter`类上也使用方言以相同的格式保存文件。
- en: 'The full documentation for the `csv` module can be found here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`csv`模块的完整文档可以在这里找到：'
- en: '[https://docs.python.org/3.6/library/csv.html](https://docs.python.org/3.6/library/csv.html).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3.6/library/csv.html](https://docs.python.org/3.6/library/csv.html)。'
- en: See also
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Reading CSV files* recipe in [Chapter 4](e8536572-46e4-41ec-87b8-7f775fd61e63.xhtml), *Searching
    and Reading Local Files*
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](e8536572-46e4-41ec-87b8-7f775fd61e63.xhtml)的*读取CSV文件*配方中
- en: The *Writing a CSV spreadsheet* recipe
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写CSV电子表格*配方'
- en: Reading an Excel spreadsheet
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取Excel电子表格
- en: MS Office is arguably the most common office suite software, making its formats
    pretty much standards. In terms of spreadsheets, Excel is probably the most used
    one and a format easily exchanged.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: MS Office可以说是最常见的办公套件软件，使其格式几乎成为标准。在电子表格方面，Excel可能是最常用的格式，也是最容易交换的格式。
- en: In this recipe, we'll see how to obtain information from an Excel spreadsheet
    programmatically from Python using the `openpyxl` module.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何使用`openpyxl`模块从Python中以编程方式获取Excel电子表格中的信息。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the `openpyxl` module. We should install the module, adding it
    to our `requirements.txt` file as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`openpyxl`模块。我们应该安装该模块，并将其添加到我们的`requirements.txt`文件中，如下所示：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the GitHub repository, there''s an Excel spreadsheet named `movies.xlsx`
    that contains information on the top ten movies by attendance. The file can be
    found here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub存储库中，有一个名为`movies.xlsx`的Excel电子表格，其中包含前十部电影的出席信息。文件可以在此处找到：
- en: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx)。'
- en: 'The source of the information is this web page:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 信息来源是这个网页：
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html)。'
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import the `openpyxl` module:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`openpyxl`模块：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Load the file into memory:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件加载到内存中：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'List all sheets and get the first one, which is the only one that contains
    data:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有工作表并获取第一个工作表，这是唯一包含数据的工作表：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Obtain the value of cells `B4` and `D4` (admissions and director of E.T.):'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取单元格`B4`和`D4`的值（入场和E.T.的导演）：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Obtain the size in rows and columns. Any cell out of that range will return
    `None` as a value:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取行和列的大小。超出该范围的任何单元格将返回`None`作为值：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After importing the module in step 1, step 2 in the *How to do it…* section
    loads the file into memory in a `Workbook` object. Each workbook can contain one
    or more sheets, which contain cells.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步中导入模块后，*如何做…*部分的第2步将文件加载到`Workbook`对象的内存中。每个工作簿可以包含一个或多个包含单元格的工作表。
- en: To determine the available sheets, in step 3 we obtain all the sheets (there's
    only one in this example) and then access the sheet like a dictionary to retrieve
    a `Worksheet` object.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定可用的工作表，在第3步中，我们获取所有工作表（在此示例中只有一个），然后像字典一样访问工作表，以检索`Worksheet`对象。
- en: '`Worksheet` can then access all the cells directly by their names, such as `A4`
    or `C3`. Each of them will return a `Cell` object. The `.value` attribute stores
    the value in the cell.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`Worksheet`可以通过它们的名称直接访问所有单元格，例如`A4`或`C3`。它们中的每一个都将返回一个`Cell`对象。`.value`属性存储单元格中的值。
- en: In the rest of the recipes in this chapter, we will see more attributes of `Cell`
    objects. Keep reading!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余配方中，我们将看到`Cell`对象的更多属性。继续阅读！
- en: Obtaining the area where the data is stored is possible with `max_columns` and
    `max_rows`. This allows us to search within the limits of the data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`max_columns`和`max_rows`获取存储数据的区域。这允许我们在数据的限制范围内进行搜索。
- en: Excel defines the columns as letters (A, B, C, and so on ) and rows as numbers
    (1, 2, 3, and so on). Remember to always set the column, and then the row (`D1`,
    not `1D`), or an error will be raised.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Excel将列定义为字母（A、B、C等），行定义为数字（1、2、3等）。记住始终先设置列，然后设置行（`D1`，而不是`1D`），否则将引发错误。
- en: Cells outside the area are accessible, but won't return data. They can be used
    to write new info.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 可以访问区域外的单元格，但不会返回数据。它们可以用于写入新信息。
- en: There's more...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Cells can also be retrieved with `sheet.cell(column, row)`. Both elements start
    at 1.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`sheet.cell(column, row)`检索单元格。这两个元素都从1开始。
- en: 'All the cells within the data area iterating from the sheet, for example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从工作表中迭代数据区域内的所有单元格，例如：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will return a list of lists with all cells, row by row: A1, A2, A3 ...
    B1, B2, B3, and so on.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个包含所有单元格的列表的列表，逐行：A1、A2、A3... B1、B2、B3等。
- en: You can retrieve the cell's column with columns iterating through `sheet.columns`: A1,
    B1, C1, and so on, A2, B2, C2\. and so on.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`sheet.columns`迭代来检索单元格的列：A1、B1、C1等，A2、B2、C2等。
- en: 'When retrieving a cell, you can find their position with `.coordinate`, `.row`,
    and `.column`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在检索单元格时，可以使用`.coordinate`、`.row`和`.column`找到它们的位置：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The full `openpyxl` documentation can be found here:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`openpyxl`文档可以在此处找到：
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html)。'
- en: See also
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Updating an Excel spreadsheet* recipe
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更新Excel电子表格*配方'
- en: The *Creating new sheets in an Excel spreadsheet* recipe
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel电子表格中创建新工作表*配方'
- en: The *Creating charts in Excel* recipe
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel中创建图表*配方'
- en: The *Working with the format in Excel* recipe
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel中处理格式*配方'
- en: Updating an Excel spreadsheet
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新Excel电子表格
- en: In this recipe, we'll see how to update an existing Excel spreadsheet. This
    will include changing raw values in cells but also setting up formulas that will
    be evaluated when the spreadsheet is open. We'll also see how to add comments
    to cells.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何更新现有的Excel电子表格。这将包括更改单元格中的原始值，还将设置在打开电子表格时将被评估的公式。我们还将看到如何向单元格添加注释。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will use the module `openpyxl`. We should install the module, adding it
    to our `requirements.txt` file as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用模块`openpyxl`。我们应该安装该模块，并将其添加到我们的`requirements.txt`文件中，如下所示：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the GitHub repository, there's an Excel spreadsheet named `movies.xlsx` that
    contains information on the top ten movies by attendance.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub存储库中，有一个名为`movies.xlsx`的Excel电子表格，其中包含前十部电影的观众人数信息。
- en: 'The file can be found here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 文件可以在此处找到：
- en: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx)[.](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter6/movies.xlsx)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.xlsx)[.](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter6/movies.xlsx)'
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Import the module `openpyxl` and the `Comment` class:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入模块`openpyxl`和`Comment`类：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Load the file into memory and get the sheet:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件加载到内存中并获取工作表：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Obtain the value of cell `D4` (director of E.T):'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取单元格`D4`的值（E.T.的导演）：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Change the value to just `Spielberg`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将值更改为`Spielberg`：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a comment to that cell:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向该单元格添加注释：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add a new element that obtains the total of all values in the `Admission` column:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新元素，获取`Admission`列中所有值的总和：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Save the spreadsheet to the `movies_comment.xlsx` file:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电子表格保存到`movies_comment.xlsx`文件中：
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Check the resulting file, which includes the comment and the calculation of
    the total of column `B` in `A12`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查包含注释和在`A12`中计算`B`列总和的结果文件：
- en: '![](assets/fc401f36-2ee6-48e2-ba41-d2999eac7c60.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc401f36-2ee6-48e2-ba41-d2999eac7c60.png)'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the *How to do it…* section, the imports in step 1 and reading the spreadsheet
    in step 2, we select the cell to be changed in step 3.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做…*部分，第1步中的导入和第2步中的读取电子表格，我们在第3步中选择要更改的单元格。
- en: Updating the value is done in step 4 with an assignment. A comment in the cell
    is added, overwriting the `.coment` attribute with a new `Comment`. Note that
    the user that made the comment needs to be added as well.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步中进行值的更新。在单元格中添加注释，覆盖`.coment`属性并添加新的`Comment`。请注意，还需要添加进行注释的用户。
- en: Values can also include descriptions of formulas. In step 6, we add a new formula
    to cell `B12`. The value is calculated and displayed when the file is opened in
    step 8.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 值也可以包括公式的描述。在第6步，我们向单元格`B12`添加一个新的公式。在第8步打开文件时，该值将被计算并显示。
- en: The value of a formula is not calculated in the Python object. This means that
    the formula could contain errors or display unexpected results through bugs. Be
    sure to double-check that the formulas are correct.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 公式的值不会在Python对象中计算。这意味着公式可能包含错误，或者通过错误显示意外结果。请务必仔细检查公式是否正确。
- en: Finally, in step 9, the spreadsheet is saved to disk by calling the `.save`
    method of the file.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第9步，通过调用文件的`.save`方法将电子表格保存到磁盘。
- en: The name of the resulting file can be the same one as the input one to overwrite
    the file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件名可以与输入文件相同，以覆盖该文件。
- en: The comment and values can be checked by externally accessing the file.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过外部访问文件来检查注释和值。
- en: There's more...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can store data in multiple values, and it will be translated into the proper
    types for Excel. For example, storing `datetime` will store it in the proper date
    format. The same is true with `float` or other numeric formats.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将数据存储在多个值中，并且它将被转换为Excel的适当类型。例如，存储`datetime`将以适当的日期格式存储。对于`float`或其他数字格式也是如此。
- en: 'If you need to infer types, you can enable this by using the `guess_type` parameter
    when loading the file, for example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要推断类型，可以在加载文件时使用`guess_type`参数来启用此功能，例如：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Adding comments to automatically generated cells can help review the resulting
    file, making clear how where they generated.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 向自动生成的单元格添加注释可以帮助审查结果文件，清楚地说明它们是如何生成的。
- en: While is possible to add formulas to automatically generate Excel files, debugging
    the results can be tricky. When generating a result, generally it's better to
    make the calculations in Python and store the result in raw.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以添加公式来自动生成Excel文件，但调试结果可能会很棘手。在生成结果时，通常最好在Python中进行计算并将结果存储为原始数据。
- en: 'The full `openpyxl` documentation can be found here:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`openpyxl`文档可以在这里找到：
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html)。'
- en: See also
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Reading an Excel spreadsheet* recipe
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*读取Excel电子表格*教程'
- en: The *Creating new sheets on an Excel spreadsheet* recipe
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel电子表格上创建新工作表*教程'
- en: The *Creating charts in Excel* recipe
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel中创建图表*教程'
- en: The *Working with the format in Excel* recipe
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel中处理格式*教程'
- en: Creating new sheets on an Excel spreadsheet
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Excel电子表格上创建新工作表
- en: In this recipe, we'll demonstrate how to create a new Excel spreadsheet from
    scratch, and add and deal with multiple sheets.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将演示如何从头开始创建一个新的Excel电子表格，并添加和处理多个工作表。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the module `openpyxl`.  We should install the module, adding it
    to our `requirements.txt` file as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`openpyxl`模块。我们应该安装该模块，并将其添加到我们的`requirements.txt`文件中，如下所示：
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We''ll store in the new file information about the movies with the most attendance.
    Data is extracted from here:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在新文件中存储有关参与人数最多的电影的信息。数据从这里提取：
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html)。'
- en: How to do it...
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import the `openpyxl` module:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`openpyxl`模块：
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a new Excel file. It creates a default sheet, called `Sheet`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Excel文件。它创建了一个名为`Sheet`的默认工作表：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add data about the number of attendees to this sheet from the source. Only
    the first three are added for simplicity:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源中向该工作表添加有关参与者人数的数据。为简单起见，只添加了前三个：
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a new sheet:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的工作表：
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the name of the director for each movie:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每部电影添加导演的名称：
- en: '[PRE30]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Save the file as `movie_sheets.xlsx`:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`movie_sheets.xlsx`：
- en: '[PRE31]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open the `movie_sheets.xlsx` file to check that it has two sheets, with the
    proper information, as shown in the following screenshot:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`movie_sheets.xlsx`文件，检查它是否有两个工作表，并且包含正确的信息，如下截图所示：
- en: '![](assets/ccd6f5d1-d03e-486c-a7ac-81df1c52b165.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ccd6f5d1-d03e-486c-a7ac-81df1c52b165.png)'
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the *How to do it…* section, after importing the module in step 1, we create
    a new spreadsheet in step 2\. This is a new spreadsheet that contains just the
    default sheet.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做…*部分，在第1步导入模块后，在第2步创建一个新的电子表格。这是一个只包含默认工作表的新电子表格。
- en: The data to be stored is defined in step 3\. Note it contains the info that
    will go on both sheets (name in both, admissions in the first sheet, and director's
    name in the second). In this step, the first sheet is filled.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要存储的数据在第3步中定义。请注意，它包含将放在两个工作表中的信息（两个工作表中都有名称，第一个工作表中有入场人数，第二个工作表中有导演的名称）。在这一步中，填充了第一个工作表。
- en: Note how the value is stored. The proper cell is defined as column `A` or `B` 
    and the proper row (rows start at 1). The `enumerate` function returns a tuple
    with the first element as the index and the second as the enumerate parameter
    (an iterator).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意值是如何存储的。正确的单元格定义为列`A`或`B`和正确的行（行从1开始）。`enumerate`函数返回一个元组，第一个元素是索引，第二个元素是枚举参数（迭代器）。
- en: After that, the new sheet is created in step 4, using the name `Directors`.
    `.create_sheet` returns the new sheet.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在第4步创建了新的工作表，使用名称`Directors`。`.create_sheet`返回新的工作表。
- en: The information in the `Directors` sheet is stored in step 5 and the file is
    saved in step 6.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5步中存储了`Directors`工作表中的信息，并在第6步保存了文件。
- en: There's more...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The name of an existing sheet can be changed through the `.title` property:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`.title`属性更改现有工作表的名称：
- en: '[PRE32]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Be careful, as it won't be possible to access the sheet with `xlsfile['Sheet']`.
    That name doesn't exist!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要小心，因为无法访问`xlsfile['Sheet']`工作表。那个名称不存在！
- en: 'The active sheet, the sheet that will be displayed when the file is opened,
    can be obtained through the `.active` property and changed with `._active_sheet_index`.
    The index starts at `0` for the first sheet:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 活动工作表，文件打开时将显示的工作表，可以通过`.active`属性获得，并且可以使用`._active_sheet_index`进行更改。索引从第一个工作表开始为`0`：
- en: '[PRE33]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The sheet can also be copied using `.copy_worksheet`. Be aware that some data,
    for example, charts, won''t be carried over. Most duplicated information will
    be cell data:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 工作表也可以使用`.copy_worksheet`进行复制。请注意，某些数据，例如图表，不会被复制。大多数重复的信息将是单元格数据：
- en: '[PRE34]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The full `openpyxl` documentation can be found here:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`openpyxl`文档可以在这里找到：
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html)。'
- en: See also
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Reading an Excel spreadsheet* recipe
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取Excel电子表格的方法
- en: The *Updating an Excel spreadsheet and adding comments* recipe
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新Excel电子表格并添加注释的方法
- en: The *Creating charts in Excel* recipe
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Excel中创建图表
- en: The *Working with format in Excel* recipe
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Excel中使用格式的方法
- en: Creating charts in Excel
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Excel中创建图表
- en: Spreadsheets include a lot of tools to deal with data, including presenting
    the data in colorful charts. Let's see how to append a chart programmatically
    to an Excel spreadsheet.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 电子表格包括许多处理数据的工具，包括以丰富多彩的图表呈现数据。让我们看看如何以编程方式将图表附加到Excel电子表格。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the module `openpyxl`.  We should install the module, adding it
    to our `requirements.txt` file as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`openpyxl`模块。我们应该安装该模块，将其添加到我们的`requirements.txt`文件中，如下所示：
- en: '[PRE35]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We''ll store in the new file information about the movies with the most attendance.
    Data is extracted from here:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在新文件中存储有关观众人数最多的电影的信息。数据从这里提取：
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html)。'
- en: How to do it...
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import the `openpyxl` module and create a new Excel file:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`openpyxl`模块并创建一个新的Excel文件：
- en: '[PRE36]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add data about the number of attendees in this sheet from the source. Only
    the first three are added for simplicity:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从源中在该工作表中添加有关观众人数的数据。为简单起见，只添加前三个：
- en: '[PRE37]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a `BarChart` object and fill it with basic information:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`BarChart`对象并填充基本信息：
- en: '[PRE38]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a reference to the `data`, and append the `data` to the chart:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建对`data`的引用，并将`data`附加到图表：
- en: '[PRE39]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add the chart to the sheet and save the file:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图表添加到工作表并保存文件：
- en: '[PRE40]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Check the resulting chart in the spreadsheet, as shown in the following screenshot:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在电子表格中检查生成的图表，如下截图所示：
- en: '![](assets/f68753d2-22dd-4b8c-8ed2-aa57da72b49c.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f68753d2-22dd-4b8c-8ed2-aa57da72b49c.png)'
- en: How it works...
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the *How to do it…* section, after preparing the data in steps 1 and 2, the
    data is ready in the range `A1:B4`. Note that `A1` and `B1` both contain a header
    that should not be used in the chart.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做...*部分，在步骤1和2中准备数据后，数据已准备在范围`A1:B4`中。请注意，`A1`和`B1`都包含不应在图表中使用的标题。
- en: In step 3, we set up the new chart and include the basic data, such as a title
    and the units of the *Y* axis.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤3中，我们设置了新图表并包括基本数据，如标题和*Y*轴的单位。
- en: The title is changed to `Millions`; although a more correct way would been `Admissions(millions)`,
    it'd be redundant with the full title of the chart.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 标题更改为`Millions`；虽然更正确的方式应该是`Admissions(millions)`，但这将与图表的完整标题重复。
- en: Step 4 creates a reference box through a `Reference` object, from row 2 column
    1 to row 4 column 2, which is the area where our data lives, excluding the header.
    The data is added to the chart with `.add_data`. `from_rows` makes each row a
    different data series. `titles_from_data` makes the first column treated as the
    name of the series.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤4通过`Reference`对象创建一个引用框，从第2行第1列到第4行第2列，这是我们的数据所在的区域，不包括标题。使用`.add_data`将数据添加到图表中。`from_rows`使每一行成为不同的数据系列。`titles_from_data`使第一列被视为系列的名称。
- en: The chart is added to cell `A6` in step 5 and saved to disk.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤5中，将图表添加到单元格`A6`并保存到磁盘中。
- en: There's more...
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a bunch of different charts that can be created, including bar charts,
    line charts, area charts (line charts that fill the area between the line and
    the axis), pie charts, or scatter charts (XY charts where one value is plotted
    against the other). Each kind of chart has an equivalent class, for example `PieChart`
    or `LineChart`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建各种不同的图表，包括柱状图、折线图、面积图（填充线和轴之间的区域的折线图）、饼图或散点图（其中一个值相对于另一个值绘制的XY图）。每种类型的图表都有一个等效的类，例如`PieChart`或`LineChart`。
- en: 'Each one, at the same time, can have different types. For example, the default
    type for `BarChart` is column, printing the bars vertically, but they can also
    be printed in vertical, selecting a different type:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，每个都可以具有不同的类型。例如，`BarChart`的默认类型是列，将柱形图垂直打印，但也可以选择不同的类型将其垂直打印：
- en: '[PRE41]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Check the `openpyxl` documentation to see all available combinations.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`openpyxl`文档以查看所有可用的组合。
- en: 'Instead of extracting the *x *axis labels from the data, they can be set explicitly
    with `set_categories`. For example, compare step 4 with the following code:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`set_categories`来明确设置数据的*x*轴标签，而不是从数据中提取。例如，将步骤4与以下代码进行比较：
- en: '[PRE42]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The range, instead of using a `Reference` object, can also be input with text
    labels describing the region:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用描述区域的文本标签来代替`Reference`对象的范围：
- en: '[PRE43]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This way of describing it may be more difficult to deal with if the range of
    data needs to be created programatically.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据范围需要以编程方式创建，这种描述方式可能更难处理。
- en: Defining charts in Excel correctly can be difficult sometimes. The way Excel
    extracts the data from a particular range can be baffling. Remember to allow time
    for trial and error, and to deal with differences. For example, in step 4 we define
    three series with one data point, while in the preceding code we define a single
    series with three data points. Most of those differences are subtle. Finally,
    the most important point is how the end chart looks. Try different chart types
    and learn the differences.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 正确地在Excel中定义图表有时可能很困难。Excel从特定范围提取数据的方式可能令人困惑。记住要留出时间进行试验和错误，并处理差异。例如，在第4步中，我们定义了三个数据点的三个系列，而在前面的代码中，我们定义了一个具有三个数据点的单个系列。这些差异大多是微妙的。最后，最重要的是最终图表的外观。尝试不同的图表类型并了解差异。
- en: 'The full `openpyxl` documentation can be found here:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`openpyxl`文档可以在这里找到：
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html)。'
- en: See also
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Reading an Excel spreadsheet* recipe
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*读取Excel电子表格*食谱'
- en: The *Updating an Excel spreadsheet and adding comments* recipe
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更新Excel电子表格并添加注释*食谱'
- en: The *Creating new sheets on an Excel spreadsheet* recipe
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel电子表格上创建新工作表*食谱'
- en: The *Working with format in Excel* recipe
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel中处理格式*食谱'
- en: Working with format in Excel
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Excel中处理格式
- en: Presenting information in spreadsheets is not just a matter of organizing it
    into cells or displaying it graphically in charts, but also involves changing
    the format to highlight the important points about it. In this recipe, we'll see
    how to manipulate the format of cells to enhance the data and present it in the
    best way.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子表格中呈现信息不仅仅是将其组织到单元格中或以图表形式显示，还涉及更改格式以突出显示有关它的重要要点。在这个食谱中，我们将看到如何操纵单元格的格式以增强数据并以最佳方式呈现它。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will use the module `openpyxl`.  We should install the module, adding it
    to our `requirements.txt` file as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`openpyxl`模块。我们应该安装该模块，并将其添加到我们的`requirements.txt`文件中，如下所示：
- en: '[PRE44]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We''ll store in the new file information about the movies with the most attendance.
    Data is extracted from here:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在新文件中存储有关出席人数最多的电影的信息。数据从这里提取：
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html)。'
- en: How to do it...
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import the `openpyxl` module and create a new Excel file:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`openpyxl`模块并创建一个新的Excel文件：
- en: '[PRE45]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add data about the number of attendees in this sheet from the source. Only
    the first four are added, for simplicity:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从来源中在此工作表中添加有关出席人数的数据。为简单起见，只添加前四个：
- en: '[PRE46]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Define the colors to use for styling the spreadsheet:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要用于样式化电子表格的颜色：
- en: '[PRE47]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Define the header in a blue background and a white font:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在蓝色背景和白色字体中定义标题：
- en: '[PRE48]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Define an alternate pattern for the columns and a border on each row after
    the header:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标题后为列定义一个替代模式和每行一个边框：
- en: '[PRE49]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Save the file as `movies_format.xlsx`:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`movies_format.xlsx`：
- en: '[PRE50]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Check the resulting file:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查生成的文件：
- en: '![](assets/ef4c4635-405a-440e-ac36-4ad3ba1fe4c4.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef4c4635-405a-440e-ac36-4ad3ba1fe4c4.png)'
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the *How to do it… *section, in step 1 we import the `openpyxl` module and
    create a new Excel file. In step 2, we add the data to the first sheet. Step 3
    is also a preparation step to define the colors to be used. The colors are defined
    in hex format, which is common in the web design world.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做...*部分，第1步中我们导入`openpyxl`模块并创建一个新的Excel文件。在第2步中，我们向第一个工作表添加数据。第3步也是一个准备步骤，用于定义要使用的颜色。颜色以十六进制格式定义，这在网页设计世界中很常见。
- en: To find the definition of colors, there are plenty of color pickers online or
    even embedded in the OS. A tool like [https://coolors.co/](https://coolors.co/) can
    be useful to define a palette to work with.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到颜色的定义，有很多在线颜色选择器，甚至嵌入在操作系统中。像[https://coolors.co/](https://coolors.co/)这样的工具可以帮助定义要使用的调色板。
- en: In step 4, we prepare the format to define the header. The header will have
    a different font (Tahoma), a bigger size (14pt), and it will be white on a blue
    background. To do this, we prepare a `Font` object with the font, size, and foreground
    color, and a `PatternFill` with the background color.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步中，我们准备格式以定义标题。标题将具有不同的字体（Tahoma）、更大的大小（14pt），并且将以蓝色背景上的白色显示。为此，我们准备了一个具有字体、大小和前景颜色的`Font`对象，以及具有背景颜色的`PatternFill`。
- en: The loop after creating `header_font` and `header_fill` applies the font and
    fill to the proper cells.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`header_font`和`header_fill`后的循环将字体和填充应用到适当的单元格。
- en: Note that iterating over a range always returns the row, then cells, even if
    only one row is involved.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，迭代范围始终返回行，然后是单元格，即使只涉及一行。
- en: In step 5, a border to the rows and an alternate background is applied. The
    border is defined with blue top and bottom and white left and right. The fill
    is created in a similar way to step 4, but in a light blue. The background is
    only applied to even rows.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5步中，为行添加边框和交替背景。边框定义为蓝色顶部和底部，白色左侧和右侧。填充的创建方式与第4步类似，但是颜色是浅蓝色。背景只应用于偶数行。
- en: Note that the top border of a cell is the bottom of the one above and vice versa.
    This means that it's possible to overwrite the border in a loop.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，单元格的顶部边框是上面一个单元格的底部，反之亦然。这意味着可能在循环中覆盖边框。
- en: The file is saved finally in step 6.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 文件最终在第6步中保存。
- en: There's more...
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To define the font, there are other options available, such as bold, italic,
    strikeout, or underline. Define the font and reassign it if you need to change
    any of its elements. And remember to check that the font is available.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义字体，还有其他可用的选项，如粗体、斜体、删除线或下划线。定义字体并重新分配它，如果需要更改任何元素。记得检查字体是否可用。
- en: There are also various ways of creating a fill. The `PatternFill` accepts several
    patterns, but the most useful one is `solid`. `GradientFill` can also be used
    to apply a two-color gradient.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 还有各种创建填充的方法。`PatternFill`接受几种模式，但最有用的是`solid`。`GradientFill`也可以用于应用双色渐变。
- en: It's best to limit yourself to solid fills using `PatternFill`. You can tweak
    the color to best represent what you want. Remember to include `style='solid'`,
    or the colour may not appear.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 最好限制自己使用`PatternFill`进行实体填充。您可以调整颜色以最好地表示您想要的内容。记得包括`style='solid'`，否则颜色可能不会出现。
- en: It's also possible to define conditional formatting, but it's better to try
    to define the conditionals in Python and then apply the proper formatting.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以定义条件格式，但最好尝试在Python中定义条件，然后应用适当的格式。
- en: 'Number formatting can be set up properly, for example:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 可以正确设置数字格式，例如：
- en: '[PRE51]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This will display the value `0.37` as `37%`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示值`0.37`为`37%`。
- en: 'The full `openpyxl` documentation can be found here:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`openpyxl`文档可以在这里找到：
- en: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html).'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://openpyxl.readthedocs.io/en/stable/index.html](https://openpyxl.readthedocs.io/en/stable/index.html)。'
- en: See also
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: The *Reading an Excel spreadsheet* recipe
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*读取Excel电子表格*配方'
- en: The *Updating an Excel spreadsheet and adding comments *recipe
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更新Excel电子表格并添加注释*配方'
- en: The* Creating new sheets on an Excel spreadsheet* recipe
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel电子表格中创建新工作表*配方'
- en: The *Creating charts in Excel *recipe
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Excel中创建图表*配方'
- en: Creating a macro in LibreOffice
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在LibreOffice中创建宏
- en: LibreOffice is a free office suite that's an alternative to MS Office and other
    office packages. It includes a text editor and a spreadsheet program called `Calc`.
    Calc understands the regular Excel formats, and it's also totally scriptable internally
    through its UNO API. The UNO interface allows programmatic access to the suite,
    and it's accessible in different languages, such as Java.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: LibreOffice是一个免费的办公套件，是MS Office和其他办公套件的替代品。它包括一个文本编辑器和一个名为`Calc`的电子表格程序。Calc可以理解常规的Excel格式，并且也可以通过其UNO
    API在内部进行完全脚本化。UNO接口允许以编程方式访问套件，并且可以用不同的语言（如Java）进行访问。
- en: One of the available language is Python, making it very easy to generate very
    complex applications in a suite format, as this enables the use of the full Python
    standard library.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种可用的语言是Python，这使得在套件格式中生成非常复杂的应用程序非常容易，因为这样可以使用完整的Python标准库。
- en: Using the full Python standard library give access to elements such as cryptography;
    opening external files, including ZIP files; or connecting to remote databases.
    Also, take advantage of the Python syntax and avoid dealing with LibreOffice BASIC.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 使用完整的Python标准库可以访问诸如加密、打开外部文件（包括ZIP文件）或连接到远程数据库等元素。此外，利用Python语法，避免使用LibreOffice
    BASIC。
- en: We'll see in this recipe how to add an external Python file as a macro that
    will change the contents of a spreadsheet.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将看到如何将外部Python文件作为宏添加到电子表格中，从而改变其内容。
- en: Getting ready
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: LibreOffice needs to be installed. It is available at [https://www.libreoffice.org/](https://www.libreoffice.org/).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 需要安装LibreOffice。它可以在[https://www.libreoffice.org/](https://www.libreoffice.org/)上找到。
- en: 'Once downloaded and installed, it needs to be configured to allow the execution
    of macros:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装后，需要配置以允许执行宏：
- en: 'Go to Settings | Security to find the Macro Security details:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到设置|安全以查找宏安全详细信息：
- en: '![](assets/bbdc16ad-dbf6-4455-8129-73b9d7d77d1d.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bbdc16ad-dbf6-4455-8129-73b9d7d77d1d.png)'
- en: 'Open Macro Security and select Medium to allow execution of our macros. This
    will display a warning before allowing us to run a macro:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开宏安全并选择中等以允许执行我们的宏。这将在允许运行宏之前显示警告：
- en: '![](assets/99fc81d8-fb85-40bf-94ab-62dc031a733f.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/99fc81d8-fb85-40bf-94ab-62dc031a733f.png)'
- en: 'To insert the macro into the file, we''ll use a script called `include_macro.py`,
    which is available at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/include_macro.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/include_macro.py).
    The script with the macro is also available as `libreoffice_script.py` here:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 要将宏插入文件中，我们将使用一个名为`include_macro.py`的脚本，该脚本可在[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/include_macro.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/include_macro.py)上找到。带有宏的脚本也可以在此处作为`libreoffice_script.py`找到：
- en: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/libreoffice_script.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/libreoffice_script.py).'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/libreoffice_script.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/libreoffice_script.py)。'
- en: 'The file to put the script into, called `movies.ods`, is also available here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.ods](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.ods).
    It contains, in the `.ods` format (LibreOffice format), a table with the 10 movies
    with highest admissions. Data is extracted from here:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 要将脚本放入的文件名为`movies.ods`的文件也可以在此处找到：[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.ods](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter06/movies.ods)。它以`.ods`格式（LibreOffice格式）包含了10部入场人数最高的电影的表格。数据是从这里提取的：
- en: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html).'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.mrob.com/pub/film-video/topadj.html](http://www.mrob.com/pub/film-video/topadj.html)。'
- en: How to do it...
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Use the `include_macro.py` script to attach the `libreoffice_script.py` to
    the file `movies.ods` macrofile:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`include_macro.py`脚本将`libreoffice_script.py`附加到文件`movies.ods`的宏文件中：
- en: '[PRE52]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Open the resulting file, `macro_file/movies.ods`, in LibreOffice. Notice that
    it shows a warning to enable the macros (click on Enable). Go to Tools | Macros
    | Run Macro:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在LibreOffice中打开生成的文件`macro_file/movies.ods`。请注意，它会显示一个警告以启用宏（单击启用）。转到工具|宏|运行宏：
- en: '![](assets/a6d8b67c-0e48-4fff-bc98-1db332741dfa.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a6d8b67c-0e48-4fff-bc98-1db332741dfa.png)'
- en: 'Select the `ObtainAggregated` under `movies.ods` | `libreoffice_script` macro
    and click on Run. It calculates the aggregated admissions and stores them in cell
    `B12`. It adds a `Total` label in `A15`:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`movies.ods` | `libreoffice_script`宏下选择`ObtainAggregated`并单击运行。它计算聚合入场人数并将其存储在单元格`B12`中。它在`A15`中添加了一个`Total`标签：
- en: '![](assets/02d9a18b-278d-47dd-90b7-8c855e61077f.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02d9a18b-278d-47dd-90b7-8c855e61077f.png)'
- en: 'Repeat steps 2 and 3 to run it again. Now it runs all the aggregations, but
    adds `B12` and gets the result in `B13`:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤2和3以再次运行。现在它运行所有的聚合，但是将`B12`相加，并在`B13`中得到结果：
- en: '![](assets/b861820b-7343-4563-8695-a6d9dc85a16d.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b861820b-7343-4563-8695-a6d9dc85a16d.png)'
- en: How it works...
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The main work in step 1 is done in the `include_macro.py` script. It copies
    the file into the `macro_file` subdirectory to avoid modifying the input.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤1中的主要工作在`include_macro.py`脚本中完成。它将文件复制到`macro_file`子目录中，以避免修改输入。
- en: Internally, an`.ods` file is a ZIP file with a certain structure. The script
    takes advantage of the ZIP file Python module to add the script in the proper
    subdirectory internally. It also modifies the `manifest.xml` file to allow LibreOffice
    to know there's a script inside the file.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，`.ods`文件是一个具有特定结构的ZIP文件。脚本利用ZIP文件Python模块，将脚本添加到内部的适当子目录中。它还修改`manifest.xml`文件，以便LibreOffice知道文件中有一个脚本。
- en: 'The macro that is executed in step 3 is defined in `libreoffice_script.py` and
    contains a single function:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤3中执行的宏在`libreoffice_script.py`中定义，并包含一个函数：
- en: '[PRE53]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The variable `XSCRIPTCONTEXT` is created automatically and allowed to get the
    current component, and from there, the first `Sheet`. After that, the sheet is
    iterated to find the `Admissions` column through `.getCellByPosition ` and obtain
    the string value with the `.String` attribute. With the same method, it aggregates
    all the values in the column, extracting them through `.getValue` to get their
    numerical values.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`XSCRIPTCONTEXT`会自动创建并允许获取当前组件，然后获取第一个`Sheet`。之后，通过`.getCellByPosition`迭代表找到`Admissions`列，并通过`.String`属性获取字符串值。使用相同的方法，聚合列中的所有值，通过`.getValue`提取它们的数值。
- en: As the loop iterates through the column until finding an empty cell, the second
    time it's executed it will aggregate the value in `B12`, which is the aggregated
    value in the previous execution. This is done on purpose to show that macros can
    be executed multiple times, with different results.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当循环遍历列直到找到空单元格时，第二次执行时，它将聚合`B12`中的值，这是上一次执行中的聚合值。这是故意为了显示宏可以多次执行，产生不同的结果。
- en: Cells can also be referenced by their string position through `.getCellRangeByName`,
    to store `Total` in cell `A15`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过`.getCellRangeByName`按其字符串位置引用单元格，将`Total`存储在单元格`A15`中。
- en: There's more...
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Python interpreter is embedded into LibreOffice, meaning that the specific
    version can change if LibreOffice changes. In the latest version of LibreOffice
    at the time of writing this book (6.0.5), the version included was Python 3.5.1.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: Python解释器嵌入到LibreOffice中，这意味着如果LibreOffice发生变化，特定版本也会发生变化。在撰写本书时的最新版本的LibreOffice（6.0.5）中，包含的版本是Python
    3.5.1。
- en: 'The UNO interface is very complete and allows you to access a lot of advanced
    elements. Unfortunately, the documentation is not great, and achieving it can
    be complicated and time consuming. The documentation is defined in Java or C++,
    and there are examples in LibreOffice BASIC or other languages, but few for Python.
    The full documentation can be found at: [https://api.libreoffice.org/](https://api.libreoffice.org/),
    and the reference is here:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: UNO接口非常完整，可以访问许多高级元素。不幸的是，文档不是很好，获取起来可能会很复杂和耗时。文档是用Java或C++定义的，LibreOffice BASIC或其他语言中有示例，但Python的示例很少。完整的文档可以在这里找到：[https://api.libreoffice.org/](https://api.libreoffice.org/)，参考在这里：
- en: '[https://api.libreoffice.org/docs/idl/ref/index.html](https://api.libreoffice.org/docs/idl/ref/index.html).'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://api.libreoffice.org/docs/idl/ref/index.html](https://api.libreoffice.org/docs/idl/ref/index.html)。'
- en: For example, it is possible to create complex charts or even interactive dialogs
    that ask for and process responses from the user. There's a lot of information
    in forums and old answers. The code in BASIC is also adaptable to Python most
    of the time.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以创建复杂的图表，甚至是要求用户提供并处理响应的交互式对话框。在论坛和旧答案中有很多信息。基本代码大多数时候也可以适应Python。
- en: LibreOffice is a fork of a previous project called OpenOffice. UNO was already
    available, meaning that some references will be found when searching the internet
    that refer to OpenOffice.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: LibreOffice是以前的项目OpenOffice的一个分支。UNO已经可用，这意味着在搜索互联网时会找到一些涉及OpenOffice的引用。
- en: Remember that LibreOffice is capable of reading and writing Excel files. Some
    features may not be 100% compatible; for example, there may be formatting issues.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，LibreOffice能够读取和写入Excel文件。一些功能可能不是100%兼容；例如，可能会出现格式问题。
- en: For the same reason, it is totally possible to generate a file in Excel format
    with the tools described in other recipes of this chapter and open it with LibreOffice.
    That can be a good approach as the documentation is better for `openpyxl`.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 出于同样的原因，完全可以使用本章其他食谱中描述的工具生成Excel格式的文件，并在LibreOffice中打开。这可能是一个不错的方法，因为`openpyxl`的文档更好。
- en: Debugging can also be tricky on occasion. Remember to ensure that a file is
    fully closed before reopening it with new code.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 调试有时也可能会很棘手。记住确保在用新代码重新打开文件之前，文件已完全关闭。
- en: UNO is also capable of working with other parts of the LibreOffice suite, such
    as for creating documents.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: UNO还能够与LibreOffice套件的其他部分一起工作，比如创建文档。
- en: See also
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Writing a CSV spreadsheet* recipe
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写CSV电子表格*食谱'
- en: The *Updating an Excel spreadsheet and adding comments and formulas* recipe
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*更新Excel电子表格并添加注释和公式*食谱'
