- en: Exchange Rates and the Currency Conversion Tool
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 汇率和货币转换工具
- en: In the previous chapter, we built a really cool application to count votes on
    Twitter and learned how to authenticate and consume the Twitter API using Python.
    We also had a good introduction to how to use Reactive Extensions for Python.
    In this chapter, we are going to create a terminal tool that will fetch exchange
    rates for the current day from `fixer.io` and use this information to convert
    the value between different currencies.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了一个非常酷的应用程序，用于在Twitter上计算投票，并学习了如何使用Python进行身份验证和消费Twitter API。我们还对如何在Python中使用响应式扩展有了很好的介绍。在本章中，我们将创建一个终端工具，该工具将从`fixer.io`获取当天的汇率，并使用这些信息来在不同货币之间进行价值转换。
- en: '`Fixer.io` is a very nice project created by [https://github.com/hakanensari](https://github.com/hakanensari);
    on a daily basis, it fetches foreign exchange rate data from the European Central
    Bank. The API that he created is simple to use and works pretty well.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`Fixer.io`是由[https://github.com/hakanensari](https://github.com/hakanensari)创建的一个非常好的项目；它每天从欧洲央行获取外汇汇率数据。他创建的API使用起来简单，并且运行得很好。'
- en: Our project starts out by creating a framework around the API; when that is
    in place, we are going to create a terminal application where we can perform currency
    conversion. All the data that we fetch from the `fixer.io` is going to be stored
    in a MongoDB database, so we can perform conversions without doing requests to
    `fixer.io` all the time. This will increase the performance of our application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目首先通过创建围绕API的框架来开始；当框架就位后，我们将创建一个终端应用程序，可以在其中执行货币转换。我们从`fixer.io`获取的所有数据都将存储在MongoDB数据库中，因此我们可以在不一直请求`fixer.io`的情况下执行转换。这将提高我们应用程序的性能。
- en: 'In this chapter, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: How to use `pipenv` to install and manage our project's dependencies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`pipenv`来安装和管理项目的依赖项
- en: Working with MongoDB using the PyMongo module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PyMongo模块与MongoDB一起工作
- en: Consuming REST APIs using Requests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Requests消费REST API
- en: With that said, let's get started!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，让我们开始吧！
- en: Setting up the environment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: As usual, we will start by setting up our environment; the first thing we need
    to do is set up a virtual environment that will allow us to easily install our
    project dependencies without interfering with Python's global installation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们将从设置环境开始；我们需要做的第一件事是设置一个虚拟环境，这将允许我们轻松安装项目依赖项，而不会干扰Python的全局安装。
- en: In the previous chapters, we used `virtualenv` to create our virtual environment;
    however, Kenneth Reitz (the creator of the popular package *requests*) created `pipenv`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们使用`virtualenv`来创建我们的虚拟环境；然而，Kenneth Reitz（流行包*requests*的创建者）创建了`pipenv`。
- en: '`pipenv` is for Python what NPM is for Node.js. However, `pipenv` is used for
    much more than package management, and it also creates and manages a virtual environment
    for you. In my opinion, there are a lot of advantages of the old development workflows,
    but for me, there are two things that stand out: the first is that you no longer
    need two different tools (`pip`, `virtualenv`), and the second is that it is much
    simpler to have all these great features in just one place.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`pipenv`对于Python来说就像NPM对于Node.js一样。但是，`pipenv`用于远不止包管理，它还为您创建和管理虚拟环境。在我看来，旧的开发工作流有很多优势，但对我来说，有两个方面很突出：第一个是您不再需要两种不同的工具（`pip`，`virtualenv`），第二个是在一个地方拥有所有这些强大功能变得更加简单。'
- en: Another thing that I really like about `pipenv` is the use of `Pipfile`. Sometimes,
    it is really hard to work with requirement files. Our production environment and
    development environment have the same dependencies, and you end up having to maintain
    two different files; plus, every time you need to remove one dependency, you will
    need to edit the requirement file manually.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢`pipenv`的另一点是使用`Pipfile`。有时，使用要求文件真的很困难。我们的生产环境和开发环境具有相同的依赖关系，您最终需要维护两个不同的文件；而且，每次需要删除一个依赖项时，您都需要手动编辑要求文件。
- en: With `pipenv`, you don't need to worry about having multiple requirement files.
    Development and production dependencies are placed in the same file, and `pipenv` also
    takes care of updating the `Pipfile`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pipenv`，您无需担心有多个要求文件。开发和生产依赖项都放在同一个文件中，`pipenv`还负责更新`Pipfile`。
- en: 'Installing `pipenv` is quite simple, just run:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`pipenv`非常简单，只需运行：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After installing it you can run:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您可以运行：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see an output like the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](assets/b92b58f8-cc44-4f22-9c04-0e761751af85.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b92b58f8-cc44-4f22-9c04-0e761751af85.png)'
- en: We are not going to go through all the different options because that is beyond
    the scope of this book, but while we are creating our environment, you will acquire
    a good knowledge of the basics.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细介绍所有不同的选项，因为这超出了本书的范围，但在创建环境时，您将掌握基础知识。
- en: 'The first step is to create a directory for our project. Let''s create a directory
    called `currency_converter`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是为我们的项目创建一个目录。让我们创建一个名为`currency_converter`的目录：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that you are inside the `currency_converter` directory, we are going to
    use `pipenv` to create our virtual environment. Run the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您在`currency_converter`目录中，我们将使用`pipenv`来创建我们的虚拟环境。运行以下命令：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will create a virtual environment for the project living in the current
    directory and will use Python 3.6\. The `--python` option also accepts a path
    to where you installed Python. In my case, I always download the Python source
    code, build it, and install it in a different location, so this is very useful
    for me.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为当前目录中的项目创建一个虚拟环境，并使用Python 3.6。`--python`选项还接受您安装Python的路径。在我的情况下，我总是下载Python源代码，构建它，并将其安装在不同的位置，因此这对我非常有用。
- en: 'You could also use the `--three` option, which would use the default Python3
    installation on your system. After running the command, you should see the following
    output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`--three`选项，它将使用系统上默认的Python3安装。运行命令后，您应该看到以下输出：
- en: '![](assets/8784ad3b-7ce3-4d9e-bc95-e01455d19615.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8784ad3b-7ce3-4d9e-bc95-e01455d19615.png)'
- en: 'If you have a look at the contents of the `Pipfile`, you should have something
    similar to the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`Pipfile`的内容，你应该会看到类似以下的内容：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This file starts defining where to get the packages from, and in this case,
    it will download packages from `pypi`. Then, we have a place for the development
    dependencies of our project, and in `packages`, the production dependencies. Lastly,
    it says that this project requires Python version 3.6.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件开始定义从哪里获取包，而在这种情况下，它将从`pypi`下载包。然后，我们有一个地方用于项目的开发依赖项，在`packages`中是生产依赖项。最后，它说这个项目需要Python版本3.6。
- en: 'Great! Now you can use some commands. For example, if you want to know which
    virtual environment the project uses, you can run `pipenv --venv`; you will see
    the following output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以使用一些命令。例如，如果你想知道项目使用哪个虚拟环境，你可以运行`pipenv --venv`；你将看到以下输出：
- en: '![](assets/f729d03d-b885-4866-a3f1-f69689ba4168.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f729d03d-b885-4866-a3f1-f69689ba4168.png)'
- en: 'If you want to activate the virtual environment for the project, you can use
    the `shell` command, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为项目激活虚拟环境，你可以使用`shell`命令，如下所示：
- en: '![](assets/17b5e4d5-1962-4054-afd5-50748321d710.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/17b5e4d5-1962-4054-afd5-50748321d710.png)'
- en: Perfect! With the virtual environment in place, we can start adding our project's
    dependencies.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！有了虚拟环境，我们可以开始添加项目的依赖项。
- en: The first dependency that we are going to add is `requests`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要添加的第一个依赖是`requests`。
- en: 'Run the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will get the following output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '![](assets/fef2a704-9e32-4cd2-b6e1-21d2a29d20a7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fef2a704-9e32-4cd2-b6e1-21d2a29d20a7.png)'
- en: As you can see, `pipenv` installs `requests` as well as all its dependencies.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`pipenv`安装了`requests`以及它的所有依赖项。
- en: 'The author of `pipenv` is the same developer who created the popular requests
    library. In the installation output, you can see an easter egg, saying `PS: You
    have excellent taste!`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`pipenv`的作者是创建流行的requests库的同一个开发者。在安装输出中，你可以看到一个彩蛋，上面写着`PS: You have excellent
    taste!`。'
- en: The other dependency that we need to add to our project is `pymongo` so that
    we can connect and manipulate data in a MongoDB database.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加到我们的项目中的另一个依赖是`pymongo`，这样我们就可以连接和操作MongoDB数据库中的数据。
- en: 'Run the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will get the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '![](assets/cd80273e-1faa-4667-835c-54d65e0bfdd6.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cd80273e-1faa-4667-835c-54d65e0bfdd6.png)'
- en: 'Let''s have a look at the `Pipfile` and see how it looks now:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`Pipfile`，看看它现在是什么样子：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, under the `packages` folder, we have now our two dependencies.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在`packages`文件夹下，我们现在有了两个依赖项。
- en: Not much has changed in comparison with installing packages with `pip`. The
    exception is that now installing and removing dependencies will automatically
    update the `Pipfile`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用`pip`安装包相比，没有太多改变。唯一的例外是现在安装和移除依赖项将自动更新`Pipfile`。
- en: 'Another command that is very useful is the `graph` command. Run the following
    command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的命令是`graph`命令。运行以下命令：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will get the following output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '![](assets/4b513feb-d291-4c36-abce-6d7272159f16.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b513feb-d291-4c36-abce-6d7272159f16.png)'
- en: As you can see, the `graph` command is very helpful when you want to know what
    the dependencies of the packages you have installed are. In our project, we can
    see that `pymongo` doesn't have any extra dependencies. However, `requests` has
    four dependencies: `certifi`, `chardet`, `idna`, and `urllib3`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`graph`命令在你想知道你安装的包的依赖关系时非常有帮助。在我们的项目中，我们可以看到`pymongo`没有任何额外的依赖项。然而，`requests`有四个依赖项：`certifi`、`chardet`、`idna`和`urllib3`。
- en: 'Now that you have had a great introduction to `pipenv`, let''s have a look
    at what this project''s structure will look like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对`pipenv`有了很好的介绍，让我们来看看这个项目的结构会是什么样子：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The top `currency_converter` is the application's `root` directory. Then, one
    level down we have another `currency_converter` and that is the `currency_converter` module
    that we are going to create.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`currency_converter`的顶层是应用程序的`root`目录。然后，我们再往下一级，有另一个`currency_converter`，那就是我们将要创建的`currency_converter`模块。'
- en: Inside the `currency_converter` module directory, we have a core which contains
    the application core functionality, for example, a command line argument parser,
    helper functions to handle data, and so on.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`currency_converter`模块目录中，我们有一个核心，其中包含应用程序的核心功能，例如命令行参数解析器，处理数据的辅助函数等。
- en: We have also configured, as with the other projects, which project will contain
    functions to read YAML configuration files; finally, we have HTTP, which have
    all the functions that will perform HTTP requests to the `fixer.io` REST API.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还配置了，与其他项目一样，哪个项目将包含读取YAML配置文件的函数；最后，我们有HTTP，其中包含所有将执行HTTP请求到`fixer.io` REST
    API的函数。
- en: Now that we have learned how to use `pipenv` and how it will help us to be more
    productive, we can install the initial dependencies to our project. We created
    the project's directory structure, too. The only missing piece of the puzzle is
    installing MongoDB.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何使用`pipenv`以及它如何帮助我们提高生产力，我们可以安装项目的初始依赖项。我们也创建了项目的目录结构。拼图的唯一缺失部分就是安装MongoDB。
- en: 'I''m using Linux Debian 9 and I can easily just install this using Debian''s
    package manager tool:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用Linux Debian 9，我可以很容易地使用Debian的软件包管理工具来安装它：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will find MongoDB in the package repositories of the most popular Linux
    distributions, and if you are using Windows or macOS, you can see the instructions
    in the following  links:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在大多数流行的Linux发行版的软件包存储库中找到MongoDB，如果你使用Windows或macOS，你可以在以下链接中看到说明：
- en: 'For macOS: [https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS：[https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/)
- en: For Windows: [https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows：[https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/)
- en: After installation, you can verify that everything is working properly using
    the MongoDB client. Open a terminal and just run the `mongo` command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以使用MongoDB客户端验证一切是否正常工作。打开终端，然后运行`mongo`命令。
- en: 'And you should get into the MongoDB shell:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该进入MongoDB shell：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To exit the MongoDB shell, just type *CTRL *+ *D.*
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出MongoDB shell，只需键入*CTRL *+ *D.*
- en: Perfect! Now we are ready to start coding!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们准备开始编码！
- en: Creating the API wrapper
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建API包装器
- en: In this section, we are going to create a set of functions that will wrap the
    `fixer.io` API and will help us use it in a simple way within our project.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一组函数，这些函数将包装`fixer.io` API，并帮助我们在项目中以简单的方式使用它。
- en: 'Let''s go ahead and create a new file called `request.py` in the `currency_converter/currency_converter/core` directory.
    First, we are going to include some `import` statements:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在`currency_converter/currency_converter/core`目录中创建一个名为`request.py`的新文件。首先，我们将包括一些`import`语句：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We obviously need `requests` so that we can perform requests to the `fixer.io`
    endpoints, and we are also importing `HTTPStatus` from the HTTP module so we can
    return the correct HTTP status code; also be a bit more verbose in our code. It's
    much nicer and easier to read the `HTTPStatus.OK` return than only `200.`
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们需要`requests`，以便我们可以向`fixer.io`端点发出请求，并且我们还从HTTP模块导入`HTTPStatus`，以便我们可以返回正确的HTTP状态码；在我们的代码中也更加详细。在代码中，`HTTPStatus.OK`的返回要比只有`200`更加清晰和易读。
- en: Lastly, we import the `json` package so that we can parse the JSON content that
    we get from `fixer.io` into Python objects.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们导入`json`包，以便我们可以将从`fixer.io`获取的JSON内容解析为Python对象。
- en: 'Next, we are going to add our first function. This function will return the
    current exchange rates given a specific currency:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加我们的第一个函数。这个函数将返回特定货币的当前汇率：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This function gets a currency as an argument and starts off by sending a request
    to the `fixer.io` API to get the latest exchange rates using the currency as a
    base, which was given as an argument.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数以货币作为参数，并通过向`fixer.io` API发送请求来获取使用该货币作为基础的最新汇率信息，这是作为参数给出的。
- en: If the response was `HTTPStatus.OK` (`200`), we use the load function from the
    JSON module to parse the JSON response; otherwise, we raise exceptions depending
    on the error that occurs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应是`HTTPStatus.OK`（`200`），我们使用JSON模块的load函数来解析JSON响应；否则，我们根据发生的错误引发异常。
- en: 'We can also create a file called `__init__.py` in the `currency_converter/currency_converter/core` directory
    and import the function that we just created:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在`currency_converter/currency_converter/core`目录中创建一个名为`__init__.py`的文件，并导入我们刚刚创建的函数：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Great! Let''s try it out in the Python REPL:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们在Python REPL中试一下：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Perfect! It works just like we expected.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！它的工作方式正如我们所期望的那样。
- en: Next, we are going to start building the database helper class.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始构建数据库辅助类。
- en: Adding the database helper class
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据库辅助类
- en: Now that we have implemented the function that will fetch the exchange rate
    information from `fixer.io`, we need to add the class that will retrieve and save
    the information we fetched into our MongoDB.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了从`fixer.io`获取汇率信息的函数，我们需要添加一个类，该类将检索并保存我们获取的信息到我们的MongoDB中。
- en: 'So, let''s go ahead and create a file called `db.py` inside the `currency_converter/currency_converter/core` directory;
    let''s add some `import` statements:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们继续在`currency_converter/currency_converter/core`目录中创建一个名为`db.py`的文件；让我们添加一些`import`语句：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The only thing we need to `import` is the `MongoClient`. The `MongoClient` will
    be responsible for opening a connection with our database instance.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们唯一需要`import`的是`MongoClient`。`MongoClient`将负责与我们的数据库实例建立连接。
- en: 'Now, we need to add the `DbClient` class. The idea of this class is to serve
    as a wrapper around the `pymongo` package functions and provide a simpler set
    of functions, abstracting some of the repetitive boilerplate code when working
    with `pymongo`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加`DbClient`类。这个类的想法是作为`pymongo`包函数的包装器，并提供一组更简单的函数，抽象出一些在使用`pymongo`时重复的样板代码。
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: a class called `DbClient` and its constructor gets two arguments, `db_name`
    and `default_collection`. Note that, in MongoDB, we don't need to create the database
    and the collection before using it. When we try to insert data for the first time,
    the database and the collection will be created for us.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`DbClient`的类，它的构造函数有两个参数，`db_name`和`default_collection`。请注意，在MongoDB中，我们不需要在使用之前创建数据库和集合。当我们第一次尝试插入数据时，数据库和集合将被自动创建。
- en: This might seem strange if you are used to working with SQL databases such as
    MySQL or MSSQL where you have to connect to the server instance, create a database,
    and create all the tables before using it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您习惯于使用MySQL或MSSQL等SQL数据库，这可能看起来有些奇怪，在那里您必须连接到服务器实例，创建数据库，并在使用之前创建所有表。
- en: We aren't concerned about security in this example since MongoDB is beyond the
    scope of this book and we are only focusing on Python.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们不关心安全性，因为MongoDB超出了本书的范围，我们只关注Python。
- en: 'Then, we are going to add two methods, `connect` and `disconnect`, to the database:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将向数据库添加两个方法，`connect`和`disconnect`：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `connect` method will use the `MongoClient` connecting to the database instance
    at our localhost, using the port `27017` which is the default port that MongoDB
    runs right after the installation. These two values might be different for your
    environment. The `disconnect` method simply calls the method close to the client
    and, as the name says, it closes the connection.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`connect`方法将使用`MongoClient`连接到我们的本地主机上的数据库实例，使用端口`27017`，这是MongoDB安装后默认运行的端口。这两个值可能在您的环境中有所不同。`disconnect`方法只是调用客户端的close方法，并且，顾名思义，它关闭连接。'
- en: 'Now, we are going to add two special functions, `__enter__` and `__exit__`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加两个特殊函数，`__enter__`和`__exit__`：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We want the `DbClient` class to be used within its own context, and this is
    achieved by using a context manager and with the `with` statement. The basic implementation
    of a context manager is done by implementing these two functions, `__enter__`
    and `__exit__`. `__enter__` will be called when we enter the context that the
    `DbClient` is running. In this case, we are going to call the `connect` method
    to connect to our MongoDB instance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望`DbClient`类在其自己的上下文中使用，并且这是通过使用上下文管理器和`with`语句来实现的。上下文管理器的基本实现是通过实现这两个函数`__enter__`和`__exit__`。当我们进入`DbClient`正在运行的上下文时，将调用`__enter__`。在这种情况下，我们将调用`connect`方法来连接到我们的MongoDB实例。
- en: The `__exit__` method, on the other hand, is called when the current context
    is terminated. The context can be terminated by normal causes or by some exception
    that has been thrown. In our case, we disconnect from the database and, if `exec_type`
    is not equal to `None`, which means that if some exception has occurred, we raise
    that exception. This is necessary, otherwise, exceptions occurring within the
    context of the `DbClient` would be suppressed.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`__exit__`方法在当前上下文终止时被调用。上下文可以由正常原因或抛出的异常终止。在我们的情况下，我们从数据库断开连接，如果`exec_type`不等于`None`，这意味着如果发生了异常，我们会引发该异常。这是必要的，否则在`DbClient`上下文中发生的异常将被抑制。
- en: 'Now, we are going to add a private method called `_get_collection`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个名为`_get_collection`的私有方法：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This method will simply check if we have defined a `default_collection`. If
    not, it will throw an exception; otherwise, we return the collection.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将简单地检查我们是否定义了`default_collection`。如果没有，它将抛出一个异常；否则，我们返回集合。
- en: 'We need just two methods to finish this class, one to find items in the database
    and another to insert or update data:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要两个方法来完成这个类，一个是在数据库中查找项目，另一个是插入或更新数据：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `find_one` method gets one optional argument called filter, which is a dictionary
    with criteria that will be used to perform the search. If omitted, it will just
    return the first item in the collection.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`find_one`方法有一个可选参数叫做filter，它是一个带有条件的字典，将用于执行搜索。如果省略，它将只返回集合中的第一项。'
- en: There are a few more things going on in the update method. It gets three arguments: `filter`,
    `document`, and the optional argument, `upsert.`
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在update方法中还有一些其他事情。它有三个参数：`filter`，`document`，以及可选参数`upsert`。
- en: The `filter` argument is exactly the same as the `find_one` method; it is a
    criterion that will be used to search the collection's item that we want to update.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`参数与`find_one`方法完全相同；它是一个用于搜索我们想要更新的集合项的条件。'
- en: The `document` argument is a dictionary with the fields that we want to update
    in the collection's item or insert.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`document`参数是一个包含我们想要在集合项中更新或插入的字段的字典。'
- en: Lastly, the optional argument `upsert`, when set to `True`, means that if the
    item that we are trying to update doesn't exist in the database's collection,
    then we are going to perform an insert operation and add the item to the collection.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可选参数`upsert`，当设置为`True`时，意味着如果我们要更新的项目在数据库的集合中不存在，那么我们将执行插入操作并将项目添加到集合中。
- en: The method starts off by getting the default collection and then uses the collection's `find_on_and_update` method,
    passing the `filter` to the dictionary with the fields that we want to update
    and also the `upsert` option.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法首先获取默认集合，然后使用集合的`find_on_and_update`方法，将`filter`传递给包含我们要更新的字段的字典，还有`upsert`选项。
- en: 'We also need to update the `__init__.py` file in the `currency_converter/currency_converter/core`
    directory with the following contents:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要使用以下内容更新`currency_converter/currency_converter/core`目录中的`__init__.py`文件：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Great! Now, we can start creating the command line parser.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在，我们可以开始创建命令行解析器了。
- en: Creating the command line parser
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建命令行解析器
- en: 'I have to confess one thing: I''m a command-line type of guy. Yes, I know it
    is considered by some people as outdated, but I love doing work on the terminal.
    I am definitely more productive and if you are using Linux or macOS, you can combine
    tools to get the results that you want. That''s the reason that we are going to
    add a command line parser for this project.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须坦白一件事：我是一个命令行类型的人。是的，我知道有些人认为它已经过时了，但我喜欢在终端上工作。我绝对更有生产力，如果你使用Linux或macOS，你可以结合工具来获得你想要的结果。这就是我们要为这个项目添加命令行解析器的原因。
- en: There are some things we need to implement in order to start creating the command
    line parser. One functionality that we are going to add is the possibility of
    setting a default currency, which will avoid user of our application always having
    to specify the base currency to perform currency conversions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现一些东西才能开始创建命令行解析器。我们要添加的一个功能是设置默认货币的可能性，这将避免我们的应用用户总是需要指定基础货币来执行货币转换。
- en: To do that, we are going to create an action, We have seen how actions work
    in [Chapter 1](760a1425-6ef8-4e6b-ba1e-0f936d046aee.xhtml), *Implementing the
    Weather Application*, but just to refresh our minds, actions are classes that
    can be bound to command line arguments to execute a certain task. These actions
    are called automatically when the argument is used in the command line.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将创建一个动作，我们已经在[第1章](760a1425-6ef8-4e6b-ba1e-0f936d046aee.xhtml)中看到了动作是如何工作的，*实现天气应用程序*，但是为了提醒我们，动作是可以绑定到命令行参数以执行某个任务的类。当命令行中使用参数时，这些动作会自动调用。
- en: 'Before going into the development of custom actions, we need to create a function
    that will fetch the configuration of our application from the database. First,
    we are going to create a custom exception that will be used to raise errors when
    we cannot retrieve the configuration from the database. Create a file named `config_error.py`
    in the `currency_converter/currency_converter/config` directory with the following
    contents:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行自定义操作的开发之前，我们需要创建一个函数，从数据库中获取我们应用程序的配置。首先，我们将创建一个自定义异常，用于在无法从数据库中检索配置时引发错误。在`currency_converter/currency_converter/config`目录中创建一个名为`config_error.py`的文件，内容如下：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Perfect! This is all we need to create our custom exception. We could have used
    a built-in exception, but that would have been too specific to our application.
    It is always a good practice to create custom exceptions for your application;
    it will make your life and the life of your colleagues much easier when troubleshooting
    bugs.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！这就是我们创建自定义异常所需要的全部内容。我们本可以使用内置异常，但那对我们的应用程序来说太具体了。为您的应用程序创建自定义异常总是一个很好的做法；当排除错误时，它将使您和您的同事的生活变得更加轻松。
- en: 'Create a file named `config.py` in the `currency_converter/currency_converter/config/` directory
    with the following contents:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`currency_converter/currency_converter/config/`目录中创建一个名为`config.py`的文件，内容如下：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we start off by adding from the `import` statements. We start importing
    the `ConfigError` custom exception that we just created and we also import the
    `DbClient` class so we can access the database to retrieve the configuration for
    our application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先从`import`语句开始。我们开始导入我们刚刚创建的`ConfigError`自定义异常，还导入`DbClient`类，以便我们可以访问数据库来检索应用程序的配置。
- en: Then, we define the `get_config` function. This function will not take any argument,
    and the function starts by defining a variable config with a `None` value. Then,
    we use the `DbClient` to connect to the `exchange_rate` database and use the collection
    named `config`. inside the `DbClient` context, we use the `find_one` method without
    any argument, which means that the first item in that config collection will be
    returned.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义了`get_config`函数。这个函数不会接受任何参数，函数首先定义了一个值为`None`的变量config。然后，我们使用`DbClient`连接到`exchange_rate`数据库，并使用名为`config`的集合。在`DbClient`上下文中，我们使用`find_one`方法，没有任何参数，这意味着将返回该配置集合中的第一项。
- en: If the `config` variable is still `None`, we raise an exception saying to the
    user that there's no configuration in the database yet and that it is necessary
    to run the application again with the `--setbasecurrency` argument. We are going
    to implement the command line arguments in a short while. If we have the value
    of the config, we just return it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`config`变量仍然是`None`，我们会引发一个异常，告诉用户数据库中还没有配置，需要再次运行应用程序并使用`--setbasecurrency`参数。我们将很快实现命令行参数。如果我们有配置的值，我们只需返回它。
- en: 'We also need to create a `__init__.py` file in the `currency_converter/currency_converter/config`
    directory with the following contents:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`currency_converter/currency_converter/config`目录中创建一个`__init__.py`文件，内容如下：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, let''s start adding our first action, which will set the default currency.
    Add a file called `actions.py` in the `currency_converter/currency_converter/core`
    directory:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始添加我们的第一个操作，它将设置默认货币。在`currency_converter/currency_converter/core`目录中添加一个名为`actions.py`的文件：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: First, we import `sys` so we can terminate the program's execution if something
    goes wrong. Then, we import the `Action` from the `argparse` module. We need to
    create a class inheriting from `Action` when creating custom actions. We also
    import `datetime` because we are going to add functionality to check if the exchange
    rates that we are going to use are outdated.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入`sys`，这样我们就可以在程序出现问题时终止执行。然后，我们从`argparse`模块中导入`Action`。在创建自定义操作时，我们需要从`Action`继承一个类。我们还导入`datetime`，因为我们将添加功能来检查我们将要使用的汇率是否过时。
- en: Then, we import some of the classes and functions that we created. We start
    with the `DbClient` so we can fetch and store data in the MongoDB, then `fetch_exchange_rates_by_currency`
    to fetch fresh data from `fixer.io` when necessary. Finally, we import a helper
    function called `get_config` so we can get the default currency from the config
    collection in the database.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们导入了一些我们创建的类和函数。我们首先导入`DbClient`，这样我们就可以从MongoDB中获取和存储数据，然后导入`fetch_exchange_rates_by_currency`以在必要时从`fixer.io`获取最新数据。最后，我们导入一个名为`get_config`的辅助函数，这样我们就可以从数据库的配置集合中获取默认货币。
- en: 'Let''s start by adding the `SetBaseCurrency` class:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先添加`SetBaseCurrency`类：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, we define the `SetBaseCurrency` class, inheriting from `Action`, and we
    also add a constructor. It doesn't do much; it just all the constructor of the
    base class.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了`SetBaseCurrency`类，继承自`Action`，并添加了一个构造函数。它并没有做太多事情；它只是调用了基类的构造函数。
- en: 'Now, we need to implement a special method called `__call__`. It will be called
    when the argument that the action is bound to is parsed:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要实现一个特殊的方法叫做`__call__`。当解析绑定到操作的参数时，它将被调用：
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This method gets four arguments, and the parser is an instance of the `ArgumentParser`
    that we are going to create shortly.  `namespace` is an object which is the result
    of the argument parser;  we went through namespace objects in detail in [Chapter
    1](760a1425-6ef8-4e6b-ba1e-0f936d046aee.xhtml), *Implementing the Weather Application*.
    The value is the value that has been passed to the underlying argument and lastly,
    the `option_string`  is the argument that the action is bound to.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法有四个参数，解析器是我们即将创建的`ArgumentParser`的一个实例。`namespace`是参数解析器的结果的对象；我们在[第1章](760a1425-6ef8-4e6b-ba1e-0f936d046aee.xhtml)中详细介绍了命名空间对象，*实现天气应用程序*。值是传递给基础参数的值，最后，`option_string`是操作绑定到的参数。
- en: We start the method by setting the value, the destination variable for the argument,
    and then create an instance of the `DbClient`. Note that we are using the `with`
    statement here, so we run the update within the DbClient context.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过为参数设置值、目标变量和创建`DbClient`的实例来开始该方法。请注意，我们在这里使用`with`语句，因此我们在`DbClient`上下文中运行更新。
- en: 'Then, we call the `update` method. Here, we are passing two arguments to the
    `update` method, the first being `filter`. When we have `{''base_currrency'':
    {''$ne'': None}}`, it means that we are going to update an item in the collection
    where the base currency is not equal to None; otherwise, we are going to insert
    a new item. This is the default behavior of the `update` method in the `DbClient`
    class because we have the `upsert` option set to `True` by default.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '然后，我们调用`update`方法。在这里，我们向`update`方法传递了两个参数，第一个是`filter`。当我们有`{''base_currrency'':
    {''$ne'': None}}`时，这意味着我们将更新集合中基础货币不等于None的项目；否则，我们将插入一个新项目。这是`DbClient`类中`update`方法的默认行为，因为我们默认将`upsert`选项设置为`True`。'
- en: When we finish updating, we print the message to the user saying that the default
    currency has been set and we exit the execution of the code when we hit the `finally`
    clause. If something goes wrong, and for some reason, we cannot update the `config`
    collection, an error will be displayed and we exit the program.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成更新时，我们向用户打印消息，说明默认货币已设置，并且当我们触发`finally`子句时，我们退出代码的执行。如果出现问题，由于某种原因，我们无法更新`config`集合，将显示错误并退出程序。
- en: 'The other class that we need to create it is the `UpdateForeignerExchangeRates` class:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建的另一个类是`UpdateForeignerExchangeRates`类：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'As with the class before, we define the class and inherit from `Action`. The
    constructor only calls the constructor in the base class:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的类一样，我们定义类并从`Action`继承。构造函数只调用基类中的构造函数：
- en: '[PRE30]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We also need to implement the `__call__` method, which will be called when using
    the argument that this action will be bound to. We are not going through the method
    arguments again because it is exactly the same as the previous one.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要实现`__call__`方法，当使用此操作绑定到的参数时将调用该方法。我们不会再次讨论方法参数，因为它与前一个方法完全相同。
- en: The method starts by setting the value to `True` for the destination property.
    The argument that we are going to use to run this action will not require arguments
    and it will default to `False`, so if we use the argument, we set it to `True`.
    It is just a way of stating that we have used that argument.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法开始时将目标属性的值设置为`True`。我们将用于运行此操作的参数不需要参数，并且默认为`False`，因此如果我们使用参数，我们将其设置为`True`。这只是一种表明我们已经使用了该参数的方式。
- en: Then, we get the configuration from the database and get the `base_currency`.
    We show a message to the user saying that we are fetching the data from `fixer.io`
    and then we use our `fetch_exchange_rates_by_currency` function, passing the `base_currency`
    to it. When we get a response, we change the date to UTC time so it will be easier
    for us to calculate if the exchange rate for a given currency needs to be updated.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们从数据库中获取配置并获取`base_currency`。我们向用户显示一条消息，告诉他们我们正在从`fixer.io`获取数据，然后我们使用我们的`fetch_exchange_rates_by_currency`函数，将`base_currency`传递给它。当我们得到响应时，我们将日期更改为UTC时间，这样我们就可以更容易地计算给定货币的汇率是否需要更新。
- en: Remember that `fixer.io` updates its data around 16:00 CET.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`fixer.io`在中欧时间下午4点左右更新其数据。
- en: Then, we create another instance of the `DbClient` and use the `update` method
    with two arguments. The first one is `filter`, so it will change any item in the
    collection that matches the criteria, and the second argument is the response
    that we get from `fixer.io` API.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建`DbClient`的另一个实例，并使用带有两个参数的`update`方法。第一个是`filter`，因此它将更改与条件匹配的集合中的任何项目，第二个参数是我们从`fixer.io`
    API获取的响应。
- en: After everything is done, we hit the `finally` clause and terminate the program's
    execution. If something goes wrong, we show a message to the user in the terminal
    and terminate the program's execution.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有事情都完成之后，我们触发`finally`子句并终止程序的执行。如果出现问题，我们会在终端向用户显示一条消息，并终止程序的执行。
- en: Creating the currency enumeration
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建货币枚举
- en: 'Another thing we need to do before starting the command line parser is to create
    an enumeration with the possible currencies that the users of our application
    will be able to choose from. Let''s go ahead and create a file called `currency.py`
    in the `currency_converter/currency_converter/core` directory with the following
    contents:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始命令行解析器之前，我们还需要创建一个枚举，其中包含我们的应用程序用户可以选择的可能货币。让我们继续在`currency_converter/currency_converter/core`目录中创建一个名为`currency.py`的文件，其中包含以下内容：
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is pretty straightforward. We have already covered enumerations in Python
    in the previous chapters, but here we define the enumeration where the key is
    the currency's abbreviation and the value is the name. This matches the currencies
    that are available in `fixer.io` as well.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单。我们已经在之前的章节中介绍了Python中的枚举，但在这里，我们定义了枚举，其中键是货币的缩写，值是名称。这与`fixer.io`中可用的货币相匹配。
- en: 'Open the `__init__.py` file in the `currency_converter/currency_converter/core` directory
    and add the following import statement:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`currency_converter/currency_converter/core`目录中的`__init__.py`文件，并添加以下导入语句：
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Creating the command line parser
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建命令行解析器
- en: 'Perfect! Now, we are all set to create the command line parser. Let''s go ahead
    and create a file called `cmdline_parser.py` in the `currency_converter/currency_converter/core`
    directory and as usual, let''s start importing everything we need:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！现在，我们已经准备好创建命令行解析器。让我们继续在`currency_converter/currency_converter/core`目录中创建一个名为`cmdline_parser.py`的文件，然后像往常一样，让我们开始导入我们需要的一切：
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: From the top, we import `sys`, so that can we exit the program if something
    is not right. We also include the `ArgumentParser` so we can create the parser;
    we also import the `UpdateforeignerExchangeRates` and `SetBaseCurrency` actions
    that we just created. The last thing in the `Currency` enumeration is that we
    are going to use it to set valid choices in some arguments in our parser.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 从顶部开始，我们导入`sys`，这样如果出现问题，我们可以退出程序。我们还包括`ArgumentParser`，这样我们就可以创建解析器；我们还导入了我们刚刚创建的`UpdateforeignerExchangeRates`和`SetBaseCurrency`动作。在`Currency`枚举中的最后一件事是，我们将使用它来在解析器中的某些参数中设置有效的选择。
- en: 'Create a function called `parse_commandline_args`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`parse_commandline_args`的函数：
- en: '[PRE34]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The first thing we do here is get only the names of the `Currency` enumeration''s
    keys; this will return a list like this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们要做的第一件事是只获取`Currency`枚举键的名称；这将返回一个类似这样的列表：
- en: '![](assets/c9385f16-58d4-4ec9-94db-6905c05a5be3.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c9385f16-58d4-4ec9-94db-6905c05a5be3.png)'
- en: 'Here, we finally create an instance of the `ArgumentParser` and we pass two
    arguments: `prog`, which is the name of the program, we can call it `currency_converter`,
    and the second is `description`(the description that will be displayed to the
    user when the `help` argument is passed in the command line).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们最终创建了`ArgumentParser`的一个实例，并传递了两个参数：`prog`，这是程序的名称，我们可以称之为`currency_converter`，第二个是`description`（当在命令行中传递`help`参数时，将显示给用户的描述）。
- en: 'This is the first argument that we are going to add in `--setbasecurrency`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们要在`--setbasecurrency`中添加的第一个参数：
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The first argument that we define is `--setbasecurrency`. It will store the
    currency in the database, so we don't need to specify the base currency all the
    time in the command line. We specify that this argument will be stored as a string
    and the value that the user enters will be stored in an attribute called `base_currency`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的第一个参数是`--setbasecurrency`。它将把货币存储在数据库中，这样我们就不需要在命令行中一直指定基础货币。我们指定这个参数将被存储为一个字符串，并且用户输入的值将被存储在一个名为`base_currency`的属性中。
- en: We also set the argument choices to the `currency_options` that we defined in
    the preceding code. This will ensure that we can only pass currencies matching
    the `Currency` enumeration.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将参数选择设置为我们在前面的代码中定义的`currency_options`。这将确保我们只能传递与`Currency`枚举匹配的货币。
- en: '`action` specifies which action is going to be executed when this argument
    is used, and we are setting it to the `SetBaseCurrency` custom action that we
    defined in the `actions.py` file. The last option, `help`, is the text that is
    displayed when the application''s help is displayed.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`action`指定了当使用此参数时将执行哪个动作，我们将其设置为我们在`actions.py`文件中定义的`SetBaseCurrency`自定义动作。最后一个选项`help`是在显示应用程序帮助时显示的文本。'
- en: 'Let''s add the `--update` argument:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加`--update`参数：
- en: '[PRE36]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `--update` argument, as the name says, will update the exchange rates for
    the default currency. It is meant to be used after the `--setbasecurrency` argument.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`--update`参数，顾名思义，将更新默认货币的汇率。它在`--setbasecurrency`参数之后使用。'
- en: Here, we define the argument with the name `--update`, then we set the `metavar` argument.
    The `metavar` keyword `--update` will be referenced when the help is generated.
    By default, it's the same as the name of the argument but in uppercase. Since
    we don't have any value that we need to pass to this argument, we set `metavar`
    to nothing. The next argument is `nargs`, which tells the `argparser` that this
    argument does not require a value to be passed. Finally, we have the `action` that
    we set to the other custom action that we created previously, the `UpdateForeignExchangeRates`
    action. The last argument is `help`, which specifies the help text for the argument.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用名称`--update`定义参数，然后设置`metavar`参数。当生成帮助时，`metavar`关键字`--update`将被引用。默认情况下，它与参数的名称相同，但是大写。由于我们没有任何需要传递给此参数的值，我们将`metavar`设置为无。下一个参数是`nargs`，它告诉`argparser`这个参数不需要传递值。最后，我们设置`action`为我们之前创建的另一个自定义动作，即`UpdateForeignExchangeRates`动作。最后一个参数是`help`，它指定了参数的帮助文本。
- en: 'The next argument is the `--basecurrency` argument:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个参数是`--basecurrency`参数：
- en: '[PRE37]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The idea with this argument is that we want to allow users to override the default
    currency that they set using the `--setbasecurrency` argument when asking for
    a currency conversion.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数的想法是，我们希望允许用户在请求货币转换时覆盖他们使用`--setbasecurrency`参数设置的默认货币。
- en: Here, we define the argument with the name `--basecurrency`. With the `string` type,
    we are going to store the value passed to the argument in an attribute called
    `from_currency`; we also set the choices to `currency_option` here so we can make
    sure that only currencies that exist in the `Currency` enumeration are allowed.
    Lastly, we set the help text.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用名称`--basecurrency`定义参数。使用`string`类型，我们将把传递给参数的值存储在一个名为`from_currency`的属性中；我们还在这里将选择设置为`currency_option`，这样我们就可以确保只有在`Currency`枚举中存在的货币才被允许。最后，我们设置了帮助文本。
- en: The next argument that we are going to add is called `--value`. This argument
    will receive the value that the users of our application want to convert to another
    currency.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要添加的下一个参数称为`--value`。这个参数将接收我们的应用程序用户想要转换为另一种货币的值。
- en: 'Here''s how we will write it:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将如何编写它的方式：
- en: '[PRE38]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, we set the name of the argument as `--value`. Note that the type is different
    from the previous arguments that we defined. Now, we will receive a float value,
    and the argument parser will store the value passed to the `--value` argument
    to the attribute called value. The last argument is the `help` text.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将参数的名称设置为`--value`。请注意，类型与我们之前定义的参数不同。现在，我们将接收一个浮点值，并且参数解析器将把传递给`--value`参数的值存储到名为value的属性中。最后一个参数是`help`文本。
- en: 'Finally, the last argument that we are going to add in the argument that specifies
    which currency the value will be converted to is going to be called `--to`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们要添加的最后一个参数是指定值将被转换为哪种货币的参数，将被称为`--to`：
- en: '[PRE39]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This argument is very similar to the `--basecurrency` argument that we defined
    in the preceding code. Here, we set the argument's name to `--to` and it is going
    to be of type `string`. The value passed to this argument will be stored in the
    attribute called `dest_currency`. Here, we also set a choice of arguments to the
    list of valid currencies that we extracted from the `Currency` enumeration; last
    but not the least, we set the help text.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数与我们在前面的代码中定义的`--basecurrency`参数非常相似。在这里，我们将参数的名称设置为`--to`，它将是`string`类型。传递给此参数的值将存储在名为`dest_currency`的属性中。在这里，我们还将参数的选择设置为我们从`Currency`枚举中提取的有效货币列表；最后，我们设置帮助文本。
- en: Basic validation
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本验证
- en: Note that many of these arguments that we defined are required. However, there
    are some arguments that are dependent on each other, for example, the arguments
    `--value` and `--to`. You cannot try to convert a value without specifying the
    currency that you want to convert to and vice versa.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们定义的许多参数是必需的。然而，有一些参数是相互依赖的，例如参数`--value`和`--to`。您不能尝试转换价值而不指定要转换的货币，反之亦然。
- en: 'Another problem here is that, since many arguments are required, if we run
    the application without passing any argument at all, it will just accept it and
    crash; the right thing to do here is that, if the user doesn''t use any argument,
    we should display the Help menu. With that said, we need to add a function to
    perform this kind of validation for us, so let''s go ahead and add a function
    called `validate_args`. You can add this function right at the top, after the
    `import` statements:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的另一个问题是，由于许多参数是必需的，如果我们在不传递任何参数的情况下运行应用程序，它将接受并崩溃；在这里应该做的正确的事情是，如果用户没有使用任何参数，我们应该显示帮助菜单。也就是说，我们需要添加一个函数来执行这种类型的验证，所以让我们继续添加一个名为`validate_args`的函数。您可以在`import`语句之后的顶部添加此函数：
- en: '[PRE40]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: So, `args` is going to be passed to this function. `args` is actually an object
    of `time` and `namespace`. This object will contain properties with the same name
    that we specified in the `dest` argument in the argument's definitions. In our
    case, the `namespace` will contain these properties: `base_currency`, `update`,
    `from_currency`, `value`, and `dest_currency`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`args`将被传递给这个函数。`args`实际上是`time`和`namespace`的对象。这个对象将包含与我们在参数定义中指定的相同名称的属性。在我们的情况下，`namespace`将包含这些属性：`base_currency`、`update`、`from_currency`、`value`和`dest_currency`。
- en: We use a comprehension to get all the fields that are not set to `None`. In
    this comprehension, we use the built-in function `vars`, which will return the
    value of the property `__dict__` of `args`, which is an instance of the `Namespace`
    object. Then, we use the `.items()` function so we can iterate through the dictionary
    items and one by one test if its value is `None`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个理解来获取所有未设置为`None`的字段。在这个理解中，我们使用内置函数`vars`，它将返回`args`的`__dict__`属性的值，这是`Namespace`对象的一个实例。然后，我们使用`.items()`函数，这样我们就可以遍历字典项，并逐一测试其值是否为`None`。
- en: If any argument is passed in the command line, the result of this comprehension
    will be an empty list, and in that case, we return `False`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在命令行中传递了任何参数，那么这个理解的结果将是一个空列表，在这种情况下，我们返回`False`。
- en: 'Then, we test the arguments that need to be used in pairs: `--value` (value)
    and `--to` (`dest_currency`). It will return `False` if we have a value, but `dest_currency`
    is equal to `None` and vice versa.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们测试需要成对使用的参数：`--value`（value）和`--to`（`dest_currency`）。如果我们有一个值，但`dest_currency`等于`None`，反之亦然，它将返回`False`。
- en: 'Now, we can complete `parse_commandline_args`. Let''s go to the end of this
    function and add the code as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以完成`parse_commandline_args`。让我们转到此函数的末尾，并添加以下代码：
- en: '[PRE41]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here, we parse the arguments and set them to the variable `args`, and remember
    that `args` will be of the `namespace` type. Then, we pass `args` to the function
    that we just created, the `validate_args` function. If the `validate_args` returns
    `False`, it will print the help and terminate the program's execution; otherwise,
    it will return `args`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们解析参数并将它们设置为变量`args`，请记住`args`将是`namespace`类型。然后，我们将`args`传递给我们刚刚创建的函数，即`validate_args`函数。如果`validate_args`返回`False`，它将打印帮助信息并终止程序的执行；否则，它将返回`args`。
- en: Next, we are going to develop the application's entry point that will glue together
    all the pieces that we have developed so far.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开发应用程序的入口点，它将把我们到目前为止开发的所有部分粘合在一起。
- en: Adding the application's entry point
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加应用程序的入口点
- en: This is the section of this chapter that we all have been waiting for; we are
    going to create the application entry point and glue together all the pieces of
    code that we have written so far.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章我们一直在等待的部分；我们将创建应用程序的入口点，并将迄今为止编写的所有代码粘合在一起。
- en: 'Let''s create a file called `__main__.py` in the `currency_converter/currency_converter`
    directory. We have already used the `_main__` file before in [Chapter 1](760a1425-6ef8-4e6b-ba1e-0f936d046aee.xhtml),
    *Implementing the Weather Application*. When we place a file called `__main__.py`
    in the module''s `root` directory, it means that that file is the entry script
    of the module. So, if we run the following command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`currency_converter/currency_converter`目录中创建一个名为`__main__.py`的文件。我们之前在[第1章](760a1425-6ef8-4e6b-ba1e-0f936d046aee.xhtml)中已经使用过`__main__`文件，*实现天气应用程序*。当我们在模块的`root`目录中放置一个名为`__main__.py`的文件时，这意味着该文件是模块的入口脚本。因此，如果我们运行以下命令：
- en: '[PRE42]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'It is the same as running:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这与运行以下命令相同：
- en: '[PRE43]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Great! So, let''s start adding content to this file. First, add some `import`
    statements:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们开始向这个文件添加内容。首先，添加一些`import`语句：
- en: '[PRE44]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We import the `sys` package as usual in case we need to call exit to terminate
    the execution of the code, then we import all the classes and utility functions
    that we developed so far. We start by importing the `parse_commandline_args` function
    for command line parsing, the `get_config` so that we can get hold of the default
    currency set by the user, the `DbClient` class so we can access the database and
    fetch the exchange rates; lastly, we also import the `fetch_exchange_rates_by_currency ` function,
    which will be used when we choose a currency that is not in our database yet.
    We will fetch this from the `fixer.io` API.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像往常一样导入`sys`包，以防需要调用exit来终止代码的执行，然后导入到目前为止我们开发的所有类和实用函数。我们首先导入`parse_commandline_args`函数进行命令行解析，然后导入`get_config`以便我们可以获取用户设置的默认货币，导入`DbClient`类以便我们可以访问数据库并获取汇率；最后，我们还导入`fetch_exchange_rates_by_currency`函数，当我们选择尚未在我们的数据库中的货币时将使用它。我们将从`fixer.io`
    API中获取这个。
- en: 'Now, we can create the `main` function:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建`main`函数：
- en: '[PRE45]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `main` function starts off by parsing the command line arguments. If everything
    is entered by the user correctly, we should receive a `namespace` object containing
    all the arguments with its values. In this stage, we only care about three arguments:
    `value`, `dest_currency`, and `from_currency`. If you recall from earlier, `value`
    is the value that the user wants to convert to another currency, `dest_currency`
    is the currency that the user wants to convert to, and `from_currency` is only
    passed if the user wishes to override the default currency that is set on the
    database.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`函数首先通过解析命令行参数来开始。如果用户输入的一切都正确，我们应该收到一个包含所有参数及其值的`namespace`对象。在这个阶段，我们只关心三个参数：`value`，`dest_currency`和`from_currency`。如果你还记得之前的话，`value`是用户想要转换为另一种货币的值，`dest_currency`是用户想要转换为的货币，`from_currency`只有在用户希望覆盖数据库中设置的默认货币时才会传递。'
- en: After getting all these values, we call `get_config` to get the `base_currency`
    from the database, and right after that we check if there is a `from_currency` where
    we can use the value; otherwise, we use the `base_currency` from the database.
    This will ensure that if the user specifies a `from_currency` value, then that
    value will override the default currency stored in the database.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有这些值后，我们调用`get_config`从数据库中获取`base_currency`，然后立即检查是否有`from_currency`可以使用该值；否则，我们使用数据库中的`base_currency`。这将确保如果用户指定了`from_currency`值，那么该值将覆盖数据库中存储的默认货币。
- en: 'Next, we implement the code that will actually fetch the exchange rates from
    the database or from the `fixer.io` API, like so:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实现将实际从数据库或`fixer.io` API获取汇率的代码，如下所示：
- en: '[PRE46]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We create a connection with the database using the `DbClient` class and also
    specify that we are going to access the rates collection. inside the context,
    we first try to find the exchange rated for the base currency. if it is not in
    the database, we try to fetch it from `fixer.io`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`DbClient`类创建与数据库的连接，并指定我们将访问汇率集合。在上下文中，我们首先尝试找到基础货币的汇率。如果它不在数据库中，我们尝试从`fixer.io`获取它。
- en: After that, we extract the exchange rate value for the currency that we are
    converting to and insert the result in the database so that, the next time that
    we run the program and want to use this currency as the base, we don't need to
    send a request to `fixer.io` again.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们提取我们要转换为的货币的汇率值，并将结果插入数据库，这样，下次运行程序并想要使用这种货币作为基础货币时，我们就不需要再次发送请求到`fixer.io`。
- en: If we find the exchange rate for the base currency, we simply get that value
    and assign it to the `dest_rate` variable.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们找到了基础货币的汇率，我们只需获取该值并将其分配给`dest_rate`变量。
- en: The last thing we have to do is perform the conversion and use the built-in
    round function to limit the number of digits after the decimal point to two digits,
    and we print the value in the terminal.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的最后一件事是执行转换，并使用内置的round函数将小数点后的位数限制为两位，并在终端中打印值。
- en: 'At the end of the file, after the `main()` function, add the following code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件末尾，在`main()`函数之后，添加以下代码：
- en: '[PRE47]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: And we're all done!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都完成了！
- en: Testing our application
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的应用程序
- en: 'Let''s test our application. First, we are going to show the help message to
    see which options we have available:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下我们的应用程序。首先，我们将显示帮助消息，看看我们有哪些选项可用：
- en: '![](assets/b0f7d3ce-7807-4396-9065-ce200aabd67b.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0f7d3ce-7807-4396-9065-ce200aabd67b.png)'
- en: 'Nice! Just as expected. Now, we can use the `--setbasecurrency` argument to
    set the base currency:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 很好！正如预期的那样。现在，我们可以使用`--setbasecurrency`参数来设置基础货币：
- en: '![](assets/ad6fb0bd-bcf1-49eb-a325-f9fc65accb57.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ad6fb0bd-bcf1-49eb-a325-f9fc65accb57.png)'
- en: 'Here, I have set the base currency to SEK (Swedish Kronor) and, every time
    I need to perform a currency conversion, I don''t need to specify that my base
    currency is SEK. Let''s convert 100 SEK to USD (United States Dollars):'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我已将基础货币设置为SEK（瑞典克朗），每次我需要进行货币转换时，我都不需要指定我的基础货币是SEK。让我们将100 SEK转换为USD（美元）：
- en: '![](assets/38bfab21-ab5d-4b56-b505-d51ebb2957ee.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/38bfab21-ab5d-4b56-b505-d51ebb2957ee.png)'
- en: As you can see, we didn't have the exchange rate in the database yet, so the
    first thing the application does is to fetch it from `fixer.io` and save it into
    the database.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在数据库中没有该货币的汇率，所以应用程序的第一件事就是从`fixer.io`获取并将其保存到数据库中。
- en: 'Since I am a Brazilian developer based in Sweden, I want to convert SEK to
    BRL (Brazil Real) so that I know how much Swedish Crowns I will have to take to
    Brazil next time I go to visit my parents:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我是一名居住在瑞典的巴西开发人员，我想将SEK转换为BRL（巴西雷亚尔），这样我就知道下次去巴西看父母时需要带多少瑞典克朗：
- en: '![](assets/4666b921-54a0-4ed8-914d-96324ba2d6d6.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4666b921-54a0-4ed8-914d-96324ba2d6d6.png)'
- en: Note that, since this is the second time that we are running the application,
    we already have exchange rates with  SEK as the base currency, so the application
    does not fetch the data from `fixer.io` again.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于这是我们第二次运行应用程序，我们已经有了以SEK为基础货币的汇率，所以应用程序不会再次从`fixer.io`获取数据。
- en: 'Now, the last thing that we want to try is overriding the base currency.  At
    the moment, it is set to SEK. We use MXN (Mexico Peso) and convert from MXN to
    SEK:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要尝试的最后一件事是覆盖基础货币。目前，它被设置为SEK。我们使用MXN（墨西哥比索）并从MXN转换为SEK：
- en: '![](assets/30e9fa97-c5a3-4c03-be9f-cf743813f5de.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/30e9fa97-c5a3-4c03-be9f-cf743813f5de.png)'
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered a lot of interesting topics. In the first section,
    while setting up the environment for our application, you learned how to use the
    super new and popular tool `pipenv`, which has become the recommend tool at [python.org](https://www.python.org/)
    for creating virtual environments and also managing project dependencies.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了许多有趣的主题。在设置应用程序环境时，您学会了如何使用超级新的、流行的工具`pipenv`，它已成为[python.org](https://www.python.org/)推荐的用于创建虚拟环境和管理项目依赖项的工具。
- en: You also learned the basic concepts of object-oriented programming, how to create
    custom actions for your command line tools, the basics about context managers
    which is a really powerful feature in the Python language, how to create enumerations
    in Python, and how to perform HTTP requests using `Requests`, which is one of
    the most popular packages in the Python ecosystem.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学会了面向对象编程的基本概念，如何为命令行工具创建自定义操作，Python语言中关于上下文管理器的基础知识，如何在Python中创建枚举，以及如何使用`Requests`执行HTTP请求，这是Python生态系统中最受欢迎的包之一。
- en: Last but not the least, you learned how to use the `pymongo` package to insert,
    update, and search for data in a MongoDB database.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的是，您学会了如何使用`pymongo`包在MongoDB数据库中插入、更新和搜索数据。
- en: In the next chapter, we are going to switch gears and develop a complete, very
    functional web application using the excellent and very popular Django web framework!
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将转变方向，使用出色且非常流行的Django web框架开发一个完整、非常实用的网络应用程序！
