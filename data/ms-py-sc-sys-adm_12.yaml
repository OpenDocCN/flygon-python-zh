- en: Remote Monitoring of Hosts Over Telnet and SSH
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Telnet和SSH上的主机远程监控
- en: 'In this chapter, you will learn how to carry out basic configurations on a
    server with Telnet and SSH configured. We will begin by using the Telnet module,
    after which we will implement the same configurations using the preferred method:
    SSH using different modules in Python. You will also learn about how `telnetlib`,
    `subprocess`, `fabric`, `Netmiko`, and `paramiko` modules work. For this chapter,
    you must have a basic knowledge of networking.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在配置了Telnet和SSH的服务器上进行基本配置。我们将首先使用Telnet模块，然后使用首选方法实现相同的配置：使用Python中的不同模块进行SSH。您还将了解`telnetlib`、`subprocess`、`fabric`、`Netmiko`和`paramiko`模块的工作原理。在本章中，您必须具备基本的网络知识。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The `telnetlib()` module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`telnetlib()`模块'
- en: The `subprocess.Popen()` module
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subprocess.Popen()`模块'
- en: SSH using fabric module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用fabric模块的SSH
- en: SSH using Paramiko library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Paramiko库的SSH
- en: SSH using Netmiko library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Netmiko库的SSH
- en: The telnetlib() module
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: telnetlib()模块
- en: In this section, we are going to learn about the Telnet protocol and then we
    will do Telnet operations using the `telnetlib` module over a remote server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关Telnet协议，然后我们将使用`telnetlib`模块在远程服务器上执行Telnet操作。
- en: Telnet is a network protocol that allows a user to communicate with remote servers.
    It is mostly used by network administrators to remotely access and manage devices.
    To access the device, run the Telnet command with the IP address or hostname of
    a remote server in your Terminal.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Telnet是一种网络协议，允许用户与远程服务器通信。网络管理员通常使用它来远程访问和管理设备。要访问设备，请在终端中使用Telnet命令和远程服务器的IP地址或主机名。
- en: 'Telnet uses TCP on the default port number `23`. To use Telnet, make sure it
    is installed on your system. If not, run the following command to install it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Telnet在默认端口号`23`上使用TCP。要使用Telnet，请确保它已安装在您的系统上。如果没有，请运行以下命令进行安装：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To run Telnet using the simple Terminal, you just have to enter the following
    command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用简单的终端运行Telnet，您只需输入以下命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Python has the `telnetlib` module to perform Telnet functions through Python
    scripts. Before telnetting your remote device or router, make sure they are configured
    properly and, if not, you can do basic configuration by using the following command
    in the router''s Terminal:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python具有`telnetlib`模块，可通过Python脚本执行Telnet功能。在对远程设备或路由器进行Telnet之前，请确保它们已正确配置，如果没有，您可以通过在路由器的终端中使用以下命令进行基本配置：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s see the example of Telnetting a remote device. For that, create
    a `telnet_example.py` script and write following content in it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下远程设备的Telnet示例。为此，请创建一个`telnet_example.py`脚本，并在其中写入以下内容：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding example, we accessed and configured a Cisco router using the
    `telnetlib` module. In this script, first, we took the username and password from
    the user to initialize the Telnet connection with a remote device. When the connection
    was established, we did further configuration on the remote device. After telnetting,
    we will be able to access a remote server or device. But there is one very important
    disadvantage of this Telnet protocol, and that is all the data, including usernames
    and passwords is sent over a network in a text manner, which may cause a security
    risk. Because of that, nowadays Telnet is rarely used and has been replaced by
    a very secure protocol named Secure Shell, known as SSH.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用`telnetlib`模块访问并配置了Cisco路由器。在此脚本中，首先我们从用户那里获取用户名和密码，以初始化与远程设备的Telnet连接。当连接建立时，我们对远程设备进行了进一步的配置。Telnet之后，我们将能够访问远程服务器或设备。但是Telnet协议有一个非常重要的缺点，那就是所有数据，包括用户名和密码都以文本方式通过网络发送，这可能会造成安全风险。因此，现在Telnet很少使用，并已被一个名为安全外壳（SSH）的非常安全的协议所取代。
- en: SSH
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SSH
- en: SSH is a network protocol and is used to manage a device or servers through
    remote access. SSH uses public key encryption for security purposes. The important
    difference between Telnet and SSH is that SSH uses encryption, which means that
    all data transmitted over a network is protected from unauthorized real-time interception.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SSH是一种网络协议，用于通过远程访问管理设备或服务器。SSH使用公钥加密来确保安全。Telnet和SSH之间的重要区别在于SSH使用加密，这意味着所有通过网络传输的数据都受到未经授权的实时拦截的保护。
- en: 'User who accesses a remote server or device must install an SSH client. Install
    SSH by running the following command in your Terminal:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 用户访问远程服务器或设备必须安装SSH客户端。通过在终端中运行以下命令来安装SSH：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Also, on a remote server where the user wants to communicate, an SSH server
    must be installed and running. SSH uses the TCP protocol and works on port number
    `22` by default.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在用户希望通信的远程服务器上，必须安装并运行SSH服务器。SSH使用TCP协议，默认情况下在端口号`22`上运行。
- en: 'You can run the `ssh` command through the Terminal as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过终端运行`ssh`命令如下：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, you will learn to do SSH by using different modules in Python, such as
    subprocess, fabric, Netmiko, and Paramiko. Now, we will see those modules one
    by one.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将学习如何使用Python中的不同模块进行SSH，例如subprocess、fabric、Netmiko和Paramiko。现在，我们将依次看到这些模块。
- en: The subprocess.Popen() module
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: subprocess.Popen()模块
- en: The `Popen` class handles the process creation and management. By using this
    module, developers can handle less common cases. The child program execution will
    be done in a new process. To execute a child program on Unix/Linux, the class
    will use the `os.execvp()` function. To execute a child program in Windows, the
    class will use the `CreateProcess()` function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Popen`类处理进程的创建和管理。使用此模块，开发人员可以处理较少的常见情况。子程序执行将在新进程中完成。要在Unix/Linux上执行子程序，该类将使用`os.execvp()`函数。要在Windows中执行子程序，该类将使用`CreateProcess()`函数。'
- en: 'Now, let''s see some useful arguments of `subprocess.Popen()`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一些`subprocess.Popen()`的有用参数：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s look at each argument:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看每个参数：
- en: '`args`:It can be a sequence of program arguments or a single string. If `args`
    is a sequence, the first item in args is executed. If args is a string, it recommends
    to pass args as a sequence.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args`：它可以是程序参数的序列或单个字符串。如果`args`是一个序列，则将执行args中的第一项。如果args是一个字符串，则建议将args作为序列传递。'
- en: '`shell`: The shell argument is by default set to `False` and it specifies whether
    to use shell for execution of the program. If shell is `True`, it recommends to
    pass args as a string. In Linux, if `shell=True`, the shell defaults to `/bin/sh`.
    If `args` is a string, the string specifies the command to execute through the
    shell.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shell`：shell参数默认设置为`False`，它指定是否使用shell来执行程序。如果shell为`True`，则建议将args作为字符串传递。在Linux中，如果`shell=True`，shell默认为`/bin/sh`。如果`args`是一个字符串，则该字符串指定要通过shell执行的命令。'
- en: '`bufsize`: If `bufsize` is `0` (by default, it is `0`), it means unbuffered
    and if `bufsize` is `1`, it means line buffered. If `bufsize` is any other positive
    value, use a buffer of the given size. If `bufsize` is any other negative value,
    it means fully buffered.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bufsize`：如果`bufsize`为`0`（默认为`0`），则表示无缓冲，如果`bufsize`为`1`，则表示行缓冲。如果`bufsize`是任何其他正值，则使用给定大小的缓冲区。如果`bufsize`是任何其他负值，则表示完全缓冲。'
- en: '`executable`: It specifies that the replacement program to be executed.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executable`：它指定要执行的替换程序。'
- en: '`stdin`, `stdout`, and `stderr`: These arguments define the standard input,
    standard output, and standard error respectively.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stdin`、`stdout`和`stderr`：这些参数分别定义了标准输入、标准输出和标准错误。'
- en: '`preexec_fn`:This is set to a callable object and will be called just before
    the child is executed in the child process.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preexec_fn`：这是设置为可调用对象的，将在子进程中执行之前调用。'
- en: '`close_fds`:In Linux, if `close_fds` is true, all file descriptors except `0`,
    `1`, and `2` will be closed before the child process is executed. In Windows,
    if `close_fds` is `true` then the child process will inherit no handles.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`close_fds`：在Linux中，如果`close_fds`为true，则在执行子进程之前，除了`0`、`1`和`2`之外的所有文件描述符都将被关闭。在Windows中，如果`close_fds`为`true`，则子进程将不会继承任何句柄。'
- en: '`env`:If the value is not `None`, then mapping will define environment variables
    for new process.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env`：如果值不是`None`，则映射将为新进程定义环境变量。'
- en: '`universal_newlines`:If the value is `True` then `stdout` and `stderr` will
    be opened as text files in newlines mode.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`universal_newlines`：如果值为`True`，则`stdout`和`stderr`将以换行模式打开为文本文件。'
- en: 'Now, we are going to see an example of `subprocess.Popen()`. For that, create
    a `ssh_using_sub.py`  script and write the following content in it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个`subprocess.Popen()`的例子。为此，创建一个`ssh_using_sub.py`脚本，并在其中写入以下内容：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, first, we imported the subprocess module, then we
    defined the host address where you want to establish the SSH connection. After
    that, we gave one simple command that executed over the remote device. After all
    this was set up, we put this information in the `subprocess.Popen()` function.
    This function executed the arguments defined inside that function to create a
    connection with the remote device. After the SSH connection was established, our
    defined command was executed and provided the result. Then we printed the result
    of SSH on the Terminal, as shown in the output.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，首先我们导入了subprocess模块，然后定义了要建立SSH连接的主机地址。之后，我们给出了一个在远程设备上执行的简单命令。在所有这些设置完成后，我们将这些信息放入`subprocess.Popen()`函数中。该函数执行函数内定义的参数，以创建与远程设备的连接。建立SSH连接后，执行我们定义的命令并提供结果。然后我们在终端上打印SSH的结果，如输出所示。
- en: SSH using fabric module
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用fabric模块的SSH
- en: Fabric is a Python library as well as a command-line tool for the use of SSH.
    It is used for system administration and application deployment over the network.
    We can also execute shell commands over SSH.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric是一个Python库，也是一个用于SSH的命令行工具。它用于系统管理和应用程序在网络上的部署。我们还可以通过SSH执行shell命令。
- en: 'To use fabric module, first you have to install it using the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用fabric模块，首先您必须使用以下命令安装它：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we will see an example. Create a `fabfile.py` script and write the following
    content in it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个例子。创建一个`fabfile.py`脚本，并在其中写入以下内容：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example, first, we imported the `fabric.api` module, then we
    set the hostname and password to get connected with the host network. After that,
    we set different task to perform over SSH. Therefore, to execute our program instead
    of the Python3 `fabfile.py`, we used the `fab` utility (`fab dir`), and after
    that we stated that the required tasks should be performed from our `fabfile.py`. 
    In our case, we performed the `dir` task, which creates a directory with the name
    `'fabric'` on your remote network. You can add your specific task in your Python
    file. It can be executed using the `fab` utility of the fabric module.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，首先我们导入了`fabric.api`模块，然后设置了主机名和密码以连接到主机网络。之后，我们设置了不同的任务以通过SSH执行。因此，为了执行我们的程序而不是Python3的`fabfile.py`，我们使用了`fab`实用程序（`fab
    dir`），然后我们声明应该从我们的`fabfile.py`执行所需的任务。在我们的情况下，我们执行了`dir`任务，在您的远程网络上创建了一个名为`'fabric'`的目录。您可以在您的Python文件中添加您的特定任务。它可以使用fabric模块的`fab`实用程序执行。
- en: SSH using the Paramiko library
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Paramiko库的SSH
- en: Paramiko is a library that implements the SSHv2 protocol for secure connections
    to remote devices. Paramiko is a pure Python interface around SSH.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Paramiko是一个实现SSHv2协议用于远程设备安全连接的库。Paramiko是围绕SSH的纯Python接口。
- en: 'Before using Paramiko, make sure you have installed it properly on your system.
    If it is not installed, you can install it by running the following command in
    your Terminal:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Paramiko之前，请确保您已经在系统上正确安装了它。如果尚未安装，可以通过在终端中运行以下命令来安装它：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we will see an example of using `paramiko`. For this `paramiko` connection,
    we are using a Cisco device. Paramiko supports both password-based and  key-pair
    based authentication for a secure connection with the server. In our script, we
    are using password-based authentication, which means we check for a password and,
    if available, authentication is attempted using plain username/password authentication. Before
    we are going to do SSH to your remote device or multi-layer router, make sure
    they are configured properly and, if not, you can do basic configuration by using
    the following command in a multi-layer router Terminal:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个使用`paramiko`的例子。对于这个`paramiko`连接，我们使用的是Cisco设备。Paramiko支持基于密码和基于密钥对的身份验证，以确保与服务器的安全连接。在我们的脚本中，我们使用基于密码的身份验证，这意味着我们检查密码，如果可用，将尝试使用普通用户名/密码身份验证。在对远程设备或多层路由器进行SSH之前，请确保它们已经正确配置，如果没有，您可以使用以下命令在多层路由器终端中进行基本配置：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, create a `pmiko.py` script and write the following content in it:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个`pmiko.py`脚本，并在其中写入以下内容：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding example, first, we imported the `paramiko` module, then we
    defined the SSH credentials required to connect the remote device. After providing
    credentials, we created an instance `'c'` of `paramiko.SSHclient()`, which is
    the primary client used to establish connections with the remote device and execute
    commands or operations. The creation of an `SSHClient` object allows us to establish
    remote connections using the `.connect()` function. Then, we set the policy `paramiko`
    connection because, by default, `paramiko.SSHclient` sets the SSH policy in reject
    policy state. That causes the policy to reject any SSH connection without any
    validation. In our script, we are neglecting this possibility of SSH connection
    drop by using the `AutoAddPolicy()` function that automatically adds the server's
    host key without prompting it. We can use this policy for testing purposes only,
    but this is not a good option in a production environment because of security
    purpose.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，首先我们导入了`paramiko`模块，然后定义了连接到远程设备所需的SSH凭据。提供凭据后，我们创建了`paramiko.SSHclient()`的实例`'c'`，这是用于与远程设备建立连接并执行命令或操作的主要客户端。创建`SSHClient`对象允许我们使用`.connect()`函数建立远程连接。然后，我们设置了`paramiko`连接的策略，因为默认情况下，`paramiko.SSHclient`将SSH策略设置为拒绝策略状态。这会导致策略拒绝任何未经验证的SSH连接。在我们的脚本中，我们使用`AutoAddPolicy()`函数来忽略SSH连接中断的可能性，该函数会自动添加服务器的主机密钥而无需提示。我们只能在测试目的中使用此策略，但出于安全目的，这不是生产环境中的好选择。
- en: When an SSH connection is established, you can do any configuration or operation
    that you want on your device. Here, we created a few virtual LANs on a remote
    device. After creating VLANs, we just closed the connection.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当建立SSH连接时，您可以在设备上进行任何配置或操作。在这里，我们在远程设备上创建了一些虚拟局域网。创建VLAN后，我们只是关闭了连接。
- en: SSH using the Netmiko library
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Netmiko库进行SSH
- en: In this section, we will learn about Netmiko. The Netmiko library is an advanced
    version of Paramiko. It is a `multi_vendor` library that is based on Paramiko.
    Netmiko simplifies SSH connection to a network device and takes particular operation
    on the device. Before going doing SSH to your remote device or multi-layer router,
    make sure they are configured properly and, if not, you can do basic configuration
    by command mentioned in the Paramiko section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Netmiko。Netmiko库是Paramiko的高级版本。它是一个基于Paramiko的“multi_vendor”库。Netmiko简化了与网络设备的SSH连接，并对设备进行特定操作。在对远程设备或多层路由器进行SSH之前，请确保它们已经正确配置，如果没有，您可以使用Paramiko部分中提到的命令进行基本配置。
- en: 'Now, let''s see an example. Create a `nmiko.py` script and write the following
    code in it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一个例子。创建一个`nmiko.py`脚本，并在其中写入以下代码：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, we use Netmiko library to do SSH, instead of Paramiko.
    In this script, first, we imported `ConnectHandler` from the Netmiko library,
    which we used to establish an SSH connection to the remote network devices by
    passing in the device dictionary. In our case, that dictionary is `remote_device`.
    After the connection is established, we executed configuration commands to create
    a number of virtual LANs using the `send_config_set()` function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用Netmiko库来进行SSH，而不是Paramiko。在这个脚本中，首先我们从Netmiko库中导入`ConnectHandler`，然后通过传递设备字典（在我们的情况下是`remote_device`）来建立与远程网络设备的SSH连接。连接建立后，我们执行配置命令，使用`send_config_set()`函数创建了多个虚拟局域网。
- en: When we use this type (`.send_config_set()`) of function to pass commands on
    a remote device, it automatically sets our device in configuration mode. After
    sending configuration commands, we also passed a simple command to get the information
    about the configured device.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用这种类型（`.send_config_set()`）的函数在远程设备上传递命令时，它会自动将我们的设备设置为配置模式。在发送配置命令后，我们还传递了一个简单的命令来获取有关配置设备的信息。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about Telnet and SSH. You also learned the different
    Python modules such as telnetlib, subprocess, fabric, Netmiko, and Paramiko, using
    which we perform Telnet and SSH. SSH uses the public key encryption for security
    purposes and is more secure than Telnet.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了Telnet和SSH。您还学习了不同的Python模块，如telnetlib、subprocess、fabric、Netmiko和Paramiko，使用这些模块可以执行Telnet和SSH。SSH使用公钥加密以确保安全，并且比Telnet更安全。
- en: In the next chapter, we will use various Python libraries, with which you can
    make graphical user interfaces.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用各种Python库，您可以使用这些库创建图形用户界面。
- en: Questions
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is client-server architecture?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是客户端-服务器架构？
- en: How do you run operating-specific commands in Python code?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在Python代码中运行特定于操作系统的命令？
- en: What is the difference between LAN and VLAN?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 局域网和虚拟局域网之间有什么区别？
- en: What will the output of the following code be?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码的输出是什么？
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Write a Python program to display a calendar (hint: use the `calendar` module).'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个Python程序来显示日历（提示：使用`calendar`模块）。
- en: Write a Python program to count the number of lines in a text file.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个Python程序来计算文本文件中的行数。
- en: Further reading
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Paramiko documentation: [https://github.com/paramiko/paramiko](https://github.com/paramiko/paramiko)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Paramiko文档：[https://github.com/paramiko/paramiko](https://github.com/paramiko/paramiko)
- en: Fabric documentation: [http://www.fabfile.org/](http://www.fabfile.org/)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fabric文档：[http://www.fabfile.org/](http://www.fabfile.org/)
