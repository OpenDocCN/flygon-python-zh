- en: Planning for the Expansion of Our Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划我们应用程序的扩展
- en: The application is a real hit! After some initial testing and orientation, the
    data entry staff have been utilizing your new form for a few weeks now. The reduction
    in errors and data entry time is dramatic, and there's a lot of excited talk about
    what other problems this program might solve. With even the director joining in
    on the brainstorming, you have a strong suspicion that you'll be asked to add
    some new features soon. There's a problem, though; the application is already
    a script of several hundred lines, and you're worried about its manageability
    as it grows. You need to take some time to organize your codebase in preparation
    for future expansion.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序真的很受欢迎！经过一些初步测试和定位，数据录入人员现在已经使用您的新表单几个星期了。错误和数据输入时间的减少是显著的，人们对这个程序可能解决的其他问题充满了兴奋的讨论。即使主管也加入了头脑风暴，你强烈怀疑你很快就会被要求添加一些新功能。然而，有一个问题；这个应用程序已经是几百行的脚本了，你担心随着它的增长，它的可管理性。你需要花一些时间来组织你的代码库，为未来的扩展做准备。
- en: 'In this chapter, we''ll learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: How to separate the concerns of your application using the **Model-View-Controller**
    pattern
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**模型-视图-控制器**模式来分离应用程序的关注点
- en: How to organize your code into a Python package
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将代码组织成Python包
- en: To create the basic files and directories for your package structure
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的包结构创建基本文件和目录
- en: How to use the Git version control system to track your changes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Git版本控制系统跟踪您的更改
- en: Separating concerns
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分离关注点
- en: Proper architectural design is essential for any project that needs to scale.
    Anyone can prop up some studs and build a garden shed, but a house or skyscraper
    takes careful planning and engineering. Software is no different; simple scripts
    can get away with shortcuts such as global variables or manipulating class properties
    directly, but as the program grows, our code needs to isolate and encapsulate
    different functionalities in a way that limits the amount of complexity we need
    to understand at any given moment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的建筑设计对于任何需要扩展的项目都是至关重要的。任何人都可以支撑起一些支柱，建造一个花园棚屋，但是建造一座房子或摩天大楼需要仔细的规划和工程。软件也是一样的；简单的脚本可以通过一些快捷方式，比如全局变量或直接操作类属性来解决，但随着程序的增长，我们的代码需要以一种限制我们需要在任何给定时刻理解的复杂度的方式来隔离和封装不同的功能。
- en: We call this **separation of concerns**, and it's accomplished through the use
    of architectural patterns that describe different application components and how
    they interact.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称之为**关注点的分离**，通过使用描述不同应用程序组件及其交互方式的架构模式来实现。
- en: The MVC pattern
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC模式
- en: 'Probably the most enduring of these patterns is the MVC pattern, which was
    introduced in the 1970s. While this pattern has evolved and spun off variations
    over the years, the basic gist remains: keep the data, the presentation of the
    data, and the application logic in separate, independent components.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式中最持久的可能是MVC模式，它是在20世纪70年代引入的。尽管这种模式多年来已经发展并衍生出各种变体，但基本的要点仍然是：将数据、数据的呈现和应用程序逻辑保持在独立的组件中。
- en: Let's take a deeper look at these components and understand them in the context
    of our application as it stands.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解这些组件，并在我们的应用程序的上下文中理解它们。
- en: What is a model?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是模型？
- en: The **model** in MVC represents the data. This includes the storage of the data,
    but also the various ways data can be queried or manipulated. Ideally, the model
    is not concerned or affected by how data will be presented or what UI controls
    will be granted, but rather presents a high-level interface that only minimally
    concerns other components with its inner workings. In theory, if you decided to
    completely change the UI of the program (say, from a Tkinter application to a
    web application), the model should be totally unaffected.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: MVC中的**模型**代表数据。这包括数据的存储，以及数据可以被查询或操作的各种方式。理想情况下，模型不关心或受到数据如何呈现或授予什么UI控件的影响，而是提供一个高级接口，只在最小程度上关注其他组件的内部工作。理论上，如果您决定完全更改程序的UI（比如，从Tkinter应用程序到Web应用程序），模型应该完全不受影响。
- en: 'Some examples of functionality or information you find in the model include
    the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 模型中包含的功能或信息的一些示例包括以下内容：
- en: Preparation and writing of program data to a persistent medium (data file, database,
    and so on)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备并将程序数据写入持久介质（数据文件、数据库等）
- en: Retrieval of data from a file or database into a format useful to the program
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件或数据库中检索数据并将其转换为程序有用的格式
- en: An authoritative list of the fields in a set of data, along with their data
    types and limits
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组数据中字段的权威列表，以及它们的数据类型和限制
- en: Validation of data against the data types and limits defined
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据定义的数据类型和限制验证数据
- en: Calculations on stored data
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对存储的数据进行计算
- en: We don't have a model class in our application currently; the data layout is
    defined in the form class, and the `Application.on_save()` method is the only
    code concerned with data persistence so far. We're going to need to split this
    logic off into a separate object that will define the data layout and handle all
    the CSV operations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序目前没有模型类；数据布局是在表单类中定义的，到目前为止，`Application.on_save()`方法是唯一关心数据持久性的代码。我们需要将这个逻辑拆分成一个单独的对象，该对象将定义数据布局并处理所有CSV操作。
- en: What is a view?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是视图？
- en: A **view** is an interface for presenting data and controls to the user. Applications
    may have many views, often on the same data. Views don't talk to the model directly,
    and ideally contain only enough logic to present the UI and communicate user actions
    back to the controller.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**视图**是向用户呈现数据和控件的接口。应用程序可能有许多视图，通常是在相同的数据上。视图不直接与模型交互，并且理想情况下只包含足够的逻辑来呈现UI并将用户操作传递回控制器。'
- en: 'Some examples of code you find in a view include the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中找到的一些代码示例包括以下内容：
- en: GUI layout and widget definitions
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GUI布局和小部件定义
- en: Form automations, such as auto-completion of fields, dynamic toggling of widgets,
    or display of error dialogs
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单自动化，例如字段的自动完成，小部件的动态切换，或错误对话框的显示
- en: Formatting of raw data for presentation
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始数据的格式化呈现
- en: 'Our `DataRecordForm` class is our main view: it contains most of the code for
    our application''s user interface. It also currently defines the structure of
    our data records. This logic can stay in the view, because the view does need
    a way to store the data temporarily before handing it off to the model, but it
    won''t be defining our data record from here on out.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`DataRecordForm`类是我们的主视图：它包含了我们应用程序用户界面的大部分代码。它还当前定义了我们数据记录的结构。这个逻辑可以留在视图中，因为视图确实需要一种在将数据临时传递给模型之前存储数据的方式，但从现在开始它不会再定义我们的数据记录。
- en: We'll be adding more views to our application as we move forward.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，我们将向我们的应用程序添加更多视图。
- en: What is a controller?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是控制器？
- en: The **controller** is the Grand Central station for the application. It handles
    requests from the user and takes care of routing data between the views and the
    model. Most variations of MVC change the role (and sometimes the name) of the
    controller, but the important thing is that it acts as the intermediary between
    the view and the model. Our controller object will need to hold references to
    the views and models used by our application and be responsible for managing interactions
    between them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制器**是应用程序的大中央车站。它处理用户的请求，并负责在视图和模型之间路由数据。MVC的大多数变体都会改变控制器的角色（有时甚至是名称），但重要的是它充当视图和模型之间的中介。我们的控制器对象将需要保存应用程序使用的视图和模型的引用，并负责管理它们之间的交互。'
- en: 'Examples of code you find in the controller include the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中找到的代码示例包括以下内容：
- en: Startup and shutdown logic for the application
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的启动和关闭逻辑
- en: Callbacks for user interface events
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面事件的回调
- en: Creation of model and view instances
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型和视图实例的创建
- en: Our `Application` object is currently acting as the controller for our application,
    though it has some view and model logic in it as well. As the application evolves,
    we'll be moving more presentation logic into the views and more data logic into
    the models, leaving mainly connecting code in our `Application` object.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Application`对象目前充当着应用程序的控制器，尽管它也包含一些视图和模型逻辑。随着应用程序的发展，我们将把更多的展示逻辑移到视图中，将更多的数据逻辑移到模型中，留下的主要是连接代码在我们的`Application`对象中。
- en: Why complicate our design?
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要复杂化我们的设计？
- en: Initially, it may seem like a lot of needless overhead to split up the application
    this way. We'll have to shuttle data around between different objects and ultimately
    write more code to do exactly the same thing. Why would we do this?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，以这种方式拆分应用程序似乎会增加很多不必要的开销。我们将不得不在不同对象之间传输数据，并最终编写更多的代码来完成完全相同的事情。为什么我们要这样做呢？
- en: Put simply, we're doing it to make expansion manageable. As the application
    grows, the complexity will also grow. Isolating our components from one another
    limits the amount of complexity that any one component has to manage; for example,
    when we restructure the layout of our form view, we shouldn't need to worry about
    how the model will structure the data in the output file. Those two aspects of
    the program should be independent of one another.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们这样做是为了使扩展可管理。随着应用程序的增长，复杂性也会增加。将我们的组件相互隔离限制了任何一个组件需要管理的复杂性的数量；例如，当我们重新构造表单视图的布局时，我们不应该担心模型将如何在输出文件中结构化数据。程序的这两个方面应该彼此独立。
- en: It also helps us to be consistent about where we put certain types of logic.
    For example, having a discrete model object helps us to avoid littering our UI
    code with ad hoc data queries or file access attempts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有助于我们在放置某些类型的逻辑时保持一致。例如，拥有一个独立的模型对象有助于我们避免在UI代码中散布临时数据查询或文件访问尝试。
- en: The bottom line is, without some guiding architectural strategy, our program
    is in danger of becoming a hopeless tangle of spaghetti logic. Even without adhering
    to a strict definition of MVC design, consistently following even a loose MVC
    pattern will save a lot of headaches as the application becomes more complex.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，如果没有一些指导性的架构策略，我们的程序很可能会变成一团无法解开的逻辑混乱。即使不遵循严格的MVC设计定义，始终遵循松散的MVC模式也会在应用程序变得更加复杂时节省很多麻烦。
- en: Structuring our application directory
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的应用程序目录结构
- en: Just as logically breaking our program into separate concerns helps us manage
    the logical complexity of each component, physically breaking the code into multiple
    files helps us keep the complexity of each file manageable. It also reinforces
    more isolation between components; for example, you can't share global variables,
    and if your models file imports `tkinter`, you know you're doing something wrong.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序逻辑上分解为单独的关注点有助于我们管理每个组件的逻辑复杂性，将代码物理上分解为多个文件有助于我们保持每个文件的复杂性可管理。这也加强了组件之间的隔离；例如，您不能共享全局变量，如果您的模型文件导入了`tkinter`，那么您就知道您做错了什么。
- en: Basic directory structure
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本目录结构
- en: 'There is no official standard for laying out a Python application directory,
    but there are some common conventions that will help us keep things tidy and make
    it easier to package our software later on. Let''s set up our directory structure
    as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python应用程序目录布局没有官方标准，但有一些常见的约定可以帮助我们保持整洁，并且以后更容易打包我们的软件。让我们按照以下方式设置我们的目录结构：
- en: To begin, create a directory called `ABQ_Data_Entry`. This is the **root directory**
    of our application, so whenever we refer to the **application root**, this is
    it.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个名为`ABQ_Data_Entry`的目录。这是我们应用程序的**根目录**，所以每当我们提到**应用程序根目录**时，就是它。
- en: Under the application root, create another directory called `abq_data_entry`.
    Notice it's in lowercase. This is going to be a Python package that will contain
    all the code for the application; it should always be given a fairly unique name
    so that it won't be confused with existing Python packages. Normally, you wouldn't
    have a different casing between the application root and this main module, but
    it doesn't hurt anything either; we're doing it here to avoid confusion.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序根目录下，创建另一个名为`abq_data_entry`的目录。注意它是小写的。这将是一个Python包，其中将包含应用程序的所有代码；它应该始终被赋予一个相当独特的名称，以免与现有的Python包混淆。通常情况下，应用程序根目录和主模块之间不会有不同的大小写，但这也不会有任何问题；我们在这里这样做是为了避免混淆。
- en: Python modules should always be named using all lowercase names with underscores.
    This convention is spelled out in PEP 8, Python's official style guide. See [https://www.python.org/dev/peps/pep-0008](https://www.python.org/dev/peps/pep-0008)
    for more information about PEP 8.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python模块的命名应始终使用全部小写的名称和下划线。这个约定在PEP 8中有详细说明，PEP 8是Python的官方风格指南。有关PEP 8的更多信息，请参见[https://www.python.org/dev/peps/pep-0008](https://www.python.org/dev/peps/pep-0008)。
- en: Next, create a `docs` folder under the application root. This folder will be
    for documentation files about the application.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在应用程序根目录下创建一个名为`docs`的文件夹。这个文件夹将用于存放关于应用程序的文档文件。
- en: 'Finally, create two empty files in the application root: `README.rst` and `abq_data_entry.py`. Your
    directory structure should look as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在应用程序根目录中创建两个空文件：`README.rst`和`abq_data_entry.py`。你的目录结构应该如下所示：
- en: '![](assets/830b3415-2492-4ad3-a86e-1e17b65c7a9b.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/830b3415-2492-4ad3-a86e-1e17b65c7a9b.png)'
- en: The abq_data_entry.py file
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: abq_data_entry.py文件
- en: Just as before, `abq_data_entry.py` is the main file that gets executed to start
    the program. Unlike before, though, it won't contain the bulk of our program.
    In fact, this file should be as minimal as possible.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就像以前一样，`abq_data_entry.py`是执行程序的主文件。不过，与以前不同的是，它不会包含大部分的程序。实际上，这个文件应该尽可能地简化。
- en: 'Open the file and enter the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件并输入以下代码：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save and close the file. The only purpose of this file is to import our `Application`
    class, make an instance of it, and run it. The remainder of the work will happen
    inside the `abq_data_entry` package. We haven't created that yet, so this file
    won't run just yet; before we do, let's deal with our documentation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并关闭文件。这个文件的唯一目的是导入我们的`Application`类，创建一个实例，并运行它。其余的工作将在`abq_data_entry`包内进行。我们还没有创建这个包，所以这个文件暂时无法运行；在我们处理文档之前，让我们先处理一下文档。
- en: The README.rst file
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: README.rst文件
- en: Since as far back as the 1970s, programs have included a short text file called
    `README` containing a condensed summary of the program's documentation. For small
    programs, it may be the only documentation; for larger programs, it usually contains
    essential pre-flight instructions for users or administrators.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 自上世纪70年代以来，程序一直包含一个名为`README`的简短文本文件，其中包含程序文档的简要摘要。对于小型程序，它可能是唯一的文档；对于大型程序，它通常包含用户或管理员的基本预先飞行指令。
- en: 'There''s no prescribed set of contents for a `README` file, but as a basic
    guideline, consider the following sections:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`README`文件没有规定的内容集，但作为基本指南，考虑以下部分：'
- en: '**Description**: A brief description of the program and its function. We can
    reuse the description from our specification, or something like it. This might
    also contain a brief list of the main features.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：程序及其功能的简要描述。我们可以重用规格说明中的描述，或类似的描述。这可能还包含主要功能的简要列表。'
- en: '**Author information**: The names of the authors and copyright date. This is
    especially important if you plan to share your software, but even for something
    in-house it''s useful for future maintainers to know who created the software
    and when.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作者信息**：作者的姓名和版权日期。如果你计划分享你的软件，这一点尤为重要，但即使对于公司内部的软件，让未来的维护者知道谁创建了软件以及何时创建也是有用的。'
- en: '**Requirements**: A list of the software and hardware requirements for the
    software, if any.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要求**：软件和硬件要求的列表，如果有的话。'
- en: '**Installation**: Instructions for installing the software, its prerequisites,
    dependencies, and basic setup.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：安装软件、先决条件、依赖项和基本设置的说明。'
- en: '**Configuration**: How to configure the application and what options are available.
    This is generally aimed at the command-line or configuration file options, not
    options set interactively in the program.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：如何配置应用程序以及有哪些选项可用。这通常针对命令行或配置文件选项，而不是在程序中交互设置的选项。'
- en: '**Usage**: A description of how to launch the application, command-line arguments,
    and other notes a user would need to know to use the basic functionality of the
    application.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用法**：启动应用程序的描述，命令行参数和用户需要了解的其他注意事项。'
- en: '**General notes**: A catch-all for notes or critical information users should
    be aware of.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一般注意事项**：用户应该知道的注意事项或关键信息。'
- en: '**Bugs**: A list of known bugs or limitations in the application.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：应用程序中已知的错误或限制的列表。'
- en: Not all of these sections will apply to every program; for example, ABQ data
    entry doesn't currently have any configuration options, so there's no reason to
    have a configuration section. You might add other sections as well, depending
    on the situation; for example, publicly distributed software may have a FAQ section,
    or open source software might have a contributing section with instructions on
    how to submit patches.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是所有这些部分都适用于每个程序；例如，ABQ数据输入目前没有任何配置选项，所以没有理由有一个配置部分。根据情况，你可能会添加其他部分；例如，公开分发的软件可能会有一个常见问题解答部分，或者开源软件可能会有一个包含如何提交补丁的贡献部分。
- en: The `README` file is written in plain ASCII or Unicode text, either free-form
    or using a markup language. Since we're doing a Python project, we'll use reStructuredText,
    the official markup for Python documentation (which is why our file uses an `rst`
    file extension).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`README`文件以纯ASCII或Unicode文本编写，可以是自由格式的，也可以使用标记语言。由于我们正在进行一个Python项目，我们将使用reStructuredText，这是Python文档的官方标记语言（这就是为什么我们的文件使用`rst`文件扩展名）。'
- en: ReStructuredText
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReStructuredText
- en: The reStructuredText markup language is part of the Python `docutils` project,
    and a complete reference can be found at the Docutils website: [http://docutils.sourceforge.net](http://docutils.sourceforge.net).
    The `docutils` project also provides utilities for converting RST to formats like
    PDF, ODT, HTML, and LaTeX.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: reStructuredText标记语言是Python `docutils`项目的一部分，完整的参考资料可以在Docutils网站找到：[http://docutils.sourceforge.net](http://docutils.sourceforge.net)。`docutils`项目还提供了将RST转换为PDF、ODT、HTML和LaTeX等格式的实用程序。
- en: 'The basics can be grasped fairly quickly, so let''s go through them:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 基础知识可以很快掌握，所以让我们来看看它们：
- en: Paragraphs are created by leaving a blank line between blocks of text.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 段落是通过在文本块之间留下一个空行来创建的。
- en: Headings are created by underlining a single line of text with a non-alphanumeric
    symbol. The exact symbol doesn't matter; whichever one you use first will be treated
    as a level one heading for the rest of the document, whichever you use second
    as a level two, and so on. Conventionally, `=` is usually used for level one,
    `-` for level two, `~` for level three, and `+` for level four.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题通过用非字母数字符号下划线单行文本来创建。确切的符号并不重要；你首先使用的符号将被视为文档其余部分的一级标题，你其次使用的符号将被视为二级标题，依此类推。按照惯例，`=`通常用于一级，`-`用于二级，`~`用于三级，`+`用于四级。
- en: Titles and subtitles are created like headings, except with a line of symbols
    above and below.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题和副标题的创建方式与标题相似，只是在上下都有一行符号。
- en: Bullet lists are created by starting a line with any of `*`, `-`, or `+` and
    a space. Switching symbols will create a sub-list, and multiline points are created
    by indenting subsequent lines to where the text starts at the first bullet point.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目列表是通过在行首加上`*`、`-`或`+`和一个空格来创建的。切换符号将创建子列表，多行点由将后续行缩进到文本从第一个项目符号开始的位置来创建。
- en: Numbered lists are created like bullet lists, but using either digits (which
    don't need to be correctly ordered) or the `#` symbol as a bullet.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编号列表的创建方式与项目列表相似，但使用数字（不需要正确排序）或`#`符号作为项目符号。
- en: Code examples can be specified inline by enclosing them in double backtick characters
    ([PRE1]
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码示例可以通过用双反引号字符括起来来指定内联([PRE1]
- en: ============================
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ============================
- en: ABQ Data Entry Application
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ABQ数据输入应用程序
- en: ============================
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ============================
- en: Description
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 描述
- en: ===========
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ===========
- en: This program provides a data entry form for ABQ Agrilabs laboratory data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序为ABQ Agrilabs实验室数据提供数据输入表单。
- en: Features
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 特点
- en: '--------'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '--------'
- en: '* Provides a validated entry form to ensure correct data'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '* 提供经过验证的输入表单，以确保正确的数据'
- en: '* Stores data to ABQ-format CSV files'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '* 将数据存储到ABQ格式的CSV文件中'
- en: '* Auto-fills form fields whenever possible'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '* 在可能的情况下自动填充表单字段'
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Authors
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 作者
- en: =======
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: =======
- en: Alan D Moore, 2018
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Alan D Moore, 2018
- en: '[PRE3]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Requirements
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要求
- en: ============
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ============
- en: '* Python 3'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '* Python 3'
- en: '* Tkinter'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '* Tkinter'
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Usage
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 用法
- en: =====
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: =====
- en: 'To start the application, run::'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '要启动应用程序，请运行::'
- en: python3 ABQ_Data_Entry/abq_data_entry.py
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: python3 ABQ_Data_Entry/abq_data_entry.py
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: General Notes
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一般说明
- en: =============
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: =============
- en: The CSV file will be saved to your current directory in the format "abq_data_record_CURRENTDATE.csv",
    where CURRENTDATE is today's date in ISO format.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件将以“abq_data_record_CURRENTDATE.csv”的格式保存在您当前的目录中，其中CURRENTDATE是今天的日期，采用ISO格式。
- en: This program only appends to the CSV file.  You should have a spreadsheet program
    installed in case you need to edit or check the file.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序仅追加到CSV文件。您应该安装电子表格程序，以防需要编辑或检查文件。
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: from abq_data_entry import application
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: from abq_data_entry import application
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'class FieldTypes:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'class FieldTypes:'
- en: string = 1
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: string = 1
- en: string_list = 2
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: string_list = 2
- en: iso_date_string = 3
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: iso_date_string = 3
- en: long_string = 4
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: long_string = 4
- en: decimal = 5
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: decimal = 5
- en: integer = 6
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: integer = 6
- en: boolean = 7
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: boolean = 7
- en: '[PRE8]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: import csv
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: import csv
- en: import os
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: import os
- en: from .constants import FieldTypes as FT
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: from .constants import FieldTypes as FT
- en: 'class CSVModel:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'class CSVModel:'
- en: '"""CSV file storage"""'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '"""CSV文件存储"""'
- en: fields = {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 字段 = {
- en: '"Date": {''req'': True, ''type'': FT.iso_date_string},'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '"日期": {''req'': True, ''type'': FT.iso_date_string},'
- en: '"Time": {''req'': True, ''type'': FT.string_list,'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '"时间": {''req'': True, ''type'': FT.string_list,'
- en: '''values'': [''8:00'', ''12:00'', ''16:00'', ''20:00'']},'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '''values'': [''8:00'', ''12:00'', ''16:00'', ''20:00'']},'
- en: '"Technician": {''req'': True, ''type'':  FT.string},'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '"技术员": {''req'': True, ''type'':  FT.string},'
- en: '"Lab": {''req'': True, ''type'': FT.string_list,'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '"实验室": {''req'': True, ''type'': FT.string_list,'
- en: '''values'': [''A'', ''B'', ''C'', ''D'', ''E'']},'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '''values'': [''A'', ''B'', ''C'', ''D'', ''E'']},'
- en: '"Plot": {''req'': True, ''type'': FT.string_list,'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '"情节": {''req'': True, ''type'': FT.string_list,'
- en: '''values'': [str(x) for x in range(1, 21)]},'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '''values'': [str(x) for x in range(1, 21)]},'
- en: '"Seed sample":  {''req'': True, ''type'': FT.string},'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '"种子样本":  {''req'': True, ''type'': FT.string},'
- en: '"Humidity": {''req'': True, ''type'': FT.decimal,'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '"湿度": {''req'': True, ''type'': FT.decimal,'
- en: '''min'': 0.5, ''max'': 52.0, ''inc'': .01},'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 0.5, ''max'': 52.0, ''inc'': .01},'
- en: '"Light": {''req'': True, ''type'': FT.decimal,'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '"光": {''req'': True, ''type'': FT.decimal,'
- en: '''min'': 0, ''max'': 100.0, ''inc'': .01},'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 0, ''max'': 100.0, ''inc'': .01},'
- en: '"Temperature": {''req'': True, ''type'': FT.decimal,'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '"温度": {''req'': True, ''type'': FT.decimal,'
- en: '''min'': 4, ''max'': 40, ''inc'': .01},'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 4, ''max'': 40, ''inc'': .01},'
- en: '"Equipment Fault": {''req'': False, ''type'': FT.boolean},'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '"设备故障": {''req'': False, ''type'': FT.boolean},'
- en: '"Plants": {''req'': True, ''type'': FT.integer,'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '"植物": {''req'': True, ''type'': FT.integer,'
- en: '''min'': 0, ''max'': 20},'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 0, ''max'': 20},'
- en: '"Blossoms": {''req'': True, ''type'': FT.integer,'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '"花": {''req'': True, ''type'': FT.integer,'
- en: '''min'': 0, ''max'': 1000},'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 0, ''max'': 1000},'
- en: '"Fruit": {''req'': True, ''type'': FT.integer,'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '"水果": {''req'': True, ''type'': FT.integer,'
- en: '''min'': 0, ''max'': 1000},'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 0, ''max'': 1000},'
- en: '"Min Height": {''req'': True, ''type'': FT.decimal,'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '"最小高度": {''req'': True, ''type'': FT.decimal,'
- en: '''min'': 0, ''max'': 1000, ''inc'': .01},'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 0, ''max'': 1000, ''inc'': .01},'
- en: '"Max Height": {''req'': True, ''type'': FT.decimal,'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '"最大高度": {''req'': True, ''type'': FT.decimal,'
- en: '''min'': 0, ''max'': 1000, ''inc'': .01},'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 0, ''max'': 1000, ''inc'': .01},'
- en: '"Median Height": {''req'': True, ''type'': FT.decimal,'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '"中位数高度": {''req'': True, ''type'': FT.decimal,'
- en: '''min'': 0, ''max'': 1000, ''inc'': .01},'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '''min'': 0, ''max'': 1000, ''inc'': .01},'
- en: '"Notes": {''req'': False, ''type'': FT.long_string}'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '"注释": {''req'': False, ''type'': FT.long_string}'
- en: '}'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE9]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: datestring = datetime.today().strftime("%Y-%m-%d")
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: datestring = datetime.today().strftime("%Y-%m-%d")
- en: filename = "abq_data_record_{}.csv".format(datestring)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: filename = "abq_data_record_{}.csv".format(datestring)
- en: newfile = not os.path.exists(filename)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: newfile = not os.path.exists(filename)
- en: data = self.recordform.get()
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: data = self.recordform.get()
- en: 'with open(filename, ''a'') as fh:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'with open(filename, ''a'') as fh:'
- en: csvwriter = csv.DictWriter(fh, fieldnames=data.keys())
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: csvwriter = csv.DictWriter(fh, fieldnames=data.keys())
- en: 'if newfile:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'if newfile:'
- en: csvwriter.writeheader()
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: csvwriter.writeheader()
- en: csvwriter.writerow(data)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: csvwriter.writerow(data)
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'def __init__(self, filename):'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, filename):'
- en: self.filename = filename
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: self.filename = filename
- en: '[PRE11]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'def save_record(self, data):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'def save_record(self, data):'
- en: '"""Save a dict of data to the CSV file"""'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '"""将数据字典保存到CSV文件"""'
- en: newfile = not os.path.exists(self.filename)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: newfile = not os.path.exists(self.filename)
- en: 'with open(self.filename, ''a'') as fh:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'with open(self.filename, ''a'') as fh:'
- en: csvwriter = csv.DictWriter(fh,
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: csvwriter = csv.DictWriter(fh,
- en: fieldnames=self.fields.keys())
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: fieldnames=self.fields.keys())
- en: 'if newfile:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 'if newfile:'
- en: csvwriter.writeheader()
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: csvwriter.writeheader()
- en: csvwriter.writerow(data)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: csvwriter.writerow(data)
- en: '[PRE12]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: import csv
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: import csv
- en: import os
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: import os
- en: '[PRE13]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: import tkinter as tk
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: import tkinter as tk
- en: from tkinter import ttk
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: from tkinter import ttk
- en: '[PRE14]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: from datetime import datetime
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: from datetime import datetime
- en: '[PRE15]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: from decimal import Decimal, InvalidOperation
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: from decimal import Decimal, InvalidOperation
- en: '[PRE16]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: import tkinter as tk
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: import tkinter as tk
- en: from tkinter import ttk
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: from tkinter import ttk
- en: from datetime import datetime
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: from datetime import datetime
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: from . import widgets as w
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: from . import widgets as w
- en: '[PRE18]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: line 1
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: line 1
- en: self.inputs['Date'] = w.LabelInput(
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Date'] = w.LabelInput(
- en: recordinfo, "Date",
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: recordinfo, "Date",
- en: input_class=w.DateEntry,
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: input_class=w.DateEntry,
- en: input_var=tk.StringVar()
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: input_var=tk.StringVar()
- en: )
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: self.inputs['Date'].grid(row=0, column=0)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Date'].grid(row=0, column=0)
- en: self.inputs['Time'] = w.LabelInput(
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Time'] = w.LabelInput(
- en: recordinfo, "Time",
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: recordinfo, "Time",
- en: input_class=w.ValidatedCombobox,
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: input_class=w.ValidatedCombobox,
- en: input_var=tk.StringVar(),
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: input_var=tk.StringVar(),
- en: 'input_args={"values": ["8:00", "12:00", "16:00", "20:00"]}'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'input_args={"values": ["8:00", "12:00", "16:00", "20:00"]}'
- en: )
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: self.inputs['Time'].grid(row=0, column=1)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Time'].grid(row=0, column=1)
- en: self.inputs['Technician'] = w.LabelInput(
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Technician'] = w.LabelInput(
- en: recordinfo, "Technician",
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: recordinfo, "Technician",
- en: input_class=w.RequiredEntry,
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: input_class=w.RequiredEntry,
- en: input_var=tk.StringVar()
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: input_var=tk.StringVar()
- en: )
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: self.inputs['Technician'].grid(row=0, column=2)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Technician'].grid(row=0, column=2)
- en: '[PRE19]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: field_types = {
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: field_types = {
- en: 'FT.string: (RequiredEntry, tk.StringVar),'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 'FT.string: (RequiredEntry, tk.StringVar),'
- en: 'FT.string_list: (ValidatedCombobox, tk.StringVar),'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 'FT.string_list: (ValidatedCombobox, tk.StringVar),'
- en: 'FT.iso_date_string: (DateEntry, tk.StringVar),'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'FT.iso_date_string: (DateEntry, tk.StringVar),'
- en: 'FT.long_string: (tk.Text, lambda: None),'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 'FT.long_string: (tk.Text, lambda: None),'
- en: 'FT.decimal: (ValidatedSpinbox, tk.DoubleVar),'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 'FT.decimal: (ValidatedSpinbox, tk.DoubleVar),'
- en: '[PRE20]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'FT.integer: (ValidatedSpinbox, tk.IntVar),'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'FT.integer: (ValidatedSpinbox, tk.IntVar),'
- en: 'FT.boolean: (ttk.Checkbutton, tk.BooleanVar)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 'FT.boolean: (ttk.Checkbutton, tk.BooleanVar)'
- en: '}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: def __init__(self, parent, label='', input_class=None,
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: def __init__(self, parent, label='', input_class=None,
- en: input_var=None, input_args=None, label_args=None,
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: input_var=None, input_args=None, label_args=None,
- en: 'field_spec=None, **kwargs):'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 'field_spec=None, **kwargs):'
- en: super().__init__(parent, **kwargs)
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: super().__init__(parent, **kwargs)
- en: input_args = input_args or {}
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: input_args = input_args or {}
- en: label_args = label_args or {}
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: label_args = label_args or {}
- en: 'if field_spec:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 'if field_spec:'
- en: field_type = field_spec.get('type', FT.string)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: field_type = field_spec.get('type', FT.string)
- en: input_class = input_class or
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: input_class = input_class or
- en: self.field_types.get(field_type)[0]
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: self.field_types.get(field_type)[0]
- en: var_type = self.field_types.get(field_type)[1]
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: var_type = self.field_types.get(field_type)[1]
- en: self.variable = input_var if input_var else var_type()
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: self.variable = input_var if input_var else var_type()
- en: min, max, increment
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: min, max, increment
- en: 'if ''min'' in field_spec and ''from_'' not in input_args:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字段规范中包含'min'，并且输入参数中不包含'from_'：
- en: input_args['from_'] = field_spec.get('min')
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: input_args['from_'] = field_spec.get('min')
- en: 'if ''max'' in field_spec and ''to'' not in input_args:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字段规范中包含'max'，并且输入参数中不包含'to'：
- en: input_args['to'] = field_spec.get('max')
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: input_args['to'] = field_spec.get('max')
- en: 'if ''inc'' in field_spec and ''increment'' not in input_args:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 'if ''inc'' in field_spec and ''increment'' not in input_args:'
- en: input_args['increment'] = field_spec.get('inc')
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: input_args['increment'] = field_spec.get('inc')
- en: values
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: values
- en: 'if ''values'' in field_spec and ''values'' not in input_args:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字段规范中包含'values'，并且输入参数中不包含'values'：
- en: input_args['values'] = field_spec.get('values')
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: input_args['values'] = field_spec.get('values')
- en: 'else:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'self.variable = input_var        if input_class in (ttk.Checkbutton, ttk.Button,
    ttk.Radiobutton):'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 'self.variable = input_var        if input_class in (ttk.Checkbutton, ttk.Button,
    ttk.Radiobutton):'
- en: input_args["text"] = label
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: input_args["text"] = label
- en: input_args["variable"] = self.variable
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: input_args["variable"] = self.variable
- en: 'else:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: self.label = ttk.Label(self, text=label, **label_args)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: self.label = ttk.Label(self, text=label, **label_args)
- en: self.label.grid(row=0, column=0, sticky=(tk.W + tk.E))
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: self.label.grid(row=0, column=0, sticky=(tk.W + tk.E))
- en: input_args["textvariable"] = self.variable
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: input_args["textvariable"] = self.variable
- en: '... Remainder of __init__() is the same'
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '... __init__()的其余部分相同'
- en: '[PRE22]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'def __init__(self, parent, fields, *args, **kwargs):'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, parent, fields, *args, **kwargs):'
- en: '[PRE23]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: self.inputs['Date'] = w.LabelInput(
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Date'] = w.LabelInput(
- en: recordinfo, "Date",
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: recordinfo, "Date",
- en: field_spec=fields['Date'])
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: field_spec=fields['Date'])
- en: self.inputs['Date'].grid(row=0, column=0)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Date'].grid(row=0, column=0)
- en: self.inputs['Time'] = w.LabelInput(
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Time'] = w.LabelInput(
- en: recordinfo, "Time",
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: recordinfo, "Time",
- en: field_spec=fields['Time'])
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: field_spec=fields['Time'])
- en: self.inputs['Time'].grid(row=0, column=1)
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Time'].grid(row=0, column=1)
- en: self.inputs['Technician'] = w.LabelInput(
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Technician'] = w.LabelInput(
- en: recordinfo, "Technician",
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: recordinfo, "Technician",
- en: field_spec=fields['Technician'])
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: field_spec=fields['Technician'])
- en: self.inputs['Technician'].grid(row=0, column=2)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Technician'].grid(row=0, column=2)
- en: '[PRE24]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: self.inputs['Min Height'] = w.LabelInput(
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: self.inputs['Min Height'] = w.LabelInput(
- en: plantinfo, "Min Height (cm)",
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: plantinfo, "Min Height (cm)",
- en: field_spec=fields['Min Height'],
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: field_spec=fields['Min Height'],
- en: 'input_args={"max_var": max_height_var,'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 'input_args={"max_var": max_height_var,'
- en: '"focus_update_var": min_height_var})'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '"focus_update_var": min_height_var})'
- en: '[PRE25]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: import tkinter as tk
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: import tkinter as tk
- en: from tkinter import ttk
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: from tkinter import ttk
- en: from datetime import datetime
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: from datetime import datetime
- en: from . import views as v
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: from . import views as v
- en: from . import models as m
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: from . import models as m
- en: '[PRE26]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: self.recordform = v.DataRecordForm(self, m.CSVModel.fields)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: self.recordform = v.DataRecordForm(self, m.CSVModel.fields)
- en: '[PRE27]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'def on_save(self):'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 'def on_save(self):'
- en: '"""Handles save button clicks"""'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '"""处理保存按钮点击"""'
- en: errors = self.recordform.get_errors()
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: errors = self.recordform.get_errors()
- en: 'if errors:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 'if errors:'
- en: self.status.set(
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: self.status.set(
- en: '"Cannot save, error in fields: {}"'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '"无法保存，字段错误：{}"'
- en: .format(', '.join(errors.keys())))
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: .format(', '.join(errors.keys())))
- en: return False
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: return False
- en: For now, we save to a hardcoded filename
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目前，我们保存到一个硬编码的文件名
- en: with a datestring.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 带有日期字符串。
- en: datestring = datetime.today().strftime("%Y-%m-%d")
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: datestring = datetime.today().strftime("%Y-%m-%d")
- en: filename = "abq_data_record_{}.csv".format(datestring)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: filename = "abq_data_record_{}.csv".format(datestring)
- en: model = m.CSVModel(filename)
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: model = m.CSVModel(filename)
- en: data = self.recordform.get()
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: data = self.recordform.get()
- en: model.save_record(data)
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 模型保存记录（数据）
- en: self.records_saved += 1
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: self.records_saved += 1
- en: self.status.set(
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: self.status.set(
- en: '"{} records saved this session".'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '"{}条记录已保存此会话"。'
- en: format(self.records_saved)
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: format(self.records_saved)
- en: )
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: self.recordform.reset()
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: self.recordform.reset()
- en: '[PRE28]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: python3 abq_data_entry.py
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: python3 abq_data_entry.py
- en: '[PRE29]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: git init
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: git init
- en: '[PRE30]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '*.pyc'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '*.pyc'
- en: __pycache__/
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: __pycache__/
- en: '[PRE31]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: git add abq_data_entry
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: git add abq_data_entry
- en: git add abq_data_entry.py
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: git add abq_data_entry.py
- en: git add docs
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: git add docs
- en: git add README.rst
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: git add README.rst
- en: '[PRE32]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: On branch master
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在主分支上
- en: No commits yet
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 还没有提交
- en: 'Changes to be committed:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 要提交的更改：
- en: (use "git rm --cached <file>..." to unstage)
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: （使用“git rm --cached <file>…”取消暂存）
- en: 'new file:   README.rst'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：README.rst
- en: 'new file:   abq_data_entry.py'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：abq_data_entry.py
- en: 'new file:   abq_data_entry/__init__.py'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：abq_data_entry/__init__.py
- en: 'new file:   abq_data_entry/application.py'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：abq_data_entry/application.py
- en: 'new file:   abq_data_entry/models.py'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：abq_data_entry/models.py
- en: 'new file:   abq_data_entry/views.py'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：abq_data_entry/views.py
- en: 'new file:   abq_data_entry/widgets.py'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：abq_data_entry/widgets.py
- en: 'new file:   docs/Application_layout.png'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：docs/Application_layout.png
- en: 'new file:   docs/abq_data_entry_spec.rst'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：docs/abq_data_entry_spec.rst
- en: 'new file:   docs/lab-tech-paper-form.png'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：docs/lab-tech-paper-form.png
- en: 'Untracked files:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 未跟踪的文件：
- en: (use "git add <file>..." to include in what will be committed)
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: （使用“git add <file>…”将其包含在将要提交的内容中）
- en: .gitignore
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: .gitignore
- en: '[PRE33]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: git commit -m "Initial commit"
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: git commit -m "Initial commit"
- en: '[PRE34]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: alanm@alanm-laptop:~/ABQ_Data_Entry$ git log
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: alanm@alanm-laptop:~/ABQ_Data_Entry$ git log
- en: commit df48707422875ff545dc30f4395f82ad2d25f103 (HEAD -> master)
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 提交df48707422875ff545dc30f4395f82ad2d25f103（HEAD -> master）
- en: 'Author: Alan Moore <alan@example.com>'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：Alan Moore <alan@example.com>
- en: 'Date:   Thu Dec 21 18:12:17 2017 -0600'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2017年12月21日星期四18:12:17 -0600
- en: Initial commit
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 初始提交
- en: '```'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: As you can see, the `Author`, `Date`, and `commit` message is displayed for
    our last commit. If we had more commits, they would be listed here as well, from
    newest to oldest. The long hexadecimal value you see in the first line of output
    is the **commit hash**, a unique value that identifies the commit. This value
    can be used to refer to the commit in other operations.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们上次提交的`作者`、`日期`和`提交`消息都显示出来。如果我们有更多的提交，它们也会在这里列出，从最新到最旧。您在输出的第一行中看到的长十六进制值是**提交哈希**，这是一个唯一的值，用于标识提交。这个值可以用来在其他操作中引用提交。
- en: 'For example, we can use it to reset our repository to a past state, as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用它将我们的存储库重置到过去的状态，如下所示：
- en: Delete the `README.rst` file, and verify that it's completely gone.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`README.rst`文件，并验证它已完全消失。
- en: Now, enter the command `git reset --hard df48707`, replacing `df48707` with
    the first seven characters of your commit's hash.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，输入命令`git reset --hard df48707`，将`df48707`替换为您提交哈希的前七个字符。
- en: 'Check your file listing again: the `README.rst` file is back.'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次检查您的文件清单：`README.rst`文件已经回来了。
- en: What happened here is that we altered our repository, then told Git to hard
    reset the state of the repository to our first commit. If you don't want to reset
    your repository, you can also checkout an old commit temporarily, or create a
    branch using a particular commit as the base. As you can see already, this gives
    us a powerful safety net for experimentation; no matter how much you tinker with
    the code, any commit is just a command away!
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的是我们改变了我们的存储库，然后告诉Git将存储库的状态硬重置到我们的第一个提交。如果您不想重置您的存储库，您也可以暂时检出一个旧的提交，或者使用特定的提交作为基础创建一个分支。正如您已经看到的，这为我们提供了一个强大的实验安全网；无论您如何调整代码，任何提交都只是一个命令的距离！
- en: Git has many more features that are beyond the scope of this book. If you'd
    like to learn more, the Git project provides a free online manual at [https://git-scm.com/book](https://git-scm.com/book)
    where you can learn about advanced features like branching and setting up remote
    repositories. For now, the important thing is to commit changes as you go, so
    that you maintain your safety net and document the history of changes.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: Git有许多更多的功能超出了本书的范围。如果您想了解更多信息，Git项目在[https://git-scm.com/book](https://git-scm.com/book)提供了免费的在线手册，您可以在那里了解分支和设置远程存储库等高级功能。目前，重要的是在进行更改时提交更改，以便保持您的安全网并记录更改的历史。
- en: Summary
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned to prepare your simple script for some serious
    expansion. You learned how to divide your application's areas of responsibility
    into separate components, and how to split your code into separate modules. You
    learned how to document your code using reStructuredText and track all your changes
    with version control.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了为您的简单脚本做一些严肃的扩展准备。您学会了如何将应用程序的职责领域划分为单独的组件，以及如何将代码分割成单独的模块。您学会了如何使用reStructuredText记录代码并使用版本控制跟踪所有更改。
- en: In the next chapter, we're going to put our new project layout to the test by
    implementing some new features. You'll learn how to work with Tkinter's application
    menu widgets, how to implement file opening and saving, and how to use message
    popups to alert users or confirm actions.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过实现一些新功能来测试我们的新项目布局。您将学习如何使用Tkinter的应用程序菜单小部件，如何实现文件打开和保存，以及如何使用消息弹出窗口来警告用户或确认操作。
