- en: Running System Administration Tasks with Fabric
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Fabric运行系统管理任务
- en: In the previous chapter, we used the `subprocess` module to run and spawn a
    system process inside the machine that hosted our Python script, and to return
    the output back to the Terminal. However, many automation tasks require access
    to remote servers to execute commands, which is not easy to do using a sub-process.
    This becomes a piece of cake with the use of another Python module: `Fabric`.
    The library makes connections to remote hosts and executes different tasks, such
    as uploading and downloading files, running commands with specific user IDs, and
    prompting users for input. The `Fabric` Python module is a robust tool for administrating
    dozens of Linux machines from a central point.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了`subprocess`模块在托管我们的Python脚本的机器内运行和生成系统进程，并将输出返回到终端。然而，许多自动化任务需要访问远程服务器以执行命令，这不容易使用子进程来实现。使用另一个Python模块`Fabric`就变得轻而易举。该库连接到远程主机并执行不同的任务，例如上传和下载文件，使用特定用户ID运行命令，并提示用户输入。`Fabric`
    Python模块是从一个中心点管理数十台Linux机器的强大工具。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is Fabric?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Fabric？
- en: Executing your first Fabric file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行您的第一个Fabric文件
- en: Other useful Fabric features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他有用的Fabric功能
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following tools should be installed and available in your environment:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具应安装并在您的环境中可用：
- en: Python 2.7.1x.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.7.1x。
- en: PyCharm Community or Pro Edition.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyCharm社区版或专业版。
- en: EVE-NG topology. Please refer to Chapter 8, *Preparing a Lab Environment*, for
    how to install and configure system servers.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EVE-NG拓扑。有关如何安装和配置系统服务器，请参阅第8章“准备实验环境”。
- en: You can find the full scripts developed in this chapter at the following GitHub
    URL: [https://github.com/TheNetworker/EnterpriseAutomation.git](https://github.com/TheNetworker/EnterpriseAutomation.git).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下GitHub URL找到本章中开发的完整脚本：[https://github.com/TheNetworker/EnterpriseAutomation.git](https://github.com/TheNetworker/EnterpriseAutomation.git)。
- en: What is Fabric?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Fabric？
- en: 'Fabric ([http://www.fabfile.org/](http://www.fabfile.org/)) is a high-level
    Python library that is used to connect to remote servers (through the paramiko
    library) and execute predefined tasks on them. It runs a tool called **fab** on
    the machine that hosts the fabric module. This tool will look for a `fabfile.py`
    file, located in the same directory that you run the tool in. The `fabfile.py` file
    contains your tasks, defined as a Python function that is called from the command
    line to start the execution on the servers. The Fabric tasks themselves are just
    normal Python functions, but they contain special methods that are used to execute
    commands on remote servers. Also, at the beginning of `fabfile.py`, you need to
    define some environmental variables, such as the remote hosts, username, password,
    and any other variables needed during execution:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric ([http://www.fabfile.org/](http://www.fabfile.org/))是一个高级Python库，用于连接到远程服务器（通过paramiko库）并在其上执行预定义的任务。它在托管fabric模块的机器上运行一个名为**fab**的工具。此工具将查找位于您运行工具的相同目录中的`fabfile.py`文件。`fabfile.py`文件包含您的任务，定义为从命令行调用的Python函数，以在服务器上启动执行。Fabric任务本身只是普通的Python函数，但它们包含用于在远程服务器上执行命令的特殊方法。此外，在`fabfile.py`的开头，您需要定义一些环境变量，例如远程主机、用户名、密码以及执行期间所需的任何其他变量：
- en: '![](../images/00154.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00154.jpeg)'
- en: Installation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Fabric requires Python 2.5 to 2.7\. You can install Fabric and all of its dependencies
    using `pip`, or you can use a system package manager, such as `yum` or `apt`.
    In both cases, you will have the `fab` utility ready and executable from your
    operating system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric需要Python 2.5到2.7。您可以使用`pip`安装Fabric及其所有依赖项，也可以使用系统包管理器，如`yum`或`apt`。在这两种情况下，您都将在操作系统中准备好并可执行`fab`实用程序。
- en: 'To install `fabric` using `pip`, run the following command on your automation
    server:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`pip`安装`fabric`，请在自动化服务器上运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../images/00155.gif)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00155.gif)'
- en: Notice that Fabric requires `paramiko`, which is a popular Python library that
    is used for establishing SSH connections.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Fabric需要`paramiko`，这是一个常用的Python库，用于建立SSH连接。
- en: 'You can validate the Fabric installation with two steps. First, make sure that
    you have the `fab` command available in your system:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过两个步骤验证Fabric安装。首先，确保您的系统中有`fab`命令可用：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The second step for verification is to open Python and try to import the `fabric`
    library. If there''s no error thrown, then Fabric has successfully installed:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 验证的第二步是打开Python并尝试导入`fabric`库。如果没有抛出错误，则Fabric已成功安装：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Fabric operations
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fabric操作
- en: There are many operations available in the `fabric` tool. These operations act
    as a functions inside the tasks in fabfile (there will be more about tasks later),
    but the following is a summary of the most important operations inside the `fabric`
    library.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`fabric`工具中有许多可用的操作。这些操作在fabfile中作为任务内的函数，但以下是`fabric`库中最重要操作的摘要。'
- en: Using run operation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用运行操作
- en: 'The syntax for the `run` operation in Fabric is as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric中`run`操作的语法如下：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will execute the command on a remote host, while the `shell` argument controls
    whether a shell (such as `/bin/sh`) should be created before execution (the same
    parameter also exists in the sub-process).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在远程主机上执行命令，而`shell`参数控制是否在执行之前创建一个shell（例如`/bin/sh`）（相同的参数也存在于子进程中）。
- en: 'After the command execution, Fabric will populate `.succeeded` or `.failed`,
    depending on the command output. You can check whether the command succeeded or
    failed by calling the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行后，Fabric将填充`.succeeded`或`.failed`，取决于命令输出。您可以通过调用以下内容来检查命令是否成功或失败：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using get operation
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用获取操作
- en: 'The syntax for the Fabric `get` operation is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric `get`操作的语法如下：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will download the files from the remote host to the machine running the
    `fabfile`, using either `rsync` or `scp` . This is commonly used when you need
    to gather log files to the server, for example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从远程主机下载文件到运行 `fabfile` 的机器，使用 `rsync` 或 `scp`。例如，当您需要将日志文件收集到服务器时，通常会使用此功能。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using put operation
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 put 操作
- en: 'The syntax for the Fabric `put` operation is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric `put` 操作的语法如下：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This operation will upload the file from the machine running the `fabfile` (local)
    to the remote host. Using `use_sudo` will solve the permissions issue when you
    upload to the root directory. Also, you can keep the current file permissions
    on both the local and remote server, or you can set new permissions:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作将从运行 `fabfile`（本地）的机器上传文件到远程主机。使用 `use_sudo` 将解决上传到根目录时的权限问题。此外，您可以保持本地和远程服务器上的当前文件权限，或者您可以设置新的权限：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using sudo operation
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 sudo 操作
- en: 'The syntax for the Fabric `sudo` operation is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric `sudo` 操作的语法如下：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This operation can be considered another wrapper around the `run()` command.
    However, the `sudo` operation will run the command with the root username by default
    regardless of the username used to execute the `fabfile`. Also it contains a user
    argument which could be used to run the command with a different username. Also,
    the `user` argument executes the command with a specific UID, while the `group`
    argument defines the GID:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作可以被视为 `run()` 命令的另一个包装器。但是，`sudo` 操作将默认使用 root 用户名运行命令，而不管用于执行 `fabfile`
    的用户名如何。它还包含一个用户参数，该参数可用于使用不同的用户名运行命令。此外，`user` 参数使用特定的 UID 执行命令，而 `group` 参数定义
    GID：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using prompt operation
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用提示操作
- en: 'The syntax for the Fabric `prompt` operation is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric `prompt` 操作的语法如下：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The user can provide a specific value for the task by using the `prompt` operation,
    and the input will be stored inside of a variable and used by tasks. Please note
    that you will be prompted for each host inside of the `fabfile`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用 `prompt` 操作为任务提供特定值，并且输入将存储在变量中并被任务使用。请注意，您将为 `fabfile` 中的每个主机提示：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using reboot operation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用重新启动操作
- en: 'The syntax for the Fabric `reboot` operation is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric `reboot` 操作的语法如下：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is a simple operation that reboots the host by default. Fabric will wait
    for 120 seconds before attempting to reconnect, but you can change this value
    to another one by using the `wait` argument:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的操作，默认情况下重新启动主机。Fabric 将等待 120 秒然后尝试重新连接，但是您可以使用 `wait` 参数将此值更改为其他值：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For a full list of other supported operations, please check [http://docs.fabfile.org/en/1.14/api/core/operations.html](http://docs.fabfile.org/en/1.14/api/core/operations.html).
    You can also check them directly from PyCharm, by looking at all of the autocomplete
    functions that pop up when you type *Ctrl + spacebar*. From `fabric.operations`
    import <*ctrl*+*space*> under `fabric.operations`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有关其他支持的操作的完整列表，请查看 [http://docs.fabfile.org/en/1.14/api/core/operations.html](http://docs.fabfile.org/en/1.14/api/core/operations.html)。您还可以直接从
    PyCharm 查看它们，方法是查看在键入 *Ctrl + 空格* 时弹出的所有自动完成函数。从 `fabric.operations` 导入 <*ctrl*+*space*> 在
    `fabric.operations` 下：
- en: '![](../images/00156.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00156.jpeg)'
- en: Executing your first Fabric file
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行您的第一个 Fabric 文件
- en: 'We now know how the operation works, so we will put it inside `fabfile` and
    create a full automation script that can work with remote machines. The first
    step for `fabfile` is to import the required classes. Most of them are located
    in `fabric.api`, so we will globally import all of them to our Python script:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道操作的工作原理，所以我们将把它放在 `fabfile` 中，并创建一个可以与远程机器一起工作的完整自动化脚本。`fabfile` 的第一步是导入所需的类。其中大部分位于
    `fabric.api` 中，因此我们将全局导入所有这些类到我们的 Python 脚本中：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The next part is to define the remote machine IP addresses, usernames, and
    passwords. In the case of our environment, we have two machines (besides the automation
    server) that run Ubuntu 16.04 and CentOS 7.4, respectively, with the following
    details:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义远程机器的 IP 地址、用户名和密码。在我们的环境中，除了自动化服务器之外，我们还有两台机器分别运行 Ubuntu 16.04 和 CentOS
    7.4，并具有以下详细信息：
- en: '| **Machine Type** | **IP Address** | **Username** | **Password** |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **机器类型** | **IP 地址** | **用户名** | **密码** |'
- en: '| Ubuntu 16.04 | `10.10.10.140` | `root` | `access123` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Ubuntu 16.04 | `10.10.10.140` | `root` | `access123` |'
- en: '| CentOS 7.4 | `10.10.10.193` | `root` | `access123` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| CentOS 7.4 | `10.10.10.193` | `root` | `access123` |'
- en: 'We will include them inside the Python script, as shown in the following snippet:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把它们包含在 Python 脚本中，如下面的片段所示：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that we use the variable called `env`, which is inherited from the `_AttributeDict`
    class. Inside of this variable, we can set the username and password from the
    SSH connection. You can also use the SSH keys stored in your `.ssh` directory
    by setting `env.use_ssh_config=True`; Fabric will use the keys to authenticate
    the connection.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用名为 `env` 的变量，该变量继承自 `_AttributeDict` 类。在此变量内部，我们可以设置来自 SSH 连接的用户名和密码。您还可以通过设置
    `env.use_ssh_config=True` 使用存储在 `.ssh` 目录中的 SSH 密钥；Fabric 将使用这些密钥进行身份验证。
- en: The last step is to define your tasks as a Python function. Tasks can use the
    preceding operations to execute commands.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将任务定义为 Python 函数。任务可以使用前面的操作来执行命令。
- en: 'The following is the full script:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的脚本：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding example, the following applies:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，适用以下内容：
- en: We defined two tasks. The first one will execute the `uname -s` command and
    return the output, then verify whether the command executed successfully or not.
    The task uses the `run()` operation to accomplish it.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了两个任务。第一个任务将执行 `uname -s` 命令并返回输出，然后验证命令是否成功执行。该任务使用 `run()` 操作来完成。
- en: 'The second task will use two operations: `prompt()` and `sudo()`. The first
    operation will ask the user to enter the full path to the directory, while the
    second operation will list all of the content in the directory.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个任务将使用两个操作：`prompt()` 和 `sudo()`。第一个操作将要求用户输入目录的完整路径，而第二个操作将列出目录中的所有内容。
- en: The final task, `main_tasks()`, will actually group the preceding two methods
    into one task, so that we can call it from the command line.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终任务`main_tasks()`将实际上将前面的两种方法组合成一个任务，以便我们可以从命令行调用它。
- en: 'In order to run the script, we will upload the file to the automation server
    and use the `fab` utility to run it:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行脚本，我们将上传文件到自动化服务器，并使用`fab`实用程序来运行它：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `-f` switch in the previous command is not mandatory if your filename is `fabfile.py`.
    If it is not, you will need to provide the name to the `fab` utility. Also, `fabfile`
    should be in the current directory; otherwise, you will need to provide the full
    path.Now we will run the `fabfile` by executing the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中，如果您的文件名不是`fabfile.py`，则`-f`开关是不强制的。如果不是，您将需要向`fab`实用程序提供名称。此外，`fabfile`应该在当前目录中；否则，您将需要提供完整的路径。现在我们将通过执行以下命令来运行`fabfile`：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The first task will be executed, and will return the output to the Terminal:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个任务将被执行，并将输出返回到终端：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we will enter `/var/log/` to list the contents:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进入`/var/log/`来列出内容：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The same applies if you need to list the configuration files under the `network-scripts`
    directory in the CentOS machine:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要列出CentOS机器上`network-scripts`目录下的配置文件，也是一样的：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, Fabric will disconnect from the two machines:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Fabric将断开与两台机器的连接：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: More about the fab tool
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有关fab工具的更多信息
- en: 'The `fab` tool itself supports many operations. It can be used to list the
    different tasks inside `fabfile`. It can also set the `fab` environment during
    execution. For example, you can define the host that will run the commands on
    it by using the `-H` or `--hosts` switches, without the need to specify it inside
    `fabfile`. This actually sets the `env.hosts` variable inside `fabfile` during
    execution:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`fab`工具本身支持许多操作。它可以用来列出`fabfile`中的不同任务。它还可以在执行期间设置`fab`环境。例如，您可以使用`-H`或`--hosts`开关定义将在其上运行命令的主机，而无需在`fabfile`中指定。这实际上是在执行期间在`fabfile`中设置`env.hosts`变量：'
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'On the other hand, you can define the command that you want to run by using
    the `fab` tool. This is something like Ansible ad hoc mode (we will discuss this
    in detail in [Chapter 13](part0168.html#506UG0-9cfcdc5beecd470bbeda046372f0337f),
    *Ansible for System Administration*):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，您可以使用`fab`工具定义要运行的命令。这有点像Ansible的临时模式（我们将在[第13章](part0168.html#506UG0-9cfcdc5beecd470bbeda046372f0337f)中详细讨论这个问题，*系统管理的Ansible*）：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you don't want to store the password in clear text inside of the `fabfile`
    script, then you have two options. The first one is to use the SSH identity file
    (`private-key`) with the `-i` option, which loads the file during connection.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想在`fabfile`脚本中以明文存储密码，那么您有两个选项。第一个是使用`-i`选项使用SSH身份文件（私钥），它在连接期间加载文件。
- en: The other option is to force Fabric to prompt you for the session password before
    connecting to the remote machine by using the `-I` option.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是使用`-I`选项强制Fabric在连接到远程机器之前提示您输入会话密码。
- en: Note that this option will overwrite the `env.password` parameter, if specified
    inside `fabfile`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果在`fabfile`中指定了`env.password`参数，此选项将覆盖该参数。
- en: The `-D` switch will disable the known hosts and force Fabric not to load the
    `known_hosts` file from the `.ssh` directory. You can make Fabric reject connections
    to the hosts not defined in the `known_hosts` file with the `-r` or  `--reject-unknown-hosts`
    options.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`-D`开关将禁用已知主机，并强制Fabric不从`.ssh`目录加载`known_hosts`文件。您可以使用`-r`或`--reject-unknown-hosts`选项使Fabric拒绝连接到`known_hosts`文件中未定义的主机。'
- en: 'Also, you can list all of the supported tasks inside of the fabfile by using `-l`
    or `--list`, providing the fabfile name to the `fab` tool. For example, applying
    that to the previous script will generate the following output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用`-l`或`--list`在`fabfile`中列出所有支持的任务，向`fab`工具提供`fabfile`名称。例如，将其应用到前面的脚本将生成以下输出：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can see all of the available options and arguments for the `fab` command
    line with the `-h` switch, or at [http://docs.fabfile.org/en/1.14/usage/fab.html](http://docs.fabfile.org/en/1.14/usage/fab.html).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`-h`开关在命令行中查看`fab`命令的所有可用选项和参数，或者在[http://docs.fabfile.org/en/1.14/usage/fab.html](http://docs.fabfile.org/en/1.14/usage/fab.html)上查看。
- en: Discover system health using Fabric
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Fabric发现系统健康
- en: 'In this use case, we will utilize Fabric to develop a script that executes
    multiple commands on remote machines. The goal of the script is to gather two
    types of output: the `discovery` command and the `health` command. The `discovery`
    command gathers the uptime, hostname, kernel release, and both private and public
    IP addresses, while the `health` command gathers the used memory, CPU utilization,
    number of spawned processes, and disk usage. We will design `fabfile` so that
    we can scale our script and add more commands to it:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种用例中，我们将利用Fabric开发一个脚本，在远程机器上执行多个命令。脚本的目标是收集两种类型的输出：`discovery`命令和`health`命令。`discovery`命令收集正常运行时间、主机名、内核版本以及私有和公共IP地址，而`health`命令收集已使用的内存、CPU利用率、生成的进程数量和磁盘使用情况。我们将设计`fabfile`，以便我们可以扩展我们的脚本并向其中添加更多命令：
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Notice that we created two dictionaries: `discover_commands` and `health_commands`.
    Each one of them contains the Linux commands as a key-value pair. The key represents
    the operation, while the value represents the actual Linux command. Then, we created
    a `tasks` list to group both dictionaries.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们创建了两个字典：`discover_commands`和`health_commands`。每个字典都包含Linux命令作为键值对。键表示操作，而值表示实际的Linux命令。然后，我们创建了一个`tasks`列表来组合这两个字典。
- en: 'Finally, we created a nested `for` loop. The outer loop is used to iterate
    over the list items. The inner `for` loop is to iterate over the key-value pairs.
    Use the Fabric `run()` operation to send the command to the remote hosts:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了一个嵌套的`for`循环。外部循环用于遍历列表项。内部`for`循环用于遍历键值对。使用Fabric的`run()`操作将命令发送到远程主机：
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The same task (`get_system_health`) will also be executed on the second server,
    and will return the output to the Terminal:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_system_health`相同的任务也将在第二台服务器上执行，并将输出返回到终端：'
- en: '[PRE29]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, the `fabric` module will terminate the established SSH session and
    disconnect from the two machines after executing all of the tasks:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`fabric`模块将在执行所有任务后终止已建立的SSH会话并断开与两台机器的连接：
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Note that we could redesign the previous script and make the `discovery_commands`
    and `health_commands` a Fabric task, then include them within `get_system_health()`.
    When we execute the `fab` command, we will call `get_system_health()`, which will
    execute the other two functions; we will get the same output as before. The following
    is a modified sample script:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以重新设计之前的脚本，并将`discovery_commands`和`health_commands`作为Fabric任务，然后将它们包含在`get_system_health()`中。当我们执行`fab`命令时，我们将调用`get_system_health()`，它将执行另外两个函数；我们将得到与之前相同的输出。以下是修改后的示例脚本：
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Other useful features in Fabric
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fabric的其他有用功能
- en: Fabric has other useful features, such as roles and context managers.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric还有其他有用的功能，如角色和上下文管理器。
- en: Fabric roles
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fabric角色
- en: 'Fabric can define roles for hosts, and run only the tasks to role members.
    For example, we might have a bunch of database servers on which we need to validate
    whether the MySql service is up, and other web servers on which we need to validate
    whether the Apache service is up. We can group these hosts into roles, and execute
    functions based on those roles:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric可以为主机定义角色，并仅对角色成员运行任务。例如，我们可能有一堆数据库服务器，需要验证MySql服务是否正常运行，以及其他需要验证Apache服务是否正常运行的Web服务器。我们可以将这些主机分组到角色中，并根据这些角色执行函数：
- en: '[PRE32]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the preceding example, we used the Fabric decorator `roles` (imported from `fabric.api`)
    when setting `env.roledef`. Then, we will assign  either webapp or databases roles
    to each server (think of the role assignment as tagging a server). This will give
    us flexibility to execute the `validate_mysql` function on servers  with database
    role only:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在设置`env.roledef`时使用了Fabric装饰器`roles`（从`fabric.api`导入）。然后，我们将webapp或数据库角色分配给每个服务器（将角色分配视为对服务器进行标记）。这将使我们能够仅在具有数据库角色的服务器上执行`validate_mysql`函数：
- en: '[PRE33]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Fabric context managers
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fabric上下文管理器
- en: In our first Fabric script, `fabfile_first.py`, we have a task that prompts
    the user for the directory, then switches to it and prints its content. This is
    done by using `;`, which appends two Linux commands together. However, running
    the same won't always work on other operating systems. That's where the Fabric
    context manager comes into the picture.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个Fabric脚本`fabfile_first.py`中，我们有一个任务提示用户输入目录，然后切换到该目录并打印其内容。这是通过使用`;`来实现的，它将两个Linux命令连接在一起。但是，在其他操作系统上运行相同的命令并不总是有效。这就是Fabric上下文管理器发挥作用的地方。
- en: 'The context manager maintains the directory state when executing commands.
    It usually runs with Python by using `with-statement`, and, inside the block,
    you can write any of the previous Fabric operations. Let''s look at an example
    to explain the idea:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文管理器在执行命令时维护目录状态。它通常通过`with`语句在Python中运行，并且在块内，您可以编写任何以前的Fabric操作。让我们通过一个示例来解释这个想法：
- en: '[PRE34]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the preceding example, first, we globally imported everything inside `fabric.context_managers`;
    then, we used the `cd` context manager to switch to the specific directory. We
    used the Fabric `run()` operation to execute the `ls` on that directory. This
    is the same as writing `cd /var/log ; ls` on the SSH session, but it provides
    a more Pythonic way to develop your code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，首先我们在`fabric.context_managers`中全局导入了所有内容；然后，我们使用`cd`上下文管理器切换到特定目录。我们使用Fabric的`run()`操作在该目录上执行`ls`。这与在SSH会话中编写`cd
    /var/log ; ls`相同，但它提供了一种更Pythonic的方式来开发您的代码。
- en: 'The `with` statement can be nested. For example, we can rewrite the preceding
    code with the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`with`语句可以嵌套。例如，我们可以用以下方式重写前面的代码：'
- en: '[PRE35]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Another useful context manager is the **local change directory** (**LCD**).
    This is the same as the `cd` context manager in the previous example, but it works
    on the local machine that runs `fabfile`. We can use it to change the context
    to a specific directory (for example, to upload or download a file to/from the
    remote machine, then change back to the execution directory automatically):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的上下文管理器是**本地更改目录**（**LCD**）。这与前面示例中的`cd`上下文管理器相同，但它在运行`fabfile`的本地机器上工作。我们可以使用它来将上下文更改为特定目录（例如，上传或下载文件到/从远程机器，然后自动切换回执行目录）：
- en: '[PRE36]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `prefix` context manager will accept a command as input and execute it
    before any other commands, inside the `with` block. For example, you can source
    a file or a Python virtual `env` wrapper script before running each command to
    set up your virtual environment:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`prefix`上下文管理器将接受一个命令作为输入，并在`with`块内的任何其他命令之前执行它。例如，您可以在运行每个命令之前执行源文件或Python虚拟`env`包装器脚本来设置您的虚拟环境：'
- en: '[PRE37]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is actually equivalent to writing the following command in the Linux shell:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这相当于在Linux shell中编写以下命令：
- en: '[PRE38]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The final context manager is `shell_env(new_path, behavior=''append'')`, which
    can alter the shell environmental variables for wrapped commands; so, any calls
    inside of that block will take the modified path into consideration:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个上下文管理器是`shell_env(new_path, behavior='append')`，它可以修改包装命令的shell环境变量；因此，在该块内的任何调用都将考虑到修改后的路径：
- en: '[PRE39]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note that after the operation is done, Fabric will restore the old environments
    back to the original one.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在操作完成后，Fabric将将旧的环境恢复到原始状态。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Fabric is a fantastic and powerful tool that automates tasks, usually in remote
    machines. It integrates well with Python scripts, providing easy access to the
    SSH suite. You can develop many fab files for different tasks and integrate them
    together to create an automation workflow that includes deploying, restarting,
    and stopping servers or processes.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric是一个出色且强大的工具，可以自动化任务，通常在远程机器上执行。它与Python脚本很好地集成，可以轻松访问SSH套件。您可以为不同的任务开发许多fab文件，并将它们集成在一起，以创建包括部署、重启和停止服务器或进程在内的自动化工作流程。
- en: In the next chapter, we will learn about collecting data and generating recurring
    reports for system monitoring.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习收集数据并为系统监控生成定期报告。
