- en: Bluetooth-Controlled Robotic Car
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝牙控制的机器人车
- en: We have come a long way; now it's time to go ahead and make something even better.
    The world is going all gaga over the inception of autonomous cars and within this
    decade this will become the new normal. There is so much going on in these vehicles.
    Multiple sensors, GPS, and telemetry are all calculated in real time to make sure
    that the car is on the right course and is being driven by the system safely on
    the road, so making a robotic vehicle proves to be an ideal way to learn robotics
    and future technologies. In this book, we will always try to make technologies
    that are not only as good as the present technologies but in some ways even better.
    So, let's go ahead and get to making this autonomous vehicle one step at a time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经走了很长的路；现在是时候继续前进，做出更好的东西。世界正在为自动驾驶汽车的诞生而疯狂，这将成为新的常态。这些车辆中有很多技术。多个传感器、GPS和遥测都实时计算，以确保车辆在正确的路线上安全行驶，因此制作一个机器人车辆被证明是学习机器人技术和未来技术的理想方式。在这本书中，我们将尝试制造不仅与现有技术一样好，而且在某些方面甚至更好的技术。所以，让我们继续，一步一步地制作这辆自动驾驶车辆。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Basics of the vehicle
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车辆的基础知识
- en: Getting the vehicle ready
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备车辆
- en: Controlling the vehicle by Bluetooth
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过蓝牙控制车辆
- en: Basics of the vehicle
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 车辆的基础知识
- en: 'You must be thinking: what can we possibly learn about the vehicle that we
    don''t already know? This may be true, but there are a few that we must make sure
    we understand before taking on this chapter. So, let''s get started.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你一定在想：我们可能还能从这辆车上学到什么呢？这可能是真的，但在开始这一章之前，我们必须确保理解其中的一些内容。所以，让我们开始吧。
- en: 'First is the chassis, which we will be using: it''s is a four-wheel drive chassis
    and all the four wheels are independently controlled by a dedicated motor. Hence,
    we can change the speed of every single wheels as per our needs. We have chosen
    a four-wheel drive drivetrain as it is harder for it to get stuck on carpets and
    uneven surfaces. You can also opt for a two-wheel drive drivetrain if you want
    to do so, as it won''t make a huge difference.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是我们将使用的底盘：这是一个四轮驱动底盘，所有四个车轮都由专用电机独立控制。因此，我们可以根据需要改变每个车轮的速度。我们选择了四轮驱动传动系统，因为它不容易在地毯和不平整的表面上被卡住。如果你愿意，你也可以选择两轮驱动传动系统，因为这不会有太大的区别。
- en: Now, once you assemble the chassis you might see that it does not have a steering
    mechanism. Does this mean that the car will only go straight? Well, obviously
    not. There are many ways by which we can steer the direction of a car while making
    small vehicles. The best one is called differential turning.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦你组装好底盘，你可能会发现它没有转向机构。这是否意味着车只能直行？显然不是。在制作小型车辆时，有许多方法可以改变车辆的方向。最好的方法被称为差速转向。
- en: 'In conventional cars, there is one engine and that engine powers up the wheels;
    hence in principal all the wheels turn at the same speed. Now this works fine
    when we are going straight but whenever the car wants to turn there comes a new
    problem. Refer to the following diagram:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统汽车中，有一个发动机，这个发动机驱动车轮；因此原则上所有车轮以相同的速度转动。现在当我们直行时这很好用，但每当车要转弯时就会出现一个新问题。参考以下图表：
- en: '![](Images/64c30dee-9086-4d1c-88ea-4f64dd2e5b79.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/64c30dee-9086-4d1c-88ea-4f64dd2e5b79.png)'
- en: 'You will see that the wheels, which are on the inner curve, have a smaller
    diameter and the one on the outer edge has a larger diameter. You may remember
    a fact from elementary school: the larger the diameter the more the circumference,
    and vice a versa. Hence, the wheel towards the inner edge will be covering a shorter
    distance compared to the wheels on the outer edge at the same time, or in simple
    words, the inner wheels will be spinning slower and the outer wheels will be spinning
    faster.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到内侧的车轮直径较小，外侧的车轮直径较大。你可能还记得小学的一个事实：直径越大，周长越大，反之亦然。因此，内侧的车轮在同一时间内将行驶较短的距离，或者简单地说，内侧的车轮会转得更慢，外侧的车轮会转得更快。
- en: This problem leads to the discovery of differentials in cars, which is a round
    lump at the center of the axle of the car. What this does is that it varies the
    rate at which the wheels are spinning based on the turning radius. Genius, isn't
    it? Now, you must be thinking: this is all right, but why are you telling me all
    this? Well, because we will do the exact opposite to turn the robot. If we change
    the speed of the motors on the inner and outer edge of the turning circle, then
    the car will try to turn towards inside and similarly if we do it for the other
    end then it will try to turn in the other direction. While making wheeled robot
    this strategy is not new at all. Steering mechanisms are complicated and implementing
    them on small robot is simply a challenge. Hence this is a far simpler and easy
    way to turn your vehicle around.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题导致了汽车差速器的发现，它是汽车轴的中心有一个圆形的凸起。它的作用是根据转弯半径改变车轮的旋转速度。天才，不是吗？现在，你可能会想：这都没错，但你为什么要告诉我这些？因为我们将做相反的操作来转动机器人。如果我们改变转向圈内外边缘电机的速度，那么车辆将试图向内转向，同样，如果我们对另一端这样做，它将试图向另一个方向转向。在制作轮式机器人时，这种策略并不新鲜。转向机构很复杂，在小型机器人上实现它们只是一个挑战。因此，这是一个更简单和容易的方法来转动你的车辆。
- en: Not only is this way simple but it is a very efficient and simple strategy that
    requires minimal components. It is also better as the turning radius of the vehicle
    is also reduced. In fact, if we spin the opposite sides of the wheels in the opposite
    direction at the same speed then the vehicle will turn completely on its own axis,
    making the turning radius entirely zero. this type of configuration is called
    skid-steer drive. For a robot that is wheeled and works indoors, this is a killer
    feature.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式不仅简单而且非常高效，需要的零部件也很少。车辆的转弯半径也更小。事实上，如果我们以相同速度将车轮的相对侧向相反方向旋转，那么车辆将完全围绕自己的轴旋转，使转弯半径完全为零。这种配置称为履带转向驱动。对于室内使用的轮式机器人来说，这是一个杀手功能。
- en: To know more about it read more here: [https://groups.csail.mit.edu/drl/courses/cs54-2001s/skidsteer.html](https://groups.csail.mit.edu/drl/courses/cs54-2001s/skidsteer.html)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多，请阅读这里：[https://groups.csail.mit.edu/drl/courses/cs54-2001s/skidsteer.html](https://groups.csail.mit.edu/drl/courses/cs54-2001s/skidsteer.html)
- en: Getting the vehicle ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备车辆
- en: Now is the time to go ahead and make the robotic vehicle a reality. So let's
    unbox the vehicle chassis and screw every part together. The assembly manual generally
    comes along with the kit, so it won't take long for you to complete it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候继续让机器人车辆成为现实了。所以让我们打开车辆底盘并将每个零件螺丝拧在一起。组装手册通常随套件一起提供，所以你很快就能完成它。
- en: Once you have completed building the kit, go ahead and segregate the wires for
    each of the motors. This is going to be a very important part of making the vehicle
    ready. So, once you have all the wires coming out of the vehicle, take a cell
    and power up each of the wheels. Notice the polarity of connection in which the
    wheels spin in the forward direction. All you have to do is to take a permanent
    marker or perhaps a nail paint and mark the wire which goes to the positive terminal
    when the motor is spinning in the forward direction. As all of these motors are
    entirely dependent on polarity for the direction, this step is key to ensure that
    whenever we power them up they always spin in the same direction. Trust me, this
    will save you a lot of headaches.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 完成组装套件后，继续将每个电机的电线分开。这将是使车辆准备就绪的非常重要的部分。因此，一旦车辆上所有的电线都出来了，拿一个电池，给每个车轮供电。注意连接的极性，车轮是向前旋转的。你需要做的就是拿一个永久性的记号笔或者指甲油，标记电线，当电机向前旋转时，连接到正极的电线。由于所有这些电机完全依赖于极性来确定方向，这一步是关键，以确保无论何时给它们供电，它们总是以相同的方向旋转。相信我，这将为你节省很多麻烦。
- en: 'Now, once this is all done, connect the wires to the motor driver as shown
    in the following diagram (the wire marked by red is the wire that you marked earlier):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦这一切都完成了，按照以下图示将电线连接到电机驱动器（红色标记的电线是你之前标记的电线）：
- en: '![](Images/d6fcc277-16be-41d1-8163-0af48b9a70b0.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d6fcc277-16be-41d1-8163-0af48b9a70b0.png)'
- en: 'Perfect! Now everything seems sorted, except for the connection of the motor
    driver with the power source and Raspberry Pi. So let''s see how we are going
    to do it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '完美！现在一切似乎都准备好了，除了电机驱动器与电源和树莓派的连接。所以让我们看看我们将如何做到： '
- en: '![](Images/8ba50ebd-202a-45f1-9506-8f71f3f3430a.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8ba50ebd-202a-45f1-9506-8f71f3f3430a.png)'
- en: 'All right then! Time for the real deal! So the first thing we want to make
    sure is that all the connections are working exactly the way we planned them to.
    For this, we will start off with a dummy code which will simply switch all the
    motors on and in forward direction. So here is the code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！是时候进行真正的交易了！所以我们要确保的第一件事是所有的连接都按照我们计划的方式工作。为此，我们将从一个简单的代码开始，它将简单地打开所有电机并向前旋转。所以这是代码：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The program can't be more simple than this; all we are doing here is giving
    the motor driver the command to spin the motor in one single direction. There
    might be a chance that a set of motors will be rotating in the reverse direction,
    in which case you should change the polarity of connections on the motor driver.
    This should solve the problem. Some people might think that we can make a change
    to the code as well to do this, but as per my experience it starts getting complicated
    from there and would cause you trouble if you chose the other path.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 程序不可能比这更简单了；我们在这里所做的就是向电机驱动器发出命令，让电机单向旋转。可能会有一组电机会以相反方向旋转的情况，这种情况下你应该改变电机驱动器上的连接极性。这应该解决问题。有些人可能会认为我们也可以对代码进行更改来解决这个问题，但根据我的经验，从那里开始就会变得复杂，并且如果你选择其他路径，会给你带来麻烦。
- en: All right then, everything is set and all is working well. Go ahead, try some
    other output permutations and combinations and see what happens to the car. Don't
    worry, whatever you do, you won't be able to damage the car unless it runs off
    the roof!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，一切都准备就绪，一切都运行良好。继续尝试一些其他输出排列组合，看看车子会发生什么。别担心，无论你做什么，除非它从屋顶上跑下来，否则你都不会损坏车子！
- en: Controlling the vehicle by Bluetooth
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过蓝牙控制车辆
- en: Had some fun trying those combinations? Now is the time that we take this journey
    a step ahead and see what else is possible. We have all played with remote-controlled
    cars and I'm sure everyone will have had fun with those zippy little toys. We
    are going to do something similar but in a much more sophisticated way.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 玩了一些尝试这些组合的乐趣吗？现在是时候我们继续前进，看看还有什么其他可能性了。我们都玩过遥控车，我相信每个人都会对那些敏捷的小玩具感到开心。我们将做类似的事情，但以一种更复杂的方式。
- en: 'We all are aware of Bluetooth: this is one of the best ways to communicate
    with devices in close proximity. Bluetooth communication is a medium data rate,
    low power communication method. This is almost omnipresent in mobile devices,
    hence it is an ideal way to start. What we will be doing in this chapter is controlling
    the car via your mobile phone using Bluetooth. Now let''s see how we can do it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道蓝牙：这是与附近设备通信的最佳方式之一。蓝牙通信是一种中等数据速率、低功耗的通信方法。这在移动设备中几乎无处不在，因此是一个理想的开始方式。在本章中，我们将通过蓝牙使用手机来控制车辆。现在让我们看看我们如何做到这一点。
- en: 'The first thing we want to do is pair up the smartphone to the robotic vehicle,
    and to do so we need to open the terminal on Raspberry Pi and perform the following
    steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的第一件事是将智能手机与机器人车配对，为此我们需要在树莓派上打开终端并执行以下步骤：
- en: Type in the command `~ $ bluetoothctl`; this is a Bluetooth agent which allows
    two Bluetooth devices to communicate. Without the Bluetooth agent, the two devices
    will not be able to communicate with each other in the first place.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中输入`~ $ bluetoothctl`；这是一个蓝牙代理，允许两个蓝牙设备进行通信。没有蓝牙代理，这两个设备首先就无法进行通信。
- en: 'The `[Bluetooth] # power on` command simply powers up the Bluetooth on board
    the Raspberry.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Bluetooth] # power on`命令简单地启动了树莓上的蓝牙。'
- en: 'The `[Bluetooth] # agent on` command starts up the agent which can then initiate
    the connection for us.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Bluetooth] # agent on`命令启动代理，然后可以为我们启动连接。'
- en: 'The `[Bluetooth] # discoverable on` command makes Raspberry Pi''s Bluetooth
    discoverable. The Bluetooth might be on, but we must make it discoverable to make
    sure that the other device can find it and connect to it.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Bluetooth] # discoverable on`命令使树莓派的蓝牙可发现。蓝牙可能已经打开，但我们必须使其可发现，以确保其他设备可以找到它并连接到它。'
- en: 'The `[Bluetooth] # pairable on` command makes the device pairable. If the Bluetooth
    is on, this doesn''t mean your device will be able to connect, hence we need to
    make it pairable and this command does exactly that.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Bluetooth] # pairable on`命令使设备可配对。如果蓝牙已打开，这并不意味着您的设备将能够连接，因此我们需要使其可配对，这个命令正是这样做的。'
- en: 'The `[Bluetooth] # scan on` command starts scanning for nearby Bluetooth devices.
    The output of this command will be a couple of MAC addresses along with the Bluetooth
    name. The MAC address is a physical address of the device; this is a unique address,
    hence it will never ever be the same for two devices.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Bluetooth] # scan on`命令开始扫描附近的蓝牙设备。这个命令的输出将是一些MAC地址以及蓝牙名称。MAC地址是设备的物理地址；这是一个唯一的地址，因此它永远不会对两个设备相同。'
- en: 'The `[Bluetooth] # pair 94:65:2D:94:9B:D3` command helps you to pair up with
    the device you want. You simply need to type the mentioned command with the MAC
    address.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Bluetooth] # pair 94:65:2D:94:9B:D3`命令帮助您与您想要的设备配对。您只需输入带有MAC地址的命令。'
- en: 'Just to be clear, this what your screen should look like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了明确，这是您的屏幕应该看起来的样子：
- en: '![](Images/4f539ab7-328e-4d73-b82f-cffd3bcfc089.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4f539ab7-328e-4d73-b82f-cffd3bcfc089.png)'
- en: 'Once you have done this process, you should be able to connect Raspberry Pi
    to your mobile devices. Now that you are connected, it''s time to go ahead and
    write the code through which we will be able to control the Bluetooth car just
    using our mobile devices. So here is the code. Go ahead, have a look, then we
    will get to the explanation:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了这个过程后，您应该能够将树莓派连接到您的移动设备。现在您已经连接，是时候继续编写代码了，通过这些代码，我们将能够仅使用移动设备来控制蓝牙汽车。所以这是代码。继续，看一看，然后我们将进行解释：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now let''s see what this code is actually doing:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这段代码实际在做什么：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will be using some generic functions of Bluetooth during this program, hence
    we are calling the library `bluetooth` so that we are able to call those methods:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，我们将使用蓝牙的一些通用功能，因此我们调用`bluetooth`库，以便能够调用这些方法：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, whenever we connect two Bluetooth devices, we have various methods of
    communication; the easiest among them is radio frequency communication, herein
    referred to as `RFCOMM`. Now, in this line, we are using the `BluetoothSocket`
    method of the `bluetooth` library to define what communication protocol we are
    using in our program, which by now you know is `RFCOMM`. We are further storing
    this data in a variable called `server_socket` so that we don''t have to repeat
    this step over and over again. Rather, whenever we need this data it will already
    be stored in the variable called `server_socket`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当我们连接两个蓝牙设备时，我们有各种通信方法；其中最简单的是无线电频率通信，这里称为`RFCOMM`。现在，在这一行中，我们使用`bluetooth`库的`BluetoothSocket`方法来定义我们在程序中使用的通信协议，现在你已经知道是`RFCOMM`。我们进一步将这些数据存储在一个名为`server_socket`的变量中，这样我们就不必一遍又一遍地重复这个步骤。而是，每当我们需要这些数据时，它将已经存储在名为`server_socket`的变量中：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, Bluetooth has multiple ports; this is a very useful concept as through
    one single Bluetooth connection we can have various streams of data being transferred
    to various devices and programs. This avoids the clash of data and also makes
    sure that the data is securely communicated to exactly the right receiver. The
    program which we are using right now is extremely simple and we do not need multiple
    ports for data communication. Hence, we can use any of the `1` to `60` ports available
    to us for the communication. In this part of the program, you can write any port
    and your program will run just fine:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，蓝牙有多个端口；这是一个非常有用的概念，通过一个单一的蓝牙连接，我们可以将各种数据流传输到各种设备和程序。这避免了数据的冲突，并确保数据安全地传输到确切的接收者。我们现在使用的程序非常简单，我们不需要多个端口进行数据通信。因此，我们可以使用任何`1`到`60`个可用端口进行通信。在程序的这一部分，您可以写任何端口，您的程序将正常运行：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, whenever we are connecting two devices we need to make sure that they stay
    connected throughout the communication. Hence, here we are writing this command: `server_socket.bind`. What
    this will do is that it will make sure that your Bluetooth connection is maintained
    during the entire communication.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当我们连接两个设备时，我们需要确保它们在整个通信过程中保持连接。因此，在这里我们写下这个命令：`server_socket.bind`。这将确保您的蓝牙连接在整个通信过程中保持连接。
- en: 'As you can see, the first parameter inside the argument is empty. Here, we
    generally write the MAC address which it has to be bound with. However, as we
    have set this as empty it will automatically bind to the MAC address we are already
    paired with. The second argument we have is the port on which it has to be connected.
    As we know, the value of the `port` variable is set to be `1`. Hence, it will
    automatically connect to port number `1`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，参数中的第一个参数是空的。在这里，我们通常写下它必须绑定的MAC地址。然而，由于我们将其设置为空，它将自动绑定到我们已经配对的MAC地址。我们的第二个参数是它必须连接的端口。正如我们所知，`port`变量的值被设置为`1`。因此，它将自动连接到端口号`1`：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is a very interesting line. As we know, we might not be the only person
    trying to connect to the Bluetooth device of Raspberry, hence what should Raspberry
    do when it receives another connection request?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一条非常有趣的线。正如我们所知，我们可能不是唯一一个尝试连接到树莓的蓝牙设备的人，因此当树莓接收到另一个连接请求时，树莓应该怎么做呢？
- en: 'In this line, we are defining just that: we are calling a method called `listen(1)`.
    In this function, we have defined the value of argument as `1`. What it means
    is that it will be connected to one device only. Any other device that tries to
    connect will not get through. If we change this argument to `2` then it will be
    connected to two devices, however it would stay in the queue and hence it is called
    **queue connection**:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们只是在定义：我们正在调用一个名为`listen(1)`的方法。在这个函数中，我们已经将参数的值定义为`1`。这意味着它只会连接到一个设备。任何其他尝试连接的设备都无法通过。如果我们将这个参数改为`2`，那么它将连接到两个设备，但它会留在队列中，因此被称为**队列连接**：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that most of the things for the connection have been done, we also need
    to know if we are connected to the right address. What the method `server_socket.accept()`
    does is that it returns the socket number and the address it is serving to. Hence,
    we are storing it within two variables called `client_socket` and `address`. However,
    as we know, the socket will remain only as `1`, hence we will not be using it
    any further:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在大部分连接的事情都已经完成，我们还需要知道我们是否连接到了正确的地址。`server_socket.accept()`方法的作用是返回套接字号和它正在服务的地址。因此，我们将其存储在两个名为`client_socket`和`address`的变量中。然而，正如我们所知，套接字将仅保持为`1`，因此我们将不会再使用它：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this line we are simply telling the user that the connection has been made
    successfully with the sue of the function `str(address)` we are printing the value
    of the address to which it is connected to. This way we can be double sure that
    the connection has been made to the right device.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们只是告诉用户连接已成功建立，通过使用`str(address)`函数，我们打印连接到的地址的值。这样我们可以确保连接已经建立到了正确的设备。
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this line, we are receiving the data from the client; also, we are defining
    how long that data will be. Hence, in the method `client_socket.recv(1024)` we
    have passed on a parameter in the argument as `1024` which basically denotes that
    the maximum length of the data packet will be `1024` bytes. Once the data is received,
    it is then passed on to the variable `data` for further use.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们正在从客户端接收数据；同时，我们正在定义数据的长度。因此，在方法`client_socket.recv(1024)`中，我们在参数中传递了一个参数`1024`，这基本上表示数据包的最大长度为`1024`字节。一旦接收到数据，它就会传递给变量`data`供进一步使用。
- en: 'After this, the rest of the program is pretty simple. We simply need to compare
    the value received by the mobile device and make the car do whatever we want to
    do. Here, we have made the car go in all four directions, that is, forward, backward,
    right, and left. You may also add specific conditions as per your needs:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，程序的其余部分非常简单。我们只需要比较移动设备接收到的值，并让汽车做我们想做的事情。在这里，我们让汽车向四个方向行驶，即前进、后退、右转和左转。您也可以根据自己的需求添加特定条件：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this line, we are closing the connection of the client socket so that the
    client can be disconnected and the data transfer can be terminated:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们正在关闭客户端套接字的连接，以便断开客户端并终止数据传输：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding line, we are closing the connection of the server socket so
    that the server connection can be disconnected.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一行中，我们正在关闭服务器套接字的连接，以便断开服务器连接。
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter taught us to automate and control a car using Bluetooth interfacing
    via data grabbing and sharing. Next up, we will develop what we have learned so
    far to interface IR sensors for obstacle avoidance and patch planning.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本章教会了我们如何使用蓝牙接口通过数据抓取和共享来自动化和控制汽车。接下来，我们将开发我们迄今为止所学到的内容，以便为避障和路径规划接口红外传感器。
