- en: Multimedia
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多媒体
- en: 'In this chapter, we will cover following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Determining the type of a file—how to guess the type of a file
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定文件类型——如何猜测文件类型
- en: Detecting an image type—inspecting an image to understand what type of image
    it is
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测图像类型——检查图像以了解其类型
- en: Detecting an image size—inspecting an image to retrieve its size
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测图像大小——检查图像以检索其大小
- en: Playing audio/video/images—playing audio, video, or showing images on desktop
    systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放音频/视频/图像——在桌面系统上播放音频、视频或显示图像
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Multimedia applications, such as videos, sounds, and games usually need to rely
    on very specific libraries to manage the formats used to store the data and the
    hardware needed to play their content.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 多媒体应用程序，如视频、声音和游戏通常需要依赖非常特定的库来管理用于存储数据和播放内容所需的硬件。
- en: Due to the variety of formats for data storage, the continuous improvements
    in the field of video and audio storage that lead to new formats, and the heavy
    integration with native operating system functions and specific hardware programming
    languages, multimedia-related features are rarely integrated in the standard library.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据存储格式的多样性，视频和音频存储领域的不断改进导致新格式的出现，以及与本地操作系统功能和特定硬件编程语言的深度集成，多媒体相关功能很少集成在标准库中。
- en: Having to maintain support for all the image formats that exist, when a new
    one is created every few months, requires a full-time effort that a dedicated
    library can tackle far better than the team maintaining the programming language
    itself.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当每隔几个月就会创建一个新的图像格式时，需要维护对所有已知图像格式的支持，这需要全职的工作，而专门的库可以比维护编程语言本身的团队更好地处理这个问题。
- en: For this reason, Python has relatively few multimedia-related functions, but
    some core ones are available and they can be very helpful in applications where
    multimedia is not the main focus, but maybe they need to handle multimedia files
    to properly work; for example, a web application that might need to check that
    the user-uploaded file is in a valid format supported by browsers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Python几乎没有与多媒体相关的函数，但一些核心函数是可用的，它们可以在多媒体不是主要关注点的应用程序中非常有帮助，但也许它们需要处理多媒体文件以正确工作；例如，一个可能需要检查用户上传的文件是否是浏览器支持的有效格式的Web应用程序。
- en: Determining the type of a file
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定文件类型
- en: When we receive a file from our users, it's frequently necessary to detect its
    type. Doing so through the filename without the need to actually read the data
    can be achieved through the `mimetypes` module.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从用户那里收到文件时，通常需要检测其类型。通过文件名而无需实际读取数据就可以实现这一点，这可以通过`mimetypes`模块来实现。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, the following steps are to be performed:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，需要执行以下步骤：
- en: While the `mimetypes` module is not bullet proof, as it relies on the name of
    the file to detect the expected type, it's frequently enough to handle most common
    cases.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然`mimetypes`模块并不是绝对可靠的，因为它依赖于文件名来检测预期的类型，但它通常足以处理大多数常见情况。
- en: 'Users will usually assign proper names to their files for their own benefit
    (especially Windows users, where the extension is vital for the proper working
    of the file), guessing the type with `mimetypes.guess_type` is often enough:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户通常会为了自己的利益（特别是Windows用户，其中扩展名对文件的正确工作至关重要）为其文件分配适当的名称，使用`mimetypes.guess_type`猜测类型通常就足够了：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can call `guess_file_type` against any file to get back its type:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以对任何文件调用`guess_file_type`来获取其类型：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the type it''s unknown, `None` will be returned:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果类型未知，则返回`None`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, note that the file itself doesn''t have to really exist. All you care
    about is it''s filename:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，请注意文件本身并不一定真的存在。您关心的只是它的文件名：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `mimetypes` module keeps a list of MIME types associated to each file extension.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`mimetypes`模块保留了与每个文件扩展名关联的MIME类型列表。'
- en: When a filename is provided, only the extension is analyzed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 提供文件名时，只分析扩展名。
- en: If the extension is in a list of known MIME types, the associated type is returned.
    Otherwise `None` is returned.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果扩展名在已知MIME类型列表中，则返回关联的类型。否则返回`None`。
- en: Calling `mimetypes.init()` also loads any MIME type registered in your system
    configuration, usually from `/etc/mime.types` on Linux systems and from the registry
    on Windows systems.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`mimetypes.init()`还会加载系统配置中注册的任何MIME类型，通常是从Linux系统的`/etc/mime.types`和Windows系统的注册表中加载。
- en: This allows us to cover far more extensions that might not be known by Python
    itself and to also easily support custom extensions if your system is configured
    to support them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够涵盖更多可能不为Python所知的扩展名，并且还可以轻松支持自定义扩展名，如果您的系统配置支持它们的话。
- en: Detecting image types
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测图像类型
- en: When you know you are working with image files, it's frequently necessary to
    verify their type to ensure they are in a format your software is able to handle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当您知道正在处理图像文件时，通常需要验证它们的类型，以确保它们是您的软件能够处理的格式。
- en: One possible use case is to ensure they are images in a format that a browser
    might be able to show back when they are uploaded to a website.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的用例是确保它们是浏览器可能能够在网站上上传时显示的格式的图像。
- en: The type of a multimedia file can usually be detected by inspecting the file
    header, the initial part of a file that stores details about the content of the
    file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可以通过检查文件头部来检测多媒体文件的类型，文件头部是文件的初始部分，存储有关文件内容的详细信息。
- en: The header usually contains details about the kind of file, the size of the
    contained image, the number of bits per color, and so on. All these details are
    required to reproduce the content stored within the file itself.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 标头通常包含有关文件类型、包含图像的大小、每种颜色的位数等的详细信息。所有这些细节都是重现文件内存储的内容所必需的。
- en: By inspecting the header, it's possible to confirm the format of the stored
    data. This requires supporting the specific header format and the Python standard
    library has support for most common image formats.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查头部，可以确认存储数据的格式。这需要支持特定的头部格式，Python 标准库支持大多数常见的图像格式。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The `imghdr` module can help us understand what kind of image file we are facing:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`imghdr` 模块可以帮助我们了解我们面对的是什么类型的图像文件：'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This allows us to detect the format of any image on disk or of a stream of
    bytes provided:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够检测磁盘上任何图像的格式或提供的字节流的格式：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the provided filename is a string containing the path of a file, `imghdr.what`
    is called directly on it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供的文件名是包含文件路径的字符串时，直接在其上调用 `imghdr.what`。
- en: This just returns the type of the file or `None` if it's not supported.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是返回文件的类型，如果不支持则返回 `None`。
- en: If, instead, a file-like object is provided (a file itself or a `io.BytesIO`,
    for example) then it will peak the first 32 bytes of it and detect the header
    based on those.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果提供了类似文件的对象（例如文件本身或 `io.BytesIO`），则它将查看其前32个字节并根据这些字节检测头部。
- en: Given that most image types have a header with a size in the order of little
    more than 10 bytes, reading 32 bytes ensures that we should have more than enough
    to detect any image.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于大多数图像类型的头部大小在10多个字节左右，读取32个字节可以确保我们应该有足够的内容来检测任何图像。
- en: After reading the bytes, it will go back to the beginning of the file, so that
    any subsequent call is still able to read the file (otherwise, the first 32 bytes
    would be consumed and lost forever).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 读取字节后，它将返回到文件的开头，以便任何后续调用仍能读取文件（否则，前32个字节将被消耗并永远丢失）。
- en: There's more...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Python standard library also provides a `sndhdr` module that behaves much
    like `imghdr` for audio files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python 标准库还提供了一个 `sndhdr` 模块，它的行为很像音频文件的 `imghdr`。
- en: The formats recognized by `sndhdr` are usually very basic formats and thus it's
    usually mostly helpful when `wave` or `aiff` files are involved.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`sndhdr` 识别的格式通常是非常基本的格式，因此当涉及到 `wave` 或 `aiff` 文件时，它通常是非常有帮助的。'
- en: Detecting image sizes
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测图像大小
- en: If we know what kind of image we are facing, detecting the resolution is usually
    a matter of reading it from the image header.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道我们面对的是什么类型的图像，检测分辨率通常只是从图像头部读取它。
- en: For most image types, this is relatively simple, and as we can use `imghdr`
    to guess the right image type, we can then read the right part of the header,
    according to the detected type, to extract the size portion.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数图像类型，这相对简单，因为我们可以使用 `imghdr` 来猜测正确的图像类型，然后根据检测到的类型读取头部的正确部分，以提取大小部分。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Once `imghdr` detects the image type, we can read the content of the header
    with the `struct` module:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `imghdr` 检测到图像类型，我们就可以使用 `struct` 模块读取头部的内容：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then we can use the `ImageReader.get_size` class method to detect the size
    of any supported image:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用 `ImageReader.get_size` 类方法来检测任何支持的图像的大小：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are four core parts of the `ImageReader` class that work together to provide
    support for reading image sizes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageReader` 类的四个核心部分共同工作，以提供对读取图像大小的支持。'
- en: The first, the `ImageReader.get_size` method itself, is in charge of opening
    the image file and detecting the image type.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`ImageReader.get_size` 方法本身负责打开图像文件并检测图像类型。
- en: 'The first part is all related to opening the file in case it''s provided as
    a path in a string, as a `Path` object, or if it''s already a file object:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分与打开文件有关，如果它以字符串形式提供为路径，作为 `Path` 对象，或者如果它已经是文件对象：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If it's a string or a pathlike object (`os.PathLike` is only supported on Python
    3.6+), the file is opened and the `requires_close` variable is set to `True`,
    so that once we are finished, we will close the file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它是一个字符串或路径对象（`os.PathLike` 仅支持 Python 3.6+），则打开文件并将 `requires_close` 变量设置为
    `True`，这样一旦完成，我们将关闭文件。
- en: If it's a `Path` object and we are on a Python version that doesn't support
    `os.PathLike`, then the file is opened through the path itself.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它是一个 `Path` 对象，并且我们使用的 Python 版本不支持 `os.PathLike`，那么文件将通过路径本身打开。
- en: If, instead, the provided object was already an open file, we do nothing and
    `requires_close` remains `False`, so that we don't close the provided file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供的对象已经是一个打开的文件，则我们什么也不做，`requires_close` 保持 `False`，这样我们就不会关闭提供的文件。
- en: 'Once the file is opened, it gets passed to `imghdr.what` to guess the file
    type, and if it''s not one of the supported types, it gets rejected:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件被打开，它被传递给 `imghdr.what` 来猜测文件类型，如果它不是受支持的类型之一，它就会被拒绝：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we head back to the beginning of the file, so we can read the header
    and we call the relevant `cls._size_png, cls._size_jpeg` or `cls._size_gif` method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们回到文件的开头，这样我们就可以读取头部，并调用相关的 `cls._size_png`、`cls._size_jpeg` 或 `cls._size_gif`
    方法：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Each method is specialized in understanding the size of a specific file format,
    from the easiest one (GIF) to the most complex one (JPEG).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法都专门用于了解特定文件格式的大小，从最简单的（GIF）到最复杂的（JPEG）。
- en: 'For the GIF itself, all we have to do is skip the magic number (which only
    `imghdr.what` cared about; we already know it''s a GIF) and read the subsequent
    four bytes as unsigned shorts (16 bits number) in a little-endian byte ordering:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 GIF 本身，我们所要做的就是跳过魔术数字（只有 `imghdr.what` 关心；我们已经知道它是 GIF），并将随后的四个字节读取为无符号短整数（16位数字），采用小端字节顺序：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`png` is nearly as complex. We skip the magic number and read the subsequent
    bytes as an `unsigned int` (32 bits number) in a big-endian order, followed by
    a four-bytes string:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`png` 几乎和 GIF 一样复杂。我们跳过魔术数字，并将随后的字节作为大端顺序的 `unsigned int`（32位数字）读取，然后是四字节字符串：'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That gives us back the size of the image header followed by the image section
    name, which must be `IHDR`, to confirm we are reading an image header:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们返回了图像头部的大小，后面跟着图像部分的名称，必须是 `IHDR`，以确认我们正在读取图像头部：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once we know we are within the image header, we can just read the first two
    `unsigned int` numbers (still in big-endian) to extract the width and height of
    the image:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道我们在图像头部内，我们只需读取前两个`unsigned int`数字（仍然是大端）来提取图像的宽度和高度：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The last method is the most complex one, as JPEG has a far more complex structure
    than GIF or PNG. The JPEG header is composed of multiple sections. Each section
    is identified by `0xff` followed by an identifier of the section and by the section
    length.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种方法是最复杂的，因为JPEG的结构比GIF或PNG复杂得多。JPEG头由多个部分组成。每个部分由`0xff`标识，后跟部分标识符和部分长度。
- en: 'At the beginning, we just read the first two bytes and confirm that we face
    the **start of image** (**SOI**) section:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我们只读取前两个字节并确认我们面对**图像的开始**（**SOI**）部分：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then we look for a section that declares the JPEG as a baseline DCT, progressive
    DCT, or lossless frame.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们寻找一个声明JPEG为基线DCT、渐进DCT或无损帧的部分。
- en: 'That is done by reading the first two bytes of each section and its size:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过读取每个部分的前两个字节及其大小来完成的：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As we know that each section starts with `0xff`, if we face a section that
    starts with a different byte, it means that the image is invalid:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们知道每个部分都以`0xff`开头，如果我们遇到以不同字节开头的部分，这意味着图像无效：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If the section is valid, we can read its content. We know the size because
    it was specified as a two bytes unsigned short in a big-endian notation right
    after the two bytes marker:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果部分有效，我们可以读取它的内容。我们知道大小，因为它是在两个字节的无符号短整数中以大端记法指定的：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, before being able to read the width and height from the data we just read,
    we need to check that the section that we are looking at is actually a start of
    frame one, for baseline, progressive, or lossless. This means it must be one of
    the sections from `0xc0` to `0xcf`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在能够从我们刚刚读取的数据中读取宽度和高度之前，我们需要检查我们正在查看的部分是否实际上是基线、渐进或无损的帧的开始。这意味着它必须是从`0xc0`到`0xcf`的部分之一。
- en: 'Otherwise, we just skip this section and move to the next one:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们只是跳过这个部分并移动到下一个：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once we find one of the valid sections (depending on the kind of encoding the
    image has), we can read the size by looking at the first five bytes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们找到一个有效的部分（取决于图像的编码方式），我们可以通过查看前五个字节来读取大小。
- en: 'The first byte is the sample precision. We really don''t care about it so we
    can ignore it. Then the remaining four bytes are the height and the width of the
    image as two unsigned shorts in a big-endian notation:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个字节是样本精度。我们真的不关心它，所以我们可以忽略它。然后，剩下的四个字节是图像的高度和宽度，以大端记法的两个无符号短整数：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Playing audio/video/images
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放音频/视频/图像
- en: The Python standard library provides no utilities to open images, and has limited
    support for playing audio files.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库没有提供打开图像的实用程序，并且对播放音频文件的支持有限。
- en: While it's possible to somehow play audio files in some formats by combining
    the `wave` and `ossaudiodev` or `winsound` modules, the OSS audio system has long
    been deprecated on Linux systems and neither of those is available on Mac systems.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以通过结合`wave`和`ossaudiodev`或`winsound`模块以某种格式在一些格式中播放音频文件，但是OSS音频系统在Linux系统上已经被弃用，而且这两者都不适用于Mac系统。
- en: For images, it would be possible to show an image using the `tkinter` module,
    but we would be constrained to very simple image formats as decoding the images
    would be on our own.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图像，可以使用`tkinter`模块显示图像，但我们将受到非常简单的图像格式的限制，因为解码图像将由我们自己完成。
- en: But there is one little trick we can use to actually display most image files
    and play most audio files.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一个小技巧，我们可以用来实际显示大多数图像文件和播放大多数音频文件。
- en: On most systems, trying to open a file with the default web browser will by
    the way play the file, and we can rely on this trick and the `webbrowser` module
    to play most file types through Python.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数系统上，尝试使用默认的网络浏览器打开文件将播放文件，我们可以依靠这个技巧和`webbrowser`模块通过Python播放大多数文件类型。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps for this recipe are as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的步骤如下：
- en: 'Given a path that points to a supported file, we can build a `file:// url`
    out of it and then use the `webbrowser` module to open it:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个指向支持的文件的路径，我们可以构建一个`file:// url`，然后使用`webbrowser`模块打开它：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Opening an image should display it:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开图像应该会显示它：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Also, opening an audio file should play it:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，打开音频文件应该会播放它：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So, we can use this method on most systems to show the content of a file to
    the user.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以在大多数系统上使用这种方法来向用户显示文件的内容。
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `webbrowser.open` function does actually start the browser on Linux systems,
    but on macOS and Windows systems it does a fairly different job.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`webbrowser.open`函数实际上在Linux系统上启动浏览器，但在macOS和Windows系统上，它的工作方式有所不同。'
- en: On Windows and macOS systems, it will ask the system to open the specified path
    with the most suitable application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows和macOS系统上，它将要求系统使用最合适的应用程序打开指定的路径。
- en: If the path is an HTTP URL, the most suitable application is, of course, `webbrowser`,
    but if the path is a local `file://` URL, the system will look for a software
    able to handle that file type and will open the file with that software.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路径是HTTP URL，则最合适的应用程序当然是`webbrowser`，但如果路径是本地`file://` URL，则系统将寻找能够处理该文件类型并将文件打开的软件。
- en: That is achieved by using an `os.startfile` on Windows systems and by running
    a small Apple script snippet through the `osascript` command on a macOS.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过在Windows系统上使用`os.startfile`，并通过`osascript`命令在macOS上运行一个小的Apple脚本片段来实现的。
- en: This allows us to open image and audio files, and as most image and audio file
    formats are also supported by browsers, it will also work on Linux systems.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够打开图像和音频文件，由于大多数图像和音频文件格式也受到浏览器支持，因此它也可以在Linux系统上运行。
