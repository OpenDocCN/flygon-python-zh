- en: SOAP and REST API Communication
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOAP和REST API通信
- en: In this chapter, we will look at SOAP and REST API basics. We will also look
    at the Python libraries for SOAP and REST APIs. We are going to learn about the
    Zeep library for SOAP and requests for REST API. You will learn to work with the
    JSON data. We are going to see simple examples of working with JSON data, such
    as converting JSON strings into Python objects and converting Python objects into
    JSON strings.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解SOAP和REST API的基础知识。我们还将了解Python用于SOAP和REST API的库。我们将学习有关SOAP的Zeep库和REST
    API的请求。您将学习如何处理JSON数据。我们将看到处理JSON数据的简单示例，例如将JSON字符串转换为Python对象和将Python对象转换为JSON字符串。
- en: 'In this chapter, you will learn the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: What is SOAP?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOAP是什么？
- en: Using libraries for SOAP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SOAP的库
- en: What is a RESTful API?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是RESTful API？
- en: Using standard libraries for RESTful API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准库进行RESTful API
- en: Working with JSON data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理JSON数据
- en: What is SOAP?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOAP是什么？
- en: '**SOAP** is **Simple Object Access Protocol**. SOAP is the standard communication
    protocol system that permits processes to use different operating systems. These
    communicate via HTTP and XML. It is a web services technology. SOAP APIs are mainly
    designed for tasks such as creating, updating, deleting, and recovering data.
    SOAP API uses the Web Services Description language to describe the functionalities
    offered by web services. SOAP describes all the functions and the types of data.
    It builds an XML-based protocol.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**SOAP**是**简单对象访问协议**。SOAP是允许进程使用不同操作系统的标准通信协议系统。这些通过HTTP和XML进行通信。它是一种Web服务技术。SOAP
    API主要用于创建，更新，删除和恢复数据等任务。SOAP API使用Web服务描述语言来描述Web服务提供的功能。SOAP描述所有功能和数据类型。它构建了一个基于XML的协议。'
- en: Using libraries for SOAP
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SOAP的库
- en: 'In this section, we are going to learn about Python libraries for SOAP. There
    are various libraries used for SOAP listed here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关Python用于SOAP的库。以下是用于SOAP的各种库：
- en: '`SOAPpy`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOAPpy
- en: '`Zeep`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zeep`'
- en: '`Ladon`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ladon`'
- en: '`suds-jurko`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`suds-jurko`'
- en: '`pysimplesoap`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pysimplesoap`'
- en: These are the SOAP API libraries for Python. In this section, we are going to
    learn about the Zeep library only.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Python的SOAP API库。在本节中，我们将只学习有关Zeep库的知识。
- en: 'To use the functionality of Zeep, you need to install it first. Run the following
    command in your Terminal to install Zeep:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Zeep的功能，您首先需要安装它。在终端中运行以下命令以安装Zeep：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `Zeep` module is used for WSDL documents. It generates the code for the
    services and the documents and provides the programming interface to the SOAP
    server. The `lxml` library is used to parse the XML documents.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`Zeep`模块用于WSDL文档。它为服务和文档生成代码，并为SOAP服务器提供编程接口。`lxml`库用于解析XML文档。'
- en: 'Now, we are going to see an example. Create a `soap_example.py` script and
    write the following code in it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个例子。创建一个`soap_example.py`脚本，并在其中写入以下代码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the script and you will get the following output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example, we first imported the `zeep` module. We first mentioned
    the website name. Then we created the `zeep` client object. The WSDL we used previously
    defines a simple `Method1` function that is made available by `zeep` via `client.service.Method1`.
    It takes two arguments and returns a string.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们首先导入了`zeep`模块。我们首先提到了网站名称。然后我们创建了`zeep`客户端对象。我们之前使用的WSDL定义了一个简单的`Method1`函数，通过`zeep`通过`client.service.Method1`提供。它接受两个参数并返回一个字符串。
- en: What is a RESTful API?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是RESTful API？
- en: '**REST** stands for **Representational State Transfer**. RESTful API has an
    approach to communication used in the development of web services. It is a style
    of a web service that works as a channel of communication between different systems
    over the internet. It is an application interface and is used to `GET`, `PUT`,
    `POST`, and `DELETE` data using `HTTP` requests.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**REST**代表**表述性状态转移**。RESTful API是在Web服务开发中使用的一种通信方法。它是一种作为互联网上不同系统之间通信渠道的Web服务风格。它是一个应用程序接口，用于使用`HTTP`请求`GET`，`PUT`，`POST`和`DELETE`数据。'
- en: The advantage of REST is that it uses less bandwidth, which is suitable for
    internet usage. The REST API uses uniform interfaces. All the resources are handled
    by `GET`, `POST`, `PUT`, and `DELETE` operations. The `REST` API uses `GET` to
    retrieve a resource, uses `PUT` to update the resource or to change the state
    of resource, uses `POST` to create a resource, and uses `DELETE` to delete the
    resource. Systems using REST APIs deliver fast performance and reliability.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: REST的优势在于它使用的带宽较少，适合互联网使用。REST API使用统一的接口。所有资源都由`GET`，`POST`，`PUT`和`DELETE`操作处理。`REST`
    API使用`GET`来检索资源，使用`PUT`来更新资源或更改资源状态，使用`POST`来创建资源，使用`DELETE`来删除资源。使用REST API的系统提供快速性能和可靠性。
- en: The REST API handles every request independently. The request from client to
    server must contain all the information that is necessary to understand that request.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: REST API独立处理每个请求。从客户端到服务器的请求必须包含理解该请求所需的所有信息。
- en: Using standard libraries for RESTful APIs
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准库进行RESTful API
- en: In this section, we are going to learn how to use RESTful APIs. To do this,
    we are going to use the `requests` and JSON modules of Python. We will see an
    example now. First, we are going to use the `requests` module to get the information
    from an API. We will see `GET` and `POST` requests.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用RESTful API。为此，我们将使用Python的`requests`和JSON模块。我们现在将看一个例子。首先，我们将使用`requests`模块从API获取信息。我们将看到`GET`和`POST`请求。
- en: 'First, you must install the `requests` library as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您必须安装`requests`库，如下所示：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we will see an example. Create a `rest_get_example.py` script and write
    the following content in it:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个例子。创建一个`rest_get_example.py`脚本，并在其中写入以下内容：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, we imported the `requests` module to get the request.
    Next, we created a request object, `req_obj`, and specified a link from where
    we want to get the request. And next, we printed it. The output we got is a status
    code `200`, which indicates success.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们导入了`requests`模块来获取请求。接下来，我们创建了一个请求对象`req_obj`，并指定了我们想要获取请求的链接。然后，我们打印了它。我们得到的输出是状态码`200`，表示成功。
- en: 'Now, we are going to see the `POST` request example. `POST` requests are used
    for sending data to a server. Create a `rest_post_example.py` script and write
    the following content in it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到`POST`请求的示例。`POST`请求用于向服务器发送数据。创建一个`rest_post_example.py`脚本，并在其中写入以下内容：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the script and you will get the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, we learned about the `POST` request. First, we imported
    the necessary module requests and JSON. Next, we mentioned the URL. Also, we entered
    the data that we want to post in a dictionary format. Next, we mentioned headers.
    And then we posted, using a `POST` request. The output we got is status code `200`,
    which is a success code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们学习了关于`POST`请求。首先，我们导入了必要的模块requests和JSON。接下来，我们提到了URL。此外，我们以字典格式输入了要发布的数据。接下来，我们提到了标头。然后，我们使用`POST`请求发布。我们得到的输出是状态码`200`，这是一个成功的代码。
- en: Working with JSON data
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理JSON数据
- en: In this section, we are going to learn about JSON data. **JSON** stands for
    **JavaScript Object Notation**. JSON is a data interchange format. It encodes
    Python objects as JSON strings and decodes JSON strings into Python objects. Python
    has a JSON module that formats the JSON output. It has functions for serializing
    and deserializing JSON.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关JSON数据。**JSON**代表**JavaScript对象表示**。JSON是一种数据交换格式。它将Python对象编码为JSON字符串，并将JSON字符串解码为Python对象。Python有一个JSON模块，用于格式化JSON输出。它具有用于序列化和反序列化JSON的函数。
- en: '`json.dump(obj, fileObj)`: This function will serialize an object as a JSON-formatted
    stream.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json.dump(obj, fileObj)`: 这个函数将一个对象序列化为一个JSON格式的流。'
- en: '`json.dumps(obj)`: This function will serialize an object as a JSON formatted
    string.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json.dumps(obj)`: 这个函数将一个对象序列化为一个JSON格式的字符串。'
- en: '`json.load(JSONfile)`: This function will deserialize a JSON file as a Python
    object.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json.load(JSONfile)`: 这个函数将一个JSON文件反序列化为一个Python对象。'
- en: '`json.loads(JSONfile)`: This function will deserializes a string-type JSON
    file to a Python object.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json.loads(JSONfile)`: 这个函数将一个字符串类型的JSON文件反序列化为一个Python对象。'
- en: 'It also has two classes for encoding and decoding listed here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它还列出了编码和解码的两个类：
- en: '`JSONEncoder`: Used to convert Python objects into JSON format.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSONEncoder`: 用于将Python对象转换为JSON格式。'
- en: '`JSONDecoder`: Used to convert a JSON formatted file into a Python object.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSONDecoder`: 用于将JSON格式的文件转换为Python对象。'
- en: 'Now, we are going to see some examples using a JSON module. First, we are going
    to see the conversion from JSON to Python. For that, create a script `json_to_python.py`
    and write the following code in it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到一些使用JSON模块的示例。首先，我们将看到从JSON到Python的转换。为此，创建一个名为`json_to_python.py`的脚本，并在其中写入以下代码：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, we have written a code that will covert a JSON string
    to a Python object. The `json.loads()` function is used to convert a JSON string
    to a Python object.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们编写了一个代码，将JSON字符串转换为Python对象。`json.loads()`函数用于将JSON字符串转换为Python对象。
- en: 'Now, we are going to see how to convert Python to JSON. For that, create a `python_to_json.py`
    script and write the following code in it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何将Python转换为JSON。为此，创建一个`python_to_json.py`脚本，并在其中写入以下代码：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the script and you will get the following output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding example, we converted a Python object to a JSON string. The
    `json.dumps()` function is used for this conversion.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将Python对象转换为JSON字符串。`json.dumps()`函数用于这种转换。
- en: 'Now, we are going to see how to convert Python objects of various types into
    the JSON string. For that, create a `python_object_to_json.py` script and write
    the following content in it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到如何将各种类型的Python对象转换为JSON字符串。为此，创建一个`python_object_to_json.py`脚本，并在其中写入以下内容：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the script and you will get the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding example, we converted various types of Python objects into
    JSON string using the `json.dumps()` function. After conversion, the Python list
    and tuples are converted into arrays. Integers and floats are treated as numbers
    in JSON. The following is the chart of conversion from Python to JSON:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用`json.dumps()`函数将各种类型的Python对象转换为JSON字符串。转换后，Python列表和元组被转换为数组。整数和浮点数在JSON中被视为数字。以下是从Python到JSON的转换图表：
- en: '| **Python** | **JSON** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **Python** | **JSON** |'
- en: '| `dict` | Object |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `dict` | Object |'
- en: '| `list` | Array |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `list` | Array |'
- en: '| `tuple` | Array |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `tuple` | Array |'
- en: '| `str` | String |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `str` | String |'
- en: '| `int` | Number |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `int` | Number |'
- en: '| `float` | Number |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `float` | Number |'
- en: '| `True` | true |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `True` | true |'
- en: '| `False` | false |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `False` | false |'
- en: '| `None` | null |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `None` | null |'
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about SOAP APIs and RESTful APIs. You learned about
    the `zeep` Python library for SOAP APIs and the requests library for REST APIs.
    You also learned to work with JSON data, for instance, converting JSON to Python
    and vice versa.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您学习了关于SOAP API和RESTful API。您学习了关于`zeep` Python库用于SOAP API和requests库用于REST
    API。您还学会了如何处理JSON数据，例如将JSON转换为Python，反之亦然。
- en: In the next chapter, you will learn about web scrapping and the Python library
    for performing this task.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关网页抓取和用于执行此任务的Python库。
- en: Questions
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between SOAP and REST API?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SOAP和REST API之间有什么区别？
- en: What is the difference between `json.loads` and `json.load`?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`json.loads`和`json.load`之间有什么区别？'
- en: Does JSON support all the platforms?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSON支持所有平台吗？
- en: What is the output of the following code snippet?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段的输出是什么？
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What is the output of the following code snippet?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段的输出是什么？
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Further reading
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: JSON documentation: [https://docs.python.org/3/library/json.html](https://docs.python.org/3/library/json.html)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON文档：[https://docs.python.org/3/library/json.html](https://docs.python.org/3/library/json.html)
- en: REST API information: [https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer](https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API信息：[https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer](https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer)
