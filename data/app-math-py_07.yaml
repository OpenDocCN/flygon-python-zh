- en: Regression and Forecasting
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 回归和预测
- en: One of the most important tasks that a statistician or data scientist has is
    to generate a systematic understanding of the relationship between two sets of
    data. This can mean a "continuous" relationship between two sets of data, where
    one value depends directly on the value of another variable. Alternatively, it
    can mean a categorical relationship, where one value is categorized according
    to another. The tool for working with these kinds of problems is *regression*.
    In its most basic form, regression involves fitting a straight line through a
    scatter plot of the two sets of data and performing some analysis to see how well
    this line "fits" the data. Of course, we often need something more sophisticated
    to model more complex relationships that exist in the real world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 统计学家或数据科学家最重要的任务之一是生成对两组数据之间关系的系统性理解。这可能意味着两组数据之间的“连续”关系，其中一个值直接取决于另一个变量的值。或者，它可能意味着分类关系，其中一个值根据另一个值进行分类。处理这些问题的工具是*回归*。在其最基本的形式中，回归涉及将一条直线拟合到两组数据的散点图中，并进行一些分析，以查看这条直线如何“拟合”数据。当然，我们通常需要更复杂的东西来模拟现实世界中存在的更复杂的关系。
- en: Time series represent a specialized class of these regression type problems,
    where we have a value that is evolving over a period of time. Unlike more simple
    problems, time series data usually has complex dependencies between consecutive
    values; for instance, a value may depend on both of the previous values, and perhaps
    even on the previous "noise". Time series modeling is important across science
    and economics, and there are a variety of tools for modeling time series data.
    The basic technique for working with time series data is called **ARIMA**, which
    stands for **autoregressive integrated moving average**. This model incorporates
    two underlying components, an **autoregressive** (**AR**)**component and a **moving
    average** (**MA**) component, to construct a model for the observed data.**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列代表这些回归类型问题的一种专门类别，其中一个值在一段时间内发展。与更简单的问题不同，时间序列数据通常在连续值之间有复杂的依赖关系；例如，一个值可能依赖于前两个值，甚至可能依赖于前一个“噪音”。时间序列建模在科学和经济学中非常重要，有各种工具可用于建模时间序列数据。处理时间序列数据的基本技术称为**ARIMA**，它代表**自回归综合移动平均**。该模型包括两个基本组件，一个**自回归**（**AR**）**组件和一个**移动平均**（**MA**）组件，用于构建观察数据的模型。
- en: '**In this chapter, we will learn how to model the relationship between two
    sets of data, quantify how strong this relationship is, and generate forecasts
    about other values (the future). Then, we will learn how to use logistic regression,
    which is a variation of a simple linear model, in classification problems. Finally,
    we will build models for time series data using ARIMA and build on these models
    for different kinds of data. We will finish this chapter by using a library called
    Prophet to automatically generate a model for time series data.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何建立两组数据之间的关系模型，量化这种关系的强度，并对其他值（未来）生成预测。然后，我们将学习如何使用逻辑回归，在分类问题中，这是简单线性模型的一种变体。最后，我们将使用ARIMA为时间序列数据构建模型，并基于这些模型构建不同类型的数据。我们将通过使用一个名为Prophet的库来自动生成时间序列数据模型来结束本章。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Using basic linear regression
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本线性回归
- en: Using multilinear regression
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多元线性回归
- en: Classifying using logarithmic regression
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对数回归进行分类
- en: Modeling time series data with ARMA
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ARMA对时间序列数据进行建模
- en: Forecasting from time series data using ARIMA
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ARIMA从时间序列数据进行预测
- en: Forecasting seasonal data using ARIMA
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ARIMA对季节性数据进行预测
- en: Using Prophet to model time series
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Prophet对时间序列进行建模
- en: Let's get started!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, as usual, we will need the NumPy package imported under the
    alias `np`, the Matplotlib `pyplot` module imported as `plt`, and the Pandas package
    imported as `pd`. We can do this using the following commands:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，像往常一样，我们需要导入NumPy包并使用别名`np`，导入Matplotlib `pyplot`模块并使用`plt`别名，以及导入Pandas包并使用`pd`别名。我们可以使用以下命令来实现：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will also need some new packages in this chapter. The statsmodels package
    is used for regression and time series analysis, the `scikit-learn` package (`sklearn`)
    provides general data science and machine learning tools, and the Prophet package
    (`fbprophet`) is used for automatically modeling time series data. These packages
    can be installed using your favorite package manager, such as `pip`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还需要一些新的包。statsmodels包用于回归和时间序列分析，`scikit-learn`包（`sklearn`）提供通用数据科学和机器学习工具，Prophet包（`fbprophet`）用于自动生成时间序列数据模型。这些包可以使用您喜欢的包管理器（如`pip`）进行安装：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Prophet package can prove difficult to install on some operating systems
    because of its dependencies. If installing `fbprophet` causes a problem, you might
    want to try using the Anaconda distribution of Python and its package manager,
    `conda`, which handles the dependencies more rigorously:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Prophet包可能在某些操作系统上安装起来比较困难，因为它的依赖关系。如果安装`fbprophet`出现问题，您可能希望尝试使用Python的Anaconda发行版及其包管理器`conda`，它可以更严格地处理依赖关系：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, we also need a small module called `tsdata` that is contained in the
    repository for this chapter. This module contains a series of utilities for producing
    sample time series data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还需要一个名为`tsdata`的小模块，该模块包含在本章的存储库中。该模块包含一系列用于生成样本时间序列数据的实用程序。
- en: The code for this chapter can be found in the `Chapter 07` folder of the GitHub
    repository at [https://github.com/PacktPublishing/Applying-Math-with-Python/tree/master/Chapter%2007](https://github.com/PacktPublishing/Applying-Math-with-Python/tree/master/Chapter%2007).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在GitHub存储库的`Chapter 07`文件夹中找到：[https://github.com/PacktPublishing/Applying-Math-with-Python/tree/master/Chapter%2007](https://github.com/PacktPublishing/Applying-Math-with-Python/tree/master/Chapter%2007)。
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/2Ct8m0B](https://bit.ly/2Ct8m0B).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码实际操作：[https://bit.ly/2Ct8m0B](https://bit.ly/2Ct8m0B)。
- en: Using basic linear regression
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基本线性回归
- en: Linear regression is a tool for modeling the dependence between two sets of
    data so that we can eventually use this model to make predictions. The name comes
    from the fact that we form a linear model (straight line) of one set of data based
    on a second. In the literature, the variable that we wish to model is frequently
    called the *response* variable, and the variable that we are using in this model
    is the *predictor* variable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 线性回归是一种建模两组数据之间依赖关系的工具，这样我们最终可以使用这个模型进行预测。名称来源于我们基于第二组数据形成一个线性模型（直线）。在文献中，我们希望建模的变量通常被称为*响应*变量，而我们在这个模型中使用的变量是*预测*变量。
- en: In this recipe, we'll learn how to use the statsmodels package to perform simple
    linear regression to model the relationship between two sets of data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将学习如何使用statsmodels包执行简单的线性回归，以建模两组数据之间的关系。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we will need the statsmodels `api` module imported under the
    alias `sm`, the NumPy package imported as `np`, the Matplotlib `pyplot` module
    imported as `plt`, and an instance of a NumPy default random number generator.
    All this can be achieved with the following commands:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要导入statsmodels的`api`模块并使用别名`sm`，导入NumPy包并使用别名`np`，导入Matplotlib的`pyplot`模块并使用别名`plt`，以及一个NumPy默认随机数生成器的实例。所有这些都可以通过以下命令实现：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The following steps outline how to use the statsmodels package to perform a
    simple linear regression on two sets of data:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤概述了如何使用statsmodels包对两组数据执行简单线性回归：
- en: 'First, we generate some example data that we can analyze. We''ll generate two
    sets of data that will illustrate a good fit and a less good fit:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们生成一些示例数据进行分析。我们将生成两组数据，这将说明一个良好的拟合和一个不太好的拟合：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A good first step in performing regression analysis is to create a scatter
    plot of the datasets. We''ll do this on the same set of axes:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行回归分析的一个很好的第一步是创建数据集的散点图。我们将在同一组坐标轴上完成这一步：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We need to use the `sm.add_constant` utility routine so that the modeling step
    will include a constant value:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要使用`sm.add_constant`实用程序例程，以便建模步骤将包括一个常数值：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, we can create an `OLS` model for our first set of data and use the `fit`
    method to fit the model. We then print a summary of the data using the `summary`
    method:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以为我们的第一组数据创建一个`OLS`模型，并使用`fit`方法来拟合模型。然后，我们使用`summary`方法打印数据的摘要：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We repeat the model fitting for the second set of data and print the summary:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们重复第二组数据的模型拟合并打印摘要：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we create a new range of *x* values using `linspace` that we can use to
    plot the trend lines on our scatter plot. We need to add the `constant` column
    to interact with the models that we have created:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们使用`linspace`创建一个新的*x*值范围，我们可以用它来在散点图上绘制趋势线。我们需要添加`constant`列以与我们创建的模型进行交互：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we use the `predict` method on the model objects so that we can use the
    model to predict the response value at each of the *x* values we generated in
    the previous step:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在模型对象上使用`predict`方法，这样我们就可以使用模型在前一步生成的每个*x*值上预测响应值：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we plot the model data computed in the previous two steps on top of
    the scatter plot:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将在散点图上绘制在前两个步骤中计算的模型数据：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The scatter plot, along with the best fit lines (the models) we added, can
    be seen in the following figure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图以及我们添加的最佳拟合线（模型）可以在下图中看到：
- en: '![](assets/8bf4175e-e73a-4f3b-b5a1-860f8d0bc8f1.png)Figure 7.1: Scatter plot
    of data with lines of best fit computed using least squares regression'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8bf4175e-e73a-4f3b-b5a1-860f8d0bc8f1.png)图7.1：使用最小二乘法回归计算的数据散点图和最佳拟合线。'
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Elementary mathematics tells us that the equation of a straight line is given
    by the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 基本数学告诉我们，一条直线的方程如下所示：
- en: '![](assets/def061a4-d8f7-482e-a3a3-78d4587c495f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/def061a4-d8f7-482e-a3a3-78d4587c495f.png)'
- en: 'Here, *c*is the value at which the line meets the *y* axis, usually called
    the*y**intercept*, and *m*is the *gradient*of the line. In the linear regression
    context, we are trying to find a relationship between the response variable, *Y*,
    and the predictor variable, *X*, that has the form of a straight line so that
    the following occurs:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*c*是直线与*y*轴相交的值，通常称为*y*截距，*m*是直线的斜率。在线性回归的背景下，我们试图找到响应变量*Y*和预测变量*X*之间的关系，使其形式为一条直线，使以下情况发生：
- en: '![](assets/2777a0a2-21f8-41b8-97d0-0969989f1e8f.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2777a0a2-21f8-41b8-97d0-0969989f1e8f.png)'
- en: 'Here, *c*and *m*are now parameters that are to be found. We can write this
    in a different way, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*c*和*m*现在是要找到的参数。我们可以用另一种方式来表示这一点，如下所示：
- en: '![](assets/f85da231-6294-45c3-9e5a-b08dd6a6ef79.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f85da231-6294-45c3-9e5a-b08dd6a6ef79.png)'
- en: 'Here, *E* is an error term, which, in general, depends on *X*. To find the
    "best" model, we need to find values for the *c* and *m* parameters, for which
    the error term, *E*, is minimized (in an appropriate sense). The basic method
    for finding the values of the parameters such that this error is minimized is
    the method of least squares, which gives its name to the type of regression used
    here: *ordinary least squares*. Once we have used this method to establish some
    relationship between a response variable and a predictor variable, our next task
    is to assess how well this model actually represents this relationship. For this,
    we form the *residuals* given by the following equation:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*E*是一个误差项，一般来说，它取决于*X*。为了找到“最佳”模型，我们需要找到*E*误差被最小化的*c*和*m*参数值（在适当的意义上）。找到使这个误差最小化的参数值的基本方法是最小二乘法，这给了这里使用的回归类型以它的名字：*普通最小二乘法*。一旦我们使用这种方法建立了响应变量和预测变量之间的某种关系，我们的下一个任务就是评估这个模型实际上如何代表这种关系。为此，我们形成了以下方程给出的*残差*：
- en: '![](assets/c3ade12f-e352-49c2-a1f1-b07373253b4d.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3ade12f-e352-49c2-a1f1-b07373253b4d.png)'
- en: We do this for each of the data points, *X[i]* and *Y[i]*. In order to provide
    a rigorous statistical analysis of how well we have modeled the relationship between
    the data, we need the residuals to satisfy certain assumptions. First, we need
    them to be independent in the sense of probability. Second, we need them to be
    normally distributed about 0 with a common variance. (In practice, we can relax
    these slightly and still make reasonable comments about the accuracy of the model.)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对每个数据点*X[i]*和*Y[i]*进行这样的操作。为了对我们对数据之间关系建模的准确性进行严格的统计分析，我们需要残差满足某些假设。首先，我们需要它们在概率意义上是独立的。其次，我们需要它们围绕0呈正态分布，并且具有相同的方差。（在实践中，我们可以稍微放松这些条件，仍然可以对模型的准确性做出合理的评论。）
- en: In this recipe, we generated response data from the predictor data using a linear
    relationship. The difference between the two response datasets we created is the
    "size" of the error at each value. For the first dataset, `y1`, the residuals
    were normally distributed with a standard deviation of 0.5, whereas for the second
    dataset, `y2`, the residuals have a standard deviation of 5.0\. We can see this
    variability in the scatter plot shown in the *Figure 7.1*, where the data for
    `y1` is generally very close to the best fit line – which closely matches the
    actual relationship that was used to generate the data – whereas the `y2` data
    is much further from the best fit line.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们使用线性关系从预测数据中生成响应数据。我们创建的两个响应数据集之间的差异在于每个值的误差的“大小”。对于第一个数据集`y1`，残差呈正态分布，标准差为0.5，而对于第二个数据集`y2`，残差的标准差为5.0。我们可以在*图7.1*中的散点图中看到这种变异性，其中`y1`的数据通常非常接近最佳拟合线
    - 这与用于生成数据的实际关系非常接近 - 而`y2`数据则远离最佳拟合线。
- en: The `OLS` object from the statsmodels package is the main interface for ordinary
    least squares regression. We provide the response data and the predictor data
    as arrays. In order to have a constant term in the model, we need to add a column
    of ones in the predictor data. The `sm.add_constant` routine is a simple utility
    for adding this constant column. The `fit` method of the `OLS` class computes
    the parameters for the model and returns a results object (`model1` and `model2`)
    that contains the parameters for the best fit model. The `summary` method creates
    a string containing information about the model and various statistics about the
    goodness of fit. The `predict` method applies the model to new data. As the name
    suggests, it can be be used to make predictions using the model.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 来自statsmodels包的`OLS`对象是普通最小二乘回归的主要接口。我们将响应数据和预测数据作为数组提供。为了在模型中有一个常数项，我们需要在预测数据中添加一列1。`sm.add_constant`例程是一个简单的实用程序，用于添加这个常数列。`OLS`类的`fit`方法计算模型的参数，并返回一个包含最佳拟合模型参数的结果对象（`model1`和`model2`）。`summary`方法创建一个包含有关模型和拟合优度的各种统计信息的字符串。`predict`方法将模型应用于新数据。顾名思义，它可以用于使用模型进行预测。
- en: There are two statistics reported in the summary besides the parameter values
    themselves. The first is the *R²* value, or the adjusted version, which measures
    the variability explained by the model against the total variability. This value
    will be between 0 and 1\. A higher value indicates a better fit. The second is
    the F statistic p value, which indicates the overall significance of the model.
    As with ANOVA testing, a small F statistic indicates that the model is significant,
    meaning that the model is more likely to accurately model the data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了参数值本身之外，摘要中报告了另外两个统计量。第一个是*R²*值，或者调整后的版本，它衡量了模型解释的变异性与总变异性之间的关系。这个值将在0和1之间。较高的值表示拟合效果更好。第二个是F统计量的p值，它表示模型的整体显著性。与ANOVA测试一样，较小的F统计量表明模型是显著的，这意味着模型更有可能准确地对数据进行建模。
- en: In this recipe, the first model, `model1`, has an adjusted *R²* value of 0.986,
    indicating that the model very closely fits the data, and a p value of 6.43e-19,
    indicating high significance. The second model has an adjusted *R²* value of 0.361,
    which indicates that the model less closely fits the data, and a p value of 0.000893,
    which also indicates high significance. Even though the second model less closely
    fits the data, in terms of statistics, that is not to say that it is not useful.
    The model is still significant, though less so than the first model, but it doesn't
    account for all of the variability (or at least a significant portion of it) in
    the data. This could be indicative of additional (non-linear) structures in the
    data, or that the data is less correlated, which means there is a weaker relationship
    between the response and predictor data (due to the way we constructed the data,
    we know that the latter is true).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，第一个模型`model1`的调整后的*R²*值为0.986，表明该模型非常紧密地拟合了数据，p值为6.43e-19，表明具有很高的显著性。第二个模型的调整后的*R²*值为0.361，表明该模型与数据的拟合程度较低，p值为0.000893，也表明具有很高的显著性。尽管第二个模型与数据的拟合程度较低，但从统计学的角度来看，并不意味着它没有用处。该模型仍然具有显著性，尽管不如第一个模型显著，但它并没有解释所有的变异性（或者至少是数据中的一个显著部分）。这可能表明数据中存在额外的（非线性）结构，或者数据之间的相关性较低，这意味着响应和预测数据之间的关系较弱（由于我们构造数据的方式，我们知道后者是真实的）。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Simple linear regression is a good general-purpose tool in a statistician''s
    toolkit. It is excellent for finding the nature of the relationship between two
    sets of data that are known (or suspected) to be connected in some way. The statistical
    measurement of how much one set of data depends on another is called *correlation*.
    We can measure correlation using a correlation coefficient, such as *Spearman''s
    rank correlation coefficient*. A high positive correlation coefficient indicates
    a strong positive relationship between the data, such as that seen in this recipe,
    while a high negative correlation coefficient indicates a strong negative relationship,
    where the slope of the best fit line through the data is negative. A correlation
    coefficient of 0 means that the data is not correlated: there is no relationship
    between the data.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 简单线性回归是统计学家工具包中一个很好的通用工具。它非常适合找到两组已知（或被怀疑）以某种方式相互关联的数据之间关系的性质。衡量一个数据集依赖于另一个数据集的程度的统计测量称为*相关性*。我们可以使用相关系数来衡量相关性，例如*Spearman秩相关系数*。高正相关系数表示数据之间存在强烈的正相关关系，就像在这个示例中看到的那样，而高负相关系数表示强烈的负相关关系，其中通过数据的最佳拟合线的斜率为负。相关系数为0意味着数据没有相关性：数据之间没有关系。
- en: If the sets of data are clearly related but not in a linear (straight line)
    relationship, then it might follow a polynomial relationship where, for example,
    one value is related to the other squared. Sometimes, you can apply a transformation,
    such as a logarithm, to one set of data and then use linear regression to fit
    the transformed data. Logarithms are especially useful when there is a power-law
    relationship between the two sets of data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据集之间明显相关，但不是线性（直线）关系，那么它可能遵循一个多项式关系，例如，一个值与另一个值的平方有关。有时，您可以对一个数据集应用转换，例如对数，然后使用线性回归来拟合转换后的数据。当两组数据之间存在幂律关系时，对数特别有用。
- en: Using multilinear regression
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多元线性回归
- en: Simple linear regression, as seen in the previous recipe, is excellent for producing
    simple models of a relationship between one response variable and one predictor
    variable. Unfortunately, it is far more common to have a single response variable
    that depends on many predictor variables. Moreover, we might not know which variables
    from a collection make good predictor variables. For this task, we need multilinear
    regression.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 简单线性回归，如前面的示例所示，非常适合产生一个响应变量和一个预测变量之间关系的简单模型。不幸的是，有一个单一的响应变量依赖于许多预测变量更为常见。此外，我们可能不知道从一个集合中选择哪些变量作为良好的预测变量。对于这个任务，我们需要多元线性回归。
- en: In this recipe, we will learn how to use multilinear regression to explore the
    relationship between a response variable and several predictor variables.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何使用多元线性回归来探索响应变量和几个预测变量之间的关系。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For this recipe, we will need the NumPy package imported as `np`, the Matplotlib
    `pyplot` module imported as `plt`, the Pandas package imported as `pd`, and an
    instance of the NumPy default random number generator created using the following
    commands:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将需要导入NumPy包作为`np`，导入Matplotlib的`pyplot`模块作为`plt`，导入Pandas包作为`pd`，并创建NumPy默认随机数生成器的实例，使用以下命令：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will also need the statsmodels `api` module imported as `sm`, which can
    be imported using the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要导入statsmodels的`api`模块作为`sm`，可以使用以下命令导入：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps show you how to use multilinear regression to explore the
    relationship between several predictors and a response variable:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤向您展示了如何使用多元线性回归来探索几个预测变量和一个响应变量之间的关系：
- en: 'First, we need to create the predictor data to analyze. This will take the
    form of a Pandas `DataFrame` with four terms. We will add the constant term at
    this stage by adding a column of ones:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建要分析的预测数据。这将采用Pandas的`DataFrame`形式，有四个项。我们将通过添加一个包含1的列来添加常数项：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we will generate the response data using only the first two variables:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将仅使用前两个变量生成响应数据：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we''ll produce scatter plots of the response data against each of the
    predictor variables:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将生成响应数据与每个预测变量的散点图：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we''ll add axis labels and titles to each scatter plot since this is
    good practice:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将为每个散点图添加轴标签和标题，因为这是一个很好的做法：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: model = sm.OLS(Y, p_vars).fit()
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: model = sm.OLS(Y, p_vars).fit()
- en: print(model.summary())
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: print(model.summary())
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: OLS Regression Results
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: OLS回归结果
- en: ==================================================================
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ==================================================================
- en: 'Dep. Variable: y                  R-squared: 0.770'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因变量：y                  R平方：0.770
- en: 'Model: OLS Adj.                   R-squared: 0.762'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 模型：OLS调整                   R平方：0.762
- en: 'Method: Least Squares             F-statistic: 106.8'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：最小二乘法             F统计量：106.8
- en: 'Date: Thu, 23 Apr 2020            Prob (F-statistic): 1.77e-30'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2020年4月23日星期四            概率（F统计量）：1.77e-30
- en: 'Time: 12:47:30                    Log-Likelihood: -389.38'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 时间：12:47:30                    对数似然：-389.38
- en: 'No. Observations: 100             AIC: 786.8'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 观测数量：100             AIC：786.8
- en: 'Df Residuals: 96                  BIC: 797.2'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 残差自由度：96                  BIC：797.2
- en: 'Df Model: 3'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 模型自由度：3
- en: 'Covariance Type: nonrobust'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 协方差类型：非鲁棒
- en: ===================================================================
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: coef    std err     t      P>|t|      [0.025     0.975]
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: coef    std err     t      P>|t|      [0.025     0.975]
- en: '-------------------------------------------------------------------'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '-------------------------------------------------------------------'
- en: const   -9.8676    4.028   -2.450    0.016     -17.863    -1.872
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 常数   -9.8676    4.028   -2.450    0.016     -17.863    -1.872
- en: X1       4.7234    0.303    15.602   0.000       4.122     5.324
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: X1       4.7234    0.303    15.602   0.000       4.122     5.324
- en: X2      -1.8945    0.166   -11.413   0.000     -2.224     -1.565
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: X2      -1.8945    0.166   -11.413   0.000     -2.224     -1.565
- en: X3      -0.0910    0.206   -0.441    0.660     -0.500      0.318
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: X3      -0.0910    0.206   -0.441    0.660     -0.500      0.318
- en: ===================================================================
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: 'Omnibus: 0.296                Durbin-Watson: 1.881'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'Omnibus: 0.296                Durbin-Watson: 1.881'
- en: 'Prob(Omnibus): 0.862          Jarque-Bera (JB): 0.292'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'Prob(Omnibus): 0.862          Jarque-Bera (JB): 0.292'
- en: 'Skew: 0.123                   Prob(JB): 0.864'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '偏度：0.123                   Prob(JB): 0.864'
- en: 'Kurtosis: 2.904               Cond. No. 72.9'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 峰度：2.904               条件数 72.9
- en: ===================================================================
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: second_model = sm.OLS(Y, p_vars.loc[:, "const":"X2"]).fit()
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: second_model = sm.OLS(Y, p_vars.loc[:, "const":"X2"]).fit()
- en: print(second_model.summary())
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: print(second_model.summary())
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: from numpy.random import default_rng
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 从numpy.random导入default_rng
- en: rng = default_rng(12345)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: rng = default_rng(12345)
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: from sklearn.linear_model import LogisticRegression
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从sklearn.linear_model导入LogisticRegression
- en: from sklearn.metrics import classification_report
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从sklearn.metrics导入classification_report
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: df = pd.DataFrame({
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: df = pd.DataFrame({
- en: '"var1": np.concatenate([rng.normal(3.0, 1.5, size=50),'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '"var1": np.concatenate([rng.normal(3.0, 1.5, size=50),'
- en: rng.normal(-4.0, 2.0, size=50)]),
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: rng.normal(-4.0, 2.0, size=50)]),
- en: '"var2": rng.uniform(size=100),'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '"var2": rng.uniform(size=100),'
- en: '"var3": np.concatenate([rng.normal(-2.0, 2.0, size=50),'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '"var3": np.concatenate([rng.normal(-2.0, 2.0, size=50),'
- en: rng.normal(1.5, 0.8, size=50)])
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: rng.normal(1.5, 0.8, size=50)])
- en: '})'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: score = 4.0 + df["var1"] - df["var3"]
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 分数 = 4.0 + df["var1"] - df["var3"]
- en: Y = score >= 0
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Y = score >= 0
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: fig1, ax1 = plt.subplots()
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: fig1, ax1 = plt.subplots()
- en: ax1.plot(df.loc[Y, "var1"], df.loc[Y, "var3"], "bo", label="True
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ax1.plot(df.loc[Y, "var1"], df.loc[Y, "var3"], "bo", label="True
- en: data")
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 数据")
- en: ax1.plot(df.loc[~Y, "var1"], df.loc[~Y, "var3"], "rx", label="False
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ax1.plot(df.loc[~Y, "var1"], df.loc[~Y, "var3"], "rx", label="False
- en: data")
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 数据")
- en: ax1.legend()
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ax1.legend()
- en: ax1.set_xlabel("var1")
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: ax1.set_xlabel("var1")
- en: ax1.set_ylabel("var3")
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: ax1.set_ylabel("var3")
- en: ax1.set_title("Scatter plot of var3 against var1")
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ax1.set_title("Scatter plot of var3 against var1")
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: model = LogisticRegression()
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: model = LogisticRegression()
- en: model.fit(df, Y)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: model.fit(df, Y)
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: test_df = pd.DataFrame({
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: test_df = pd.DataFrame({
- en: '"var1": np.concatenate([rng.normal(3.0, 1.5, size=50),'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '"var1": np.concatenate([rng.normal(3.0, 1.5, size=50),'
- en: rng.normal(-4.0, 2.0, size=50)]),
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: rng.normal(-4.0, 2.0, size=50)]),
- en: '"var2": rng.uniform(size=100),'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '"var2": rng.uniform(size=100),'
- en: '"var3": np.concatenate([rng.normal(-2.0, 2.0, size=50),'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '"var3": np.concatenate([rng.normal(-2.0, 2.0, size=50),'
- en: rng.normal(1.5, 0.8, size=50)])
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: rng.normal(1.5, 0.8, size=50)])
- en: '})'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: test_scores = 4.0 + test_df["var1"] - test_df["var3"]
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: test_scores = 4.0 + test_df["var1"] - test_df["var3"]
- en: test_Y = test_scores >= 0
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: test_Y = test_scores >= 0
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: test_predicts = model.predict(test_df)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: test_predicts = model.predict(test_df)
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: print(classification_report(test_Y, test_predicts))
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: print(classification_report(test_Y, test_predicts))
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: precision     recall      f1-score      support
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: precision     recall      f1-score      support
- en: False       1.00        1.00         1.00          18
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: False       1.00        1.00         1.00          18
- en: True       1.00        1.00         1.00          32
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: True       1.00        1.00         1.00          32
- en: accuracy                                1.00          50
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: accuracy                                1.00          50
- en: macro avg       1.00        1.00         1.00          50
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: macro avg       1.00        1.00         1.00          50
- en: weighted avg       1.00        1.00         1.00          50
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: weighted avg       1.00        1.00         1.00          50
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: from tsdata import generate_sample_data
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: from tsdata import generate_sample_data
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: sample_ts, _ = generate_sample_data()
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: sample_ts, _ = generate_sample_data()
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: ts_fig, ts_ax = plt.subplots()
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ts_fig, ts_ax = plt.subplots()
- en: sample_ts.plot(ax=ts_ax, label="Observed")
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: sample_ts.plot(ax=ts_ax, label="Observed")
- en: ts_ax.set_title("Time series data")
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.set_title("Time series data")
- en: ts_ax.set_xlabel("Date")
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.set_xlabel("Date")
- en: ts_ax.set_ylabel("Value")
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.set_ylabel("Value")
- en: '[PRE34]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: adf_results = sm.tsa.adfuller(sample_ts)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: adf_results = sm.tsa.adfuller(sample_ts)
- en: adf_pvalue = adf_results[1]
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: adf_pvalue = adf_results[1]
- en: print("Augmented Dickey-Fuller test:\nP-value:", adf_pvalue)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: print("Augmented Dickey-Fuller test:\nP-value:", adf_pvalue)
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: ap_fig, (acf_ax, pacf_ax) = plt.subplots(2, 1, sharex=True,
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ap_fig, (acf_ax, pacf_ax) = plt.subplots(2, 1, sharex=True,
- en: tight_layout=True)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: tight_layout=True)
- en: sm.graphics.tsa.plot_acf(sample_ts, ax=acf_ax,
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_acf(sample_ts, ax=acf_ax,
- en: title="Observed autocorrelation")
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: title="Observed autocorrelation")
- en: sm.graphics.tsa.plot_pacf(sample_ts, ax=pacf_ax,
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_pacf(sample_ts, ax=pacf_ax,
- en: title="Observed partial autocorrelation")
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: title="Observed partial autocorrelation")
- en: pacf_ax.set_xlabel("Lags")
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: pacf_ax.set_xlabel("Lags")
- en: pacf_ax.set_ylabel("Value")
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: pacf_ax.set_ylabel("Value")
- en: acf_ax.set_ylabel("Value")
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: acf_ax.set_ylabel("Value")
- en: '[PRE36]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: ​arma_model = sm.tsa.ARMA(sample_ts, order=(1, 1))
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: arma_model = sm.tsa.ARMA(sample_ts, order=(1, 1))
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: arma_results = arma_model.fit()
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: arma_results = arma_model.fit()
- en: print(arma_results.summary())
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: print(arma_results.summary())
- en: '[PRE38]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: ARMA Model Results
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: ARMA Model Results
- en: ===================================================================
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: 'Dep. Variable: y           No. Observations: 366'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 'Dep. Variable: y           No. Observations: 366'
- en: 'Model: ARMA(1, 1)          Log Likelihood -513.038'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'Model: ARMA(1, 1)          Log Likelihood -513.038'
- en: 'Method: css-mle            S.D. of innovations 0.982'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：css-mle            创新的标准偏差0.982
- en: 'Date: Fri, 01 May 2020     AIC 1034.077'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2020年5月1日     AIC 1034.077
- en: 'Time: 12:40:00             BIC 1049.687'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 时间：12:40:00             BIC 1049.687
- en: 'Sample: 01-01-2020         HQIC 1040.280'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'Sample: 01-01-2020         HQIC 1040.280'
- en: '- 12-31-2020'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '- 12-31-2020'
- en: ===================================================================
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: coef   std err     z     P>|z|    [0.025    0.975]
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: coef   std err     z     P>|z|    [0.025    0.975]
- en: '-------------------------------------------------------------------'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '-------------------------------------------------------------------'
- en: const   -0.0242   0.143   -0.169    0.866   -0.305    0.256
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: const   -0.0242   0.143   -0.169    0.866   -0.305    0.256
- en: ar.L1.y  0.8292   0.057    14.562   0.000    0.718    0.941
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ar.L1.y  0.8292   0.057    14.562   0.000    0.718    0.941
- en: ma.L1.y -0.5189   0.090    -5.792   0.000   -0.695    -0.343
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: ma.L1.y -0.5189   0.090    -5.792   0.000   -0.695    -0.343
- en: Roots
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Roots
- en: ===================================================================
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: Real       Imaginary       Modulus      Frequency
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 实部       虚部       模数      频率
- en: '-------------------------------------------------------------------'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '-------------------------------------------------------------------'
- en: AR.1    1.2059     +0.0000j        1.2059        0.0000
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: AR.1    1.2059     +0.0000j        1.2059        0.0000
- en: MA.1    1.9271     +0.0000j        1.9271        0.0000
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: MA.1    1.9271     +0.0000j        1.9271        0.0000
- en: '-------------------------------------------------------------------'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '-------------------------------------------------------------------'
- en: '[PRE39]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: residuals = arma_results.resid
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: residuals = arma_results.resid
- en: rap_fig, (racf_ax, rpacf_ax) = plt.subplots(2, 1,
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: rap_fig, (racf_ax, rpacf_ax) = plt.subplots(2, 1,
- en: sharex=True, tight_layout=True)
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: sharex=True, tight_layout=True)
- en: sm.graphics.tsa.plot_acf(residuals, ax=racf_ax,
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_acf(residuals, ax=racf_ax,
- en: title="Residual autocorrelation")
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: title="Residual autocorrelation")
- en: sm.graphics.tsa.plot_pacf(residuals, ax=rpacf_ax,
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_pacf(residuals, ax=rpacf_ax,
- en: title="Residual partial autocorrelation")
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 标题="残差部分自相关")
- en: rpacf_ax.set_xlabel("Lags")
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: rpacf_ax.set_xlabel("滞后")
- en: rpacf_ax.set_ylabel("Value")
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: rpacf_ax.set_ylabel("值")
- en: racf_ax.set_ylabel("Value")
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: racf_ax.set_ylabel("值")
- en: '[PRE40]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: fitted = arma_results.fittedvalues
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: fitted = arma_results.fittedvalues
- en: fitted.plot(c="r", ax=ts_ax, label="Fitted")
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: fitted.plot(c="r", ax=ts_ax, 标签="拟合")
- en: ts_ax.legend()
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.legend()
- en: '[PRE41]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: from tsdata import generate_sample_data
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 从tsdata导入生成样本数据
- en: '[PRE42]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: sample_ts, test_ts = generate_sample_data(trend=0.2, undiff=True)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: sample_ts，test_ts = generate_sample_data(trend=0.2, undiff=True)
- en: '[PRE43]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: ts_fig, ts_ax = plt.subplots(tight_layout=True)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ts_fig, ts_ax = plt.subplots(tight_layout=True)
- en: sample_ts.plot(ax=ts_ax, c="b", label="Observed")
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: sample_ts.plot(ax=ts_ax, c="b", 标签="观察到的")
- en: ts_ax.set_title("Training time series data")
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.set_title("训练时间序列数据")
- en: ts_ax.set_xlabel("Date")
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.set_xlabel("日期")
- en: ts_ax.set_ylabel("Value")
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.set_ylabel("值")
- en: '[PRE44]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: diffs = sample_ts.diff().dropna()
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 差分=sample_ts.diff().dropna()
- en: '[PRE45]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: ap_fig, (acf_ax, pacf_ax) = plt.subplots(1, 2,
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: ap_fig, (acf_ax, pacf_ax) = plt.subplots(1, 2,
- en: tight_layout=True, sharex=True)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: tight_layout=True, sharex=True)
- en: sm.graphics.tsa.plot_acf(diffs, ax=acf_ax)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_acf(diffs, ax=acf_ax)
- en: sm.graphics.tsa.plot_pacf(diffs, ax=pacf_ax)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_pacf(diffs, ax=pacf_ax)
- en: acf_ax.set_ylabel("Value")
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: acf_ax.set_ylabel("值")
- en: pacf_ax.set_xlabel("Lag")
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: pacf_ax.set_xlabel("滞后")
- en: pacf_ax.set_ylabel("Value")
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: pacf_ax.set_ylabel("值")
- en: '[PRE46]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: model = sm.tsa.ARIMA(sample_ts, order=(1,1,1))
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: model = sm.tsa.ARIMA(sample_ts, order=(1,1,1))
- en: fitted = model.fit(trend="c")
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: fitted = model.fit(trend="c")
- en: print(fitted.summary())
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: print(fitted.summary())
- en: '[PRE47]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: ARIMA Model Results
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: ARIMA模型结果
- en: ==================================================================
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: ==================================================================
- en: 'Dep. Variable: D.y             No. Observations: 365'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 因变量：D.y             观察次数：365
- en: 'Model: ARIMA(1, 1, 1)          Log Likelihood -512.905'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 模型：ARIMA(1, 1, 1)          对数似然-512.905
- en: 'Method: css-mle                S.D. of innovations 0.986'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：css-mle                创新的标准差 0.986
- en: 'Date: Sat, 02 May 2020         AIC 1033.810'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：星期六，2020年5月2日         AIC 1033.810
- en: 'Time: 14:47:25                 BIC 1049.409'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 时间：14:47:25                 BIC 1049.409
- en: 'Sample: 01-02-2020             HQIC 1040.009'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 样本：2020年01月02日             HQIC 1040.009
- en: '- 12-31-2020'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '- 12-31-2020'
- en: ==================================================================
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: ==================================================================
- en: coef     std err     z      P>|z|     [0.025    0.975]
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: coef     std err     z      P>|z|     [0.025    0.975]
- en: '------------------------------------------------------------------'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '------------------------------------------------------------------'
- en: const     0.9548    0.148     6.464    0.000     0.665    1.244
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: const     0.9548    0.148     6.464    0.000     0.665    1.244
- en: ar.L1.D.y 0.8342    0.056     14.992   0.000     0.725    0.943
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: ar.L1.D.y 0.8342    0.056     14.992   0.000     0.725    0.943
- en: ma.L1.D.y -0.5204   0.088    -5.903    0.000    -0.693   -0.348
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: ma.L1.D.y -0.5204   0.088    -5.903    0.000    -0.693   -0.348
- en: Roots
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 根
- en: ==================================================================
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: ==================================================================
- en: Real      Imaginary       Modulus        Frequency
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 实际      虚数       模数        频率
- en: '------------------------------------------------------------------'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '------------------------------------------------------------------'
- en: AR.1      1.1987      +0.0000j       1.1987          0.0000
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: AR.1      1.1987      +0.0000j       1.1987          0.0000
- en: MA.1      1.9216      +0.0000j       1.9216          0.0000
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: MA.1      1.9216      +0.0000j       1.9216          0.0000
- en: '------------------------------------------------------------------'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '------------------------------------------------------------------'
- en: '[PRE48]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: forecast, std_err, fc_ci = fitted.forecast(steps=50)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: forecast, std_err, fc_ci = fitted.forecast(steps=50)
- en: forecast_dates = pd.date_range("2021-01-01", periods=50)
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: forecast_dates = pd.date_range("2021-01-01", periods=50)
- en: forecast = pd.Series(forecast, index=forecast_dates)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: forecast = pd.Series(forecast, index=forecast_dates)
- en: '[PRE49]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: forecast.plot(ax=ts_ax, c="g", label="Forecast")
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: forecast.plot(ax=ts_ax, c="g", 标签="预测")
- en: ts_ax.fill_between(forecast_dates, fc_ci[:, 0], fc_ci[:, 1],
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.fill_between(forecast_dates, fc_ci[:, 0], fc_ci[:, 1],
- en: color="r", alpha=0.4)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色="r", alpha=0.4)
- en: '[PRE50]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: test_ts.plot(ax=ts_ax, c="k", label="Actual")
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: test_ts.plot(ax=ts_ax, c="k", 标签="实际")
- en: ts_ax.legend()
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.legend()
- en: '[PRE51]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: from tsdata import generate_sample_data
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 从tsdata导入生成样本数据
- en: '[PRE52]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: sample_ts, test_ts = generate_sample_data(undiff=True,
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: sample_ts，test_ts = generate_sample_data(undiff=True，
- en: seasonal=True)
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 季节性=True)
- en: '[PRE53]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: ts_fig, ts_ax = plt.subplots(tight_layout=True)
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: ts_fig, ts_ax = plt.subplots(tight_layout=True)
- en: sample_ts.plot(ax=ts_ax, title="Time series", label="Observed")
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: sample_ts.plot(ax=ts_ax, 标题="时间序列", 标签="观察到的")
- en: ts_ax.set_xlabel("Date")
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.set_xlabel("日期")
- en: ts_ax.set_ylabel("Value")
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.set_ylabel("值")
- en: '[PRE54]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: ap_fig, (acf_ax, pacf_ax) = plt.subplots(2, 1,
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ap_fig，(acf_ax，pacf_ax) = plt.subplots(2, 1，
- en: sharex=True, tight_layout=True)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: sharex=True, tight_layout=True)
- en: sm.graphics.tsa.plot_acf(sample_ts, ax=acf_ax)
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_acf(sample_ts, ax=acf_ax)
- en: sm.graphics.tsa.plot_pacf(sample_ts, ax=pacf_ax)
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_pacf(sample_ts, ax=pacf_ax)
- en: pacf_ax.set_xlabel("Lag")
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: pacf_ax.set_xlabel("滞后")
- en: acf_ax.set_ylabel("Value")
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: acf_ax.set_ylabel("值")
- en: pacf_ax.set_ylabel("Value")
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: pacf_ax.set_ylabel("值")
- en: '[PRE55]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: diffs = sample_ts.diff().dropna()
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 差分=sample_ts.diff().dropna()
- en: dap_fig, (dacf_ax, dpacf_ax) = plt.subplots(2, 1, sharex=True,
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: dap_fig, (dacf_ax, dpacf_ax) = plt.subplots(2, 1, sharex=True,
- en: tight_layout=True)
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: tight_layout=True)
- en: sm.graphics.tsa.plot_acf(diffs, ax=dacf_ax,
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_acf(diffs, ax=dacf_ax,
- en: title="Differenced ACF")
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 标题="差分ACF")
- en: sm.graphics.tsa.plot_pacf(diffs, ax=dpacf_ax,
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: sm.graphics.tsa.plot_pacf(diffs, ax=dpacf_ax,
- en: title="Differenced PACF")
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 标题="差分PACF")
- en: dpacf_ax.set_xlabel("Lag")
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: dpacf_ax.set_xlabel("滞后")
- en: dacf_ax.set_ylabel("Value")
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: dacf_ax.set_ylabel("值")
- en: dpacf_ax.set_ylabel("Value")
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: dpacf_ax.set_ylabel("值")
- en: '[PRE56]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: model = sm.tsa.SARIMAX(sample_ts, order=(1, 1, 1),
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: model = sm.tsa.SARIMAX(sample_ts, order=(1, 1, 1),
- en: seasonal_order=(1, 0, 0, 7))
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 季节性顺序=(1, 0, 0, 7))
- en: fitted_seasonal = model.fit()
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: fitted_seasonal = model.fit()
- en: print(fitted_seasonal.summary())
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: print(fitted_seasonal.summary())
- en: fitted_seasonal.fittedvalues.plot(ax=ts_ax, c="r",
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: fitted_seasonal.fittedvalues.plot(ax=ts_ax, c="r",
- en: label="Predicted")
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 标签="预测")
- en: '[PRE57]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: SARIMAX Results
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: SARIMAX结果
- en: ===================================================================
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: 'Dep. Variable: y                      No. Observations: 366'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 因变量：y                      观察次数：366
- en: 'Model: SARIMAX(1, 1, 1)x(1, 0, [], 7) Log Likelihood -509.941'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 模型：SARIMAX(1, 1, 1)x(1, 0, [], 7) 对数似然-509.941
- en: 'Date: Mon, 04 May 2020                AIC 1027.881'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：星期一，2020年5月4日                AIC 1027.881
- en: 'Time: 18:03:27                        BIC 1043.481'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 时间：18:03:27                        BIC 1043.481
- en: 'Sample: 01-01-2020                    HQIC 1034.081'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 样本：2020年01月01日                    HQIC 1034.081
- en: '- 12-31-2020'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '- 12-31-2020'
- en: 'Covariance Type:                      opg'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 协方差类型：                      opg
- en: ===================================================================
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: coef     std err     z       P>|z|      [0.025     0.975]
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: coef     std err     z       P>|z|      [0.025     0.975]
- en: '-------------------------------------------------------------------'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '-------------------------------------------------------------------'
- en: ar.L1   0.7939    0.065     12.136    0.000      0.666     0.922
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: ar.L1   0.7939    0.065     12.136    0.000      0.666     0.922
- en: ma.L1   -0.4544   0.095    -4.793     0.000     -0.640    -0.269
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: ma.L1   -0.4544   0.095    -4.793     0.000     -0.640    -0.269
- en: ar.S.L7  0.7764   0.034     22.951    0.000      0.710     0.843
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: ar.S.L7  0.7764   0.034     22.951    0.000      0.710     0.843
- en: sigma2   0.9388   0.073     12.783    0.000      0.795     1.083
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: sigma2   0.9388   0.073     12.783    0.000      0.795     1.083
- en: ===================================================================
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: 'Ljung-Box (Q): 31.89                Jarque-Bera (JB): 0.47'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 'Ljung-Box (Q): 31.89                Jarque-Bera (JB): 0.47'
- en: 'Prob(Q): 0.82                       Prob(JB): 0.79'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 'Prob(Q): 0.82                       Prob(JB): 0.79'
- en: 'Heteroskedasticity (H): 1.15        Skew: -0.03'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '异方差性（H）: 1.15        偏度: -0.03'
- en: 'Prob(H) (two-sided): 0.43           Kurtosis: 2.84'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 'Prob(H) (双侧): 0.43           峰度: 2.84'
- en: ===================================================================
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: ===================================================================
- en: 'Warnings:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '警告:'
- en: '[1] Covariance matrix calculated using the outer product'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 使用外积计算的协方差矩阵'
- en: of gradients (complex-step).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 梯度的数量（复杂步骤）。
- en: '[PRE58]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: forecast_result = fitted_seasonal.get_forecast(steps=50)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: forecast_result = fitted_seasonal.get_forecast(steps=50)
- en: forecast_index = pd.date_range("2021-01-01", periods=50)
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: forecast_index = pd.date_range("2021-01-01", periods=50)
- en: forecast = forecast_result.predicted_mean
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 预测 = 预测结果.预测均值
- en: '[PRE59]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: forecast.plot(ax=ts_ax, c="g", label="Forecasts")
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: forecast.plot(ax=ts_ax, c="g", label="预测")
- en: conf = forecast_result.conf_int()
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: conf = forecast_result.conf_int()
- en: ts_ax.fill_between(forecast_index, conf["lower y"],
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.fill_between(forecast_index, conf["lower y"],
- en: conf["upper y"], color="r", alpha=0.4)
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: conf["upper y"], color="r", alpha=0.4)
- en: test_ts.plot(ax=ts_ax, color="k", label="Actual future")
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: test_ts.plot(ax=ts_ax, color="k", label="实际未来")
- en: ts_ax.legend()
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: ts_ax.legend()
- en: '[PRE60]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: from fbprophet import Prophet
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: from fbprophet import Prophet
- en: '[PRE61]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: from tsdata import generate_sample_data
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: from tsdata import generate_sample_data
- en: '[PRE62]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: sample_ts, test_ts = generate_sample_data(undiff=True, trend=0.2)
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: sample_ts, test_ts = generate_sample_data(undiff=True, trend=0.2)
- en: '[PRE63]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: df_for_prophet = pd.DataFrame({
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: df_for_prophet = pd.DataFrame({
- en: '"ds": sample_ts.index,   # dates'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '"ds": sample_ts.index,   # dates'
- en: '"y": sample_ts.values    # values'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '"y": sample_ts.values    # values'
- en: '})'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE64]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: model = Prophet()
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: model = Prophet()
- en: model.fit(df_for_prophet)
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: model.fit(df_for_prophet)
- en: '[PRE65]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: forecast_df = model.make_future_dataframe(periods=50)
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: forecast_df = model.make_future_dataframe(periods=50)
- en: '[PRE66]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: forecast = model.predict(forecast_df)
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: forecast = model.predict(forecast_df)
- en: '[PRE67]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: fig, ax = plt.subplots(tight_layout=True)
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: fig, ax = plt.subplots(tight_layout=True)
- en: sample_ts.plot(ax=ax, label="Observed", title="Forecasts")
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: sample_ts.plot(ax=ax, label="观察到的", title="预测")
- en: forecast.plot(x="ds", y="yhat", ax=ax, c="r",
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: forecast.plot(x="ds", y="yhat", ax=ax, c="r",
- en: label="Predicted")
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: label="预测")
- en: ax.fill_between(forecast["ds"].values, forecast["yhat_lower"].values,
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: ax.fill_between(forecast["ds"].values, forecast["yhat_lower"].values,
- en: forecast["yhat_upper"].values, color="r", alpha=0.4)
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: forecast["yhat_upper"].values, color="r", alpha=0.4)
- en: test_ts.plot(ax=ax, c="k", label="Future")
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: test_ts.plot(ax=ax, c="k", label="未来")
- en: ax.legend()
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: ax.legend()
- en: ax.set_xlabel("Date")
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xlabel("日期")
- en: ax.set_ylabel("Value")
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_ylabel("值")
- en: '[PRE68]**'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE68]**'
