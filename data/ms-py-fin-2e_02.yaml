- en: Overview of Financial Analysis with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行金融分析概述
- en: Since the publication of my previous book *Mastering Python for Finance*, there
    have been significant upgrades to Python itself and many third-party libraries.
    Many tools and features have been deprecated in favor of new ones. This chapter
    walks you through how to get the latest tools available and how to prepare the
    environment that will be used throughout the rest of the book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我之前的书《精通Python金融》出版以来，Python本身和许多第三方库都有了重大升级。许多工具和功能已被弃用，取而代之的是新的工具和功能。本章将指导您如何获取最新的可用工具，并准备本书其余部分将使用的环境。
- en: We will be using Quandl for the majority of datasets covered in this book. Quandl
    is a platform that serves financial, economic, and alternative data. These sources
    of data are contributed by various data publishers, including the United Nations,
    World Bank, central banks, trading exchanges, investment research firms, and even
    members of the Quandl community. With the Python Quandl module, you can easily
    download datasets and perform financial analytics to derive useful insights.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中涵盖的大部分数据集将使用Quandl。Quandl是一个提供金融、经济和替代数据的平台。这些数据来源于各种数据发布者，包括联合国、世界银行、中央银行、交易所、投资研究公司，甚至Quandl社区的成员。通过Python
    Quandl模块，您可以轻松下载数据集并进行金融分析，以得出有用的见解。
- en: We will explore time series data manipulation using the `pandas` module. The
    two primary data structures in `pandas` are the Series object and the DataFrame
    object. Together, they can be used to plot charts and visualize complex information.
    Common methods of financial time series computation and analysis will be covered
    in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`pandas`模块探索时间序列数据操作。`pandas`中的两个主要数据结构是Series对象和DataFrame对象。它们可以一起用于绘制图表和可视化复杂信息。本章将涵盖金融时间序列计算和分析的常见方法。
- en: The intention of this chapter is to serve as a foundation for setting up your
    working environment with libraries that will be used throughout this book. Over
    the years, like any software packages, the `pandas` module has evolved drastically
    with many breaking changes. Codes written years ago interfacing with older version
    of `pandas` will no longer work as many methods have been deprecated. The version
    of `pandas` used in this book is 0.23\. Code written in this book conforms to
    this version of `pandas`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是为您设置工作环境，使用本书中将使用的库。多年来，像任何软件包一样，`pandas`模块已经发生了巨大的演变，许多重大变化。多年前编写的代码与旧版本的`pandas`接口将不再起作用，因为许多方法已被弃用。本书中使用的`pandas`版本是0.23。本书中编写的代码符合这个版本的`pandas`。
- en: 'In this chapter, we will cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Setting up Python, Jupyter, Quandl, and other libraries for your environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的环境设置Python、Jupyter、Quandl和其他库
- en: Downloading datasets from Quandl and plotting your first chart
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Quandl下载数据集并绘制您的第一个图表
- en: Plotting last prices, volumes, and candlestick charts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制最后价格、成交量和蜡烛图
- en: Calculating and plotting daily percentage and cumulative returns
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算和绘制每日百分比和累积收益
- en: Plotting volatility, histograms, and Q-Q plots
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制波动率、直方图和Q-Q图
- en: Visualizing correlations and generating the correlation matrix
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化相关性并生成相关矩阵
- en: Visualizing simple moving averages and exponential moving averages
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化简单移动平均线和指数移动平均线
- en: Getting Python
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取Python
- en: At the time of writing, the latest Python version is 3.7.0\. You may download
    the latest version for Windows, macOS X, Linux/UNIX, and other operating systems
    from the official Python website at [https://www.python.org/downloads/](https://www.python.org/downloads/).
    Follow the installation instructions to install the base Python interpreter on
    your operating system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，最新的Python版本是3.7.0。您可以从官方Python网站[https://www.python.org/downloads/](https://www.python.org/downloads/)下载Windows、macOS
    X、Linux/UNIX和其他操作系统的最新版本。按照安装说明在您的操作系统上安装基本的Python解释器。
- en: 'The installation process should add Python to your environment path. To check
    the version of your installed Python, type the following command into the terminal
    if you are using macOS X/Linux, or the command prompt on Windows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程应该将Python添加到您的环境路径中。要检查已安装的Python版本，请在macOS X/Linux上的终端中输入以下命令，或者在Windows上的命令提示符中输入以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For easy installation of Python libraries, consider using an all-in-one Python
    distribution such as Anaconda ([https://www.anaconda.com/download/](https://www.anaconda.com/download/)),
    Miniconda ([https://conda.io/miniconda.html](https://conda.io/miniconda.html)),
    or Enthought Canopy ([https://www.enthought.com/product/enthought-python-distribution/](https://www.enthought.com/product/enthought-python-distribution/)).
    Advanced users, however, may prefer to control which libraries get installed with
    their base Python interpreter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便安装Python库，考虑使用Anaconda（[https://www.anaconda.com/download/](https://www.anaconda.com/download/)）、Miniconda（[https://conda.io/miniconda.html](https://conda.io/miniconda.html)）或Enthought
    Canopy（[https://www.enthought.com/product/enthought-python-distribution/](https://www.enthought.com/product/enthought-python-distribution/)）等一体化Python发行版。然而，高级用户可能更喜欢控制哪些库与他们的基本Python解释器一起安装。
- en: Preparing a virtual environment
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备虚拟环境
- en: At this point, it is advisable to set up a Python virtual environment. Virtual
    environments allow you to manage separate package installations that you need
    for a particular project, isolating the packages installed in other environments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，建议设置Python虚拟环境。虚拟环境允许您管理特定项目所需的单独包安装，隔离其他环境中安装的包。
- en: 'To install the virtual environment package in your terminal window, type the
    following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在终端窗口中安装虚拟环境包，请输入以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On some systems, Python 3 may use a different `pip` executable and may need
    to be installed via an alternate `pip` command; for example: `$ pip3 install virtualenv`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些系统上，Python 3可能使用不同的`pip`可执行文件，并且可能需要通过替代的`pip`命令进行安装；例如：`$ pip3 install virtualenv`。
- en: 'To create a virtual environment, go to your project''s directory and run `virtualenv`.
    For example, if the name of your project folder is `my_project_folder`, type the
    following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建虚拟环境，请转到项目目录并运行`virtualenv`。例如，如果您的项目文件夹的名称是`my_project_folder`，请输入以下内容：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`virtualenv my_venv` will create a folder in the current working directory
    that includes Python executable files of your base Python interpreter installed
    earlier, and a copy of the `pip` library, which you can use to install other packages.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualenv my_venv`将在当前工作目录中创建一个文件夹，其中包含您之前安装的基本Python解释器的Python可执行文件，以及`pip`库的副本，您可以使用它来安装其他软件包。'
- en: 'Before using the new virtual environment, it needs to be activated. In a macOS
    X or Linux terminal, type the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用新的虚拟环境之前，需要激活它。在macOS X或Linux终端中，输入以下命令：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On Windows, the activation command is as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，激活命令如下：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The name of the current virtual environment will now appear on the left of the
    prompt (for example, `(my_venv) current_folder$`) to let you know that the selected
    Python environment is activated. Package installations from the same terminal
    window will be placed in the `my_venv` folder, isolated from the global Python
    interpreter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当前虚拟环境的名称现在将显示在提示的左侧（例如，`(my_venv) current_folder$`），以让您知道所选的Python环境已激活。从同一终端窗口进行的软件包安装将放在`my_venv`文件夹中，与全局Python解释器隔离开来。
- en: Virtual environments can help prevent conflicts should you have multiple applications
    using the same module but from different versions. This step (creating a virtual
    environment) is entirely optional as you can still use your default base interpreter
    to install packages.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境可以帮助防止冲突，如果您有多个应用程序使用相同模块但来自不同版本。这一步（创建虚拟环境）完全是可选的，因为您仍然可以使用默认的基本解释器来安装软件包。
- en: Running Jupyter Notebook
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Jupyter Notebook
- en: Jupyter Notebook is a browser-based interactive computational environment for
    creating, executing, and visualizing interactive data across various programming
    languages. It was formerly known as **IPython** Notebook. IPython continues to
    exist as a Python shell and a kernel for Jupyter. Jupyter is an open-source software,
    free for all to use and learn about a variety of topics, from basic programming
    to advanced statistics or quantum mechanics.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook是一个基于浏览器的交互式计算环境，用于创建、执行和可视化各种编程语言的交互式数据。它以前被称为**IPython** Notebook。IPython仍然存在作为Python
    shell和Jupyter的内核。Jupyter是一个开源软件，所有人都可以免费使用和学习各种主题，从基本编程到高级统计学或量子力学。
- en: 'To install Jupyter, type the following command in your terminal window:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Jupyter，在终端窗口中输入以下命令：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once installed, start Jupyter with the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，使用以下命令启动Jupyter：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Watch your terminal window. When Jupyter has started, the console will provide
    information about this running status. You should also see a URL. Copy that URL
    into a web browser to bring you to the Jupyter computing interface.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 观察您的终端窗口。当Jupyter启动时，控制台将提供有关其运行状态的信息。您还应该看到一个URL。将该URL复制到Web浏览器中，即可进入Jupyter计算界面。
- en: Since Jupyter starts in the directory where you have issued the preceding command,
    Jupyter will list all saved notebooks in the working directory. If this is the
    first time you are working in the directory, the list will be empty.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Jupyter在您发出前面的命令的目录中启动，Jupyter将列出工作目录中所有保存的笔记本。如果这是您在该目录中工作的第一次，列表将为空。
- en: To start your first notebook, select New, then Python 3. A new Jupyter Notebook
    will open in a new window. Henceforth, most computations in this book will be
    performed in Jupyter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动您的第一个笔记本，请选择New，然后选择Python 3。一个新的Jupyter Notebook将在新窗口中打开。今后，本书中的大多数计算将在Jupyter中进行。
- en: The Python Enhancement Proposal
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python Enhancement Proposal
- en: Any design considerations in the Python programming language are documented
    as a **Python Enhancement Proposal** (**PEP**). Hundreds of PEPs have been written
    down, but probably the one that you should be familiar with is **PEP** **8**,
    a style guide for Python developers to write better, readable code. The official
    repository for PEPs is [https://github.com/python/peps](https://github.com/python/peps).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程语言中的任何设计考虑都被记录为**Python Enhancement Proposal**（**PEP**）。已经编写了数百个PEP，但您可能应该熟悉的是**PEP**
    **8**，这是Python开发人员编写更好、更可读代码的风格指南。PEP的官方存储库是[https://github.com/python/peps](https://github.com/python/peps)。
- en: What is a PEP?
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是PEP？
- en: PEPs are a numbered collection of design documents describing a feature, process,
    or environment related to Python. Each PEP is carefully maintained in a text file,
    containing technical specifications of a particular feature and its rationale
    for its existence. For example, PEP 0 serves as the index of all PEPs, while PEP
    1 provides the purpose and guidelines of PEPs. As software developers, we often
    read code more than we write code. To create clear, concise, and readable code,
    we should always use a style guide as a coding convention. PEP 8 is a set of style
    guidelines for writing presentable Python code. You can read more about PEP 8
    at [https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: PEP是一系列编号的设计文档，描述与Python相关的特性、过程或环境。每个PEP都在一个文本文件中进行精心维护，包含特定特性的技术规范及其存在的原因。例如，PEP
    0用作所有PEP的索引，而PEP 1提供了PEP的目的和指南。作为软件开发人员，我们经常阅读代码而不是编写代码。为了创建清晰、简洁和可读的代码，我们应该始终使用编码约定作为风格指南。PEP
    8是一组编写Python代码的风格指南。您可以在[https://www.python.org/dev/peps/pep-0008/](https://www.python.org/dev/peps/pep-0008/)上了解更多关于PEP
    8的信息。
- en: The Zen of Python
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python之禅
- en: 'PEP 20 embodies the Zen of Python, which is a collection of 20 software principles
    that guide the design of the Python programming language. To display this Easter
    egg, type the following command in your Python shell:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 20体现了Python之禅，这是一组指导Python编程语言设计的20个软件原则。要显示这个彩蛋，在Python shell中输入以下命令：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Only 19 of the 20 aphorisms are shown. Can you figure out what is the last one?
    I leave it to your imagination!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 只显示了20条格言中的19条。你能猜出最后一条是什么吗？我留给你的想象！
- en: Introduction to Quandl
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Quandl简介
- en: Quandl is a platform that serves financial, economic, and alternative data.
    These sources of data are contributed by various data publishers, including the
    United Nations, World Bank, central banks, trading exchanges, and investment research
    firms.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Quandl是一个提供金融、经济和替代数据的平台。这些数据来源于各种数据发布者，包括联合国、世界银行、中央银行、交易所和投资研究公司。
- en: With the Python Quandl module, you can easily get financial datasets into Python.
    Quandl offers free datasets, some of which are samples. Paid access is required
    for access to premium data products.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python Quandl模块，您可以轻松地将金融数据集导入Python。Quandl提供免费数据集，其中一些是样本。访问高级数据产品需要付费。
- en: Setting up Quandl for your environment
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的环境设置Quandl
- en: The `Quandl` package requires the latest versions of NumPy and `pandas`. Additionally,
    we will require `matplotlib` for the rest of this chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Quandl`包需要最新版本的NumPy和`pandas`。此外，我们将在本章的其余部分需要`matplotlib`。'
- en: 'To install these packages, type the following code in your terminal window:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这些包，请在终端窗口中输入以下代码：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Over the years, there have been many changes to the `pandas` library. Code
    written for older versions of `pandas` may not work with the latest versions as
    there have been many deprecations. The version of `pandas` that we will be working
    with is 0.23\. To check which version of `pandas` you are using, type the following
    command in a Python shell:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，`pandas`库发生了许多变化。为旧版本的`pandas`编写的代码可能无法与最新版本一起使用，因为有许多已弃用的内容。我们将使用的`pandas`版本是0.23。要检查您正在使用的`pandas`版本，请在Python
    shell中键入以下命令：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: An **API** (short for **Application Programming Interface**) key is required
    when using Quandl to request for datasets.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Quandl请求数据时需要一个API（应用程序编程接口）密钥。
- en: 'If you do not have a Quandl account, go through the following steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Quandl账户，请按以下步骤操作：
- en: 'Open your browser and enter [https://www.quandl.com](https://www.quandl.com/)
    in the address bar. This will display the following page:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，在地址栏中输入[https://www.quandl.com](https://www.quandl.com/)。这将显示以下页面：
- en: '![](Images/e4087af0-b7b4-4743-8e5c-2b490d33d22d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e4087af0-b7b4-4743-8e5c-2b490d33d22d.png)'
- en: Select SIGN UP and follow the instructions to create a free account. Your API
    key will be shown after you have successfully registered.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择注册并按照说明创建一个免费账户。成功注册后，您将会看到您的API密钥。
- en: Copy this key and keep it safe elsewhere as you will need this it later. Otherwise,
    you may retrieve this key again in your ACCOUNT SETTINGS.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制此密钥并将其安全地保存在其他地方，因为您以后会需要它。否则，您可以在您的账户设置中再次检索此密钥。
- en: Remember to check your email inbox for a welcome message and verify your Quandl
    account, as continued use of the API key requires a verified and valid Quandl
    account.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住检查您的电子邮件收件箱，查看欢迎消息并验证您的Quandl账户，因为继续使用API密钥需要验证和有效的Quandl账户。
- en: Anonymous users have a limit of 20 calls per 10 minutes and 50 calls per day.
    Authenticated free users have a limit of 300 calls per 10 seconds, 2,000 calls
    per 10 minutes, and a limit of 50,000 calls per day.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名用户每10分钟最多可以调用20次，每天最多可以调用50次。经过身份验证的免费用户每10秒最多可以调用300次，每10分钟最多可以调用2,000次，每天最多可以调用50,000次。
- en: Plotting a time series chart
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制时间序列图表
- en: A simple and effective technique for analyzing time series data is by visualizing
    it on a graph, from which we can infer certain assumptions. This section will
    guide you through the process of downloading a dataset of stock prices from Quandl
    and plotting it on a price and volume graph. We will also cover plotting candlestick
    charts, which will give us more information than line charts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表上可视化时间序列数据是一种简单而有效的分析技术，通过它我们可以推断出某些假设。本节将指导您完成从Quandl下载股价数据集并在价格和成交量图上绘制的过程。我们还将介绍绘制蜡烛图表，这将为我们提供比线图更多的信息。
- en: Retrieving datasets from Quandl
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Quandl检索数据
- en: 'Fetching data from Quandl into Python is fairly straightforward. Suppose we
    are interested in ABN Amro Group from the Euronext Stock Exchange. The ticker
    symbol in Quandl is `EURONEXT/ABN`. In a Jupyter notebook cell, run the following
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从Quandl中获取数据到Python是相当简单的。假设我们对来自Euronext股票交易所的ABN Amro Group感兴趣。在Quandl中的股票代码是`EURONEXT/ABN`。在Jupyter笔记本单元格中，运行以下命令：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is a good practice to store your Quandl API key in a constant variable. This
    way, should your API key change, you only need to update it in one place!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将Quandl API密钥存储在常量变量中是一个好习惯。这样，如果您的API密钥发生变化，您只需要在一个地方更新它！
- en: After importing the `quandl` package, we store our Quandl API key in the constant
    variable, `QUANDL_API_KEY`, which will be reused in the rest of this chapter.
    This constant value is used to set the Quandl module API key, and only needs to
    be executed once for every import of the `quandl` package. The `quandl.get()`
    method on the next line is called to download the ABN dataset from Quandl right
    into our `df` variable. Note that `EURONEXT` is an abbreviation for the data provider,
    Euronext Stock Exchange.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`quandl`包后，我们将Quandl API密钥存储在常量变量`QUANDL_API_KEY`中，这将在本章的其余部分中重复使用。这个常量值用于设置Quandl模块的API密钥，每次导入`quandl`包时只需要执行一次。接下来的一行调用`quandl.get()`方法，将ABN数据集从Quandl直接下载到我们的`df`变量中。请注意，`EURONEXT`是数据提供者Euronext股票交易所的缩写。
- en: 'By default, Quandl will retrieve the dataset into a `pandas` DataFrame. We
    can inspect the head and tail of the DataFrame as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Quandl将数据集检索到`pandas` DataFrame中。我们可以按以下方式检查DataFrame的头和尾：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By default, the `head()` and `tail()` commands will display the first and last
    five rows of the DataFrame, respectively. You can define the number of rows to
    display by passing a number in its argument. For example, `head(100)` will show
    the first 100 rows in the DataFrame.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`head()`和`tail()`命令将分别显示DataFrame的前五行和后五行。您可以通过在参数中传递一个数字来定义要显示的行数。例如，`head(100)`将显示DataFrame的前100行。
- en: Without any additional parameters set for the `get()` method, the entire time
    series dataset is retrieved, dating from the previous business day all the way
    back to November 2015 on a daily basis.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`get()`方法没有设置任何额外参数，将检索整个时间序列数据集，从上一个工作日一直回溯到2015年11月，每天一次。
- en: 'To visualize this DataFrame, we can plot a graph using the `plot()` command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要可视化这个DataFrame，我们可以使用`plot()`命令绘制图表：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The last command outputs a simple plot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令输出一个简单的图表：
- en: '![](Images/a025d703-0105-474e-92fa-a9c6bb2d010f.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a025d703-0105-474e-92fa-a9c6bb2d010f.png)'
- en: The `plot()` method of `pandas` returns an Axes object. A string representation
    of this object is printed on the console along with the `plot()` command. To suppress
    this information, we can add a semicolon (;) at the end of the last statement.
    Alternatively, we can add a `pass` statement at the bottom of the cell. Alternatively,
    assigning the plotting function to a variable also suppresses the output.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`的`plot()`方法返回一个Axes对象。这个对象的字符串表示形式与`plot()`命令一起打印在控制台上。要抑制这些信息，可以在最后一个语句的末尾添加一个分号(;)。或者，可以在单元格的底部添加一个`pass`语句。另外，将绘图函数分配给一个变量也会抑制输出。'
- en: By default, the `plot()` command in `pandas` uses the `matplotlib` library to
    display graphs. If you are having errors, check to ensure this library is installed
    and `%matplotlib inline` is called once.You can customize the look and feel of
    your charts. Further information on the `plot` command in the `pandas` DataFrame
    is available in the `pandas` documentation at [https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`pandas`中的`plot()`命令使用`matplotlib`库来显示图表。如果出现错误，请检查是否安装了该库，并且至少调用了`%matplotlib
    inline`。您可以自定义图表的外观和感觉。有关`pandas` DataFrame中`plot`命令的更多信息，请参阅`pandas`文档[https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.plot.html)。
- en: Plotting a price and volume chart
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制价格和成交量图表
- en: 'When no parameters are supplied to the `plot()` command, a line graph is plotted
    using all columns of the target DataFrame, on the same graph. This produces a
    cluttered view which does not give us much information. To effectively extract
    insights from this data, we can plot a financial graph of a stock with daily closing
    price relative to its trading volume. To facilitate this, type the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有参数提供给`plot()`命令时，将使用目标DataFrame的所有列绘制一条线图，放在同一张图上。这会产生一个混乱的视图，无法提供太多信息。为了有效地从这些数据中提取见解，我们可以绘制一个股票的财务图表，显示每日收盘价与交易量的关系。为了实现这一点，输入以下命令：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding command stores our data of interest into the `closing_prices`
    and `volumes` variables, respectively. We can peek at the top and bottom rows
    of the resulting `pandas` Series data type with the `head()` and `tail()` commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将我们感兴趣的数据分别存储到`closing_prices`和`volumes`变量中。我们可以使用`head()`和`tail()`命令查看生成的`pandas`
    Series数据类型的前几行和最后几行：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To find out the type of a particular variable, use the `type()` command. For
    example, `type(volumes)` produces `pandas.core.series.Series`, which tells us
    that the `volumes` variable is actually a `pandas` Series data type object.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出特定变量的类型，使用`type()`命令。例如，`type(volumes)`会产生`pandas.core.series.Series`，告诉我们`volumes`变量实际上是一个`pandas`
    Series数据类型对象。
- en: 'Observe that data is available from 2018 all the way back to 2015\. We can
    now plot the price and volume chart:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，数据可从2018年一直回溯到2015年。现在我们可以绘制价格和成交量图表：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This produces the following graph:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下图表：
- en: '![](Images/67b15eb4-129d-4324-b7c0-c8dd4389178c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/67b15eb4-129d-4324-b7c0-c8dd4389178c.png)'
- en: On the first line, the `subplot2grid` command with the first parameter, `(4,4)`,
    divides the entire graph into a 4 x 4 grid. The second parameter `(0,0)` specifies
    that the given plot will be anchored on the top-left corner of the graph. The
    keyword parameter, `rowspan=3`, indicates the plot will occupy 3 of the 4 available
    rows on the grid, effectively as tall as 75% of the graph. The keyword parameter,
    `colspan=4`, indicates that the plot will occupy all 4 columns of the grid, using
    up all of its available width. The command returns a `matplotlib` axis object,
    which we will use to plot the upper portion of the graph.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，`subplot2grid`命令的第一个参数`(4,4)`将整个图表分成4x4的网格。第二个参数`(0,0)`指定给定的图表将锚定在图表的左上角。关键字参数`rowspan=3`表示图表将占据网格中可用的4行中的3行，实际上占据了图表的75%高度。关键字参数`colspan=4`表示图表将占据网格的所有4列，使用了所有可用的宽度。该命令返回一个`matplotlib`轴对象，我们将使用它来绘制图表的上部分。
- en: On the second line, the `plot()` command renders the upper chart, with date
    and time values on the *x* axis, and prices on the *y* axis. In the next two lines,
    we specify the title of the current plot, along with a legend for the time series
    data placed in the upper-left corner.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，`plot()`命令呈现了上部图表，*x*轴上是日期和时间值，*y*轴上是价格。在接下来的两行中，我们指定了当前图表的标题，以及放在左上角的时间序列数据的图例。
- en: Next, we perform the same actions to render the daily trading volume on the
    bottom chart, specifying a 1-row-by-4-column grid space anchored on the bottom-left
    corner of the graph.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们执行相同的操作，在底部图表上呈现每日交易量，指定一个1行4列的网格空间，锚定在图表的左下角。
- en: In the `legend()` command, the `loc` keyword accepts an integer value as the
    location code of the legend. A value of `2` translates to an upper-left location.
    For a table of location codes, see the Legend documentation of `matplotlib` at
    [https://matplotlib.org/api/legend_api.html?highlight=legend#module-matplotlib.legend](https://matplotlib.org/api/legend_api.html?highlight=legend#module-matplotlib.legend).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`legend()`命令中，`loc`关键字接受一个整数值作为图例的位置代码。值为`2`表示左上角位置。有关位置代码的表格，请参阅`matplotlib`的图例文档[https://matplotlib.org/api/legend_api.html?highlight=legend#module-matplotlib.legend](https://matplotlib.org/api/legend_api.html?highlight=legend#module-matplotlib.legend)。
- en: To make our figure appear bigger, we invoke the `set_size_inches()` command
    to set the figure to 9 inches wide by 6 inches high, resulting in a rectangular-shaped
    figure. The preceding `gcf()` command simply means **get current figure**. Finally,
    the `subplots_adjust()` command with a `hspace` parameter is called to add a small
    amount of height between the top and bottom subplots.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的图形看起来更大，我们调用`set_size_inches()`命令将图形设置为宽9英寸、高6英寸，从而产生一个长方形的图形。前面的`gcf()`命令简单地表示**获取当前图形**。最后，我们调用带有`hspace`参数的`subplots_adjust()`命令，以在顶部和底部子图之间添加一小段高度。
- en: The command `subplots_adjust()` tunes the subplot layout. Acceptable parameters
    are `left`, `right`, `bottom`, `top`, `wspace`, and `hspace`. For further information
    on these, see the `matplotlib` documentation at [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`subplots_adjust()`命令调整了子图布局。可接受的参数有`left`、`right`、`bottom`、`top`、`wspace`和`hspace`。有关这些参数的更多信息，请参阅[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html](https://matplotlib.org/api/_as-gen/matplotlib.pyplot.subplots_adjust.html)中的`matplotlib`文档。'
- en: Plotting a candlestick chart
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制蜡烛图
- en: 'A candlestick chart is another type of popular financial chart that shows more
    information than just a single price. A candlestick represents a tick at each
    particular point of time with four important pieces of information: the open,
    the high, the low, and the close.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 蜡烛图是另一种流行的金融图表类型，它显示了比单一价格更多的信息。蜡烛图代表了特定时间点的每个标记，其中包含四个重要的信息：开盘价、最高价、最低价和收盘价。
- en: 'The `matplotlib.finance` module has been deprecated. Instead, we can use another
    package, `mpl_finance`, that consists of extracted code. To install this package,
    in your terminal window, type the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.finance`模块已被弃用。相反，我们可以使用另一个包`mpl_finance`，其中包含了提取的代码。要安装此包，在您的终端窗口中，输入以下命令：'
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To visualize the candles more closely, we will use a subset of the ABN dataset.
    In the following example, we query from Quandl the daily prices for the month
    of July 2018 as our dataset, and plot a candlestick chart, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更仔细地可视化蜡烛图，我们将使用ABN数据集的子集。在下面的示例中，我们从Quandl查询2018年7月的每日价格作为我们的数据集，并绘制一个蜡烛图，如下所示：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This produces a candlestick chart as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个蜡烛图，如下截图所示：
- en: '![](Images/f48cb8e8-576c-48c3-a58e-9bd5c6602f94.png)You can specify the `start_date`
    and `end_date` parameters in the `quandl.get()` command to retrieve the dataset
    for the selected date range.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/f48cb8e8-576c-48c3-a58e-9bd5c6602f94.png)您可以在`quandl.get()`命令中指定`start_date`和`end_date`参数，以检索所选日期范围的数据集。'
- en: Prices retrieved from Quandl are placed in a variable named `df_dataset`. As
    the plot function of `matplotlib` requires its own formatting, the `mdates.date2num`
    command converts the index values containing the date and time, and places them
    in a new column named `Date`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从Quandl检索的价格被放置在一个名为`df_dataset`的变量中。由于`matplotlib`的`plot`函数需要自己的格式，`mdates.date2num`命令将包含日期和时间的索引值转换，并将它们放在一个名为`Date`的新列中。
- en: The candlestick's date, open, high, low, and close data columns are explicitly
    extracted as a DataFrame in the `df_ohlc` variable. `plt.subplots()` creates a
    plot figure with 8 inches wide and 4 inches high. Labels along the *x* axis are
    formatted into a human-readable format.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 蜡烛图的日期、开盘价、最高价、最低价和收盘价数据列被明确提取为`df_ohlc`变量中的DataFrame。`plt.subplots()`创建了一个宽8英寸、高4英寸的图形。*x*轴上的标签被格式化为人类可读的格式。
- en: Our data is now ready for plotting in as a candlestick chart by calling the
    `candlestick_ohlc()` command, with a candlestick width of 0.8 (or 80% of a full
    day's width). Up ticks whose close price is higher than the open price are represented
    in green, while down ticks, whose close price are lower than the open price, are
    represented in red. Finally, we add the `plt.show()` command to display the candlestick
    chart.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据现在已准备好通过调用`candlestick_ohlc()`命令作为蜡烛图来绘制，蜡烛图的宽度为0.8（或全天宽度的80%）。收盘价高于开盘价的上涨标记以绿色表示，而收盘价低于开盘价的下跌标记以红色表示。最后，我们添加了`plt.show()`命令来显示蜡烛图。
- en: Performing financial analytics on time series data
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在时间序列数据上执行金融分析
- en: In this section, we will visualize some statistical properties of time series
    data used in financial analytics.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将可视化金融分析中使用的时间序列数据的一些统计属性。
- en: Plotting returns
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制收益
- en: One of the classic measures of security performance is its returns over a prior
    period. A simple method for calculating returns in `pandas` is `pct_change`, where
    the percentage change from the previous row is computed for every row in the DataFrame.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性表现的经典指标之一是其在先前时期的收益。在`pandas`中计算收益的一种简单方法是`pct_change`，它计算了每行在DataFrame中的前一行的百分比变化。
- en: 'In the following example, we use ABN stock data to plot a simple graph of daily
    percentage returns:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们使用ABN股票数据绘制了每日百分比收益的简单图表：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A line plot of daily percentage returns is shown as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 每日百分比收益的折线图如下所示：
- en: '![](Images/0e0af72c-fe1b-4e3b-8e0d-d3bd4766e23f.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0e0af72c-fe1b-4e3b-8e0d-d3bd4766e23f.png)'
- en: In the `quandl.get()` method, we postfix the ticker symbol with `.4` to specify
    the retrieval of only the fourth column of the dataset, which contains the last
    prices. In the call to `pct_change`, the `period` argument specifies the number
    of periods to shift to form the percentage change, which by default is `1`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`quandl.get()`方法中，我们使用后缀符号`.4`来指定仅检索数据集的第四列，其中包含最后的价格。在调用`pct_change`时，`period`参数指定了要移动以形成百分比变化的周期数，默认为`1`。
- en: Instead of using the postfix notation in the ticker symbol to specify the column
    of the dataset to download, we can pass the `column_index` parameter together
    with the index of the column. For example, `quandl.get('EURONEXT/ABN.4')` is the
    same as calling `quandl.get('EURONEXT/ABN', column_index=4)`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`column_index`参数和列的索引来代替使用后缀符号来指定要下载的数据集的列。例如，`quandl.get('EURONEXT/ABN.4')`与调用`quandl.get('EURONEXT/ABN',
    column_index=4)`是相同的。
- en: Plotting cumulative returns
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制累积收益
- en: To find out how our portfolio has performed, we can sum its returns over a period
    of time. The `cumsum` method of `pandas` returns the cumulative sum over a DataFrame.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们的投资组合的表现，我们可以在一段时间内对其收益进行求和。`pandas`的`cumsum`方法返回DataFrame的累积和。
- en: 'In the following example, we plot the cumulative sum of `daily_changes` of
    the ABN calculated previously:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们绘制了之前计算的ABN的`daily_changes`的累积和：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This gives us the following output graph:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下输出图表：
- en: '![](Images/47ef0d23-ab56-47d7-874c-66ab7a373a2e.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/47ef0d23-ab56-47d7-874c-66ab7a373a2e.png)
- en: Plotting a histogram
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制直方图
- en: 'Histograms tell us how distributed data is. In this example, we are interested
    in how distributed the daily returns of ABN are. We use the `hist()` method on
    a DataFrame with a bin size of 50:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图告诉我们数据的分布情况。在这个例子中，我们对ABN的每日收益的分布情况感兴趣。我们在一个具有50个箱子大小的DataFrame上使用`hist()`方法：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The histogram output is shown as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图输出如下：
- en: '![](Images/3bdacdc8-fd9c-4e2c-a5cb-9e454d0b61d4.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/3bdacdc8-fd9c-4e2c-a5cb-9e454d0b61d4.png)
- en: When there are multiple data columns in a `pandas` DataFrame, the `hist()` method
    will automatically plot each histogram on its own separate plot.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当`pandas` DataFrame中有多个数据列时，`hist()`方法将自动在单独的图表上绘制每个直方图。
- en: 'We can use the `describe()` method to summarize the central tendency, dispersion,
    and shape of a dataset''s distribution:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`describe()`方法来总结数据集分布的中心趋势、离散度和形状：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: From the histogram, the returns tend to be distributed about the mean of 0.0,
    or `0.000499` to be exact. Besides this miniscule skew to the right, the data
    appears fairly symmetrical and normally distributed. The standard deviation is
    `0.016701`. The percentiles tell us that 25% of the points fall below `-0.007992`,
    50% below `0.000584`, and 75% below `0.008777`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从直方图中可以看出，收益倾向于围绕着0.0的均值分布，或者确切地说是`0.000499`。除了这个微小的右偏移，数据看起来相当对称和正态分布。标准偏差为`0.016701`。百分位数告诉我们，25%的点在`-0.007992`以下，50%在`0.000584`以下，75%在`0.008777`以下。
- en: Plotting volatility
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制波动率
- en: One way of analyzing the distribution of returns is measuring its standard deviation.
    **Standard deviation** is a measure of dispersion around the mean. A high standard
    deviation value for past returns indicates a high historical volatility of stock
    price movement.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 分析收益分布的一种方法是测量其标准偏差。**标准偏差**是均值周围离散度的度量。过去收益的高标准偏差值表示股价波动的历史波动性较高。
- en: 'The `rolling()` method of `pandas` helps us to visualize specific time series
    operations over a period of time. To calculate standard deviations of the percentage
    change of returns in our computed ABN dataset, we use the `std()` method, which
    returns a DataFrame or Series object that can be used to plot a chart. The following
    example illustrates this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`的`rolling()`方法帮助我们在一段时间内可视化特定的时间序列操作。为了计算我们计算的ABN数据集的收益百分比的标准偏差，我们使用`std()`方法，它返回一个DataFrame或Series对象，可以用来绘制图表。下面的例子说明了这一点：'
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This gives us the following volatility plot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下波动率图：
- en: '![](Images/37a74a44-4e2f-4d7a-9817-4d5a4d3d2ea9.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/37a74a44-4e2f-4d7a-9817-4d5a4d3d2ea9.png)
- en: Our original time series datasets exclude weekends and public holidays, which
    must be taken into account when using the `rolling()` method. The `df.asfreq()`
    command will re-index time series data on a daily frequency, creating new indexes
    in place of missing ones. The `method` parameter with a value of `ffill` specifies
    that we will propagate the last valid observation forward in place of missing
    values during re-indexing.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们原始的时间序列数据集不包括周末和公共假期，在使用`rolling()`方法时必须考虑这一点。`df.asfreq()`命令将时间序列数据重新索引为每日频率，在缺失的索引位置创建新的索引。`method`参数的值为`ffill`，指定我们在重新索引时将最后一个有效观察结果向前传播，以替代缺失值。
- en: In the `rolling()` command, we specified the `window` parameter with a value
    of 30, which is the number of observations used for calculating the statistic.
    In other words, the standard deviation of each period is calculated with a sample
    size of 30\. Since the first 30 rows do not have a sample size that is enough
    to calculate the standard deviation, we can exclude these rows by specifying `min_periods`
    as `30`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`rolling()`命令中，我们指定了`window`参数的值为30，这是用于计算统计量的观察次数。换句话说，每个期间的标准偏差是用样本量30来计算的。由于前30行没有足够的样本量来计算标准偏差，我们可以通过将`min_periods`指定为`30`来排除这些行。
- en: The chosen value of 30 approximates the monthly standard deviation of returns.
    Note that choosing wider window periods represents less of the data being measured.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 选择的值30接近月度收益的标准偏差。请注意，选择更宽的窗口期代表着被测量的数据量较少。
- en: A quantile-quantile plot
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个分位数-分位数图
- en: A Q-Q (quantile-quantile) plot is a probability distribution plot, where the
    quantiles of two distributions are plotted against each other. If the distributions
    are linearly related, the points in the Q-Q plot will lie along a line. Compared
    to histograms, Q-Q plots help us to visualize points that lie outside the line
    for positive and negative skews, as well as excess kurtosis.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Q-Q（分位数-分位数）图是一个概率分布图，其中两个分布的分位数相互绘制。如果分布是线性相关的，Q-Q图中的点将位于一条直线上。与直方图相比，Q-Q图帮助我们可视化偏离正态分布线的点，以及过度峰度的正负偏差。
- en: 'The `probplot()` of `scipy.stats` helps us to calculate and show quantiles
    for a probability plot. A best-fit line for the data is also drawn. In the following
    example, we use the last prices of the ABN stock dataset and compute the daily
    percentage change for charting a Q-Q plot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.stats`的`probplot()`帮助我们计算并显示概率图的分位数。数据的最佳拟合线也被绘制出来。在下面的例子中，我们使用ABN股票数据集的最后价格，并计算每日百分比变化以绘制Q-Q图：'
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This gives us the following Q-Q plot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下的Q-Q图：
- en: '![](Images/0ae505e9-adb9-487b-b0e0-09e8bcf4bcb9.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: ！[](Images/0ae505e9-adb9-487b-b0e0-09e8bcf4bcb9.png)
- en: When all points fall exactly along the red line, the distribution of data implies
    perfect correspondences to a normal distribution. Most of our data is close to
    being perfectly correlated between quantiles -2 and +2\. Outside this range, there
    begin to be differences in correlation of the distribution, with more negative
    skews at the tails.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有点恰好落在红线上时，数据的分布意味着与正态分布完全对应。我们的大部分数据在分位数-2和+2之间几乎完全相关。在这个范围之外，分布的相关性开始有所不同，在尾部有更多的负偏斜。
- en: Downloading multiple time series data
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载多个时间序列数据
- en: We pass a single Quandl code as a string object in the first parameter of the
    `quandl.get()` command to download a single dataset. To download multiple datasets,
    we can pass a list of Quandl codes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将单个Quandl代码作为字符串对象传递给`quandl.get()`命令的第一个参数，以下载单个数据集。要下载多个数据集，我们可以传递一个Quandl代码的列表。
- en: 'In the following example, we are interested in the prices of three banking
    stocks—ABN Amro, Banco Santander, and Kas Bank. The two-year prices from 2016
    to 2017 are stored in the `df` variable, with only the last prices downloaded:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们对三家银行股票的价格感兴趣——ABN Amro、Banco Santander和Kas Bank。2016年至2017年的两年价格存储在`df`变量中，只下载了最后价格：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following plot is generated:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 生成了以下图表：
- en: '![](Images/41e2f434-a818-417a-861b-f46f1d155e11.png)By default, `quandl.get()`
    returns daily prices. We may also specify other types of frequency for the dataset
    to download. In this example, we specified `collapse=''monthly''` to download
    monthly prices.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/41e2f434-a818-417a-861b-f46f1d155e11.png)默认情况下，`quandl.get()`返回每日价格。我们还可以指定数据集下载的其他类型频率。在这个例子中，我们指定`collapse=''monthly''`来下载月度价格。'
- en: Displaying the correlation matrix
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示相关矩阵
- en: Correlation is a statistical association of how closely two variables have a
    linear relationship with each other. We can perform a correlation calculation
    on the returns of two time series datasets to give us a value between -1 and 1\.
    A correlation value of 0 indicates that the returns of the two time series have
    no relation to each other. A high correlation value close to 1 indicates that
    the returns of the two time series data tend to move together. A low value close
    to -1 indicates that returns tend to move inversely in relation to each other.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 相关性是两个变量之间线性关系有多密切的统计关联。我们可以对两个时间序列数据集的收益进行相关性计算，得到一个介于-1和1之间的值。相关值为0表示两个时间序列的收益之间没有关系。接近1的高相关值表示两个时间序列数据的收益倾向于一起变动。接近-1的低值表示收益倾向于相互反向变动。
- en: 'In `pandas`, the `corr()` method computes the correlations between columns
    in its supplied DataFrame and outputs these values as a matrix. In the previous
    example, we have three datasets available in the DataFrame `df`. To output the
    correlation matrix of returns, run the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pandas`中，`corr()`方法计算其提供的DataFrame中列之间的相关性，并将这些值输出为矩阵。在前面的例子中，我们在DataFrame
    `df`中有三个可用的数据集。要输出收益的相关矩阵，运行以下命令：
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: From the correlation matrix output, we can infer that the ABN Amro and Banco
    Santander stocks are highly correlated during the two years from 2016 to 2017
    with a value of `0.809824`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从相关矩阵输出中，我们可以推断出ABN Amro和Banco Santander股票在2016年至2017年的两年时间内高度相关，相关值为`0.809824`。
- en: By default, the `corr()` command uses the Pearson correlation coefficient to
    compute pairwise correlations. This is equivalent to calling `corr(method='pearson')`.
    Other valid values are `kendall` and `spearman` for the Kendall Tau and Spearman
    rank correlation coefficients, respectively.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`corr()`命令使用Pearson相关系数来计算成对相关性。这相当于调用`corr(method='pearson')`。其他有效值是`kendall`和`spearman`，分别用于Kendall
    Tau和Spearman秩相关系数。
- en: Plotting correlations
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制相关性
- en: 'Visualizing correlations can also be achieved with the `rolling()` command.
    We will use the Last prices of ABN and SANTA on a daily basis from 2016 to 2017,
    from Quandl. The two datasets are downloaded to the DataFrame `df`, and its rolling
    correlations plotted as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`rolling()`命令来可视化相关性。我们将使用2016年至2017年从Quandl获取的ABN和SANTA的每日最后价格。这两个数据集被下载到DataFrame
    `df`中，并且其滚动相关性如下所示：
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The correlation plot is shown in the following screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相关性图的截图：
- en: '![](Images/390df52b-d042-4d53-b858-c1c71944a35e.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/390df52b-d042-4d53-b858-c1c71944a35e.png)'
- en: The `df_filled` variable contains a DataFrame with its index re-indexed on a
    daily frequency basis and missing values forward-filled in preparation for the
    `rolling()` command. The DataFrame, `daily_changes`, stores the daily percentage
    returns, and its columns are extracted into a separate Series object as `abn_returns`
    and `santa_returns`, respectively. The `window` variable stores the average number
    of days per year in the two-year dataset. This variable is supplied into the parameters
    of the `rolling()` command. The parameter `window` indicates we will perform a
    one-year rolling correlation. The `min_periods` parameter indicates that correlation
    will be calculated when only the full sample size is present for calculation.
    In this case, there are no correlation values for the first year in the `df_corrs`
    dataset. Finally, the `plot()` command displays the chart of one-year rolling
    correlations of daily returns throughout the year of 2017.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`df_filled`变量包含一个DataFrame，其索引以每日频率重新索引，并且准备好进行`rolling()`命令的缺失值前向填充。DataFrame
    `daily_changes`存储每日百分比收益，并且其列被提取为一个单独的Series对象，分别为`abn_returns`和`santa_returns`。`window`变量存储了两年数据集中每年的平均天数。这个变量被提供给`rolling()`命令的参数。参数`window`表示我们将执行一年的滚动相关性。参数`min_periods`表示当只有完整样本大小用于计算时才会计算相关性。在这种情况下，在`df_corrs`数据集中的第一年没有相关性值。最后，`plot()`命令显示了2017年全年每日收益的一年滚动相关性图表。'
- en: Simple moving averages
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单移动平均线
- en: A common technical indicator for time series data analysis is moving averages.
    The `mean()` method can be used to compute the mean of values for a given window
    in the `rolling()` command. For example, a 5-day **Simple Moving Average** (**SMA**)
    is the average of prices for the last five trading days, computed daily over a
    time period. Similarly, we can also compute a longer term 30-day simple moving
    average. These two moving averages can be used together to generate crossover
    signals.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 用于时间序列数据分析的常见技术指标是移动平均线。`mean()`方法可用于计算`rolling()`命令中给定窗口的值的平均值。例如，5天的**简单移动平均线**（**SMA**）是最近五个交易日的价格的平均值，每天在一段时间内计算一次。同样，我们也可以计算一个更长期的30天简单移动平均线。这两个移动平均线可以一起使用以生成交叉信号。
- en: 'In the following example, we download the daily closing prices of ABN, compute
    the short- and long-term SMAs, and visualize them on a single plot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们下载ABN的每日收盘价，计算短期和长期SMA，并在单个图表上可视化它们：
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This produces the following plots:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下的图表：
- en: '![](Images/7034821d-3aa3-48df-87f2-36e23efa9600.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7034821d-3aa3-48df-87f2-36e23efa9600.png)'
- en: We use a 5-day average for the short-term SMA and 30 days for a long-term SMA.
    The `min_periods` parameter is supplied to exclude the first rows that do not
    have sufficient sample size for computing the SMA. The `df_sma` variable is a
    newly-created `pandas` DataFrame for storing SMA computations. We then plot a
    12-inch-by-8-inch graph. From the graph, we can see a number of points where the
    short-term SMA intercepts the long-term SMA. Chartists use crossovers to identify
    trends and generate signals. The window periods of 5 and 10 are purely suggested
    values; you might tweak these values to find a suitable interpretation of your
    own.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用5天的平均值作为短期SMA，30天作为长期SMA。`min_periods`参数用于排除前几行，这些行没有足够的样本大小来计算SMA。`df_sma`变量是一个新创建的`pandas`
    DataFrame，用于存储SMA计算。然后我们绘制一个12英寸乘8英寸的图表。从图表中，我们可以看到许多点，短期SMA与长期SMA相交。图表分析师使用交叉点来识别趋势并生成信号。5和10的窗口期纯粹是建议值；您可以调整这些值以找到适合自己的解释。
- en: Exponential moving averages
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指数移动平均线
- en: Another approach in the calculation of moving averages is the **Exponential
    Moving Average** (**EMA**). Recall that the simple moving average assigns equal
    weight to prices within a window period. However, in EMA, the most recent prices
    are assigned a higher weight than older prices. This weight is assigned on an
    exponential basis.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算移动平均线时的另一种方法是**指数移动平均线**（**EMA**）。请记住，简单移动平均线在窗口期内为价格分配相等的权重。然而，在EMA中，最近的价格被分配比旧价格更高的权重。这种权重是以指数方式分配的。
- en: 'The `ewm()` method of the `pandas` DataFrame provides exponential weighted
    functions. The `span` parameter specifies the window period for the decay behavior.
    The same ABN dataset with EMA is plotted as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` DataFrame的`ewm()`方法提供了指数加权函数。`span`参数指定了衰减行为的窗口期。使用相同的ABN数据集绘制EMA如下：'
- en: '[PRE28]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This produces the following plot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了以下的图表：
- en: '![](Images/b27f5972-b405-4e15-a764-71a55e92f173.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b27f5972-b405-4e15-a764-71a55e92f173.png)'
- en: The chart patterns for the SMA and EMA are largely the same. Since EMAs place
    a higher weighting on recent data than on older data, they are more reactive to
    price changes than SMAs are.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: SMA和EMA的图表模式基本相同。由于EMA对最近的数据赋予的权重比旧数据更高，因此它们对价格变动的反应比SMA更快。
- en: Besides varying window periods, you can experiment with combinations of SMA
    and EMA prices to derive more insights!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 除了不同的窗口期，您还可以尝试使用SMA和EMA价格的组合来得出更多见解！
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we set up our working environment with Python 3.7 and used
    the virtual environment package to manage separate package installations. The
    `pip` command is a handy Python package manager that easily downloads and installs
    Python modules, including Jupyter, Quandl, and `pandas`. Jupyter is a browser-based
    interactive computational environment for executing Python code and visualizing
    data. With a Quandl account, we can easily obtain high-quality time series datasets.
    These sources of data are contributed by various data publishers. Datasets directly
    download into a `pandas` DataFrame object that allows us to perform financial
    analytics, such as plotting daily percentage returns, histograms, Q-Q plots, correlations,
    simple moving averages, and exponential moving averages.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Python 3.7建立了我们的工作环境，并使用虚拟环境包来管理单独的包安装。`pip`命令是一个方便的Python包管理器，可以轻松下载和安装Python模块，包括Jupyter、Quandl和`pandas`。Jupyter是一个基于浏览器的交互式计算环境，用于执行Python代码和可视化数据。有了Quandl账户，我们可以轻松获取高质量的时间序列数据集。这些数据来源于各种数据发布者。数据集直接下载到一个`pandas`
    DataFrame对象中，使我们能够执行金融分析，如绘制每日百分比收益、直方图、Q-Q图、相关性、简单移动平均线和指数移动平均线。
