- en: Recommendation Engines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐引擎
- en: '*![](assets/b4fc1c9d-6a64-4b2a-853a-d10b5a53826a.png)*Recommendation engines
    are a way of using information available about user preferences and product details
    to provide informed recommendations. The objective of a recommendation engine
    is to understand the patterns of similarities among a set of items and/or to formulate
    the interactions between the users and items.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*![](assets/b4fc1c9d-6a64-4b2a-853a-d10b5a53826a.png)*推荐引擎是利用用户偏好和产品详情提供明智建议的一种方式。推荐引擎的目标是了解一组项目之间的相似性模式和/或制定用户和项目之间的互动。'
- en: This chapter starts with presenting the basics of recommendation engines. Then,
    it discusses various types of recommendation engines. Next, this chapter discusses
    how recommendation engines are used to suggest items and products to different
    users and the various limitations of recommendation engines. Finally, we will
    learn to use recommendation engines to solve a real-world problem.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先介绍了推荐引擎的基础知识。然后，讨论了各种类型的推荐引擎。接下来，本章讨论了推荐引擎如何用于向不同用户建议项目和产品以及推荐引擎的各种限制。最后，我们将学习如何使用推荐引擎解决现实问题。
- en: 'The following concepts are discussed in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了以下概念：
- en: Introducing recommendation engines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐系统的介绍
- en: Types of recommendation engines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐引擎的类型
- en: Understanding the limitations of recommendation systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解推荐系统的限制
- en: Areas of practical application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际应用领域
- en: A practical example—creating a recommendation engine to recommend movies to
    subscribers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实际的例子——创建一个推荐引擎向订阅者推荐电影
- en: By the end of this chapter, you should be able to understand how to use recommendation
    engines to suggest various items based on some preference criteria.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该能够理解如何使用推荐引擎根据一些偏好标准建议各种项目。
- en: Let's start by looking into the background concepts of recommendation engines.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从推荐引擎的背景概念开始。
- en: Introducing recommendation systems
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐系统的介绍
- en: Recommendation systems represent the methods that researchers originally developed
    to predict items that a user is most likely to be interested in. The ability of
    recommendation systems to give personalized suggestions on items makes them perhaps
    the most important technology in the context of the online purchasing world.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统代表研究人员最初开发的方法，用于预测用户最有可能感兴趣的项目。推荐系统在给出关于项目的个性化建议方面的能力使其可能是在线购买世界中最重要的技术。
- en: When used in e-commerce applications, recommendation engines uses sophisticated
    algorithms to improve the shopping experience for shoppers and allows service
    providers to customize products according to the preferences of the users.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子商务应用中，推荐引擎使用复杂的算法来改善购物体验，允许服务提供商根据用户的偏好定制产品。
- en: In 2009, Netflix offered 1 million dollars to anyone who could provide an algorithm
    that could improve its existing recommendation engine (Cinematch) by more than
    10%. The prize was won by BellKor's Pragmatic Chaos team.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，Netflix向任何能够通过超过10%改进其现有推荐引擎（Cinematch）的算法提供100万美元的奖金。奖金被BellKor的Pragmatic
    Chaos团队赢得。
- en: Types of recommendation engines
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐引擎的类型
- en: 'Generally, there are three different types of recommendation engines:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常有三种不同类型的推荐引擎：
- en: Content-based recommendation engines
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于内容的推荐引擎
- en: Collaborative filtering engines
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协同过滤引擎
- en: Hybrid recommendation engines
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合推荐引擎
- en: Content-based recommendation engines
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于内容的推荐引擎
- en: The basic idea of the content-based recommendation engine is to suggest items
    similar to those in which the user has preceding shown interest. The effectiveness
    of content-based recommendation engines is dependent on our ability to quantify
    the similarity of an item to others.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 基于内容的推荐引擎的基本思想是建议与用户先前表现出兴趣的项目相似的项目。基于内容的推荐引擎的有效性取决于我们量化项目与其他项目的相似性的能力。
- en: Let's look into the following diagram. If **User 1** has read **Doc 1**, then
    we can recommend **Doc 2** to the user, which is similar to **Doc 1:**
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下面的图表。如果**用户1**已阅读**文档1**，那么我们可以向用户推荐与**文档1**相似的**文档2**：
- en: '![](assets/085cbec3-1d5a-4bc1-9b87-52474dfa09c4.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/085cbec3-1d5a-4bc1-9b87-52474dfa09c4.png)'
- en: Now, the problem is how to determine which items are similar to each other.
    Let's look into a couple of methods of finding similarities between different
    items.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是如何确定哪些项目彼此相似。让我们看看找到不同项目之间相似性的几种方法。
- en: Finding similarities between unstructured documents
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找非结构化文档之间的相似性
- en: 'One way of determining the similarities between different documents is by first
    processing the input documents. The resultant data structure after processing
    unstructured documents is called a **Term Document Matrix** (**TDM**), which is
    shown in the following diagram:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 确定不同文档之间相似性的一种方法是首先处理输入文档。处理非结构化文档后得到的数据结构称为**术语文档矩阵**（**TDM**），如下图所示：
- en: '![](assets/e9f0d053-8d92-424c-8fec-1bea05859e38.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e9f0d053-8d92-424c-8fec-1bea05859e38.png)'
- en: A TDM has all of the glossary of words as rows and all of the documents as the
    columns. It can be used to establish which documents are similar to the other
    documents based on the selected distance measure. Google News, for example, suggests
    news to a user based on its similarity to a news item the user has already shown
    interest in.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: TDM具有所有术语的词汇表作为行，所有文档作为列。它可以用于根据所选的距离度量确定哪些文档与其他文档相似。例如，Google新闻根据与用户已经表现出兴趣的新闻相似性向用户推荐新闻。
- en: 'Once we have a TDM, there are two ways of quantifying the similarity between
    the documents:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了TDM，有两种方法可以量化文档之间的相似性：
- en: '**Using frequency counts**: This means that we assume that the importance of
    a word is directly proportional to the frequency of each word. This is the simplest
    way of calculating importance.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用频率计数**：这意味着我们假设一个词的重要性与每个词的频率成正比。这是计算重要性的最简单方法。'
- en: '**Using TFIDF** (short for **T****erm Frequency–Inverse Document Frequency**):
    This is a number that calculates the importance of each word in the context of
    the problem we are trying to solve. It is a multiple of two terms:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用TFIDF**（**词频-逆文档频率**的缩写）：这是一个计算每个词在我们试图解决的问题的上下文中重要性的数字。它是两个术语的乘积：'
- en: '**Term Frequency** (**TF**): This is the number of times a word or a term appears
    in a document. Term frequency directly correlates with the importance of a word.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**词频**（**TF**）：这是一个词或术语在文档中出现的次数。词频直接与一个词的重要性相关联。'
- en: '**Inverse Document Frequency** (**IDF**): First, **Document Frequency** (**DF**)
    is the number of documents containing the term we are searching for. As the opposite
    of DF, IDF gives us the measure of uniqueness a word represents and correlates
    that with its importance.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逆文档频率**（**IDF**）：首先，**文档频率**（**DF**）是包含我们搜索的术语的文档数量。作为DF的相反，IDF给出了一个词所代表的独特性的度量，并将其与其重要性相关联。'
- en: As TF and IDF both quantify the importance of a word in the context of the problem
    we are trying to solve, their combination, TF-IDF, is a good measure of the importance
    of each word and is a more sophisticated alternative to using simple frequency
    counts.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于TF和IDF都量化了我们试图解决的问题的上下文中一个词的重要性，它们的组合TF-IDF是每个词的重要性的一个很好的度量，是使用简单频率计数的更复杂的替代方法。
- en: Using a co-occurrence matrix
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用共现矩阵
- en: This method is based on the assumption that if two items are bought together
    most of the time, then they are likely to be similar or at least belong to the
    same category of items that are usually purchased together.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法基于这样的假设：如果两个物品大多数情况下一起购买，那么它们很可能是相似的，或者至少属于通常一起购买的物品类别。
- en: For example, if people are using shaving gel and a razor together most of the
    time, then if someone buys a razor, it makes sense to suggest that person will
    buy shaving gel as well*.*
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果人们大多数情况下一起使用剃须膏和剃刀，那么如果有人买了剃刀，建议他也买剃须膏是有道理的。
- en: 'Let''s analyze the historical buying patterns of these four users:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析这四个用户的历史购买模式：
- en: '|  | **Razor** | **Apple** | **Shaving cream** | **Bike** | **Hummus** |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|  | **剃刀** | **苹果** | **剃须膏** | **自行车** | **鹰嘴豆泥** |'
- en: '| Mike | 1 | 1 | 1 | 0 | 1 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 迈克 | 1 | 1 | 1 | 0 | 1 |'
- en: '| Taylor | 1 | o | 1 | 1 | 1 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 泰勒 | 1 | 0 | 1 | 1 | 1 |'
- en: '| Elena | 0 | 0 | 0 | 1 | 0 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 埃琳娜 | 0 | 0 | 0 | 1 | 0 |'
- en: '| Amine | 1 | 0 | 1 | 0 | 0 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 阿明 | 1 | 0 | 1 | 0 | 0 |'
- en: 'This will create the following co-occurrence matrix:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建以下共现矩阵：
- en: '|  | **Razor** | **Apple** | **Shaving cream** | **Bike** | **Hummus** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|  | **剃刀** | **苹果** | **剃须膏** | **自行车** | **鹰嘴豆泥** |'
- en: '| Razor | - | 1 | 3 | 1 | 1 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 剃刀 | - | 1 | 3 | 1 | 1 |'
- en: '| Apple | 1 | - | 1 | 0 | 1 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 苹果 | 1 | - | 1 | 0 | 1 |'
- en: '| Shaving cream | 3 | 1 | - | 1 | 2 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 剃须膏 | 3 | 1 | - | 1 | 2 |'
- en: '| Bike | 1 | 0 | 1 | - | 1 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 自行车 | 1 | 0 | 1 | - | 1 |'
- en: '| Hummus | 1 | 1 | 2 | 1 | - |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 鹰嘴豆泥 | 1 | 1 | 2 | 1 | - |'
- en: The preceding co-occurrence matrix summarizes the likelihood of buying two items
    together. Let's see how we can use it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前述共现矩阵总结了一起购买两件物品的可能性。让我们看看如何使用它。
- en: Collaborative filtering recommendation engines
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协同过滤推荐引擎
- en: 'The recommendations from collaborative filtering are based on the analysis
    of the historical buying patterns of users. The basic assumption is that if two
    users show interest in mostly the same items, we can classify both users as similar.
    In other words, we can assume the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤的推荐是基于用户的历史购买模式的分析。基本假设是，如果两个用户对大多数相同的物品表现出兴趣，我们可以将两个用户都归类为相似。换句话说，我们可以假设以下内容：
- en: If the overlap in the buying history of two users exceeds a threshold, we can
    classify them as similar users.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个用户的购买历史重叠超过阈值，我们可以将它们归类为相似用户。
- en: Looking at the history of similar users, the items that do not overlap in the
    buying history become the basis of future recommendations through collaborative
    filtering.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看相似用户的历史，购买历史中不重叠的物品将成为协同过滤推荐的基础。
- en: 'For example, let''s look at a specific example. We have two users,  **Mike**
    and **Elena**, as shown in the following diagram:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看一个具体的例子。我们有两个用户，**迈克**和**埃琳娜**，如下图所示：
- en: '![](assets/e1b17be1-78f8-46da-bcba-8a3912708c84.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e1b17be1-78f8-46da-bcba-8a3912708c84.png)'
- en: 'Note the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下内容：
- en: Both Mike and Elena have shown interest in exactly the same documents, **Doc1**
    and **Doc2**.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迈克和埃琳娜都对**文档1**和**文档2**表现出了完全相同的兴趣。
- en: Based on their similar historical patterns, we can classify both of them as
    similar users.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据他们相似的历史模式，我们可以将他们两个都归类为相似用户。
- en: If Elena now reads **Doc3**, then we can suggest **Doc3** to Mike as well.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果埃琳娜现在阅读**文档3**，那么我们也可以建议迈克阅读**文档3**。
- en: Note that this strategy of suggesting items to the users based on their history
    will not always work.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据用户历史记录向用户推荐物品的策略并不总是有效的。
- en: Let's assume that Elena and Mike showed interest in **Doc1**, which was about
    photography (because they share a love of photography). Also, both of them showed
    interest in **Doc2**, which was about cloud computing, again, because both of
    them have an interest in the subject. Based on collaborative filtering, we classified
    them as similar users. Now Elena starts reading **Doc3**, which is a magazine
    on women's fashion. If we follow the collaborative filtering algorithm, we will
    suggest Mike read it, who may not have much interest in it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设埃琳娜和迈克对**文档1**都表现出了兴趣，这是关于摄影的（因为他们对摄影有共同的爱好）。此外，他们两个都对**文档2**表现出了兴趣，这是关于云计算的，同样是因为他们对这个主题有兴趣。根据协同过滤，我们将他们归类为相似用户。现在埃琳娜开始阅读**文档3**，这是一本关于女性时尚的杂志。如果我们遵循协同过滤算法，我们会建议迈克也阅读，而他可能对此并不感兴趣。
- en: Back in 2012, the American superstore, Target, was experimenting with the use
    of using collaborative filtering for recommending products to buyers. The algorithm
    classified a father similar to his teen-aged daughter based on their profiles.
    Target ended up sending a discount coupon for diapers, baby formula, and crib
    to the father. He was not aware of his daughter's pregnancy.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 回到2012年，美国超市Target正在尝试使用协同过滤为购买者推荐产品。该算法根据他们的档案将一个父亲归类为他的十几岁的女儿。结果，Target最终向父亲发送了一个关于尿布、婴儿奶粉和婴儿床的折扣券。他并不知道他女儿怀孕了。
- en: Note that the collaborative filtering algorithm does not depend on any other
    information and is a standalone algorithm, based on the changing behaviors of
    users and collaborative recommendations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，协同过滤算法不依赖于任何其他信息，是一种独立的算法，基于用户的变化行为和协同推荐。
- en: Hybrid recommendation engines
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合推荐引擎
- en: 'So far, we have discussed content-based and collaborative-filtering-based recommendation
    engines. Both types of recommendation engines can be combined to create a hybrid
    recommendation engine. To do so, we follow these steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了基于内容和基于协同过滤的推荐引擎。这两种类型的推荐引擎可以结合起来创建混合推荐引擎。为此，我们按照以下步骤进行：
- en: Generate a similarity matrix of the items.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成物品的相似矩阵。
- en: Generate preference matrices of the users.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成用户的偏好矩阵。
- en: Generate recommendations.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成推荐。
- en: Let's look into these steps one by one.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解这些步骤。
- en: Generating a similarity matrix of the items
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成物品的相似矩阵
- en: In hybrid recommendation, we start by creating a similarity matrix of items
    using content-based recommendation. This can be done by using the co-occurrence
    matrix or by using any distance measure to quantify the similarities between items.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在混合推荐中，我们首先通过使用基于内容的推荐创建物品的相似矩阵。这可以通过使用共现矩阵或使用任何距离度量来量化物品之间的相似性来实现。
- en: 'Let''s assume that we currently have five items. Using content-based recommendations,
    we generate a matrix that captures the similarities between items and looks like
    this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们目前有五种物品。使用基于内容的推荐，我们生成一个捕捉物品之间相似性的矩阵，看起来像这样：
- en: '![](assets/506040b2-df72-412f-bad9-9061bc10a49c.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/506040b2-df72-412f-bad9-9061bc10a49c.png)'
- en: Let's see how we can combine this similarity matrix with a preference matrix
    to generate recommendations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将这个相似矩阵与偏好矩阵结合起来生成推荐。
- en: Generating reference vectors of the users
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成用户的参考向量。
- en: Based on the history of each of the users of the system, we will produce a preference
    vector that captures those users' interests.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 基于系统中每个用户的历史，我们将产生一个捕捉这些用户兴趣的偏好向量。
- en: Let's assume that we want to generate recommendations for an online store named
    *KentStreetOnline*, which sells 100 unique items. KentStreetOnline is popular
    and has 1 million active subscribers. It is important to note that we need to
    generate only one similarity matrix with dimensions of 100 by 100\. We also need
    to generate a preference vector for each of the users; this means that we need
    to generate 1 million preference vectors for each of the 1 million users.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想为名为*KentStreetOnline*的在线商店生成推荐，该商店销售100种独特的物品。KentStreetOnline很受欢迎，拥有100万活跃订阅者。重要的是要注意，我们只需要生成一个100x100维度的相似矩阵。我们还需要为每个用户生成一个偏好向量；这意味着我们需要为100万用户中的每一个生成100万个偏好向量。
- en: Each entry of the performance vector represents a preference for an item. The
    value of the first row means that the preference weight for **Item 1** is **4**.
    For example, the value of the second row means that there is no preference for
    **Item 2**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 性能向量的每个条目表示对项目的偏好。第一行的值表示**项目1**的偏好权重为**4**。例如，第二行的值表示对**项目2**没有偏好。
- en: 'This is graphically shown in the following figure:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是图形显示：
- en: '![](assets/c159ced5-502a-4f5e-9092-b364e75b7b15.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c159ced5-502a-4f5e-9092-b364e75b7b15.png)'
- en: Now, let's look into how we can generate recommendations based on the similarity
    matrix, S, and the user preference matrix, U.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何基于相似矩阵S和用户偏好矩阵U生成推荐。
- en: Generating recommendations
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成推荐
- en: 'To make recommendations, we can multiply the matrices. Users are more likely
    to be interested in an item that co-occurs frequently with an item that they gave
    a high rating to:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行推荐，我们可以将这些矩阵相乘。用户更有可能对经常与他们给出高评分的物品共现的物品感兴趣：
- en: '*Matrix[S] x Matrix[U] = Matrix[R]*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*Matrix[S] x Matrix[U] = Matrix[R]*'
- en: 'This calculation is shown graphically in the following diagram:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个计算在以下图表中显示：
- en: '![](assets/ce30323d-894b-4b7a-b4c9-65adb8a387bd.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ce30323d-894b-4b7a-b4c9-65adb8a387bd.png)'
- en: A separate resultant matrix is generated for each of the users. The numbers
    in the recommendation matrix, *Matrix[R]*, quantify the predicted interest of
    a user in each of the items. For example, in the resultant matrix the fourth item
    has the highest number, 58\. So this item is highly recommended for this particular
    user.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个用户生成一个单独的结果矩阵。推荐矩阵*Matrix[R]*中的数字量化了用户对每个物品的预测兴趣。例如，在结果矩阵中，第四个物品的数字最高，为58。因此，这个物品对这个特定用户来说是高度推荐的。
- en: Now, let's look into the limitations of different recommender systems.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看不同推荐系统的局限性。
- en: Understanding the limitations of recommender systems
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解推荐系统的局限性
- en: Recommendation engines use predictive algorithms to suggest recommendations
    to a bunch of users. It is a powerful technology, but we should be aware of its
    limitations. Let's look into the various limitations of recommendation systems.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐引擎使用预测算法向一群用户建议推荐。这是一种强大的技术，但我们应该意识到它的局限性。让我们来看看推荐系统的各种局限性。
- en: The cold start problem
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冷启动问题
- en: It is obvious that, for collaborative filtering to work, we need to have historical
    data about user preferences. For a new user, we may not have any data, so our
    user similarity algorithm will be based on assumptions that may not be accurate.
    For content-based recommendations, we may not have the details about the new items
    right away. This requirement of having data about items and users to generate
    high-quality recommendations is called the **cold start problem**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，为了使协同过滤起作用，我们需要有关用户偏好的历史数据。对于新用户，我们可能没有任何数据，因此我们的用户相似性算法将基于可能不准确的假设。对于基于内容的推荐，我们可能不会立即获得有关新物品的详细信息。需要有关物品和用户的数据来生成高质量推荐的要求被称为**冷启动问题**。
- en: Metadata requirements
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元数据要求
- en: Content-based methods require explicit item descriptions to measure similarity.
    Such explicitly-detailed descriptions may not be available, affecting the quality
    of the predictions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 基于内容的方法需要明确的物品描述来衡量相似性。这种明确的详细描述可能不可用，影响预测的质量。
- en: The data sparsity problem
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据稀疏问题
- en: Across an enormous number of items, a user will have rated only a few items,
    resulting in a very sparse user/item rating matrix.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在大量物品中，用户只会对少数物品进行评分，导致非常稀疏的用户/物品评分矩阵。
- en: Amazon has around a billion users and a billion items. Amazon's recommendation
    engine is said to have the sparsest data for any recommendation engine in the
    world.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊有大约十亿用户和十亿物品。据说亚马逊的推荐引擎是世界上数据最稀疏的推荐引擎。
- en: Bias due to social influence
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 由于社交影响而产生的偏见
- en: Social influence can play an important role in recommenders. Social relations
    can be seen as an influencing factor on a user's preferences. Friends tend to
    purchase similar items as well as give similar ratings.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 社交影响在推荐系统中可以起到重要作用。社交关系可以被视为影响用户偏好的因素。朋友倾向于购买类似的物品并给出类似的评分。
- en: Limited data
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有限的数据
- en: A limited number of reviews makes it difficult for recommender systems to accurately
    measure user similarities.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有限数量的评论使得推荐系统难以准确衡量用户之间的相似性。
- en: Areas of practical applications
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际应用领域
- en: 'Let''s have a look where recommendation systems are applied in the practical
    world:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看推荐系统在实际世界中的应用：
- en: Two-thirds of the movies on Netflix are recommended.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix上的电影有三分之二是推荐的。
- en: Thirty-five percent of Amazon's sales come from recommendations.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊的三分之一的销售额来自推荐。
- en: On Google News, recommendations generate 38 percent more click-through.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Google新闻上，推荐引擎产生的点击率增加了38%。
- en: Attempts to predict a user's preference for an item is based on past ratings
    of other items.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试预测用户对物品的偏好是基于其他物品的过去评分。
- en: They can suggest courses to university students based on their needs and preferences.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们可以根据学生的需求和偏好为大学生推荐课程。
- en: They can match resumes to jobs on online job portals.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们可以在在线求职门户网站上将简历与工作匹配。
- en: Now, let's try to use a recommendation engine to solve a real-world problem.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用推荐引擎来解决一个现实世界的问题。
- en: Practical example – creating a recommendation engine
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际示例 - 创建推荐引擎
- en: Let's build a recommendation engine that can recommend movies to a bunch of
    users. We will be using data put together by the GroupLens Research research group
    at the University of Minnesota.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个可以向一群用户推荐电影的推荐引擎。我们将使用明尼苏达大学GroupLens研究小组收集的数据。
- en: 'Follow these steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤：
- en: 'First, we will import the relevant packages:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将导入相关的包：
- en: '[PRE0]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s import the `user_id` and `item_id` datasets:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们导入`user_id`和`item_id`数据集：
- en: '[PRE1]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We merge the two DataFrames by the movie ID:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过电影ID合并了这两个DataFrame：
- en: '[PRE2]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The header of the df DataFrame, after running the preceding code, looks like
    the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上述代码后，df DataFrame的标题如下：
- en: '![](assets/25808f2a-8fef-49e7-8e0e-e7f6ec14b479.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/25808f2a-8fef-49e7-8e0e-e7f6ec14b479.png)'
- en: 'The details of the columns are as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 列的详细信息如下：
- en: '****userid****:The unique ID of each of the users'
  id: totrans-125
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**userid**：每个用户的唯一ID'
- en: '**movieid**: The unique ID of each of the movies'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电影id**：每部电影的唯一ID'
- en: '**rating**: Ratings of each of the movies from 1 to 5'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rating**：每部电影的评分从1到5'
- en: '**timestamp**: The timestamp when the movie was rated'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**timestamp**：电影被评分的时间戳'
- en: '**title**:The title of the movie'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**title**：电影的标题'
- en: '**genres**: The genre of the movie'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**genres**：电影的流派'
- en: 'To look into the summary trends of the input data, let''s compute the mean
    and count of ratings per movie using `groupby` by the `title` and `rating` columns:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了了解输入数据的摘要趋势，让我们使用`groupby`按`title`和`rating`列计算每部电影的平均评分和评分次数：
- en: '![](assets/9561fa50-6ff3-4136-bf48-4c1b7c56b208.png).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9561fa50-6ff3-4136-bf48-4c1b7c56b208.png)。'
- en: 'Let''s now prepare data for the recommendation engine. For that, we will transform
    the dataset into a matrix, which will have the following characteristics:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们为推荐引擎准备数据。为此，我们将把数据集转换为一个具有以下特征的矩阵：
- en: Movie titles will be columns.
  id: totrans-134
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电影标题将成为列。
- en: '`User_id` will be the index.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User_id`将成为索引。'
- en: Ratings will be the value.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评分将是值。
- en: 'We will use the `pivot_table` function of the DataFrame to get it done:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用DataFrame的`pivot_table`函数来完成它：
- en: '[PRE3]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that the preceding code will generate a very sparse matrix.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述代码将生成一个非常稀疏的矩阵。
- en: 'Now, let''s use this recommendation matrix that we have created to recommend
    movies. For that, let''s consider a particular user who has watched the movie,
    *Avatar (2009)*. First, we will find all of the users that have shown interest
    in *Avatar (2009)*:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用我们创建的推荐矩阵来推荐电影。为此，让我们考虑一个特定的用户，他观看了电影*Avatar (2009)*。首先，我们将找到所有对*Avatar
    (2009)*表现出兴趣的用户：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s try to suggest the movies that correlate with *Avatar (2009)*.
    For that, we will calculate the correlation of the `Avatar_user_rating` DataFrame
    with `movie_matrix`, as follows:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试推荐与*Avatar (2009)*相关的电影。为此，我们将计算`Avatar_user_rating` DataFrame与`movie_matrix`的相关性，如下所示：
- en: '[PRE5]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This gives out the following output:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下输出：
- en: '![](assets/f0a29140-c9eb-4a17-96ad-f586ea608d86.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f0a29140-c9eb-4a17-96ad-f586ea608d86.png)'
- en: This means that we can use these movies as recommendations for the user.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以将这些电影作为用户的推荐。
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about recommendation engines. We studied the selection
    of the right recommendation engine based on the problem that we are trying to
    solve. We also looked into how we can prepare data for recommendation engines
    to create a similarity matrix. We also learned how recommendation engines can
    be used to solve practical problems, such as suggesting movies to users based
    on their past patterns.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了推荐引擎。我们研究了根据我们试图解决的问题选择合适的推荐引擎。我们还研究了如何准备数据以创建相似性矩阵，以供推荐引擎使用。我们还学习了推荐引擎如何用于解决实际问题，比如根据用户过去的模式推荐电影。
- en: In the next chapter, we will focus on the algorithms that are used to understand
    and process data.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于用于理解和处理数据的算法。
