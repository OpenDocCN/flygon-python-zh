- en: Converting unittest suites to pytest
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将unittest套件转换为pytest
- en: In the previous chapter, we have seen how the flexible pytest architecture has
    created a rich plugin ecosystem, with hundreds of plugins available. We learned
    how easy it is to find and install plugins, and had an overview of a number of
    interesting plugins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经看到了灵活的pytest架构如何创建了丰富的插件生态系统，拥有数百个可用的插件。我们学习了如何轻松找到和安装插件，并概述了一些有趣的插件。
- en: Now that you are proficient with pytest, you might be in a situation where you
    have one or more `unittest`-based test suites and want to start using pytest with
    them. In this chapter, we will discuss the best approaches to start doing just
    that, ranging from simple test suites that might require little to no modification,
    to large in-house-grown test suites that contain all kinds of customizations grown
    organically over the years. Most of the tips and advice in this chapter come from
    my own experience when migrating our massive `unittest`-style test suite at ESSS
    ([https://wwww.esss.co](https://www.esss.co)), where I work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经熟练掌握pytest，您可能会遇到这样的情况，即您有一个或多个基于`unittest`的测试套件，并且希望开始使用pytest进行测试。在本章中，我们将讨论从简单的测试套件开始做到这一点的最佳方法，这可能需要很少或根本不需要修改，到包含多年来有机地增长的各种自定义的大型内部测试套件。本章中的大多数提示和建议都来自于我在ESSS（[https://wwww.esss.co](https://www.esss.co)）工作时迁移我们庞大的`unittest`风格测试套件的经验。
- en: 'Here is what we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涵盖的内容：
- en: Using pytest as a test runner
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pytest作为测试运行器
- en: Converting asserts with `unittest2pytest`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`unittest2pytest`转换断言
- en: Handling setup and teardown
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理设置和拆卸
- en: Managing test hierarchies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理测试层次结构
- en: Refactoring test utilities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构测试工具
- en: Migration strategy
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移策略
- en: Using pytest as a test runner
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pytest作为测试运行器
- en: One thing that surprisingly many people don't know is that pytest can run `unittest`
    suites out of the box, without any modifications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，许多人不知道的一件事是，pytest可以直接运行`unittest`套件，无需任何修改。
- en: 'For example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can run this using the `unittest` runner:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`unittest`运行器来运行这个：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But the cool thing is that pytest also runs this test without any modifications:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但很酷的是，pytest也可以在不进行任何修改的情况下运行此测试：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This makes it really easy to just start using pytest as a test runner, which
    brings several benefits:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得使用pytest作为测试运行器变得非常容易，带来了几个好处：
- en: You can use plugins—for example, `pytest-xdist`, to speed up the test suite.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用插件，例如`pytest-xdist`，来加速测试套件。
- en: You have several command-line options at your disposal: `-k` for selecting tests,
    `--pdb` to jump into the debugger on errors, `--lf` to run last failed tests only,
    and so on.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用几个命令行选项：`-k`选择测试，`--pdb`在错误时跳转到调试器，`--lf`仅运行上次失败的测试，等等。
- en: You can stop writing `self.assert*` methods and go with plain `assert`s. pytest
    will happily provide rich failure information, even for `unittest`-based subclasses.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以停止编写`self.assert*`方法，改用普通的`assert`。 pytest将愉快地提供丰富的失败信息，即使对于基于`unittest`的子类也是如此。
- en: 'For completeness, here are the `unittest` idioms and features supported out
    of the box:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，以下是直接支持的`unittest`习语和功能：
- en: '`setUp` and `tearDown` for function-level `setup`/`teardown`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setUp`和`tearDown`用于函数级`setup`/`teardown`'
- en: '`setUpClass` and `tearDownClass` for class-level `setup`/`teardown`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setUpClass`和`tearDownClass`用于类级`setup`/`teardown`'
- en: '`setUpModule` and `tearDownModule` for module-level `setup`/`teardown`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setUpModule`和`tearDownModule`用于模块级`setup`/`teardown`'
- en: '`skip`, `skipIf`, `skipUnless`, and `expectedFailure` decorators, for functions
    and classes'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip`，`skipIf`，`skipUnless`和`expectedFailure`装饰器，用于函数和类'
- en: '`TestCase.skipTest` to imperatively skip inside tests'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestCase.skipTest`用于在测试内部进行命令式跳过'
- en: 'The following idioms are currently not supported:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不支持以下习语：
- en: '`load_tests protocol`: This protocol allows users to completely customize which
    tests are loaded from a module ([https://docs.python.org/3/library/unittest.html#load-tests-protocol](https://docs.python.org/3/library/unittest.html#load-tests-protocol)).
    The collection concept used by pytest is not compatible with how `load_tests`
    protocol works, so no work is planned by the pytest core team to support this
    feature (see the `#992` ([https://github.com/pytest-dev/pytest/issues/992](https://github.com/pytest-dev/pytest/issues/992))
    issue if you are interested in the details).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load_tests protocol`：此协议允许用户完全自定义从模块加载哪些测试（[https://docs.python.org/3/library/unittest.html#load-tests-protocol](https://docs.python.org/3/library/unittest.html#load-tests-protocol)）。
    pytest使用的集合概念与`load_tests`协议的工作方式不兼容，因此pytest核心团队没有计划支持此功能（如果您对细节感兴趣，请参见`#992`（[https://github.com/pytest-dev/pytest/issues/992](https://github.com/pytest-dev/pytest/issues/992)）问题）。'
- en: '`subtests`: Tests using this feature can report multiple failures inside the
    same test method ([https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests](https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests)).
    This feature is similar to pytest''s own parametrization support, with the difference
    that the test results can be determined at runtime instead of collection time.
    In theory, this can be supported by pytest, and the feature is currently being
    tracked by issue `#1367` ([https://github.com/pytest-dev/pytest/issues/1367](https://github.com/pytest-dev/pytest/issues/1367)).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subtests`：使用此功能的测试可以在同一测试方法内报告多个失败（[https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests](https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests)）。此功能类似于pytest自己的参数化支持，不同之处在于测试结果可以在运行时而不是在收集时确定。理论上，这可以由pytest支持，该功能目前正在通过问题`#1367`（[https://github.com/pytest-dev/pytest/issues/1367](https://github.com/pytest-dev/pytest/issues/1367)）进行跟踪。'
- en: '**Surprises with** `pytest-xdist`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**`pytest-xdist`的惊喜**'
- en: 'If you decide to use `pytest-xdist` in your test suite, be aware that it runs
    tests in an arbitrary order: each worker will run tests as they finish other tests,
    so the order the in which the tests are executed is not predictable. Because the
    default `unittest` runner runs tests sequentially and always in the same order,
    often this will bring to light concurrency problems to your test suite—for example,
    tests trying to create a temporary directory with the same name. You should see
    this as an opportunity to fix the underlying concurrency problems, as they should
    not be part of the test suite anyway.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定在测试套件中使用`pytest-xdist`，请注意它会以任意顺序运行测试：每个工作进程将在完成其他测试后运行测试，因此测试执行的顺序是不可预测的。因为默认的`unittest`运行程序会按顺序顺序运行测试，并且通常以相同的顺序运行，这将经常暴露出测试套件中的并发问题，例如，试图使用相同名称创建临时目录的测试。您应该将这视为修复潜在并发问题的机会，因为它们本来就不应该是测试套件的一部分。
- en: Pytest features in unittest subclasses
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: unittest子类中的pytest特性
- en: 'Although not designed to support all its features when running `unittest`-based
    tests, a few of the pytest idioms are supported:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管不是设计为在运行基于`unittest`的测试时支持所有其特性，但是支持一些pytest习语：
- en: '**Plain asserts**: pytest assertion introspect works just as well when subclassing
    `unittest.TestCase`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普通断言**：当子类化`unittest.TestCase`时，pytest断言内省的工作方式与之前一样'
- en: '**Marks**: marks can be applied normally to `unittest` test methods and classes.
    Plugins that deal with marks should work normally in most cases (for example, `pytest-timeout`
    marks)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记**：标记可以正常应用于`unittest`测试方法和类。处理标记的插件在大多数情况下应该正常工作（例如`pytest-timeout`标记）'
- en: '**Autouse** fixtures: autouse fixtures defined in modules or `conftest.py`
    files will be created/destroyed when executing `unittest` test methods normally,
    including  `unittest` subclasses in the case of class-scoped autouse fixtures'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动使用**固定装置：在模块或`conftest.py`文件中定义的自动使用固定装置将在正常执行`unittest`测试方法时创建/销毁，包括在类范围的自动使用固定装置的情况下'
- en: '**Test selection**: `-k` and `-m` in the command line should work as normal'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试选择**：命令行中的`-k`和`-m`应该像正常一样工作'
- en: 'Other pytest features do not work with `unittest`, especially:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 其他pytest特性与`unittest`不兼容，特别是：
- en: '**Fixtures**: `unittest` test methods cannot request fixtures. Pytest uses
    `unittest`''s own result collector to execute the tests, which doesn''t support
    passing arguments to test functions'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定装置**：`unittest`测试方法无法请求固定装置。Pytest使用`unittest`自己的结果收集器来执行测试，该收集器不支持向测试函数传递参数'
- en: '**Parametrization**: this is not supported, for similar reasons as for fixtures:
    we need to pass the parametrized values, and this is not currently possible'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数化**：由于与固定装置的原因相似，这也不受支持：我们需要传递参数化值，目前这是不可能的。'
- en: Plugins that don't rely on fixtures may work normally, for example `pytest-timeout`or `pytest-randomly`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不依赖于固定装置的插件可能会正常工作，例如`pytest-timeout`或`pytest-randomly`。
- en: Converting asserts with unitest2pytest
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用unitest2pytest转换断言
- en: Once you have changed the test runner to pytest, you can take advantage of writing
    plain assert statements instead of `self.assert*` methods.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将测试运行程序更改为pytest，您就可以利用编写普通的断言语句来代替`self.assert*`方法。
- en: Converting all the method calls is boring and error-prone, that's why the [`unittest2pytest`](https://github.com/pytest-dev/unittest2pytest) tool
    exists. It converts all `self.assert*` method calls to plain asserts, and also
    converts `self.assertRaises` calls to the appropriate pytest idiom.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 转换所有的方法调用是无聊且容易出错的，这就是[`unittest2pytest`](https://github.com/pytest-dev/unittest2pytest)工具存在的原因。它将所有的`self.assert*`方法调用转换为普通的断言，并将`self.assertRaises`调用转换为适当的pytest习语。
- en: 'Install it using `pip`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`安装它：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once installed, you can now execute it on the files you want:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您现在可以在想要的文件上执行它：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By default, it won't touch the files and will only show the difference in the
    changes it could apply. To actually apply the changes, pass `-wn` (`--write` and
    `--nobackups`).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它不会触及文件，只会显示它可以应用的更改的差异。要实际应用更改，请传递`-wn`（`--write`和`--nobackups`）。
- en: Note that in the previous example, it correctly replaced the `self.assert*`
    calls, `self.assertRaises`, and added the `pytest` import. It did not change the
    subclass of our test class, as this could have other consequences, depending on
    the actual subclass you are using, so `unittest2pytest` leaves that alone.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上一个示例中，它正确地替换了`self.assert*`调用，`self.assertRaises`，并添加了`pytest`导入。它没有更改我们测试类的子类，因为这可能会有其他后果，具体取决于您正在使用的实际子类，因此`unittest2pytest`会保持不变。
- en: 'The updated file runs just as before:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的文件运行方式与以前一样：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Adopting pytest as a runner and being able to use plain assert statements is
    a great win that is often underestimated: it is liberating to not have to type
    `self.assert...` all the time any more.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 采用pytest作为运行程序，并能够使用普通的断言语句是一个经常被低估的巨大收获：不再需要一直输入`self.assert...`是一种解放。
- en: At the time of writing, `unittest2pytest` doesn't handle the `self.fail("not
    implemented yet")` statement of the last test yet. So, we need to replace it manually
    with `assert 0, "not implemented yet"`. Perhaps you would like to submit a PR to
    improve the project? ([https://github.com/pytest-dev/unittest2pytest](https://github.com/pytest-dev/unittest2pytest)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`unittest2pytest`尚未处理最后一个测试中的`self.fail("not implemented yet")`语句。因此，我们需要手动用`assert
    0, "not implemented yet"`替换它。也许您想提交一个PR来改进这个项目？([https://github.com/pytest-dev/unittest2pytest](https://github.com/pytest-dev/unittest2pytest))。
- en: Handling setup/teardown
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理设置/拆卸
- en: To fully convert a `TestCase` subclass to pytest style, we need to replace `unittest` with
    pytest's idioms. We have already seen how to do that with `self.assert*` methods
    in the previous section, by using `unittest2pytest`. But what can we do do about
    `setUp` and `tearDown` methods?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全将`TestCase`子类转换为pytest风格，我们需要用pytest的习语替换`unittest`。我们已经在上一节中看到了如何使用`unittest2pytest`来做到这一点。但是我们能对`setUp`和`tearDown`方法做些什么呢？
- en: As we learned previously, autouse fixtures work just fine in `TestCase` subclasses,
    so they are a natural way to replace `setUp` and `tearDown` methods. Let's use
    the example from the previous section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前学到的，`TestCase`子类中的`autouse` fixtures工作得很好，所以它们是替换`setUp`和`tearDown`方法的一种自然方式。让我们使用上一节的例子。
- en: 'After converting the `assert` statements, the first thing to do is to remove
    the `unittest.TestCase` subclassing:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在转换`assert`语句之后，首先要做的是删除`unittest.TestCase`的子类化：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This becomes the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这变成了以下内容：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we need to transform the `setup`/`teardown` methods into fixture equivalents:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将`setup`/`teardown`方法转换为fixture等效方法：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, the class-scoped `setUpClass` and `tearDownClass` methods will become a
    single class-scoped fixture:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，类作用域的`setUpClass`和`tearDownClass`方法将成为一个单一的类作用域fixture：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Thanks to the `yield` statement, we can easily write the teardown code in the
    fixture itself, as we've already learned.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`yield`语句，我们可以很容易地在fixture本身中编写拆卸代码，就像我们已经学到的那样。
- en: 'Here are some observations:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些观察：
- en: 'Pytest doesn''t care what we call our fixture, so we could just as well keep
    the old `setUpClass` name. We chose to change it to `setup_class` instead, with
    two objectives: avoid confusing readers of this code, because it might seem that
    it is still a `TestCase` subclass, and using a `_` prefix denotes that this fixture
    should not be used as a normal pytest fixture.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pytest不在乎我们如何称呼我们的fixture，所以我们可以继续使用旧的`setUpClass`名称。我们选择将其更改为`setup_class`，有两个目标：避免混淆这段代码的读者，因为它可能看起来仍然是一个`TestCase`子类，并且使用`_`前缀表示这个fixture不应该像普通的pytest
    fixture一样使用。
- en: 'We change `temp_dir` to a local variable because we don''t need to keep it
    around in `cls` any more. Previously, we had to do that because we needed to access
    `cls.temp_dir` during `tearDownClass`, but now we can keep it as a local variable
    instead and access it after the `yield` statement. That''s one of the beautiful
    things about using `yield` to separate setup and teardown code: you don''t need
    to keep context variables around; they are kept naturally as the local variables
    of the function.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`temp_dir`更改为局部变量，因为我们不再需要在`cls`中保留它。以前，我们不得不这样做，因为我们需要在`tearDownClass`期间访问`cls.temp_dir`，但现在我们可以将其保留为一个局部变量，并在`yield`语句之后访问它。这是使用`yield`将设置和拆卸代码分开的美妙之一：你不需要保留上下文变量；它们自然地作为函数的局部变量保留。
- en: 'We follow the same approach with the `setUp` method:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用相同的方法来处理`setUp`方法：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This becomes the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这变成了以下内容：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This technique is very useful because you can get a pure pytest class from a
    minimal set of changes. Also, using a naming convention for fixtures, as we did
    previously, helps to convey to readers that the fixtures are converting the old
    `setup`/`teardown` idioms.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术非常有用，因为你可以通过一组最小的更改得到一个纯粹的pytest类。此外，像我们之前做的那样为fixtures使用命名约定，有助于向读者传达fixtures正在转换旧的`setup`/`teardown`习惯。
- en: Now that this class is a proper pytest class, you are free to use fixtures and
    parametrization.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个类是一个合适的pytest类，你可以自由地使用fixtures和参数化。
- en: Managing test hierarchies
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理测试层次结构
- en: 'As we have seen, it is common to need to share functionality in large test
    suites. Because `unittest` is based on subclassing `TestCase`, it is common to
    put extra functionality in your `TestCase` subclass itself. For example, if we
    need to test application logic that requires a database, we might initially add
    functionality to the start and connect to a database in our `TestCase` subclass
    directly:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在大型测试套件中需要共享功能是很常见的。由于`unittest`是基于子类化`TestCase`，所以在`TestCase`子类本身中放置额外的功能是很常见的。例如，如果我们需要测试需要数据库的应用逻辑，我们可能最初会直接在我们的`TestCase`子类中添加启动和连接到数据库的功能：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This works well for a single test module, but often it is the case that we
    need this functionality in another test module sometime later. The `unittest`
    module does not contain built-in provisions to share common `setup`/`teardown`
    code, so what comes naturally for most people is to extract the required functionality
    in a superclass, and then a subclass from that, where needed:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于单个测试模块效果很好，但通常情况下，我们需要在以后的某个时候在另一个测试模块中使用这个功能。`unittest`模块没有内置的功能来共享常见的`setup`/`teardown`代码，所以大多数人自然而然地会将所需的功能提取到一个超类中，然后在需要的地方从中创建一个子类：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The superclass usually not only contains `setup`/`teardown` code, but it often
    also includes utility functions that call `self.assert*` to perform common checks
    (such as `check_row` in the previous example).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 超类通常不仅包含`setup`/`teardown`代码，而且通常还包括调用`self.assert*`执行常见检查的实用函数（例如在上一个例子中的`check_row`）。
- en: 'Continuing with our example: some time later, we need completely different
    functionality in another test module, for example, to test a GUI application.
    We are now wiser and suspect we will need GUI-related functionality in several
    other test modules, so we start by creating a superclass with the functionality
    we need directly:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的例子：一段时间后，我们需要在另一个测试模块中完全不同的功能，例如，测试一个GUI应用程序。我们现在更加明智，怀疑我们将需要在几个其他测试模块中使用GUI相关的功能，所以我们首先创建一个具有我们直接需要的功能的超类：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The approach of moving `setup`/`teardown` and test functionality to superclasses
    works `OK` and is easy to understand.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将`setup`/`teardown`和测试功能移动到超类的方法是可以的，并且易于理解。
- en: 'The problem comes when we get to the point where we need two unrelated functionalities
    in the same test module. In that case, we have no other choice than to resort
    to multiple inheritance. Suppose we need to test a dialog that connects to the
    database; we will need to write code such as this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要在同一个测试模块中使用两个不相关的功能时，问题就出现了。在这种情况下，我们别无选择，只能求助于多重继承。假设我们需要测试连接到数据库的对话框；我们将需要编写这样的代码：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Multiple inheritance in general tends to make the code less readable and harder
    to follow. Here, it also has the additional aggravation that we need to call `setUp`
    and `tearDown` in the correct order, explicitly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，多重继承会使代码变得不太可读，更难以理解。在这里，它还有一个额外的恼人之处，就是我们需要显式地按正确的顺序调用`setUp`和`tearDown`。
- en: Another point to be aware of is that `setUp` and `tearDown` are optional in
    the `unittest` framework, so it is common for a certain class to not declare a
    `tearDown` method at all if it doesn't need any teardown code. If this class contains
    functionality that is later moved to a superclass, many subclasses probably will
    not declare a `tearDown` method as well. The problem comes when, later on in a
    multiple inheritance scenario, you improve the super class and need to add a `tearDown`
    method, because you will now have to go over all subclasses and ensure that they
    call the `tearDown` method of the super class.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的一点是，在 `unittest` 框架中，`setUp` 和 `tearDown` 是可选的，因此如果某个类不需要任何拆卸代码，通常不会声明
    `tearDown` 方法。如果此类包含的功能后来移动到超类中，许多子类可能也不会声明 `tearDown` 方法。问题出现在后来的多重继承场景中，当您改进超类并需要添加
    `tearDown` 方法时，因为现在您必须检查所有子类，并确保它们调用超类的 `tearDown` 方法。
- en: So, let's say we find ourselves in the previous situation and we want to start
    to use pytest functionality that is incompatible with `TestCase` tests. How can
    we refactor our utility classes so we can use them naturally from pytest and also
    keep existing `unittest`-based tests working?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，假设我们发现自己处于前述情况，并且希望开始使用与 `TestCase` 测试不兼容的 pytest 功能。我们如何重构我们的实用类，以便我们可以自然地从
    pytest 中使用它们，并且保持现有的基于 `unittest` 的测试正常工作？
- en: Reusing test code with fixtures
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 fixtures 重用测试代码
- en: 'The first thing we should do is to extract the desired functionality into well-defined
    fixtures and put them into a `conftest.py` file. Continuing with our example,
    we can create `db_testing` and `gui_testing` fixtures:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该做的第一件事是将所需的功能提取到定义良好的 fixtures 中，并将它们放入 `conftest.py` 文件中。继续我们的例子，我们可以创建
    `db_testing` 和 `gui_testing` fixtures：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, you can start to write new tests using plain pytest style and use the
    `db_testing` and `gui_testing` fixtures, which is great because it opens the door
    to use pytest features in new tests. But the cool thing here is that we can now
    change `DataBaseTesting` and `GUITesting` to reuse the functionality provided
    by the fixtures, in a way that we don''t break existing code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以开始使用纯 pytest 风格编写新的测试，并使用 `db_testing` 和 `gui_testing` fixtures，这很棒，因为它为在新测试中使用
    pytest 功能打开了大门。但这里很酷的一点是，我们现在可以更改 `DataBaseTesting` 和 `GUITesting` 来重用 fixtures
    提供的功能，而不会破坏现有代码：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Our `DatabaseTesting` and `GUITesting` classes obtain the fixture values by
    declaring an autouse `_setup` fixture, a trick we have learned early in this chapter.
    We can get rid of the `tearDown` method because the fixture will take care of
    cleaning up after itself after each test, and the utility methods become simple
    proxies for the methods implemented in the fixture.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `DatabaseTesting` 和 `GUITesting` 类通过声明一个自动使用的 `_setup` fixture 来获取 fixture
    值，这是我们在本章早期学到的一个技巧。我们可以摆脱 `tearDown` 方法，因为 fixture 将在每次测试后自行清理，而实用方法变成了在 fixture
    中实现的方法的简单代理。
- en: 'As bonus points, `GUIFixture` and `DataBaseFixture` can also use other pytest
    fixtures. For example, we can probably remove `DataBaseTesting.create_temporary_db()`
    and use the built-in `tmpdir` fixture to create the temporary database file for
    us:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作为奖励分，`GUIFixture` 和 `DataBaseFixture` 也可以使用其他 pytest fixtures。例如，我们可能可以移除 `DataBaseTesting.create_temporary_db()`，并使用内置的
    `tmpdir` fixture 为我们创建临时数据库文件：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using other fixtures can then greatly simplify the existing testing utilities
    code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用其他 fixtures 可以极大地简化现有的测试实用程序代码。
- en: 'It is worth emphasizing that this refactoring will require zero changes to
    the existing tests. Here, again, one of the benefits of fixtures becomes evident:
    changes in requirements of a fixture do not affect tests that use the fixture.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 值得强调的是，这种重构不需要对现有测试进行任何更改。这里，fixtures 的一个好处再次显而易见：fixture 的要求变化不会影响使用 fixture
    的测试。
- en: Refactoring test utilities
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构测试实用程序
- en: In the previous section, we saw how test suites might make use of subclasses
    to share test functionality and how to refactor them into fixtures while keeping
    existing tests working.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看到测试套件可能使用子类来共享测试功能，并且如何将它们重构为 fixtures，同时保持现有的测试正常工作。
- en: 'An alternative to sharing test functionality through superclasses in `unittest`
    suites is to write separate utility classes and use them inside the tests. Getting
    back to our example, where we need to have database-related facilities, here is
    a way to implement that in a `unittest`-friendly way, without using superclasses:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `unittest` 套件中通过超类共享测试功能的另一种选择是编写单独的实用类，并在测试中使用它们。回到我们的例子，我们需要具有与数据库相关的设施，这是一种在
    `unittest` 友好的方式实现的方法，而不使用超类：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this approach, we separate our testing functionality in a class that receives
    the current `TestCase` instance as its first argument, followed by any other arguments,
    as required.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，我们将测试功能分离到一个类中，该类将当前的 `TestCase` 实例作为第一个参数，然后是任何其他所需的参数。
- en: 'The `TestCase` instance serves two purposes: to provide the class access to
    the various `self.assert*` functions, and as a way to register clean-up functions
    with `TestCase.addCleanup` ([https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup)).
    `TestCase.addCleanup` registers functions that will be called after each test
    is done, regardless of whether they have been successful. I consider them a superior
    alternative to the `setUp`/`tearDown` functions because they allow resources to
    be created and immediately registered for cleaning up. Creating all resources
    during `setUp` and releasing them during `tearDown` has the disadvantage that
    if any exception is raised during the `setUp` method, then `tearDown` will not
    be called at all, leaking resources and state, which might affect the tests that
    follow.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestCase`实例有两个目的：为类提供对各种`self.assert*`函数的访问，并作为一种方式向`TestCase.addCleanup`注册清理函数（[https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup)）。`TestCase.addCleanup`注册的函数将在每个测试完成后调用，无论它们是否成功。我认为它们是`setUp`/`tearDown`函数的一个更好的替代方案，因为它们允许资源被创建并立即注册进行清理。在`setUp`期间创建所有资源并在`tearDown`期间释放它们的缺点是，如果在`setUp`方法中引发任何异常，那么`tearDown`将根本不会被调用，从而泄漏资源和状态，这可能会影响后续的测试。'
- en: If your `unittest` suite uses this approach for testing facilities, then the
    good news is that you are in for an easy ride to convert/reuse this functionality
    for pytest.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的`unittest`套件使用这种方法进行测试设施，那么好消息是，您可以轻松地转换/重用这些功能以供pytest使用。
- en: 'Because this approach is very similar to how fixtures work, it is simple to
    change the classes slightly to work as fixtures:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这种方法与fixtures的工作方式非常相似，所以很容易稍微改变类以使其作为fixtures工作：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We get rid of the dependency to the `TestCase` instance because our fixture
    now takes care of calling `teardown()`, and we are free to use plain asserts instead
    of `Test.assert*` methods.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们摆脱了对`TestCase`实例的依赖，因为我们的fixture现在负责调用`teardown()`，并且我们可以自由地使用普通的asserts而不是`Test.assert*`方法。
- en: 'To keep the existing suite working, we just need to make a thin subclass to
    handle cleanup when it is used with `TestCase` subclasses:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持现有的套件正常工作，我们只需要创建一个薄的子类来处理在与`TestCase`子类一起使用时的清理：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With this small refactoring, we can now use native pytest fixtures in new tests,
    while keeping the existing tests working exactly as before.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种小的重构，我们现在可以在新测试中使用原生的pytest fixtures，同时保持现有的测试与以前完全相同的工作方式。
- en: While this approach works well, one problem is that unfortunately, we cannot
    use other pytest fixtures (such as `tmpdir`) in our `DataBaseFixture` class without
    breaking compatibility with `DataBaseTesting` usage in `TestCase` subclasses.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法效果很好，但一个问题是，不幸的是，我们无法在`DataBaseFixture`类中使用其他pytest fixtures（例如`tmpdir`），而不破坏在`TestCase`子类中使用`DataBaseTesting`的兼容性。
- en: Migration strategy
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移策略
- en: Being able to run `unittest`-based tests out of the box is definitely a very
    powerful feature, because it allows you to start using pytest right away as a
    runner.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 能够立即使用pytest作为运行器开始使用`unittest`-based测试绝对是一个非常强大的功能。
- en: 'Eventually, you need to decide what to do with the existing `unittest`-based
    tests. There are a few approaches you can choose:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您需要决定如何处理现有的基于`unittest`的测试。您可以选择几种方法：
- en: '**Convert everything**: if your test suite is relatively small, you might decide
    to convert all tests at once. This has the advantage that you don''t have to make
    compromises to keep existing `unittest` suites working, and being simpler to be
    reviewed by others because your pull request will have a single theme.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转换所有内容**：如果您的测试套件相对较小，您可能决定一次性转换所有测试。这样做的好处是，您不必妥协以保持现有的`unittest`套件正常工作，并且更容易被他人审查，因为您的拉取请求将具有单一主题。'
- en: '**Convert as you go**: you might decide to convert tests and functionality
    as needed. When you need to add new tests or change existing tests, you take the
    opportunity to convert tests and/or refactor functionality to fixtures using the
    techniques from the previous sections. This is a good approach if you don''t want
    to spend time upfront converting everything, while slowly but surely paving the
    way to have a pytest-only test suite.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边转换边进行**：您可能决定根据需要转换测试和功能。当您需要添加新测试或更改现有测试时，您可以利用这个机会转换测试和/或重构功能，使用前几节中的技术来创建fixtures。如果您不想花时间一次性转换所有内容，而是慢慢地铺平道路，使pytest成为唯一的测试套件，那么这是一个很好的方法。'
- en: '**New tests only**: you might decide to never touch the existing `unittest`
    suite, only writing new tests in pytest-style. This approach is reasonable if
    you have thousands of tests that might never need to undergo maintenance, but
    you will have to keep the hybrid approaches shown in the previous sections working
    indefinitely.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅新测试**：您可能决定永远不触及现有的`unittest`套件，只在pytest风格中编写新测试。如果您有成千上万的测试，可能永远不需要进行维护，那么这种方法是合理的，但您将不得不保持前几节中展示的混合方法永远正常工作。'
- en: Choose which migration strategy to use based on the time budget you have and
    the test suite's size.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的时间预算和测试套件的大小选择要使用的迁移策略。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have discussed a few strategies and tips on how to use pytest in `unittest`-based
    suites of various sizes. We started with a discussion about using pytest as a
    test runner, and which features work with `TestCase` tests. We looked at how to
    use the `unittest2pytest` tool to convert `self.assert*` methods to plain assert
    statements and take full advantage of pytest introspection features. Then, we
    learned a few techniques on how to migrate `unittest`-based `setUp`/`tearDown`
    code to pytest-style in test classes, manage functionality spread in test hierarchies,
    and general utilities. Finally, we wrapped up the chapter with an overview of
    the possible migration strategies that you can take for test suites of various
    sizes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了一些关于如何在各种规模的基于`unittest`的测试套件中使用pytest的策略和技巧。我们从讨论如何使用pytest作为测试运行器开始，以及哪些功能适用于`TestCase`测试。我们看了看如何使用`unittest2pytest`工具将`self.assert*`方法转换为普通的assert语句，并充分利用pytest的内省功能。然后，我们学习了一些关于如何将基于`unittest`的`setUp`/`tearDown`代码迁移到pytest风格的测试类中的技巧，管理在测试层次结构中分散的功能，以及一般的实用工具。最后，我们总结了可能的迁移策略概述，适用于各种规模的测试套件。
- en: In the next chapter, we will see a quick summary of what we have learned in
    this book, and discuss what else might be in store for us.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将简要总结本书学到的内容，并讨论接下来可能会有什么。
