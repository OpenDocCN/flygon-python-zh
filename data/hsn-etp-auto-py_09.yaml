- en: Using the Subprocess Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Subprocess模块
- en: Running and spawning a new system process can be useful to system administrators
    who want to automate specific operating system tasks or execute a few commands
    within their scripts. Python provides many libraries to call external system utilities,
    and it interacts with the data produced. The first library that was created is
    the `OS` module, which provides some useful tools to invoke external processes,
    such as `os.system`, `os.spwan`, and `os.popen*`. It lacks some essential functions,
    however, so Python developers have introduced a new library, `subprocess`, which
    can spawn new processes, send and receive from the processes, and handle error
    and return codes. Currently, the official Python documentation recommends the
    `subprocess` module for accessing system commands, and Python actually intends
    to replace the older modules with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 运行和生成新的系统进程对于想要自动化特定操作系统任务或在脚本中执行一些命令的系统管理员非常有用。Python提供了许多库来调用外部系统实用程序，并与生成的数据进行交互。最早创建的库是`OS`模块，它提供了一些有用的工具来调用外部进程，比如`os.system`，`os.spwan`和`os.popen*`。然而，它缺少一些基本功能，因此Python开发人员引入了一个新的库，`subprocess`，它可以生成新的进程，与进程发送和接收，并处理错误和返回代码。目前，官方Python文档建议使用`subprocess`模块来访问系统命令，Python实际上打算用它来替换旧的模块。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The `Popen()` Subprocess
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Popen()`子进程'
- en: Reading `stdin`, `stdout`, and `stderr`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取`stdin`，`stdout`和`stderr`
- en: The subprocess call suite
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子进程调用套件
- en: The popen() subprocess
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: popen()子进程
- en: 'The `subprocess` module implements only one class: `popen()`. The primary use
    of this class is to spawn a new process on the system. This class can accept additional
    arguments for the running process, along with additional arguments for `popen()`
    itself:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`subprocess`模块只实现了一个类：`popen()`。这个类的主要用途是在系统上生成一个新的进程。这个类可以接受运行进程的额外参数，以及`popen()`本身的额外参数：'
- en: '| **Arguments** | **Meaning** |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **含义** |'
- en: '|  `args` | A string, or a sequence of program arguments. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `args` | 一个字符串，或者程序参数的序列。 |'
- en: '|  `bufsize` | It is supplied as the buffering argument to the `open()` function
    when creating the `stdin`/`stdout`/`stderr` pipe file objects. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `bufsize` | 它作为`open()`函数的缓冲参数提供，用于创建`stdin`/`stdout`/`stderr`管道文件对象。 |'
- en: '|  `executable` | A replacement program to execute. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `executable` | 要执行的替换程序。 |'
- en: '|  `stdin`, `stdout`, `stderr` | These specify the executed program''s standard
    input, standard output, and standard error file handles, respectively. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `stdin`，`stdout`，`stderr` | 这些分别指定了执行程序的标准输入、标准输出和标准错误文件句柄。 |'
- en: '|  `shell` | If `True`, the command will be executed through the shell (the
    default is `False`). In Linux, this means calling the `/bin/sh` before running
    the child process. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `shell` | 如果为`True`，则命令将通过shell执行（默认为`False`）。在Linux中，这意味着在运行子进程之前调用`/bin/sh`。
    |'
- en: '|  `cwd` | Sets the current directory before the child is executed. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `cwd` | 在执行子进程之前设置当前目录。 |'
- en: '|  `env` | Defines the environmental variables for the new process. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `env` | 定义新进程的环境变量。 |'
- en: 'Now, let us focus on `args`. The `popen()` command can take a Python list as
    an input, with the first element treated as the command and the subsequent elements
    as the command `args`, as shown in the following code snippet:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于`args`。`popen()`命令可以接受Python列表作为输入，其中第一个元素被视为命令，后续元素被视为命令`args`，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Script output**![](../images/00147.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本输出**![](../images/00147.jpeg)'
- en: The output returned from the command is printed directly to your Python Terminal.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令返回的输出直接打印到您的Python终端。
- en: The `ifconfig` is a Linux utility used to return the network interface information.
    For Windows users, you can get similar output by using the `ipconfig` command
    on cmd.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`ifconfig`是一个用于返回网络接口信息的Linux实用程序。对于Windows用户，您可以通过在cmd上使用`ipconfig`命令来获得类似的输出。'
- en: 'We can rewrite the preceding code and use a list instead of a string, as seen
    in the following code snippet:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重写上面的代码，使用列表而不是字符串，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using this approach allows you to add additional arguments to the main command
    as list items:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法允许您将额外的参数添加到主命令作为列表项：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that if you provide the previous command as a string not as a list, as
    we did in the first example, the command will fail as shown in below screenshot.
    The subprocess `Popen()` expects an executable name in each list element and not
    any other arguments.![](../images/00148.jpeg)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您将上一个命令提供为字符串而不是列表，就像我们在第一个示例中所做的那样，命令将失败，如下面的屏幕截图所示。子进程`Popen()`期望在每个列表元素中有一个可执行名称，而不是其他任何参数。![](../images/00148.jpeg)
- en: 'On the other hand, if you want to use the string method instead of a list,
    you can set the `shell` argument to `True`. This will instruct `Popen()` to append
    `/bin/sh` before the command; hence, the command will be executed with all of
    the arguments after it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您想使用字符串方法而不是列表，您可以将`shell`参数设置为`True`。这将指示`Popen()`在命令之前附加`/bin/sh`，因此命令将在其后执行所有参数：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can think about `shell=True` as you spawn a shell process and pass the command
    with an argument to it. This could save you a few lines of code through using
    `split()`, in case you receive the command from an external system and want to
    run it directly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`shell=True`视为生成一个shell进程并将命令与参数传递给它。这可以通过使用`split()`节省您几行代码，以便直接从外部系统接收命令并运行它。
- en: The default shell used by `subprocess` is `/bin/sh`. If you're using other shells,
    like `tch` or `csh`, you can define them in the `executable` argument. Also notice
    running the command as a shell can be a security issue and allow *security injection.*
    A user who instructs your code to run the script can add `"; rm -rf /"`  and cause
    terrible things to happen.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`subprocess`使用的默认shell是`/bin/sh`。如果您使用其他shell，比如`tch`或`csh`，您可以在`executable`参数中定义它们。还要注意，作为shell运行命令可能会带来安全问题，并允许*安全注入*。指示您的代码运行脚本的用户可以添加`";
    rm -rf /"`，导致可怕的事情发生。'
- en: 'Also, you can change the directory to a specific one before running the command
    by using the `cwd` argument. This is useful when you need to list the contents
    of the directory before operating on it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以使用`cwd`参数在运行命令之前将目录更改为特定目录。当您需要在对其进行操作之前列出目录的内容时，这将非常有用：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../images/00149.jpeg)Ansible has a similar flag called `chdir:`. This argument
    will be used inside a playbook task to change a directory before the execution.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00149.jpeg)Ansible有一个类似的标志叫做`chdir:`。此参数将用于playbook任务中，在执行之前更改目录。'
- en: Reading stdin, stdout, and stderr
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取标准输入(stdin)、标准输出(stdout)和标准错误(stderr)
- en: 'The spawned processes can communicate with the operating system in three channels:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的进程可以通过三个通道与操作系统通信：
- en: Standard input (`stdin`)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准输入（stdin）
- en: Standard output (`stdout`)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准输出（stdout）
- en: Standard error (`stderr`)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准错误（stderr）
- en: 'In subprocess, `Popen()` can interact with the three channels and redirect
    each stream to an external file, or to a special value called `PIPE`. An additional
    method, called `communicate()`, is used to read from the `stdout` and write on
    the `stdin`. The `communicate()` method can take input from the user and return
    both the standard output and the standard error, as shown in the following code
    snippet:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在子进程中，`Popen()`可以与三个通道交互，并将每个流重定向到外部文件，或者重定向到一个称为`PIPE`的特殊值。另一个方法叫做`communicate()`，用于从`stdout`读取和写入`stdin`。`communicate()`方法可以从用户那里获取输入，并返回标准输出和标准错误，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../images/00150.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00150.jpeg)'
- en: 'Similarly, you can send data and write to the process using the input argument
    inside  `communicate()`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以使用`communicate()`中的输入参数发送数据并写入进程：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the script, we used the `input` argument inside `communicate()`,which will
    send the data to the other child process, which will search for the subprocess
    keyword using the `grep`  command. The returned output will be stored inside the
    `stdout` variable:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，我们在`communicate()`中使用了`input`参数，它将数据发送到另一个子进程，该子进程将使用`grep`命令搜索子进程关键字。返回的输出将存储在`stdout`变量中：
- en: '![](../images/00151.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00151.jpeg)'
- en: 'Another approach to validate the successful execution of the process is to
    use the return code. When the command has successfully executed without errors,
    the return code will be `0`; otherwise, it will be an integer value larger than
    `0`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 验证进程成功执行的另一种方法是使用返回代码。当命令成功执行且没有错误时，返回代码将为`0`；否则，它将是大于`0`的整数值：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The script will ask the user to enter an IP address, and will then call the
    `ping_destination()` function, which will execute the `ping` command against the
    IP address. The result of the `ping` command (either `success` or `failed`) will
    return in the standard output, and the `communicate()` function will populate
    the return code with the result:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将要求用户输入一个IP地址，然后调用`ping_destination()`函数，该函数将针对IP地址执行`ping`命令。`ping`命令的结果（成功或失败）将返回到标准输出，并且`communicate()`函数将使用结果填充返回代码：
- en: '![](../images/00152.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00152.jpeg)'
- en: First, we tested the Google DNS IP address. The host is alive, and the command
    will be successfully executed with the return code `=0`.  The function will return
    `True` and print `Host is alive`. Second, we tested with the `HostNotExist` string.
    The function will return `False` to the main program and print `Host is down`.
    Also, it will print the command standard output returned to subprocess which is
    (`Name or service not known`).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们测试了Google DNS IP地址。主机是活动的，并且命令将成功执行，返回代码`=0`。函数将返回`True`并打印`主机是活动的`。其次，我们使用了`HostNotExist`字符串进行测试。函数将返回`False`到主程序并打印`主机已关闭`。此外，它将打印返回给子进程的命令标准输出（`Name
    or service not known`）。
- en: You can use `echo $?` to check the return code (sometimes called the exit code)
    of the previously executed command.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`echo $?`来检查先前执行的命令的返回代码（有时称为退出代码）。
- en: The subprocess call suite
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子进程调用套件
- en: The subprocess module provides another function that makes process spawning a safer
    operation than using `Popen()`. The subprocess `call()` function waits for the
    called command/program to finish reading the output. It supports the same arguments
    as the `Popen()` constructor, such as `shell`, `executable`, and `cwd`, but this
    time, your script will wait for the program to complete and populate the return
    code without the need to `communicate()`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 子进程模块提供了另一个函数，使进程生成比使用`Popen()`更安全。子进程`call()`函数等待被调用的命令/程序完成读取输出。它支持与`Popen()`构造函数相同的参数，如`shell`、`executable`和`cwd`，但这次，您的脚本将等待程序完成并填充返回代码，而无需`communicate()`。
- en: 'If you inspect the `call()` function, you will see that it''s actually a wrapper
    around the `Popen()` class, but with a `wait()` function that waits until the
    end of the command before returning the output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查`call()`函数，您会发现它实际上是`Popen()`类的一个包装器，但具有一个`wait()`函数，它会在返回输出之前等待命令结束：
- en: '![](../images/00153.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00153.jpeg)'
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you want more protection for your code, you can use the `check_call()` function.
    It''s the same as `call()`, but adds another check to the return code. If it is
    equal to `0` (meaning that the command has successfully executed), then the output
    will be returned. Otherwise, it will raise an exception with the returned exit
    code. This will allow you to handle the exception in your program flow:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望为您的代码提供更多保护，可以使用`check_call()`函数。它与`call()`相同，但会对返回代码进行另一个检查。如果它等于`0`（表示命令已成功执行），则将返回输出。否则，它将引发一个带有返回退出代码的异常。这将允许您在程序流中处理异常：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A downside of using the `call()` function is that you can't use  `communicate()`
    to send the data to process, like we did with `Popen()`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`call()`函数的一个缺点是，您无法像使用`Popen()`那样使用`communicate()`将数据发送到进程。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to run and spawn new processes in the system,
    and we learned about how these spawned processes communicate with the operating
    system. We also discussed the subprocess module and the `subprocess` call.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在系统中运行和生成新进程，以及我们了解了这些生成的进程如何与操作系统通信。我们还讨论了子进程模块和`subprocess`调用。
- en: In the next chapter, we will see how to run and execute commands on remote hosts.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何在远程主机上运行和执行命令。
