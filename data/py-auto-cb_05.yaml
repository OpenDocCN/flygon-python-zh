- en: Generating Fantastic Reports
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成精彩的报告
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Creating a simple report in plain text
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在纯文本中创建简单报告
- en: Using templates for reports
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板生成报告
- en: Formatting text in Markdown
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Markdown中格式化文本
- en: Writing a basic Word document
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写基本的Word文档
- en: Styling a Word document
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Word文档设置样式
- en: Generating structure in Word documents
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Word文档中生成结构
- en: Adding pictures to Word documents
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向Word文档添加图片
- en: Writing a simple PDF document
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写简单的PDF文档
- en: Structuring a PDF
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建PDF
- en: Aggregating PDF reports
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合PDF报告
- en: Watermarking and encrypting a PDF
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给PDF加水印和加密
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we'll see how to write documents and perform basic operations,
    such as dealing with templates in different formats, such as plain text and Markdown.
    We'll spend the most time with common, useful formats such as Word and PDF.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何编写文档并执行基本操作，如处理不同格式的模板，如纯文本和Markdown。我们将花费大部分时间处理常见且有用的格式，如Word和PDF。
- en: Creating a simple report in plain text
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在纯文本中创建简单报告
- en: The most simple report is to generate some text and store it in a file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的报告是生成一些文本并将其存储在文件中。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will generate a brief report in text format. The data to
    be stored will be in a dictionary.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将以文本格式生成简要报告。要存储的数据将在一个字典中。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Import `datetime`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`datetime`：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the template with the report in text format:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本格式创建报告模板：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a dictionary with the values to store. Note this is the data that''s
    going to be presented in the report:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含要存储的值的字典。请注意，这是将在报告中呈现的数据：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Compose the report, adding the data to the template:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 撰写报告，将数据添加到模板中：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a new file with the current date and store the report:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有当前日期的新文件，并存储报告：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Check the newly created report:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查新创建的报告：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Steps 2 and 3 in the *How to do it…* section set up a simple template and add
    a dictionary with all the data to be contained in the report. Then, in step 4,
    those two are combined into a specific report.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*如何操作...*部分的第2步和第3步设置了一个简单的模板，并添加了包含报告中所有数据的字典。然后，在第4步，这两者被合并成一个特定的报告。'
- en: In step 4, the dictionary is combined with a template. Notice that the keys
    on the dictionary correspond to the parameters on the template. The trick is to
    use the double star in the `format` call to decompress the dictionary, passing
    each of the keys as a parameter to `format()`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步中，将字典与模板结合。请注意，字典中的键对应模板中的参数。诀窍是在`format`调用中使用双星号来解压字典，将每个键作为参数传递给`format()`。
- en: In Step 5, the resulting report, a string, is stored in a newly created file,
    using the `with` context manager. The `open()` function creates a new file, as
    stated in the opening mode, `w`, and keeps it open during the block, which writes
    the data to the file. When exiting the block, the file is properly closed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5步中，生成的报告（一个字符串）存储在一个新创建的文件中，使用`with`上下文管理器。`open()`函数根据打开模式`w`创建一个新文件，并在块期间保持打开状态，该块将数据写入文件。退出块时，文件将被正确关闭。
- en: The open modes determine how to open a file, whether it is to read or write,
    and whether the file is in text or binary. The `w` mode opens the file to write
    it, overwriting it if it already exists. Be careful to not to delete an existing
    file by mistake!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 打开模式确定如何打开文件，无论是读取还是写入，以及文件是文本还是二进制。`w`模式打开文件以进行写入，如果文件已存在，则覆盖它。小心不要错误删除现有文件！
- en: Step 6 checks that the file has been created with the proper data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第6步检查文件是否已使用正确的数据创建。
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The filename is created with today's date to minimize the probability of overwriting
    values. The format of the date, starting with the year and ending with the day,
    has been selected so the files are sorted naturally in the correct order.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名使用今天的日期创建，以最小化覆盖值的可能性。日期的格式从年份开始，以天结束，已选择文件可以按正确顺序自然排序。
- en: The `with` context manager will close the file even if there's an exception.
    It will raise an `IOError`exception if there is.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 即使出现异常，`with`上下文管理器也会关闭文件。如果出现异常，它将引发`IOError`异常。
- en: Some of the common exceptions in writing could be a problem with permissions,
    a full hard drive, or a path problem (for instance, trying to write in a non-existent
    directory).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作中一些常见的异常可能是权限问题，硬盘已满，或路径问题（例如，尝试在不存在的目录中写入）。
- en: Note that a file may not be fully committed to disk until it is closed or explicitly
    flushed. Generally, this is not a problem when dealing with files, but something
    to keep in mind if trying to open a file twice, one for read and one for write.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件可能在关闭或显式刷新之前未完全提交到磁盘。一般来说，处理文件时这不是问题，但如果尝试打开一个文件两次（一次用于读取，一次用于写入），则需要牢记这一点。
- en: See also
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using templates for reports* recipe
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用模板生成报告*配方'
- en: The *Formatting text in Markdown* recipe
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Markdown中格式化文本*配方'
- en: The *Aggregating PDF reports* recipe
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*聚合PDF报告*配方'
- en: Using templates for reports
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板生成报告
- en: HTML is a very flexible format that can be used to present rich reports. While
    an HTML template can be created by treating it as just text, there are tools that
    allow you to add better handling of structured text. This detaches the template
    from the code as well, separating the generation of the data from the representation
    of that data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: HTML是一种非常灵活的格式，可用于呈现丰富的报告。虽然可以将HTML模板视为纯文本创建，但也有工具可以让您更好地处理结构化文本。这也将模板与代码分离，将数据的生成与数据的表示分开。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The tool used in this recipe, Jinja2, reads a file that contains the template
    and applies the context to it. The context contains the data to be displayed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方中使用的工具Jinja2读取包含模板的文件，并将上下文应用于它。上下文包含要显示的数据。
- en: 'We should start by installing the module:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该从安装模块开始：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Jinja2 uses its own syntax, which is a mixture of HTML and Python. It is aimed
    at HTML documents so it easily performs operations such as correctly escaping
    special characters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2使用自己的语法，这是HTML和Python的混合体。它旨在HTML文档，因此可以轻松执行操作，例如正确转义特殊字符。
- en: In the GitHub repository, we've included a template file called `jinja_template.html`
    with the template to use.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub存储库中，我们已经包含了一个名为`jinja_template.html`的模板文件。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import Jinja2 `Template` and `datetime`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入Jinja2 `Template`和`datetime`：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Read the template from the files into memory:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件中读取模板到内存中：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a context with the data to be displayed:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含要显示数据的上下文：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Render the template and write a new file, `report.html`, with the following
    result:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染模板并写入一个新文件`report.html`，结果如下：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open the `report.html` file in a browser:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`report.html`文件：
- en: '![](assets/47421547-e6ed-41d2-8573-cf9ffebbc7d2.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/47421547-e6ed-41d2-8573-cf9ffebbc7d2.png)'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Steps 2 and 4 in the *How to do it…* section are very straightforward: they
    read the template and  save the resulting report.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*如何做...*部分中的步骤2和4非常简单：它们读取模板并保存生成的报告。'
- en: 'As seen in Steps 3 and 4, the main task is to create a context dictionary with
    the information to be displayed. The template then renders that information, as
    shown in step 5\. Let''s take a look at `jinja_template.html`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如步骤3和4所示，主要任务是创建一个包含要显示信息的上下文字典。然后模板呈现该信息，如步骤5所示。让我们来看看`jinja_template.html`：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Most of it is replacing the context values as defined between curly brackets,
    such as `{{total_minutes}}`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分是替换上下文值，如`{{total_minutes}}`在花括号之间定义。
- en: Note the tag, `{% for ... %} / {% endfor %}`, which defines a loop. That allows
    a very Python-based assignment to generate multiple rows or elements.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意标签`{% for ... %} / {% endfor %}`，它定义了一个循环。这允许基于Python的赋值生成多行或元素。
- en: Filters can be applied to the variables to modify them. In this case, the `length`
    filter is applied to the `movies` list to obtain the size using the pipe symbol,
    as shown in `{{movies|length}}`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对变量应用过滤器进行修改。在这种情况下，将`length`过滤器应用于`movies`列表，以使用管道符号获得大小，如`{{movies|length}}`所示。
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Other than the `{% for %}` tag, there''s an `{% if %}` tag, allowing it to
    display conditionally:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`{% for %}`标签之外，还有一个`{% if %}`标签，允许它有条件地显示：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There are a good number of defined filters already (see the whole list here:
    [http://jinja.pocoo.org/docs/2.10/templates/#list-of-builtin-filters](http://jinja.pocoo.org/docs/2.10/templates/#list-of-builtin-filters)).
    But, it is also possible to define custom ones.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 已经定义了许多过滤器（在此处查看完整列表：[http://jinja.pocoo.org/docs/2.10/templates/#list-of-builtin-filters](http://jinja.pocoo.org/docs/2.10/templates/#list-of-builtin-filters)）。但也可以定义自定义过滤器。
- en: Note that you can add a lot of processing and logic to the template using filters.
    While a little bit is fine, try to limit the amount of logic in the template.
    Most of the calculations for data to be displayed should be done before, leaving
    the template to just display values. This makes the context very straightforward
    and simplifies the template, allowing for changes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以使用过滤器向模板添加大量处理和逻辑。虽然少量是可以的，但请尝试限制模板中的逻辑量。大部分用于显示数据的计算应该在之前完成，使上下文非常简单，并简化模板，从而允许进行更改。
- en: 'When dealing with HTML files, it is good to auto-escape the variables. This
    means that characters with meaning, for example, the `<` character, will be replaced
    by the equivalent HTML code to be properly displayed on an HTML page. To do so,
    create the template with the `autoescape` parameter. Check the difference here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 处理HTML文件时，最好自动转义变量。这意味着具有特殊含义的字符，例如`<`字符，将被替换为等效的HTML代码，以便在HTML页面上正确显示。为此，使用`autoescape`参数创建模板。在这里检查差异：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Escaping can be applied on each variable with the `e` filter (meaning *escape*)
    and unapplied with the `safe` filter (meaning *it is safe to render as it is*).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对每个变量应用转义，使用`e`过滤器（表示*转义*），并使用`safe`过滤器取消应用（表示*可以安全地渲染*）。
- en: Jinja2 templates are extensible, meaning that you can create a `base_template.html`
    and then extend it, changing some of the elements. You can include other files
    as well, partitioning and separating different sections. See the full documentation
    for further details.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2模板是可扩展的，这意味着可以创建一个`base_template.html`，然后扩展它，更改一些元素。还可以包含其他文件，对不同部分进行分区和分离。有关更多详细信息，请参阅完整文档。
- en: Jinja2 is very powerful and allows us to create complex HTML templates, and
    also in other formats such as LaTeX or JavaScript, though this requires configuring.
    I encourage you to read the whole documentation and have a look at all its capabilities!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2非常强大，可以让我们创建复杂的HTML模板，还可以在其他格式（如LaTeX或JavaScript）中使用，尽管这需要配置。我鼓励您阅读整个文档，并查看其所有功能！
- en: The whole Jinja2 documentation can be found here: [http://jinja.pocoo.org/docs/2.10/.](http://jinja.pocoo.org/docs/2.10/)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的Jinja2文档可以在这里找到：[http://jinja.pocoo.org/docs/2.10/.](http://jinja.pocoo.org/docs/2.10/)
- en: See also
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a simple report in plain text* recipe
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在纯文本中创建简单报告*配方'
- en: The *Formatting text in Markdown* recipe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Markdown中格式化文本*配方'
- en: Formatting text in Markdown
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Markdown中格式化文本
- en: '**Markdown** is a very popular markup language used to create raw text that
    can be converted into styled HTML. It is a good way of structuring documents in
    a way that is readable in raw text format, while being able to properly style
    them in HTML.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**Markdown**是一种非常流行的标记语言，用于创建可以转换为样式化HTML的原始文本。这是一种良好的方式，可以以原始文本格式对文档进行结构化，同时能够在HTML中正确地对其进行样式设置。'
- en: In this recipe, we'll see how to transform a Markdown document into styled HTML
    using Python.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何使用Python将Markdown文档转换为样式化的HTML。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We should start by installing the `mistune` module, which will compile Markdown
    documents into HTML:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该首先安装`mistune`模块，它将Markdown文档编译为HTML：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the GitHub repository, there is a template file called `markdown_template.md` with
    a template of the report to generate.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub存储库中，有一个名为`markdown_template.md`的模板文件，其中包含要生成的报告的模板。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Import `mistune` and `datetime`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`mistune`和`datetime`：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Read the template from the file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件中读取模板：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Set up the context of the data to be included in the report:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置要包含在报告中的数据的上下文：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As movies need to be displayed as bullet points, we transform the list into
    a suitable Markdown bullet list. Also, we store the number of movies:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于电影需要显示为项目符号，我们将列表转换为适当的Markdown项目符号列表。同时，我们存储了电影的数量：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Render the template and compile the resulting Markdown into HTML:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染模板并将生成的Markdown编译为HTML：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, store the resulting report in the `report.html` file:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将生成的报告存储在`report.html`文件中：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the `report.html` file in a browser to check the result:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`report.html`文件以检查结果：
- en: '![](assets/3d49c70a-b883-4122-a5ac-36db8f95bfd7.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d49c70a-b883-4122-a5ac-36db8f95bfd7.png)'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Steps 2 and 3 in the *How do it…* section prepare the template and the data
    to be displayed. In Step 4, extra information is produced—the number of movies,
    which is derivative from the `movies` element. The `movies` element is then transformed
    into a valid Markdown element from a Python list. Note the new lines and the initial
    `*`, which will be rendered as a bullet point:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*如何做...*部分的第2步和第3步准备模板和要显示的数据。在第4步中，产生了额外的信息——电影的数量，这是从`movies`元素派生出来的。然后，将`movies`元素从Python列表转换为有效的Markdown元素。注意新行和初始的`*`，它将被呈现为一个项目符号：'
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In Step 5, the template is generated in Markdown format. The format is very
    readable in this raw form, which is the strong point of Markdown:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5步中，模板以Markdown格式生成。这种原始形式非常易读，这是Markdown的优点：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Then, using `mistune`, the report is transformed into HTML and stored in a file
    in Step 6.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`mistune`，报告被转换为HTML并在第6步中存储在文件中。
- en: There's more...
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Learning Markdown is extremely useful, as it is supported by many common web
    pages as a way of enabling text input that is easy and can render to a styled
    format. Some examples are GitHub, Stack Overflow, and most blogging platforms.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 学习Markdown非常有用，因为它被许多常见的网页支持，可以作为一种启用文本输入并能够呈现为样式化格式的方式。一些例子是GitHub，Stack Overflow和大多数博客平台。
- en: There is actually more than one kind of Markdown. This is because the official
    definition was limited or ambiguous, and there was no interest in clarifying or
    standardizing it. This led to several implementations that are sightly different,
    such as GitHub Flavoured Markdown, MultiMarkdown, and CommonMark.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Markdown不止一种。这是因为官方定义有限或模糊，并且没有兴趣澄清或标准化它。这导致了几种略有不同的实现，如GitHub Flavoured
    Markdown，MultiMarkdown和CommonMark。
- en: The text in Markdown is quite readable, but in case you need to interactively
    see how it will look, you can use the Dillinger online editor at [https://dillinger.io/](https://dillinger.io/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown中的文本非常易读，但如果您需要交互式地查看它的外观，可以使用Dillinger在线编辑器在[https://dillinger.io/](https://dillinger.io/)上使用。
- en: '`Mistune` full docs are available here: [http://mistune.readthedocs.io/en/latest/.](http://mistune.readthedocs.io/en/latest/)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mistune`的完整文档在这里可用：[http://mistune.readthedocs.io/en/latest/.](http://mistune.readthedocs.io/en/latest/)'
- en: The full Markdown syntax can be found at [https://daringfireball.net/projects/markdown/syntax](https://daringfireball.net/projects/markdown/syntax),
    and a good cheat sheet with the most-used elements at [https://beegit.com/markdown-cheat-sheet.](https://beegit.com/markdown-cheat-sheet)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的Markdown语法可以在[https://daringfireball.net/projects/markdown/syntax](https://daringfireball.net/projects/markdown/syntax)找到，并且有一个包含最常用元素的好的速查表在[https://beegit.com/markdown-cheat-sheet.](https://beegit.com/markdown-cheat-sheet)上。
- en: See also
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a simple report in pain text* recipe
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在疼痛文本中创建简单报告*食谱'
- en: The *Using templates for reports* recipe
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用报告模板*食谱'
- en: Writing a basic Word document
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 撰写基本Word文档
- en: Microsoft Office is one of the most common pieces of software, and MS Word in
    particular is almost a de facto standard for documents. Generating `docx` documents
    is possible with an automated script, which will help distribute reports in a
    format that's easily readable in many business.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Office是最常见的软件之一，尤其是MS Word几乎成为了文档的事实标准。使用自动化脚本可以生成`docx`文档，这将有助于以一种易于阅读的格式分发报告。
- en: In this recipe, we will learn how to generate a full Word document.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何生成一个完整的Word文档。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the `python-docx` module to process Word documents:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`python-docx`模块处理Word文档：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Import `python-docx` and `datetime`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`python-docx`和`datetime`：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Define the `context` with the data to be stored in the report:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要存储在报告中的数据的`context`：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a new `docx` document, and include a heading, `Movies Report`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`docx`文档，并包括一个标题，`电影报告`：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a paragraph describing the date, with the date in italics:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个描述日期的段落，并在其中使用斜体显示日期：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add information about the number of movies seen in a different paragraph:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加有关已观看电影数量的信息到不同的段落中：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add each of the movies as a bullet point:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每部电影添加为一个项目符号：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the total minutes and save the file as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加总分钟数并将文件保存如下：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open the `word-report.docx` file to check it:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`word-report.docx`文件进行检查：
- en: '![](assets/c0e40215-1fb8-45e6-82a6-dadd4fbe344d.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c0e40215-1fb8-45e6-82a6-dadd4fbe344d.png)'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The basics of a Word document is that it is divided in to paragraphs, and each
    of the paragraphs is divided in to runs. A run is a part of a paragraph that shares
    the same style.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Word文档的基础是它被分成段落，每个段落又被分成运行。运行是一个段落的一部分，它共享相同的样式。
- en: Steps 1 and 2 in the *How to do it…* section are preparation for importing and
    defining the data that's going to be stored in the report.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*如何做...*部分的第1步和第2步是导入和定义要存储在报告中的数据的准备工作。'
- en: In Step 3, the document is created and a heading with the proper title is added.
    This automatically styles the text.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步中，创建了文档并添加了一个具有适当标题的标题。这会自动为文本设置样式。
- en: Dealing with paragraphs is introduced in Step 4\. A new paragraph is created
    based on the introduced text with the default style, but new runs can be added
    to change it. Here, we added the first run with the text `Date:`, and then another
    run is added with the specific time and labelled as *italic*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 处理段落是在第4步中介绍的。基于引入的文本创建了一个新段落，默认样式，但可以添加新的运行来更改它。在这里，我们添加了第一个带有文本“日期：”的运行，然后添加了另一个带有特定时间并标记为*斜体*的运行。
- en: In Steps 5 and 6, we see information about the movies. The first part stores
    the number of movies, in a similar way to Step 4\. After that, the movies are
    added to the report one by one, and the style is set up like bullet points.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5步和第6步中，我们看到了有关电影的信息。第一部分以与第4步类似的方式存储了电影的数量。之后，电影逐个添加到报告中，并设置为项目符号的样式。
- en: Finally, Step 7 stores the total run time of all movies, in a similar way to
    Step 4, and stores the document in a file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第7步以与第4步类似的方式存储了所有电影的总运行时间，并将文档存储在文件中。
- en: There's more...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you need to introduce extra lines in the document for formatting purposes,
    add empty paragraphs.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要在文档中引入额外的行以进行格式设置，请添加空段落。
- en: Due to the way that the MS Word format works, there's no easy way of determining
    how many pages is going to have. You may need to run some tests on sizes, especially
    if you're generating the text to store dynamically.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 由于MS Word格式的工作方式，很难确定将有多少页。您可能需要对大小进行一些测试，特别是如果您正在动态生成文本。
- en: Even if you generate `docx` files, having MS Office is not necessary. There
    are other applications that can open and deal with these files, including free
    alternatives such as LibreOffice.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 即使生成了`docx`文件，也不需要安装MS Office。还有其他应用程序可以打开和处理这些文件，包括免费的替代品，如LibreOffice。
- en: 'The whole `python-docx` documentation is available here: [https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`python-docx`文档可以在这里找到：[https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
- en: See also
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Styling a Word document* recipe
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为Word文档设置样式*的方法'
- en: The *Generating structure in Word documents* recipe
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Word文档中生成结构*的方法'
- en: Styling a Word document
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Word文档设置样式
- en: A Word document can be very plain, but we can also add styling to help properly
    understand the displayed data. Word has a set of predefined styles that can be
    used to variate the document and highlight the important parts of it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Word文档可能非常简单，但我们也可以添加样式以帮助正确理解显示的数据。Word具有一组预定义的样式，可用于变化文档并突出显示其中的重要部分。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the `python-docx` module to process Word documents:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`python-docx`模块处理Word文档：
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Import the `python-docx` module:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`python-docx`模块：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a new document:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文档：
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add a paragraph that highlights some words in different ways, *Italics*, **bold,**
    and underline:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个突出显示某些单词的段落，*斜体*，**粗体**和下划线：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create some paragraphs, styling them with default styles, such as `List Bullet`,
    `List Number`,  or `Quote`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一些段落，使用默认样式进行样式设置，如`List Bullet`、`List Number`或`Quote`：
- en: '[PRE35]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a paragraph in a different font and size. We''ll use `Arial` font and
    a point size of `25`. The paragraph will be aligned to the right:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个不同字体和大小的段落。我们将使用`Arial`字体和`25`号字体大小。段落将右对齐：
- en: '[PRE36]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Save the document:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文档：
- en: '[PRE37]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open the `word-report-style.docx` document to verify its content:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`word-report-style.docx`文档以验证其内容：
- en: '![](assets/eaaee1e8-82db-4952-bab9-1173dac10bdb.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eaaee1e8-82db-4952-bab9-1173dac10bdb.png)'
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After creating the document in Step 1, Step 2 from the *How to do it…* section
    adds a paragraph that has several runs. In Word, a paragraph can contain multiple
    runs, which are parts that can have different styles. In general, any format change
    related to individual words will be applied to a run, while a change that affects
    paragraphs will be applied to the paragraph.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步创建文档后，*如何操作...*部分的第2步添加了一个具有多个运行的段落。在Word中，一个段落可以包含多个运行，这些运行是可以具有不同样式的部分。一般来说，任何与单词相关的格式更改都将应用于运行，而影响段落的更改将应用于段落。
- en: Each of the runs are created, by default, with the `Normal` style. Any attribute
    of `.bold`, `.italic`, or `.underline` can be changed to `True` to set up if the
    run should be in a proper style or a combination. A value of `False` will deactivate
    it, while a `None` value will leave it as the default.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每个运行都使用`Normal`样式创建。任何`.bold`、`.italic`或`.underline`的属性都可以更改为`True`，以设置运行是否应以适当的样式或组合显示。值为`False`将停用它，而`None`值将保留为默认值。
- en: Note that the proper word in this protocol is *italic*, and not *italics*. Setting
    the property to italics won't have any effect, but won't display an error either.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此协议中的正确单词是*italic*，而不是*italics*。将属性设置为italics不会产生任何效果，但也不会显示错误。
- en: Step 4 shows how to apply some of the default styles for paragraphs, in this
    case to show bullet points, numbered lists, and quotes. There are more styles,
    and they can be checked in this page of the documentation: [https://python-docx.readthedocs.io/en/latest/user/styles-understanding.html?highlight=List%20Bullet#paragraph-styles-in-default-template](https://python-docx.readthedocs.io/en/latest/user/styles-understanding.html?highlight=List%20Bullet#paragraph-styles-in-default-template).
    Try to find out which ones work best for your document.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步显示了如何应用一些默认样式以显示项目符号、编号列表和引用。还有更多样式，可以在文档的此页面中进行检查：[https://python-docx.readthedocs.io/en/latest/user/styles-understanding.html?highlight=List%20Bullet#paragraph-styles-in-default-template](https://python-docx.readthedocs.io/en/latest/user/styles-understanding.html?highlight=List%20Bullet#paragraph-styles-in-default-template)。尝试找出哪些样式最适合您的文档。
- en: The `.font` property of a run is shown in Step 5\. This allows you to manually
    set up a specific font and size. Note that the size needs to be specified using
    the proper `Pt` (points) object.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 运行的`.font`属性显示在第5步中。这允许您手动设置特定的字体和大小。请注意，需要使用适当的`Pt`（点）对象来指定大小。
- en: The alignment of the paragraph is set up in the `paragraph` object, and uses
    a constant to define whether it is left, right, center, or justified. All alignment
    options can be found here: [https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html.](https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 段落的对齐是在`paragraph`对象中设置的，并使用常量来定义它是左对齐、右对齐、居中还是两端对齐。所有对齐选项都可以在这里找到：[https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html.](https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html)
- en: Finally, step 7 saves the file so it's stored in the file system.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第7步保存文件，使其存储在文件系统中。
- en: There's more...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `font` attribute can also be used to set up more properties of the text,
    such as small caps, shadow, emboss, or strikethrough. The whole range of possibilities
    is shown here: [https://python-docx.readthedocs.io/en/latest/api/text.html#docx.text.run.Font.](https://python-docx.readthedocs.io/en/latest/api/text.html#docx.text.run.Font)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`font`属性也可以用来设置文本的更多属性，比如小型大写字母、阴影、浮雕或删除线。所有可能性的范围都在这里显示：[https://python-docx.readthedocs.io/en/latest/api/text.html#docx.text.run.Font.](https://python-docx.readthedocs.io/en/latest/api/text.html#docx.text.run.Font)'
- en: 'Another available option is to change the color of the text. Note the run can
    be any of the previously generated runs:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可用的选项是更改文本的颜色。注意，运行可以是先前生成的运行之一：
- en: '[PRE38]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The color can be described in the usual hex format from a string. Try to define
    all the colors to use to ensure they are all consistent, and limit yourself to
    a maximum of three colors in a report to not overcharge it.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色可以用字符串的常规十六进制格式描述。尝试定义要使用的所有颜色，以确保它们都是一致的，并且在报告中最多使用三种颜色，以免过多。
- en: 'You can use an online color picker, such as this one: [https://www.w3schools.com/colors/colors_picker.asp](https://www.w3schools.com/colors/colors_picker.asp).
    Remember to not use the # at the beginning. If you need to generate a palette,
    it''s a good idea to use tools such as [https://coolors.co/](https://coolors.co/) to
    generate good combinations.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用在线颜色选择器，比如这个：[https://www.w3schools.com/colors/colors_picker.asp](https://www.w3schools.com/colors/colors_picker.asp)。记住不要在开头使用#。如果需要生成调色板，最好使用工具，比如[https://coolors.co/](https://coolors.co/)来生成好的组合。
- en: The whole `python-docx` documentation is available here: [https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`python-docx`文档在这里可用：[https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
- en: See also
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Writing a basic Word document* recipe
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写基本的Word文档*配方'
- en: The *Generating structure in Word documents* recipe
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Word文档中生成结构*配方'
- en: Generating structure in Word documents
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Word文档中生成结构
- en: To create proper professional reports, they need to have the proper structure.
    An MS Word document doesn't have the concept of *a page*, as it works in paragraphs,
    but we can introduce breaks and sections to properly divide a document.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建适当的专业报告，它们需要有适当的结构。MS Word文档没有“页面”的概念，因为它是按段落工作的，但我们可以引入分页和部分来正确地划分文档。
- en: We'll see in this recipe how to create a structured Word document.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将看到如何创建结构化的Word文档。
- en: Getting ready
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the `python-docx` module to process Word documents:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`python-docx`模块来处理Word文档：
- en: '[PRE39]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import the `python-docx` module:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`python-docx`模块：
- en: '[PRE40]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a new document:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文档：
- en: '[PRE41]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a paragraph that has a line break:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个有换行的段落：
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a page break and write a paragraph:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个分页并写一个段落：
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a new section, which will be on landscape pages:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的部分，将位于横向页面上：
- en: '[PRE44]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create another section, reverting to portrait orientation:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个部分，恢复为纵向方向：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Save the document:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文档：
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Check the result by opening the document and checking the resulting sections:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果，打开文档并检查生成的部分：
- en: '![](assets/1f465fba-8e0c-4ddf-be88-cf9313d3907d.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1f465fba-8e0c-4ddf-be88-cf9313d3907d.png)'
- en: 'Check the new page:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 检查新页面：
- en: '![](assets/ef161196-263d-4e4e-9345-b69e423633c5.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef161196-263d-4e4e-9345-b69e423633c5.png)'
- en: 'Check for a landscape section:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 检查横向部分：
- en: '![](assets/b1dcaa09-74bf-4b6d-9f0d-389d64df1542.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1dcaa09-74bf-4b6d-9f0d-389d64df1542.png)'
- en: 'Then, go back to portrait orientation:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，返回到纵向方向：
- en: '![](assets/7cc9f9f9-18ac-4b18-a61d-decef04d16df.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7cc9f9f9-18ac-4b18-a61d-decef04d16df.png)'
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After creating the document in Step 2 in the *How to do it…* section, we add
    a paragraph for the first section. Notice that the document starts with a section.
    The paragraph introduces a line break in the middle of the paragraph.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做...*部分的第2步中创建文档后，我们为第一部分添加了一个段落。请注意，文档以一个部分开始。段落在段落中间引入了一个换行。
- en: There is a small difference between a line break in a paragraph and a new paragraph,
    though for most uses it is quite similar. Try to experiment with them.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 段落中的换行和新段落之间有一点差异，尽管对于大多数用途来说它们是相似的。尝试对它们进行实验。
- en: A page break is introduced in Step 3, without changing the section.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 第3步引入了分页符，但未更改部分。
- en: Step 4 creates a new section on a new page. Step 5 also changes the orientation
    of the page to landscape. In Step 6, a new section is introduced and the orientation
    reverts to portrait.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步在新页面上创建一个新的部分。第5步还将页面方向更改为横向。在第6步，引入了一个新的部分，并且方向恢复为纵向。
- en: Note that when changing the orientation, we also need to swap the width and
    height. Each new section inherits the properties from the previous one, so this
    swapping needs to happen in Step 6 as well.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当更改方向时，我们还需要交换宽度和高度。每个新部分都继承自上一个部分的属性，因此这种交换也需要在第6步中发生。
- en: Finally, the document is saved in Step 6.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第6步保存文档。
- en: There's more...
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'A section mandates page composition, including the orientation and size of
    the page. The size of the page can be changed using the length options, such as
    `Inches` or `Cm`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一个部分规定了页面构成，包括页面的方向和大小。可以使用长度选项（如`Inches`或`Cm`）来更改页面的大小：
- en: '[PRE47]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The page margins can also be defined in the same way:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 页面边距也可以用同样的方式定义：
- en: '[PRE48]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Sections can also be forced to start not only on the next page, but on the
    next odd page, which will look better when printing on two sides:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以强制节在下一页开始，而不仅仅是在下一页开始，这在双面打印时看起来更好：
- en: '[PRE49]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The whole `python-docx` documentation is available here: [https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`python-docx`文档在这里可用：[https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
- en: See also
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Writing a basic Word document* recipe
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写基本Word文档*配方'
- en: The *Styling a Word document* recipe
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对Word文档进行样式设置*配方'
- en: Adding pictures to Word documents
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Word文档添加图片
- en: Word documents are capable of adding images to show graphs or any other kind
    of extra information. Being able to add an image is a great way of creating rich
    reports.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Word文档能够添加图像以显示图表或任何其他类型的额外信息。能够添加图像是创建丰富报告的好方法。
- en: We'll see in this recipe how to include an existing file in a Word document.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何在Word文档中包含现有文件。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the `python-docx` module to process Word documents:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`python-docx`模块来处理Word文档：
- en: '[PRE50]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We need to prepare an image to include in the document. We''ll use the file in
    GitHub at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter04/images/photo-dublin-a1.jpg](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter04/images/photo-dublin-a1.jpg),
    which shows a view of Dublin. You can download it on the command line, like this:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要准备一个要包含在文档中的图像。我们将使用GitHub上的文件[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter04/images/photo-dublin-a1.jpg](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter04/images/photo-dublin-a1.jpg)，显示了都柏林的景色。您可以通过命令行下载它，就像这样：
- en: '[PRE51]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How to do it...
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import the `python-docx` module:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`python-docx`模块：
- en: '[PRE52]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create a new document:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文档：
- en: '[PRE53]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Create a paragraph with some text:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有一些文本的段落：
- en: '[PRE54]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add the image:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加图像：
- en: '[PRE55]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Scale the image properly to fit on the page (*14 x 10*):'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 适当地缩放图像以适合页面（*14 x 10*）：
- en: '[PRE56]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The image has been added to a new paragraph. Align it to the center and add
    descriptive text:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像已添加到新段落。将其居中并添加描述性文本：
- en: '[PRE57]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Add a new paragraph with extra text, and save the document:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有额外文本的新段落，并保存文档：
- en: '[PRE58]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Check the result:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果：
- en: '![](assets/b2f48705-8e71-4bf7-b683-1c79f1420510.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b2f48705-8e71-4bf7-b683-1c79f1420510.png)'
- en: How it works...
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first few steps (Step 1 to Step 3 in the *How to do it…* section) create
    the document and add some text.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 前几个步骤（*如何做...*部分的第1步到第3步）创建文档并添加一些文本。
- en: Step 4 adds the image from the file, and Step 5 resizes it into a manageable
    size. By default, the image is too big.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步从文件中添加图像，第5步将其调整为可管理的大小。默认情况下，图像太大了。
- en: Keep in mind the proportion of the image when resizing. Note that you can also
    use other measures such as `Inch`, defined in `shared` as well.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 调整图像大小时请注意图像的比例。请注意，您还可以使用其他度量单位，如`Inch`，也在`shared`中定义。
- en: Inserting the image creates a new paragraph as well, so the paragraph can be
    styled to align the image or to add more text, such as a reference or description.
    The paragraph is obtained in Step 6 through the `document.paragraph` property.
    The last paragraph is obtained and styled properly, aligning it to the center.
    A new line and a `run` with descriptive text are added.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 插入图像也会创建一个新段落，因此可以对段落进行样式设置，以使图像对齐或添加更多文本，例如参考或描述。通过`document.paragraph`属性在第6步获得段落。最后一个段落被获得并适当地样式化，使其居中。添加了一个新行和一个带有描述性文本的`run`。
- en: Step 7 adds extra text after the image and saves the document.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 第7步在图像后添加额外文本并保存文档。
- en: There's more...
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The size of the image can be changed, but as we saw before, the proportion of
    the image needs to be calculated if that changes. The resizing may end up not
    being perfect if done by approximation, as in Step 5 from the *How to do it…*
    section.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图像的大小可以更改，但是如前所述，如果更改了图像的比例，需要计算图像的比例。如果通过近似值进行调整，调整大小可能不会完美，就像*如何做...*部分的第5步一样。
- en: Notice that the image does not have a perfect ratio of 10:14\. It should instead
    be 10:13.33\. For an image, that may be good enough, but for data that is more
    sensitive to proportion changes, such as a chart, it may require extra care.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，图像的比例不是完美的10:14。它应该是10:13.33。对于图像来说，这可能足够好，但对于更敏感于比例变化的数据，如图表，可能需要额外的注意。
- en: 'To obtain the proper relation, divide the height by the width and then scale
    properly:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得适当的比例，将高度除以宽度，然后进行适当的缩放：
- en: '[PRE59]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'If you need to transform the values to a particular size, you can use the `cm`,
    `inches`, `mm`, or `pt` attributes:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要将值转换为特定大小，可以使用`cm`、`inches`、`mm`或`pt`属性：
- en: '[PRE60]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The whole `python-docx` documentation is available here: [https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`python-docx`文档在这里可用：[https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
- en: See also
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Writing a basic Word document* recipe
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写基本Word文档*配方'
- en: The *Styling a Word document* recipe
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对Word文档进行样式设置*配方'
- en: The *Generating structure in Word documents* recipe
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Word文档中生成结构*配方'
- en: Writing a simple PDF document
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写简单的PDF文档
- en: PDF files are a common way of sharing reports. The main characteristic of PDF
    documents is that they define exactly how the document is going to look, and they
    are read-only after being produced, which makes them very straightforward to share.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文件是共享报告的常用方式。PDF文档的主要特点是它们确切地定义了文档的外观，并且在生成后是只读的，这使得它们非常容易共享。
- en: In this recipe, we'll see how to write a simple PDF report using Python.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何使用Python编写一个简单的PDF报告。
- en: Getting ready
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the `fpdf` module to create PDF documents:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`fpdf`模块来创建PDF文档：
- en: '[PRE61]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: How to do it...
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import the `fpdf` module:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`fpdf`模块：
- en: '[PRE62]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Create a document:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文档：
- en: '[PRE63]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Define the font and color for a title, and add the first page:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为标题定义字体和颜色，并添加第一页：
- en: '[PRE64]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Write the title of the document:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写文档的标题：
- en: '[PRE65]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Write a long paragraph:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写一个长段落：
- en: '[PRE66]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Write another long paragraph:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写另一个长段落：
- en: '[PRE67]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Save the document:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文档：
- en: '[PRE68]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Check the `report.pdf` document:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`report.pdf`文档：
- en: '![](assets/9eb543d1-256a-4293-ae39-8b7cbacaa201.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9eb543d1-256a-4293-ae39-8b7cbacaa201.png)'
- en: How it works...
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `fpdf` module creates a PDF document and allows us to write in it.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`fpdf`模块创建PDF文档并允许我们在其中写入。'
- en: Due to the peculiarities of a PDF, the best way to think about it is to imagine
    a cursor writing in the document and moving to the next position, similar to a
    typewriter.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PDF的特殊性，最好的思考方式是想象一个光标在文档中写字并移动到下一个位置，类似于打字机。
- en: The first operations are to specify the font and size to use, and then add the
    first page. This is done in Step 3\. The first font is in bold (second argument, `'B'`)
    and in a bigger font than the rest of the document to serve as a title. The color
    is also set up with `.set_text_color`, in RGB components.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的操作是指定要使用的字体和大小，然后添加第一页。这是在步骤3中完成的。第一个字体是粗体（第二个参数为`'B'`），比文档的其余部分大，用作标题。颜色也使用`.set_text_color`设置为RGB组件。
- en: The text can also be styled in italics with `I` and underlined with `U`. You
    can combine them, so `BI` will produce text in bold and italic.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 文本也可以使用`I`斜体和`U`下划线。您可以将它们组合，因此`BI`将产生粗体和斜体的文本。
- en: The `.cell` call creates a box of text with the specified text. The first couple
    of parameters are the width and height. Width `0` uses the whole space up to the
    right margin. Height `5` (mm) is adequate for a size `12` font. The call to `.ln`
    introduces a new line.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`.cell`调用创建具有指定文本的文本框。前面的几个参数是宽度和高度。宽度`0`使用整个空间直到右边距。高度`5`（mm）适用于大小`12`字体。对`.ln`的调用引入了一个新行。'
- en: To write a multiline paragraph, we use the `.multi_cell` method. Its parameters
    are the same as `.cell`. Two paragraphs are written in Steps 5 and 6\. Notice
    the change in font before, to distinguish the title from the body of the report.
    The `.set_text_color` is called with a single argument to set up the color in
    grayscale. In this case, it is in black.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 要写多行段落，我们使用`.multi_cell`方法。它的参数与`.cell`相同。在步骤5和6中写入两个段落。请注意在报告的标题和正文之间的字体变化。`.set_text_color`使用单个参数调用以设置灰度颜色。在这种情况下，它是黑色。
- en: Using `.cell` for long text will make it go over the margin and off the page.
    Use it only for text that will fit in a single line. You can find the size of
    a string with `.get_string_width`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 对于长文本使用`.cell`会超出边距并超出页面。仅用于适合单行的文本。您可以使用`.get_string_width`找到字符串的大小。
- en: The document is saved to disk in Step 7.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤7中将文档保存到磁盘。
- en: There's more...
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Pages are added automatically is a `multi_cell` operation occupies all space
    available in a page. Calling `.add_page` will move to a new page.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`multi_cell`操作占据页面上的所有可用空间，则页面将自动添加。调用`.add_page`将移动到新页面。
- en: You can use any of the default fonts (`Courier`, `Helvetica`, and  `Times`),
    or add an extra font using `.add_font`. Check the documentation for more details: [http://pyfpdf.readthedocs.io/en/latest/reference/add_font/index.html.](http://pyfpdf.readthedocs.io/en/latest/reference/add_font/index.html)
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何默认字体（`Courier`、`Helvetica`和`Times`），或使用`.add_font`添加额外的字体。查看更多详细信息，请参阅文档：[http://pyfpdf.readthedocs.io/en/latest/reference/add_font/index.html.](http://pyfpdf.readthedocs.io/en/latest/reference/add_font/index.html)
- en: The fonts `Symbol` and `ZapfDingbats` are also available, but are to be used
    with symbols. This could be useful if you need some extra symbols, but test before
    using them. The rest of the default fonts should include your necessities for
    serif, sans serif, and fixed-width cases. In PDFs, fonts used will be embedded
    in the document, so they'll be displayed properly.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 字体`Symbol`和`ZapfDingbats`也可用，但用于符号。如果您需要一些额外的符号，这可能很有用，但在使用之前进行测试。其余默认字体应包括您对衬线、无衬线和等宽情况的需求。在PDF中，使用的字体将嵌入文档中，因此它们将正确显示。
- en: 'Keep the height consistent through out the document, at least between text
    of the same size. Define a constant you''re comfortable with, and use it through
    out the text:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 保持整个文档中的高度一致，至少在相同大小的文本之间。定义一个您满意的常数，并在整个文本中使用它：
- en: '[PRE69]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'By default, the text will be justified, but that can be changed. Use the align
    argument with `J` (justified), `C` (center), `R` (right), or `L` (left). For example,
    this produces text aligned to the left:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，文本将被调整对齐，但可以更改。使用`J`（调整对齐）、`C`（居中）、`R`（右对齐）或`L`（左对齐）的对齐参数。例如，这将产生左对齐的文本：
- en: '[PRE70]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The full FPDF documentation can be found here: [http://pyfpdf.readthedocs.io/en/latest/index.html.](http://pyfpdf.readthedocs.io/en/latest/index.html)
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的FPDF文档可以在这里找到：[http://pyfpdf.readthedocs.io/en/latest/index.html.](http://pyfpdf.readthedocs.io/en/latest/index.html)
- en: See also
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Structuring a PDF*'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建PDF*'
- en: '*Aggregating PDF reports*'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*汇总PDF报告*'
- en: '*Watermarking and encrypting a PDF*'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*给PDF加水印和加密*'
- en: Structuring a PDF
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建PDF
- en: Some elements can be automatically generated when creating a PDF to add a better
    look and structure to your elements. In this recipe, we'll see how to add a header
    and footer, and how to create links to other elements.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建PDF时，某些元素可以自动生成，以使您的元素看起来更好并具有更好的结构。在本教程中，我们将看到如何添加页眉和页脚，以及如何创建到其他元素的链接。
- en: Getting ready
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the `fpdf` module to create PDF documents:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`fpdf`模块创建PDF文档：
- en: '[PRE71]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: How to do it...
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'The `structuring_pdf.py` script is available in GitHub here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py).
    The most relevant bits are displayed here:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`structuring_pdf.py`脚本在GitHub上可用：[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py)。最相关的部分显示如下：'
- en: '[PRE72]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Run the script, and it will generate the `report.pdf` file, which contains
    some chapters and a table of contents. Note that it generates some randomness,
    so the specific numbers will vary each time you run it:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本，它将生成`report.pdf`文件，其中包含一些章节和目录。请注意，它会生成一些随机性，因此每次运行时具体数字会有所变化。
- en: '[PRE74]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Check the result. Here is a sample:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果。这是一个示例：
- en: '![](assets/357ba66a-37c8-4d2a-b42b-6d0776f922b4.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/357ba66a-37c8-4d2a-b42b-6d0776f922b4.png)'
- en: 'Check the table of contents at the end:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在结尾处检查目录：
- en: '![](assets/90d02b08-e982-4280-ae69-f447e5c78a80.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/90d02b08-e982-4280-ae69-f447e5c78a80.png)'
- en: How it works...
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Let's take a look at each of the elements of the script.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看脚本的每个元素。
- en: '`StructuredPDF` defines a class that inherits from `FPDF`. This is useful to
    overwrite the `footer` method, which creates a footer each time a page is created.
    It also helps simplify the code in `main`.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`StructuredPDF`定义了一个从`FPDF`继承的类。这对于覆盖`footer`方法很有用，它在创建页面时每次创建一个页脚。它还有助于简化`main`中的代码。'
- en: The `main` function creates the document. It starts the document, and adds each
    of the chapters, collecting their link information. Finally, it calls the `toc`
    method to generate a table of contents using the link information.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`函数创建文档。它启动文档，并添加每个章节，收集它们的链接信息。最后，它调用`toc`方法使用链接信息生成目录。'
- en: The text to be stored is generated by multiplying the LOREM_IPSUM text, which
    is a placeholder.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 要存储的文本是通过乘以LOREM_IPSUM文本生成的，这是一个占位符。
- en: The `chapter` method first prints a title section, and then adds each of the
    paragraphs defined. It collects the page number on which the chapter starts and
    the link returned by the `title_text` method to return them.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`chapter`方法首先打印标题部分，然后添加每个定义的段落。它收集章节开始的页码和`title_text`方法返回的链接以返回它们。'
- en: 'The `title_text` method writes the text in bigger and bolder text. Then, it
    adds a line to separate the title from the body of the chapter. It generates and
    sets a `link` object pointing to the current page in the following lines:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`title_text`方法以更大、更粗的文本编写文本。然后，它添加一行来分隔标题和章节的正文。它生成并设置一个指向以下行中当前页面的`link`对象：'
- en: '[PRE75]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This link will be used in the table of contents to add a clickable element that
    points to this chapter.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接将用于目录，以添加指向本章的可点击元素。
- en: The `footer` method automatically adds a footer to each page. It sets a smaller
    font, and it adds text with the current page (obtained through `page_no`) and
    uses `{nb}` , which will be replaced with the total number of pages.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`footer`方法会自动向每个页面添加页脚。它设置一个较小的字体，并添加当前页面的文本（通过`page_no`获得），并使用`{nb}`，它将被替换为总页数。'
- en: The call to `alias_nb_pages` in `main` ensures `{nb}` is replaced when the document
    is generated.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`中调用`alias_nb_pages`确保在生成文档时替换`{nb}`。
- en: Finally, the table of contents is generated in the `toc` method. It writes the
    title and adds all the referenced links that have been collected as the link,
    page, and chapter name, which is all the info required.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`toc`方法中生成目录。它写入标题，并添加所有已收集的引用链接作为链接、页码和章节名称，这是所有所需的信息。
- en: There's more...
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Notice the use of `randint` to add a bit of randomness to the document. This
    call, available in Python's standard library, returns a number between the defined
    maximum and minimum. Both are included.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`randint`为文档添加一些随机性。这个调用在Python的标准库中可用，返回一个在定义的最大值和最小值之间的数字。两者都包括在内。
- en: The `get_full_line` method generates a properly sized line for the table of
    contents. It takes a start (the name of the chapter) and end (the page number),
    and adds the number of fill characters (dots) until the line has the proper width
    (120 mm).
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_full_line`方法为目录生成适当大小的行。它需要一个开始（章节的名称）和结束（页码），并添加填充字符（点）的数量，直到行具有适当的宽度（120毫米）。'
- en: To calculate the size of the text, the script calls `get_string_width`, which
    takes into account the font and the size.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算文本的大小，脚本调用`get_string_width`，它考虑了字体和大小。
- en: Link objects can be used to point to a specific page, instead of the current
    one, and also not to the start of the page; use `set_link(link, y=place, page=num_page)`.
    Check the documentation at [http://pyfpdf.readthedocs.io/en/latest/reference/set_link/index.html.](http://pyfpdf.readthedocs.io/en/latest/reference/set_link/index.html)
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 链接对象可用于指向特定页面，而不是当前页面，并且也不是页面的开头；使用`set_link(link, y=place, page=num_page)`。在[http://pyfpdf.readthedocs.io/en/latest/reference/set_link/index.html](http://pyfpdf.readthedocs.io/en/latest/reference/set_link/index.html)上查看文档。
- en: Adjusting some of the elements can take a certain degree of trial and error,
    for example, to position the line. A sightly longer or shorter line can be a matter
    of taste. Don't be afraid to experiment and check until it produces the desired
    effect.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 调整一些元素可能需要一定程度的试错，例如，调整线的位置。稍微长一点或短一点的线可能是品味的问题。不要害怕尝试和检查，直到产生期望的效果。
- en: The full FPDF documentation can be found here: [http://pyfpdf.readthedocs.io/en/latest/index.html.](http://pyfpdf.readthedocs.io/en/latest/index.html)
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的FPDF文档可以在这里找到：[http://pyfpdf.readthedocs.io/en/latest/index.html.](http://pyfpdf.readthedocs.io/en/latest/index.html)
- en: See also
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Writing a simple PDF document* recipe
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写简单的PDF文档*食谱'
- en: The *Aggregating PDF reports* recipe
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*聚合PDF报告*食谱'
- en: The *Watermarking and encrypting a PDF* recipe
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*给PDF加水印和加密*食谱'
- en: Aggregating PDF reports
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合PDF报告
- en: In this recipe, we'll see how to mix two PDFs into the same one. This will allow
    us to combine reports into a bigger one.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将看到如何将两个PDF合并成一个。这将允许我们将报告合并成一个更大的报告。
- en: Getting ready
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the `PyPDF2` module. `Pillow` and `pdf2image` are also dependencies
    used by the scripts:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`PyPDF2`模块。`Pillow`和`pdf2image`也是脚本使用的依赖项：
- en: '[PRE76]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'For `pdf2image` to properly work, it needs to install `pdftoppm`, so check
    here for instructions on how to install it for different platforms: [https://github.com/Belval/pdf2image#first-you-need-pdftoppm.](https://github.com/Belval/pdf2image#first-you-need-pdftoppm)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`pdf2image`正常工作，需要安装`pdftoppm`，因此请在此处查看如何在不同平台上安装它的说明：[https://github.com/Belval/pdf2image#first-you-need-pdftoppm.](https://github.com/Belval/pdf2image#first-you-need-pdftoppm)
- en: 'We need two PDFs to combine them. For this recipe, we''ll use two PDFs: a `report.pdf`
    file generated by the  `structuring_pdf.py` script, available in GitHub at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py),
    and another (`report2.pdf`) after watermarking it through the following command:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个PDF文件来合并它们。对于这个示例，我们将使用两个PDF文件：一个是`structuring_pdf.py`脚本生成的`report.pdf`文件，网址为[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py)，另一个是经过水印处理后的(`report2.pdf`)，命令如下：
- en: '[PRE77]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: This uses the watermarking script `watermarking_pdf.py`, available in GitHub
    at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 使用加水印脚本`watermarking_pdf.py`，在GitHub上可用，网址为[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py)。
- en: How to do it...
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Import `PyPDF2` and create the output PDF:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`PyPDF2`并创建输出PDF：
- en: '[PRE78]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Read the first file and create a reader:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取第一个文件并创建一个阅读器：
- en: '[PRE79]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Append all pages to the output PDF:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有页面附加到输出PDF：
- en: '[PRE80]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Open the second file, create a reader, and append the pages to the output PDF:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开第二个文件，创建一个阅读器，并将页面附加到输出PDF：
- en: '[PRE81]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Create the output file and save it:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建输出文件并保存：
- en: '[PRE82]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Close the open files:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭打开的文件：
- en: '[PRE83]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Check the output file and confirm that it contains both PDFs pages.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查输出文件，并确认它包含两个PDF页面。
- en: How it works...
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`PyPDF2` allows us to create a reader for each input file, and add all its
    pages to a newly created PDF writer. Note the files are opened in binary mode
    (`rb`).'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyPDF2`允许我们为每个输入文件创建一个阅读器，并将其所有页面添加到新创建的PDF写入器中。请注意，文件以二进制模式(`rb`)打开。'
- en: The input files need to remain open until the result is saved. This is due to
    the way the copy of the pages works. If the file is open, the resulting file can
    be stored as an empty file.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文件需要保持打开状态，直到保存结果。这是由于页面复制的方式。如果文件是打开的，则生成的文件可以存储为空文件。
- en: The PDF writer is finally saved into a new file. Notice that the file needs
    to be open to write in binary mode (`wb`).
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: PDF写入器最终保存到一个新文件中。请注意，文件需要以二进制模式(`wb`)打开以进行写入。
- en: There's more...
  id: totrans-400
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`.appendPagesFromReader` is very convenient for adding all pages, but it''s
    also possible to add a number of pages one by one with `.addPage`. For example,
    to add the third page, the code would look like this:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`.appendPagesFromReader`非常方便，可以添加所有页面，但也可以使用`.addPage`逐个添加页面。例如，要添加第三页，代码如下：'
- en: '[PRE84]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The full documentation for `PyPDF2` is here: [https://pythonhosted.org/PyPDF2/.](https://pythonhosted.org/PyPDF2/)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyPDF2`的完整文档在这里：[https://pythonhosted.org/PyPDF2/.](https://pythonhosted.org/PyPDF2/)'
- en: See also
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Writing a simple PDF document* recipe
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写简单的PDF文档*示例'
- en: The *Structuring a PDF* recipe
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*结构化PDF*示例'
- en: The *Watermarking and encrypting a PDF* recipe
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加水印和加密PDF*示例'
- en: Watermarking and encrypting a PDF
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加水印和加密PDF
- en: PDF files have some interesting security measures to limit the distribution
    of a document. We can encrypt the content, making it necessary to know a password
    in order to be able to read it. We'll see as well how to add a watermark to label
    the document clearly as not for public distribution and, if leaked, to know its
    origin.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文件有一些有趣的安全措施，限制了文档的分发。我们可以加密内容，使其必须知道密码才能阅读。我们还将看到如何添加水印，以清楚地标记文档为不适合公开分发，并且如果泄漏，可以知道其来源。
- en: Getting ready
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the `pdf2image` module to transform PDF documents to PIL images. `Pillow`
    is a prerequisite. We''ll also use `PyPDF2`:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`pdf2image`模块将PDF文档转换为PIL图像。`Pillow`是先决条件。我们还将使用`PyPDF2`：
- en: '[PRE85]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'For `pdf2image` to properly work, it needs to install `pdftoppm`, so check
    here for instructions on how to install it for different platforms: [https://github.com/Belval/pdf2image#first-you-need-pdftoppm.](https://github.com/Belval/pdf2image#first-you-need-pdftoppm)'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`pdf2image`正常工作，需要安装`pdftoppm`，因此请在此处查看如何在不同平台上安装它的说明：[https://github.com/Belval/pdf2image#first-you-need-pdftoppm.](https://github.com/Belval/pdf2image#first-you-need-pdftoppm)
- en: We also need a PDF file to watermark and encrypt. We'll use a `report.pdf` file
    generated by the `structuring_pdf.py` script, available in GitHub at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter5/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter5/structuring_pdf.py).
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个PDF文件来加水印和加密。我们将使用GitHub上的`structuring_pdf.py`脚本生成的`report.pdf`文件，网址为[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter5/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter5/structuring_pdf.py)。
- en: How to do it...
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The script, `watermarking_pdf.py`, is available in GitHub here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py).
    The most relevant bits are displayed here:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`watermarking_pdf.py`脚本在GitHub上可用，网址为[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py)。这里显示了最相关的部分：'
- en: '[PRE86]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Watermark the PDF file with the following command:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令给PDF文件加水印：
- en: '[PRE87]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Check that the document added a watermark with `automate_user` and a timestamp
    to all pages of `out.pdf`:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查文档是否添加了`automate_user`水印和时间戳到`out.pdf`的所有页面：
- en: '![](assets/62797425-1b6e-470f-b087-ec21197a66b1.png)'
  id: totrans-421
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62797425-1b6e-470f-b087-ec21197a66b1.png)'
- en: 'Watermark and encrypt with the following command. Note that encrypting may
    take a little while:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令加水印和加密。请注意，加密可能需要一些时间：
- en: '[PRE88]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Open the resulting `out.pdf`, and check that it requires you to input the `secretpassword`
    password. The timestamp will also be new.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开生成的`out.pdf`文件，并检查是否需要输入`secretpassword`密码。时间戳也将是新的。
- en: How it works...
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `watermarking_pdf.py` script first obtains the parameters from the command
    line using `argparse`, and then passes it to a `main` function that calls the
    other three functions, `create_watermark`, `apply_watermark` and, if a password
    is used, `encrypt`.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`watermarking_pdf.py`脚本首先使用`argparse`从命令行获取参数，然后将其传递给调用其他三个函数的`main`函数，`create_watermark`，`apply_watermark`和（如果使用密码）`encrypt`。'
- en: '`create_watermark` generates an image with the watermark. It uses the Pillow
    `Image` class to create a grey image (mode `L`) and draw the text. Then, this
    image gets applied as an alpha channel on a new image, making the image semi-transparent,
    so it will show the text to watermark.'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_watermark`生成带有水印的图像。它使用Pillow的`Image`类创建灰色图像（模式`L`）并绘制文本。然后，将此图像应用为新图像上的Alpha通道，使图像半透明，因此它将显示水印文本。'
- en: The alpha channel makes fully transparent anything in white (color 0) and fully
    opaque anything in black (color 255). In this case, the background is white and
    the color of the text is 55, making it semi-transparent.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha通道使白色（颜色0）完全透明，黑色（颜色255）完全不透明。在这种情况下，背景是白色，文本的颜色是55，使其半透明。
- en: The image is then rotated 45 degrees and cropped to reduce the transparent background
    that may have appeared. This centers the image and allows for better positioning.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将图像旋转45度并裁剪以减少可能出现的透明背景。这将使图像居中并允许更好的定位。
- en: In the next step, `apply_watermark` transforms the PDF into a sequence of PIL
    `Images` using the `pdf2image` module. It calculates the position to apply the
    watermark, and then pastes the watermark.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，`apply_watermark`使用`pdf2image`模块将PDF转换为PIL`Images`序列。它计算应用水印的位置，然后粘贴水印。
- en: The image needs to be located by its left-top corner. This is located in the
    half of the document, minus half of the watermark, in both height and width. Note
    that the script assumes that all the pages of the document are equal.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 图像需要通过其左上角定位。这位于文档的一半，减去水印的一半，高度和宽度都是如此。请注意，脚本假定文档的所有页面都是相等的。
- en: Finally, the result is saved to a PDF; notice the `save_all` parameter, which
    allows us to save a multipage PDF.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，结果保存为PDF；请注意`save_all`参数，它允许我们保存多页PDF。
- en: If a password is passed, the `encrypt` function is called. It opens the output
    PDF, using `PdfFileReader`, and creates a new intermediate PDF with `PdfFileWriter`.
    All the pages of the output PDF are added to the new PDF, the PDF is encrypted,
    and then the intermediate PDF is renamed as the output PDF using `os.rename`.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递了密码，则调用`encrypt`函数。它使用`PdfFileReader`打开输出PDF，并使用`PdfFileWriter`创建一个新的中间PDF。将输出PDF的所有页面添加到新PDF中，对PDF进行加密，然后使用`os.rename`将中间PDF重命名为输出PDF。
- en: There's more...
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As part of the watermarking, notice that the pages are transformed into images
    from text. This adds extra protection, as the text won't be extractable directly,
    as it is stored as an image. When protecting a file, this is a good idea, as it
    will stop copying/pasting directly.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 作为水印的一部分，请注意页面是从文本转换为图像的。这增加了额外的保护，因为文本不会直接可提取，因为它存储为图像。在保护文件时，这是一个好主意，因为它将阻止直接复制/粘贴。
- en: This is not a huge security measure, though, as the text may be extractable
    through OCR tools. But, it protects against casual extraction of the text.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个巨大的安全措施，因为文本可能可以通过OCR工具提取。但是，它可以防止对文本的轻松提取。
- en: 'The default font from PIL can be a little rough. Another font, if the `TrueType`
    or `OpenType` file is available, can be added and used by calling the following:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: PIL的默认字体可能有点粗糙。如果有`TrueType`或`OpenType`文件可用，可以通过调用以下内容添加并使用另一种字体：
- en: '[PRE89]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Note that this may require installing the `FreeType` libraries, normally available
    as part of the `libfreetype` package. Further documentation is available at [https://www.freetype.org/](https://www.freetype.org/).
    Depending on the font and size, you may need to adjust the sizes.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这可能需要安装`FreeType`库，通常作为`libfreetype`软件包的一部分提供。更多文档可在[https://www.freetype.org/](https://www.freetype.org/)找到。根据字体和大小，您可能需要调整大小。
- en: The full `pdf2image` documentation can be found at [https://github.com/Belval/pdf2image](https://github.com/Belval/pdf2image),
    the full documentation for `PyPDF2` at [https://pythonhosted.org/PyPDF2/](https://pythonhosted.org/PyPDF2/),
    and the full documentation for `Pillow` can be found at [https://pillow.readthedocs.io/en/5.2.x/.](https://pillow.readthedocs.io/en/5.2.x/)
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`pdf2image`文档可以在[https://github.com/Belval/pdf2image](https://github.com/Belval/pdf2image)找到，`PyPDF2`的完整文档在[https://pythonhosted.org/PyPDF2/](https://pythonhosted.org/PyPDF2/)，`Pillow`的完整文档可以在[https://pillow.readthedocs.io/en/5.2.x/.](https://pillow.readthedocs.io/en/5.2.x/)找到。
- en: See also
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Writing a simple PDF document* recipe
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写简单的PDF文档*配方'
- en: The *Structuring a PDF* recipe
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建PDF*配方'
- en: The *Aggregating PDF reports* recipe
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*聚合PDF报告*配方'
