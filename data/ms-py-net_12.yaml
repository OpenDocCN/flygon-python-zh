- en: Continuous Integration with Jenkins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jenkins进行持续集成
- en: The network touches every part of the technology stack; in all of the environments
    I have worked in, it is always a Tier-Zero service. It is a foundation service
    that other services rely on for their services to work. In the minds of other
    engineers, business managers, operators, and support staff, the network should
    just work. It should always be accessible and function correctly—a good network
    is a network that nobody hears about.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络触及技术堆栈的每个部分；在我工作过的所有环境中，它总是一个零级服务。它是其他服务依赖的基础服务。在其他工程师、业务经理、运营商和支持人员的心目中，网络应该只是工作。它应该始终可访问并且功能正常——一个好的网络是一个没有人听说过的网络。
- en: Of course, as network engineers, we know the network is as complex as any other
    technology stack. Due to its complexity, the constructs that make up a running
    network can be fragile at times. Sometimes, I look at a network and wonder how
    it can work at all, let alone how it's been running for months and years without
    business impacts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，作为网络工程师，我们知道网络和其他技术堆栈一样复杂。由于其复杂性，构成运行网络的构件有时可能很脆弱。有时，我看着一个网络，想知道它怎么可能工作，更不用说它是如何在数月甚至数年内运行而没有对业务产生影响的。
- en: Part of the reason we are interested in network automation is to find ways to
    repeat our network-change process reliably and consistently. By using Python scripts
    or the Ansible framework, we can make sure the change that we make will stay consistent
    and be reliably applied. As we saw in the last chapter, we can use Git and GitHub
    to store components of the process, such as templates, scripts, requirements,
    and files, reliably. The code that makes up the infrastructure is version-controlled,
    collaborated, and accountable for changes. But how do we tie all the pieces together?
    In this chapter, we will look at a popular open source tool that can optimize
    the network-management pipeline, called Jenkins.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对网络自动化感兴趣的部分原因是为了找到可靠和一致地重复我们的网络变更流程的方法。通过使用Python脚本或Ansible框架，我们可以确保所做的变更保持一致并可靠地应用。正如我们在上一章中看到的，我们可以使用Git和GitHub可靠地存储流程的组件，如模板、脚本、需求和文件。构成基础设施的代码是经过版本控制、协作和对变更负责的。但我们如何将所有这些部分联系在一起呢？在本章中，我们将介绍一个流行的开源工具，可以优化网络管理流程，名为Jenkins。
- en: Traditional change-management process
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统的变更管理流程
- en: For engineers who have worked in a large network environment, they know the
    impact of a network change gone wrong can be big. We can make hundreds of changes
    without any issues, but all it takes is one bad change that can cause the network
    to have a negative impact on the business.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在大型网络环境中工作过的工程师来说，他们知道网络变更出错的影响可能很大。我们可以进行数百次变更而没有任何问题，但只需要一个糟糕的变更就能导致网络对业务产生负面影响。
- en: There is no shortage of war stories about network outages causing business pain.
    One of the most visible and large-scale AWS EC2 outage in 2011 was caused by a
    network change that was part of our normal AWS scaling activities in the AWS US-East
    region. The change occurred at 00:47 PDT and caused a brown-out for various services
    for over 12 hours, losing millions of dollars for Amazon in the process. More
    importantly, the reputation of the relatively young service took a serious hit.
    IT decision makers will point to the outage as reasons to `NOT` migrate to AWS
    cloud. It took many years to rebuild its reputation. You can read more about the
    incident report at [https://aws.amazon.com/message/65648/](https://aws.amazon.com/message/65648/).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于网络故障导致业务痛苦的故事数不胜数。2011年最显著和大规模的AWS EC2故障是由于我们在AWS US-East地区的正常扩展活动中的网络变更引起的。变更发生在PDT时间00:47，并导致各种服务出现12小时以上的停机，给亚马逊造成了数百万美元的损失。更重要的是，这个相对年轻的服务的声誉受到了严重打击。IT决策者将这次故障作为“不要”迁移到AWS云的理由。花了多年时间才重建了其声誉。您可以在[https://aws.amazon.com/message/65648/](https://aws.amazon.com/message/65648/)阅读更多关于事故报告的信息。
- en: 'Due to its potential impact and complexity, in many environments, the **Change-Advisory
    Board (CAB)** is implemented for networks. The typical CAB process is as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其潜在影响和复杂性，在许多环境中，都实施了网络变更咨询委员会（CAB）。典型的CAB流程如下：
- en: The network engineer will design the change and write out the detail steps required
    of the change. This can include the reason for the change, the devices involved,
    the commands that will be applied or deleted, how to verify the output, and the
    expected outcome for each of the steps.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络工程师将设计变更并详细列出所需的步骤。这可能包括变更的原因、涉及的设备、将要应用或删除的命令、如何验证输出以及每个步骤的预期结果。
- en: The network engineer is typically required to ask for a technical review from
    a peer first. Depending on the nature of the change, there can be different levels
    of peer review. The simple changes can require a single peer technical review;
    the complex change might require a senior designated engineer for approval.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常要求网络工程师首先从同行那里获得技术审查。根据变更的性质，可能需要不同级别的同行审查。简单的变更可能需要单个同行技术审查；复杂的变更可能需要高级指定工程师批准。
- en: The CAB meeting is generally scheduled for set times with emergency ad-hoc meetings
    available.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CAB会议通常按照固定时间安排，也可以临时召开紧急会议。
- en: The engineer will present the change to the board. The board will ask the necessary
    questions, assess the impact, and either approve or deny the change request.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工程师将变更提交给委员会。委员会将提出必要的问题，评估影响，并批准或拒绝变更请求。
- en: The change will be carried out, either by the original engineer or another engineer,
    at the scheduled change window.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变更将在预定的变更窗口进行，由原始工程师或其他工程师执行。
- en: 'This process sounds reasonable and inclusive but proves to have a few challenges
    in practice:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程听起来合理和包容，但在实践中证明有一些挑战：
- en: '**Write-ups are time-consuming**: It typically takes a lot of time for the
    design engineer to write up the document, and sometimes the writing process takes
    longer than the time to apply the change. This is generally due to the fact that
    all network changes are potentially impactful and we need to document the process
    for both technical and non-technical CAB members.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**撰写文稿耗时**：设计工程师通常需要花费很多时间来撰写文档，有时写作过程所需时间比应用变更的时间还长。这通常是因为所有网络更改都可能产生影响，我们需要为技术和非技术CAB成员记录过程。'
- en: '**Engineer expertise**: There are different levels of engineering expertise,
    some are more experienced, and they are typically the most sought-after resources.
    We should reserve their time for tackling the most complex network issues, not
    reviewing basic network changes.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工程师专业知识**：有不同水平的工程专业知识，有些经验更丰富，他们通常是最受欢迎的资源。我们应该保留他们的时间来解决最复杂的网络问题，而不是审查基本的网络更改。'
- en: '**Meetings are time-consuming**: It takes a lot of effort to put together meetings
    and have each member show up. What happens if a required approval person is on
    vacation or sick? What if you need the network change to be made prior to the
    scheduled CAB time?'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会议耗时**：组织会议和让每个成员出席需要很多精力。如果需要批准的人员正在度假或生病会发生什么？如果您需要在预定的CAB时间之前进行网络更改呢？'
- en: These are just some of the bigger challenges of the human-based CAB process.
    Personally, I hate the CAB process with a passion. I do not dispute the need for
    peer review and prioritization; however, I think we need to minimize the potential
    overhead involved. Let's look at a potential pipeline that has been adopted in
    the software-engineering pipeline.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是基于人的CAB流程的一些更大的挑战。就我个人而言，我非常讨厌CAB流程。我不否认对同行审查和优先级排序的需求；但是，我认为我们需要尽量减少潜在的开销。让我们看看在软件工程流程中采用的潜在流程。
- en: Introduction to continuous integration
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成简介
- en: '**Continuous Integration (CI)** in software development is a way to publish
    small changes to the code base quickly, in the context of tests and validation
    built-in. The keys are to classify the changes to be CI-compatible, that is, not
    overly complex, and small enough to be applied that they can be backed out easily.
    The tests and validation process is built in an automated way to gain a baseline
    of confidence that it will be applied without breaking the whole system.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中的**持续集成（CI）**是一种快速发布对代码库的小更改的方式，同时进行测试和验证。关键是对可以进行CI兼容的更改进行分类，即不过于复杂，并且足够小，以便可以轻松撤销。测试和验证过程是以自动化方式构建的，以获得对其将被应用而不会破坏整个系统的信心基线。
- en: Before CI, changes to the software were often made in large batches and often
    required a long validation process. It can be months before developers see their
    changes in production, receive feedback loops, and correct any bugs. In short,
    the CI process aims to shorten the process from idea to change.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI之前，对软件的更改通常是以大批量进行的，并且通常需要一个漫长的验证过程。开发人员可能需要几个月才能看到他们的更改在生产中生效，获得反馈并纠正任何错误。简而言之，CI流程旨在缩短从想法到变更的过程。
- en: 'The general workflow typically involves the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一般的工作流程通常包括以下步骤：
- en: The first engineer takes a current copy of the code base and works on their
    change
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一位工程师获取代码库的当前副本并进行更改
- en: The first engineer submits the change to the repository
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一位工程师向仓库提交变更
- en: The repository can notify the necessary parties of a change in the repository
    to a group of engineers who can review the change. They can either approve or
    reject the change
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仓库可以通知需要的人员仓库的变化，以便一组工程师审查变化。他们可以批准或拒绝变更
- en: The continuous-integration system can continuously pull the repository for changes,
    or the repository can send a notification to the CI system when changes happen.
    Either way, the CI system will pull the latest version of the code
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续集成系统可以持续地从仓库中获取变更，或者当变更发生时，仓库可以向CI系统发送通知。无论哪种方式，CI系统都将获取代码的最新版本
- en: The CI system will run automated tests to try to catch any breakage
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI系统将运行自动化测试，以尝试捕捉任何故障
- en: If there is no fault found, the CI system can choose to merge the change into
    the main code and optionally deploy to the production system
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有发现故障，CI系统可以选择将更改合并到主代码中，并可选择部署到生产系统
- en: This is a generalized list of steps. The process can be different for each organization;
    for example, automated tests can be run as soon as the delta code is checked in
    instead of after code review. Sometimes, the organization might choose to have
    a human engineer involved for sanity checks in between the steps.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个概括的步骤列表。对于每个组织，流程可能会有所不同；例如，可以在提交增量代码后立即运行自动化测试，而不是在代码审查后运行。有时，组织可能选择在步骤之间进行人工工程师参与进行理智检查。
- en: In the next section, we will illustrate the instructions to install Jenkins
    on an Ubuntu 16.04 system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将说明在Ubuntu 16.04系统上安装Jenkins的说明。
- en: Installing Jenkins
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Jenkins
- en: For the examples we will use in this chapter, we can install Jenkins on the
    management host or a separate machine. My personal preference is to install it
    on a separate virtual machine. The virtual machine will have a similar network
    set up as the management host up to this point, with one interface for the internet
    connection and another interface for VMNet 2 connection to the VIRL management
    network.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们将使用的示例中，我们可以在管理主机或单独的机器上安装Jenkins。我个人偏好将其安装在单独的虚拟机上。到目前为止，虚拟机将具有与管理主机相似的网络设置，一个接口用于互联网连接，另一个接口用于VMNet
    2连接到VIRL管理网络。
- en: 'The Jenkins image and installation instruction per operating system can be
    found at [https://jenkins.io/download/](https://jenkins.io/download/). The following
    is the instructions I used for installing Jenkins on the Ubuntu 16.04 host:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins镜像和每个操作系统的安装说明可以在[https://jenkins.io/download/](https://jenkins.io/download/)找到。以下是我在Ubuntu
    16.04主机上安装Jenkins所使用的说明：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At the time of writing, we have to install Java separately because Jenkins does
    not work with Java 9; see [https://issues.jenkins-ci.org/browse/JENKINS-40689](https://issues.jenkins-ci.org/browse/JENKINS-40689) for
    more details. Hopefully, by the time you read this, the issue is resolved.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，我们必须单独安装Java，因为Jenkins不适用于Java 9；有关更多详细信息，请参阅[https://issues.jenkins-ci.org/browse/JENKINS-40689](https://issues.jenkins-ci.org/browse/JENKINS-40689)。希望在您阅读本文时，该问题已得到解决。
- en: 'Once Jenkins is installed, we can point the browser to the IP at port `8080`
    to continue the process:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins安装完成后，我们可以将浏览器指向端口`8080`的IP地址以继续该过程：
- en: '![](assets/d3769c61-58a4-44da-971f-7bc86ec69c20.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d3769c61-58a4-44da-971f-7bc86ec69c20.png)'
- en: Unlock Jenkins screen
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 解锁Jenkins屏幕
- en: 'As stated on the screen, get the admin password from `/var/lib/jenkins/secrets/initialAdminPassword` and
    paste the output in the screen. For the time being, we will choose the Install
    suggested plugins option:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如屏幕上所述，从`/var/lib/jenkins/secrets/initialAdminPassword`获取管理员密码，并将输出粘贴到屏幕上。暂时，我们将选择“安装建议的插件”选项：
- en: '![](assets/e2c7bdc2-7431-48ea-8b79-8388ba52f17a.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e2c7bdc2-7431-48ea-8b79-8388ba52f17a.png)'
- en: Install suggested plugins
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安装建议的插件
- en: 'You will be redirected to create the admin user; once created, Jenkins will
    be ready. If you see the Jenkins dashboard, the installation was successful:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建管理员用户后，Jenkins将准备就绪。如果您看到Jenkins仪表板，则安装成功：
- en: '![](assets/251e88e1-8c3e-466f-928e-509f710bd880.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/251e88e1-8c3e-466f-928e-509f710bd880.png)'
- en: Jenkins dashboard
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins仪表板
- en: We are now ready to use Jenkins to schedule our first job.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备使用Jenkins来安排我们的第一个作业。
- en: Jenkins example
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins示例
- en: In this section, we will take a look at a few Jenkins examples and how they
    tie into the various technologies we have covered in this book. The reason Jenkins
    is one of the last chapters of this book is because it will leverage many of the
    other tools, such as our Python script, Ansible, Git, and GitHub. Feel free to
    refer back to [Chapters 11](85c09606-4a40-46f3-82b8-0b20550fd64d.xhtml), *Working
    with Git*, if needed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一些Jenkins示例以及它们如何与本书中涵盖的各种技术联系在一起。Jenkins之所以是本书的最后一章，是因为它将利用许多其他工具，例如我们的Python脚本、Ansible、Git和GitHub。如有需要，请随时参阅[第11章](85c09606-4a40-46f3-82b8-0b20550fd64d.xhtml)，*使用Git*。
- en: In the examples, we will use the Jenkins master to execute our jobs. In production,
    it is recommended to add Jenkins nodes to handle the execution of jobs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们将使用Jenkins主服务器来执行我们的作业。在生产中，建议添加Jenkins节点来处理作业的执行。
- en: 'For our lab, we will use a simple two-node topology with IOSv devices:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实验中，我们将使用一个简单的带有IOSv设备的两节点拓扑结构：
- en: '![](assets/6c297d94-b1ca-47c6-a287-058426b828d9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6c297d94-b1ca-47c6-a287-058426b828d9.png)'
- en: Chapter 12 lab topology
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章实验拓扑
- en: Let's build our first job.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建我们的第一个作业。
- en: First job for the Python script
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python脚本的第一个作业
- en: 'For our first job, let''s use the Parmiko script that we built in [Chapter
    2](8cefc139-8dfa-4250-81bf-928231e20b22.xhtml), *Low-Level Network Device Interactions*,
    `chapter2_3.py`. If you recall, this is a script that uses `Paramiko` to `ssh`
    to the remote devices and grabs the `show run` and `show version` output of the
    devices:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个作业，让我们使用我们在[第2章](8cefc139-8dfa-4250-81bf-928231e20b22.xhtml)中构建的Parmiko脚本，*低级网络设备交互*，`chapter2_3.py`。如果您还记得，这是一个使用`Paramiko`对远程设备进行`ssh`并获取设备的`show
    run`和`show version`输出的脚本：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will use the create new job link to create the job and pick the Freestyle
    project option:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用“创建新作业”链接来创建作业，并选择“自由风格项目”选项：
- en: '![](assets/44832874-d06e-4afa-bfed-9389c6d67b28.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/44832874-d06e-4afa-bfed-9389c6d67b28.png)'
- en: Example 1 freestyle project
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1自由风格项目
- en: 'We will leave everything as default and unchecked; select Execute shell as
    the build option:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保留所有默认设置和未选中的内容；选择“执行shell”作为构建选项：
- en: '![](assets/d1bb4d78-f774-4400-8eb6-47f54d4c10c8.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d1bb4d78-f774-4400-8eb6-47f54d4c10c8.png)'
- en: Example 1 build step
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1构建步骤
- en: 'When the prompt appears, we will enter in the exact commands we use in the
    shell:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示出现时，我们将输入与shell中使用的确切命令：
- en: '![](assets/11251fcf-41d1-4c61-974e-fb29d3557e4b.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/11251fcf-41d1-4c61-974e-fb29d3557e4b.png)'
- en: Example 1 shell command
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1shell命令
- en: 'Once we save the job configuration, we will be redirected to the project dashboard.
    We can choose the Build Now option, and the job will appear under Build History:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们保存了作业配置，我们将被重定向到项目仪表板。我们可以选择立即构建选项，作业将出现在构建历史下：
- en: '![](assets/0127ca4d-f50f-4e23-9f6b-bf65a99f2d25.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0127ca4d-f50f-4e23-9f6b-bf65a99f2d25.png)'
- en: Example 1 build
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1构建
- en: 'You can check the status of the build by clicking on it and choosing the Console
    Output on the left panel:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击作业并在左侧面板上选择“控制台输出”来检查构建的状态：
- en: '![](assets/124a9350-e1b1-4f6e-b92f-a577a029c6b7.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/124a9350-e1b1-4f6e-b92f-a577a029c6b7.png)'
- en: Example 1 console output
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1控制台输出
- en: 'As an optional step, we can schedule this job at a regular interval, much like
    cron would do for us. The job can be scheduled under Build Triggers, choose to
    Build Periodically and entered the cron-like schedule. In this example, the script
    will run daily at 02:00 and 22:00:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为可选步骤，我们可以按照固定间隔安排此作业，就像cron为我们所做的那样。作业可以在“构建触发器”下安排，选择“定期构建”并输入类似cron的计划。在此示例中，脚本将每天在02:00和22:00运行。
- en: '![](assets/e62e60a1-3565-4665-8aa4-057ec7b5e2a8.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e62e60a1-3565-4665-8aa4-057ec7b5e2a8.png)'
- en: Example 1 build trigger
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1构建触发器
- en: 'We can also configure the SMTP server on Jenkins to allow notification of the
    build results. First, we will need to configure the SMTP server settings under
    Manage Jenkins | Configure Systems from the main menu:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在Jenkins上配置SMTP服务器以允许构建结果的通知。首先，我们需要在主菜单下的“管理Jenkins | 配置系统”中配置SMTP服务器设置：
- en: '![](assets/445a095e-4b20-45df-a321-6d73b5152199.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/445a095e-4b20-45df-a321-6d73b5152199.png)'
- en: Example 1 configure system
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1配置系统
- en: 'We will see the SMTP server settings toward the bottom of the page. Click on
    the Advanced settings to configure the SMTP server settings as well as to send
    out a test email:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在页面底部看到SMTP服务器设置。单击“高级设置”以配置SMTP服务器设置以及发送测试电子邮件：
- en: '![](assets/9f77d424-47bc-45ef-bee1-b5afee81c341.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f77d424-47bc-45ef-bee1-b5afee81c341.png)'
- en: Example 1 configure SMTP
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1配置SMTP
- en: 'We will be able to configure email notifications as part of the post-build
    actions for our job:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将能够配置电子邮件通知作为作业的后续操作的一部分：
- en: '![](assets/50afeec2-613d-41a8-9ba2-1a26f5f87d90.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/50afeec2-613d-41a8-9ba2-1a26f5f87d90.png)'
- en: Example 1 email notification
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1电子邮件通知
- en: 'Congratulations! We have just used Jenkins to create our first job. Functionally,
    this has not done anything more than what we could have achieved with our management
    host. However, there are several advantages of using Jenkins:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们刚刚使用Jenkins创建了我们的第一个作业。从功能上讲，这并没有比我们的管理主机实现更多的功能。然而，使用Jenkins有几个优点：
- en: We can utilize Jenkins' various database-authentication integrations, such as
    LDAP, to allow existing users to execute our script.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以利用Jenkins的各种数据库认证集成，比如LDAP，允许现有用户执行我们的脚本。
- en: We can use Jenkins' role-based authorization to limit users. For example, some
    users can only execute jobs without modification access while others can have
    full administrative access.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用Jenkins的基于角色的授权来限制用户。例如，一些用户只能执行作业而没有修改访问权限，而其他用户可以拥有完全的管理访问权限。
- en: Jenkins provides a web-based graphical interface that allows users to access,
    the scripts easily.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins提供了一个基于Web的图形界面，允许用户轻松访问脚本。
- en: We can use the Jenkins email and logging services to centralize our jobs and
    be notified of the results.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用Jenkins的电子邮件和日志服务来集中我们的作业并收到结果通知。
- en: Jenkins is a great tool by itself. Just like Python, it has a big third-party
    plugin ecosystem that can be used to expand its features and functionalities.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins本身就是一个很好的工具。就像Python一样，它有一个庞大的第三方插件生态系统，可以用来扩展其功能和功能。
- en: Jenkins plugins
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins插件
- en: 'We will install a simple schedule plugin as an example illustrating the plugin-installation
    process. The plugins are managed under Manage Jenkins | Manage Plugins:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装一个简单的计划插件作为说明插件安装过程的示例。插件在“管理Jenkins | 管理插件”下进行管理：
- en: '![](assets/867ca9d1-9540-42a2-9a55-da6e7f887c5b.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/867ca9d1-9540-42a2-9a55-da6e7f887c5b.png)'
- en: Jenkins plugin
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins插件
- en: 'We can use the search function to look for the Schedule Build plugin under
    the available tab:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用搜索功能在可用选项卡下查找计划构建插件：
- en: '![](assets/79da400f-bb21-4fa6-8695-4f576a64bc83.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/79da400f-bb21-4fa6-8695-4f576a64bc83.png)'
- en: Jenkins plugin search
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins插件搜索
- en: 'From there, we will just click on Install without restart, and we will be able
    to check the installation progress on the following page:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需点击“安装而不重启”，我们就能在接下来的页面上检查安装进度：
- en: '![](assets/4cecebf1-d057-4bb2-a1b8-6bb21cdf1f30.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4cecebf1-d057-4bb2-a1b8-6bb21cdf1f30.png)'
- en: Jenkins plugin installation
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins插件安装
- en: 'After the installation is completed, we will be able to see a new icon that
    allows us to schedule jobs more intuitively:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们将能够看到一个新的图标，允许我们更直观地安排作业：
- en: '![](assets/d6b1fccc-091e-435a-9f7e-e24bcdafa7a3.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d6b1fccc-091e-435a-9f7e-e24bcdafa7a3.png)'
- en: Jenkins plugin result
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins插件结果
- en: It is one of the strengths of a popular open source project to have the ability
    to grow over time. For Jenkins, the plugins provide a way to customize the tool
    for different customer needs. In the coming section, we will look at how to integrate
    version control and the approval process into our workflow.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个流行的开源项目的优势之一是能够随着时间的推移而增长。对于Jenkins来说，插件提供了一种为不同的客户需求定制工具的方式。在接下来的部分，我们将看看如何将版本控制和批准流程集成到我们的工作流程中。
- en: Network continuous integration example
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络持续集成示例
- en: In this section, let's integrate our GitHub repository with Jenkins. By integrating
    the GitHub repository, we can take advantage of the GitHub code review and collaboration
    tools.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，让我们将我们的GitHub存储库与Jenkins集成。通过集成GitHub存储库，我们可以利用GitHub的代码审查和协作工具。
- en: 'First, we will create a new GitHub repository, I will call this repository
    `chapter12_example2`. We can clone this repository locally and add the files we
    wanted to the repository. In this case, I am adding an Ansible playbook that copies
    the output of the `show version` command to a file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个新的GitHub存储库，我将把这个存储库称为`chapter12_example2`。我们可以在本地克隆这个存储库，并将我们想要的文件添加到存储库中。在这种情况下，我正在添加一个将`show
    version`命令的输出复制到文件中的Ansible playbook：
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By now, we should be pretty familiar with running an Ansible playbook. I will
    skip the output of `host_vars` and the inventory file. However, the most important
    thing is to verify that it runs on the local machine before committing to the
    GitHub repository:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该已经非常熟悉了运行Ansible playbook。我将跳过`host_vars`和清单文件的输出。然而，最重要的是在提交到GitHub存储库之前验证它在本地机器上运行：
- en: '[PRE3]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can now push the playbook and associated files to our GitHub repository:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将playbook和相关文件推送到我们的GitHub存储库：
- en: '![](assets/ef05539d-35a8-4d2d-93e1-c394c8c672a9.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef05539d-35a8-4d2d-93e1-c394c8c672a9.png)'
- en: Example 2 GitHub repository
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2GitHub存储库
- en: 'Let''s log back into the Jenkins host to install `git` and Ansible:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新登录Jenkins主机安装`git`和Ansible：
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Some of the tools can be installed under Global Tool Configuration; Git is
    one of them. However, since we are installing Ansible, we can install Git in the
    same Command Prompt:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一些工具可以在全局工具配置下安装；Git就是其中之一。然而，由于我们正在安装Ansible，我们可以在同一个命令提示符下安装Git：
- en: '![](assets/cbe499e5-4768-462b-8b9e-8ec7c4b341d1.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cbe499e5-4768-462b-8b9e-8ec7c4b341d1.png)'
- en: Global tools configuration
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 全局工具配置
- en: 'We can create a new freestyle project named `chapter12_example2`. Under the
    source-code management, we will specify the GitHub repository as the source:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个名为`chapter12_example2`的新自由样式项目。在源代码管理下，我们将指定GitHub存储库作为源：
- en: '![](assets/02120bae-0753-4b1b-96c0-395cbd62d7c7.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02120bae-0753-4b1b-96c0-395cbd62d7c7.png)'
- en: Example 2 source-code management
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2源代码管理
- en: 'Before we move on to the next step, let''s save the project and run a build.
    In the build console output, we should be able to see the repository being cloned
    and the index value match what we see on GitHub:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行下一步之前，让我们保存项目并运行构建。在构建控制台输出中，我们应该能够看到存储库被克隆，索引值与我们在GitHub上看到的匹配：
- en: '![](assets/6e43af16-88fb-4710-9e71-65561a16403a.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6e43af16-88fb-4710-9e71-65561a16403a.png)'
- en: Example 2 console output 1
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2控制台输出1
- en: 'We can now add the Ansible playbook command in the build section:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在构建部分中添加Ansible playbook命令：
- en: '![](assets/b0a9e905-9f58-4f88-92f0-1162b87d63d3.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0a9e905-9f58-4f88-92f0-1162b87d63d3.png)'
- en: Example 2 build shell
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2构建shell
- en: 'If we run the build again, we can see from the console output that Jenkins
    will fetch the code from GitHub before executing the Ansible playbook:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次运行构建，我们可以从控制台输出中看到Jenkins将在执行Ansible playbook之前从GitHub获取代码：
- en: '![](assets/7262af09-7d6c-4e5d-a11a-bc5cf0533bc1.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7262af09-7d6c-4e5d-a11a-bc5cf0533bc1.png)'
- en: Example 2 build console output 2
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2构建控制台输出2
- en: 'One of the benefits of integrating GitHub with Jenkins is that we can see all
    the Git information on the same screen:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 将GitHub与Jenkins集成的好处之一是我们可以在同一个屏幕上看到所有Git信息：
- en: '![](assets/6098f97c-31f5-4e7e-8ede-8b4375702f56.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6098f97c-31f5-4e7e-8ede-8b4375702f56.png)'
- en: Example 2 Git build data
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2 Git构建数据
- en: 'The results of the project, such as the output of the Ansible playbook, can
    be seen in the `workspace` folder:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的结果，比如Ansible playbook的输出，可以在`workspace`文件夹中看到：
- en: '![](assets/484f53e1-38ab-4e6a-a79c-72ac8c79dddd.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/484f53e1-38ab-4e6a-a79c-72ac8c79dddd.png)'
- en: Example 2 workspace
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2工作空间
- en: 'At this point, we can follow the same step as before to use periodic build
    as the build trigger. If the Jenkins host is publicly accessible, we can also
    use GitHub''s Jenkins plugin to notify Jenkins as a trigger for the build. This
    is a two-step process, the first step is to enable the plugin on your GitHub repository:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们可以按照之前的步骤使用周期性构建作为构建触发器。如果Jenkins主机是公开访问的，我们还可以使用GitHub的Jenkins插件将Jenkins作为构建的触发器。这是一个两步过程，第一步是在您的GitHub存储库上启用插件：
- en: '![](assets/abaf72ff-5399-456e-8cf5-2e38279ae55d.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/abaf72ff-5399-456e-8cf5-2e38279ae55d.png)'
- en: Example 2 GitHub Jenkins service
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2 GitHub Jenkins服务
- en: 'The second step is to specify the GitHub hook trigger as the Build Triggers
    for our project:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是将GitHub挂钩触发器指定为我们项目的构建触发器：
- en: '![](assets/34ffd332-eb02-4ab6-8ee4-0634823689b7.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/34ffd332-eb02-4ab6-8ee4-0634823689b7.png)'
- en: Example 2 Jenkins build trigger
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 示例2 Jenkins构建触发器
- en: Having the GitHub repository as the source allows for a brand new set of possibilities
    of treating infrastructure as code. We can now use GitHub's tool of a fork, pull
    requests, issue tracking, and project management to work together efficiently.
    Once the code is ready, Jenkins can automatically pull the code down and execute
    it on our behalf.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将GitHub存储库作为源，可以为处理基础设施提供全新的可能性。我们现在可以使用GitHub的分叉、拉取请求、问题跟踪和项目管理工具来高效地共同工作。一旦代码准备就绪，Jenkins可以自动拉取代码并代表我们执行。
- en: You will notice we did not mention anything about automated testing. We will
    go over testing in [Chapter 13](d1720d17-6ae3-4886-89e3-f9ded2c88706.xhtml), *Test-Driven
    Development for Networks*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们没有提到任何关于自动化测试的内容。我们将在[第13章](d1720d17-6ae3-4886-89e3-f9ded2c88706.xhtml)中讨论测试，*网络驱动开发*。
- en: Jenkins is a full-featured system that can become complex. We have just scratched
    the surface of it with the two examples presented in this chapter. The Jenkins
    pipeline, environmental setup, multibranch pipeline, and so on, are all useful
    features that can accommodate the most complex automation projects. Hopefully,
    this chapter will serve as an interesting introduction for you to further explore
    the Jenkins tool.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个功能齐全的系统，可能会变得复杂。我们在本章中只是浅尝辄止。Jenkins流水线、环境设置、多分支流水线等都是非常有用的功能，可以适应最复杂的自动化项目。希望本章能为您进一步探索Jenkins工具提供有趣的介绍。
- en: Jenkins with Python
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python与Jenkins
- en: 'Jenkins provides a full set of REST APIs for its functionalities: [https://wiki.jenkins.io/display/JENKINS/Remote+access+API](https://wiki.jenkins.io/display/JENKINS/Remote+access+API).
    There are also a number of Python wrappers that make the interaction even easier.
    Let''s take a look at the Python-Jenkins package:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins为其功能提供了完整的REST API：[https://wiki.jenkins.io/display/JENKINS/Remote+access+API](https://wiki.jenkins.io/display/JENKINS/Remote+access+API)。还有许多Python包装器，使交互更加容易。让我们来看看Python-Jenkins包：
- en: '[PRE5]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can work with the management of the server, such as `plugins`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以与服务器管理一起工作，比如`插件`：
- en: '[PRE6]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can also manage the Jenkins jobs:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以管理Jenkins作业：
- en: '[PRE7]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using Python-Jenkins allows us to have a way to interact with Jenkins in a programmatic
    way.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python-Jenkins使我们有一种以编程方式与Jenkins进行交互的方法。
- en: Continuous integration for Networking
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络连续集成
- en: Continuous integration has been adopted in the software-development world for
    a while, but it is relatively new to network engineering. We are admittedly a
    bit behind in terms of using continuous integration in our network infrastructure.
    It is no doubt a bit of a challenge to think of our network in terms of code when
    we are still struggling to figure out how to stop using the CLI to manage our
    devices.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 连续集成在软件开发领域已经被采用了一段时间，但在网络工程领域相对较新。我们承认，在网络基础设施中使用连续集成方面我们有些落后。毫无疑问，当我们仍在努力摆脱使用CLI来管理设备时，将我们的网络视为代码是一项挑战。
- en: There are a number of good examples of using Jenkins for network automation.
    One is by Tim Fairweather and Shea Stewart at AnsibleFest 2017 network track: [https://www.ansible.com/ansible-for-networks-beyond-static-config-templates](https://www.ansible.com/ansible-for-networks-beyond-static-config-templates).
    Another use case was shared by Carlos Vicente from Dyn at NANOG 63: [https://www.nanog.org/sites/default/files/monday_general_autobuild_vicente_63.28.pdf](https://www.nanog.org/sites/default/files/monday_general_autobuild_vicente_63.28.pdf).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多很好的使用Jenkins进行网络自动化的例子。其中一个是由Tim Fairweather和Shea Stewart在AnsibleFest 2017网络跟踪中提出的：[https://www.ansible.com/ansible-for-networks-beyond-static-config-templates](https://www.ansible.com/ansible-for-networks-beyond-static-config-templates)。另一个用例是由Dyn的Carlos
    Vicente在NANOG 63上分享的：[https://www.nanog.org/sites/default/files/monday_general_autobuild_vicente_63.28.pdf](https://www.nanog.org/sites/default/files/monday_general_autobuild_vicente_63.28.pdf)。
- en: Even though continuous integration might be an advanced topic for network engineers
    who are just beginning to learn coding and the toolsets, in my opinion, it is
    worth the effort to start learning and using continuous integration in production
    today. Even at the basic level, the experience will trigger more innovative ways
    for network automation that will no doubt help the industry move forward.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 即使持续集成对于刚开始学习编码和工具集的网络工程师来说可能是一个高级话题，但在我看来，值得努力学习和在生产中使用持续集成。即使在基本水平上，这种经验也会激发出更多创新的网络自动化方式，无疑会帮助行业向前发展。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we examined the traditional change-management process and why
    it is not a good fit for today's rapidly changing environment. The network needs
    to evolve with the business to become more agile and adapt to change quickly and
    reliably.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了传统的变更管理流程，以及为什么它不适合当今快速变化的环境。网络需要与业务一起发展，变得更加敏捷，能够快速可靠地适应变化。
- en: We looked at the concept of continuous integration, in particular the open source
    Jenkins system. Jenkins is a full-featured, expandable, continuous-integration
    system that is widely used in software development. We installed and used Jenkins
    to execute our Python script based on `Paramiko` in a periodic interval with email
    notifications. We also saw how we can install plugins for Jenkins to expand its
    features.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了持续集成的概念，特别是开源的Jenkins系统。Jenkins是一个功能齐全、可扩展的持续集成系统，在软件开发中被广泛使用。我们安装并使用Jenkins来定期执行基于`Paramiko`的Python脚本，并进行电子邮件通知。我们还看到了如何安装Jenkins的插件来扩展其功能。
- en: We looked at how we can use Jenkins to integrate with our GitHub repository
    and trigger builds based on code-checking. By integrating Jenkins with GitHub,
    we can utilize the GitHub process of collaboration.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看了如何使用Jenkins与我们的GitHub存储库集成，并根据代码检查触发构建。通过将Jenkins与GitHub集成，我们可以利用GitHub的协作流程。
- en: In [Chapter 13](d1720d17-6ae3-4886-89e3-f9ded2c88706.xhtml), *Test-Driven Development
    for Networks*, we will look at test-driven development with Python.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第13章](d1720d17-6ae3-4886-89e3-f9ded2c88706.xhtml)中，《面向网络的测试驱动开发》，我们将学习如何使用Python进行测试驱动开发。
