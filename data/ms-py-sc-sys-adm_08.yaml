- en: Documentation and Reporting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档和报告
- en: In this chapter, you will learn how to document and report information using
    Python. You will also learn how to take input using Python scripts and how to
    print output. Writing scripts for receiving emails is easier in Python. You will
    learn how to format information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用Python记录和报告信息。您还将学习如何使用Python脚本获取输入以及如何打印输出。在Python中编写接收电子邮件的脚本更容易。您将学习如何格式化信息。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Standard input and output
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准输入和输出
- en: Information formatting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息格式化
- en: Sending emails
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送电子邮件
- en: Standard input and output
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准输入和输出
- en: In this section, we are going to learn about input and output in Python. We
    will learn about `stdin` and `stdout`, and the `input()` function.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python中的输入和输出。我们将学习`stdin`和`stdout`，以及`input()`函数。
- en: '`stdin` and `stdout` are file-like objects. These objects are provided by the
    operating system. Whenever a user runs a program in an interactive session, `stdin`
    acts as input and `stdout` will be the user''s Terminal. As `stdin` is a file-like
    object, we have to read the data from `stdin` rather than reading data at runtime. `stdout`
    is used for the output. It is used as an output for expressions and `print()`
    function, as well as a prompt for the `input()` function.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`stdin`和`stdout`是类似文件的对象。这些对象由操作系统提供。每当用户在交互会话中运行程序时，`stdin`充当输入，`stdout`将是用户的终端。由于`stdin`是类似文件的对象，我们必须从`stdin`读取数据而不是在运行时读取数据。`stdout`用于输出。它用作表达式和`print()`函数的输出，以及`input()`函数的提示。'
- en: 'Now, we will see an example of `stdin` and `stdout`. For that purpose, create
    a script, `stdin_stdout_example.py`, and write the following content in it:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个`stdin`和`stdout`的例子。为此，请创建一个名为`stdin_stdout_example.py`的脚本，并在其中写入以下内容：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, we have used `stdin` and `stdout` for taking input
    and displaying the output. The `sys.stdin.readline()` will read from `stdin`.
    The will write the data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用了`stdin`和`stdout`来获取输入和显示输出。`sys.stdin.readline()`将从`stdin`读取数据。将写入数据。
- en: 'Now, we will learn about the `input()` and `print()` functions. The `input()`
    function is used for taking input from the user. The function has an optional
    parameter: prompt string.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习`input()`和`print()`函数。`input()`函数用于从用户那里获取输入。该函数有一个可选参数：提示字符串。
- en: 'Syntax:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `input()` function returns a string value. If you want a number value,
    simply write the ''`int` keyword before `input()`. You can do this as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`input()`函数返回一个字符串值。如果您想要一个数字值，只需在`input()`之前写入`int`关键字。您可以这样做：'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Similarly, you can write `float` for float values. Now, we will look at an
    example. Create a `input_example.py` script and write the following code in it:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以为浮点值写入`float`。现在，我们将看一个例子。创建一个`input_example.py`脚本，并在其中写入以下代码：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, we used `input()` function for three different values.
    Firstly for string, second for integer value, and third for `float` value. To
    use `input()` for integer and float, we have to use `int()` and `float()` type
    conversion functions to convert the received string into integer and float respectively.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用`input()`函数获取了三个不同的值。首先是字符串，第二个是整数值，第三个是`float`值。要将`input()`用于整数和浮点数，我们必须使用`int()`和`float()`类型转换函数将接收到的字符串转换为整数和浮点数。
- en: Now, the `print()` function is used to output the data. We have to put in a
    comma-separated list of arguments. In `input_example.py`, to get the output, we
    used the `print()` function. Using the `print()` function, you can simply write
    the data on to your screen by enclosing them in the  `" "` or `' '`. To access
    just the value, just write the variable name in the `print()` function. If you
    want to write some text as well as accessing a value in the same `print()` function,
    then separate these two by putting a comma between them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`print()`函数用于输出数据。我们必须输入一个以逗号分隔的参数列表。在`input_example.py`中，我们使用了`print()`函数来获取输出。使用`print()`函数，您可以通过将数据括在`""`或`''`中简单地将数据写入屏幕上。要仅访问值，只需在`print()`函数中写入变量名。如果您想在同一个`print()`函数中写一些文本并访问一个值，那么请用逗号将这两者分开。
- en: 'We will look at a simple example for the `print()` function. Create a `print_example.py` script
    and write the following content in it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一个`print()`函数的简单例子。创建一个`print_example.py`脚本，并在其中写入以下内容：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, first, we simply printed a string on the screen. Next,
    we just accessed the value of `a` and printed it on the screen. Lastly, we entered
    the values of `a` and `b`, then added them and stored the result in the variable
    `c`, and then we printed a statement and accessed a value from the same `print()`
    function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，首先我们简单地在屏幕上打印了一个字符串。接下来，我们只是访问了`a`的值并将其打印在屏幕上。最后，我们输入了`a`和`b`的值，然后将它们相加并将结果存储在变量`c`中，然后我们打印了一个语句并从同一个`print()`函数中访问了一个值。
- en: Information formatting
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息格式化
- en: 'In this section, we are going to learn about string formatting. We are going
    to learn how to format information in two ways: one by using the string `format()`
    method and the other by using the `%` operator.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习字符串格式化。我们将学习两种格式化信息的方法：一种是使用字符串`format()`方法，另一种是使用`%`运算符。
- en: First, we will learn string formatting using the string `format()` method. This
    method of the `string` class allows us to do value formatting. It also allows
    us to do variable substitutions. This will concatenate the elements through positional
    arguments.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将学习使用字符串`format()`方法进行字符串格式化。`string`类的这种方法允许我们进行值格式化。它还允许我们进行变量替换。这将通过位置参数连接元素。
- en: Now, we are going to learn how to do this formatting using formatters. The string
    on which this method is called can contain literal text or replacement fields
    delimited by braces `{}`. Multiple pairs of `{}` can be used while formatting
    a string. This replacement field contains either an index of an argument, or the
    name of argument. As a result, you will get a copy of a string where each replacement
    field is replaced with the string value of an argument.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何使用格式化程序进行格式化。调用此方法的字符串可以包含文字或由大括号`{}`分隔的替换字段。在格式化字符串时可以使用多对`{}`。此替换字段包含参数的索引或参数的名称。结果，您将获得一个字符串副本，其中每个替换字段都替换为参数的字符串值。
- en: Now, we will look at an example of string formatting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个字符串格式化的例子。
- en: 'Create a `format_example.py` script and write the following content in it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`format_example.py`脚本，并在其中写入以下内容：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the script as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行脚本：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, we did string formatting using the `format()` method
    of `string` class using single and multiple formatters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用`string`类的`format()`方法进行了字符串格式化，使用了单个和多个格式化程序。
- en: 'Now, we are going to learn about string formatting using the `%` operator.
    There are format symbols used with the `%` operator. Here are some commonly used
    symbols:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何使用`％`运算符进行字符串格式化。`％`运算符与格式符一起使用。以下是一些常用的符号：
- en: '`%d`: Decimal integer'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％d`：十进制整数'
- en: '`%s`: String'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%s`：字符串'
- en: '`%f`: Floating point number'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％f`：浮点数'
- en: '`%c`: Character'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％c`：字符'
- en: 'Now, we will look at an example. Create a `string_formatting.py` script and
    write the following content in it:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个例子。创建一个`string_formatting.py`脚本，并在其中写入以下内容：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding example, we used the `%` operator to format strings: `%d`
    for numbers, `%s` for strings, and `%f` for float numbers. Then, we aligned the
    string to the left and right. We also learned how to truncate the string using
    the `%` operator. `%.4s` will display only the first four characters. Next, we
    created a dictionary named `students` and entered `Name` and `Address` key value
    pairs. Next, we placed our key names after the `%` operator to get the strings.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用`％`运算符来格式化字符串：`％d`表示数字，`％s`表示字符串，`％f`表示浮点数。然后，我们将字符串左对齐和右对齐。我们还学会了如何使用`％`运算符截断字符串。`％.4s`将仅显示前四个字符。接下来，我们创建了一个名为`students`的字典，并输入了`Name`和`Address`键值对。然后，我们在`％`运算符后放置了我们的键名以获取字符串。
- en: Sending email
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送电子邮件
- en: In this section, we are going to learn about sending an email from Gmail through
    a Python script. To do this, Python has a module named `smtplib`. The `smtplib`
    module in Python provides SMTP client session object that is used to send an email
    to any internet machine with SMTP listener.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何通过Python脚本从Gmail发送电子邮件。为此，Python有一个名为`smtplib`的模块。Python中的`smtplib`模块提供了用于向具有SMTP侦听器的任何互联网机器发送电子邮件的SMTP客户端会话对象。
- en: We are going to look at an example. In this example, we will send an email containing
    a simple text from Gmail to the recipients.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一个例子。在这个例子中，我们将从Gmail向接收者发送包含简单文本的电子邮件。
- en: 'Create a `send_email.py` script and write the following content in it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`send_email.py`脚本，并在其中写入以下内容：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the script as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行脚本：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example, we have sent an email from our Gmail ID to the receivers.
    The user name variable will store your email ID. In the password variable, either
    you can enter your password or else you can prompt for password using the `getpass`
    module. Here, we prompt for the password. Next, the sender variable will have
    your name. Now we are going to send this email to multiple receivers. Then, we
    included subject, from, and to for that email. Then in `login(),` we mentioned
    our username and password variables. Next, in `sendmail()`, we mentioned the sender,
    receivers, and text variables. So, using this process, we have sent the email
    successfully.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们从我们的Gmail ID向接收者发送了一封电子邮件。用户名变量将存储您的电子邮件ID。在密码变量中，您可以输入密码，或者您可以使用`getpass`模块提示密码。在这里，我们提示输入密码。接下来，发件人变量将有您的名字。现在，我们将向多个接收者发送此电子邮件。然后，我们为该电子邮件包括了主题，发件人和收件人。然后在`login()`中，我们提到了我们的用户名和密码变量。接下来，在`sendmail()`中，我们提到了发件人，接收者和文本变量。因此，使用此过程，我们成功发送了电子邮件。
- en: 'Now, we will look at one more example of sending an email with an attachment.
    In this example, we are going to send an image to the recipient. We are going
    to send this mail via Gmail. Create a `send_email_attachment.py` script and write
    the following content in it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个发送带附件的电子邮件的例子。在这个例子中，我们将向收件人发送一张图片。我们将通过Gmail发送此邮件。创建一个`send_email_attachment.py`脚本，并在其中写入以下内容：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the script as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式运行脚本：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding example, we sent an image as an attachment to the receivers.
    We mentioned the sender's and receivers' email IDs. Next, in the `f_path`, we
    mentioned the path of the image that we sent as an attachment. Next, we sent that
    image as an attachment to the receiver.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们将图像作为附件发送给接收者。我们提到了发件人和收件人的电子邮件ID。接下来，在`f_path`中，我们提到了我们发送为附件的图像的路径。接下来，我们将该图像作为附件发送给接收者。
- en: In the previous two examples – `send_text.py` and `send_email_attachment.py`– we
    sent email via Gmail. You can send via any other email providers. To use any other
    email provider, just write that provider name in `host_name`. Don’t forget to
    add `smtp` before it. In these example, we used `smtp.gmail.com`; for Yahoo! you
    can use `smtp.mail.yahoo.com`. So, you can change the hostname as well as the
    port, according to your email providers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的两个例子——`send_text.py`和`send_email_attachment.py`——我们通过Gmail发送了电子邮件。您可以通过任何其他电子邮件提供商发送。要使用任何其他电子邮件提供商，只需在`host_name`中写入该提供商名称。不要忘记在其前面添加`smtp`。在这些示例中，我们使用了`smtp.gmail.com`；对于Yahoo！您可以使用`smtp.mail.yahoo.com`。因此，您可以根据您的电子邮件提供商更改主机名以及端口。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about standard input and output. We learned how
    `stdin` and `stdout` act as keyboard input and user's Terminal respectively. We
    also learned about `input()` and `print()` functions. In addition to this, we
    learned about sending an email from Gmail to the receivers. We sent an email with
    simple text and also sent an attachment. Also, we learned about string formatting
    using the `format()` method and the `%` operator.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了标准输入和输出。我们了解了“stdin”和“stdout”分别作为键盘输入和用户终端。我们还学习了“input()”和“print()”函数。除此之外，我们还学习了如何从Gmail发送电子邮件给接收者。我们发送了一封包含简单文本的电子邮件，还发送了附件。此外，我们还学习了使用“format()”方法和“%”运算符进行字符串格式化。
- en: In the next chapter, you will learn about how to work with different files such
    as PDF, Excel, and `csv.`
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何处理不同类型的文件，如PDF、Excel和“csv”。
- en: Questions
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between `stdin` and input?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “stdin”和输入之间有什么区别？
- en: What is SMTP?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SMTP是什么？
- en: What would be the output of the following?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下内容的输出将是什么？
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What would be the output of the following?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下内容的输出将是什么？
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Further reading
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '`string` documentation: [https://docs.python.org/3.1/library/string.html ](https://docs.python.org/3.1/library/string.html)'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “string”文档：[https://docs.python.org/3.1/library/string.html](https://docs.python.org/3.1/library/string.html)
- en: '`smptplib` documentation: [https://docs.python.org/3/library/smtplib.html ](https://docs.python.org/3/library/smtplib.html)'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “smptplib”文档：[https://docs.python.org/3/library/smtplib.html](https://docs.python.org/3/library/smtplib.html)
