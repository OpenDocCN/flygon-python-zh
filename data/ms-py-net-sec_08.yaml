- en: Working with Nmap Scanners
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nmap扫描器
- en: This chapter covers how network scanning is done with python-nmap to gather
    information on a network, host, and the services that are running on the hosts.
    Some of the tools that allow a port scanner and automate the detection of services
    and open ports, we can find in Python, among which we can highlight python-nmap.
    Nmap is a powerful port scanner that allows you to identify open, closed, or filtered
    ports. It also allows the programming of routines and scripts to find possible
    vulnerabilities in a given host.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了如何使用python-nmap进行网络扫描，以收集有关网络、主机和主机上运行的服务的信息。一些允许端口扫描和自动检测服务和开放端口的工具，我们可以在Python中找到，其中我们可以突出显示python-nmap。Nmap是一个强大的端口扫描器，可以帮助您识别打开、关闭或过滤的端口。它还允许编程例程和脚本来查找给定主机可能存在的漏洞。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Learning and understanding the Nmap protocol as a port scanner to identify services
    running on a host
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习和理解Nmap协议作为端口扫描器，以识别主机上运行的服务
- en: Learning and understanding the `python-nmap` module that uses Nmap at a low
    level and is a very useful tool to optimize tasks related to port scanning
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习和理解使用Nmap的`python-nmap`模块，这是一个非常有用的工具，可以优化与端口扫描相关的任务
- en: Learning and understanding synchronous and asynchronous scanning with the `python-nmap
    module`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习和理解使用`python-nmap模块`进行同步和异步扫描
- en: Learning and understanding Nmap scripts to detect vulnerabilities in a network
    or a specific host
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习和理解Nmap脚本，以便检测网络或特定主机中的漏洞
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter8` folder:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例和源代码可在GitHub存储库的`chapter8`文件夹中找到：
- en: '[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)。'
- en: 'You will need to install a Python distribution in your local machine with at
    least 4 GB of memory. In this chapter, we will use a **virtual machine** with
    which some tests related to port analysis and vulnerability detection will be
    carried out. It can be downloaded from the `sourceforge` page:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在本地机器上安装一个至少有4GB内存的Python发行版。在本章中，我们将使用一个**虚拟机**，用于进行与端口分析和漏洞检测相关的一些测试。它可以从`sourceforge`页面下载：
- en: '[https://sourceforge.net/projects/metasploitable/files/Metasploitable2](https://sourceforge.net/projects/metasploitable/files/Metasploitable2)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://sourceforge.net/projects/metasploitable/files/Metasploitable2](https://sourceforge.net/projects/metasploitable/files/Metasploitable2)'
- en: 'To log in, you must use the username, `msfadmin`, and the password, `msfadmin`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录，您必须使用用户名`msfadmin`和密码`msfadmin`：
- en: '![](assets/a762810d-c72e-4099-a79a-7b232836446a.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a762810d-c72e-4099-a79a-7b232836446a.png)'
- en: 'If we execute the `ifconfig` command, we can see the configuration of the network
    and the IP address that we can use to perform our tests. In this case, the IP
    address for our local network is **192.168.56.101**:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行`ifconfig`命令，我们可以看到网络的配置和我们可以用来执行测试的IP地址。在这种情况下，我们本地网络的IP地址是**192.168.56.101**：
- en: '![](assets/ae16ef46-b2ea-4c49-b9ef-88ce95a6e9cc.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae16ef46-b2ea-4c49-b9ef-88ce95a6e9cc.png)'
- en: 'If we perform a port scan with the `nmap` command , we can see the ports that
    are open in the virtual machine:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`nmap`命令进行端口扫描，我们可以看到虚拟机中打开的端口：
- en: '![](assets/c573f22c-7a09-47bf-b71f-5994d039b4db.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c573f22c-7a09-47bf-b71f-5994d039b4db.png)'
- en: Basically,  a Metasploitable virtual machine (vm) is a vulnerable version of
    Ubuntu Linux designed for testing security tools and demonstrating common vulnerabilities.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Metasploitable虚拟机（vm）是Ubuntu Linux的一个易受攻击的版本，旨在测试安全工具并演示常见的漏洞。
- en: 'You can find more information about this virtual machine in the following guide:
    [https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide.](https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下指南中找到有关此虚拟机的更多信息：[https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide.](https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide)
- en: Introducing port scanning with Nmap
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍使用Nmap进行端口扫描
- en: In this section, we  review the Nmap tool for port scanning and the main scanning
    types that it supports. We will learn about Nmap as a port scanner that allows
    us to analyze the ports and services that run on a machine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将回顾Nmap工具用于端口扫描以及它支持的主要扫描类型。我们将了解Nmap作为一个端口扫描器，它允许我们分析机器上运行的端口和服务。
- en: Introducing to port scanning
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍端口扫描
- en: Once I have identified endpoints within our network, the next step is to perform
    a port scan. Computers that support communication protocols utilize ports in order
    to make connections. In order to support different conversations with multiple
    applications, ports are used to distinguish various communications in the same
    machine or server. For example, web servers can use the **Hypertext Transfer Protocol**
    (**HTTP**) to provide access to a web page which utilizes TCP port number `80`
    by default. The **Simple Mail Transfer Protocol** or **SMTP** uses port `25` to
    send or transmit mail messages. For each unique IP address, a protocol port number
    is identified by a 16-bit number, commonly known as the port number `0-65,535`.
    The combination of a port number and IP address provides a complete address for
    communication. Depending on the direction of the communication, both a source
    and destination address (IP address and port combination) are required.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在我们的网络中确定了端点，下一步就是进行端口扫描。支持通信协议的计算机利用端口来建立连接。为了支持与多个应用程序的不同对话，端口用于区分同一台机器或服务器中的各种通信。例如，Web服务器可以使用**超文本传输协议**（**HTTP**）来提供对使用TCP端口号`80`的网页的访问。**简单邮件传输协议**或**SMTP**使用端口`25`来发送或传输邮件消息。对于每个唯一的IP地址，协议端口号由一个16位数字标识，通常称为端口号`0-65,535`。端口号和IP地址的组合提供了通信的完整地址。根据通信的方向，需要源地址和目标地址（IP地址和端口组合）。
- en: Scanning types with Nmap
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nmap进行扫描的类型
- en: '**Network Mapper** (**Nmap**) is a free and open source tool used for network
    discovery and security auditing. It runs on all major computer operating systems,
    and official binary packages are available for Linux, Windows, and Mac OS X. The
    python-nmap library helps to manipulate the scanned results of Nmap programmatically to
    automate port-scanning tasks.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 网络映射器（Nmap）是用于网络发现和安全审计的免费开源工具。它可以在所有主要计算机操作系统上运行，并且针对Linux、Windows和Mac OS X提供官方二进制包。python-nmap库有助于以编程方式操纵Nmap的扫描结果，以自动执行端口扫描任务。
- en: The Nmap tool is mainly used for the recognition and scanning of ports in a
    certain network segment. From the site, [https://nmap.org](https://nmap.org),
    we can download the latest version available, depending on the operating system
    on which we want to install it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap工具主要用于识别和扫描特定网络段中的端口。从网站[https://nmap.org](https://nmap.org)，我们可以根据要安装的操作系统下载最新版本。
- en: 'If we run the Nmap tool from the console, we get this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从控制台运行Nmap工具，我们会得到这个：
- en: '![](assets/c3307890-497e-4407-b904-5f7d0890ea6b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3307890-497e-4407-b904-5f7d0890ea6b.png)'
- en: 'We can see that we have the following **types of scanning**:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有以下**扫描类型**：
- en: '**sT (TCP Connect Scan): **This is the option that is usually used to detect
    if a port is open or closed, but it is also usually the most audited mechanism
    and most monitored by intrusion detection systems. With this option, a port is
    open if the server responds with a packet containing the ACK flag when sending
    a packet with the SYN flag.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: sT（TCP Connect扫描）：这通常用于检测端口是否打开或关闭的选项，但通常是最受审计和最受入侵检测系统监视的机制。使用此选项，如果服务器在发送具有SYN标志的数据包时响应一个包含ACK标志的数据包，则端口是打开的。
- en: '**sS (TCP Stealth Scan):** This is a type of scan based on the TCP Connect
    Scan with the difference that the connection on the indicated port is not done
    completely. It consists of checking the response packet of the target before it
    checks a packet with the SYN flag enabled. If the target responds with a packet
    that has the RST flag, then you can check if the port is open or closed.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: sS（TCP Stealth扫描）：这是一种基于TCP Connect扫描的扫描类型，其不同之处在于不完全进行指定端口的连接。它包括在检查发送具有SYN标志的数据包之前检查目标的响应数据包。如果目标以激活了RST标志的数据包响应，则可以检查端口是打开还是关闭。
- en: '**u (UDP Scan):** This is a type of scan based on the UDP protocol where a
    connection process is not carried out, but simply a UDP packet is sent to determine
    if the port is open. If the answer is another UDP packet, it means that the port
    is open. If the answer returns, the port is not open, and an **Internet Control
    Message Protocol** (**ICMP**) packet of type 3 (destination unreachable) will
    be received.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: u（UDP扫描）：这是一种基于UDP协议的扫描类型，其中不进行连接过程，而只是发送一个UDP数据包来确定端口是否打开。如果答案是另一个UDP数据包，则意味着该端口是打开的。如果答案返回，端口是关闭的，并且将收到ICMP类型3（目的地不可达）的数据包。
- en: '**sA (TCP ACK Scan):** This type of scan lets us know if our target machine
    has any type of firewall running. What this scan does is send a packet with the
    ACK flag activated to the target machine. If the remote machine responds with
    a packet that has the RST flag activated, it can be determined that the port is
    not filtered by any firewall. In the event returns, if the remote does not respond,
    or does so with an ICMP packet of the type, it can be determined that there is
    a firewall filtering the packets sent to the indicated port.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: sA（TCP ACK扫描）：这种扫描类型让我们知道我们的目标机器是否运行任何类型的防火墙。这种扫描发送一个激活了ACK标志的数据包到目标机器。如果远程机器以激活了RST标志的数据包响应，可以确定该端口没有被任何防火墙过滤。如果远程不响应，或者以ICMP类型的数据包响应，可以确定有防火墙过滤发送到指定端口的数据包。
- en: '**sN (TCP NULL Scan):** This is a type of scan that sends a TCP packet to the
    target machine without any flag. If the remote machine does not issue a response,
    it can be determined that the port is open. Otherwise, if the remote machine returns
    an RST flag, we can say that the port is closed.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: sN（TCP空扫描）：这是一种扫描类型，它向目标机器发送一个没有任何标志的TCP数据包。如果远程机器没有发出响应，可以确定该端口是打开的。否则，如果远程机器返回一个RST标志，我们可以说该端口是关闭的。
- en: '**sF (TCP FIN Scan):** This is a type of scan that sends a TCP packet to the
    target machine with the FIN flag. If the remote machine does not issue a response,
    it can be determined that the port is open. If the remote machine returns an RST
    flag, we can say that the port is closed.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: sF（TCP FIN扫描）：这是一种向目标机器发送带有FIN标志的TCP数据包的扫描类型。如果远程机器没有发出响应，可以确定该端口是打开的。如果远程机器返回一个RST标志，我们可以说该端口是关闭的。
- en: '**sX (TCP XMAS Scan):** This is a type of scan that sends a TCP packet to the
    target machine with the flags PSH, FIN, or URG. If the remote machine does not
    issue a response, it can be determined that the port is open. If the remote machine
    returns an RST flag, we can say that the port is closed. If, in the response package,
    we obtain one of the ICMP type 3 responses, then the port is filtered.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: sX（TCP XMAS扫描）：这是一种向目标机器发送带有PSH、FIN或URG标志的TCP数据包的扫描类型。如果远程机器没有发出响应，可以确定该端口是打开的。如果远程机器返回一个RST标志，我们可以说该端口是关闭的。如果在响应数据包中获得ICMP类型3的响应，则端口被过滤。
- en: The type of default scan may vary depending on the user that is running it,
    because of the permissions allowed to send packets during the scan. The difference
    between scanning types is the "noise" generated by each one, and its ability to
    avoid being detected by security systems, such as firewalls or intrusion detection
    systems.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 默认扫描类型可能会因运行它的用户而异，因为在扫描期间允许发送数据包的权限不同。扫描类型之间的区别在于每种类型生成的“噪音”，以及它们避免被安全系统（如防火墙或入侵检测系统）检测到的能力。
- en: If we want to create a port scanner, we would have to create a thread for each
    socket that opens a connection in a port and manage the shared use of the screen
    through a traffic light. With this approach we would have a long code and in addition
    we would only do a simple TCP scan, but not ACK, SYN-ACK, RST, or FIN provided
    by the Nmap toolkit.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想创建一个端口扫描程序，我们将不得不为每个打开端口的套接字创建一个线程，并通过交通灯管理屏幕的共享使用。通过这种方法，我们将有一个很长的代码，而且我们只会执行一个简单的TCP扫描，而不是Nmap工具包提供的ACK、SYN-ACK、RST或FIN。
- en: Since the Nmap response format is XML, it would not be difficult to write a
    module in Python that allows the parsing of this response format, providing full
    integration with Nmap and being able to run more types of scans. In this way,
    the `python-nmap` module emerged as the main module for performing these types
    of tasks.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Nmap响应格式是XML，因此很容易编写一个Python模块，允许解析此响应格式，提供与Nmap的完全集成，并能够运行更多类型的扫描。因此，`python-nmap`模块成为执行这些类型任务的主要模块。
- en: Port scanning with python-nmap
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用python-nmap进行端口扫描
- en: In this section we review the `python-nmap` module for port scanning in Python. We
    will learn how the `python-nmap` module uses Nmap and how it is a very useful
    tool for optimizing tasks regarding discovery services in a specific target (domain,
    network, or IP address).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾Python中用于端口扫描的`python-nmap`模块。我们将学习`python-nmap`模块如何使用Nmap，以及它如何是一个非常有用的工具，用于优化有关在特定目标（域、网络或IP地址）上发现服务的任务。
- en: Introduction to python-nmap
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍python-nmap
- en: In Python we can make use of Nmap through the python-nmap library, which allows
    us to manipulate the results of a scan easily. In addition, it can be a perfect
    tool for system administrators or computer security consultants when it comes
    to automating penetration-testing processes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们可以通过python-nmap库使用Nmap，这使我们可以轻松地操作扫描结果。此外，对于系统管理员或计算机安全顾问来说，它可以是自动化渗透测试过程的完美工具。
- en: python-nmap is a tool that is used within the scope of security audits or intrusion
    tests and its main functionality is to discover what ports or services a specific
    host has open for listening. In addition, it has the advantage that it is compatible
    with versions 2.x and 3.x.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: python-nmap是在安全审计或入侵测试范围内使用的工具，其主要功能是发现特定主机开放的端口或服务。此外，它的优势在于与2.x和3.x版本兼容。
- en: 'You could get the source for python-nmap from the Bitbucket repository:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Bitbucket存储库获取python-nmap的源代码：
- en: '[https://bitbucket.org/xael/python-nmap](https://bitbucket.org/xael/python-nmap)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bitbucket.org/xael/python-nmap](https://bitbucket.org/xael/python-nmap)'
- en: 'The latest version of python-nmap can be downloaded from the following websites:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的python-nmap可以从以下网站下载：
- en: '[http://xael.org/pages/python-nmap-en.html](http://xael.org/pages/python-nmap-en.html)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://xael.org/pages/python-nmap-en.html](http://xael.org/pages/python-nmap-en.html)'
- en: '[https://xael.org/norman/python/python-nmap](https://xael.org/norman/python/python-nmap/)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://xael.org/norman/python/python-nmap](https://xael.org/norman/python/python-nmap/)'
- en: Installing python-nmap
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装python-nmap
- en: To proceed with the installation, unzip the downloaded package, jump to the
    new directory, and execute the installation command.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行安装，请解压下载的软件包，跳转到新目录，并执行安装命令。
- en: 'In this example, we are installing Version 0.5 from the source package:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们正在安装源包的版本0.5：
- en: '![](assets/9bd17528-a2bf-482d-99f8-022e05defafe.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9bd17528-a2bf-482d-99f8-022e05defafe.png)'
- en: 'It is also possible to install the module with the `pip install` tool, since
    it is in the official repository. To install the module, it is necessary to execute
    the command with administrator permissions or use the system superuser (`sudo`):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用`pip install`工具安装模块，因为它在官方存储库中。要安装模块，需要以管理员权限执行命令或使用系统超级用户（`sudo`）：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using python-nmap
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用python-nmap
- en: 'Now, you can import the python-nmap module that we can invoke from our scripts,
    or from the interactive terminal, for example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以导入python-nmap模块，我们可以从脚本或交互式终端中调用它，例如：
- en: '![](assets/a1a8c4c9-d51c-404b-9639-4d9f6096f9b0.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a1a8c4c9-d51c-404b-9639-4d9f6096f9b0.png)'
- en: 'Once we have verified the module installation, we can start to perform scans
    on a specific host. For this, we must do an instantiation of the `PortScanner()`
    class, so we can access the most important method: `scan()`. A good practice to
    understand how a function, method, or object works is to use the `**help()**`
    or `dir()` functions to find out the methods available in a module:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们验证了模块的安装，我们就可以开始对特定主机执行扫描。为此，我们必须对`PortScanner()`类进行实例化，以便访问最重要的方法：`scan()`。了解函数、方法或对象的工作原理的一个好方法是使用`**help()**`或`dir()`函数来查找模块中可用的方法：
- en: '![](assets/cf3f783d-4fc0-46e8-9f07-7d2461a46018.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf3f783d-4fc0-46e8-9f07-7d2461a46018.png)'
- en: If we execute a `help (port_scan.scan)` command, we see that the `scan` method
    of the `PortScanner` class receives three arguments, the host(s), the ports, and
    the arguments, and at the end it adds the parameters (all must be string).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行`help (port_scan.scan)`命令，我们会看到`PortScanner`类的`scan`方法接收三个参数，主机、端口和参数，最后添加参数（所有参数都必须是字符串）。
- en: 'With the `help` command, we can see that information:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`help`命令，我们可以看到信息：
- en: '![](assets/4862ae4b-1d55-43a2-bfd5-8221da7839e6.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4862ae4b-1d55-43a2-bfd5-8221da7839e6.png)'
- en: The first thing we have to do is import the Nmap library and create our object
    to start interacting with `PortScanner()`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是导入Nmap库并创建我们的对象，以开始与`PortScanner()`进行交互。
- en: 'We launch our first scan with the `scan (''ip'', ''ports'')` method, where
    the first parameter is the IP address, the second is a port list, and the third
    parameter is optional. If we do not define it, perform a standard Nmap scan:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`scan ('ip', 'ports')`方法启动我们的第一次扫描，其中第一个参数是IP地址，第二个是端口列表，第三个参数是可选的。如果我们不定义它，将执行标准的Nmap扫描：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, a scan is performed on the virtual machine with the IP address
    `192.168.56.101` on ports in the `1-80` range. With the `**argument -sV**`, we
    are telling you to detect the versions when invoke scanning.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，对具有IP地址`192.168.56.101`的虚拟机在`1-80`范围内的端口进行扫描。使用`**参数-sV**`，我们告诉你在调用扫描时检测版本。
- en: The result of the scan is a dictionary that contains the same information that
    would return a scan made with Nmap directly. We can also return to the object
    we instantiated with the `PortScanner()` class and test its methods. We can see
    the `nmap` command that has been executed in the following screenshot, with the
    `command_line()` method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描结果是一个包含与直接使用Nmap进行扫描返回的相同信息的字典。我们还可以返回到我们用`PortScanner()`类实例化的对象并测试其方法。我们可以在下一个截图中看到已执行的`nmap`命令，使用`command_line()`方法。
- en: To obtain more information about the server that is running on a certain port,
    we can do so using the `tcp()` method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取运行在特定端口上的服务器的更多信息，我们可以使用`tcp()`方法来实现。
- en: 'In this example, we can see how to obtain information about a specific port
    with the `tcp` method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到如何使用`tcp`方法获取有关特定端口的信息：
- en: '![](assets/209c0f9e-bbaa-4c09-b95f-8dbe80527859.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/209c0f9e-bbaa-4c09-b95f-8dbe80527859.png)'
- en: 'We can also see if a host is up or not with the `state()` function that returns
    the state property we can see in the previous screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`state()`函数来查看主机是否处于启动状态，该函数返回我们在上一个截图中看到的状态属性：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We also have the `all_hosts()` method for scanning all the hosts, with which
    we can see which hosts are up and which are not:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有`all_hosts()`方法来扫描所有主机，通过它我们可以看到哪些主机是启动的，哪些是关闭的：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can also see the services that have given some type of response in the scanning
    process, as well as the `scanning` method used:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到在扫描过程中哪些服务给出了某种响应，以及使用的`scanning`方法：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We also scan all protocols:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还扫描所有协议：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The following script tries to perform a scan with python-nmap with the following
    conditions in the form of arguments.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本尝试使用python-nmap在以下条件下进行扫描。
- en: 'Ports to scan: `21,22,23,80,8080`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要扫描的端口：`21,22,23,80,8080`。
- en: -n option to not execute a DNS resolution.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -n选项不执行DNS解析。
- en: Once the scan data has been obtained, save them in a `scan.txt` file.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦获取了扫描数据，将其保存在`scan.txt`文件中。
- en: 'You can find the following code in the filename: `Nmap_port_scanner.py`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在文件名`Nmap_port_scanner.py`中找到以下代码：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Nmap_port_scanner.py` execution:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Nmap_port_scanner.py`执行：'
- en: 'In this screenshot we can see the state of the ports passed as parameters in
    the Metasploitable vm with the specified IP address:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到以指定IP地址的Metasploitable虚拟机作为参数传递的端口的状态：
- en: '![](assets/76bd821e-7d69-4d1c-a42b-7b16caa161b4.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/76bd821e-7d69-4d1c-a42b-7b16caa161b4.png)'
- en: Scan modes with python-nmap
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用python-nmap进行扫描模式
- en: 'In this section we review the scan modes supported in the `python-nmap` module. `python-nmap`
    allows for the automation of port scanner tasks and reports in two modes: synchronous
    and asynchronous. With the asynchronous mode, we can define a `callback` function
    that will execute when a scan is finished in a specific port and, in this function,
    we can make additional treatments if the port is opened, such as launching an
    Nmap script for a specific service (HTTP, FTP, MySQL).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们回顾了`python-nmap`模块支持的扫描模式。`python-nmap`允许在两种模式下自动执行端口扫描任务和报告：同步和异步。使用异步模式，我们可以定义一个`callback`函数，当特定端口的扫描完成时将执行该函数，并且在此函数中，如果端口已打开，我们可以进行额外的处理，例如为特定服务（HTTP、FTP、MySQL）启动Nmap脚本。
- en: Synchronous scanning
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步扫描
- en: In this example, we implemented a class that allows us to scan an IP address
    and a list of ports that are passed to the script as a parameter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们实现了一个允许我们扫描IP地址和作为参数传递给脚本的端口列表的类。
- en: In the main program, we add the necessary configuration for the treatment of
    the input parameters. We perform a loop that processes each port sent by parameter,
    and call the `nmapScan (ip, port)` method of the `NmapScanner` class.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在主程序中，我们添加了处理输入参数所需的配置。我们执行一个循环，处理每个通过参数发送的端口，并调用`NmapScanner`类的`nmapScan(ip,
    port)`方法。
- en: 'You can find the following code in the filename: `NmapScanner.py`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在文件名`NmapScanner.py`中找到以下代码：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can execute the previous script in the command line to show the options:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在命令行中执行前面的脚本以显示选项：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With the `-h` parameter, we can see the script options:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-h`参数，我们可以查看脚本选项：
- en: '![](assets/3a18d316-58bb-4571-87f6-1c07f4a8e128.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a18d316-58bb-4571-87f6-1c07f4a8e128.png)'
- en: 'This is the output, if we execute the script with the previous parameters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在使用前面的参数执行脚本时的输出：
- en: '![](assets/1e37e36d-73fd-4d0d-9f45-1e948e29b36e.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1e37e36d-73fd-4d0d-9f45-1e948e29b36e.png)'
- en: In addition to performing port scanning and returning the result by console,
    we could generate a JSON document to store the result with the ports open for
    a given host. In this case, we use the `csv()` function that returns the result
    of the scan in an easy format to collect the information we need. At the end of
    the script, we see how the call is made to the defined method, passing the IP
    and the list of ports through parameters.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 除了执行端口扫描并通过控制台返回结果外，我们还可以生成一个JSON文档来存储给定主机的开放端口的结果。在这种情况下，我们使用`csv()`函数以便以易于收集所需信息的格式返回扫描结果。在脚本的末尾，我们看到如何调用定义的方法，通过参数传递IP和端口列表。
- en: 'You can find the following code in the filename:`NmapScannerJSONGenerate.py`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在文件名`NmapScannerJSONGenerate.py`中找到以下代码：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this screenshot, we can see output of the execution of the `NmapScannerJSONGenerate`
    script:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到`NmapScannerJSONGenerate`脚本的执行输出：
- en: '![](assets/151f4d1e-e673-4c60-a8c9-6a21495607f6.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/151f4d1e-e673-4c60-a8c9-6a21495607f6.png)'
- en: Asynchronous scanning
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步扫描
- en: 'We can perform asynchronous scans using the `PortScannerAsync()` class. In
    this case, when performing the scan we can indicate an additional callback parameter
    where we define the `return` function, which would be executed at the end of the
    scan:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`PortScannerAsync()`类执行异步扫描。在这种情况下，当执行扫描时，我们可以指定一个额外的回调参数，其中我们定义`return`函数，该函数将在扫描结束时执行：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this way, we can define a `callback` function that is executed whenever Nmap
    has a result for the machine we are analyzing.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以定义一个`回调`函数，每当Nmap对我们正在分析的机器有结果时就会执行。
- en: The following script allows us to perform a scan with Nmap asynchronously so
    that the target and port are requested by input parameters. What the script has
    to do is perform a scan in the `MySQL port (3306)` asynchronously and execute
    the Nmap scripts available for the MySQL service.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本允许我们使用Nmap异步执行扫描，以便通过输入参数请求目标和端口。脚本需要做的是在`MySQL端口（3306）`上异步执行扫描，并执行MySQL服务可用的Nmap脚本。
- en: To test it, we can run it on the virtual machine, **Metasploitable2**, for which
    port `3306` is open, in addition to being able to execute Nmap scripts and obtain
    additional information about the MySQL service that is running on that vm.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试它，我们可以在虚拟机**Metasploitable2**上运行它，该虚拟机的`3306`端口是开放的，除了能够执行Nmap脚本并获取有关正在运行的MySQL服务的附加信息。
- en: 'You can find the following code in the filename: `NmapScannerAsync.py`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在文件名`NmapScannerAsync.py`中找到以下代码：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is the method that checks the port passed as a parameter and launches
    Nmap scripts related with MySQL in an asynchronous way:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检查作为参数传递的端口并以异步方式启动与MySQL相关的Nmap脚本的方法：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is our main program for requesting targets and ports as parameters, and
    calling the `nmapScan(ip,port)` function for each port:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的主程序，用于请求目标和端口作为参数，并为每个端口调用`nmapScan(ip,port)`函数：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we are going to execute **NmapScannerAsync** with target and ports parameters:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用目标和端口参数执行**NmapScannerAsync**：
- en: '![](assets/51b57cc9-9cee-40c0-be75-1d1b5ac14250.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/51b57cc9-9cee-40c0-be75-1d1b5ac14250.png)'
- en: Vulnerabilities with Nmap scripts
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nmap脚本中的漏洞
- en: In this section we review scan modes supported in the `python-nmap` module.
    We will learn how to detect the open ports of a system or network segment, as
    well as perform advanced operations to collect information about its target and
    detect vulnerabilities in the FTP service.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾`python-nmap`模块支持的扫描模式。我们将学习如何检测系统或网络段的开放端口，以及执行高级操作以收集有关其目标的信息，并检测FTP服务中的漏洞。
- en: Executing Nmap scripts to detect vulnerabilities
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行Nmap脚本以检测漏洞
- en: One of the most interesting features that Nmap has is the ability to execute
    scripts that follow the **Nmap Scripting Engine **(**NSE**) specification. Nmap
    enables you to perform vulnerability assessments and exploitations as well, thanks
    to its powerful Lua script engine. In this way, we can also execute more complex
    routines that allow us to filter information about a specific target.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap最有趣的功能之一是执行符合**Nmap脚本引擎（NSE）**规范的脚本的能力。Nmap使您能够进行漏洞评估和利用，这要归功于其强大的Lua脚本引擎。通过这种方式，我们还可以执行更复杂的例程，允许我们过滤有关特定目标的信息。
- en: 'It currently incorporates the use of scripts to check some of the most well-known
    vulnerabilities:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，它包括使用脚本来检查一些最知名的漏洞：
- en: '**Auth:** executes all your available scripts for authentication'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Auth：**执行所有可用的认证脚本'
- en: '**Default:** executes the basic scripts by default of the tool'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认：**默认情况下执行工具的基本脚本'
- en: '**Discovery:** retrieves information from the target or victim'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发现：**从目标或受害者中检索信息'
- en: '**External:** script to use external resources'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部：**使用外部资源的脚本'
- en: '**Intrusive:** uses scripts that are considered intrusive to the victim or
    target'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侵入式：**使用被认为对受害者或目标具有侵入性的脚本'
- en: '**Malware:** checks if there are connections opened by malicious codes or backdoors'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恶意软件：**检查是否有恶意代码或后门打开的连接'
- en: '**Safe:** executes scripts that are not intrusive'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全：**执行不具侵入性的脚本'
- en: '**Vuln**: discovers the most well-known vulnerabilities'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vuln：**发现最知名的漏洞'
- en: '**All:** executes absolutely all scripts with the NSE extension available'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全部：**执行所有可用的NSE扩展脚本'
- en: To detect possible vulnerabilities in the port services that are open, we can
    make use of the Nmap scripts that are available when the module is installed.
    In the case of **UNIX** machines, the scripts are in the path: `/usr/share/nmap/scripts.`
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测开放的端口服务可能存在的漏洞，我们可以利用模块安装时可用的Nmap脚本。在**UNIX**机器上，脚本位于路径：`/usr/share/nmap/scripts.`
- en: In the case of **Windows** machines, the scripts are in the path: **C:\Program
    Files (x86)\Nmap\scripts**.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Windows**机器上，脚本位于路径：**C:\Program Files (x86)\Nmap\scripts**.
- en: 'The scripts allow the programming of routines to find possible vulnerabilities
    in a given host. The scripts can be found in the URL:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本允许编程例程以查找给定主机可能存在的漏洞。脚本可以在以下URL中找到：
- en: '[https://nmap.org/nsedoc/scripts](https://nmap.org/nsedoc/scripts)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nmap.org/nsedoc/scripts](https://nmap.org/nsedoc/scripts)'
- en: There are a lot of scripts for each type of service we want to know more about.
    There are even some that allow for dictionary or brute-force attacks and that
    exploit certain vulnerabilities in some of the services and ports that the machines
    expose.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们想要了解更多的每种类型的服务，都有很多脚本。甚至有一些允许使用字典或暴力攻击，并利用机器暴露的一些服务和端口中的某些漏洞。
- en: To execute these scripts, it is necessary to pass the **--script option** within
    the `nmap` command.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行这些脚本，需要在`nmap`命令中传递**--script选项**。
- en: In this example, we execute Nmap with the script for authentications (`auth`),
    which will check if there are users with empty passwords or the existence of users
    and passwords by default.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用认证脚本（`auth`）执行Nmap，它将检查是否有空密码的用户或默认存在的用户和密码。
- en: 'With this command, it finds users and passwords in the services of MySQL and
    the web server, tomcat:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个命令，它可以在MySQL和web服务器（tomcat）的服务中找到用户和密码：
- en: '[PRE14]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this example, it is shown that **mysql port 3306** allows connection with
    the root account with an empty password. It also shows information collected from
    port `80`, such as the computer name and operating system version (Metasploitable2
    - Linux):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，显示了**mysql端口3306**允许使用空密码连接到root帐户。它还显示了从端口`80`收集的信息，例如计算机名称和操作系统版本（Metasploitable2
    - Linux）：
- en: '![](assets/90b57a41-d3b0-4a84-8c3e-267f25a4e12d.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/90b57a41-d3b0-4a84-8c3e-267f25a4e12d.png)'
- en: Another of the interesting scripts that Nmap incorporates is **discovery**,
    which allows us to know more information about the services that are running on
    the vm that we are analyzing.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap还包含的另一个有趣的脚本是**discovery**，它允许我们了解有关我们正在分析的虚拟机上运行的服务的更多信息。
- en: 'With the `discovery` option, we can obtain information about services and routes
    related with the applications that are running on the vm:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`discovery`选项，我们可以获取有关在虚拟机上运行的应用程序相关的服务和路由的信息：
- en: '![](assets/d9b6cec9-5f46-46d0-8c3d-3efff85a14f7.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d9b6cec9-5f46-46d0-8c3d-3efff85a14f7.png)'
- en: Detecting vulnerabilities in FTP service
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测FTP服务中的漏洞
- en: 'If we run the **ftp-anon script** on our target machine on port `21 `, we can
    know if the FTP service allows authentication anonymously without having to enter
    a username and password. In this case, we see how such authentication is possible
    on the FTP server:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在端口`21`上在目标机器上运行**ftp-anon脚本**，我们可以知道FTP服务是否允许匿名身份验证而无需输入用户名和密码。在这种情况下，我们看到FTP服务器上确实存在这样的身份验证：
- en: '![](assets/38c765d5-5135-4478-b027-4ff95611be2d.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/38c765d5-5135-4478-b027-4ff95611be2d.png)'
- en: In the following script, we execute the scan asynchronously so that we can execute
    it on a certain port and launch parallel scripts, so that when one of the scripts
    is finalized, the `defined` function is executed. In this case, we execute the
    scripts defined for the FTP service and each time a response is obtained from
    a script, the **`callbackFTP`** function is executed, which will give us more
    information about that service.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的脚本中，我们以异步方式执行扫描，以便我们可以在特定端口上执行扫描并启动并行脚本，因此当一个脚本完成时，将执行`defined`函数。在这种情况下，我们执行为FTP服务定义的脚本，每次从脚本获得响应时，都会执行**`callbackFTP`**函数，这将为我们提供有关该服务的更多信息。
- en: 'You can find the following code in the filename: `NmapScannerAsync_FTP.py`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在文件名`NmapScannerAsync_FTP.py`中找到以下代码：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is the method that checks the port passed as parameter and launch Nmap
    scripts related with FTP in an asynchronous way:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检查传递的端口并以异步方式启动与FTP相关的Nmap脚本的方法：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is our main program for requesting target and ports as parameters and
    for calling the `nmapScanAsync(ip,port)` function for each port:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的主程序，用于请求目标和端口作为参数，并调用`nmapScanAsync(ip,port)`函数来处理每个端口：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we are going to execute **NmapScannerAsync_fFTP** with target and ports
    parameters.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用目标和端口参数执行**NmapScannerAsync_fFTP**。
- en: In this case, we perform a scan on the FTP port (`21`) and we can see that it
    executes each one of the scripts defined for this port, and it returns us more
    information that we can use for a later attack or exploiting process.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们对FTP端口（`21`）进行扫描，我们可以看到它执行了为该端口定义的每个脚本，并返回了更多信息，我们可以在以后的攻击或利用过程中使用。
- en: 'We can obtain information about FTP vulnerable services with the execution
    of the previous script:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行上一个脚本来获取有关FTP易受攻击服务的信息：
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](assets/134612ea-bb70-4217-a4ef-9127fddd1f81.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/134612ea-bb70-4217-a4ef-9127fddd1f81.png)'
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: One of the objectives of this topic has been to find out about the modules that
    allow a port scanner to be performed on a specific domain or server. One of the
    best tools to perform port scouting in Python is python-nmap, which is a module
    that serves as a wrapper to the `nmap` command. There are alternatives, such as
    Scrapy, that also work quite well for these types of tasks and also allow us to
    look at a level lower into how these types of tools work.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题的一个目标是了解允许在特定域或服务器上执行端口扫描的模块。在Python中执行端口扫描的最佳工具之一是python-nmap，它是`nmap`命令的包装器模块。还有其他选择，比如Scrapy，也可以很好地完成这些任务，并且还允许我们更深入地了解这些工具的工作原理。
- en: In the next [chapter](0125c9f4-5653-47c1-9097-375f4891a926.xhtml), we will explore
    more about programming packages and Python modules for interacting with the Metasploit
    framework for exploiting vulnerabilities.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更多地探讨与Metasploit框架交互的编程包和Python模块，以利用漏洞。
- en: Questions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which method allows us to see the machines that have been targeted for scanning?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种方法允许我们查看已被扫描的机器？
- en: What is the way to invoke the `scan` function if we want to perform an asynchronous
    scan and also execute a script at the end of that scan?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要执行异步扫描并在扫描结束时执行脚本，调用`scan`函数的方法是什么？
- en: Which method can we use to obtain the result of the scan in dictionary format?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪种方法以字典格式获取扫描结果？
- en: What kind of `Nmap` module is used to perform scans asynchronously?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于执行异步扫描的`Nmap`模块是什么类型？
- en: What kind of `Nmap` module is used to perform scans synchronously?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于执行同步扫描的`Nmap`模块是什么类型？
- en: How can we launch a synchronous scan on a given host on a given port if we initialize
    the object with the instruction `self.nmsync = nmap.PortScanner ()`?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用指令`self.nmsync = nmap.PortScanner()`初始化对象，我们如何在给定主机和给定端口上启动同步扫描？
- en: Which method can we use to check if a host is up or not in a specific network?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用哪种方法来检查特定网络中的主机是否启动？
- en: What function is necessary to define when we perform asynchronous scans using
    the `PortScannerAsync()` class ?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`PortScannerAsync()`类进行异步扫描时，需要定义哪个函数？
- en: Which script do we need to run on port `21` if we need to  know if the FTP service
    allows authentication anonymously without having to enter a username and password?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们需要知道FTP服务是否允许匿名身份验证而无需输入用户名和密码，我们需要在端口`21`上运行哪个脚本？
- en: Which script do we need to run on port `3306` if we need to  know if the MySQL
    service allows authentication anonymously without having to enter a username and
    password?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们需要知道MySQL服务是否允许匿名身份验证而无需输入用户名和密码，我们需要在端口`3306`上运行哪个脚本？
- en: Further reading
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: In these links you will find more information about the previously-mentioned
    tools, as well as official documentation for the Metasploitable virtual machine
    that we have used for the scripts execution.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些链接中，您将找到有关先前提到的工具的更多信息，以及我们用于脚本执行的Metasploitable虚拟机的官方文档。
- en: '[http://xael.org/pages/python-nmap-en.html](http://xael.org/pages/python-nmap-en.html)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://xael.org/pages/python-nmap-en.html](http://xael.org/pages/python-nmap-en.html)'
- en: '[https://nmap.org/nsedoc/scripts](https://nmap.org/nsedoc/scripts)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://nmap.org/nsedoc/scripts](https://nmap.org/nsedoc/scripts)'
- en: '[https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide](https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide](https://metasploit.help.rapid7.com/docs/metasploitable-2-exploitability-guide)'
- en: '[https://information.rapid7.com/download-metasploitable-2017.html](https://information.rapid7.com/download-metasploitable-2017.html)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://information.rapid7.com/download-metasploitable-2017.html](https://information.rapid7.com/download-metasploitable-2017.html)'
- en: '[https://media.blackhat.com/bh-us-10/whitepapers/Vaskovitch/BlackHat-USA-2010-Fyodor-Fifield-NMAP-Scripting-Engine-wp.pdf](https://media.blackhat.com/bh-us-10/whitepapers/Vaskovitch/BlackHat-USA-2010-Fyodor-Fifield-NMAP-Scripting-Engine-wp.pdf)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://media.blackhat.com/bh-us-10/whitepapers/Vaskovitch/BlackHat-USA-2010-Fyodor-Fifield-NMAP-Scripting-Engine-wp.pdf](https://media.blackhat.com/bh-us-10/whitepapers/Vaskovitch/BlackHat-USA-2010-Fyodor-Fifield-NMAP-Scripting-Engine-wp.pdf)'
- en: 'SPARTA port scanning: [https://sparta.secforce.com](https://sparta.secforce.com)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SPARTA端口扫描：[https://sparta.secforce.com](https://sparta.secforce.com)
- en: SPARTA is a tool developed in Python that allows port scanning, pen testing,
    and security detecting for services that are opened, and it is integrated with
    the Nmap tool for port scanning. SPARTA will ask you to specify a range of IP
    addresses to scan. Once the scan is complete, SPARTA will identify any machines,
    as well as any open ports or running services.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: SPARTA是一个用Python开发的工具，允许进行端口扫描、渗透测试和安全检测，用于检测已打开的服务，并与Nmap工具集成进行端口扫描。SPARTA将要求您指定要扫描的IP地址范围。扫描完成后，SPARTA将识别任何机器，以及任何打开的端口或正在运行的服务。
