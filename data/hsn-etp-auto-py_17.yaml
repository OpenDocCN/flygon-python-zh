- en: Using the Scapy Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Scapy框架
- en: Scapy is powerful Python tool used to build and craft the packets then send
    them on the wire. You can build any type of network stream and send it on the
    wire. It can help you to test your network using different packet streams and
    manipulate the response returned from the source.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy是一个强大的Python工具，用于构建和制作数据包，然后将其发送到网络。您可以构建任何类型的网络流并将其发送到网络。它可以帮助您使用不同的数据包流测试您的网络，并操纵从源返回的响应。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the Scapy framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Scapy框架
- en: Installing Scapy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Scapy
- en: Generating packets and network streams using Scapy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Scapy生成数据包和网络流
- en: Capturing and replaying packets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获和重放数据包
- en: Understanding Scapy
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Scapy
- en: 'Scapy ([https://scapy.net](https://scapy.net)) is one of the powerful Python
    tools that is used to capture, sniff, analyze, and manipulate network packets.
    It can also build a packet structure of layered protocols and inject a wiuthib
    stream into the network. You can use it to build a wide number of protocols on
    top of each other and set the details of each field inside the protocol, or, better,
    let Scapy do its magic and choose the appropriate values so that each one can
    have a valid frame. Scapy will try to use the default values for packets if not
    overridden by users. The following values will be set automatically for each stream:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy ([https://scapy.net](https://scapy.net))是强大的Python工具之一，用于捕获、嗅探、分析和操纵网络数据包。它还可以构建分层协议的数据包结构，并将wiuthib流注入到网络中。您可以使用它在许多协议之上构建广泛的协议，并设置协议内每个字段的细节，或者更好地让Scapy发挥其魔力并选择适当的值，以便每个值都可以有一个有效的帧。如果用户没有覆盖，Scapy将尝试使用数据包的默认值。以下值将自动设置为每个流：
- en: The IP source is chosen according to the destination and routing table
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP源根据目的地和路由表选择
- en: The checksum is automatically computed
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 校验和会自动计算
- en: The source Mac is chosen according to the output interface
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源Mac根据输出接口选择
- en: The Ethernet type and IP protocol are determined by the upper layer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网类型和IP协议由上层确定
- en: Scapy can be programmed to inject a frame into a stream and to resend it. You
    can, for example, inject a 802.1q VLAN ID into a stream and resend it to execute
    attacks or analysis on the network. Also, you can visualize the conversation between
    two endpoints and graph it using `Graphviz` and `ImageMagick` modules.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy可以编程地将帧注入到流中并重新发送。例如，您可以将802.1q VLAN ID注入到流中并重新发送，以执行对网络的攻击或分析。此外，您可以使用`Graphviz`和`ImageMagick`模块可视化两个端点之间的对话并绘制图形。
- en: Scapy has its own **Domain-Specific Language** (**DSL**) that enables the user
    to describe the packet that he wants to build or manipulate and to receive the
    answer in the same structure. This works and integrates very well with Python
    built-in data types, such as lists and dictionaries. We will see in examples that
    the received packets from the network are actually a Python list, and we can iterate
    the normal list functions over them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy有自己的**领域特定语言**（**DSL**），使用户能够描述他想要构建或操纵的数据包，并以相同的结构接收答案。这与Python内置的数据类型（如列表和字典）非常好地配合和集成。我们将在示例中看到，从网络接收的数据包实际上是一个Python列表，我们可以对它们进行常规列表函数的迭代。
- en: Installing Scapy
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Scapy
- en: Scapy supports both Python 2.7.x and 3.4+, starting from Scapy version 2.x.
    However, for versions lower than 2.3.3, Scapy needs Python 2.5 and 2.7, or 3.4+
    for versions after that. Since we already installed that latest Python version,
    it should be fine to run the latest version of Scapy without a problem.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy支持Python 2.7.x和3.4+，从Scapy版本2.x开始。但是，对于低于2.3.3的版本，Scapy需要Python 2.5和2.7，或者3.4+用于之后的版本。由于我们已经安装了最新的Python版本，应该可以毫无问题地运行最新版本的Scapy。
- en: Also, Scapy has an older version (1.x), which is deprecated and doesn't provide
    support for Python 3 and works only on Python 2.4.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Scapy还有一个较旧的版本（1.x），已经不再支持Python 3，仅在Python 2.4上运行。
- en: Unix-based systems
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于Unix的系统
- en: 'To get the latest and greatest version, you need to use python pip:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取最新版本，您需要使用python pip：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output should look something like the following screenshot:![](../images/00207.jpeg)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下屏幕截图：![](../images/00207.jpeg)
- en: 'To verify that Scapy is installed successfully, access the Python console and
    try to import the `scapy` module into it. If no import error is reported back
    to the console then the installation completed successfully:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证Scapy是否成功安装，请访问Python控制台并尝试将`scapy`模块导入其中。如果控制台没有报告任何导入错误，则安装已成功完成：
- en: '![](../images/00208.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00208.jpeg)'
- en: 'Some additional packages are required to visualize the conversation and to
    capture the packets. Use the following commands depending on your platform to
    install the additional packages:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一些附加软件包来可视化对话和捕获数据包。根据您的平台使用以下命令安装附加软件包：
- en: Installing in Debian and Ubuntu
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Debian和Ubuntu上安装
- en: 'Run the following command to install additional packages:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装附加软件包：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installing in Red Hat/CentOS
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Red Hat/CentOS上安装
- en: 'Run the following command to install additional packages:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装附加软件包：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You may need to install `epel` repository on a CentOS-based system and update
    the system if you don't find any of the preceding packages available in the main
    repository.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在基于CentOS的系统上找不到上述软件包中的任何一个，请安装`epel`存储库并更新系统。
- en: Windows and macOS X Support
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows和macOS X支持
- en: Scapy is built and design to run on linux-based system. However it also can
    run on other operating systems. You can install and port it on both windows ported
    on both Windows and macOS, with some limitations on each platform. For a Windows-based
    system, you basically need to remove the WinPcap driver and use the Npcap driver
    instead (don't install both versions at the same time to avoid any conflict issues).
    You can read more about Windows installation at [http://scapy.readthedocs.io/en/latest/installation.html#windows](http://scapy.readthedocs.io/en/latest/installation.html#windows).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy是专为基于Linux的系统构建和设计的。但它也可以在其他操作系统上运行。您可以在Windows和macOS上安装和移植它，每个平台都有一些限制。对于基于Windows的系统，您基本上需要删除WinPcap驱动程序，并改用Npcap驱动程序（不要同时安装两个版本，以避免任何冲突问题）。您可以在[http://scapy.readthedocs.io/en/latest/installation.html#windows](http://scapy.readthedocs.io/en/latest/installation.html#windows)上阅读有关Windows安装的更多信息。
- en: For macOS X, you will need to install some python bindings and use the libdnet
    and libpcap libraries. Full installation steps are available at [http://scapy.readthedocs.io/en/latest/installation.html#mac-os-x](http://scapy.readthedocs.io/en/latest/installation.html#mac-os-x).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS X，您需要安装一些Python绑定并使用libdnet和libpcap库。完整的安装步骤可在[http://scapy.readthedocs.io/en/latest/installation.html#mac-os-x](http://scapy.readthedocs.io/en/latest/installation.html#mac-os-x)上找到。
- en: Generating packets and network streams using Scapy
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Scapy生成数据包和网络流
- en: 'As we mentioned before, Scapy has its own DSL language, which is integrated
    with python. Also, you can access the Scapy console directly and start to send
    and receive packets directly from the Linux shell:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Scapy有自己的DSL语言，与Python集成。此外，您可以直接访问Scapy控制台，并开始直接从Linux shell发送和接收数据包：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The output of the preceding command is as follows:![](../images/00209.jpeg)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出如下：![](../images/00209.jpeg)
- en: Notice there are a couple of warning messages about some missing *optional*
    packages, such as `matplotlib` and `PyX`, but this should be fine and won't affect
    the Scapy core functions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有一些关于一些缺少的*可选*软件包的警告消息，例如`matplotlib`和`PyX`，但这应该没问题，不会影响Scapy的核心功能。
- en: 'We can start first by checking the supported protocols inside scapy. Run the `ls()`
    function to list all supported protocols:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以首先通过运行`ls()`函数来检查Scapy中支持的协议。列出所有支持的协议：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output is quite lengthy and will span multiple pages if posted here, so
    you can take a quick look on the Terminal instead to check it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 输出非常冗长，如果在此处发布，将跨越多个页面，因此您可以快速查看终端，以检查它。
- en: Now let's develop hello world application and run it using SCAPY. The program
    will send a simple ICMP packet to server's gateway. I installed a Wireshark and
    configured it to listen to a network interface that will receive a stream from
    the automation server (which hosts Scapy).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开发一个hello world应用程序，并使用SCAPY运行它。该程序将向服务器的网关发送一个简单的ICMP数据包。我安装了Wireshark并配置它以监听将从自动化服务器（托管Scapy）接收流的网络接口。
- en: 'Now, on the Scapy terminal, execute the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Scapy终端上，执行以下代码：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Return to Wireshark, and you should see the communication:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到Wireshark，你应该看到通信：
- en: '![](../images/00210.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00210.jpeg)'
- en: 'Let''s analyze the command that Scapy executes:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析Scapy执行的命令：
- en: '**Send**: This is a built-in function in Scapy **Domain Specific Language** (**DSL**)
    that instructs Scapy to send a single packet (and doesn''t listen for any response
    back; it just sends one packet and exits).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Send：**这是Scapy **Domain Specific Language** (**DSL**)中的内置函数，指示Scapy发送单个数据包（并不监听任何响应；它只发送一个数据包并退出）。'
- en: '**IP:** Now, inside this class, we will start building packet layers. Starting
    with the IP layer, we need to specify the destination host that will receive the
    packet (in that case, we use the `dst` argument to specify the destination). Note
    also that we can specify the source IP in the `src` argument; however, Scapy will
    consult the host routing table and find the suitable source IP and put it in the
    packet. You can provide additional parameters, such as **time to live** (**TTL**),
    and Scapy will override the default one.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP：**现在，在这个类中，我们将开始构建数据包层。从IP层开始，我们需要指定将接收数据包的目标主机（在这种情况下，我们使用`dst`参数来指定目的地）。还要注意，我们可以在`src`参数中指定源IP；但是，Scapy将查询主机路由表并找到合适的源IP，并将其放入数据包中。您可以提供其他参数，例如**生存时间**（**TTL**），Scapy将覆盖默认值。'
- en: '**/** : Although it looks like the normal division operator used in Python,
    it''s used in Scapy DSL to differentiate between packet layers and stack them
    over each other.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/**：虽然它看起来像是Python中常用的普通除法运算符，但在Scapy DSL中，它用于区分数据包层，并将它们堆叠在一起。'
- en: '**ICMP():** A built-in class used to create an ICMP packet with a default value.
    One of the values that could be provided to the function is the ICMP type, which
    determines the message type: `echo`, `echo reply`, `unreachable`, and so on.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ICMP():**用于创建具有默认值的ICMP数据包的内置类。可以向函数提供的值之一是ICMP类型，它确定消息类型：`echo`，`echo reply`，`unreachable`等。'
- en: '**Welcome to Enterprise Automation Course:** If a string is injected into the
    ICMP payload. Scapy will automatically convert it to a suitable format.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**欢迎来到企业自动化课程：**如果将字符串注入ICMP有效载荷中，Scapy将自动将其转换为适当的格式。'
- en: Note that we didn't specify the Ethernet layer in the stack and didn't provide
    any mac addresses (either source or destination). This is again filled by default
    in scapy to create a valid frame. It will automatically check the host ARP table
    and find the mac address for the source interface (and destination also, if it
    exists), them format then into an Ethernet frame.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们没有在堆栈中指定以太网层，并且没有提供任何mac地址（源或目的地）。这在Scapy中默认填充，以创建一个有效的帧。它将自动检查主机ARP表，并找到源接口的mac地址（如果存在，也是目的地），然后将它们格式化为以太网帧。
- en: 'A final thing to note before moving on to the next example is that you can
    use the same `ls()` function we used before to list all supported protocols to
    get the default values for each protocol, then set it to any other value when
    we call the protocol:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一个示例之前，需要注意的最后一件事是，您可以使用与我们之前用于列出所有支持的协议的`ls()`函数相同的函数，以获取每个协议的默认值，然后在调用协议时将其设置为任何其他值。
- en: '![](../images/00211.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00211.jpeg)'
- en: 'Let''s now do something more complex (and evil!). Assume we have two routers
    that form VRRP relationships between each other, and we need to to break this
    relationship to become the new master, or at least create a flapping issue in
    the network, as in the following topology:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们做一些更复杂（和邪恶的）事情！假设我们有两台路由器之间形成VRRP关系，并且我们需要打破这种关系以成为新的主机，或者至少在网络中创建一个抖动问题，如下拓扑图所示：
- en: '![](../images/00212.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00212.jpeg)'
- en: 'Recall that routers configured to run VRRP join to multicast address (`255.0.0.18`)
    in order to receive the advertisements from other routers. The destination MAC
    address for the VRRP packet should contain the VRRP group number in last two numbers.
    Also it contains the router priority used in election process between routers.
    We will build a Scapy script that sends a VRRP announcement with a higher priority
    than is configured in the network. This will cause our Scapy server to be elected
    as the new master:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，配置为运行VRRP的路由器加入多播地址（`255.0.0.18`）以接收其他路由器的广告。VRRP数据包的目标MAC地址应该包含最后两个数字的VRRP组号。它还包含在路由器之间选举过程中使用的路由器优先级。我们将构建一个Scapy脚本，该脚本将发送一个具有比网络中配置的更高优先级的VRRP通告。这将导致我们的Scapy服务器被选为新的主机：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中：
- en: First we imported some needed layers that we stacked over each other from the `scapy.layers`
    module. For example, the `inet` module contains the layers `IP()` , `Ether()`,
    `ARP()`, `ICMP()`, and so on.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们从`scapy.layers`模块中导入了一些需要的层，我们将这些层叠加在一起。例如，`inet`模块包含了`IP()`、`Ether()`、`ARP()`、`ICMP()`等层。
- en: Also, we will need the VRRP layers, which could be imported from `scapy.layers.vrrp`.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，我们还需要VRRP层，可以从`scapy.layers.vrrp`中导入。
- en: Second, we will build a VRRP packet and store it in the `vrrp_packet` variable.
    This packet contains the VRRP group number in the mac address inside ethernet
    frame . The multicast address will be inside the IP layer. Also we will configure
    a higher priority number inside the VRRP layer. That way we will have a valid
    VRRP announcement and router will accept it. We provided each layer with information
    such as the destination mac address (VRRP MAC + Group number) and the multicast
    IP (`225.0.0.18`).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，我们将构建一个VRRP数据包并将其存储在`vrrp_packet`变量中。该数据包包含以太网帧内的mac地址中的VRRP组号。多播地址将位于IP层内。此外，我们将在VRRP层内配置一个更高的优先级号码。这样我们将拥有一个有效的VRRP通告，路由器将接受它。我们为每个层提供了信息，例如目标mac地址（VRRP
    MAC +组号）和多播IP（`225.0.0.18`）。
- en: Finally, we used the `sendp()` function and provided it with a crafted `vrrp_packet`.
    The `sendp()` function will send a packet at layer 2, unlike the `send()` function,
    which we used in the previous example to send packets, but at layer 3\. The `sendp()` function
    won't try to resolve the hostname like the `send()` function and will only operate
    at layer 2\. Also, since we need to send this announcement continuously, we configured
    both `loop` and `inter` arguments to send announcements every 2 seconds.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们使用了`sendp()`函数，并向其提供了一个精心制作的`vrrp_packet`。`sendp()`函数将在第2层发送数据包，与我们在上一个示例中使用的`send()`函数发送数据包的方式不同，后者是在第3层发送数据包。`sendp()`函数不会像`send()`函数那样尝试解析主机名，并且只会在第2层操作。此外，由于我们需要连续发送此通告，因此我们配置了`loop`和`inter`参数，以便每2秒发送一次通告。
- en: 'The script output is:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出为：
- en: '![](../images/00213.jpeg)You can combine this attack with ARP poisoning and
    VLAN hopping attacks so you can change the mac address in the layer 2, switch
    to the Scapy server MAC address, and perform a **m****an in the middle** (**MITM**)
    attack.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00213.jpeg)您可以将此攻击与ARP欺骗和VLAN跳跃攻击相结合，以便在第2层更改mac地址，切换到Scapy服务器的MAC地址，并执行**中间人**（**MITM**）攻击。'
- en: 'Scapy also contains some classes that perform scan. For example, you can execute
    an ARP scan on the network range by using `arping()` and specifying the IP address
    in regex format inside it. Scapy will send an ARP request to all hosts on these
    subnets and inspect the reply:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy还包含一些执行扫描的类。例如，您可以使用`arping()`在网络范围内执行ARP扫描，并在其中指定IP地址的正则表达式格式。Scapy将向这些子网上的所有主机发送ARP请求并检查回复：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../images/00214.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00214.jpeg)'
- en: 'The script output is:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出为：
- en: '![](../images/00215.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00215.jpeg)'
- en: According to received packets, only one host is responding back to SCAPY meaning
    it's only host on the scanned subnet. The host mac and IP addresses are listed
    in the reply also
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 根据接收到的数据包，只有一个主机回复SCAPY，这意味着它是扫描子网上唯一的主机。回复中列出了主机的mac地址和IP地址。
- en: Capturing and replaying packets
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获和重放数据包
- en: Scapy has the ability to listen to the network interface and capture all incoming
    packets on it. It can write it on a `pcap` file in the same way that `tcpdump`
    works, but Scapy provides additional functions that can read and replay a `pcap`
    file, in the network again.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy具有监听网络接口并捕获其所有传入数据包的能力。它可以以与`tcpdump`相同的方式将其写入`pcap`文件，但是Scapy提供了额外的函数，可以再次读取和重放`pcap`文件。
- en: Starting with a simple packet replay, we will instruct Scapy to read a normal
    `pcap` file captured from the network (either using `tcpdump` or Scapy itself)
    and send it again to the network. This is very useful if we need to test the behavior
    of the network if a specific traffic pattern travels through it. For example,
    we may have a network firewall configured to block FTP communication. We can test
    the functionality of the firewall by hitting it with FTP data replayed from Scapy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从简单的数据包重放开始，我们将指示Scapy读取从网络中捕获的正常`pcap`文件（使用`tcpdump`或Scapy本身）并将其再次发送到网络。如果我们需要测试网络的行为是否通过特定的流量模式，这将非常有用。例如，我们可能已经配置了网络防火墙以阻止FTP通信。我们可以通过使用Scapy重放的FTP数据来测试防火墙的功能。
- en: 'In this example, we have the FTP captured `pcap` file and we need to replay
    it to the network:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有捕获的FTP `pcap`文件，我们需要将其重新发送到网络：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `PcapReader()` will take the `pcap` file as an input and analyze it to get
    each packet alone and add it as an item inside the `pkts` list. Now we can iterate
    over the list and show each packet content.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`PcapReader()`将`pcap`文件作为输入，并对其进行分析，以单独获取每个数据包，并将其作为`pkts`列表中的一个项目添加。现在我们可以遍历列表并显示每个数据包的内容。'
- en: 'The script output is:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出为：
- en: '![](../images/00216.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00216.jpeg)'
- en: 'Also, you can get specific layer information via the `get_layer()` function
    that accesses packet layers. For example, if we were interested in getting the
    raw data without the header so we can build the transmitted file, we could use
    the following script to get the required data in hex then convert it to ASCII
    later:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以通过`get_layer()`函数获取特定层的信息，该函数访问数据包层。例如，如果我们有兴趣获取没有标头的原始数据，以便构建传输文件，我们可以使用以下脚本获取十六进制中所需的数据，然后稍后将其转换为ASCII：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that we have to surround the `get_layer()` method with a try-except clause
    as some layers don't contain the raw data (such as FTP control messages). Scapy
    will throw the error and the script will exit. Also, we can rewrite the script
    as an `if` clause that will add content to `ftp_data` only if the packet has the
    raw layer in it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们必须用try-except子句包围`get_layer()`方法，因为某些层不包含原始数据（例如FTP控制消息）。Scapy会抛出错误，脚本将退出。此外，我们可以将脚本重写为一个`if`子句，只有在数据包中包含原始层时才会向`ftp_data`添加内容。
- en: To avoid any errors while reading the `pcap` file, make sure you save (or export)
    your `pcap` file as Wireshark/tcpdump format, as shown here, and not the default
    format:![](../images/00217.jpeg)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在读取`pcap`文件时出现任何错误，请确保将您的`pcap`文件保存（或导出）为Wireshark/tcpdump格式，如下所示，而不是默认格式：![](../images/00217.jpeg)
- en: Injecting data inside packets
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向数据包中注入数据
- en: We can manipulate the packet and change its contents before replaying it back
    to the network. Since our packets are actually stored as items inside the list,
    we can iterate over those items and replace specific information. For example,
    we can change mac addresses, IP addresses, or add additional layers to each packet
    or for specific packets matching a condition. However, we should note that manipulating
    packets in specific layers such as the IP and TCP and changing the content will
    result in an invalid checksum for the whole layer and the receiver may drop the
    packet for that reason.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在将数据包重新发送到网络之前，我们可以操纵数据包并更改其内容。由于我们的数据包实际上存储为列表中的项目，我们可以遍历这些项目并替换特定信息。例如，我们可以更改MAC地址、IP地址，或者为每个数据包或符合特定条件的特定数据包添加附加层。但是，我们应该注意，在特定层（如IP和TCP）中操纵数据包并更改内容将导致整个层的校验和无效，接收方可能因此丢弃数据包。
- en: Scapy has an amazing feature (yes I know, I keep saying amazing many times but
    Scapy really is an awesome tool). It will automatically calculate the checksum
    for us based on the new content if we delete the original one in the `pcap` file.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy有一个令人惊奇的功能（是的，我知道，我多次说了令人惊奇，但Scapy确实是一个很棒的工具）。如果我们在`pcap`文件中删除原始内容，它将基于新内容自动为我们计算校验和。
- en: 'So, we will modify the previous script and change a few packet parameters,
    then rebuild the checksum before sending the packets to the network:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将修改上一个脚本并更改一些数据包参数，然后在发送数据包到网络之前重新构建校验和：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the previous script:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个脚本中：
- en: We used the `PcapReader()` class to read the content of the FTP `pcap` file
    and store the packets in a `pkts` variable.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`PcapReader()`类来读取FTP `pcap`文件的内容，并将数据包存储在`pkts`变量中。
- en: Then we iterated over the packet and assigned the payload to`new_pkt` so we
    could manipulate the content.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们遍历数据包并将有效载荷分配给`new_pkt`，以便我们可以操纵内容。
- en: Remember, the packet itself is considered as an object from the class. We can
    access the `src` and `dst` members and set them to any desired values. Here, we
    set the destination to the gateway and the source to a different value than the
    original packet.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请记住，数据包本身被视为来自该类的对象。我们可以访问`src`和`dst`成员，并将它们设置为任何所需的值。在这里，我们将目的地设置为网关，将源设置为与原始数据包不同的值。
- en: Setting a new IP value will invalidate the checksum, so we deleted both the
    IP and TCP checksum using the `del` keyword. Scapy will recalculate them again
    based on the new packet contents.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置新的IP值将使校验和无效，因此我们使用`del`关键字删除了IP和TCP校验和。Scapy将根据新数据包内容重新计算它们。
- en: Finally, we appended the `new_pkt` to the empty `p_out` list and sent it using
    the `send()` function. Notice that we can specify the exit interface in the send
    function or just leave it and Scapy will consult the host routing table; it will
    get the correct exit interface per packet.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们将`new_pkt`附加到空的`p_out`列表中，并使用`send()`函数发送它。请注意，我们可以在发送函数中指定退出接口，或者只需离开它，Scapy将查询主机路由表；它将为每个数据包获取正确的退出接口。
- en: 'The script output is:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出为：
- en: '![](../images/00218.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00218.jpeg)'
- en: 'Also, if we still run the Wireshark in the gateway, we will notice that Wireshark
    captures the `ftp` packet stream with the checksum value set after recalculation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们仍然在网关上运行Wireshark，我们会注意到Wireshark捕获了在重新计算后设置校验和值的`ftp`数据包流：
- en: '![](../images/00219.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00219.jpeg)'
- en: Packet sniffing
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据包嗅探
- en: 'Scapy has a built-in packet capture function called `sniff()`. By default,
    it will monitor all interfaces and capture all packets if you don''t specify any
    filters or a certain interface:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Scapy有一个名为`sniff()`的内置数据包捕获函数。默认情况下，如果您不指定任何过滤器或特定接口，它将监视所有接口并捕获所有数据包：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The script output is:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出为：
- en: '![](../images/00220.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00220.jpeg)'
- en: 'You can of course provide filters and specific interfaces to monitor whether
    the condition is matched. For example, in the preceding output we can see a mix
    of ICMP, TCP, SSH, and DHCP traffic hitting all interfaces. If we''re interested
    only in getting ICMP traffic on eth0, then we can provide the filter and `iface`
    arguments to sniff the function, and it will only filter all traffic and record
    only the ICMP:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以提供过滤器和特定接口来监视是否满足条件。例如，在前面的输出中，我们可以看到混合了ICMP、TCP、SSH和DHCP流量命中了所有接口。如果我们只对在eth0上获取ICMP流量感兴趣，那么我们可以提供过滤器和`iface`参数来嗅探函数，并且它将只过滤所有流量并记录只有ICMP的数据：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The script output is:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下：
- en: '![](../images/00221.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00221.jpeg)'
- en: Notice how we capture only the ICMP communications on eth0 interfaces, and all
    other packets are discarded due to the filter applied on them. The *iface* value
    accepts a single interface that we used in the script or a list of interfaces
    to monitor them.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们只捕获eth0接口上的ICMP通信，所有其他数据包都由于应用在它们上的过滤器而被丢弃。*iface*值接受我们在脚本中使用的单个接口或要监视它们的接口列表。
- en: 'One of the advanced features of sniff is `stop_filter`, which is a Python function
    applied to each packet to determine if we have to stop the capture after that
    packet. For example, if we set `stop_filter = lambda x: x.haslayer(TCP)` then
    we will stop the capture once we hit a packet with a TCP layer. Also, the `store`
    option allows us to store the packets in the memory (which is by default enabled)
    or discard them after applying a specific function on each packet. This is a great
    feature if you''re getting real-time traffic from the wire to SCAPY and don''t
    want to write them to memory, if you set the store argument to false inside the
    sniff function, then SCAPY will apply any custom function you developed before
    (to get some information from packet for example or re-send them to different
    destination..etc) then won''t store the original packet in the memory and will
    discard it. This will save some memory resources during sniffing.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`sniff`的高级功能之一是`stop_filter`，它是应用于每个数据包的Python函数，用于确定我们是否必须在该数据包之后停止捕获。例如，如果我们设置`stop_filter
    = lambda x: x.haslayer(TCP)`，那么一旦我们命中具有TCP层的数据包，我们将停止捕获。此外，`store`选项允许我们将数据包存储在内存中（默认情况下已启用）或在对每个数据包应用特定函数后丢弃它们。如果您正在从SCAPY中获取来自线缆的实时流量，并且不希望将其写入内存，那么将`sniff`函数中的store参数设置为false，然后SCAPY将在丢弃原始数据包之前应用您开发的任何自定义函数（例如获取数据包的一些信息或将其重新发送到不同的目的地等）。这将在嗅探期间节省一些内存资源。'
- en: Writing the packets to pcap
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据包写入pcap
- en: 'Finally, we can write our sniffed packets to a standard `pcap` file and open
    it with Wireshark as usual. This happens via a simple `wrpcap()` function that
    writes the list of packets to a `pcap` file. The `wrpcap()` function accepts two
    arguments—the first one is the full path to a file location, and the second is
    the packet list captured before using the `sniff()` function:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将嗅探到的数据包写入标准的`pcap`文件，并像往常一样使用Wireshark打开它。这是通过一个简单的`wrpcap()`函数实现的，它将数据包列表写入`pcap`文件。`wrpcap()`函数接受两个参数——第一个是文件位置的完整路径，第二个是在使用`sniff()`函数之前捕获的数据包列表：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to leverage the Scapy framework to build any
    type of packet containing any network layer and populated it with our values.
    Also, we saw how to capture packets on the interface and replay them.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何利用Scapy框架构建任何类型的数据包，包含任何网络层，并用我们的值填充它。此外，我们还看到了如何在接口上捕获数据包并重放它们。
