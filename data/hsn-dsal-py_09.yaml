- en: Searching
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索
- en: One of the most important operations for all data structures is searching for
    the elements from the stored data. There are various methods to search for an
    element in the data structures; in this chapter, we shall explore the different
    strategies that can be used to find elements in a collection of items.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据结构中最重要的操作之一是从存储的数据中搜索元素。有各种方法可以在数据结构中搜索元素；在本章中，我们将探讨可以用来在项目集合中查找元素的不同策略。
- en: The searching operation is a very important operation for sorting. It is virtually
    impossible to sort the data without using some variant of a search operation.
    The sorting algorithm will be fast if the searching algorithm is efficient. In
    this chapter, we will be discussing different searching algorithms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索操作对于排序非常重要。如果没有使用某种搜索操作的变体，几乎不可能对数据进行排序。如果搜索算法有效，排序算法将会很快。在本章中，我们将讨论不同的搜索算法。
- en: The performance of a search operation is heavily influenced by whether the items
    about to be searched have already been sorted or not, as we will see in the subsequent
    sections.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索操作的性能受到即将搜索的项目是否已经排序的影响，我们将在后续章节中看到。
- en: 'By the end of this chapter, you will be able to do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够做到以下事情：
- en: Understand various searching algorithms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解各种搜索算法
- en: Understand the implementation of the popular searching algorithm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解流行搜索算法的实现
- en: Understand the implementation of the binary searching algorithm
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解二分搜索算法的实现
- en: Understand the implementation of interpolation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解插值的实现
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The source code used in this chapter is available at the following GitHub link:
    [https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Python-3.7-Second-Edition/tree/master/Chapter09](https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Python-3.7-Second-Edition/tree/master/Chapter09).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的源代码可在以下GitHub链接找到：[https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Python-3.7-Second-Edition/tree/master/Chapter09](https://github.com/PacktPublishing/Hands-On-Data-Structures-and-Algorithms-with-Python-3.7-Second-Edition/tree/master/Chapter09)。
- en: Introduction to searching
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索简介
- en: 'Searching algorithms are categorized into two broad types:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索算法分为两种类型：
- en: The searching algorithm is applied to the list of items that are already sorted;
    that is, applied to the ordered set of items
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将搜索算法应用于已经排序的项目列表；即应用于有序的项目集
- en: The searching algorithm is applied to the unordered set of items, which are
    not sorted
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将搜索算法应用于未排序的项目集
- en: Linear search
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性搜索
- en: The *searching* operation is to find out a given item from the stored data.
    If the searched item is available in the stored list then it returns the index
    position where it is located, or else it returns that the item is not found. The
    simplest approach to search for an item in a list is the linear search method,
    in which we look for items one by one in the whole list.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*搜索*操作是为了从存储的数据中找出给定的项目。如果存储的列表中存在搜索的项目，则返回其所在的索引位置，否则返回未找到该项目。在列表中搜索项目的最简单方法是线性搜索方法，其中我们在整个列表中逐个查找项目。'
- en: 'Let''s take an example of `5` list items `{60, 1, 88, 10, 11, 100}` to understand
    the linear search algorithm, as shown in the following diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以`5`个列表项`{60, 1, 88, 10, 11, 100}`为例，以了解线性搜索算法，如下图所示：
- en: '![](Images/03ac28e0-5e8e-46c6-89c4-92f96fb74625.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/03ac28e0-5e8e-46c6-89c4-92f96fb74625.png)'
- en: The preceding list has elements that are accessible through the list index.
    To find an element in the list, we employ the linear searching technique. This
    technique traverses the list of elements by using the index to move from the beginning
    of the list to the end. Each element is examined, and if it does not match the
    search item, the next item is examined. By hopping from one item to the next,
    the list is traversed sequentially.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的列表中的元素可以通过列表索引访问。为了在列表中找到一个元素，我们使用线性搜索技术。该技术通过使用索引遍历元素列表，从列表的开头移动到末尾。每个元素都会被检查，如果它与搜索项不匹配，则会检查下一个项目。通过从一个项目跳到下一个项目，列表被顺序遍历。
- en: We use list items with integer values in this chapter to help you understand
    the concept, since integers can be compared easily; however, a list item can hold
    any other data type as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用整数值的列表项来帮助您理解概念，因为整数可以很容易地进行比较；但是，列表项也可以保存任何其他数据类型。
- en: Unordered linear search
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无序线性搜索
- en: The linear search approach depends on how the list items are stored—whether
    they are sorted in order or stored without any order. Let's first see if a list
    has items that are not sorted.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 线性搜索方法取决于列表项的存储方式-它们是否按顺序排序或无序存储。让我们首先看看列表是否包含未排序的项目。
- en: Consider an example list that contains elements 60, 1, 88, 10, and 100—an unordered list.
    The items in the list have no order by magnitude. To perform a search operation
    on such a list, one proceeds from the very first item and compares that with the
    search item. If the search item is not matched then the next element in the list
    is examined. This continues till we reach the last element in the list or until
    a match is found.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个包含元素60、1、88、10和100的列表-一个无序列表。列表中的项目没有按大小排序。要在这样的列表上执行搜索操作，首先从第一个项目开始，将其与搜索项进行比较。如果搜索项不匹配，则检查列表中的下一个元素。这将继续进行，直到我们到达列表中的最后一个元素或找到匹配项为止。
- en: 'Here is the implementation in Python for the linear search on an unordered
    list of items:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Python中对无序项目列表进行线性搜索的实现：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `search` function takes two parameters; the first is the list that holds
    our data, and the second parameter is the item that we are looking for, called the
    **search term**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`search`函数接受两个参数；第一个是保存我们数据的列表，第二个参数是我们正在寻找的项目，称为**搜索项**。'
- en: 'The size of the array is obtained and determines the number of times the `for`
    loop is executed. The following code depicts this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 获取数组的大小并确定`for`循环执行的次数。以下代码描述了这一点：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: On every pass of the `for` loop, we test if the search term is equal to the
    indexed item. If this is true, then there is a match, and there is no need to
    proceed further with the search. We return the index position where the searched
    item is found in the list.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环的每次通过中，我们测试搜索项是否等于索引项。如果为真，则表示匹配，无需继续搜索。我们返回在列表中找到搜索项的索引位置。
- en: If the loops run to the end of the list with no match found, then `None` is
    returned to signify that there is no such item in the list.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果循环运行到列表的末尾而没有找到匹配项，则返回`None`，表示列表中没有这样的项目。
- en: In an unordered list of items, there is no guiding rule for how elements are
    inserted. Thus, it impacts the way the search is performed. As such, we must visit
    all the items in the list one after the other. As can be seen in the following
    diagram, the search for the term **66** starts from the first element and moves
    to the next element in the list.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在无序的项目列表中，没有指导规则来插入元素。因此，它影响了搜索的执行方式。因此，我们必须依次访问列表中的所有项目。如下图所示，对术语**66**的搜索从第一个元素开始，并移动到列表中的下一个元素。
- en: 'Thus, the first **60** is compared with **66**, and if it is not equal, we
    compare **66** with the next element **1**, then **88**, and so on till we find
    the search term in the list:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先将**60**与**66**进行比较，如果不相等，我们将**66**与下一个元素**1**进行比较，然后是**88**，依此类推，直到在列表中找到搜索项为止：
- en: '![](Images/ba66df36-c90d-478a-a31d-9baa5b3407b0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ba66df36-c90d-478a-a31d-9baa5b3407b0.png)'
- en: The unordered linear search has a worst-case running time of `O(n)`. All the
    elements may need to be visited before finding the search term. The worst-case
    scenario will be when the search term is located at the last position of the list.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无序线性搜索的最坏情况运行时间为`O(n)`。在找到搜索项之前，可能需要访问所有元素。最坏情况是搜索项位于列表的最后位置。
- en: Ordered linear search
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有序线性搜索
- en: Another case in a linear search is when the list elements have been sorted;
    then our search algorithm can be improved. Assuming the elements have been sorted
    in ascending order, the search operation can take advantage of the ordered nature
    of the list to make the search more efficient.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 线性搜索的另一种情况是，当列表元素已经排序时，我们的搜索算法可以得到改进。假设元素已按升序排序，则搜索操作可以利用列表的有序性使搜索更加高效。
- en: 'The algorithm is reduced to the following steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 算法简化为以下步骤：
- en: Move through the list sequentially
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按顺序移动列表
- en: If a search item is greater than the object or item currently under inspection
    in the loop, then quit and return `None`
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果搜索项大于循环中当前检查的对象或项，则退出并返回`None`
- en: In the process of iterating through the list, if the search term is greater
    than the current item, then there is no need to continue with the search.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在遍历列表的过程中，如果搜索项大于当前项，则无需继续搜索。
- en: 'Let''s consider an example to see how this works. We take a list of items,
    as shown in the following diagram, and we want to search term `5`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个示例来看看这是如何工作的。我们拿一个项目列表，如下图所示，并且我们想搜索术语`5`：
- en: '![](Images/409f41bf-abb5-425d-a412-05fa3f565249.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/409f41bf-abb5-425d-a412-05fa3f565249.png)'
- en: When the search operation starts and the first element is compared with the search
    term (**5**), no match is found. However, there are more elements in the list
    so the search operation moves on to examine the next element. A more compelling
    reason to move on in the sorted list is that we know the search item may match
    any of the elements greater than **2**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当搜索操作开始并且第一个元素与搜索项（**5**）进行比较时，找不到匹配项。但是，列表中还有更多元素，因此搜索操作继续检查下一个元素。在排序列表中继续前进的更有力的原因是，我们知道搜索项可能与大于**2**的任何元素匹配。
- en: After the fourth comparison, we come to the conclusion that the search term
    cannot be found in any position later in the list where **6** is located. In other
    words, if the current item is greater than the search term, then it means there
    is no need to further search the list.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 经过第四次比较，我们得出结论，搜索项无法在列表中后面的任何位置找到**6**所在的位置。换句话说，如果当前项大于搜索项，则表示无需进一步搜索列表。
- en: 'Here is the implementation of the linear search when the list is already sorted:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是列表已排序时线性搜索的实现：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, the `if` statement now caters for checking if the search
    item is found in the list or not. `elif` tests the condition where `ordered_list[i]
    > term`. The method returns `None` if the comparison evaluates to `True`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`if`语句现在用于检查搜索项是否在列表中找到。`elif`测试条件为`ordered_list[i] > term`。如果比较结果为`True`，则该方法返回`None`。
- en: The last line in the method returns `None` because the loop may go through the
    list and still the search item is not matched in the list.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 方法中的最后一行返回`None`，因为循环可能会遍历列表，但搜索项仍未在列表中匹配。
- en: The worst-case time complexity of an ordered linear search is `O(n)`. In general,
    this kind of search is considered inefficient especially when dealing with large
    datasets.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有序线性搜索的最坏情况时间复杂度为`O(n)`。一般来说，这种搜索被认为是低效的，特别是在处理大型数据集时。
- en: Binary search
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制搜索
- en: A binary search is a search strategy used to find elements within a **sorted**
    array or list; thus, the binary search algorithm finds a given item from the given
    sorted list of items. It is a very fast and efficient algorithm to search an element,
    and the only drawback is that we need a sorted list. The worst-case running time
    complexity of a binary search algorithm is `O(log n)` whereas the linear search
    has `O(n)`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制搜索是一种搜索策略，用于在**排序**的数组或列表中查找元素；因此，二进制搜索算法从给定的排序项目列表中找到给定的项目。这是一种非常快速和高效的搜索元素的算法，唯一的缺点是我们需要一个排序的列表。二进制搜索算法的最坏情况运行时间复杂度为`O(log
    n)`，而线性搜索的复杂度为`O(n)`。
- en: A binary search algorithm works as follows. It starts searching the item by
    dividing the given list by half. If the search item is smaller than the middle
    value then it will look for the searched item only in the first half of the list,
    and if the search item is greater than the middle value it will only look at the
    second half of the list. We repeat the same process every time until we find the
    search item or we have checked the whole list.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 二分搜索算法的工作方式如下。它通过将给定的列表分成两半来开始搜索项。如果搜索项小于中间值，则只在列表的前半部分查找搜索项，如果搜索项大于中间值，则只在列表的后半部分查找。我们重复相同的过程，直到找到搜索项或者我们已经检查了整个列表。
- en: Let's understand the binary search using an example. Suppose we have a book
    of 1,000 pages, and we want to reach the page number 250\. We know that every
    book has its pages numbered sequentially from `1` upwards. So, according to the
    binary search analogy, we first check the search item 250 which is less than the
    500 (which is the midpoint of the book). Thus, we search the required page only
    in the first half of the book. We again see the midpoint of the first half of
    the book, that is, using page 500 as a reference we find the midpoint, that is,
    250. That brings us closer to finding the 250th page. And then we find the required
    page in the book.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解二分搜索。假设我们有一本1000页的书，我们想找到第250页。我们知道每本书的页码是从`1`开始顺序编号的。因此，根据二分搜索的类比，我们首先检查搜索项250，它小于500（书的中点）。因此，我们只在书的前半部分搜索所需的页面。然后我们再次看到书的前半部分的中点，即使用500页作为参考，我们找到中点，即250。这使我们更接近找到第250页。然后我们在书中找到所需的页面。
- en: 'Let''s consider another example to understand the workings of binary search.
    We want to search for an item **43** from a list of 12 items, as shown in the
    following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一个例子来理解二分搜索的工作原理。我们想从包含12个项的列表中搜索**43**，如下图所示：
- en: '![](Images/692a7fab-d183-4d56-810f-b0ba163436cc.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/692a7fab-d183-4d56-810f-b0ba163436cc.png)'
- en: We start searching the item by comparing it to the middle item of the list,
    which is **37** in the example. If the search item is less than the middle value
    we only look at the first half of the list; otherwise, we will look in the other
    half. So we only need to search for the item in the second half. We follow the
    same concept until we find the search item **43** in the list as shown in the
    preceding diagram.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将其与列表的中间项进行比较来开始搜索项，例如在示例中是**37**。如果搜索项小于中间值，则只查看列表的前半部分；否则，我们将查看另一半。因此，我们只需要在列表的后半部分搜索项。我们遵循相同的概念，直到在列表中找到搜索项**43**，如前图所示。
- en: 'The following is the implementation of the binary search algorithm on an ordered
    list of items:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对有序物品列表进行二分搜索算法的实现：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s assume we have to find the position where item **10** is located in
    the list as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要找到列表中**10**的位置如下：
- en: '![](Images/c6fea9e7-dc50-4b14-a11a-c80121e372d0.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c6fea9e7-dc50-4b14-a11a-c80121e372d0.png)'
- en: The algorithm uses a `while` loop to iteratively adjust the limits in the list
    within which we have to find a search item. The terminating condition to stop
    the `while` loop is that the difference between the starting index, `index_of_first_element`,
    and the `index_of_last_element` index should be positive.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法使用`while`循环来迭代地调整列表中的限制，以便找到搜索项。停止`while`循环的终止条件是起始索引`index_of_first_element`和`index_of_last_element`索引之间的差值应为正数。
- en: 'The algorithm first finds the midpoint of the list by adding the index of the
    first element (**0**) to that of the last (**4**) and dividing it by **2** to
    find the middle index, `mid_point`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法首先通过将第一个元素的索引（**0**）加上最后一个元素的索引（**4**）并除以**2**来找到列表的中点，`mid_point`：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this case, the midpoint is `100`, and the value **10** is not found at the
    middle position in the list. Since we are searching for the item **10**, that
    is less than the midpoint, so it lies on the first half of the list, thus, we
    adjust the index range to be `index_of_first_element` to `mid_point-1` as shown
    in the following diagram, However, if we were searching for **120**, in that case,
    as 120 is greater than the middle value (100), we would search the item in the
    second half of the list, and we need to change the list index range to be `mid_point
    +1 `to  `index_of_last_element`. It is shown in the following diagram:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，中点是`100`，值**10**不在列表的中间位置找到。由于我们正在搜索**10**，它小于中点，因此它位于列表的前半部分，因此，我们将索引范围调整为`index_of_first_element`到`mid_point-1`，如下图所示。然而，如果我们正在搜索**120**，在这种情况下，由于120大于中间值（100），我们将在列表的后半部分搜索项，并且我们需要将列表索引范围更改为`mid_point
    +1`到`index_of_last_element`。如下图所示：
- en: '![](Images/d775d66a-c695-499a-b072-9627fa419a4d.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d775d66a-c695-499a-b072-9627fa419a4d.png)'
- en: With our new indexes of `index_of_first_element` and `index_of_last_element`
    now being **0** and **1** respectively, we compute the midpoint `(0 + 1)/2`, which
    equals `0`. The new midpoint is **0**, so we find the middle item and compare
    it with the search item, `ordered_list[0]`, which yields the value **10**. Now,
    our search item is found, and the index position is returned.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`index_of_first_element`和`index_of_last_element`的新索引分别为**0**和**1**，我们计算中点`(0
    + 1)/2`，得到`0`。新的中点是**0**，因此我们找到中间项并将其与搜索项进行比较，`ordered_list[0]`，得到值**10**。现在我们找到了搜索项，并返回索引位置。
- en: This reduction of our list size by half, by readjusting the index of `index_of_first_element`
    and `index_of_last_element`, continues as long as `index_of_first_element` is
    less than `index_of_last_element`. When this fails to be the case, it is most
    likely that our search term is not in the list.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调整`index_of_first_element`和`index_of_last_element`的索引，我们将列表大小减半，只要`index_of_first_element`小于`index_of_last_element`。当这种情况不再成立时，很可能是我们要搜索的项不在列表中。
- en: 'The implementation we discussed is an iterative one. We can also develop a
    recursive variant of the algorithm by applying the same principle and shifting
    the pointers that mark the beginning and end of the search list. Consider the
    following code for it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的实现是迭代的。我们也可以通过应用相同的原则并移动标记搜索列表开头和结尾的指针来开发算法的递归变体。考虑以下代码：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A call to this recursive implementation of the binary search algorithm and
    its output is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对二分搜索算法的递归实现的调用及其输出如下：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the only distinction between the recursive binary search and the iterative
    binary search is the function definition and also the way in which `mid_point`
    is calculated. The calculation for `mid_point` after the `((last_element_index
    - first_element_index) // 2)` operation must add its result to `first_element_index`.
    That way, we define the portion of the list to attempt the search.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，递归二分搜索和迭代二分搜索之间唯一的区别是函数定义，以及计算`mid_point`的方式。在`((last_element_index - first_element_index)
    // 2)`操作之后，`mid_point`的计算必须将其结果加到`first_element_index`上。这样，我们定义了尝试搜索的列表部分。
- en: The binary search algorithm has the worst-case time complexity of `O(log n)`.
    The half of the list on each iteration follows `log(n)` of the number of elements
    and their progression.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 二分搜索算法的最坏情况时间复杂度为`O(log n)`。每次迭代中列表的一半遵循元素数量和它们的进展的`log(n)`。
- en: It goes without saying that `log x` is assumed to be referring to log base two.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不言而喻，`log x`假定是指以2为底的对数。
- en: Interpolation search
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插值搜索
- en: The interpolation searching algorithm is an improved version of the binary search
    algorithm. It performs very efficiently when there are uniformly distributed elements
    in the sorted list. In a binary search, we always start searching from the middle
    of the list, whereas in the interpolation search we determine the starting position
    depending on the item to be searched. In the interpolation search algorithm, the
    starting search position is most likely to be the closest to the start or end
    of the list depending on the search item. If the search item is near to the first
    element in the list, then the starting search position is likely to be near the
    start of the list.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 插值搜索算法是二分搜索算法的改进版本。当排序列表中的元素均匀分布时，它的性能非常高。在二分搜索中，我们总是从列表的中间开始搜索，而在插值搜索中，我们根据要搜索的项确定起始位置。在插值搜索算法中，起始搜索位置很可能最接近列表的开头或结尾，具体取决于搜索项。如果搜索项接近列表中的第一个元素，则起始搜索位置很可能靠近列表的开头。
- en: 'The interpolation search is another variant of the binary search algorithm
    that is quite similar to how humans perform the search on any list of items. It
    is based on trying to make a good guess of the index position where a search item
    is likely to be found in a sorted list of items. It works in a similar way to
    the binary search algorithm except for the method to determine the splitting criteria
    to divide the data in order to reduce the number of comparisons. In the case of
    a binary search, we divide the data into equal halves and in the case of an interpolation
    search, we divide the data using the following formula:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 插值搜索是二分搜索算法的另一种变体，与人类在任何项目列表上执行搜索的方式非常相似。它基于尝试猜测在排序项目列表中可能找到搜索项的索引位置。它的工作方式类似于二分搜索算法，只是确定分割标准以减少比较次数的方法不同。在二分搜索的情况下，我们将数据分成相等的两部分，在插值搜索的情况下，我们使用以下公式来分割数据：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding formula, the `lower_bound_index` variable is the lower-bound
    index, which is the index of the smallest value in the, `upper_bound_index` list,
    denoting the index position of the highest value in the list. The `input_list[lower_bound_index] `
    and `input_list[lower_bound_index]` variables are the lowest and highest values
    respectively in the list. The `search_term` variable contains the value of the
    item that is to be searched.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述公式中，`lower_bound_index`变量是下界索引，即列表中最小值的索引，`upper_bound_index`表示列表中最大值的索引位置。`input_list[lower_bound_index]`和`input_list[lower_bound_index]`变量分别是列表中的最小值和最大值。`search_term`变量包含要搜索的项的值。
- en: 'Let''s consider an example to understand how the interpolation searching algorithm
    works using the following list of `7` items:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下包含7个项目的列表来考虑一个示例，以了解插值搜索算法的工作原理：
- en: '![](Images/69b60fe9-60b7-4ff4-a1c2-e7d5ed404713.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/69b60fe9-60b7-4ff4-a1c2-e7d5ed404713.png)'
- en: To find **120**, we know that we should look at the right-hand portion of the
    list. Our initial treatment of binary search would typically examine the middle
    element first in order to determine if it matches the search term.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到**120**，我们知道应该查看列表的右侧部分。我们对二分搜索的初始处理通常会首先检查中间元素，以确定是否与搜索项匹配。
- en: 'A more human-like method would be to pick a middle element in such a way as
    to not only split the array in half but to get as close as possible to the search
    term. The middle position was calculated using the following rule:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 更像人类的方法是选择一个中间元素，以便不仅将数组分成两半，而且尽可能接近搜索项。中间位置是使用以下规则计算的：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We shall replace this formula with a better one that brings us closer to the
    search term in the case of the interpolation search algorithm. The `mid_point`
    will receive the return value of the `nearest_mid` function, which is computed
    using the following method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在插值搜索算法的情况下，我们将用更好的公式替换这个公式，以使我们更接近搜索项。`mid_point`将接收`nearest_mid`函数的返回值，该值是使用以下方法计算的：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `nearest_mid` function takes, as arguments, the lists on which to perform
    the search. The `lower_bound_index` and `upper_bound_index` parameters represent
    the bounds in the list within which we are hoping to find the search term. Furthermore, `search_value`
    represents the value being searched for.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`nearest_mid`函数的参数是要进行搜索的列表。`lower_bound_index`和`upper_bound_index`参数表示希望在列表中找到搜索项的范围。此外，`search_value`表示正在搜索的值。'
- en: 'Given our search list, **44**, **60**, **75**, **100**, **120**, **230**, and
    **250**, `nearest_mid` will be computed with the following values:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 给定我们的搜索列表，**44**，**60**，**75**，**100**，**120**，**230**和**250**，`nearest_mid`将使用以下值进行计算：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s compute the `mid_point` value:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算`mid_point`的值：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It can now be seen that the `mid_point` value will receive the value `5`. So
    in the case of an interpolation search, the algorithm will start searching from
    the index position `5`,which is the index of the location of our search term.
    Thus, the item to be searched will be found in the first comparison, whereas in
    the case of a binary search, we would have chosen **100** as `mid_point`, which
    would have required another run of the algorithm.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以看到`mid_point`的值将接收值`5`。因此，在插值搜索的情况下，算法将从索引位置`5`开始搜索，这是我们搜索词的位置索引。因此，要搜索的项将在第一次比较中找到，而在二分搜索的情况下，我们将选择**100**作为`mid_point`，这将需要再次运行算法。
- en: 'A more visual illustration of how a typical binary search differs from an interpolation
    is given as follows. In a typical binary search, it finds the **midpoint** that
    looks like it''s in the middle of the list:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个更直观的例子，说明了典型的二分搜索与插值搜索的不同之处。在典型的二分搜索中，它找到了看起来在列表中间的**中点**：
- en: '![](Images/59172fff-5a88-43bd-a9a8-c0825a1650bd.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/59172fff-5a88-43bd-a9a8-c0825a1650bd.png)'
- en: One can see that the **midpoint **is actually standing approximately in the
    middle of the preceding list. This is as a result of dividing by list two.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到**中点**实际上站在前面列表的大致中间。这是通过将列表分成两部分得到的结果。
- en: 'In the case of an interpolation search, on the other hand, the **midpoint**
    is moved to the most likely position where the item can be matched:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在插值搜索的情况下，**中点**被移动到最有可能匹配项的位置：
- en: '![](Images/fdb75873-7f16-4c81-bbe3-a62b392095ad.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fdb75873-7f16-4c81-bbe3-a62b392095ad.png)'
- en: In an interpolation search, the **midpoint** is generally more to the left or
    right. This is caused by the effect of the multiplier being used when dividing
    to obtain the **midpoint**. In the preceding diagram, our **midpoint** has been
    skewed to the right.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在插值搜索中，**中点**通常更靠左或更靠右。这是由于在除法时使用的乘数的影响。在前面的图表中，我们的**中点**已经向右倾斜。
- en: The implementation of the interpolation algorithm remains the same as that of
    the binary search except for the way we compute the **midpoint**.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 插值算法的实现与二分搜索的实现相同，只是我们计算**中点**的方式不同。
- en: 'Here, we provide the implementation of the interpolation search algorithm,
    as shown in the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们提供了插值搜索算法的实现，如下所示的代码：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `nearest_mid` function makes use of a multiplication operation. This can
    produce values that are greater than `upper_bound_index` or lower than `lower_bound_index`.
    When this occurs, it means the search term, `term`, is not in the list. `None`
    is, therefore, returned to represent this.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`nearest_mid`函数使用乘法运算。这可能会产生大于`upper_bound_index`或小于`lower_bound_index`的值。当发生这种情况时，意味着搜索词`term`不在列表中。因此，返回`None`表示这一点。'
- en: 'So what happens when `ordered_list[mid_point]` does not equal the search term?
    Well, we must now readjust `index_of_first_element` and `index_of_last_element`
    so that the algorithm will focus on the part of the array that is likely to contain
    the search term. This is exactly like what we did in the binary search:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 那么当`ordered_list[mid_point]`不等于搜索词时会发生什么呢？好吧，我们现在必须重新调整`index_of_first_element`和`index_of_last_element`，以便算法将专注于可能包含搜索词的数组部分。这与我们在二分搜索中所做的事情完全相同：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the search term is greater than the value stored at `ordered_list[mid_point]`,
    then we only adjust the `index_of_first_element` variable to point to the `mid_point
    + 1` index.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果搜索词大于`ordered_list[mid_point]`存储的值，那么我们只需调整`index_of_first_element`变量，指向`mid_point
    + 1`索引。
- en: 'The following diagram shows how the adjustment occurs. The `index_of_first_element`
    is adjusted and pointed to the `mid_point+1` index:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了调整的过程。`index_of_first_element`被调整并指向`mid_point+1`索引：
- en: '![](Images/b4d74ddb-972e-4f1b-8f31-404863c144c7.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b4d74ddb-972e-4f1b-8f31-404863c144c7.png)'
- en: The diagram only illustrates the adjustment of the midpoint. In interpolation,
    the midpoint rarely divide the list into two equal halves.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图表只是说明了中点的调整。在插值搜索中，中点很少将列表分成两个完全相等的部分。
- en: 'On the other hand, if the search term is less than the value stored at `ordered_list[mid_point]`,
    then we only adjust the `index_of_last_element` variable to point to the index
    `mid_point - 1`. This logic is captured in the else part of the if statement `index_of_last_element
    = mid_point - 1`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果搜索词小于`ordered_list[mid_point]`存储的值，那么我们只需调整`index_of_last_element`变量，指向索引`mid_point
    - 1`。这个逻辑在if语句的else部分中体现：`index_of_last_element = mid_point - 1`。
- en: '![](Images/62be8deb-9a92-4fcc-bb9a-29e33f89e048.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/62be8deb-9a92-4fcc-bb9a-29e33f89e048.png)'
- en: The diagram shows the effect of the recalculation of **index_of_last_element**
    on the position of the **midpoint**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图表显示了对**index_of_last_element**的重新计算对**中点**位置的影响。
- en: Let's use a more practical example to understand the inner workings of both
    the binary search and interpolation algorithms.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个更实际的例子来理解二分搜索和插值搜索算法的内部工作原理。
- en: 'Consider for example the following list of elements:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下元素列表：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At index 0, the value 2 is stored, and at index 7, the value 77 is stored. Now,
    assume that we want to find the element 2 in the list. How will the two different
    algorithms go about it?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引0处存储值2，在索引7处存储值77。现在，假设我们要在列表中找到元素2。这两种不同的算法将如何处理？
- en: 'If we pass this list to the `interpolation search` function, then the `nearest_mid`
    function will return a value equal to `0` using the formula of `mid_point` computation
    which is as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个列表传递给`interpolation search`函数，那么`nearest_mid`函数将使用`mid_point`计算公式返回等于`0`的值：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As we get the `mid_point` value `0`, we start the interpolation search with
    the value at index `0`. Just with one comparison, we have found the search term.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们得到`mid_point`值`0`时，我们从索引`0`开始插值搜索。只需一次比较，我们就找到了搜索项。
- en: 'On the other hand, the binary search algorithm needs three comparisons to arrive
    at the search term, as illustrated in the following diagram:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，二分搜索算法需要三次比较才能找到搜索项，如下图所示：
- en: '![](Images/7ea01d77-5583-4145-ad5c-99486e10f863.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7ea01d77-5583-4145-ad5c-99486e10f863.png)'
- en: The first `mid_point` value calculated is `3`. The second `mid_point` value
    is `1` and the last `mid_point` value where the search term is found is `0`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 计算得到的第一个`mid_point`值为`3`。第二个`mid_point`值为`1`，最后一个`mid_point`值为搜索项所在的`0`。
- en: Therefore, it is clear that the interpolation search algorithm performs better
    than binary search in most cases.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，很明显，插值搜索算法在大多数情况下比二分搜索效果更好。
- en: Choosing a search algorithm
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择搜索算法
- en: The binary search and interpolation search algorithms are better in performance
    compared to both ordered and unordered linear search functions. Because of the
    sequential probing of elements in the list to find the search term, ordered and
    unordered linear searches have a time complexity of `O(n)`. This gives a very
    poor performance when the list is large.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与有序和无序线性搜索函数相比，二分搜索和插值搜索算法在性能上更好。由于有序和无序线性搜索在列表中顺序探测元素以找到搜索项，因此其时间复杂度为`O(n)`。当列表很大时，性能非常差。
- en: The binary search operation, on the other hand, slices the list in two anytime
    a search is attempted. On each iteration, we approach the search term much faster
    than in a linear strategy. The time complexity yields `O(log n)`. Despite the
    speed gain in using a binary search, the main disadvantage of it is that it cannot
    be applied on an unsorted list of items, neither is it advised to be used for
    a list of small size due to an overhead of sorting.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，二分搜索操作在每次搜索尝试时都会将列表切成两半。在每次迭代中，我们比线性策略更快地接近搜索项。时间复杂度为`O(log n)`。尽管使用二分搜索可以获得速度上的优势，但其主要缺点是不能应用于未排序的项目列表，也不建议用于小型列表，因为排序的开销很大。
- en: The ability to get to the portion of the list that holds a search term determines,
    to a large extent, how well a search algorithm will perform. In the interpolation
    search algorithm, the midpoint is computed in such as way that it gives a higher
    probability of obtaining our search term faster. The average-case time complexity
    of the interpolation search is `O( log ( log n))`, whereas the worst-case time
    complexity of the interpolation search algorithm is `O(n)`. This shows that interpolation
    search is better than binary search and provides faster searching in most cases.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 能够到达包含搜索项的列表部分在很大程度上决定了搜索算法的性能。在插值搜索算法中，中点的计算方式使得更有可能更快地获得我们的搜索项。插值搜索的平均情况时间复杂度为`O(log(log
    n))`，而最坏情况时间复杂度为`O(n)`。这表明插值搜索比二分搜索更好，并在大多数情况下提供更快的搜索。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the two important types of search algorithms.
    The implementation of both linear and binary search algorithms were discussed
    and their comparisons drawn. The binary search variant, interpolation search,
    was also discussed in detail in this chapter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了两种重要的搜索算法类型。讨论了线性和二分搜索算法的实现以及它们的比较。本章还详细讨论了二分搜索变体插值搜索。
- en: We will be using the concepts of searching for sorting algorithms in the next
    chapter. We will also use the knowledge that we have gained to perform sorting
    algorithms on a list of items.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用搜索算法的概念进行排序算法。我们还将利用已经获得的知识对项目列表执行排序算法。
