- en: File Archiving, Encrypting, and Decrypting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件存档、加密和解密
- en: In the previous chapter, we learned about handling files, directories, and data.
    We also learned about the `tarfile` module. In this chapter, we'll learn about
    file archiving, encryption, and decryption. Archiving plays an important role
    in managing files, directories, and data. But first, what is archiving? Archiving
    is a process that stores the files and directories into a single file. Python
    has the `tarfile` module for creating such archive files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何处理文件、目录和数据。我们还学习了`tarfile`模块。在本章中，我们将学习文件存档、加密和解密。存档在管理文件、目录和数据方面起着重要作用。但首先，什么是存档？存档是将文件和目录存储到单个文件中的过程。Python有`tarfile`模块用于创建这样的存档文件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating and unpacking archives
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和解压存档
- en: Tar archives
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tar存档
- en: ZIP creation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ZIP创建
- en: File encryption and decryption
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件加密和解密
- en: Creating and unpacking archives
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和解压存档
- en: In this section, we're going to learn about how we can create and unpack archives
    using the `shutil` module of Python. The `shutil` module has the `make_archive()`
    function, which creates a new archive file. Using `make_archive()`, we can archive
    the entire directory with its contents.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用Python的`shutil`模块创建和解压存档。`shutil`模块有`make_archive()`函数，用于创建新的存档文件。使用`make_archive()`，我们可以存档整个目录及其内容。
- en: Creating archives
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建存档
- en: 'Now, we are going to write a script called `shutil_make_archive.py` and write
    the following content in it:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个名为`shutil_make_archive.py`的脚本，并在其中编写以下内容：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the program and you''ll get the following output:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，您将得到以下输出：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, to create an archive file, we used the `shutil` and
    `tarfile` modules of Python. In `shutil.make_archive()`, we specified `work_sample`, which
    will be the name of the archive file and will be in `gz` format. We've specified
    our work directory name in the base directory attribute. Finally, we printed the
    names of files that are archived.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，为了创建一个存档文件，我们使用了Python的`shutil`和`tarfile`模块。在`shutil.make_archive()`中，我们指定了`work_sample`，这将是存档文件的名称，并且将以`gz`格式。我们在基本目录属性中指定了我们的工作目录名称。最后，我们打印了已存档的文件的名称。
- en: Unpacking archives
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解压存档
- en: To unpack the archives, the `shutil` module has the `unpack_archive()` function.
    Using this function, we can extract the archive files. We passed the archive filename
    and the directory where we want to extract the contents. If no directory name
    is passed, then it will extract the contents into your current working directory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要解压缩存档，`shutil`模块有`unpack_archive()`函数。使用此函数，我们可以提取存档文件。我们传递了存档文件名和我们想要提取内容的目录。如果没有传递目录名称，则它将提取内容到您当前的工作目录中。
- en: 'Now, create a script called `shutil_unpack_archive.py` and write the following
    code in it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`shutil_unpack_archive.py`的脚本，并在其中编写以下代码：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the script as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, check your `work/` directory and you will find the `work/` folder in it,
    which will have the extracted files.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查您的`work/`目录，您将在其中找到`work/`文件夹，其中将有提取的文件。
- en: Tar archives
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tar存档
- en: In this section, we are going to learn about the `tarfile` module. We'll also
    learn about testing the entered filename, assessing whether it's a valid archive
    filename or not. We'll look at how to add a new file into the already archived
    file, how we can read metadata using the `tarfile` module, and how to extract
    the files from an archive using the `extractall()` function.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`tarfile`模块。我们还将学习如何测试输入的文件名，评估它是否是有效的存档文件。我们将看看如何将新文件添加到已存档的文件中，如何使用`tarfile`模块读取元数据，以及如何使用`extractall()`函数从存档中提取文件。
- en: First, we will test whether the entered filename is a valid archive file or
    not. To test this, the `tarfile` module has the `is_tarfile()` function, which
    returns a Boolean value.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将测试输入的文件名是否是有效的存档文件。为了测试这一点，`tarfile`模块有`is_tarfile()`函数，它返回一个布尔值。
- en: 'Create a script called `check_archive_file.py` and write the following content
    in it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`check_archive_file.py`的脚本，并在其中编写以下内容：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the script and you will get the following output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So, `tarfile.is_tarfile()` will check every filename mentioned in the list.
    The `hello.py, welcome.py` file are not tar files so we got a Boolean value, `False`.
    `work.tar.gz` and `sample.tar.xz` are tar files, so we got the Boolean value, `True`.
    And there is no such file as `nofile.tar` present in our directory, so we have
    got an exception, as we've written it in our script.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`tarfile.is_tarfile()`将检查列表中提到的每个文件名。`hello.py，welcome.py`文件不是tar文件，所以我们得到了一个布尔值`False`。`work.tar.gz`和`sample.tar.xz`是tar文件，所以我们得到了布尔值`True`。而我们的目录中没有`nofile.tar`这样的文件，所以我们得到了一个异常，因为我们在脚本中写了它。
- en: 'Now, we are going to add a new file into our already created archived file.
    Create a script called `add_to_archive.py` and write the following code in it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在已创建的存档文件中添加一个新文件。创建一个名为`add_to_archive.py`的脚本，并在其中编写以下代码：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the script and you will get the following output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, first we created an archive file using `shutil.make_archive()` and
    then we printed the contents of the archived file. We then created a `sample.txt`
    file in the next statement. Now, we want to add that `sample.txt` in the already
    created `work.tar`. Here, we used the append mode, `a`. And next, we are again
    displaying the contents of the archived file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们首先使用`shutil.make_archive()`创建了一个存档文件，然后打印了存档文件的内容。然后我们在下一个语句中创建了一个`sample.txt`文件。现在，我们想要将`sample.txt`添加到已创建的`work.tar`中。在这里，我们使用了追加模式`a`。接下来，我们再次显示存档文件的内容。
- en: 'Now, we will learn about how we can read the metadata from an archive file.
    The `getmembers()` function will load the metadata of the files. Create a script
    called `read_metadata.py` and write the following content in it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何从存档文件中读取元数据。`getmembers()`函数将加载文件的元数据。创建一个名为`read_metadata.py`的脚本，并在其中编写以下内容：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the script and you will get the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你将得到以下输出：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we will extract the contents from an archive using the `extractall()`
    function. For that, create a script called `extract_contents.py` and write the
    following code in it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`extractall()`函数从存档中提取内容。为此，创建一个名为`extract_contents.py`的脚本，并在其中写入以下代码：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the script and you will get the following output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你将得到以下输出：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Check your current working directory,and you will find the `work/` directory.
    Navigate to that directory and you can find your extracted files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的当前工作目录，你会发现`work/`目录。导航到该目录，你可以找到你提取的文件。
- en: ZIP creation
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ZIP创建
- en: In this section, we are going to work with ZIP files. We will learn about the `zipfile`
    module of `python`, how to create ZIP files, how to test whether an entered filename
    is a valid `zip` filename or not, reading the metadata, and so on.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习关于ZIP文件的知识。我们将学习`python`的`zipfile`模块，如何创建ZIP文件，如何测试输入的文件名是否是有效的`zip`文件名，读取元数据等等。
- en: 'First, we will learn how to create a `zip` file using the `make_archive()`
    function of the `shutil` module. Create a script called `make_zip_file.py` and
    write the following code in it:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将学习如何使用`shutil`模块的`make_archive()`函数创建一个`zip`文件。创建一个名为`make_zip_file.py`的脚本，并在其中写入以下代码：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the script as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式运行脚本：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now check your current working directory and you will see `work.zip`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查你的当前工作目录，你会看到`work.zip`。
- en: Now, we will test whether the entered filename is a `zip` file or not. For this
    purpose, the `zipfile` module has the `is_zipfile()` function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将测试输入的文件名是否是一个`zip`文件。为此，`zipfile`模块有`is_zipfile()`函数。
- en: 'Create a script called `check_zip_file.py` and write the following content
    in it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`check_zip_file.py`的脚本，并在其中写入以下内容：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the script as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式运行脚本：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, we have used a `for` loop, where we are checking the filenames
    in a list. The `is_zipfile()` function will check, one by one, the filenames and
    will give Boolean values as a result.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了一个`for`循环，我们在其中检查列表中的文件名。`is_zipfile()`函数将逐个检查文件名，并将布尔值作为结果。
- en: 'Now, we will see how we can read the metadata from an archived ZIP file using
    the `zipfile` module of Python. Create a script called `read_metadata.py` and
    write the following content in it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看如何使用Python的`zipfile`模块从存档的ZIP文件中读取元数据。创建一个名为`read_metadata.py`的脚本，并在其中写入以下内容：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Execute the script as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式执行脚本：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To get the metadata information about the `zip` file, we used the `infolist()`
    method of the `ZipFile` class.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取`zip`文件的元数据信息，我们使用了`ZipFile`类的`infolist()`方法。
- en: File encryption and decryption
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件加密和解密
- en: In this section, we will learn about the `pyAesCrypt` module of Python. `pyAesCrypt`
    is a file encryption module that uses `AES256-CBC` to encrypt/decrypt files and
    binary streams.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python的`pyAesCrypt`模块。`pyAesCrypt`是一个文件加密模块，它使用`AES256-CBC`来加密/解密文件和二进制流。
- en: 'Install `pyAesCrypt` as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式安装`pyAesCrypt`：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a script called `file_encrypt.py` and write the following code in it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`file_encrypt.py`的脚本，并在其中写入以下代码：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the script as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式运行脚本：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Please check your current working directory. You will find the `sample.txt.aes`
    encrypted file in it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请检查你的当前工作目录。你会在其中找到加密文件`sample.txt.aes`。
- en: In this example, we've already mentioned the buffer size and password. Next,
    we mentioned our filename that will be encrypted. In `encryptStream`, we mentioned
    `fIn`, which is our file to encrypt, and `fOut`, which is our filename after encryption.
    We've stored our encrypted file as `sample.txt.aes`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们已经提到了缓冲区大小和密码。接下来，我们提到了要加密的文件名。在`encryptStream`中，我们提到了`fIn`，这是我们要加密的文件，以及`fOut`，这是我们加密后的文件名。我们将加密后的文件存储为`sample.txt.aes`。
- en: 'Now, we will decrypt the `sample.txt.aes` file to get the content of the file.
    Create a script called `file_decrypt.py` and write the following content in it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将解密`sample.txt.aes`文件以获取文件内容。创建一个名为`file_decrypt.py`的脚本，并在其中写入以下内容：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the script as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式运行脚本：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, check your current working directory. A file named `sampleout.txt` will
    be created. That's your decrypted file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查你的当前工作目录。将会创建一个名为`sampleout.txt`的文件。那就是你的解密文件。
- en: In this example, we mentioned the filename to decrypt, which is `sample.txt.aes`.
    Next, our decrypted file will be `sampleout.txt`. In `decryptStream()`, we mentioned
    `fIn`, which is our file to decrypt, and `fOut`, which is the name of the `decrypted`
    file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们提到了要解密的文件名，即`sample.txt.aes`。接下来，我们的解密文件将是`sampleout.txt`。在`decryptStream()`中，我们提到了`fIn`，这是我们要解密的文件，以及`fOut`，这是`解密`文件的名称。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about creating and extracting archived files. Archiving
    plays an important role in managing files, directories, and data. It also stores
    the files and directories into a single file.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建和提取存档文件。存档在管理文件、目录和数据方面起着重要作用。它还将文件和目录存储到一个单一文件中。
- en: We learned in detail about the `tarfile` and `zipfile` Python modules that enable
    you to create, extract, and test archive files. You will be able to add a new
    file into the already archived file, read metadata, extract the files from an
    archive. You also learned about file encryption and decryption using the `pyAescrypt`
    module.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们详细学习了Python模块`tarfile`和`zipfile`，它们使你能够创建、提取和测试存档文件。你将能够将一个新文件添加到已存档的文件中，读取元数据，从存档中提取文件。你还学习了使用`pyAescrypt`模块进行文件加密和解密。
- en: In the next chapter, you will learn about text processing and regular expressions
    in python. Python has a very powerful library called regular expressions that
    does tasks such as searching and extracting the data.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习Python中的文本处理和正则表达式。Python有一个非常强大的库叫做正则表达式，它可以执行搜索和提取数据等任务。
- en: Questions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Can we compress the data using password protected? if yes how ?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能使用密码保护来压缩数据吗？如果可以，怎么做？
- en: What is context manager in python?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Python中的上下文管理器？
- en: What is pickling and unpickling?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是pickling和unpickling？
- en: What are the different types of functions in python?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中有哪些不同类型的函数？
- en: Further reading
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Data Compression and Archiving: [https://docs.python.org/3/library/archiving.html](https://docs.python.org/3/library/archiving.html)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据压缩和归档：[https://docs.python.org/3/library/archiving.html](https://docs.python.org/3/library/archiving.html)
- en: '`tempfile` documentation: [https://docs.python.org/2/library/tempfile.html](https://docs.python.org/2/library/tempfile.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tempfile`文档：[https://docs.python.org/2/library/tempfile.html](https://docs.python.org/2/library/tempfile.html)'
- en: Cryptography Python documentation: [https://docs.python.org/3/library/crypto.html](https://docs.python.org/3/library/crypto.html)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码学Python文档：[https://docs.python.org/3/library/crypto.html](https://docs.python.org/3/library/crypto.html)
- en: '`shutil` documentation: [https://docs.python.org/3/library/shutil.html](https://docs.python.org/3/library/shutil.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shutil`文档：[https://docs.python.org/3/library/shutil.html](https://docs.python.org/3/library/shutil.html)'
