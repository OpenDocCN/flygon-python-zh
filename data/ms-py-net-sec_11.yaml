- en: Identifying Server Vulnerabilities in Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别Web应用程序中的服务器漏洞
- en: This chapter covers the main vulnerabilities in web applications and the tools
    we can find in the python ecosystem, such as w3af as a vulnerabilities scanner
    in web applications, and sqlmap for detecting sql vulnerabilities. Regarding server
    vulnerabilities, we cover testing heartbleed and SSL vulnerabiliies in servers
    with openssl activated.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了Web应用程序中的主要漏洞以及我们可以在Python生态系统中找到的工具，例如w3af作为Web应用程序中的漏洞扫描器，以及用于检测SQL漏洞的sqlmap。关于服务器漏洞，我们将介绍如何测试启用了openssl的服务器中的心脏出血和SSL漏洞。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Vulnerabilities in web applications with OWASP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP中的Web应用程序漏洞
- en: w3af as a vulnerabilities scanner in web applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: w3af作为Web应用程序中的漏洞扫描器
- en: How to discover sql vulnerabilities with python tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Python工具发现SQL漏洞
- en: Python script for testing heartbleed and SSL/TLS vulnerabilities
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于测试心脏出血和SSL/TLS漏洞的Python脚本
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter11` folder:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例和源代码可在GitHub存储库的`chapter11`文件夹中找到：
- en: '[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)'
- en: You will need to install Python distribution in your local machine with at least
    4 GB memory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在本地机器上安装至少4GB内存的Python发行版。
- en: Scripts can be executed with Python 2.7 and 3.x versions and w3af is tested
    in a Unix distribution such as Ubuntu.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本可以在Python 2.7和3.x版本中执行，w3af在Unix发行版（如Ubuntu）中进行了测试。
- en: Introducing vulnerabilities in web applications with OWASP
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍OWASP中的Web应用程序漏洞
- en: Open Web Application Security Project (OWASP) Top 10 is a list of the 10 most
    critical web-application security risks. In this section, we will comment on the
    OWASP top 10 vulnerabilities and explain in detail the cross-site scripting (XSS)
    vulnerability.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 开放式Web应用程序安全项目（OWASP）十大是关键的网络应用程序安全风险的列表。在本节中，我们将评论OWASP十大漏洞，并详细解释跨站脚本（XSS）漏洞。
- en: Introduction to OWASP
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍OWASP
- en: The Open Web Application Security Project is an excellent resource to learn
    about ways to protect your web apps from bad behaviors. There are many kinds of
    application-security vulnerabilities. OWASP ranked the top ten application security
    risks at OWASP Top Ten Project: [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_2017_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_2017_Project).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 开放式Web应用程序安全项目是了解如何保护您的Web应用程序免受不良行为的绝佳资源。有许多种应用程序安全漏洞。OWASP在OWASP十大项目中排名前十的应用程序安全风险：[https://www.owasp.org/index.php/Category:OWASP_Top_Ten_2017_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_2017_Project)。
- en: 'The full classification can be found in the shared `OWASP.xlsx` Excel file
    located in the GitHub repository inside the chapter folder:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的分类可以在GitHub存储库中的章节文件夹中的共享`OWASP.xlsx` Excel文件中找到：
- en: '![](assets/2b915aec-e598-4ea1-8cd6-f7761421bff4.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2b915aec-e598-4ea1-8cd6-f7761421bff4.png)'
- en: 'Here we can highlight the following codes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以突出以下代码：
- en: '**OTG-INFO-001 Information leak:** We can make use of search engines such as
    Bing, Google, and Shodan in search of information leaks using the operators or
    dorks that these search engines provide. We could, for example, see what information
    Shodan gives us, for that we carry out the search of the IP or domain, and with
    the service of Shodan we can see the services that it has exposed and open ports.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OTG-INFO-001信息泄漏：**我们可以利用Bing、Google和Shodan等搜索引擎，使用这些搜索引擎提供的操作符或dorks来搜索信息泄漏。例如，我们可以查看Shodan给我们的信息，我们可以进行IP或域的搜索，并使用Shodan的服务来查看它公开和开放的端口。'
- en: '**OTG-INFO-002 Web server fingerprinting:** We will try to find out what kind
    of server our target website is working on, for that we use the whatweb tool that
    we can find in the Kali Linux distribution.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OTG-INFO-002 Web服务器指纹识别：**我们将尝试找出我们目标网站所使用的服务器类型，为此我们使用Kali Linux发行版中可以找到的whatweb工具。'
- en: '**OTG-INFO-003 Metadata found in server files:** At this point, we can use
    tools such as Foca or Metagoofil to extract metadata in documents published on
    the website.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OTG-INFO-003在服务器文件中找到的元数据：**在这一点上，我们可以使用工具，如Foca或Metagoofil，来提取网站上发布的文档中的元数据。'
- en: '**OTG-INFO-004 Enumeration of subdomains and server applications:** We will
    use tools that give us information about possible subdomains, DNS servers, services,
    and ports opened in server applications.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OTG-INFO-004枚举子域和服务器应用程序：**我们将使用工具来获取有关可能的子域、DNS服务器、服务和服务器应用程序中打开的端口的信息。'
- en: '**OTG-INFO-005 Comments and Metadata of the Web:** We can find leak information
    in the comments on the web that programmers use to debug the code.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OTG-INFO-005 Web的注释和元数据：**我们可以在网页的注释中找到程序员用于调试代码的泄漏信息。'
- en: '**OTG-INFO-006 and OTG-INFO-007 Identify entry points and Website Map:** We
    can detect all the endpoints of entry of the web (requests and answers with `GET`
    and `POST`), for which we are going to use a reverse web proxy (ZAP, Burp, or
    WebScarab) and use its Spider in such a way that it generates a map complete of
    the web and its entry points.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OTG-INFO-006和OTG-INFO-007识别入口点和网站地图：**我们可以检测网页的所有入口点（使用`GET`和`POST`的请求和响应），为此我们将使用反向Web代理（ZAP、Burp或WebScarab），并使用其Spider生成网页的完整地图及其入口点。'
- en: '**OTG-INFO-008 Fingerprinting Web Application Framework:** It is about finding
    out what type of framework has been used to develop the web, for example, programming
    language and technology. We can find all this information in the HTTP headers,
    cookies, HTML code, and different files and folders. When we used whatweb tool,
    we could see that JQuery was using other specific technologies that the CMS used.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OTG-INFO-008 指纹识别Web应用程序框架：这是为了找出开发Web所使用的框架类型，例如编程语言和技术。我们可以在HTTP头、cookie、HTML代码和不同的文件和文件夹中找到所有这些信息。当我们使用whatweb工具时，我们可以看到JQuery正在使用CMS使用的其他特定技术。
- en: '**OTG-INFO-009 Fingerprinting Web Application:** It is about finding out whether
    some kind of CMS has been used to develop the Web: WordPress, Joomla, or another
    type of CMS.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OTG-INFO-009 指纹识别Web应用程序：这是为了找出是否使用了某种CMS来开发Web：WordPress、Joomla或其他类型的CMS。
- en: '**OTG-INFO-0010 Server Architecture:** We can check  whether there is any kind
    of firewall in the middle of the communication. For this task, we can do some
    type of port scanning and see whether there is no Web Application Firewall, for
    example, due to port 80 being unfiltered.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OTG-INFO-0010 服务器架构：我们可以检查通信中是否有任何防火墙。对于这个任务，我们可以进行某种类型的端口扫描，看看是否没有Web应用程序防火墙，例如，由于端口80未经过滤。
- en: OWASP common attacks
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP常见攻击
- en: 'Let''s look at some of the most common attacks:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些最常见的攻击：
- en: '**SQL Injection:** The injection of SQL code occurs when data supplied by the
    user is sent unfiltered to an interpreter as part of a query in order to modify
    the original behavior, to execute commands or arbitrary queries in the database.
    The attacker sends raw SQL statements in the request. If your server uses some
    of the request content to build SQL queries, it might perform the attacker''s
    request on the database. In Python, though, if you use **SQLAlchemy** and avoid
    raw SQL statements altogether, you will be safe. If you use raw SQL, make sure
    every variable is correctly quoted. We can find more information and owasp documentation
    about this kind of injection at [https://www.owasp.org/index.php/SQL_Injection](https://www.owasp.org/index.php/SQL_Injection).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入：当用户提供的数据未经过滤地发送到查询的解释器作为查询的一部分以修改原始行为，执行命令或在数据库中执行任意查询时，就会发生SQL代码的注入。攻击者在请求中发送原始的SQL语句。如果您的服务器使用请求内容构建SQL查询，可能会执行攻击者在数据库上的请求。但是，在Python中，如果您使用SQLAlchemy并完全避免原始的SQL语句，您将是安全的。如果使用原始的SQL，请确保每个变量都正确引用。我们可以在[https://www.owasp.org/index.php/SQL_Injection](https://www.owasp.org/index.php/SQL_Injection)找到更多关于这种类型注入的信息和owasp文档。
- en: '** Cross Site Scripting (XSS):** This attack happens only on web pages that
    display some HTML. The attacker uses some of the query attributes to try to inject
    their piece of `javascript` code on the page to trick the user into performing
    some actions thinking they are on the legitimate website. XSS allows attackers
    to execute scripts in the victim''s browser, allowing them to hijack user sessions,
    destroy websites, or direct the user to a malicious site ([https://www.owasp.org/index.php/XSS](https://www.owasp.org/index.php/XSS)).'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站脚本（XSS）：这种攻击只发生在显示一些HTML的网页上。攻击者使用一些查询属性来尝试在页面上注入他们的一段`javascript`代码，以欺骗用户执行一些动作，认为他们在合法的网站上。XSS允许攻击者在受害者的浏览器中执行脚本，从而劫持用户会话，破坏网站，或将用户重定向到恶意网站（[https://www.owasp.org/index.php/XSS](https://www.owasp.org/index.php/XSS)）。
- en: '**Cross-Site Request Forgery (XSRF/CSRF):** This attack is based on attacking
    a service by reusing the user''s credentials from another website. The typical
    CSRF attack happens with POST requests. For instance, a malicious website displays
    a link to a user to trick that user to perform the POST request on your site using
    their existing credentials. A CSRF attack forces the browser of an authenticated
    victim to send a spoofed HTTP request, including the user''s session cookies and
    any other automatically included authentication information, to a vulnerable web
    application. This allows the attacker to force the victim''s browser to generate
    requests that the vulnerable application interprets as legitimate ([https://www.owasp.org/index.php/CSRF](https://www.owasp.org/index.php/CSRF)).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站请求伪造（XSRF/CSRF）：这种攻击是基于通过重用用户在另一个网站上的凭据来攻击服务。典型的CSRF攻击发生在POST请求中。例如，恶意网站向用户显示一个链接，以欺骗用户使用其现有凭据在您的网站上执行POST请求。CSRF攻击迫使经过身份验证的受害者的浏览器发送伪造的HTTP请求，包括用户的会话cookie和任何其他自动包含的身份验证信息，到一个易受攻击的Web应用程序。这允许攻击者强制受害者的浏览器生成易受攻击应用程序解释为合法的请求（[https://www.owasp.org/index.php/CSRF](https://www.owasp.org/index.php/CSRF)）。
- en: '**Sensitive Data Exposure:** Many web applications do not adequately protect
    sensitive data, such as credit card numbers or authentication credentials. Attackers
    can steal or modify such data to carry out fraud, identity theft, or other crimes.
    Sensitive data requires additional protection methods, such as data encryption,
    as well as special precautions when exchanging data with the browser ([https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure)).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感数据泄露：许多Web应用程序未能充分保护敏感数据，如信用卡号或身份验证凭据。攻击者可以窃取或修改这些数据以进行欺诈、身份盗用或其他犯罪行为。敏感数据需要额外的保护方法，如数据加密，以及在与浏览器交换数据时的特殊预防措施（[https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure)）。
- en: '**Unvalidated Redirects and Forwards:** Web applications frequently redirect
    and forward users to other pages or websites, and use untrusted data to determine
    the landing page. Without proper validation, attackers can redirect victims to
    phishing or malware sites, or use forwarding to access unauthorized pages.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未经验证的重定向和转发：Web应用程序经常将用户重定向和转发到其他页面或网站，并使用不受信任的数据来确定着陆页面。如果没有适当的验证，攻击者可以将受害者重定向到钓鱼或恶意软件网站，或者使用转发访问未经授权的页面。
- en: '**Command Injection attacks.** Command injection is any time you’re calling
    a process using popen, subprocess, os.system, and taking arguments from variables.
    When calling local commands, there’s a possibility of someone setting those values
    to something malicious ([https://docs.python.org/3/library/shlex.html#shlex.quote](https://docs.python.org/3/library/shlex.html#shlex.quote)).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令注入攻击。** 命令注入是指在使用popen、subprocess、os.system调用进程并从变量中获取参数时。在调用本地命令时，有可能有人将这些值设置为恶意内容([https://docs.python.org/3/library/shlex.html#shlex.quote](https://docs.python.org/3/library/shlex.html#shlex.quote))。'
- en: There is more information for XSS and CSRF vulnerabilities in python and Django
    applications at [https://docs.djangoproject.com/en/2.1/topics/security/](https://docs.djangoproject.com/en/2.1/topics/security/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有关python和Django应用程序中XSS和CSRF漏洞的更多信息，请参阅[https://docs.djangoproject.com/en/2.1/topics/security/](https://docs.djangoproject.com/en/2.1/topics/security/)。
- en: Testing Cross-site scripting (XSS)
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试跨站脚本（XSS）
- en: Cross-site scripting is a type of injection attack that occurs when attack vectors
    are injected in the form of a browser-side script.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 跨站脚本是一种注入攻击类型，当攻击向量以浏览器端脚本的形式注入时发生。
- en: To test whether a website is vulnerable to XSS, we could use the following script
    where we read from an `XSS-attack-vectors.txt` file that contains all possible
    attack vectors. If, as a result of making a request to the site to analyze together
    with the payload, we obtain is the same information sent by the user that is shown
    again to the user, then we have a clear case of vulnerability.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试网站是否容易受到XSS攻击，我们可以使用以下脚本，从一个包含所有可能攻击向量的`XSS-attack-vectors.txt`文件中读取。如果由于向网站发出请求以及有效负载一起分析的结果，我们获得的信息与用户发送的信息相同，并再次显示给用户，那么我们就有一个明显的漏洞案例。
- en: 'You can find the following code in the `URL_xss.py` file in the XXS folder:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在XXS文件夹的`URL_xss.py`文件中找到以下代码：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can find the following code in the `XSS-attack-vectors.txt` file in the
    XXS folder:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在XXS文件夹的`XSS-attack-vectors.txt`文件中找到以下代码：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this screenshot, we can see the execution of the previous script, `URL_xss.py`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到之前脚本`URL_xss.py`的执行情况：
- en: '![](assets/d22b7045-b6a2-427f-ab05-2595f5ed2bdd.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d22b7045-b6a2-427f-ab05-2595f5ed2bdd.png)'
- en: 'We can check this vulnerability on the [testphp.vulnweb.com](http://testphp.vulnweb.com)
    site:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在[testphp.vulnweb.com](http://testphp.vulnweb.com)网站上检查这个漏洞：
- en: '![](assets/4f155b6d-6355-499a-81c3-e800dd3c1e6e.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4f155b6d-6355-499a-81c3-e800dd3c1e6e.png)'
- en: 'If we input in the search field one of the vector attacks, we can see that
    we obtain it executes the same code we inject between script tags:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在搜索字段中输入其中一个向量攻击，我们可以看到我们获得了执行我们在脚本标签之间注入的相同代码：
- en: '![](assets/26962f04-15c8-48bd-9488-58a474d46494.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26962f04-15c8-48bd-9488-58a474d46494.png)'
- en: W3af scanner vulnerabilities in web applications
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: W3af扫描器对web应用程序的漏洞
- en: W3af is the acronym for web application attack and audit framework, and is an
    open source vulnerabilities scanner that it can be used for auditing web security.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: W3af是web应用程序攻击和审计框架的缩写，是一个开源漏洞扫描器，可用于审计web安全。
- en: W3af overview
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: W3af概述
- en: W3af is a security audit tool for web applications, it is divided into several
    modules, such as `Attack`, `Audit`, `Exploit`, `Discovery`, `Evasion` and `Brute
    Force`. These modules in W3af come with several secondary modules as, for example,
    we can select the XSS option in the `Audit` module if we need to test Cross-site
    scripting (XSS) vulnerabilities in the web application, assuming that it is necessary
    to perform a certain Audit.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: W3af是一个用于web应用程序的安全审计工具，它分为几个模块，如`Attack`、`Audit`、`Exploit`、`Discovery`、`Evasion`和`Brute
    Force`。W3af中的这些模块都带有几个次要模块，例如，如果我们需要在web应用程序中测试跨站脚本（XSS）漏洞，我们可以在`Audit`模块中选择XSS选项，假设需要执行某个审计。
- en: The main feature of W3af is that its audit system is based entirely on plugins
    written in Python, so it manages to create an easily-scalable framework and a
    community of users that contribute to the programming of new plugins in the face
    of web-security failures that can occur.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: W3af的主要特点是其审计系统完全基于用Python编写的插件，因此它成功地创建了一个易于扩展的框架和一个用户社区，他们为可能发生的web安全故障编写新的插件。
- en: 'The vulnerabilities that detect and exploit the available plugins are:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 检测和利用可用插件的漏洞包括：
- en: CSRF
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSRF
- en: XPath Injection
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XPath注入
- en: Buffer overflows
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓冲区溢出
- en: SQL Injection
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL注入
- en: XSS
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XSS
- en: LDAP Injection
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LDAP注入
- en: Remote File Inclusion
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程文件包含
- en: 'In this screenshot, we can see the w3af official site with doc links:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到w3af官方网站和文档链接：
- en: '![](assets/4d29bcb2-5cab-45c8-ba3d-036cbb91b4a6.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4d29bcb2-5cab-45c8-ba3d-036cbb91b4a6.png)'
- en: 'We have a set of preconfigured profiles, for example, the OWASP TOP 10, which
    performs a comprehensive vulnerability analysis:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一组预配置的配置文件，例如OWASP TOP 10，它执行全面的漏洞分析：
- en: '![](assets/60a25426-fe4c-417e-985e-f8afad4701a5.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60a25426-fe4c-417e-985e-f8afad4701a5.png)'
- en: It is a framework that allows different types of tests against web applications
    to determine what vulnerabilities this application can have, detailing levels
    of criticality based on the impact they may have on the web infrastructure or
    on its clients.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个允许对web应用程序进行不同类型测试的框架，以确定该应用程序可能存在的漏洞，根据可能对web基础设施或其客户端的影响程度详细说明了关键级别。
- en: Once the analysis is complete, w3af displays detailed information about the
    vulnerabilities found on the specified website, which can be compromised as a
    result of additional exploitation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦分析完成，w3af会显示关于在指定网站上发现的漏洞的详细信息，这些漏洞可能会因为额外的利用而受到威胁。
- en: 'In the results tab, we see the results of the scan over a specific website:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果选项卡中，我们可以看到对特定网站的扫描结果：
- en: '![](assets/acf93d31-c708-404c-9492-ea5c7b3f443f.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/acf93d31-c708-404c-9492-ea5c7b3f443f.png)'
- en: 'In the **Description** tab, we can see a description of the sql injection vulnerability:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在**描述**选项卡中，我们可以看到SQL注入漏洞的描述：
- en: '![](assets/94da4ae4-bc19-4f9b-9bbd-f92f6e6365cd.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/94da4ae4-bc19-4f9b-9bbd-f92f6e6365cd.png)'
- en: 'Also we get **Cross-site scripting (XSS) vulnerabilities** in the site:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在网站上获得了**跨站脚本（XSS）漏洞**：
- en: '![](assets/7702703b-6961-4b6d-b6af-1410cadf3dfc.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7702703b-6961-4b6d-b6af-1410cadf3dfc.png)'
- en: A complete report of the results of this analysis is available in the shared **testphp_vulnweb_com.pdf**
    file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这份分析结果的完整报告可在共享的**testphp_vulnweb_com.pdf**文件中找到。
- en: 'In this report, we can see the files affected by all detected vulnerabilities,
    such as sql injection:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这份报告中，我们可以看到所有检测到的漏洞影响的文件，比如SQL注入：
- en: '![](assets/3fa55c17-584b-4b98-9473-a5472a7cdc63.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3fa55c17-584b-4b98-9473-a5472a7cdc63.png)'
- en: W3AF profiles
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: W3AF配置文件
- en: The profiles in W3AF are saved configurations of plugins enabled and focused
    on specific objectives, frequently. These types of associations are made at the
    moment of initiating the process of information gathering. Using profiles allows
    us to enable only those plugins that are interesting against an objective, deactivating
    the rest.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: W3AF中的配置文件是已保存的插件配置，专注于特定目标的配置。这些类型的关联是在启动信息收集过程时进行的。使用配置文件允许我们只启用对一个目标有趣的插件，而停用其余的插件。
- en: 'Among the profiles, we can highlight:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中，我们可以强调：
- en: '**bruteforce:** It allows us to obtain credentials from authentication forms
    through a brute-force process.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bruteforce:** 它允许我们通过暴力破解过程从认证表单中获取凭据。'
- en: '**audit_high_risk:** Allows you to identify the most risky vulnerabilities,
    such as SQL injection and XSS.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**audit_high_risk:** 允许您识别最危险的漏洞，比如SQL注入和XSS。'
- en: '**full_audit_manual_disc:** It allows us to make a discovery manually and to
    explore the website in search of known vulnerabilities.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**full_audit_manual_disc:** 它允许我们手动进行发现，并探索网站以寻找已知的漏洞。'
- en: '**full_audit:** It allows a complete audit of the website, using the webSpider
    plugin.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**full_audit:** 它允许使用webSpider插件对网站进行完整的审计。'
- en: '**OWASP_TOP10 :** Allows you to search among the main OWASP security flaws.
    For more information about the security flaws, check out: [http://www.owasp.org/index.php/OWASP_Top_Ten_Project](http://www.owasp.org/index.php/OWASP_Top_Ten_Project).'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OWASP_TOP10：** 允许您搜索主要的OWASP安全漏洞。有关安全漏洞的更多信息，请查看：[http://www.owasp.org/index.php/OWASP_Top_Ten_Project](http://www.owasp.org/index.php/OWASP_Top_Ten_Project)。'
- en: '**web_infrastructure:** Uses all the available techniques to obtain a fingerprint
    of the web infrastructure.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**web_infrastructure:** 使用所有可用的技术来获取web基础设施的指纹。'
- en: '**fast_scan:** It allows us to perform a fast scan on the website, using only
    the fastest audit plugins.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fast_scan:** 它允许我们对网站进行快速扫描，只使用最快的审计插件。'
- en: W3af install
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: W3af安装
- en: W3af is a Python tool that needs many dependencies.The specific details for
    the installation of w3af can be found in the official documentation: [http://docs.w3af.org/en/latest/install.html](http://docs.w3af.org/en/latest/install.html).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: W3af是一个需要许多依赖项的Python工具。有关安装w3af的具体细节可以在官方文档中找到：[http://docs.w3af.org/en/latest/install.html](http://docs.w3af.org/en/latest/install.html)。
- en: 'The requirements for installing it are:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 安装它的要求是：
- en: Python 2.5 or higher**:** `apt-get install python`
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.5或更高版本**：** `apt-get install python`
- en: Python packages**:** `apt-get install nltk python-nltk python-lxml python-svn
    python-fpconst python-pygooglechart python-soappy python-openssl python-scapy
    python-lxml python-svn`
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python包**：** `apt-get install nltk python-nltk python-lxml python-svn python-fpconst
    python-pygooglechart python-soappy python-openssl python-scapy python-lxml python-svn`
- en: 'The source code is available in the GitHub repository ([https://github.com/andresriancho/w3af](https://github.com/andresriancho/w3af)):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可在GitHub存储库中找到（[https://github.com/andresriancho/w3af](https://github.com/andresriancho/w3af)）：
- en: '![](assets/563e241a-542c-4a2d-9d58-1d6510fed56f.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/563e241a-542c-4a2d-9d58-1d6510fed56f.png)'
- en: Now, to prove that the entire environment is correctly configured, simply go
    to the directory where the framework has been downloaded and execute the `./w3af_console`
    command.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了证明整个环境已经正确配置，只需转到下载了框架的目录并执行`./w3af_console`命令。
- en: If the environment is found with all the libraries correctly configured, this
    will open the w3af console ready to receive commands. To execute the GTK interface
    from the same directory execute `./w3af_gui`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现环境中所有库都正确配置，这将打开准备接收命令的w3af控制台。要从相同目录执行GTK界面，请执行`./w3af_gui`。
- en: This command will open the graphical user interface we saw in overview section.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将打开我们在概述部分看到的图形用户界面。
- en: W3af in Python
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的W3af
- en: To use W3AF from any Python script, it is necessary to know certain details
    of its implementation, as well as the main classes that allow to interact with
    the framework programmatically.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要从任何Python脚本中使用W3AF，需要了解其实现的某些细节，以及允许与框架进行编程交互的主要类。
- en: There are several classes included in the framework, however, the most important
    to manage the whole attack process is the `w3afCore` class of the `core.controllers.w3afCore`
    module. An instance of that class contains all the methods and properties needed
    to enable plugins, establish the objective of an attack, manage profiles, and
    above all, start, interrupt, and stop the attack process.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 框架中包含几个类，然而，管理整个攻击过程最重要的是`core.controllers.w3afCore`模块的`w3afCore`类。该类的实例包含启用插件、建立攻击目标、管理配置文件以及最重要的启动、中断和停止攻击过程所需的所有方法和属性。
- en: '[https://github.com/andresriancho/w3af-module](https://github.com/andresriancho/w3af-module)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/andresriancho/w3af-module](https://github.com/andresriancho/w3af-module)'
- en: 'We can find the main controller in this folder inside the GitHub repository:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在GitHub存储库的此文件夹中找到主控制器：
- en: '[https://github.com/andresriancho/w3af-module/tree/master/w3af-repo/w3af/core/controllers](https://github.com/andresriancho/w3af-module/tree/master/w3af-repo/w3af/core/controllers)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/andresriancho/w3af-module/tree/master/w3af-repo/w3af/core/controllers](https://github.com/andresriancho/w3af-module/tree/master/w3af-repo/w3af/core/controllers)'
- en: An instance of the `w3afCore` class has the plugins attribute, which allows
    executing several types of actions such as listing the plugins of a certain category,
    activating and deactivating plugins or setting configuration options for those
    plugins that are configurable.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`w3afCore`类的一个实例具有plugins属性，允许执行多种类型的操作，如列出特定类别的插件、激活和停用插件或为可配置的插件设置配置选项。'
- en: 'You can find the following code in the `w3af_plugins.py` file in the w3af folder:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在w3af文件夹中的`w3af_plugins.py`文件中找到以下代码：
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another interesting feature of w3af is that it allows you to manage profiles,
    which include the configuration corresponding to the enabled profiles and attack
    targets.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: w3af的另一个有趣功能是它允许您管理配置文件，其中包括启用的配置文件和攻击目标对应的配置。
- en: 'You can find the following code in the  `w3af_profiles.py` file in the w3af
    folder in the GitHub repository:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub存储库中的w3af文件夹中的`w3af_profiles.py`文件中找到以下代码：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Discovering sql vulnerabilities with Python tools
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python工具发现SQL漏洞
- en: This section explains how to test whether a website is safe from SQL injection
    using the sqlmap penetration-testing tool. sqlmap is an automated tool for finding
    and exploiting SQL injection vulnerabilities that inject values in the parameters
    of the queries.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了如何使用sqlmap渗透测试工具测试网站是否安全免受SQL注入攻击。sqlmap是一种自动化工具，用于查找和利用注入值在查询参数中的SQL注入漏洞。
- en: Introduction to SQL injection
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL注入简介
- en: OWASP Top 10 put injection as the #1 risk. If an application has a SQL injection
    vulnerability, an attacker could read the data in the database. Including confidential
    information and hashed passwords (or worse, the application keeps the passwords
    in plain text).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP十大将注入作为第一风险。如果应用程序存在SQL注入漏洞，攻击者可以读取数据库中的数据，包括机密信息和散列密码（或更糟糕的是，应用程序以明文形式保存密码）。
- en: 'SQL injection is a technique that is used to steal data by taking advantage
    of a non-validated input vulnerability. It is a code-injection technique where
    an attacker executes malicious SQL queries that control a web application’s database.
    With the right set of queries, a user can gain access to information stored in
    databases. For example, consider the following `php code` segment:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入是一种利用未经验证的输入漏洞来窃取数据的技术。这是一种代码注入技术，攻击者通过执行恶意的SQL查询来控制Web应用程序的数据库。通过一组正确的查询，用户可以访问数据库中存储的信息。例如，考虑以下`php代码`段：
- en: '[PRE4]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If the user enters `“value’); DROP TABLE table;–”` as the input, the original
    query it transforms in a sql query where we are altering the database:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户输入`“value’); DROP TABLE table;–”`作为输入，原始查询将转换为一个SQL查询，我们正在更改数据库：
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Identifying pages vulnerable to SQL Injection
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别易受SQL注入攻击的页面
- en: A simple way to identify websites with the SQL Injection vulnerability is to
    add some characters to the URL, such as quotes, commas, or periods. For example,
    if the page is in PHP and you have a URL where you pass a parameter for a search,
    you can try adding one at the end.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 识别具有SQL注入漏洞的网站的一个简单方法是向URL添加一些字符，例如引号、逗号或句号。例如，如果页面是用PHP编写的，并且您有一个传递搜索参数的URL，您可以尝试在末尾添加一个参数。
- en: Doing injections will basically be using SQL queries as in the case of union
    and select and also the famous join. It is only a matter of manipulating in the
    URL of the page, such as entering the following lines until you can find the error
    shown above and find the name of the table that is prone or vulnerable to access.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 进行注入基本上将使用SQL查询，例如union和select以及著名的join。只需在页面的URL中进行操作，例如输入以下行，直到找到上面显示的错误并找到易受访问的表的名称。
- en: If you observe [http://testphp.vulnweb.com/listproducts.php?cat=1](http://testphp.vulnweb.com/listproducts.php?cat=1),
    where the ‘GET’ parameter cat can be vulnerable to SQL injection, and an attacker
    may be able to gain access to information in the database.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您观察到[http://testphp.vulnweb.com/listproducts.php?cat=1](http://testphp.vulnweb.com/listproducts.php?cat=1)，其中'GET'参数cat可能容易受到SQL注入攻击，攻击者可能能够访问数据库中的信息。
- en: 'A simple test to check whether your website is vulnerable would to be to replace
    the value in the get request parameter with an asterisk (*). For example, in the
    following URL:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的网站是否易受攻击的一个简单测试是将get请求参数中的值替换为星号(*)。例如，在以下URL中：
- en: '[http://testphp.vulnweb.com/listproducts.php?cat=*](http://testphp.vulnweb.com/listproducts.php?cat=*)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://testphp.vulnweb.com/listproducts.php?cat=*](http://testphp.vulnweb.com/listproducts.php?cat=*)'
- en: If this results in an error such as the preceding one, we can conclusively say
    that the website is vulnerable to sql injection.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这导致类似于前面的错误，我们可以断定该网站易受SQL注入攻击。
- en: 'In this screen capture, we can see the error returned by the database when
    we try to use an attack vector over the vulnerable parameter:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，当我们尝试在易受攻击的参数上使用攻击向量时，我们可以看到数据库返回的错误：
- en: '![](assets/80922e96-f6b7-442b-afd3-8aab9b8ef063.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80922e96-f6b7-442b-afd3-8aab9b8ef063.png)'
- en: With Python, we could build a simple script that reads from a `sql-attack-vector.txt` text
    file possible sql attack vectors and checks the output as a result of injecting
    specific strings. The objective is to start from a url where we identify the vulnerable
    parameter and combine the original url with the attack vectors.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python，我们可以构建一个简单的脚本，从`sql-attack-vector.txt`文本文件中读取可能的SQL攻击向量，并检查注入特定字符串的输出结果。目标是从识别易受攻击的参数的URL开始，并将原始URL与攻击向量组合在一起。
- en: 'You can find the following code in the `test_url_sql_injection.py` file in
    the `sql_injection` folder:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`sql_injection`文件夹中的`test_url_sql_injection.py`文件中找到以下代码：
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can find the following code in the `sql-attack-vector.txt` file in the
    `sql_injection` folder:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`sql_injection`文件夹中的`sql-attack-vector.txt`文件中找到以下代码：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When executing `test_url_sql_injection.py`, we can see the injectable cat parameter
    that is vulnerable to many vector attacks:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`test_url_sql_injection.py`时，我们可以看到易受多个向量攻击的可注入cat参数：
- en: '![](assets/83c0687c-c1ef-4791-89f7-348735a48ee7.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/83c0687c-c1ef-4791-89f7-348735a48ee7.png)'
- en: Introducing SQLmap
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍SQLmap
- en: SQLmap is one of the best-known tools written in Python to detect vulnerabilities,
    such as SQL Injection. To do this, the tool allows requests to the parameters
    of a URL that are indicated, either through a GET or POST request and detect whether
    for some parameter the domain is vulnerable because the parameters are not being
    validated correctly. In addition, if it detects any vulnerability, it has the
    ability to attack the server to discover table names, download the database, and
    perform SQL queries automatically.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: SQLmap是用Python编写的最著名的工具之一，用于检测漏洞，例如SQL注入。为此，该工具允许对URL的参数进行请求，这些参数通过GET或POST请求指示，并检测某些参数是否容易受攻击，因为参数未正确验证。此外，如果它检测到任何漏洞，它有能力攻击服务器以发现表名，下载数据库，并自动执行SQL查询。
- en: Read more about sqlmap at [http://sqlmap.org](http://sqlmap.org).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://sqlmap.org](http://sqlmap.org)了解更多关于sqlmap的信息。
- en: Sqlmap is an automated tool for finding and exploiting SQL injection vulnerabilities
    written in Python. It could find a SQL injection vulnerability using various techniques,
    such as boolean-based blind, time-based, UNION-query-based, and stacked queries.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Sqlmap是一个用Python编写的自动化工具，用于查找和利用SQL注入漏洞。它可以使用各种技术来发现SQL注入漏洞，例如基于布尔的盲目、基于时间的、基于UNION查询的和堆叠查询。
- en: 'Sqlmap currently supports the following databases:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Sqlmap目前支持以下数据库：
- en: MySQL
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL
- en: Oracle
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle
- en: PostgreSQL
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: Microsoft SQL Server
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server
- en: 'Once it detects a SQL injection on the target host, you can choose from a variety
    of options:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它在目标主机上检测到SQL注入，您可以从各种选项中进行选择：
- en: Perform an extensive backend DBMS fingerprint
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行全面的后端DBMS指纹
- en: Retrieve the DBMS session user and database
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索DBMS会话用户和数据库
- en: Enumerate users, password hashes, privileges, and databases
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举用户、密码哈希、权限和数据库
- en: Dump the entire DBMS table/columns or the user’s specific DBMS table/columns
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转储整个DBMS表/列或用户特定的DBMS表/列
- en: Run custom SQL statements
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行自定义SQL语句
- en: Installing SQLmap
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装SQLmap
- en: 'Sqlmap comes preinstalled with some linux distributions oriented to security
    tasks, such as kali linux, which is the preferred choice of most penetration testers.
    However, you can install `sqlmap` on other debian-based linux systems using the
    `apt-get` command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Sqlmap预装在一些面向安全任务的Linux发行版中，例如kali linux，这是大多数渗透测试人员的首选。但是，您可以使用`apt-get`命令在其他基于debian的Linux系统上安装`sqlmap`：
- en: '[PRE8]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Also we can install it from the source code in the GitHub repository – [https://github.com/sqlmapproject/sqlmap](https://github.com/sqlmapproject/sqlmap):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以从GitHub存储库的源代码中安装它 - [https://github.com/sqlmapproject/sqlmap](https://github.com/sqlmapproject/sqlmap)：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can look at the set of parameters that can be passed to the `sqlmap.py`
    script with the `-h` option:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`-h`选项查看可以传递给`sqlmap.py`脚本的参数集：
- en: '![](assets/35e8831c-fbcd-4b4e-bdd7-781048bcc6a8.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/35e8831c-fbcd-4b4e-bdd7-781048bcc6a8.png)'
- en: 'The parameters that we will use for the basic SQL Injection are shown in the
    preceding image:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用于基本SQL注入的参数如前图所示：
- en: '![](assets/d0f18985-5ff0-41f4-9979-00d00ff45700.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d0f18985-5ff0-41f4-9979-00d00ff45700.png)'
- en: Using SQLMAP to test a website for a SQL Injection vulnerability
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQLMAP测试网站的SQL注入漏洞
- en: 'These are the main steps we can follow to obtain all information about a database
    that is behind a sql injection vulnerability:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们可以遵循的主要步骤，以获取有关潜在SQL注入漏洞的数据库的所有信息：
- en: '**Step 1: List information about the existing databases**'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤1：列出现有数据库的信息**'
- en: Firstly, we have to enter the web url that we want to check along with the -u
    parameter.  We may also use the `–tor` parameter if we wish to test the website
    using proxies. Now typically, we would want to test whether it is possible to
    gain access to a database. For this task we can use the `--dbs` option, which lists
    all the available databases.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须输入要检查的Web URL，以及-u参数。我们还可以使用`--tor`参数，如果希望使用代理测试网站。现在通常，我们希望测试是否可能访问数据库。对于此任务，我们可以使用`--dbs`选项，列出所有可用的数据库。
- en: '`sqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1 --dbs`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1 --dbs`'
- en: 'With the execution of the previous command, we observe the presence of two
    databases, `acuart` and `information_schema`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行上一个命令，我们观察到存在两个数据库，`acuart`和`information_schema`：
- en: '![](assets/d2cb69e2-3cbd-46b4-ac35-36d1b451aea0.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d2cb69e2-3cbd-46b4-ac35-36d1b451aea0.png)'
- en: We get the following output showing us that there are two available databases.
    Sometimes, the application will tell you that it has identified the database and
    ask whether you want to test other database types. You can go ahead and type ‘Y’.
    Further, it may ask whether you want to test other parameters for vulnerabilities,
    type ‘Y’ here as we want to thoroughly test the web application.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出，显示有两个可用的数据库。有时，应用程序会告诉您它已经识别了数据库，并询问您是否要测试其他数据库类型。您可以继续输入“Y”。此外，它可能会询问您是否要测试其他参数以查找漏洞，请在此处输入“Y”，因为我们希望彻底测试Web应用程序。
- en: '**Step 2: List information about Tables present in a particular Database**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤2：列出特定数据库中存在的表的信息**'
- en: To try to access any of the databases, we have to modify our command. We now
    use -D to specify the name of the database that we wish to access, and once we
    have access to the database, we want to see whether we can access the tables.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试访问任何数据库，我们必须修改我们的命令。我们现在使用-D来指定我们希望访问的数据库的名称，一旦我们访问了数据库，我们希望看看是否可以访问表。
- en: 'For this task, we can use the `--tables` query to access the acuart database:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此任务，我们可以使用`--tables`查询来访问acuart数据库：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the following image, we see that eight tables have been recovered. In this
    way, we definitely know that the website is vulnerable:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们看到已恢复了八个表。通过这种方式，我们确切地知道网站是易受攻击的：
- en: '![](assets/fe550ac2-0495-41f8-ac80-aea3322b5a87.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fe550ac2-0495-41f8-ac80-aea3322b5a87.png)'
- en: '**Step 3: List information about the columns of a particular table**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤3：列出特定表的列信息**'
- en: If we want to view the columns of a particular table, we can use the following
    command, in which we use `-T` to specify the table name,  and **`--columns`**
    to query the column names.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要查看特定表的列，我们可以使用以下命令，其中我们使用`-T`来指定表名，并使用**`--columns`**来查询列名。
- en: 'This is the command we can try to access the ‘users’ table:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以尝试访问‘users’表的命令：
- en: '[PRE11]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Step 4: Dump the data from the columns**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤4：从列中转储数据**'
- en: 'Similarly, we can access all information in a specific table by using the following
    command, where the `**--**dump` query retrieves all the data from the users table:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用以下命令访问特定表中的所有信息，其中`**--dump`查询检索用户表中的所有数据：
- en: '[PRE12]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'From the following image, we can see that we have accessed the data in the
    database:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下图片中，我们可以看到我们已经访问了数据库中的数据：
- en: '![](assets/6c92aa64-3640-4011-9c2d-9184315084b5.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6c92aa64-3640-4011-9c2d-9184315084b5.png)'
- en: Other commands
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他命令
- en: Similarly, on vulnerable websites, we can literally explore through databases
    to extract information with other commands.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在易受攻击的网站上，我们可以通过其他命令从数据库中提取信息。
- en: 'With this command, we can get all users from database:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，我们可以从数据库中获取所有用户：
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, we obtain users registered in the database-management system:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们获得了在数据库管理系统中注册的用户：
- en: '![](assets/3d67ef38-867a-4907-aa9f-5277b7e4b8c1.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d67ef38-867a-4907-aa9f-5277b7e4b8c1.png)'
- en: 'With this command, we can get columns from a table:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，我们可以从表中获取列：
- en: '[PRE14]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we obtain columns from the users table:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从用户表中获取列：
- en: '![](assets/948d4ea1-9b96-47c7-9ad7-e817d5366bd5.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/948d4ea1-9b96-47c7-9ad7-e817d5366bd5.png)'
- en: 'With this command, we can get an interactive shell:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，我们可以获得一个交互式shell：
- en: '[PRE15]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here, we obtain a shell to interact with the database with the sql language
    queries:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们获得一个与数据库交互的shell，使用sql语言查询：
- en: '![](assets/18f7991f-639c-4f3a-8c3a-4efdafa79d07.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/18f7991f-639c-4f3a-8c3a-4efdafa79d07.png)'
- en: Other tools for detecting SQL Injection vulnerabilities
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他用于检测SQL注入漏洞的工具
- en: In the Python ecosystem, we can find other tools, such as DorkMe and Xsscrapy,
    for discovering sql injection vulnerabilties.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python生态系统中，我们可以找到其他工具，例如DorkMe和Xsscrapy，用于发现SQL注入漏洞。
- en: DorkMe
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DorkMe
- en: DorkMe is a tool designed with the purpose of making searching for vulnerabilities
    easier with Google Dorks, such as SQL Injection vulnerabilities ([https://github.com/blueudp/DorkMe](https://github.com/blueudp/DorkMe)).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: DorkMe是一个旨在通过Google Dorks更轻松地搜索漏洞的工具，例如SQL注入漏洞([https://github.com/blueudp/DorkMe](https://github.com/blueudp/DorkMe))。
- en: You also need install the `pip install Google-Search-API` Python package.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装`pip install Google-Search-API` Python包。
- en: 'We can check dependencies with the `requirements.txt` file and install them
    with:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`requirements.txt`文件检查依赖项并安装它们：
- en: '[PRE16]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'These are the options provided by the script:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是脚本提供的选项：
- en: '![](assets/f3dcb505-a57c-47a1-9d7b-4a38abce9acd.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f3dcb505-a57c-47a1-9d7b-4a38abce9acd.png)'
- en: 'We can check the same `url` we used with sqlmap in the previous section.We
    can use the `--dorks vulns -v` options parameters recommended for the test:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查在上一节中使用sqlmap的相同`url`。我们可以使用建议用于测试的`--dorks vulns -v`选项参数：
- en: '[PRE17]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can see we obtain sql injection vulnerabilities with a high impact:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们获得了高影响力的SQL注入漏洞：
- en: '![](assets/3a242171-0cd7-42ea-b572-43668e9098b0.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a242171-0cd7-42ea-b572-43668e9098b0.png)'
- en: XSScrapy
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XSScrapy
- en: XSScrapy is an application based on Scrapy and allows us to find XSS vulnerabilities
    and SQL-injection-type vulnerabilities.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: XSScrapy是基于Scrapy的应用程序，允许我们发现XSS漏洞和SQL注入类型的漏洞。
- en: The source code is available in the GitHub repository: [https://github.com/DanMcInerney/xsscrapy](https://github.com/DanMcInerney/xsscrapy).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可在GitHub存储库中找到：[https://github.com/DanMcInerney/xsscrapy](https://github.com/DanMcInerney/xsscrapy)。
- en: 'To install it on our machine, we could clone the repository and execute the
    `python pip` command together with the `requirements.txt` file, which contains
    the Python dependencies and modules used by the application:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的机器上安装它，我们可以克隆存储库并执行`python pip`命令，以及包含应用程序使用的Python依赖项和模块的`requirements.txt`文件：
- en: '[PRE18]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'One of the main dependencies you need to install is `scrapy`: [https://scrapy.org/](https://scrapy.org/).'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装的主要依赖项之一是`scrapy`：[https://scrapy.org/](https://scrapy.org/)。
- en: Scrapy is a framework for Python that allows you to `perform webscraping tasks,
    web crawling processes, and data analysis`. It allows us to recursively scan the
    contents of a website and apply a set of rules on said contents to extract information
    that may be useful to us.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Scrapy是Python的一个框架，允许您`执行网页抓取任务、网络爬虫过程和数据分析`。它允许我们递归扫描网站的内容，并对这些内容应用一组规则，以提取对我们有用的信息。
- en: 'These are the main elements in Scrapy:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Scrapy中的主要元素：
- en: '**Interpreter:** Allows quick tests, as well as creating projects with a defined
    structure.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释器：**允许快速测试，以及创建具有定义结构的项目。'
- en: '**Spiders:** Code routines that are responsible for making HTTP requests to
    a list of domains given by the client and applying rules in the form of regular or
    XPATH expressions on the content returned from HTTP requests.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蜘蛛：**负责向客户端提供的域名列表发出HTTP请求并对从HTTP请求返回的内容应用规则的代码例程，规则以正则表达式或XPATH表达式的形式呈现。'
- en: '**XPath expressions:** With XPath expressions, we can get to a fairly detailed
    level of the information we want to extract. For example, if we want to extract
    the download links from a page, it is enough to obtain the Xpath expression of
    the element and access the href attribute.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XPath表达式：**使用XPath表达式，我们可以获得我们想要提取的信息的相当详细的级别。例如，如果我们想要从页面中提取下载链接，只需获取元素的Xpath表达式并访问href属性即可。'
- en: '**Items:** Scrapy uses a mechanism based on XPATH expressions called "**Xpath
    selectors**". These selectors are responsible for applying Xpath rules defined
    by the developer and composing Python objects that contain the information extracted.
    The items are like containers of information, they allow us to store the information
    following the rules that we apply when return the contents that we are obtaining.
    They contain the fields of information we want to extract.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Items:** Scrapy使用一种基于XPATH表达式的机制，称为“**Xpath选择器**”。这些选择器负责应用开发人员定义的Xpath规则，并组成包含提取的信息的Python对象。项目就像信息的容器，它们允许我们存储遵循我们应用的规则的信息，当我们返回正在获取的内容时。它们包含我们想要提取的信息字段。'
- en: 'In this screenshot, we can see the most recent scrapy version available on
    the official site:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在此截图中，我们可以看到官方网站上最新的scrapy版本：
- en: '![](assets/de0b41a1-c16d-4835-9c8e-5a4f242152d4.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de0b41a1-c16d-4835-9c8e-5a4f242152d4.png)'
- en: You can install it with the **pip install scrapy** command. Also is available
    in the conda repository and you can install it with the `conda install -c conda-forge
    scrapy`command.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`pip install scrapy`命令安装它。它也可以在conda存储库中找到，并且您可以使用`conda install -c conda-forge
    scrapy`命令进行安装。
- en: 'XSScrapy runs in command-line mode and has the following options:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: XSScrapy在命令行模式下运行，并具有以下选项：
- en: '![](assets/a40b68a3-b0cb-44c2-9a82-552111ab4e38.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a40b68a3-b0cb-44c2-9a82-552111ab4e38.png)'
- en: The most common option to use is in which the URL (`-u`/url) to be analyzed
    is parameterized, and from the root URL, the tool is able to follow the internal
    links to analyze the successive links.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的选项是对要分析的URL(`-u`/url)进行参数化，从根URL开始，该工具能够跟踪内部链接以分析后续链接。
- en: Another interesting parameter is one that allows us to establish the maximum
    number of simultaneous connections against the site that we are analyzing (`-c`/-connections)
    something that is very practical to prevent a firewall or IDS system detecting
    the attack and blocking requests from the IP where they are made.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的参数是允许我们建立对我们正在分析的站点的最大同时连接数(`-c`/-connections)，这对于防止防火墙或IDS系统检测攻击并阻止来自发起攻击的IP的请求非常实用。
- en: In addition, if the website requires authentication (digest or basic), it is
    possible to indicate a user login and password with the `-l` (login) and `-p`
    (password) parameters.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果网站需要身份验证（摘要或基本），则可以使用`-l`（登录）和`-p`（密码）参数指示用户登录和密码。
- en: 'We can try to execute this script with the previous site where we have found
    an XSS vulnerability:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试使用我们之前发现XSS漏洞的网站执行此脚本：
- en: '[PRE19]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the execution of this script, we can see that it detect a `sql` injection
    in a php site:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行此脚本时，我们可以看到它检测到一个php网站中的`sql`注入：
- en: '![](assets/1a57a179-98cb-4e8c-8483-d854e6e6ffdf.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1a57a179-98cb-4e8c-8483-d854e6e6ffdf.png)'
- en: The execution results of this analysis are available in the `testphp.vulnweb.com.txt` shared
    file, available in the GitHub repository.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 此分析的执行结果可在GitHub存储库中的`testphp.vulnweb.com.txt`共享文件中找到。
- en: Testing heartbleed and SSL/TLS vulnerabilities
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试heartbleed和SSL/TLS漏洞
- en: This section explains how to test whether a website is safe from SQL injection
    using the sqlmap penetration-testing tool. sqlmap is an automated tool for finding
    and exploiting SQL injection vulnerabilities injecting values in the parameters
    of the queries.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了如何使用sqlmap渗透测试工具测试网站是否安全免受SQL注入的影响。sqlmap是一种自动化工具，用于查找和利用在查询参数中注入值的SQL注入漏洞。
- en: Introducing OpenSSL
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍OpenSSL
- en: Openssl is an implementation of SSL and TLS protocols that is widely used by
    servers of all types; a fairly high percentage of servers on the internet use
    it to ensure communication between clients and servers using strong encryption
    mechanisms.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Openssl是SSL和TLS协议的实现，广泛用于各种类型的服务器；互联网上相当高比例的服务器使用它来确保客户端和服务器之间使用强加密机制进行通信。
- en: However, it is an implementation that throughout its years of development has
    been violated on several occasions, affecting the confidentiality and privacy
    of user information. Some vulnerabilities that have been made public have been
    corrected; however, the security patches that should be applied to a vulnerable
    version of OpenSSL are not applied as quickly, thus leaving vulnerable servers
    on the internet that we can find in Shodan.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它是一种在其多年的发展中多次遭到侵犯的实现，影响了用户信息的保密性和隐私。已公开的一些漏洞已经得到了纠正；然而，应该应用于易受攻击的OpenSSL版本的安全补丁并没有被迅速应用，因此在Shodan上可以找到易受攻击的服务器。
- en: Finding vulnerable servers in Shodan
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Shodan中查找易受攻击的服务器
- en: We can easily make a script that obtains the results of a server that can be
    vulnerable to heartbleed due to a vulnerable OpenSSL version.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地编写一个脚本，获取由于易受攻击的OpenSSL版本而可能易受heartbleed影响的服务器的结果。
- en: 'You can find the following code in the `ShodanSearchOpenSSL.py` file in the `heartbleed_shodan`
    folder:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在`heartbleed_shodan`文件夹中的`ShodanSearchOpenSSL.py`文件中可以找到以下代码：
- en: '[PRE20]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see in this image, the total number of servers that can be vulnerable
    and have an OpenSSL v1.0 is 3,900:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这张图片中所看到的，可以受到影响且具有OpenSSL v1.0的服务器总数为3,900：
- en: '![](assets/25ef6860-8d38-4e66-aab8-9f6a4e6ff8f7.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/25ef6860-8d38-4e66-aab8-9f6a4e6ff8f7.png)'
- en: 'If we make the request from the web interface, we see even more results:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从Web界面发出请求，我们会看到更多结果：
- en: '![](assets/7875cba2-8c33-4114-b7ba-2bb5478a06d7.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7875cba2-8c33-4114-b7ba-2bb5478a06d7.png)'
- en: An attacker could try to gain access to any of these servers; for this, you
    can use an exploit that is in the [https://www.exploit-db.com/exploits/32745](https://www.exploit-db.com/exploits/32745) URL.
    In the next section, we are going to analyze this vulnerability and how to exploit
    it.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以尝试访问这些服务器中的任何一个；为此，可以使用位于[https://www.exploit-db.com/exploits/32745](https://www.exploit-db.com/exploits/32745)URL中的漏洞利用。在下一节中，我们将分析此漏洞以及如何利用它。
- en: Heartbleed vulnerability (OpenSSL CVE-2014-0160)
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Heartbleed漏洞（OpenSSL CVE-2014-0160）
- en: Vulnerability CVE-2014-0160, also known as Heartbleed, is considered one of
    the biggest security failures on the internet to date.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞CVE-2014-0160，也称为Heartbleed，被认为是迄今为止互联网上最严重的安全故障之一。
- en: It is one of the most critical vulnerabilities in the `OpenSSL` package. To
    understand the impact of this vulnerability, it is necessary to understand the
    operation of the "HeartBeat" extension, which has been a central element in the
    operation of OpenSSL, since it allows us improve the performance of clients and
    servers that use an encrypted channel, such as SSL.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`OpenSSL`软件包中最严重的漏洞之一。要了解此漏洞的影响，有必要了解“HeartBeat”扩展的运作方式，这一扩展一直是OpenSSL运作的核心要素，因为它允许我们改进使用加密通道（如SSL）的客户端和服务器的性能。
- en: To establish an SSL connection with a server, a process called "HandShake" has
    to be completed, consisting of the exchange of symmetric and asymmetric keys for
    establishing the encrypted connection between client and server. This process
    is quite expensive in terms of time and computing resources.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 要与服务器建立SSL连接，必须完成一个称为“握手”的过程，其中包括对称和非对称密钥的交换，以建立客户端和服务器之间的加密连接。这个过程在时间和计算资源方面非常昂贵。
- en: HeartBeat is a mechanism that allows us to optimize the time of establishment
    of the handshake in such a way that it allows the server to indicate that the
    SSL session must be maintained while the client is using it.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: HeartBeat是一种机制，它允许我们优化握手建立的时间，以便允许服务器指示SSL会话在客户端使用时必须保持。
- en: The mechanism is that the client inserts a payload and indicates the length
    of said payload in one of the fields of the structure. Subsequently, the server
    receives said packet and is responsible for composing a response message with
    a structure called `TLS1_HB_RESPONSE`, which will be composed simply by the "n"
    bytes that are indicated in the length of the `TLS1_HB_REQUEST` structure.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 该机制是客户端插入有效负载并在结构的一个字段中指示所述有效负载的长度。随后，服务器接收所述数据包，并负责使用称为`TLS1_HB_RESPONSE`的结构组成响应消息，该结构将仅由`TLS1_HB_REQUEST`结构长度中指示的“n”字节组成。
- en: The implementation problem introduced in OpenSSL is found in the incorrect validation
    of the length of the data sent in the `TLS_HB_REQUEST` structure, since when it
    is going to compose the `TLS1_HB_RESPONSE` structure, the server is responsible
    for locating the exact location of the `TLS_HB_REQUEST` structure in the memory
    of the server and reading the "n" bytes of the field where the payload is based
    on the value set in the length field.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL中引入的实现问题在于未正确验证`TLS_HB_REQUEST`结构中发送的数据的长度，因为在组成`TLS1_HB_RESPONSE`结构时，服务器负责定位服务器内存中`TLS_HB_REQUEST`结构的确切位置，并根据长度字段中设置的值读取有效负载所在的字段的“n”字节。
- en: This means that an attacker can send a payload with a data byte and set an arbitrary
    value in the length field, which is usually less than or equal to 64 kBytes, and
    the server will send a `TLS1_HB_RESPONSE` message with 64 kBytes of information
    stored in the memory of the server.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着攻击者可以发送一个带有数据字节的有效负载，并在长度字段中设置任意值，通常小于或等于64 k字节，服务器将发送一个带有64 k字节信息的`TLS1_HB_RESPONSE`消息，该信息存储在服务器的内存中。
- en: This data may have sensitive user information and passwords of the system, therefore
    it is a very serious vulnerability that has affected millions of servers because
    OpenSSL is a widely-used implementation by Apache and Ngnix servers. As we can
    see in Shodan, today there are still servers that use version 1.0.1 and most can
    be vulnerable.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据可能包含敏感用户信息和系统密码，因此这是一个非常严重的漏洞，影响了数百万服务器，因为OpenSSL是Apache和Ngnix服务器广泛使用的实现。正如我们在Shodan中看到的，今天仍然有使用1.0.1版本的服务器，其中大多数可能是易受攻击的。
- en: You can find the the code in `Test_heartbeat_vulnerability.py` in the `heartbleed_shodan`
    folder.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`heartbleed_shodan`文件夹中的`Test_heartbeat_vulnerability.py`中找到代码。
- en: The script tries to perform a HandShake with the server in the indicated port
    and later, it is responsible for sending a packet with the malicious structure, `TLS1_HB_REQUEST`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本尝试在指定端口与服务器进行握手，并且随后负责发送一个带有恶意结构`TLS1_HB_REQUEST`的数据包。
- en: If the data packet returned by the server is of the "24" type, it indicates
    that it is a response with the `TLS1_HB_RESPONSE` structure, and in the case that
    the payload is greater than the size of the payload sent in the request packet,
    it can be considered that the server is vulnerable and that it has returned information
    related to the memory of the server, otherwise it is assumed that the server has
    processed the malicious request, but has not returned any additional data. This
    indicates that there has been no information leak and that the server is not vulnerable.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器返回的数据包是“24”类型，则表示它是带有`TLS1_HB_RESPONSE`结构的响应，在请求数据包中发送的有效负载大小大于响应有效负载的大小时，可以认为服务器是易受攻击的，并且已返回与服务器内存相关的信息，否则可以假定服务器已处理了恶意请求，但没有返回任何额外的数据。这表明没有信息泄漏，服务器不易受攻击。
- en: 'After running the script on a vulnerable server, the output will be similar
    to the one shown here:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在易受攻击的服务器上运行脚本后，输出将类似于此处显示的输出：
- en: '![](assets/57aa2e26-1164-4706-b971-7857370875aa.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57aa2e26-1164-4706-b971-7857370875aa.png)'
- en: To detect this bug in a server with openssl activated, we send a specific request
    and if the response server is equal to specific heartbleed payload, then the server
    is vulnerable and you could access information that, in theory, should be protected
    with ssl.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要在启用了openssl的服务器中检测此漏洞，我们发送一个特定请求，如果响应服务器等于特定的heartbleed有效负载，则服务器是易受攻击的，您可以访问理论上应该受SSL保护的信息。
- en: The response from the server includes information that is stored in the memory
    of the process. In addition to being a serious vulnerability that affects many
    services, it is very easy to detect a vulnerable target and then periodically
    extract chunks from the server's memory.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的响应包括存储在进程内存中的信息。除了是一个影响许多服务的严重漏洞外，检测易受攻击的目标然后定期从服务器内存中提取块是非常容易的。
- en: We can combine the shodan search with checking for heartbleed vulnerability
    in servers.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将shodan搜索与检查服务器的心脏出血漏洞结合起来。
- en: For this task, we have defined the `shodanSearchVulnerable()` and `checkVulnerability()`
    methods for checking vulnerability for each sever that matches with the “OpenSSL
    1.0.1” Shodan search.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为此任务，我们已经定义了`shodanSearchVulnerable()`和`checkVulnerability()`方法，用于检查与“OpenSSL
    1.0.1”Shodan搜索匹配的每个服务器的易受攻击性。
- en: For python 2.x , you can find the the code in  `testShodan_openssl_python2.py`in
    the`heartbleed_shodan` folder.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 对于python 2.x，您可以在`heartbleed_shodan`文件夹中的`testShodan_openssl_python2.py`中找到代码。
- en: For python 3.x, you can find the the code in `testShodan_openssl_python3.py`in
    the `heartbleed_shodan` folder.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 对于python 3.x，您可以在`heartbleed_shodan`文件夹中的`testShodan_openssl_python3.py`中找到代码。
- en: 'In the following code, we review the main methods we can develop for searching
    in shodan servers that can be vulnerable because of openssl version vulnerable,
    also we need to check whether port 443 is opened:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们回顾了我们可以开发的用于搜索易受openssl版本易受攻击的shodan服务器的主要方法，还需要检查端口443是否打开：
- en: '[PRE21]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once we have defined our method for searching in shodan and checked that `port
    443` is opened, we can check with the `socket` module specific heartbleed vulnerability:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了在shodan中搜索的方法并检查了`端口443`是否打开，我们可以使用`socket`模块检查特定的心脏出血漏洞：
- en: '[PRE22]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Other tools for testing openssl vulnerability
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于测试openssl易受攻击性的其他工具
- en: In this section, we cover some tools we can use for testing openssl vulnerabilities
    related to heartbleed and certificates.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了一些可以用于测试与心脏出血和证书相关的openssl漏洞的工具。
- en: Heartbleed-masstest
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 心脏出血-大规模测试
- en: This tool allows us to scan multiple hosts for Heartbleed, in an efficient way
    with multithreading. This tests for OpenSSL versions vulnerable to Heartbleed
    without exploiting the server, so the heartbeat request does not cause the server
    to leak any data from memory or expose any data in an unauthorized manner: [https://github.com/musalbas/heartbleed-masstest](https://github.com/musalbas/heartbleed-masstest).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具允许我们以多线程的高效方式扫描多个主机的心脏出血。这个测试OpenSSL版本易受心脏出血漏洞的服务器，而不是利用服务器，因此心跳请求不会导致服务器泄漏内存中的任何数据或以未经授权的方式暴露任何数据：[https://github.com/musalbas/heartbleed-masstest](https://github.com/musalbas/heartbleed-masstest)。
- en: Scanning for Heartbleed with the nmap port scanner
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用nmap端口扫描程序扫描心脏出血
- en: 'Nmap has a Heartbleed script that does a great job of detecting vulnerable
    servers. The script is available on the OpenSSL-Heartbleed nmap script page:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Nmap有一个Heartbleed脚本，可以很好地检测易受攻击的服务器。该脚本可在OpenSSL-Heartbleed nmap脚本页面上找到：
- en: '[http://nmap.org/nsedoc/scripts/ssl-heartbleed.html](http://nmap.org/nsedoc/scripts/ssl-heartbleed.html)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://nmap.org/nsedoc/scripts/ssl-heartbleed.html](http://nmap.org/nsedoc/scripts/ssl-heartbleed.html)'
- en: '[https://svn.nmap.org/nmap/scripts/ssl-heartbleed.nse](https://svn.nmap.org/nmap/scripts/ssl-heartbleed.nse)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://svn.nmap.org/nmap/scripts/ssl-heartbleed.nse](https://svn.nmap.org/nmap/scripts/ssl-heartbleed.nse)'
- en: In the Windows operating system, by default, scripts are located in the `C:\Program
    Files (x86)\Nmap\scripts` path.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows操作系统中，默认情况下，脚本位于`C:\Program Files (x86)\Nmap\scripts`路径中。
- en: In Linux operating system, by default, scripts are located in the `/usr/share/nmap/scripts/`
    path.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux操作系统中，默认情况下，脚本位于`/usr/share/nmap/scripts/`路径中。
- en: '[PRE23]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'All we need to do is use the Heartbleed script and add in the IP address of
    our target site. If the target we are analyzing is vulnerable, we will see this:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是使用Heartbleed脚本并添加目标站点的IP地址。如果我们正在分析的目标易受攻击，我们将看到这个：
- en: '![](assets/081c95cd-444d-4a99-9d54-c3548dd4c947.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/081c95cd-444d-4a99-9d54-c3548dd4c947.png)'
- en: Analyzing SSL/TLS configurations with SSLyze script
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SSLyze脚本分析SSL/TLS配置
- en: SSLyze is a Python tool that works with python 3.6 and analyzes the SSL configuration
    of a server to detect issues such as bad certificates and dangerous cipher suites.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: SSLyze是一个使用python 3.6工作的Python工具，用于分析服务器的SSL配置，以检测诸如不良证书和危险密码套件之类的问题。
- en: 'This tool is available on the `pypi` repository and you can install it from
    source code or with the pip install command:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具可以在`pypi`存储库中找到，您可以从源代码或使用pip install命令进行安装：
- en: '[https://pypi.org/project/SSLyze/](https://pypi.org/project/SSLyze/)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pypi.org/project/SSLyze/](https://pypi.org/project/SSLyze/)'
- en: '[https://github.com/nabla-c0d3/sslyze](https://github.com/nabla-c0d3/sslyze)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/nabla-c0d3/sslyze](https://github.com/nabla-c0d3/sslyze)'
- en: 'Also it''s necessary to install some dependencies, such as `nassl`, also available
    in the pypi repository:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要安装一些依赖项，例如`nassl`，也可以在pypi存储库中找到：
- en: '[https://pypi.org/project/nassl/](https://pypi.org/project/nassl/)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pypi.org/project/nassl/](https://pypi.org/project/nassl/)'
- en: '[https://github.com/nabla-c0d3/nassl](https://github.com/nabla-c0d3/nassl)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/nabla-c0d3/nassl](https://github.com/nabla-c0d3/nassl)'
- en: 'These are the options that the script provides:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是脚本提供的选项：
- en: '![](assets/7ab6fc9d-d479-4a73-9feb-bae03b64836e.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7ab6fc9d-d479-4a73-9feb-bae03b64836e.png)'
- en: 'One of the options it provide is HeartbleedPlugin for detecting this vulnerability:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供的选项之一是用于检测此漏洞的HeartbleedPlugin：
- en: '![](assets/edecd339-9f8c-4ca7-a9fb-08dc01296eb5.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/edecd339-9f8c-4ca7-a9fb-08dc01296eb5.png)'
- en: 'Also it provides another plugin for detecting OpenSSL cipher suites the server
    is using:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了另一个用于检测服务器正在使用的OpenSSL密码套件的插件：
- en: '![](assets/2d99e43d-c5e8-480a-99a4-ab36aaf2e692.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2d99e43d-c5e8-480a-99a4-ab36aaf2e692.png)'
- en: 'If we try to execute the script over a specific IP address, it returns a report
    with results:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试在特定IP地址上执行脚本，它将返回一个带有结果的报告：
- en: '![](assets/8f701679-aa3f-46b4-81d0-ea7ae14db25a.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8f701679-aa3f-46b4-81d0-ea7ae14db25a.png)'
- en: The execution results of this analysis are available in the `sslyze_72.249.130.4.txt` shared
    file, available in the GitHub repository.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 此分析的执行结果可在GitHub存储库中的`sslyze_72.249.130.4.txt`共享文件中找到。
- en: Other services
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他服务
- en: There are several online services that allow you to determine whether a server
    is affected with this vulnerability and others for testing ssl versions and certificates
    in servers and domains, such as ssllabs fror qualys.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个在线服务可以帮助您确定服务器是否受到此漏洞的影响，还有其他用于测试服务器和域中的ssl版本和证书的服务，例如ssllabs fror qualys。
- en: 'In these links, we can some services for doing this kind of testing:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些链接中，我们可以找到一些进行此类测试的服务：
- en: '[https://filippo.io/Heartbleed](https://filippo.io/Heartbleed)'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://filippo.io/Heartbleed](https://filippo.io/Heartbleed)'
- en: '[https://www.ssllabs.com/ssltest/index.html](https://www.ssllabs.com/ssltest/index.html)'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ssllabs.com/ssltest/index.html](https://www.ssllabs.com/ssltest/index.html)'
- en: 'The qualys online service returns the results in the form of a **report** where
    we see possible problems that the version of openssl that the server is using:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: qualys在线服务以**报告**的形式返回结果，其中我们可以看到服务器正在使用的openssl版本可能存在的问题：
- en: '![](assets/dfa631a6-0027-4e19-bc8b-a3c7138ff7cf.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dfa631a6-0027-4e19-bc8b-a3c7138ff7cf.png)'
- en: 'We can also see in detail the SSL/TLS version and information about possible
    vulnerabilities:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以详细了解SSL/TLS版本和有关可能漏洞的信息：
- en: '![](assets/30fabd61-e4eb-4fdd-9765-37ecdb4f8844.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/30fabd61-e4eb-4fdd-9765-37ecdb4f8844.png)'
- en: With the Shodan service, you can see more information related to CVE vulnerabilities
    detected in a server and SSL certificate.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Shodan服务，您可以查看与服务器和SSL证书中检测到的CVE漏洞相关的更多信息。
- en: 'In this screenshot, we can see other CVE related to configuration problems
    in servers:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在此截图中，我们可以看到与服务器中的配置问题相关的其他CVE：
- en: '![](assets/f1769398-c548-456c-956a-4468ff4aced7.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1769398-c548-456c-956a-4468ff4aced7.png)'
- en: Summary
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The analysis of vulnerabilities in web applications is currently the best field
    in which to perform security audits. One of the objectives of this chapter was
    to learn about the tools in the python ecosystem that allow us to identify server
    vulnerabilities in web applications, such as w3af and sqlmap. In the sql injection
    section, we covered sql injection and tools for detecting this kind of vulnerability
    with sqlmap and xssscrapy. Also, we looked at how to detect vulnerabilities related
    to OpenSSL in servers.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，对Web应用程序中的漏洞进行分析是执行安全审计的最佳领域。本章的目标之一是了解Python生态系统中的工具，这些工具可以帮助我们识别Web应用程序中的服务器漏洞，例如w3af和sqlmap。在SQL注入部分，我们涵盖了SQL注入和使用sqlmap和xssscrapy检测此类漏洞的工具。此外，我们还研究了如何检测与服务器中的OpenSSL相关的漏洞。
- en: In the next chapter, we will explore programming packages and python modules
    for extracting information about geolocation IP addresses, extracting metadata
    from images and documents, and identifying web technology used by a site in the
    front and the back.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨用于提取有关地理位置IP地址的信息、提取图像和文档的元数据以及识别网站前端和后端使用的Web技术的编程包和Python模块。
- en: Questions
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following is an attack that injects malicious scripts into web
    pages to redirect users to fake websites or gather personal information?
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项是一种攻击，将恶意脚本注入到网页中，以将用户重定向到假网站或收集个人信息？
- en: What is the technique where an attacker inserts SQL database commands into a
    data-input field of an order form used by a web-based application?
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者将SQL数据库命令插入到Web应用程序使用的订单表单的数据输入字段中的技术是什么？
- en: What tools allows you to detect vulnerabilities in web applications related
    with JavaScript?
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有哪些工具可以检测与JavaScript相关的Web应用程序中的漏洞？
- en: What tool allows you to obtain data structures from websites?
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有什么工具可以从网站获取数据结构？
- en: What tool allows you to detect sql-injection-type vulnerabilities in web applications?
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有什么工具可以检测Web应用程序中与SQL注入类型漏洞相关的漏洞？
- en: Which profile in the w3af tool performs a scan to identify the vulnerabilities
    with higher risk, such as SQL Injection and Cross-site scripting (XSS)?
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: w3af工具中的哪个配置文件执行扫描以识别更高风险的漏洞，如SQL注入和跨站脚本（XSS）？
- en: Which is the main class in w3af API that contains all the methods and properties
    needed to enable plugins, establish the objective of an attack, and manage profiles?
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: w3af API中的主要类包含启用插件、确定攻击目标和管理配置文件所需的所有方法和属性是什么？
- en: What is the slmap option that lists all the available databases?
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: slmap选项是列出所有可用数据库的选项吗？
- en: What is the name of the nmap script that allows us to scan for Heartbleed vulnerabilities
    in a server?
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: nmap脚本的名称是什么，可以让我们在服务器中扫描Heartbleed漏洞？
- en: What is the process that allows us to establish an SSL connection with a server,
    consisting of the exchange of symmetric and asymmetric keys to establish the encrypted
    connection between client and server?
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立SSL连接的过程是什么，包括对称和非对称密钥的交换，以建立客户端和服务器之间的加密连接？
- en: Further reading
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In the following links, you will find more information about the tools mentioned
    in this chapter:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接中，您将找到有关本章中提到的工具的更多信息：
- en: '[https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/](https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/)'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/](https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/)'
- en: '[https://blog.sqreen.io/preventing-sql-injections-in-python/](https://blog.sqreen.io/preventing-sql-injections-in-python/)'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://blog.sqreen.io/preventing-sql-injections-in-python/](https://blog.sqreen.io/preventing-sql-injections-in-python/)'
- en: '[https://hackertarget.com/sqlmaptutorial](https://hackertarget.com/sqlmaptutorial)'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://hackertarget.com/sqlmaptutorial](https://hackertarget.com/sqlmaptutorial)'
- en: '[https://packetstormsecurity.com/files/tags/python](https://packetstormsecurity.com/files/tags/python)'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://packetstormsecurity.com/files/tags/python](https://packetstormsecurity.com/files/tags/python)'
- en: '[https://packetstormsecurity.com/files/90362/Simple-Log-File-Analyzer 1.0.html](https://packetstormsecurity.com/files/90362/Simple-Log-File-Analyzer%201.0.html)'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://packetstormsecurity.com/files/90362/Simple-Log-File-Analyzer 1.0.html](https://packetstormsecurity.com/files/90362/Simple-Log-File-Analyzer%201.0.html)'
- en: '[https://github.com/mpgn/heartbleed-PoC](https://github.com/mpgn/heartbleed-PoC)'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/mpgn/heartbleed-PoC](https://github.com/mpgn/heartbleed-PoC)'
