- en: Requests and Web Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求和Web框架
- en: The main topics of this chapter are requests and web frameworks in Python. We
    are going to discuss libraries and frameworks that enable retrieving data from
    the Web (for example, get weather updates), upload data to a remote server (for
    example, log sensor data), or control appliances on a local network. We will also
    discuss topics that will help with learning the core topics of this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要内容是Python中的请求和Web框架。我们将讨论使得从Web检索数据（例如，获取天气更新）、将数据上传到远程服务器（例如，记录传感器数据）或控制本地网络上的设备成为可能的库和框架。我们还将讨论一些有助于学习本章核心主题的话题。
- en: The try/except keywords
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`try`/`except`关键字'
- en: So far, we have reviewed and tested all our examples assuming the ideal condition,
    that is, the execution of the program will encounter no errors. On the contrary,
    applications fail from time to time either due to external factors, such as invalid
    user input and poor Internet connectivity, or program logic errors caused by the
    programmer. In such cases, we want the program to report/log the nature of error
    and either continue its execution or clean up resources before exiting the program.
    The `try`/`except` keywords offer a mechanism to trap an error that occurs during
    a program's execution and take remedial action. Because it is possible to trap
    and log an error in crucial parts of the code, the `try`/`except` keywords are
    especially useful while debugging an application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经审查并测试了所有的例子，假设程序的执行不会遇到错误。相反，应用程序有时会由于外部因素（如无效的用户输入和糟糕的互联网连接）或程序员造成的程序逻辑错误而失败。在这种情况下，我们希望程序报告/记录错误的性质，并在退出程序之前继续执行或清理资源。`try`/`except`关键字提供了一种机制，可以捕获程序执行过程中发生的错误并采取补救措施。由于可能在代码的关键部分捕获和记录错误，`try`/`except`关键字在调试应用程序时特别有用。
- en: 'Let''s understand the `try`/`except` keywords by comparing two examples. Let''s
    build a simple guessing game where the user is asked to guess a number between
    0 and 9:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较两个例子来理解`try`/`except`关键字。让我们构建一个简单的猜数字游戏，用户被要求猜一个0到9之间的数字：
- en: A random number (between 0 and 9) is generated using Python's `random` module.
    If the user's guess of the generated number is right, the Python program declares
    the user as the winner and exits the game.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Python的`random`模块生成一个随机数（在0到9之间）。如果用户猜测的数字正确，Python程序会宣布用户为赢家并退出游戏。
- en: If the user input is the letter `x`, the program quits the game.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户输入是字母`x`，程序会退出游戏。
- en: The user input is converted into an integer using the `int()` function. A sanity
    check is performed to determine whether the user input is a number between 0 and
    9.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入使用`int()`函数转换为整数。进行了一个合理性检查，以确定用户输入是否是0到9之间的数字。
- en: The integer is compared against a random number. If they are the same, the user
    is declared the winner and the program exits the game.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整数与随机数进行比较。如果它们相同，程序会宣布用户为赢家并退出游戏。
- en: 'Let''s observe what happens when we deliberately provide an erroneous input
    to this program (the code snippet shown here is available for download along with
    this chapter as `guessing_game.py`):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们观察当我们故意向这个程序提供错误的输入时会发生什么（这里显示的代码片段可以在本章的下载中找到，文件名为`guessing_game.py`）：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s execute the preceding code snippet and provide the input `hello` to
    the program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行前面的代码片段，并向程序提供输入`hello`：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding example, the program fails when it is trying to convert the
    user input `hello` to an integer. The program execution ends with an exception.
    An exception highlights the line where the error has occurred. In this case, it
    has occurred in line 10:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，当程序试图将用户输入`hello`转换为整数时失败。程序执行以异常结束。异常突出了发生错误的行。在这种情况下，它发生在第10行：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The nature of the error is also highlighted in the exception. In this example,
    the last line indicates that the exception thrown is `ValueError`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 异常的性质也在异常中得到了突出。在这个例子中，最后一行表明抛出的异常是`ValueError`：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s discuss the same example (available for download along with this chapter
    as `try_and_except.py`) that makes use of the `try`/`except` keywords. It is possible
    to continue playing the game after trapping this exception and printing it to
    the screen. We have the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一个相同的例子（可以在本章的下载中找到，文件名为`try_and_except.py`），它使用了`try`/`except`关键字。在捕获异常并将其打印到屏幕后，可以继续玩游戏。我们有以下代码：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s discuss how the same example works with the `try`/`except` keywords:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论相同的例子如何使用`try`/`except`关键字：
- en: From the previous example, we know that when a user provides the wrong input
    (for example, a letter instead of a number between 0 and 9), the exception occurs
    at line 10 (where the user input is converted into an integer), and the nature
    of the error is named `ValueError`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前面的例子中，我们知道当用户提供错误的输入时（例如，一个字母而不是0到9之间的数字），异常发生在第10行（用户输入转换为整数的地方），错误的性质被命名为`ValueError`。
- en: 'It is possible to avoid interruption of the program''s execution by wrapping
    this in a `try...except` block:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过将其包装在`try...except`块中来避免程序执行的中断：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On receiving a user input, the program attempts converting the user input into
    an integer under the `try` block.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接收到用户输入时，程序会在`try`块下尝试将用户输入转换为整数。
- en: 'If `ValueError` has occurred, `error` is trapped by the `except` block, and
    the following message is printed to the screen along with the actual error message:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果发生了`ValueError`，`except`块会捕获`error`，并将以下消息与实际错误消息一起打印到屏幕上：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Try executing the code example and try providing an invalid input. You will
    note that the program prints the error message (along with the nature of the error)
    and goes back to the top of the game loop and continues seeking valid user input:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试执行代码示例并提供无效输入。您会注意到程序打印了错误消息（以及错误的性质），然后返回游戏循环的顶部并继续寻找有效的用户输入：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `try...except` block comes with a substantial processing power cost. Hence,
    it is important to keep the `try...except` block as short as possible. Because
    we know that the error occurs on the line where we attempt converting the user
    input into an integer, we wrap it in a `try...except` block to trap an error.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`try...except`块带来了相当大的处理成本。因此，将`try...except`块保持尽可能短是很重要的。因为我们知道错误发生在尝试将用户输入转换为整数的行上，所以我们将其包装在`try...except`块中以捕获错误。'
- en: Thus, the `try`/`except` keywords are used to prevent any abnormal behavior
    in a program's execution due to an error. It enables logging the error and taking
    remedial action. Similar to the `try...except` block, there are also `try...except...else`
    and `try...except...else` code blocks. Let's quickly review those options with
    a couple of examples.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`try`/`except`关键字用于防止程序执行中的任何异常行为，因为出现错误。它使得能够记录错误并采取补救措施。与`try...except`块类似，还有`try...except...else`和`try...except...else`代码块。让我们通过几个例子快速回顾一下这些选项。
- en: try...except...else
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: try...except...else
- en: 'The `try...except...else` block is especially useful when we want a certain
    block of code to be executed only when no exceptions are raised. In order to demonstrate
    this concept, let''s rewrite the guessing game example using this block:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`try...except...else`块在我们希望只有在没有引发异常时才执行特定代码块时特别有用。为了演示这个概念，让我们使用这个块来重写猜数字游戏示例：'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The modified guessing game example that makes use of the `try...except...else` block
    is available for download along with this chapter as `try_except_else.py`. In
    this example, the program compares the user input against the random number only
    if a valid user input was received. It otherwise skips the `else` block and goes
    back to the top of the loop to accept the next user input. Thus, `try...except...else` is
    used when we want a specific code block to be executed when no exceptions are
    raised due to the code in the `try` block.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`try...except...else`块修改的猜数字游戏示例可与本章一起下载，文件名为`try_except_else.py`。在这个例子中，程序仅在接收到有效的用户输入时才将用户输入与随机数进行比较。否则，它会跳过`else`块并返回到循环顶部以接受下一个用户输入。因此，当`try`块中的代码没有引发异常时，`try...except...else`被用来执行特定的代码块。
- en: try...except...else...finally
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: try...except...else...finally
- en: As the name suggests, the `finally` block is used to execute a block of code
    on leaving the `try` block. This block of code is executed even after an exception
    is raised. This is useful in scenarios where we need to clean up resources and
    free up memory before moving on to the next stage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`finally`块用于在离开`try`块时执行一块代码。即使在引发异常后，这段代码也会被执行。这在我们需要在进入下一个阶段之前清理资源和释放内存时非常有用。
- en: 'Let''s demonstrate the function of the `finally` block using our guessing game.
    To understand how the `finally` keyword works, let''s make use of a counter variable
    named `count` that is incremented in the `finally` block, and another counter
    variable named `valid_count` that is incremented in the `else` block. We have
    the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用我们的猜数字游戏来演示`finally`块的功能。为了理解`finally`关键字的工作原理，让我们使用一个名为`count`的计数器变量，在`finally`块中递增，以及另一个名为`valid_count`的计数器变量，在`else`块中递增。我们有以下代码：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code snippet is from the `try_except_else_finally.py` code sample (available
    for download along with this chapter). Try executing the code sample and playing
    the game. You will note the total number of attempts it took to win the game and
    the number of inputs that were valid:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段来自`try_except_else_finally.py`代码示例（可与本章一起下载）。尝试执行代码示例并玩游戏。您将注意到赢得游戏所需的总尝试次数以及有效输入的数量：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This demonstrates how the `try-except-else-finally` block works. Any code under
    the `else` keyword is executed when the critical code block (under the `try` keyword)
    is executed successfully, whereas the code block under the `finally` keyword is
    executed while exiting the `try...except` block (useful for cleaning up resources
    while exiting a code block).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这演示了`try-except-else-finally`块的工作原理。当关键代码块（在`try`关键字下）成功执行时，`else`关键字下的任何代码都会被执行，而在退出`try...except`块时（在退出代码块时清理资源时）`finally`关键字下的代码块会被执行。
- en: Try providing invalid inputs while playing the game using the previous code
    example to understand the code block flow.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用先前的代码示例玩游戏时提供无效的输入，以了解代码块流程。
- en: Connecting to the Internet – web requests
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到互联网 - 网络请求
- en: Now that we discussed the `try`/`except` keywords, let's make use of it to build
    a simple application that connects to the Internet. We will write a simple application
    that retrieves the current time from the Internet. We will be making use of the
    `requests` library for Python ([http://requests.readthedocs.io/en/master/#](http://requests.readthedocs.io/en/master/#)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了`try`/`except`关键字，让我们利用它来构建一个连接到互联网的简单应用程序。我们将编写一个简单的应用程序，从互联网上获取当前时间。我们将使用Python的`requests`库（[http://requests.readthedocs.io/en/master/#](http://requests.readthedocs.io/en/master/#)）。
- en: 'The `requests` module enables connecting to the Web and retrieving information.
    In order to do so, we need to make use of the `get()` method from the `requests`
    module to make a request:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`requests`模块使得连接到网络和检索信息成为可能。为了做到这一点，我们需要使用`requests`模块中的`get()`方法来发出请求：'
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code snippet, we are passing a URL as an argument to the `get()`
    method. In this case, it is the URL that returns the current time in the Unix
    format ([https://en.wikipedia.org/wiki/Unix_time](https://en.wikipedia.org/wiki/Unix_time)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们将一个URL作为参数传递给`get()`方法。在这种情况下，它是返回当前时间的Unix格式的URL（[https://en.wikipedia.org/wiki/Unix_time](https://en.wikipedia.org/wiki/Unix_time)）。
- en: 'Let''s make use of the `try`/`except` keywords to make a request to get the
    current time:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用`try`/`except`关键字来请求获取当前时间：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example (available for download along with this chapter as
    `internet_access.py`), the request is made under the `try` block, and the response
    (returned by `response.text`) is printed to the screen.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中（可以与本章一起下载，命名为`internet_access.py`），请求是在`try`块下进行的，响应（由`response.text`返回）被打印到屏幕上。
- en: 'If there is an error while executing the request to retrieve the current time,
    `ConnectionError` is raised ([http://requests.readthedocs.io/en/master/user/quickstart/#errors-and-exceptions](http://requests.readthedocs.io/en/master/user/quickstart/#errors-and-exceptions)).
    This error could either be caused by the lack of an Internet connection or an
    incorrect URL. This error is caught by the `except` block. Try running the example,
    and it should return the current time from `time.gov`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行请求以检索当前时间时出现错误，将引发`ConnectionError`（[http://requests.readthedocs.io/en/master/user/quickstart/#errors-and-exceptions](http://requests.readthedocs.io/en/master/user/quickstart/#errors-and-exceptions)）。这个错误可能是由于缺乏互联网连接或不正确的URL引起的。这个错误被`except`块捕获。尝试运行这个例子，它应该返回`time.gov`的当前时间：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The application of requests – retrieving weather information
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: requests的应用-检索天气信息
- en: 'Let''s make use of the `requests` module to retrieve the weather information
    for the city of San Francisco. We will be making use of the **OpenWeatherMap**
    API ([openweathermap.org](http://openweathermap.org)) to retrieve the weather
    information:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`requests`模块来检索旧金山市的天气信息。我们将使用**OpenWeatherMap** API ([openweathermap.org](http://openweathermap.org))来检索天气信息：
- en: 'In order to make use of the API, sign up for an API account and get an API
    key (it is free of charge):'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用API，注册一个API账户并获取一个API密钥（免费）：
- en: '![](Images/e491b6d7-eedd-4706-a6c2-7ffe0ae779fb.png)An API key from openweathermap.org'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/e491b6d7-eedd-4706-a6c2-7ffe0ae779fb.png)来自openweathermap.org的API密钥'
- en: According to the API documentation ([openweathermap.org/current](http://openweathermap.org/current)),
    the weather information for a city can be retrieved using `http://api.openweathermap.org/data/2.5/weather?zip=SanFrancisco&appid=API_KEY&units=imperial`
    as the URL.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据API文档（[openweathermap.org/current](http://openweathermap.org/current)），可以使用`http://api.openweathermap.org/data/2.5/weather?zip=SanFrancisco&appid=API_KEY&units=imperial`作为URL来检索一个城市的天气信息。
- en: 'Substitute `API_KEY` with the key from your account and use it to retrieve
    the current weather information in a browser. You should be able to retrieve the
    weather information in the following format:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你的账户的密钥替换`API_KEY`，并在浏览器中使用它来检索当前的天气信息。你应该能够以以下格式检索到天气信息：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The weather information (shown previously) is returned in the JSON format. **JavaScript
    Object Notation** (**JSON**) is a data format that is widely used to exchange
    data over the Web. The main advantage of JSON format is that it is in a readable
    format and many popular programming languages support encapsulating data in JSON
    format. As shown in the earlier snippet, JSON format enables exchanging information
    in readable name/value pairs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 天气信息（如前所示）以JSON格式返回。**JavaScript对象表示法**（**JSON**）是一种广泛用于在网络上传递数据的数据格式。JSON格式的主要优点是它是一种可读的格式，许多流行的编程语言支持将数据封装在JSON格式中。如前面的片段所示，JSON格式使得以可读的名称/值对交换信息成为可能。
- en: 'Let''s review retrieving the weather using the `requests` module and parsing
    the JSON data:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下使用`requests`模块检索天气并解析JSON数据：
- en: Substitute the URL in the previous example (`internet_access.py`) with the one
    discussed in this example. This should return the weather information in the JSON
    format.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用前面例子中的URL（`internet_access.py`）替换为本例中讨论的URL。这应该以JSON格式返回天气信息。
- en: 'The requests module provides a method to parse the JSON data. The response
    could be parsed as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: requests模块提供了一个解析JSON数据的方法。响应可以按以下方式解析：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `json()` function parses the response from the OpenWeatherMap API and returns
    a dictionary of different weather parameters (`json_data`) and their values.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`json()`函数解析来自OpenWeatherMap API的响应，并返回不同天气参数（`json_data`）及其值的字典。'
- en: 'Since we know the response format from the API documentation, the current temperature
    could be retrieved from the parsed response as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们知道API文档中的响应格式，可以从解析后的响应中检索当前温度：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Putting it all together, we have this:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 把所有这些放在一起，我们有这个：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding example is available for download along with this chapter as
    `weather_example.py`. The example should display the current temperature as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子可以与本章一起下载，命名为`weather_example.py`。该例子应该显示当前的温度如下：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The application of requests – publishing events to the Internet
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: requests的应用-将事件发布到互联网
- en: In the previous example, we retrieved information from the Internet. Let's consider
    an example where we have to publish a sensor event somewhere on the Internet.
    This could be either a cat door opening while you are away from home or someone
    at your doorstep stepping on the doormat. Because we discussed interfacing sensors
    to the Raspberry Pi Zero in the previous chapter, let's discuss a scenario where
    we could post these events to *Slack*—a workplace communication tool, Twitter,
    or cloud services such as **Phant** ([https://data.sparkfun.com/](https://data.sparkfun.com/)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们从互联网上检索了信息。让我们考虑一个例子，在这个例子中，我们需要在互联网上发布传感器事件。这可能是你不在家时猫门打开，或者有人踩在你家门口的地垫上。因为我们在上一章中讨论了如何将传感器与树莓派Zero连接，所以让我们讨论一个场景，我们可以将这些事件发布到*Slack*——一个工作场所通讯工具，Twitter，或者云服务，比如**Phant**
    ([https://data.sparkfun.com/](https://data.sparkfun.com/))。
- en: 'In this example, we will post these events to Slack using `requests`. Let''s
    send a direct message to ourselves on Slack whenever a sensor event such as a
    cat door opening occurs. We need a URL to post these sensor events to Slack. Let''s
    review generating a URL in order to post sensor events to Slack:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用`requests`将这些事件发布到Slack。每当发生传感器事件，比如猫门打开时，让我们在Slack上给自己发送直接消息。我们需要一个URL来将这些传感器事件发布到Slack。让我们回顾一下生成URL以将传感器事件发布到Slack：
- en: The first step in generating a URL is creating an *incoming webhook*. A webhook
    is a type request that can post messages that are carried as a payload to applications
    such as Slack.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成URL的第一步是创建一个*incoming webhook*。Webhook是一种可以将消息作为有效负载发布到应用程序（如Slack）的请求类型。
- en: 'If you are a member of a Slack team named *TeamX*, launch your team''s application
    directory, namely `teamx.slack.com/apps` in a browser:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是名为*TeamX*的Slack团队成员，请在浏览器中启动您团队的应用程序目录，即`teamx.slack.com/apps`：
- en: '![](Images/dea1e47a-e8f1-4848-b40e-1cdd2836fcbc.png)Launch your team''s app
    directory'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/dea1e47a-e8f1-4848-b40e-1cdd2836fcbc.png)启动您团队的应用程序目录'
- en: 'Search for `incoming webhooks` in your app directory and select the first option,
    Incoming WebHooks (as shown in the following screenshot):'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序目录中搜索`incoming webhooks`，并选择第一个选项，Incoming WebHooks（如下截图所示）：
- en: '![](Images/bb557455-62ba-4716-8699-695bbf6be867.png)Select incoming webhooks'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/bb557455-62ba-4716-8699-695bbf6be867.png)选择incoming webhooks'
- en: 'Click on Add Configuration:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加配置：
- en: '![](Images/2b0b1d70-c3f9-4f41-bbfb-ea0b0ed6c3a8.png)Add Configuration'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/2b0b1d70-c3f9-4f41-bbfb-ea0b0ed6c3a8.png)添加配置'
- en: 'Let''s send a private message to ourselves when an event occurs. Select Privately
    to           (you) as the option and create a webhook by clicking on Add Incoming
    WebHooks integration:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当事件发生时，让我们向自己发送私人消息。选择Privately to (you)作为选项，并通过单击添加Incoming WebHooks集成来创建一个webhook：
- en: '![](Images/e37bc0b4-1cce-4840-9313-f2bfe7d0b60e.png)Select Privately to you'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/e37bc0b4-1cce-4840-9313-f2bfe7d0b60e.png)选择Privately to you'
- en: 'We have generated a URL to send direct messages about sensor events (URL partially
    concealed):'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经生成了一个URL，用于发送有关传感器事件的直接消息（URL部分隐藏）：
- en: '![](Images/21db2e44-ca8f-4a25-acd3-355752853efa.png)Generated URL'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/21db2e44-ca8f-4a25-acd3-355752853efa.png)生成的URL'
- en: Now, we can send direct message to ourselves on Slack using the previously-mentioned
    URL. The sensor event can be published to Slack as a JSON payload. Let's review
    posting a sensor event to Slack.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用先前提到的URL在Slack上向自己发送直接消息。传感器事件可以作为JSON有效负载发布到Slack。让我们回顾一下如何将传感器事件发布到Slack。
- en: 'For example, let''s consider posting a message when a cat door opens. The first
    step is preparing the JSON payload for the message. According to the Slack API
    documentation ([https://api.slack.com/custom-integrations)](https://api.slack.com/custom-integrations)),
    the message payload needs to be in the following format:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，让我们考虑在猫门打开时发布消息。第一步是为消息准备JSON有效负载。根据Slack API文档（[https://api.slack.com/custom-integrations)](https://api.slack.com/custom-integrations)），消息有效负载需要采用以下格式：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In order to publish this event, we will make use of the `post()` method from
    the `requests` module. The data payload needs to be encoded in JSON format while
    posting it:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了发布此事件，我们将使用`requests`模块中的`post()`方法。在发布时，数据有效负载需要以JSON格式进行编码：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Putting it all together, we have this:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有内容放在一起，我们有：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: On posting the message, the request returns `ok` as a response. This indicates
    that the post was successful.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布消息后，请求返回`ok`作为响应。这表明发布成功了。
- en: 'Generate your own URL and execute the preceding example (available for download
    along with this chapter as `slack_post.py`). You will receive a direct message
    on Slack:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成您自己的URL并执行上述示例（与本章一起提供的`slack_post.py`一起下载）。您将在Slack上收到直接消息：
- en: '![](Images/b593e295-094d-403e-a245-a79068060b26.png)Direct message on Slack'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/b593e295-094d-403e-a245-a79068060b26.png)在Slack上直接发送消息'
- en: Now, try interfacing a sensor to the Raspberry Pi Zero (discussed in previous
    chapters) and post the sensor events to Slack.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试将传感器接口到Raspberry Pi Zero（在前几章中讨论），并将传感器事件发布到Slack。
- en: It is also possible to post sensor events to Twitter and have your Raspberry
    Pi Zero check for new e-mails and so on. Check this book's website for more examples.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以将传感器事件发布到Twitter，并让您的Raspberry Pi Zero检查新邮件等。查看本书的网站以获取更多示例。
- en: Flask web framework
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask web框架
- en: In our final section, we will discuss web frameworks in Python. We will discuss
    the Flask framework ([http://flask.pocoo.org/](http://flask.pocoo.org/)). Python-based
    frameworks enable interfacing sensors to a network using the Raspberry Pi Zero.
    This enables controlling appliances and reading data from sensors from anywhere
    within a network. Let's get started!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最后一节中，我们将讨论Python中的Web框架。我们将讨论Flask框架（[http://flask.pocoo.org/](http://flask.pocoo.org/)）。基于Python的框架使得可以使用Raspberry
    Pi Zero将传感器接口到网络。这使得可以在网络中的任何位置控制设备并从传感器中读取数据。让我们开始吧！
- en: Installing Flask
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Flask
- en: 'The first step is installing the Flask framework. It can be done as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是安装Flask框架。可以按以下方式完成：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Building our first example
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的第一个示例
- en: 'The Flask framework documentation explains building the first example. Modify
    the example from the documentation as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Flask框架文档解释了构建第一个示例。根据文档修改示例如下：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Launch this example (available for download along with this chapter as `flask_example.py`)
    and it should launch a server on the Raspberry Pi Zero visible to the network.
    On another computer, launch a browser and enter the IP address of the Raspberry
    Pi Zero along with port number, `5000`, as a suffix (as shown in the following
    snapshot). It should take you to the index page of the server that displays the
    message Hello World!:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 启动此示例（与本章一起提供的`flask_example.py`一起下载），它应该在Raspberry Pi Zero上启动一个对网络可见的服务器。在另一台计算机上，启动浏览器，并输入Raspberry
    Pi Zero的IP地址以及端口号`5000`作为后缀（如下快照所示）。它应该将您带到服务器的索引页面，显示消息Hello World!：
- en: '![](Images/c515611e-7de9-40cc-a867-0fbc6cd43c88.png)The Flask framework-based
    web server on the Raspberry Pi Zero'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/c515611e-7de9-40cc-a867-0fbc6cd43c88.png)基于Flask框架的Raspberry Pi
    Zero上的Web服务器'
- en: You can find the IP address of your Raspberry Pi Zero using the `ifconfig` command
    on the command-line terminal.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用命令行终端上的`ifconfig`命令找到Raspberry Pi Zero的IP地址。
- en: Controlling appliances using the Flask framework
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flask框架控制设备
- en: 'Let''s try turning on/off appliances at home using the Flask framework. In
    previous chapters, we made use of *PowerSwitch Tail II* to control a table lamp
    using the Raspberry Pi Zero. Let''s try to control the same using the Flask framework.
    Connect PowerSwitch Tail, as shown in the following figure:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用Flask框架在家中打开/关闭电器。在之前的章节中，我们使用*PowerSwitch Tail II*来控制树莓派Zero上的台灯。让我们尝试使用Flask框架来控制相同的东西。按照以下图示连接PowerSwitch
    Tail：
- en: '![](Images/587aacf5-ad6d-45f6-bc42-214248b72183.png)Controlling a table lamp
    using the Flask framework'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![](Images/587aacf5-ad6d-45f6-bc42-214248b72183.png)使用Flask框架控制台灯'
- en: 'According to the Flask framework documentation, it is possible to route a URL
    to a specific function. For example, it is possible to bind `/lamp/<control>`
    using `route()` to the `control()` function:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Flask框架文档，可以将URL路由到特定函数。例如，可以使用`route()`将`/lamp/<control>`绑定到`control()`函数：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding code snippet, `<control>` is a variable that can be passed
    on as an argument to the binding function. This enables us to turn the lamp on/off.
    For example, `<IP address>:5000/lamp/on` turns on the lamp, and vice versa. Putting
    it all together, we have this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`<control>`是一个可以作为参数传递给绑定函数的变量。这使我们能够打开/关闭灯。例如，`<IP地址>:5000/lamp/on`打开灯，反之亦然。把它们放在一起，我们有这样：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding example is available for download along with this chapter as
    `appliance_control.py`. Launch the Flask-based web server and open a web server
    on another computer. In order to turn on the lamp, enter `<IP Address of the Raspberry
    Pi Zero>:5000/lamp/on` as URL:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例可与本章一起下载，文件名为`appliance_control.py`。启动基于Flask的Web服务器，并在另一台计算机上打开Web服务器。为了打开灯，输入`<树莓派Zero的IP地址>:5000/lamp/on`作为URL：
- en: 'This should turn on the lamp:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该打开灯：
- en: '![](Images/06292c52-263d-41b8-bf2c-9cb2503a77dd.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/06292c52-263d-41b8-bf2c-9cb2503a77dd.png)'
- en: Thus, we have built a simple framework that enables controlling appliances within
    the network. It is possible to include buttons to an HTML page and route them
    to a specific URL to perform a specific function. There are several other frameworks
    in Python that enable developing web applications. We have merely introduced you
    to different applications that are possible with Python. We recommend that you check
    out this book's website for more examples, such as controlling Halloween decorations
    and other holiday decorations using the Flask framework.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们建立了一个简单的框架，可以控制网络中的电器。可以在HTML页面中包含按钮，并将它们路由到特定的URL以执行特定的功能。Python中还有几个其他框架可以开发Web应用程序。我们只是向您介绍了Python可能的不同应用程序。我们建议您查看本书的网站，了解更多示例，例如使用Flask框架控制万圣节装饰和其他节日装饰。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the `try`/`except` keywords in Python. We also
    discussed developing applications that retrieves information from the Internet,
    as well as publishing sensor events to the Internet. We also discussed the Flask
    web framework for Python and demonstrated the control of appliances within a network.
    In the next chapter, we will discuss some advanced topics in Python.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Python中的`try`/`except`关键字。我们还讨论了从互联网检索信息的应用程序，以及将传感器事件发布到互联网。我们还讨论了Python的Flask
    Web框架，并演示了在网络中控制电器。在下一章中，我们将讨论Python中的一些高级主题。
