- en: Chapter 4. Engaging with E-mails
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 与电子邮件互动
- en: 'E-mail is one of the most popular ways of digital communication. Python has
    a rich number of built-in libraries for dealing with e-mails. In this chapter,
    we will learn how to use Python to compose, send, and retrieve e-mails. The following
    topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件是数字通信最流行的方式之一。Python有丰富的内置库用于处理电子邮件。在本章中，我们将学习如何使用Python来撰写、发送和检索电子邮件。本章将涵盖以下主题：
- en: Sending e-mails with SMTP through the `smtplib` library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`smtplib`库使用SMTP发送电子邮件
- en: Securing e-mails transport with TLS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TLS保护电子邮件传输
- en: Retrieving e-mails by using POP3 with `poplib`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`poplib`通过POP3检索电子邮件
- en: Retrieving e-mails by using IMAP with `imapclient`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`imapclient`通过IMAP检索电子邮件
- en: Manipulating e-mails on the server with IMAP
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IMAP在服务器上操作电子邮件
- en: Sending e-mails with the help of the `logging` module
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`logging`模块发送电子邮件
- en: E-mail terminologies
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电子邮件术语
- en: 'Before we start composing our first e-mail with the help of Python, let us
    revisit some of the elementary concepts of e-mail. Often, an end-user uses a piece
    of software or a graphical user interface (GUI) for composing, sending, and receiving
    e-mails. This piece of software is known as an e-mail client, for example, Mozilla
    Thunderbird, Microsoft Outlook, and so on are e-mail clients. The same tasks can
    be done by a web interface, that is, a webmail client interface. Some common examples
    of these are: Gmail, Yahoo mail, Hotmail and so on.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Python撰写第一封电子邮件之前，让我们重新审视一些电子邮件的基本概念。通常，最终用户使用软件或图形用户界面（GUI）来撰写、发送和接收电子邮件。这种软件称为电子邮件客户端，例如Mozilla
    Thunderbird、Microsoft Outlook等都是电子邮件客户端。同样的任务也可以通过Web界面完成，即Web邮件客户端界面。一些常见的例子包括：Gmail、Yahoo邮件、Hotmail等。
- en: The mail that you send from your client interface does not reach the receiver's
    computer directly. Your mail travels through a number of specialized e-mail servers.
    These servers run a piece of software called the **Mail Transfer Agent** (**MTA**),
    and its primary job is to route the e-mail to the appropriate destinations by
    analyzing the mail header, among other things.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您从客户端界面发送的邮件不会直接到达接收者的计算机。您的邮件会经过多个专用电子邮件服务器。这些服务器运行一个名为**邮件传输代理**（**MTA**）的软件，其主要工作是通过分析邮件头等内容将电子邮件路由到适当的目的地。
- en: Lots of other things also happen en-route, and then the mail reaches the recipient's
    local e-mail gateway. Then, the recipient can retrieve the e-mail by using his
    or her e-mail client.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他事情发生在路上，然后邮件到达收件人的本地电子邮件网关。然后，收件人可以使用他或她的电子邮件客户端检索电子邮件。
- en: 'A few protocols are involved in the aforementioned process. The most common
    of those have been listed here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上述过程涉及一些协议。其中最常见的已列在这里：
- en: '**Simple Mail Transfer Protocol** (**SMTP**): The SMTP protocol is used by
    the MTA for delivering your e-mail to the recipient''s e-mail server. The SMTP
    protocol can only be used for sending e-mails from one host to another.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单邮件传输协议**（**SMTP**）：MTA使用SMTP协议将您的电子邮件传递到收件人的电子邮件服务器。SMTP协议只能用于从一个主机发送电子邮件到另一个主机。'
- en: '**Post Office Protocol 3** (**POP3**): The POP3 protocol provides a simple
    and standardized way for the users to gain access to the mailboxes and then download
    the messages to their computers. When using the POP3 protocol, your e-mail messages
    will be downloaded from the Internet service provider''s (ISP) mail server to
    the local computer. You can also leave the copies of your e-mails on the ISP server.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**邮局协议3**（**POP3**）：POP3协议为用户提供了一种简单和标准化的方式，以便访问邮箱，然后将邮件下载到他们的计算机上。使用POP3协议时，您的电子邮件消息将从互联网服务提供商（ISP）的邮件服务器下载到本地计算机。您还可以将电子邮件的副本留在ISP服务器上。'
- en: '**Internet Message Access Protocol** (**IMAP**): The IMAP protocol also provides
    a simple and standardized way for accessing your e-mail from the ISP''s local
    server. IMAP is a client/server protocol in which the e-mails are received and
    held for you by your ISP. As this requires only a small data transfer, this scheme
    works well even over a slow connection, such as the mobile phone network. Only
    if you send a request to read a specific e-mail, that email message will be downloaded
    from the ISP. You can also do some other interesting things, such as creating
    and manipulating folders or mailboxes on the server, deleting messages, and so
    on.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互联网消息访问协议**（**IMAP**）：IMAP协议还提供了一种简单和标准化的方式，用于从ISP的本地服务器访问您的电子邮件。IMAP是一种客户端/服务器协议，其中电子邮件由ISP接收并保存。由于这只需要进行少量数据传输，即使在较慢的连接（如手机网络）上，这种方案也能很好地工作。只有当您发送请求读取特定的电子邮件时，该电子邮件消息才会从ISP下载。您还可以做一些其他有趣的事情，比如在服务器上创建和操作文件夹或邮箱、删除消息等。'
- en: Python has three modules, `smtplib`, `poplib`, and `imaplib`, which support
    SMTP, POP3, and the IMAP protocols respectively. Each module has options for transmitting
    the information securely by using the **Transport Layer Security** (**TLS**) protocol.
    Each protocol also uses some form of authentication for ensuring the confidentiality
    of the data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python有三个模块，`smtplib`、`poplib`和`imaplib`，分别支持SMTP、POP3和IMAP协议。每个模块都有选项，可以使用**传输层安全**（**TLS**）协议安全地传输信息。每个协议还使用某种形式的身份验证来确保数据的保密性。
- en: Sending e-mails with SMTP
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SMTP发送电子邮件
- en: We can send an e-mail from a Python script by using `smtplib` and `e-mail` packages.
    The `smtplib` module provides an SMTP objects which is used for sending mail by
    using either an SMTP or an **Extended SMTP** (**ESMTP**) protocol. The `e-mail`
    module helps us in constructing the e-mail messages with the help of the various
    header information and attachments. This module conforms to the **Internet Message
    Format** (**IMF**) described at [http://tools.ietf.org/html/rfc2822.html](http://tools.ietf.org/html/rfc2822.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`smtplib`和`e-mail`包从Python脚本发送电子邮件。`smtplib`模块提供了一个SMTP对象，用于使用SMTP或**扩展SMTP**（**ESMTP**）协议发送邮件。`e-mail`模块帮助我们构造电子邮件消息，并使用各种标题信息和附件。该模块符合[http://tools.ietf.org/html/rfc2822.html](http://tools.ietf.org/html/rfc2822.html)中描述的**Internet
    Message Format**（**IMF**）。
- en: Composing an e-mail message
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 撰写电子邮件消息
- en: Let us construct the e-mail message by using classes from the `email` module.
    The `email.mime` module provides classes for creating the e-mail and MIME objects
    from scratch. **MIME** is an acronym for **Multi-purpose Internet Mail Extensions**.
    This is an extension of the original Internet e-mail protocol. This is widely
    used for exchanging different kinds of data files, such as audio, video, images,
    applications, and so on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`email`模块中的类构造电子邮件消息。`email.mime`模块提供了从头开始创建电子邮件和MIME对象的类。**MIME**是**多用途互联网邮件扩展**的缩写。这是原始互联网电子邮件协议的扩展。这被广泛用于交换不同类型的数据文件，如音频、视频、图像、应用程序等。
- en: 'Many classes have been derived from the MIME base class. We will use an SMTP
    client script using `email.mime.multipart.MIMEMultipart()` class as an example.
    It accepts passing the e-mail header information through a keyword dictionary.
    Let''s have a look at how we can specify an e-mail header by using the `MIMEMultipart()`
    object. Multi-part mime refers to sending both the HTML and the TEXT part of an
    e-mail message in a single e-mail. When an e-mail client receives a multipart
    message, it accepts the HTML version if it can render HTML, otherwise it presents
    the plain text version, as shown in the following code block:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多类都是从MIME基类派生的。我们将使用一个SMTP客户端脚本，使用`email.mime.multipart.MIMEMultipart()`类作为示例。它接受通过关键字字典传递电子邮件头信息。让我们看看如何使用`MIMEMultipart()`对象指定电子邮件头。多部分mime指的是在单个电子邮件中发送HTML和TEXT部分。当电子邮件客户端接收多部分消息时，如果可以呈现HTML，它将接受HTML版本，否则它将呈现纯文本版本，如下面的代码块所示：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, attach a plain text message to this multi-part message object. We can
    wrap a plain-text message by using the `MIMEText()` object. The constructor of
    this class takes the additional arguments. For example, we can pass `text` and
    `plain` as its arguments. The data of this message can be set by using the `set_payload()`
    method, as shown here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将纯文本消息附加到此多部分消息对象。我们可以使用`MIMEText()`对象来包装纯文本消息。这个类的构造函数接受额外的参数。例如，我们可以将`text`和`plain`作为它的参数。可以使用`set_payload()`方法设置此消息的数据，如下所示：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we will attach the plain text message to the Multi-part message, as shown
    here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将将纯文本消息附加到多部分消息中，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The message is ready to be routed to the destination mail server by using one
    or more SMTP MTA servers. But, obviously, the script only talks to a specific
    MTA and that MTA handles the routing of the message.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该消息已准备好通过一个或多个SMTP MTA服务器路由到目标邮件服务器。但是，显然，脚本只与特定的MTA通信，而该MTA处理消息的路由。
- en: Sending an e-mail message
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送电子邮件消息
- en: 'The `smtplib` module supplies us with an SMTP class, which can be initialized
    by an SMTP server socket. Upon successful initialization, this will give us an
    SMTP session object. The SMTP client will establish a proper SMTP session with
    the server. This can be done by using the `ehlo()` method for an SMTP `session`
    object. The actual message sending will be done by applying the `sendmail()` method
    to the SMTP session. So, a typical SMTP session will look like the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`smtplib`模块为我们提供了一个SMTP类，可以通过SMTP服务器套接字进行初始化。成功初始化后，这将为我们提供一个SMTP会话对象。SMTP客户端将与服务器建立适当的SMTP会话。这可以通过为SMTP`session`对象使用`ehlo()`方法来完成。实际的消息发送将通过将`sendmail()`方法应用于SMTP会话来完成。因此，典型的SMTP会话将如下所示：'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In our example SMTP client script, we have made use of Google's free Gmail service.
    If you have a Gmail account, then you can send an e-mail from a Python script
    to that account by using SMTP. Your e-mail may get blocked initially, as Gmail
    may detect that it had been sent from a less secure e-mail client. You can change
    your Gmail account settings and enable your account to send/receive e-mails from
    less secure e-mail clients. You can learn more about sending e-mail from an app
    on the Google website, which can be found at [https://support.google.com/a/answer/176600?hl=en](https://support.google.com/a/answer/176600?hl=en).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例SMTP客户端脚本中，我们使用了谷歌的免费Gmail服务。如果您有Gmail帐户，那么您可以通过SMTP从Python脚本发送电子邮件到该帐户。您的电子邮件可能会被最初阻止，因为Gmail可能会检测到它是从不太安全的电子邮件客户端发送的。您可以更改Gmail帐户设置，并启用您的帐户以从不太安全的电子邮件客户端发送/接收电子邮件。您可以在Google网站上了解有关从应用程序发送电子邮件的更多信息，网址为[https://support.google.com/a/answer/176600?hl=en](https://support.google.com/a/answer/176600?hl=en)。
- en: 'If you don''t have a Gmail account, then you can use a local SMTP server setup
    in a typical Linux box and run this script. The following code shows how to send
    an e-mail through a public SMTP server:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Gmail帐户，则可以在典型的Linux框中使用本地SMTP服务器设置并运行此脚本。以下代码显示了如何通过公共SMTP服务器发送电子邮件：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you run this script, then you can see that the output is similar to what
    is mentioned here. For the sake of anonymity, real e-mail addresses have not been
    shown in the following example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行此脚本，则可以看到输出与此处提到的类似。出于匿名性考虑，在以下示例中未显示真实的电子邮件地址：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This script will send a very simple e-mail message by using Python's standard
    library module, `smtplib`. For composing the message, `MIMEMultipart` and `MIMEText`
    classes have been imported from the `email.mime` submodule. This submodule has
    various types of classes for composing e-mail messages with different types of
    attachments, for example, `MIMEApplication()`, `MIMEAudio()`, `MIMEImage()`, and
    so on.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将使用Python的标准库模块`smtplib`发送一个非常简单的电子邮件消息。为了构成消息，从`email.mime`子模块导入了`MIMEMultipart`和`MIMEText`类。这个子模块有各种类型的类，用于以不同类型的附件组成电子邮件消息，例如`MIMEApplication()`、`MIMEAudio()`、`MIMEImage()`等。
- en: 'In this example, the `send_mail()` function has been called by two arguments:
    sender and receiver. Both of these arguments are e-mail addresses. An e-mail message
    is constructed by the `MIMEMultipart()` message class. The essential headers,
    such as `To`, `From`, and `Subject` have been added to this class namespace. The
    body of the message is composed with the instance of the `MIMEText()` class. This
    is done by the class `set_payload()` method. Then, this payload is attached to
    the main message by the `attach()` method.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`send_mail()`函数被调用了两个参数：发件人和收件人。这两个参数都是电子邮件地址。电子邮件消息是由`MIMEMultipart()`消息类构造的。这个类命名空间中添加了`To`、`From`和`Subject`等基本标头。消息的正文是由`MIMEText()`类的实例组成的。这是通过`set_payload()`方法完成的。然后，这个有效载荷通过`attach()`方法附加到主消息上。
- en: In order to communicate with the SMTP server, a session with the server will
    be created by instantiating the `smtplib` module's `SMTP()` class. The server
    name and the port arguments will be passed to the constructor. According to the
    SMTP protocol, an extended hello message through `ehlo()` method will be sent
    by the client to the server. The message will be sent by the `sendmail()` method.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与SMTP服务器通信，将通过实例化`smtplib`模块的`SMTP()`类创建与服务器的会话。服务器名称和端口参数将传递给构造函数。根据SMTP协议，客户端将通过`ehlo()`方法向服务器发送扩展的问候消息。消息将通过`sendmail()`方法发送。
- en: 'Notice that if the `set_debuglevel()` method is called on an SMTP session object,
    then it will produce additional debug messages. The line is commented out in the
    preceding example. Un-commenting that line will produce a debug message such as:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果在SMTP会话对象上调用`set_debuglevel()`方法，它将产生额外的调试消息。在前面的例子中，这行被注释掉了。取消注释该行将产生类似以下的调试消息：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is interesting because the message has been sent through a public SMTP
    server in a step-by-step fashion.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣，因为消息是通过逐步方式通过公共SMTP服务器发送的。
- en: Sending e-mails securely with TLS
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TLS安全地发送电子邮件
- en: '**TLS** protocol is a successor of **SSL** or **Secure Socket Layer**. This
    ensures that the communication between the client and the server is secure. This
    is done by sending the message in an encrypted format so that unauthorized people
    cannot see the message. It is not difficult to use TLS with `smtplib`. After you
    create an SMTP session object, you need to call the `starttls()` method. Before
    sending an e-mail, you need to login to the server by using the SMTP server credentials.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: TLS协议是SSL或安全套接字层的后继者。这确保了客户端和服务器之间的通信是安全的。这是通过以加密格式发送消息来实现的，以便未经授权的人无法看到消息。使用`smtplib`使用TLS并不困难。创建SMTP会话对象后，需要调用`starttls()`方法。在发送电子邮件之前，需要使用SMTP服务器凭据登录到服务器。
- en: 'Here is an example for the second e-mail client:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二个电子邮件客户端的示例：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code is similar to our first example, except for the authentication
    to the server. In this case, the SMTP user is authenticated against the server.
    If we run the script after turning on the SMTP debugging, then we would be seeing
    an output similar to the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码与我们的第一个例子类似，只是对服务器进行了身份验证。在这种情况下，SMTP用户会被服务器验证。如果我们在打开SMTP调试后运行脚本，那么我们将看到类似以下的输出：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After the user input, communication with the server will begin. It will start
    by the `ehlo()` method. In response to this command, the SMTP server will send
    a few response lines with the return code `250`. This response will include the
    features supported by the server.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入后，将开始与服务器的通信。它将通过`ehlo()`方法开始。作为对这个命令的响应，SMTP服务器将发送几行带有返回代码`250`的响应。这个响应将包括服务器支持的特性。
- en: 'The summary of these responses will indicate that the server is ready to proceed
    with the client, as shown in the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些响应的摘要将表明服务器准备好与客户端继续，如下所示：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After the initial command, the client will use the `starttls()` method to upgrade
    the connection to TLS, as shown here:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始命令之后，客户端将使用`starttls()`方法将连接升级到TLS，如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the authentication phase, the authentication data is sent by the client-side
    script with the help of the `login()` method. Note that the authentication token
    is a base-64 encoded string and the username and password are separated by a null
    byte. There other supported authentication protocols exists for the sophisticated
    clients. The following is the example of authentication token:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在认证阶段，客户端脚本通过`login()`方法发送认证数据。请注意，认证令牌是一个base-64编码的字符串，用户名和密码之间用空字节分隔。还有其他支持的身份验证协议适用于复杂的客户端。以下是认证令牌的示例：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After the client is authenticated, it can send e-mail messages by using the
    `sendmail()` method. Three arguments are passed to this method, sender, recipient,
    and the message. The sample output is shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端经过认证后，可以使用`sendmail()`方法发送电子邮件消息。这个方法传递了三个参数，发件人、收件人和消息。示例输出如下：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Retrieving e-mails by using POP3 with poplib
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用poplib通过POP3检索电子邮件
- en: The stored e-mail messages can be downloaded and read by the local computer.
    The POP3 protocol can be used to download the messages from the e-mail server.
    Python has a module called `poplib`, and it can be used for this purpose. This
    module provides two high-level classes, `POP()` and `POP3_SSL()`,which implement
    the POP3 and POP3S protocols respectively for communicating with a POP3/POP3S
    server. It accepts three arguments, host, port, and timeout. If port is omitted,
    then the default port (110) can be used. The optional timeout parameter determines
    the length (in seconds) of the connection timeout at the server.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 存储的电子邮件消息可以通过本地计算机下载和阅读。 POP3协议可用于从电子邮件服务器下载消息。 Python有一个名为`poplib`的模块，可以用于此目的。
    此模块提供了两个高级类，`POP()`和`POP3_SSL()`，它们分别实现了与POP3/POP3S服务器通信的POP3和POP3S协议。 它接受三个参数，主机、端口和超时。
    如果省略端口，则可以使用默认端口（110）。 可选的超时参数确定服务器上的连接超时长度（以秒为单位）。
- en: The secure version of `POP3()` is its subclass `POP3_SSL()`. It takes additional
    parameters, such as keyfile and certfile, which are used for supplying the SSL
    certificate files, namely the private key and certificate chain file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`POP3()`的安全版本是其子类`POP3_SSL()`。 它接受附加参数，例如keyfile和certfile，用于提供SSL证书文件，即私钥和证书链文件。'
- en: 'Writing for a POP3 client is also very straightforward. To do this, instantiate
    a mailbox object by initializing the `POP3()` or `POP3_SSL()` class. Then, invoke
    the `user()` and `pass_()` methods to login to the server by using the following
    command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 编写POP3客户端也非常简单。 要做到这一点，通过初始化`POP3()`或`POP3_SSL()`类来实例化一个邮箱对象。 然后，通过以下命令调用`user()`和`pass_()`方法登录到服务器：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, you can call the various methods for manipulating your accounts and messages.
    A few interesting methods have been listed here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以调用各种方法来操作您的帐户和消息。 这里列出了一些有趣的方法：
- en: '`stat()`: This method returns the mailbox status according to tuples of two
    integers, that is, the message count and the size of the mailbox.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stat()`: 此方法根据两个整数的元组返回邮箱状态，即消息计数和邮箱大小。'
- en: '`list`(): This method sends a request for getting a message list, which has
    been demonstrated in the example shown later in this section.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`(): 此方法发送一个请求以获取消息列表，这在本节后面的示例中已经演示过。'
- en: '`retr()`: This method gives an argument message a number that indicates the
    message that has to be retrieved. It also marks the message as read.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retr()`: 此方法给出一个参数消息编号，表示要检索的消息。 它还标记消息为已读。'
- en: '`dele()`: This method provides an argument for the message that has to be deleted.
    On many POP3 servers, the deletion is not performed until QUIT. You can reset
    the delete flag by using the `rset()` method.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dele()`: 此方法提供了要删除的消息的参数。 在许多POP3服务器上，直到QUIT才执行删除操作。 您可以使用`rset()`方法重置删除标志。'
- en: '`quit()`: This method takes you off the connection by committing a few changes
    and disconnecting you from the server.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quit()`: 此方法通过提交一些更改并将您从服务器断开连接来使您脱离连接。'
- en: 'Let us see how we can read out the e-mail messages by accessing the Google''s
    secure POP3 e-mail server. By default, the POP3 server listens on port `995` securely.
    The following is an example of fetching an e-mail by using POP3:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过访问谷歌的安全POP3电子邮件服务器来读取电子邮件消息。 默认情况下，POP3服务器在端口`995`上安全监听。 以下是使用POP3获取电子邮件的示例：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see in the preceding code, the `fetch_email()` function has created
    a mailbox object by calling `POP3_SSL()` along with the server socket. The username
    and the password are set on this object by calling the `user()` and `pass_()`
    method. Upon successful authentication, we can invoke the POP3 commands by using
    methods, such as the `list()` method, which is called to list the e-mails. In
    this example, the total number of messages has been displayed on the screen. Then,
    the `retr()` method has been used for retrieving the content of a single message.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的代码中所看到的，`fetch_email()`函数通过调用`POP3_SSL()`以及服务器套接字创建了一个邮箱对象。 通过调用`user()`和`pass_()`方法在此对象上设置了用户名和密码。
    成功验证后，我们可以通过使用`list()`方法调用POP3命令。 在此示例中，消息的总数已显示在屏幕上。 然后，使用`retr()`方法检索了单个消息的内容。
- en: 'A sample output has been shown here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了一个示例输出：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Retrieving e-mails by using IMAP with imaplib
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用imaplib通过IMAP检索电子邮件
- en: As we mentioned previously, accessing e-mail over the IMAP protocol doesn't
    necessarily download the message to the local computer or mobile phone. So, this
    can be very efficient, even when used over any low bandwidth Internet connection.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，通过IMAP协议访问电子邮件不一定会将消息下载到本地计算机或手机。 因此，即使在任何低带宽互联网连接上使用，这也可以非常高效。
- en: Python provides a client-side library called `imaplib`, which can be used for
    accessing e-mails over the IMAP protocol. This provides the `IMAP4()` class, which
    implements the IMAP protocol. It takes two arguments, that is, host and port for
    implementing this protocol. By default, `143` has been used as the port number.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了一个名为`imaplib`的客户端库，可用于通过IMAP协议访问电子邮件。 这提供了实现IMAP协议的`IMAP4()`类。 它接受两个参数，即用于实现此协议的主机和端口。
    默认情况下，`143`已被用作端口号。
- en: The derived class, that is, `IMAP4_SSL(),` provides a secure version of the
    IMAP4 protocol. It connects over an SSL encrypted socket. So, you will need an
    SSL friendly socket module. The default port is `993`. Similar to `POP3_SSL()`,
    you can supply the path to a private key and a certificate file path.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 派生类`IMAP4_SSL()`提供了IMAP4协议的安全版本。 它通过SSL加密套接字连接。 因此，您将需要一个SSL友好的套接字模块。 默认端口是`993`。
    与`POP3_SSL()`类似，您可以提供私钥和证书文件路径。
- en: 'A typical example of what an IMAP client looks like can be seen here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这里看到IMAP客户端的典型示例：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The aforementioned code will try to initiate an IMAP4 encrypted client session.
    After the `login()` method is successful, you can apply the various methods on
    the created object. In the aforementioned code snippet, the `select()` method
    has been used. This will select a user's mailbox. The default mailbox is called
    `Inbox`. A full list of methods supported by this mailbox object is available
    on the Python Standard library documentation page, which can be found at [https://docs.python.org/3/library/imaplib.html](https://docs.python.org/3/library/imaplib.html).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将尝试启动一个IMAP4加密客户端会话。在`login()`方法成功之后，您可以在创建的对象上应用各种方法。在上述代码片段中，使用了`select()`方法。这将选择用户的邮箱。默认邮箱称为`Inbox`。此邮箱对象支持的方法的完整列表可在Python标准库文档页面上找到，网址为[https://docs.python.org/3/library/imaplib.html](https://docs.python.org/3/library/imaplib.html)。
- en: Here, we would like to demonstrate how you can search the mailbox by using the
    `search()` method. It accepts a character set and search criterion parameter.
    The character set parameter can be `None`, where a request for no specific character
    will be sent to the server. However, at least one criterion needs to be specified.
    For performing advance search for sorting the messages, you can use the `sort()`
    method.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们想演示如何使用`search()`方法搜索邮箱。它接受字符集和搜索条件参数。字符集参数可以是`None`，其中将向服务器发送不带特定字符的请求。但是，至少需要指定一个条件。为了执行高级搜索以对消息进行排序，可以使用`sort()`方法。
- en: 'Similar to POP3, we will use a secure IMAP connection for connecting to the
    server by using the `IMAP4_SSL()` class. Here''s a lightweight example of a Python
    IMAP client:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与POP3类似，我们将使用安全的IMAP连接来连接到服务器，使用`IMAP4_SSL()`类。以下是一个Python IMAP客户端的简单示例：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, an instance of `IMPA4_SSL()`, that is, the mailbox object,
    has been created. In this, we have taken the server address and port as arguments.
    Upon successfully logging in with the `login()` method, you can use the `select()`
    method for choosing the mail box folder that you want to access. In this example,
    the `Inbox` folder has been selected. In order to read the messages, we need to
    request for the data from the Inbox. One way to do that is to use the `search()`
    method. Upon the successful reception of some mail metadata, we can use the `fetch()`
    method for retrieving the e-mail message envelope part and data. In this example,
    the RFC 822 type of standard text message has been sought with the help of the
    `fetch()` method. We can use the Python pretty print or the print module for showing
    the output on the screen. Finally, apply the `close()` and the `logout()` methods
    to the mailbox object.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，创建了`IMPA4_SSL()`的实例，即邮箱对象。在其中，我们将服务器地址和端口作为参数。成功使用`login()`方法登录后，您可以使用`select()`方法选择要访问的邮箱文件夹。在此示例中，选择了`Inbox`文件夹。为了阅读消息，我们需要从收件箱请求数据。其中一种方法是使用`search()`方法。在成功接收一些邮件元数据后，我们可以使用`fetch()`方法检索电子邮件消息信封部分和数据。在此示例中，使用`fetch()`方法寻找了RFC
    822类型的标准文本消息。我们可以使用Python的pretty print或print模块在屏幕上显示输出。最后，将`close()`和`logout()`方法应用于邮箱对象。
- en: 'The preceding code will display an output similar to the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将显示类似以下内容的输出：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Sending e-mail attachments
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送电子邮件附件
- en: In the previous section, we have seen how plain text messages can be sent by
    using the SMTP protocol. In this section, let us explore how to send attachments
    through e-mail messages. We can use our second example, in which we have sent
    an e-mail by using TLS, for this. While composing the e-mail message, in addition
    to adding a plain text message, include the additional attachment field.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们已经看到如何使用SMTP协议发送纯文本消息。在本节中，让我们探讨如何通过电子邮件消息发送附件。我们可以使用我们的第二个示例，其中我们使用了TLS发送电子邮件。在撰写电子邮件消息时，除了添加纯文本消息，还包括附加附件字段。
- en: In this example, we can use the `MIMEImage` type for the `email.mime.image`
    sub-module. A GIF type of image will be attached to the e-mail message. It is
    assumed that a GIF image can be found anywhere in the file system path. This file
    path is generally taken on the basis of the user input.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们可以使用`email.mime.image`子模块的`MIMEImage`类型。一个GIF类型的图像将附加到电子邮件消息中。假设可以在文件系统路径的任何位置找到GIF图像。该文件路径通常基于用户输入。
- en: 'The following example shows how to send an attachment along with your e-mail
    message:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何在电子邮件消息中发送附件：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you run the preceding script, then it will ask the usual, that is, the e-mail
    sender, the recipient, the user credentials, and the location of the image file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行上述脚本，它将询问通常的内容，即电子邮件发送者、收件人、用户凭据和图像文件的位置。
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Sending e-mails via the logging module
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过日志模块发送电子邮件
- en: In any modern programming language, the logging facilities are provided with
    common features. Similarly, Python's logging module is very rich in features and
    flexibilities. We can use the different types of log handlers with the logging
    module, such as the console or the file logging handler. One way in which you
    can maximize your logging benefits is by e-mailing the log messages to the user
    just as the log is being produced. Python's logging module provides a type of
    handler called `BufferingHandler,` which is capable of buffering the log data.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何现代编程语言中，都提供了常见功能的日志记录设施。同样，Python的日志模块在功能和灵活性上非常丰富。我们可以使用日志模块的不同类型的日志处理程序，例如控制台或文件日志处理程序。您可以最大化日志记录的好处的一种方法是在生成日志时将日志消息通过电子邮件发送给用户。Python的日志模块提供了一种称为`BufferingHandler`的处理程序类型，它能够缓冲日志数据。
- en: 'An example of extending `BufferingHandler` has been displayed later. A child
    class called `BufferingSMTPHandler` is defined by `BufferingHandler`. In this
    example, an instance of the logger object is created by using the logging module.
    Then, an instance of `BufferingSMTPHandler` is tied to this logger object. The
    logging level is set to DEBUG so that it can log any message. A sample list of
    four words has been used for creating the four log entries. Each log entry should
    resemble the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后显示了扩展`BufferingHandler`的示例。通过`BufferingHandler`定义了一个名为`BufferingSMTPHandler`的子类。在此示例中，使用日志模块创建了一个记录器对象的实例。然后，将`BufferingSMTPHandler`的实例绑定到此记录器对象。将日志级别设置为DEBUG，以便记录任何消息。使用了一个包含四个单词的示例列表来创建四个日志条目。每个日志条目应类似于以下内容：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let us take a look at the full code. The following is an example of sending
    an e-mail with the help of the logging module:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下完整的代码。以下是使用日志模块发送电子邮件的示例：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, our `BufferingSMTPHandler` method only overrides one method,
    that is, `flush()`. On the constructor, `__init__()`, the basic variable is setup
    as well as the logging format by using the `setFormatter()` method. In the `flush()`
    method, we have created an instance of an `SMTP()` object. The SMTP message header
    has been created by using the data available. The log message has been appended
    to the e-mail message, and the `sendmail()` method has been called to send the
    e-mail message. The code in the `flush()` method is wrapped inside a `try-except`
    block.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的`BufferingSMTPHandler`方法只覆盖了一个方法，即`flush()`。在构造函数`__init__()`中，设置了基本变量以及使用`setFormatter()`方法设置了日志格式。在`flush()`方法中，我们创建了一个`SMTP()`对象的实例。使用可用数据创建了SMTP消息头。将日志消息附加到电子邮件消息，并调用`sendmail()`方法发送电子邮件消息。`flush()`方法中的代码包裹在`try-except`块中。
- en: 'The output of the script discussed will be similar to the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所讨论的脚本的输出将类似于以下内容：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, when you check the e-mail message with the e-mail command (native to Linux/UNIX
    machines), you can expect that the e-mail would have been received by the local
    user, as shown in the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您使用电子邮件命令（Linux/UNIX机器上的本机命令）检查电子邮件消息时，您可以期望本地用户已收到电子邮件，如下所示：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can view the content of the message by typing the message ID on the command
    prompt with `&`, as shown in the following output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在命令提示符上输入消息ID和`&`来查看消息的内容，如下输出所示：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, you can quit the mail program by typing the shortcut `q` on the command
    prompt, as shown here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过在命令提示符上输入快捷键`q`来退出邮件程序，如下所示：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter demonstrates how Python can interact with the three major e-mail
    handling protocols: SMTP, POP3, and IMAP. In each of these cases, how to work
    the client code has been explained. Finally, an example for using SMTP in the
    Python''s logging module has been shown.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本章演示了Python如何与三种主要的电子邮件处理协议交互：SMTP、POP3和IMAP。在每种情况下，都解释了客户端代码的工作方式。最后，展示了在Python的日志模块中使用SMTP的示例。
- en: In the next chapter, you will learn how to use Python to work with remote systems
    to perform various tasks, such as administrative tasks by using SSH, file transfer
    through FTP, Samba, and so forth. Some remote monitoring protocols, such as SNMP,
    and the authentication protocols, such as LDAP, will also be discussed briefly.
    So, enjoy writing more Python codes in the next chapter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用Python与远程系统一起执行各种任务，例如使用SSH进行管理任务，通过FTP、Samba等进行文件传输。还将简要讨论一些远程监控协议，如SNMP，以及身份验证协议，如LDAP。因此，请在下一章中享受编写更多的Python代码。
