- en: Using Google Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用谷歌地图
- en: 'In this chapter, you will learn to use Google Maps in Python applications and
    explore the different advantages provided by Google. You will learn to do the
    following tasks:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何在Python应用程序中使用谷歌地图，并探索谷歌提供的不同优势。您将学习以下任务：
- en: Find out details of a location or landmark
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找位置或地标的详细信息
- en: Get complete information from latitude and longitude values
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从经度和纬度值获取完整信息
- en: Find out the distance between a two locations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找两个位置之间的距离
- en: Display a location on Google Maps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在谷歌地图上显示位置
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The Google Maps API is a set of methods and tools that can be used to find out
    complete information, including longitude and latitude values, for any location.
    You can use the Google Maps API methods to find distances between two locations
    or directions to any location; you can even display Google Maps, marking that
    location, and much more.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌地图API是一组方法和工具，可用于查找任何位置的完整信息，包括经度和纬度值。您可以使用谷歌地图API方法查找两个位置之间的距离或到达任何位置的方向；甚至可以显示谷歌地图，标记该位置，等等。
- en: 'More precisely, there is a Python `client` library for Google Maps Services.
    There are several Google Maps APIs, including the Directions API, Distance Matrix
    API, Geocoding API, Geolocation API, and many more. To use any Google Maps web
    services, your Python script sends a request to Google; to serve that request,
    you need an API key. You need to follow these steps to get an API key:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 更准确地说，谷歌地图服务有一个Python“客户端”库。谷歌地图API包括方向API、距离矩阵API、地理编码API、地理位置API等多个API。要使用任何谷歌地图网络服务，您的Python脚本会向谷歌发送一个请求；为了处理该请求，您需要一个API密钥。您需要按照以下步骤获取API密钥：
- en: Visit [https://console.developers.google.com](https://console.developers.google.com)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://console.developers.google.com](https://console.developers.google.com)
- en: Log in to the console using your Google account
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的谷歌账号登录控制台
- en: Select one of your existing projects or create a new project
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您现有的项目之一或创建一个新项目。
- en: Enable the API(s) you want to use
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用您想要使用的API
- en: Copy the API key and use it in your Python script
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制API密钥并在您的Python脚本中使用它
- en: You need to visit the Google API Console, [https://console.developers.google.com](https://console.developers.google.com/apis/dashboard),
    and get API keys so that your application is authenticated to work with Google
    Maps API web services.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问谷歌API控制台，[https://console.developers.google.com](https://console.developers.google.com/apis/dashboard)，并获取API密钥，以便您的应用程序经过身份验证可以使用谷歌地图API网络服务。
- en: API keys help in several ways; first of all, they help identify your application.
    The API key is included with every request, hence it helps Google monitor your
    application's API usage, know if your application has consumed its free daily
    quota, and consequently bill your application too
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: API密钥在多个方面有帮助；首先，它有助于识别您的应用程序。API密钥包含在每个请求中，因此它有助于谷歌监视您的应用程序的API使用情况，了解您的应用程序是否已经消耗完每日的免费配额，并因此向您的应用程序收费。
- en: So, in order to use Google Maps API web services in your Python application,
    you just need to enable the desired API and get a API key for use in your Python
    application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了在您的Python应用程序中使用谷歌地图API网络服务，您只需要启用所需的API并获取一个API密钥。
- en: Finding out details of a location or a landmark
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找位置或地标的详细信息
- en: In this recipe, you will be prompted to enter a location or landmark whose details
    you want to know. For example, if you enter `Buckingham Palace`, the recipe will
    display the city and postal code of the location where the palace is situated,
    along with its longitude and latitude values.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，您将被提示输入您想要了解的位置或地标的详细信息。例如，如果您输入“白金汉宫”，该教程将显示宫殿所在地的城市和邮政编码，以及其经度和纬度值。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The search method of the `GoogleMaps` class is the key player in this recipe.
    The landmark or location entered by the user is passed to the search method. The
    `city`, `postal_code`, `lat`, and `lng` properties of the object returned from
    the search method are used to display the city, postal code, latitude, and longitude
    of the location, respectively. Let''s see how it is done through the following
    step-by-step procedure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`GoogleMaps`类的search方法是这个教程的关键。用户输入的地标或位置被传递给search方法。从search方法返回的对象的“city”、“postal_code”、“lat”和“lng”属性用于分别显示位置的城市、邮政编码、纬度和经度。让我们通过以下逐步过程来看看如何完成这个操作：'
- en: Create an application based on the Dialog without Buttons template.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于无按钮对话框模板创建一个应用程序。
- en: Add six `QLabel`, a `QLineEdit`, and a `QPushButton` widget to the form by dragging
    and dropping six Label, one Line Edit, and a Push Button widget onto the form.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将六个标签、一个行编辑和一个推送按钮小部件拖放到表单上，向表单添加六个标签、一个行编辑和一个推送按钮小部件。
- en: Set the text property of the first Label widget to `Find out the City, Postal
    Code, Longitude and Latitude` and that of the second Label widget to `Enter location`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个标签小部件的文本属性设置为“查找城市、邮政编码、经度和纬度”，将第二个标签小部件的文本属性设置为“输入位置”。
- en: Delete the text property of the third, fourth, fifth, and sixth Label widgets,
    because their text properties will be set through code; that is, the city, postal
    code, longitude, and latitude of the entered location will be fetched through
    code and will be displayed through these four Label widgets.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第三、第四、第五和第六个标签小部件的文本属性，因为它们的文本属性将通过代码设置；也就是说，输入位置的城市、邮政编码、经度和纬度将通过代码获取并通过这四个标签小部件显示。
- en: Set the text property of the Push Button widget to `Search`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的文本属性设置为“搜索”。
- en: Set the objectName property of the Line Edit widget to `lineEditLocation`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将行编辑小部件的objectName属性设置为“lineEditLocation”。
- en: Set the objectName property of the Push Button widget to `pushButtonSearch`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的objectName属性设置为“pushButtonSearch”。
- en: Set the objectName property of the rest of the four Label widgets to `labelCity`,
    `labelPostalCode`, `labelLongitude`, and `labelLatitude`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其余四个标签小部件的objectName属性设置为“labelCity”、“labelPostalCode”、“labelLongitude”和“labelLatitude”。
- en: 'Save the application by name as `demoGoogleMap1.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoGoogleMap1.ui`。表单现在将显示如下屏幕截图所示：
- en: '![](assets/2178b7ed-d1b5-4dac-8323-bdd54599223a.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2178b7ed-d1b5-4dac-8323-bdd54599223a.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file and it
    is an XML file. The XML file is converted into Python code by applying the `pyuic5`
    utility. You can find the generated Python code, `demoGoogleMap1.py`, in the source
    code bundle for the book.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，它是一个XML文件。通过应用`pyuic5`实用程序将XML文件转换为Python代码。您可以在本书的源代码包中找到生成的Python代码`demoGoogleMap1.py`。
- en: Treat the `demoGoogleMap1.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoGoogleMap1.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callGoogleMap1.pyw` and import the
    `demoGoogleMap1.py` code into it:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callGoogleMap1.pyw`的Python文件，并将`demoGoogleMap1.py`代码导入其中：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can see in the script that the click event of the push button with the objectName
    property `pushButtonSearch` s connected to the `displayDetails` method. This means
    that, whenever the push button is clicked, the `displayDetails` method will be
    invoked. In the `displayDetails` method, you access the location entered by the
    user in the Line Edit widget and assign that location to the address variable.
    You define a Google Maps instance by passing the API key that you got on registering
    with Google. Invoke the `search` method on the Google Maps instance, passing the
    location entered by the user in this method. The result of the `search` method
    is assigned to the `my_location` structure. The city member of the `my_location`
    structure contains the city entered by the user. Similarly, the `postal_code`,
    `lng`, and `lat` members of the `my_location` structure contain the postal code,
    longitude, and latitude information of the location entered by the user, respectively.
    The city, postal code, longitude, and latitude information are displayed via the
    last four Label widgets.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中看到，具有objectName属性`pushButtonSearch`的按钮的单击事件连接到`displayDetails`方法。这意味着每当单击按钮时，将调用`displayDetails`方法。在`displayDetails`方法中，您访问用户在行编辑小部件中输入的位置，并将该位置分配给地址变量。通过传递在Google注册时获得的API密钥来定义Google
    Maps实例。在Google Maps实例上调用`search`方法，传递用户在此方法中输入的位置。`search`方法的结果分配给`my_location`结构。`my_location`结构的city成员包含用户输入的城市。类似地，`my_location`结构的`postal_code`、`lng`和`lat`成员分别包含用户输入位置的邮政编码、经度和纬度信息。城市、邮政编码、经度和纬度信息通过最后四个标签小部件显示。
- en: 'On running the application, you will be prompted to enter a location you want
    to find information about. Suppose you enter `Taj Mahal` in the location, followed
    by clicking the Search button. The city, postal code, longitude, and latitude
    information of the Taj Mahal landmark will be displayed on the screen, as shown
    in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将提示您输入要查找信息的位置。假设您在位置中输入`泰姬陵`，然后单击搜索按钮。泰姬陵地标的城市、邮政编码、经度和纬度信息将显示在屏幕上，如下面的屏幕截图所示：
- en: '![](assets/82952079-989a-4c5e-9c83-87569e794297.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/82952079-989a-4c5e-9c83-87569e794297.png)'
- en: Getting complete information from latitude and longitude values
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从纬度和经度值获取完整信息
- en: In this recipe, you will learn how to find out the complete details of a location
    whose longitude and latitude values you know. This process of converting a point
    location, that is, latitude and longitude values, into a readable address (the
    place name, city, country name, and so on) is known as **reverse geocoding**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何查找已知经度和纬度值的位置的完整详细信息。将点位置（即纬度和经度值）转换为可读地址（地名、城市、国家名称等）的过程称为**反向地理编码**。
- en: The application will prompt you to enter longitude and latitude values, and
    then it will display the matching location name, city, country, and postal code
    for that location.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将提示您输入经度和纬度值，然后显示匹配的位置名称、城市、国家和邮政编码。
- en: How to do it…
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '如何做... '
- en: 'Let''s create an application based on the Dialog without Buttons template by
    performing the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据以下步骤创建一个基于无按钮对话框模板的应用程序：
- en: Add seven `QLabel`, two `QLineEdit`, and a `QPushButton` widget to the form
    by dragging and dropping seven Label, two Line Edit, and a Push Button widget
    onto the form.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将七个`QLabel`、两个`QLineEdit`和一个`QPushButton`小部件拖放到表单上，向表单添加七个标签、两个行编辑和一个按钮小部件。
- en: Set the text property of the first Label widget to `Find out the Location, City,
    Country and Postal Code`, that of the second Label widget to `Enter Longitude`,
    and that of the third Label widget to `Enter Latitude`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个标签小部件的文本属性设置为`查找位置、城市、国家和邮政编码`，将第二个标签小部件的文本属性设置为`输入经度`，将第三个标签小部件的文本属性设置为`输入纬度`。
- en: Delete the text properties of the fourth, fifth, sixth, and seventh Label widgets
    because their text properties will be set through code; that is, the location,
    city, country, and postal code of the location whose longitude and latitude are
    entered by the user will be accessed through code and will be displayed through
    these four Label widgets.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第四、第五、第六和第七个标签小部件的文本属性，因为它们的文本属性将通过代码设置；也就是说，用户输入经度和纬度的位置的位置、城市、国家和邮政编码将通过代码访问，并通过这四个标签小部件显示。
- en: Set the text property of the Push Button widget to `Search`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为`搜索`。
- en: Set the objectName property of the two Line Edit widgets to `lineEditLongitude`
    and `lineEditLatitude`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个行编辑小部件的objectName属性设置为`lineEditLongitude`和`lineEditLatitude`。
- en: Set the objectName property of the Push Button widget to `pushButtonSearch`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为`pushButtonSearch`。
- en: Set the objectName property of the other four Label widgets to `labelLocation`,
    `labelCity`, `labelCountry`, and `labelPostalCode`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其他四个标签小部件的objectName属性设置为`labelLocation`、`labelCity`、`labelCountry`和`labelPostalCode`。
- en: 'Save the application by name as `demoGoogleMap2.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoGoogleMap2.ui`。表单现在将显示如下截图所示：
- en: '![](assets/7427070b-7dd9-400e-9ac7-7ca614a6ee62.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7427070b-7dd9-400e-9ac7-7ca614a6ee62.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs to be converted into Python code. The `pyuic5` utility
    is used to convert the XML file into Python code. The generated Python script, `demoGoogleMap2.py`, can
    be seen in the source code bundle for the book.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。使用`pyuic5`实用程序将XML文件转换为Python代码。在本书的源代码包中可以看到生成的Python脚本`demoGoogleMap2.py`。
- en: Treat the `demoGoogleMap2.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoGoogleMap2.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callGoogleMap2.pyw` and import the
    `demoGoogleMap2.py` code into it:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callGoogleMap2.pyw`的Python文件，并将`demoGoogleMap2.py`代码导入其中：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作原理如下：
- en: In the script, you can see that the click() event of the push button with the
    objectName property `pushButtonSearch` is connected to the `displayLocation` method.
    This means that, whenever the push button is clicked, the `displayLocation` method
    will be invoked. In the `displayLocation` method, you access the longitude and
    latitude entered by the user through the two Line Edit widgets and assign them
    to two variables, `lng` and `lat`, respectively. A Google Maps instance is defined
    by passing the API key that you got on registering with Google. Invoke the `search`
    method on the Google Maps instance, passing the longitude and latitude values
    that were supplied by the user. The `first` method is invoked on the retrieved
    search and the first location that matches the supplied longitude and latitude
    values is assigned to the `my_location` structure. The location name is displayed
    through the Label widget. To display the city, country, and postal code of the
    location, the `city`, `country`, and `postal_code` members of the `my_location`
    structure are used.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，您可以看到具有objectName属性`pushButtonSearch`的推送按钮的click()事件连接到`displayLocation`方法。这意味着每当单击推送按钮时，将调用`displayLocation`方法。在`displayLocation`方法中，您通过两个Line
    Edit小部件访问用户输入的经度和纬度，并分别将它们分配给两个变量`lng`和`lat`。通过传递在Google注册时获得的API密钥来定义Google Maps实例。在Google
    Maps实例上调用`search`方法，传递用户提供的经度和纬度值。在检索到的搜索上调用`first`方法，并将与提供的经度和纬度值匹配的第一个位置分配给`my_location`结构。位置名称通过Label小部件显示。为了显示位置的城市、国家和邮政编码，使用`my_location`结构的`city`、`country`和`postal_code`成员。
- en: 'On running the application, you will be prompted to enter longitude and latitude
    values. The location name, city, country, and postal code related to the supplied
    longitude and latitude will be displayed on the screen through the four Label
    widgets, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将被提示输入经度和纬度值。与提供的经度和纬度相关的位置名称、城市、国家和邮政编码将通过四个标签小部件显示在屏幕上，如下截图所示：
- en: '![](assets/9931f5fa-74a4-432d-b0e4-7d1910828e4c.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9931f5fa-74a4-432d-b0e4-7d1910828e4c.png)'
- en: Finding out the distance between two locations
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找两个位置之间的距离
- en: In this recipe, you will learn how to find out the distance in kilometers between
    the two locations entered by the user. The recipe will simply prompt the user
    to enter two locations, followed by clicking the Find Distance button, and the
    distance between the two will be displayed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，您将学习如何找出用户输入的两个位置之间的距离（以公里为单位）。该教程将简单地提示用户输入两个位置，然后单击“查找距离”按钮，两者之间的距离将被显示。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤如下：
- en: 'Let''s create an application based on the Dialog without Buttons template by
    performing the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据没有按钮模板的对话框创建一个应用程序，执行以下步骤：
- en: Add four `QLabel`, two `QLineEdit`, and a `QPushButton` widget to the form by
    dragging and dropping four Label, two Line Edit, and a Push Button widget onto
    the form.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将四个标签、两个行编辑和一个推送按钮小部件拖放到表单上，向表单添加四个`QLabel`、两个`QLineEdit`和一个`QPushButton`小部件。
- en: Set the text property of the first Label widget to `Find out the distance between
    two locations`, that of the second Label widget to `Enter first location`, and
    that of the third Label widget to `Enter second location`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个标签小部件的文本属性设置为“查找两个位置之间的距离”，将第二个标签小部件的文本属性设置为“输入第一个位置”，将第三个标签小部件的文本属性设置为“输入第二个位置”。
- en: Delete the text property of the fourth Label widget because its text property
    will be set through code; that is, the distance between the two entered locations
    will be computed through code and displayed in the fourth Label widget.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第四个标签小部件的文本属性，因为它的文本属性将通过代码设置；也就是说，两个输入位置之间的距离将通过代码计算并显示在第四个标签小部件中。
- en: Set the text property of the Push Button widget to `Find Distance`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的文本属性设置为“查找距离”。
- en: Set the objectName properties of the two Line Edit widgets to `lineEditFirstLocation`
    and `lineEditSecondLocation`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个行编辑小部件的objectName属性设置为`lineEditFirstLocation`和`lineEditSecondLocation`。
- en: Set the objectName property of the Push Button widget to `pushButtonFindDistance`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的objectName属性设置为`pushButtonFindDistance`。
- en: Set the objectName property of the fourth Label widget to `labelDistance`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第四个标签小部件的objectName属性设置为`labelDistance`。
- en: 'Save the application by name as `demoGoogleMap3.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoGoogleMap3.ui`。表单现在将显示如下截图所示：
- en: '![](assets/fba0fce7-d01a-4b48-b271-0149a0f77bc4.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fba0fce7-d01a-4b48-b271-0149a0f77bc4.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file and it
    is an XML file. The XML file is converted into Python code by applying the `pyuic5`
    utility. You can find the generated Python code, `demoGoogleMap3.py`, in the source
    code bundle for the book.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，它是一个XML文件。通过应用`pyuic5`实用程序，将XML文件转换为Python代码。您可以在本书的源代码包中找到生成的Python代码`demoGoogleMap3.py`。
- en: To use the GUI created in the `demoGoogleMap3.py` file, we need to create another
    Python script and import `demoGoogleMap3.py` file in that script.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用在`demoGoogleMap3.py`文件中创建的GUI，我们需要创建另一个Python脚本并在该脚本中导入`demoGoogleMap3.py`文件。
- en: 'Create another Python file with the name `callGoogleMap3.pyw` and import the
    `demoGoogleMap3.py` code into it:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callGoogleMap3.pyw`的Python文件，并将`demoGoogleMap3.py`代码导入其中：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: You create an instance of the `Client` class and name it `gmaps`. While creating
    the `Client` instance, you need to pass the API key that you got on registering
    with Google. The click() event of the push button with objectName, `pushButtonFindDistance`,
    is connected to the `displayDistance` method. This means that, whenever the push
    button is clicked, the `displayDistance` method will be invoked. In the `displayDistance` method,
    you invoke the `distance_matrix` method, passing the `Client` instance and the
    two locations entered by the user, to find out the distance between them. The
    `distance_matrix` method returns a multidimensional array that is assigned to
    the data array. From the data array, the distance between the two locations is
    accessed and assigned to the `distance` variable. The value in the `distance`
    variable is finally displayed through the Label widget.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您创建一个`Client`类的实例并将其命名为`gmaps`。在创建`Client`实例时，您需要传递在注册Google时获得的API密钥。具有objectName`pushButtonFindDistance`的按钮的click()事件连接到`displayDistance`方法。这意味着每当单击按钮时，将调用`displayDistance`方法。在`displayDistance`方法中，您调用`distance_matrix`方法，传递`Client`实例和用户输入的两个位置，以找出它们之间的距离。`distance_matrix`方法返回一个多维数组，该数组分配给数据数组。从数据数组中，访问并将两个位置之间的距离分配给`distance`变量。最终通过Label小部件显示`distance`变量中的值。
- en: 'On running the application, you will be prompted to enter the two locations
    whose intervening distance you want to know. After entering the two locations,
    when you click the Find Distance button, the distance between the two locations
    will be displayed on the screen, as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将提示您输入要了解其相隔距离的两个位置。输入两个位置后，单击查找距离按钮，两个位置之间的距离将显示在屏幕上，如下截图所示：
- en: '![](assets/b51275e5-c2e1-4667-899f-94028d2c718b.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b51275e5-c2e1-4667-899f-94028d2c718b.png)'
- en: Displaying location on Google Maps
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Google地图上显示位置
- en: In this recipe, you will learn how to display a location on Google Maps if you
    know the longitude and latitude values of that location. You will be prompted
    to simply enter longitude and latitude values and, when you click the Show Map
    button, that location will appear on Google Maps.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何在Google地图上显示位置，如果您知道该位置的经度和纬度值。您将被提示简单输入经度和纬度值，当您单击显示地图按钮时，该位置将显示在Google地图上。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let''s create an application based on the Dialog without Buttons template by
    performing the following steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个基于无按钮对话框模板的应用程序，执行以下步骤：
- en: Add two `QLabel`, two `QLineEdit`, a `QPushButton`, and a `QWidget` widget to
    the form by dragging and dropping two Label, two Line Edit, a Push Button, and
    a Widget container onto the form.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将两个Label、两个Line Edit、一个PushButton和一个QWidget小部件拖放到表单上，向表单添加两个QLabel、两个QLineEdit、一个QPushButton和一个QWidget小部件。
- en: Set the text property of the two Label widgets to `Longitude` and `Latitude`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个Label小部件的文本属性设置为`Longitude`和`Latitude`。
- en: Set the text property of the Push Button widget to `Show Map`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为`Show Map`。
- en: Set the objectName property of the two Line Edit widgets to `lineEditLongitude`
    and `lineEditLatitude`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个Line Edit小部件的objectName属性设置为`lineEditLongitude`和`lineEditLatitude`。
- en: Set the objectName property of the Push Button widget to `pushButtonShowMap`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为`pushButtonShowMap`。
- en: 'Save the application by name as `showGoogleMap.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`showGoogleMap.ui`。现在，表单将显示如下截图所示：
- en: '![](assets/5ae4fa15-157c-4c1d-9ff0-0f443d60e9a6.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ae4fa15-157c-4c1d-9ff0-0f443d60e9a6.png)'
- en: The next step is to promote the `QWidget` widget to `QWebEngineView` because,
    to display Google Maps, `QWebEngineView` is required. Because Google maps is a
    web application, we need a QWebEngineView to display and interact with Google
    maps.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将`QWidget`小部件提升为`QWebEngineView`，因为要显示Google地图，需要`QWebEngineView`。因为Google地图是一个Web应用程序，我们需要一个QWebEngineView来显示和与Google地图交互。
- en: Promote the `QWidget` widget by right-clicking on it and selecting the Promote
    to ... option from the menu that pops up. In the dialog box that appears, leave
    the Base class name option as the default, QWidget.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过右键单击QWidget小部件并从弹出菜单中选择Promote to ...选项来提升`QWidget`小部件。在出现的对话框中，将Base class
    name选项保留为默认的QWidget。
- en: In the Promoted class name box, enter `QWebEngineView` and, in the header file
    box, type `PyQT5.QtWebEngineWidgets`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Promoted class name框中输入`QWebEngineView`，在header file框中输入`PyQT5.QtWebEngineWidgets`。
- en: 'Click on the Promote button to promote the `QWidget` widget to the `QWebEngineView`
    class, as shown in the following screenshot:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Promote按钮，将`QWidget`小部件提升为`QWebEngineView`类，如下截图所示：
- en: '![](assets/cef6a3a1-49b1-4336-8cc0-eedfadf522fd.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cef6a3a1-49b1-4336-8cc0-eedfadf522fd.png)'
- en: Click on the Close button to close the Promoted Widgets dialog box. The user
    interface created with Qt Designer is stored in a `.ui` file, which is an XML
    file and needs to be converted into Python code. The `pyuic5` utility is used
    to convert the XML file into Python code. The generated Python script, `showGoogleMap.py`,
    can be seen in the source code bundle for the book.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击关闭按钮关闭Promoted Widgets对话框。使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。使用`pyuic5`实用程序将XML文件转换为Python代码。生成的Python脚本`showGoogleMap.py`可以在本书的源代码包中找到。
- en: Treat the `showGoogleMap.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`showGoogleMap.py`脚本视为头文件，并将其导入到您将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callGoogleMap.pyw` and import the
    `showGoogleMap.py` code into it:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callGoogleMap.pyw`的Python文件，并将`showGoogleMap.py`代码导入其中：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the script, you can see that the click event of the push button with the
    objectName property `pushButtonShowMap` is connected to the `dispSite ()` method.
    This means that, whenever the push button is clicked, the `dispSite()` method
    will be invoked. In the `dispSite ()` method, you access the longitude and latitude
    entered by the user through the two Line Edit widgets, and assign them to two
    variables, `lng` and `lat`, respectively. Thereafter, you create a URL that invokes
    Google Maps from [google.com](https://www.google.com/) and passes the latitude
    and longitude values entered by the user.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本中，您可以看到具有objectName属性`pushButtonShowMap`的按钮的点击事件与`dispSite()`方法相连。这意味着，每当点击按钮时，将调用`dispSite()`方法。在`dispSite()`方法中，您通过两个Line
    Edit小部件访问用户输入的经度和纬度，并分别将它们分配给两个变量`lng`和`lat`。然后，您创建一个URL，从[google.com](https://www.google.com/)调用Google地图，并传递用户输入的纬度和经度值。
- en: The URL is initially in text form and is typecast to a `QUrl` instance and passed
    to the widget that is promoted to `QWebEngineView` to display the website. The
    `QUrl` is a class from Qt that provides several methods and properties to manage
    URLs. Google Maps, with the specified latitude and longitude values, is then displayed
    via the `QWebEngineView` widget.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: URL最初是以文本形式存在的，并且被强制转换为`QUrl`实例，并传递给被提升为`QWebEngineView`以显示网站的小部件。`QUrl`是Qt中提供多种方法和属性来管理URL的类。然后，通过`QWebEngineView`小部件显示具有指定纬度和经度值的Google地图。
- en: 'On running the application, you will be prompted to enter the longitude and
    latitude values of the location you want to see on Google Maps. After entering
    the longitude and latitude values, when you click on the Show Map button, Google
    Maps will display that location, as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将被提示输入您想在Google地图上查看的位置的经度和纬度值。输入经度和纬度值后，当您点击“显示地图”按钮时，Google地图将显示该位置，如下面的屏幕截图所示：
- en: '![](assets/15c43a7b-76f1-4c6f-84a3-72240cfc43ec.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/15c43a7b-76f1-4c6f-84a3-72240cfc43ec.png)'
