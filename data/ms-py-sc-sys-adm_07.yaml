- en: Text Processing and Regular Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本处理和正则表达式
- en: In this chapter, we are going to learn about text processing and regular expressions.
    Text processing is a process of creating or modifying the text. Python has a very
    powerful library called regular expressions that does tasks such as searching
    and extracting the data. You will learn how to do it with files and also learn
    to read and write to files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习有关文本处理和正则表达式的知识。文本处理是创建或修改文本的过程。Python有一个非常强大的名为正则表达式的库，可以执行搜索和提取数据等任务。您将学习如何在文件中执行此操作，还将学习读取和写入文件。
- en: We are going to learn about the `re` Python module for regular expressions and
    processing text in Python. We are going to learn about the `match()`, `search()`,
    `findall()`, and `sub()` functions of `re` module. We are also going to learn
    about text wrapping in Python using the `textwrap` module. Finally, we will learn
    about unicode characters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习有关Python正则表达式和处理文本的`re`模块。我们将学习`re`模块的`match()`、`search()`、`findall()`和`sub()`函数。我们还将学习使用`textwrap`模块在Python中进行文本包装。最后，我们将学习有关Unicode字符。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Text wrapping
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本包装
- en: Regular expressions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式
- en: Unicode strings
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unicode字符串
- en: Text wrapping
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本包装
- en: In this section, we will learn about the `textwrap` Python module. This module
    provides the `TextWrapper` class that does all the work. The `textwrap` module
    is used for formatting and wrapping plain text. This module provides five main
    functions: `wrap()`, `fill()`, `dedent()`, `indent()`, and `shorten()`. We are
    going to learn these functions one by one now.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关`textwrap` Python模块。该模块提供了执行所有工作的`TextWrapper`类。`textwrap`模块用于格式化和包装纯文本。该模块提供了五个主要函数：`wrap()`、`fill()`、`dedent()`、`indent()`和`shorten()`。我们现在将逐一学习这些函数。
- en: The wrap() function
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wrap()函数
- en: The `wrap()` function is used to wrap an entire paragraph in to a single string.
    The output will be a list of output lines.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`wrap()`函数用于将整个段落包装成单个字符串。输出将是输出行的列表。'
- en: 'The syntax is `textwrap.wrap(text, width)`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 语法是`textwrap.wrap(text, width)`：
- en: '`text`: Text to wrap.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`：要包装的文本。'
- en: '`width`: Maximum length allowed of a wrapped line. The default value is `70`.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`：包装行的最大长度。默认值为`70`。'
- en: 'Now, we will see an example of `wrap()`. Create a `wrap_example.py` script and
    write the following content in it:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到`wrap()`的一个示例。创建一个`wrap_example.py`脚本，并在其中写入以下内容：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, we used the `textwrap` module of Python. First, we
    created a string named `sample_string`. Next, using the `TextWrapper` class we
    specified the width. Next, using the `wrap` function the string was wrapped to
    the width of `30`. And next, we printed the lines.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了Python的`textwrap`模块。首先，我们创建了一个名为`sample_string`的字符串。接下来，使用`TextWrapper`类指定了宽度。然后，使用`wrap`函数将字符串包装到宽度为`30`。然后，我们打印了这些行。
- en: The fill() function
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: fill()函数
- en: The `fill()` function works similarly to `textwrap.wrap`, except it returns
    the data joined into a single, newline-separated string. This function wraps the
    input in text and returns a single string containing the wrapped text.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`fill()`函数与`textwrap.wrap`类似，只是它返回连接成单个以换行符分隔的字符串的数据。此函数将文本包装并返回包含包装文本的单个字符串。'
- en: 'The syntax for this function is:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的语法是：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`text`: Text to wrap.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`：要包装的文本。'
- en: '`width`: Maximum length allowed of a wrapped line. The default value is `70`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`：包装行的最大长度。默认值为`70`。'
- en: 'Now, we will see an example of `fill()`. Create a `fill_example.py` script and
    write the following content in it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到`fill()`的一个示例。创建一个`fill_example.py`脚本，并在其中写入以下内容：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding example, we used the `fill()` function. The procedure is the
    same as what we did in `wrap()`. First, we created a string variable. Next, we
    created the `textwrap` object. Then, we applied the `fill()` function. Finally,
    we printed the output.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了`fill()`函数。过程与我们在`wrap()`中所做的相同。首先，我们创建了一个字符串变量。接下来，我们创建了`textwrap`对象。然后，我们应用了`fill()`函数。最后，我们打印了输出。
- en: The dedent() function
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dedent()函数
- en: The `dedent()` is another function of the `textwrap` module. This function removes
    the common leading `whitespaces` from every line of your text.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`dedent()`是`textwrap`模块的另一个函数。此函数从文本的每一行中删除常见的前导`空格`。'
- en: 'The syntax for this function is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的语法如下：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`text` is the text to `dedent`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`text`是要`dedent`的文本。'
- en: 'Now, we will see an example of `dedent()`. Create a `dedent_example.py` script and
    write the following content in it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到`dedent()`的一个示例。创建一个`dedent_example.py`脚本，并在其中写入以下内容：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, we created a `str1` string variable. Then we used `textwrap.dedent()` to
    remove the common leading whitespaces. Tabs and spaces are considered whitespaces,
    but they are not equal. Therefore, the only common whitespace, which in our case
    is `tab`, is removed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个`str1`字符串变量。然后我们使用`textwrap.dedent()`来删除常见的前导空格。制表符和空格被视为空格，但它们不相等。因此，唯一的常见空格，在我们的情况下是`tab`，被移除。
- en: The indent() function
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: indent()函数
- en: The `indent()` function is used to add the specified prefix to the beginning
    of the selected lines in your text.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`indent()`函数用于在文本的选定行开头添加指定的前缀。'
- en: 'The syntax for this function is:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的语法是：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`text`: The main string'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`：主字符串'
- en: '`prefix`: The prefix to add'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefix`：要添加的前缀'
- en: 'Create a `indent_example.py` script and write the following content in it:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`indent_example.py`脚本，并在其中写入以下内容：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding example, we used the `fill()` and `indent()` functions of the
    `textwrap` module. First, we used the `fill` method to store the data into the `w` variable. Next,
    we used the `indent` method. Using `indent(),` each line in the output will have
    a `*` prefix. And next, we printed the output.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用了`textwrap`模块的`fill()`和`indent()`函数。首先，我们使用`fill`方法将数据存储到变量`w`中。接下来，我们使用了`indent`方法。使用`indent()`，输出中的每一行都将有一个`*`前缀。然后，我们打印了输出。
- en: The shorten() function
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: shorten()函数
- en: This function of the `textwrap` module is used truncate the text to fit in the
    specified width. For example, if you want to create a summary or preview, use
    the `shorten()` function. Using `shorten()`, all the whitespaces in your text
    will get standardized into a single space.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`textwrap`模块的这个函数用于将文本截断以适应指定的宽度。例如，如果您想要创建摘要或预览，请使用`shorten()`函数。使用`shorten()`，文本中的所有空格将被标准化为单个空格。'
- en: 'The syntax for this function is:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的语法是：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we will see an example of `shorten()`. Create a `shorten_example.py` script and
    write the following content in it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一个`shorten()`的例子。创建一个`shorten_example.py`脚本，并在其中写入以下内容：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding example, we used the `shorten()` function to truncate our text
    and fit that text in a specified width. First, all the whitespaces truncated into
    the single space. If the result fited in the specified width, the result was displayed
    on the screen. If not, then the words of the specified width was displayed on
    the screen and the rest was placed in the placeholder.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们使用了`shorten()`函数来截断我们的文本，并将该文本适应指定的宽度。首先，所有空格都被截断为单个空格。如果结果适合指定的宽度，则结果将显示在屏幕上。如果不适合，则指定宽度的单词将显示在屏幕上，其余部分将放在占位符中。
- en: Regular expressions
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式
- en: In this section, we are going to learn about regular expressions in Python.
    Regular expression is a specialized programming language, which is embedded in
    Python and is available to users through the `re` module. We can define the rules
    for the set of strings that we want to match. Using regular expressions, we can
    extract specific information from files, code, documents, spreadsheets, and so
    on.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Python中的正则表达式。正则表达式是一种专门的编程语言，它嵌入在Python中，并通过`re`模块提供给用户使用。我们可以定义要匹配的字符串集的规则。使用正则表达式，我们可以从文件、代码、文档、电子表格等中提取特定信息。
- en: 'In Python, a regular expression is denoted as `re` and can be imported through
    the `re` module. Regular expressions support four things:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，正则表达式表示为`re`，可以通过`re`模块导入。正则表达式支持四种功能：
- en: Identifiers
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符
- en: Modifiers
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修饰符
- en: Whitespace characters
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空白字符
- en: Flags
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志
- en: 'The following table lists the identifiers, and there''s a description for each
    one:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了标识符，并对每个标识符进行了描述：
- en: '| **Identifier** | **Description** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **标识符** | **描述** |'
- en: '| `\w` | Matches alphanumeric characters, including underscore (`_`) |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `\w` | 匹配字母数字字符，包括下划线(`_`) |'
- en: '| `\W` | Matches non-alphanumeric characters, excluding underscore (`_`) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `\W` | 匹配非字母数字字符，不包括下划线(`_`) |'
- en: '| `\d` | Matches a digit |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `\d` | 匹配数字 |'
- en: '| `\D` | Matches a non-digit |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `\D` | 匹配非数字 |'
- en: '| `\s` | Matches a space |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `\s` | 匹配空格 |'
- en: '| `\S` | Matches anything but a space |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `\S` | 匹配除空格之外的任何字符 |'
- en: '| `.` | Matches a period (`.`) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `.` | 匹配句号(`.`) |'
- en: '| `\b` | Matches any character except a new line |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `\b` | 匹配除换行符之外的任何字符 |'
- en: 'The following table lists the modifiers, and there''s a description for each
    one:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了修饰符，并对每个修饰符进行了描述：
- en: '| **Modifier** | **Description** |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **修饰符** | **描述** |'
- en: '| `^` | Matches start of the string |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `^` | 匹配字符串的开头 |'
- en: '| `$` | Matches end of the string |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `$` | 匹配字符串的结尾 |'
- en: '| `?` | Matches `0` or `1` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `?` | 匹配`0`或`1` |'
- en: '| `*` | Matches `0` or more |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 匹配`0`或更多 |'
- en: '| `+` | Matches `1` or more |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 匹配`1`或更多 |'
- en: '| `&#124;` | Matches either or `x/y` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `&#124;` | 匹配`x/y`中的任意一个 |'
- en: '| `[ ]` | Matches range |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `[ ]` | 匹配范围 |'
- en: '| `{x}` | Amount of preceding code |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `{x}` | 前置代码的数量 |'
- en: 'The following table lists the whitespace characters, and there''s a description
    for each one:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了空白字符，并对每个字符进行了描述：
- en: '| **Character** | **Description** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **字符** | **描述** |'
- en: '| `\s` | Space |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `\s` | 空格 |'
- en: '| `\t` | Tab |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `\t` | 制表符 |'
- en: '| `\n` | New line |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `\n` | 换行 |'
- en: '| `\e` | Escape |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `\e` | 转义 |'
- en: '| `\f` | Form feed |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `\f` | 换页符 |'
- en: '| `\r` | Return |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `\r` | 回车 |'
- en: 'The following table lists the flags, and there''s a description for each one:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了标志，并对每个标志进行了描述：
- en: '| **Flag** | **Description** |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| **标志** | **描述** |'
- en: '| `re.IGNORECASE` | Case-insensitive matching |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `re.IGNORECASE` | 不区分大小写匹配 |'
- en: '| `re.DOTALL` | Matches any character including new lines |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `re.DOTALL` | 匹配包括换行符在内的任何字符 |'
- en: '| `re.MULTILINE` | Multiline matching |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `re.MULTILINE` | 多行匹配 |'
- en: '| `Re.ASCII` | Makes escape match only on ASCII characters |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `Re.ASCII` | 仅使转义匹配ASCII字符 |'
- en: Now we are going to see some examples of regular expressions. We are going to
    learn about the `match()`, `search()`, `findall()`, and `sub()` functions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一些正则表达式的示例。我们将学习`match()`、`search()`、`findall()`和`sub()`函数。
- en: To use regular expressions in Python, you must import the `re` module in your
    scripts so that you will be able to use all the functions and methods for regular
    expressions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中使用正则表达式，必须在脚本中导入`re`模块，以便能够使用正则表达式的所有函数和方法。
- en: Now we are going to learn about these functions one by one in the following
    sections.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将逐一学习这些功能。
- en: The match() function
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: match()函数
- en: 'The `match()` function is a function of the `re` module. This function will
    match the specified `re` pattern with the string. If the match is found, a `match`
    object will be returned. A `match` object will contain the information about the
    `match`. If a match is not found, we will get the result as `None`. The `match`
    object has two methods:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`match()`函数是`re`模块的一个函数。此函数将使用指定的`re`模式与字符串匹配。如果找到匹配项，将返回一个`match`对象。`match`对象将包含有关匹配的信息。如果找不到匹配项，我们将得到结果为`None`。`match`对象有两种方法：'
- en: '`group(num)`: Returns an entire match'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group(num)`: 返回整个匹配'
- en: '`groups()`: Return all matching subgroups in tuple'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups()`: 返回一个元组中的所有匹配子组'
- en: 'The syntax for this function is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的语法如下：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we are going see an example of `re.match()`. Create a `re_match.py` script and
    write the following content in it:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要看一个`re.match()`的例子。创建一个`re_match.py`脚本，并在其中写入以下内容：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你会得到以下输出：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding script, we imported the `re` module to use regular expressions
    in Python. Then we created a `str_line` string. Next, we created an `obj` match
    object and store the match pattern result in it. In this example, the `(.*) enjoy
    (.*?) .*` pattern will print everything before the `enjoy` keyword, and it will
    print only one word after the `enjoy` keyword. Next, we used the `groups()` method
    of `match` object. It will print all the matched substrings in a tuple. So, the
    output you will get will be, `('This is python tutorial. Do you', 'learning')`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，我们导入了`re`模块以在Python中使用正则表达式。然后我们创建了一个`str_line`字符串。接下来，我们创建了一个`obj`匹配对象，并将匹配模式的结果存储在其中。在这个例子中，`(.*)
    enjoy (.*?) .*`模式将打印`enjoy`关键字之前的所有内容，并且只会打印`enjoy`关键字之后的一个单词。接下来，我们使用了`match`对象的`groups()`方法。它将以元组的形式打印所有匹配的子字符串。因此，你将得到的输出是，`('This
    is python tutorial. Do you', 'learning')`。
- en: The search() function
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: search()函数
- en: 'The `search()` function of the `re` module will search through a string. It
    will look for any location for the specified `re` pattern. The `search()` will
    take a pattern and text and it will search through our specified string for a
    match. It will return a `match` object when a match is found. It will return `None`
    if no match found. The `match` object has two methods:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`re`模块的`search()`函数将在字符串中搜索。它将寻找指定的`re`模式的任何位置。`search()`将接受一个模式和文本，并在我们指定的字符串中搜索匹配项。当找到匹配项时，它将返回一个`match`对象。如果找不到匹配项，它将返回`None`。`match`对象有两个方法：'
- en: '`group(num)`: Returns an entire match'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group(num)`: 返回整个匹配'
- en: '`groups()`: Returns all matching subgroups in tuple'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups()`: 返回一个元组中的所有匹配子组'
- en: 'The syntax for this function is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的语法如下：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a `re_search.py` script and write following content in it:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`re_search.py`脚本，并在其中写入以下内容：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你会得到以下输出：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the preceding example, we used the `search()` method of `match` object to
    find the `re` pattern. After importing the re module, we specified the pattern
    in a list. In that list, we wrote two strings: `programming` and `hello`. Next,
    we created a string: `Python programming is fun`. We wrote a for loop that will
    check for a specified pattern one by one. If a match is found, the `if` block
    will be executed. If no match is found, the `else` block will be executed.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用了`match`对象的`search()`方法来查找`re`模式。在导入re模块之后，我们在列表中指定了模式。在那个列表中，我们写了两个字符串：`programming`和`hello`。接下来，我们创建了一个字符串：`Python
    programming is fun`。我们写了一个for循环，它将逐个检查指定的模式。如果找到匹配项，将执行`if`块。如果找不到匹配项，将执行`else`块。
- en: The findall() function
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: findall()函数
- en: This is one of the methods of the `match` object. The `findall()` method finds
    all the matches and then returns them as a list of strings. Each element of the
    list represents as a match. This method searches for the pattern without overlapping.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`match`对象的方法之一。`findall()`方法找到所有匹配项，然后将它们作为字符串列表返回。列表的每个元素表示一个匹配项。此方法搜索模式而不重叠。
- en: 'Create a `re_findall_example.py` script and write the following content in
    it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`re_findall_example.py`脚本，并在其中写入以下内容：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你会得到以下输出：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding script, we have written three examples of the `findall()` method.
    In the first example, we defined a pattern and a string. We found that pattern
    from the string using the `findall()` method and then printed it. In the second
    example, we created a string and we found the words whose first two letters are
    `pe` using `findall()` and then printing them. We will get the list of words whose
    first two letters are `pe`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，我们写了`findall()`方法的三个例子。在第一个例子中，我们定义了一个模式和一个字符串。我们使用`findall()`方法从字符串中找到该模式，然后打印它。在第二个例子中，我们创建了一个字符串，然后使用`findall()`找到前两个字母是`pe`的单词，并打印它们。我们将得到前两个字母是`pe`的单词列表。
- en: 'In addition, we found the words whose first three letters are `pic` and then
    print them. Here, also, we will get the list of strings. In the third example,
    we created a string in which we specified `hello` in uppercase and lowercase,
    and a word: `bye`. Using `findall()`, we find the words whose first two letters
    are `he`. Also in `findall()`, we used a `re.IGNORECASE` flag that will ignore
    the case of the word and printed them.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们找到了前三个字母是`pic`的单词，然后打印它们。在这里，我们也会得到字符串列表。在第三个例子中，我们创建了一个字符串，在其中我们指定了大写和小写的`hello`，还有一个单词：`bye`。使用`findall()`，我们找到了前两个字母是`he`的单词。同样在`findall()`中，我们使用了一个`re.IGNORECASE`标志，它会忽略单词的大小写并打印它们。
- en: The sub() function
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sub()函数
- en: 'This is one of the most important functions of the re module. The `sub()` is
    used for replacing the `re` pattern with the specified replacement. It will replace
    all the occurrences of the `re` pattern with the replacement string. The syntax
    is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是re模块中最重要的函数之一。`sub()`用于用指定的替换字符串替换`re`模式。它将用替换字符串替换`re`模式的所有出现。语法如下：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`pattern`: The `re` pattern.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern`: `re`模式。'
- en: '`repl_str`: The replacement string.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repl_str`: 替换字符串。'
- en: '`string`: The main string.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`: 主字符串。'
- en: '`count`: The number of occurrences to be replaced. The default value is `0`,
    which means replacing all occurrences.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count`: 要替换的出现次数。默认值为`0`，表示替换所有出现。'
- en: 'Now we are going to create a `re_sub.py` script and write the following content
    in it:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要创建一个`re_sub.py`脚本，并在其中写入以下内容：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，你会得到以下输出：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding example, we used `sub()` to replace the `re` pattern with a
    specified replacement string. We replaced `Peter` with `Mary`. So, all the occurrences
    of Peter will be replaced by Mary. Next, we also included the `count` parameter.
    We mentioned `count=1`: it means only one occurrence of Peter will be replaced
    and other occurrences of Peter will remain the same.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用`sub()`来用指定的替换字符串替换`re`模式。我们用Mary替换了Peter。所以，所有的Peter都将被替换为Mary。接下来，我们还包括了`count`参数。我们提到了`count=1`：这意味着只有一个Peter的出现将被替换，其他的Peter的出现将保持不变。
- en: 'Now, we will learn about the `subn()` function of the re module. The `subn()`
    function works the same as `sub()` with the additional functionality. The `subn()`
    function will return a tuple containing the new string and the number of replacements
    performed. Let''s look at an the example of `subn()`. Create a `re_subn.py` script and
    write the following content in it:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习re模块的`subn()`函数。`subn()`函数与`sub()`的功能相同，但还有额外的功能。`subn()`函数将返回一个包含新字符串和执行的替换次数的元组。让我们看一个`subn()`的例子。创建一个`re_subn.py`脚本，并在其中写入以下内容：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding example, we used the `subn()` function to replace the RE pattern.
    As a result, we got a tuple containing the replaced string and the number of replacements.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们使用了`subn()`函数来替换RE模式。结果，我们得到了一个包含替换后的字符串和替换次数的元组。
- en: Unicode strings
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unicode字符串
- en: In this section, we are going to learn about how to print Unicode strings in
    Python. Python handles Unicode strings in a very easy way. The string type actually
    holds Unicode strings, not a sequence of bytes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在Python中打印Unicode字符串。Python以一种非常简单的方式处理Unicode字符串。字符串类型实际上保存的是Unicode字符串，而不是字节序列。
- en: 'Start the `python3` console in your system and start writing the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统中启动`python3`控制台，并开始编写以下内容：
- en: '[PRE27]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Unicode code point
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unicode代码点
- en: 'In this section, we are going to learn about the unicode code point. Python
    has a powerful built-in function named `ord()` to get a Unicode code point from
    a given character. So, let''s see an example of getting a Unicode code point from
    a character, as shown in the following code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Unicode代码点。Python有一个强大的内置函数`ord()`，用于从给定字符获取Unicode代码点。因此，让我们看一个从字符获取Unicode代码点的例子，如下所示：
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Encoding
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码
- en: 'The transformation from Unicode code point to byte string is known as encoding.
    So, let''s see an example of how to encode Unicode code point, as shown in following
    code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从Unicode代码点到字节字符串的转换称为编码。因此，让我们看一个将Unicode代码点编码的例子，如下所示：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Decoding
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解码
- en: 'The transformation from a byte string to a Unicode code point is known as decoding. So,
    let''s see an example of how to decode a byte string to get a Unicode code point
    as shown in following code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从字节字符串到Unicode代码点的转换称为解码。因此，让我们看一个将字节字符串解码为Unicode代码点的例子，如下所示：
- en: '[PRE30]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Avoiding UnicodeDecodeError
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免UnicodeDecodeError
- en: '`UnicodeDecodeError` occurs whenever byte strings cannot decode to Unicode
    code points. To avoid this exception, we can pass `replace`, `backslashreplace`,
    or `ignore` to the error argument in `decode` the as shown here:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 每当字节字符串无法解码为Unicode代码点时，就会发生`UnicodeDecodeError`。为了避免这种异常，我们可以在`decode`的`error`参数中传递`replace`、`backslashreplace`或`ignore`，如下所示：
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we learned about regular expressions, using which we can define
    the rules for a set of strings that we want to match. We learned about the four
    functions of the `re` module: `match()`, `search()`, `findall()`, and `sub()`.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了正则表达式，使用它可以定义一组我们想要匹配的字符串的规则。我们学习了`re`模块的四个函数：`match()`、`search()`、`findall()`和`sub()`。
- en: We learned about the `textwrap` module, which is used for formatting and wrapping
    plain text. We also learned about the `wrap()`, `fill()`, `dedent()`, `indent()`,
    and `shorten()` functions of the `textwrap` module. Finally, we learned about
    the Unicode characters and how to print the Unicode strings in Python.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了`textwrap`模块，它用于格式化和包装纯文本。我们还学习了`textwrap`模块的`wrap()`、`fill()`、`dedent()`、`indent()`和`shorten()`函数。最后，我们学习了Unicode字符以及如何在Python中打印Unicode字符串。
- en: In the next chapter, we are going to learn about standard documenting and reporting
    of information using Python.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Python对信息进行标准文档化和报告。
- en: Questions
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a regular expression in Python?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中的正则表达式是什么？
- en: Write a Python program to check that a string contains only a certain set of
    characters (in this case, `a–z`, `A–Z`, and `0–9`).
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个Python程序来检查一个字符串是否只包含某个字符集（在本例中为`a–z`、`A–Z`和`0–9`）。
- en: Which module in Python supports regular expressions?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中的哪个模块支持正则表达式？
- en: a) `re`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: a) `re`
- en: b) `regex`
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: b) `regex`
- en: c) `pyregex`
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: c) `pyregex`
- en: d) None of the above
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上都不是
- en: What does the `re.match` function do?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`re.match`函数的作用是什么？'
- en: a) Matches a pattern at the start of the string
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: a) 在字符串的开头匹配模式
- en: b) Matches a pattern at any position in the string
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: b) 在字符串的任何位置匹配模式
- en: c) Such a function does not exist
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: c) 这样的函数不存在
- en: d) None of the above
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上都不是
- en: What is the output of the following?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下的输出是什么？
- en: 'Sentence: `"we are humans"`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 句子："we are humans"
- en: 'Matched: `re.match(r''(.*) (.*?) (.*)''`, `sentence)`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配：`re.match(r'(.*) (.*?) (.*)'`, `sentence)`
- en: '`print(matched.group())`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`print(matched.group())`'
- en: a) `('we', 'are', 'humans')`
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: a) `('we', 'are', 'humans')`
- en: b) `(we, are, humans)`
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: b) `(we, are, humans)`
- en: c) `('we', 'humans')`
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: c) `('we', 'humans')`
- en: d) `'we are humans'`
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: d) `'we are humans'`
- en: Further reading
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Regular expressions: [https://docs.python.org/3.2/library/re.html](https://docs.python.org/3.2/library/re.html)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式：[https://docs.python.org/3.2/library/re.html](https://docs.python.org/3.2/library/re.html)
- en: 'Textwrap documentation: [https://docs.python.org/3/library/textwrap.html](https://docs.python.org/3/library/textwrap.html)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Textwrap文档：[https://docs.python.org/3/library/textwrap.html](https://docs.python.org/3/library/textwrap.html)
- en: 'Unicode documentation: [https://docs.python.org/3/howto/unicode.html](https://docs.python.org/3/howto/unicode.html)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unicode文档：[https://docs.python.org/3/howto/unicode.html](https://docs.python.org/3/howto/unicode.html)
