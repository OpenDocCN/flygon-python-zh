- en: Handling Files, Directories, and Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文件，目录和数据
- en: The system administrator performs tasks such as handling various files, directories,
    and data. In this chapter, we will learn about the `os` module. The `os` module
    provides the functionality to interact with the operating system. Python programmers
    can easily use this `os` module for performing file and directory operations.
    The `os` module provides tools for programmers that deal with files, paths, directories,
    and data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 系统管理员执行处理各种文件，目录和数据等任务。在本章中，我们将学习`os`模块。`os`模块提供了与操作系统交互的功能。Python程序员可以轻松使用此`os`模块执行文件和目录操作。`os`模块为处理文件，路径，目录和数据的程序员提供了工具。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Using the `os` module to work with directories
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用os模块处理目录
- en: Copying, moving, renaming, and deleting data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制，移动，重命名和删除数据
- en: Working with paths, directories, and files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理路径，目录和文件
- en: Comparing data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较数据
- en: Merging data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并数据
- en: Pattern matching files and directories
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式匹配文件和目录
- en: 'Metadata: data about data'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据：关于数据的数据
- en: Compressing and restoring
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩和恢复
- en: Using a `tarfile` module to create TAR archives
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`tarfile`模块创建TAR存档
- en: Using a `tarfile` module to examine the contents of TAR files
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`tarfile`模块检查TAR文件的内容
- en: Using the os module to work with directories
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用os模块处理目录
- en: A directory or folder is a collection of files and sub-directories. The `os`
    module provides various functions that allow us to interact with the operating
    system. In this section, we will learn about some functions that can be used while
    working with directories.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目录是文件和子目录的集合。`os`模块提供了各种函数，允许我们与操作系统交互。在本节中，我们将学习一些在处理目录时可以使用的函数。
- en: Get the working directory
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取工作目录
- en: 'To start working with directories, first, we will get the name of our current
    working directory. The `os` module has a `getcwd()` function, using which we can
    get the current working directory. Start the `python3` console and enter the following
    commands to get the directory name:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始处理目录，首先我们将获取当前工作目录的名称。`os`模块有一个`getcwd()`函数，使用它我们可以获取当前工作目录。启动`python3`控制台并输入以下命令以获取目录名称：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Changing the directory
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改目录
- en: 'Using the `os` module, we can change the current working directory. For that,
    the `os` module has the `chdir()` function, for example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`os`模块，我们可以更改当前工作目录。为此，`os`模块具有`chdir()`函数，例如：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Listing files and directories
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出文件和目录
- en: 'Listing the directory contents is easy in Python. We are going to use the `os`
    module that has a function named `listdir()`, which will return the names of files
    and directories from your working directory:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中列出目录内容很容易。我们将使用`os`模块，该模块具有一个名为`listdir()`的函数，该函数将返回工作目录中文件和目录的名称：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Renaming a directory
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名目录
- en: 'The `os` module in Python has a `rename()` function that helps in changing
    the name of the directory:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的`os`模块具有一个`rename()`函数，可帮助更改目录的名称：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Copying, moving, renaming, and deleting data
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制，移动，重命名和删除数据
- en: We will be learning about the four basic operations that system administrators
    perform on data, which are copy, move, rename, and delete. Python has a built-in
    module called `shutil`, which can perform these tasks. Using the `shutil` module,
    we can perform high-level operations on the data as well. To use the `shutil`
    module in your program, just write the `import shutil` import statement. The `shutil`
    module offers a few functions that support file copy and remove operations. Let's
    learn about these operations one by one.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习系统管理员在数据上执行的四种基本操作，即复制，移动，重命名和删除。Python有一个名为`shutil`的内置模块，可以执行这些任务。使用`shutil`模块，我们还可以对数据执行高级操作。要在程序中使用`shutil`模块，只需编写`import
    shutil`导入语句。`shutil`模块提供了一些支持文件复制和删除操作的函数。让我们逐一了解这些操作。
- en: Copying the data
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制数据
- en: In this section, we will see how we can copy files using the `shutil` module.
    For that, first, we will create a `hello.py` file and write some text in it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用`shutil`模块复制文件。为此，首先我们将创建一个`hello.py`文件并在其中写入一些文本。
- en: '`hello.py`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`hello.py`：'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we will write the code for copying into the `shutil_copy_example.py` script.
    Write the following content in it:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写将内容复制到`shutil_copy_example.py`脚本的代码。在其中写入以下内容：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the script as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Check the presence of the `welcome.py` script and you will find the contents
    of `hello.py` are copied successfully in `welcome.py`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`welcome.py`脚本的存在，并且您将发现`hello.py`的内容已成功复制到`welcome.py`中。
- en: Moving the data
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动数据
- en: 'Here, we will see how we can move the data. We will use `shutil.move()` for
    this purpose. `shutil.move(source, destination)` will move the file from source
    to destination. Now, we will create a `shutil_move_example.py` script and write
    the following content in it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看到如何移动数据。我们将使用`shutil.move()`来实现这个目的。`shutil.move(source, destination)`将文件从源移动到目标。现在，我们将创建一个`shutil_move_example.py`脚本，并在其中写入以下内容：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the script as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this script, our file to move is `sample.txt`, which is in the `/home/student`
    directory. `/home/student` is our source folder and `/home/student/Desktop` is
    our destination folder. So, after running the script, `sample.txt` will be moved
    from `/home/student` to the `/home/student/Desktop` directory.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在此脚本中，我们要移动的文件是`sample.txt`，它位于`/home/student`目录中。`/home/student`是我们的源文件夹，`/home/student/Desktop`是我们的目标文件夹。因此，在运行脚本后，`sample.txt`将从`/home/student`移动到`/home/student/Desktop`目录。
- en: Renaming data
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名数据
- en: 'In the previous section, we learned how we can use `shutil.move()` to move
    files from source to destination. Using `shutil.move()`, files can be renamed.
    Create a `shutil_rename_example.py` script and write the following content in
    it:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何使用`shutil.move()`将文件从源移动到目标。使用`shutil.move()`，文件可以被重命名。创建一个`shutil_rename_example.py`脚本，并在其中写入以下内容：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the script as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: Now, check that your filename will be renamed `hello_renamed.py`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查您的文件名是否已重命名为`hello_renamed.py`。
- en: Deleting data
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除数据
- en: We will learn how to delete files and folders using the `os` module in Python.
    The `remove()` method of the `os` module will delete a file. If you try to remove
    a directory using this method, it will give you an `OSError`. To remove directories,
    use `rmdir()`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何使用Python的`os`模块删除文件和文件夹。`os`模块的`remove()`方法将删除一个文件。如果您尝试使用此方法删除目录，它将给出一个`OSError`。要删除目录，请使用`rmdir()`。
- en: 'Now, create a `os_remove_file_directory.py` script and write the following
    content in it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个`os_remove_file_directory.py`脚本，并在其中写入以下内容：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the script as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Working with paths
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理路径
- en: Now, we are going to learn about `os.path()`. It is used for path manipulations.
    In this section, we will look at some of the functions that the `os` module offers
    for pathnames.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习关于`os.path()`的知识。它用于路径操作。在本节中，我们将看一些`os`模块为路径名提供的函数。
- en: 'Start the `python3` console:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 启动`python3`控制台：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`os.path.absname(path)`: Returns the absolute version of your pathname.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.path.absname(path)`: 返回路径名的绝对版本。'
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`os.path.dirname(path)`: Returns the directory name of your path.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.path.dirname(path)`: 返回路径的目录名。'
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`os.path.basename(path)`: Returns the base name of your path.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.path.basename(path)`: 返回路径的基本名称。'
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`os.path.exists(path)`: Returns `True` if path refers to the existing path.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.path.exists(path)`: 如果路径指向现有路径，则返回`True`。'
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`os.path.getsize(path)`: Returns the size of the entered path in bytes.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.path.getsize(path)`: 返回以字节为单位的输入路径的大小。'
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`os.path.isfile(path)`: Checks whether the entered path is an existing file
    or not. Returns `True` if it is a file.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.path.isfile(path)`: 检查输入的路径是否为现有文件。如果是文件，则返回`True`。'
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`os.path.isdir(path)`: Checks whether the entered path is an existing directory
    or not. Returns `True` if it is a directory.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os.path.isdir(path)`: 检查输入的路径是否为现有目录。如果是目录，则返回`True`。'
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Comparing data
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较数据
- en: Here, we are going to learn about how to compare data in Python. We will use
    a `pandas` module for this purpose.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习如何在Python中比较数据。我们将使用`pandas`模块来实现这个目的。
- en: Pandas is an open source data analysis library that provides data structures
    and data analysis tools that are easy to use. It makes importing and analyzing
    data easier.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas是一个开源的数据分析库，提供了易于使用的数据结构和数据分析工具。它使导入和分析数据变得更容易。
- en: 'Before starting with the example, make sure you have `pandas` installed on
    your system. You can install pandas as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始示例之前，请确保您的系统上已安装了`pandas`。您可以按照以下方式安装pandas：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We will study an example of comparing data using pandas. Initially, we will
    create two `csv` files: `student1.csv` and `student2.csv`. We will compare the
    data of these two `csv` files and in output it should return the comparison. Create
    two `csv` files as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习使用pandas比较数据的一个例子。首先，我们将创建两个`csv`文件：`student1.csv`和`student2.csv`。我们将比较这两个`csv`文件的数据，并且输出应该返回比较结果。创建两个`csv`文件如下：
- en: 'Create the `student1.csv` file content as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`student1.csv`文件内容如下：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the `student2.csv` file content as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`student2.csv`文件内容如下：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we will create a `compare_data.py` script and write the following content
    in it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个`compare_data.py`脚本，并在其中写入以下内容：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the script as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the preceding example, we are comparing the data between the two `csv` files:
    `student1.csv` and `student2.csv`. We first converted our dataframes (`df1`, `df2`)
    into sets (`s1`, `s2`). Then, we used the `symmetric_difference()` set. So, it
    will check the symmetric difference between `s1` and `s2` and then we will print
    the result.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们正在比较两个`csv`文件之间的数据：`student1.csv`和`student2.csv`。我们首先将我们的数据帧(`df1`，`df2`)转换为集合(`s1`，`s2`)。然后，我们使用`symmetric_difference()`集合。因此，它将检查`s1`和`s2`之间的对称差异，然后我们将打印结果。
- en: Merging data
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并数据
- en: We are going to learn about how to merge data in Python. For that, we are going
    to use Python's pandas library. To merge the data, we are going to use two `csv`
    files that already created in the previous section, `student1.csv` and `student2.csv`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何在Python中合并数据。为此，我们将使用Python的pandas库。为了合并数据，我们将使用在上一节中已创建的两个`csv`文件，`student1.csv`和`student2.csv`。
- en: 'Now, create a `merge_data.py` script and write the following code in it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个`merge_data.py`脚本，并在其中写入以下代码：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the script as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式运行脚本：
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Pattern matching files and directories
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式匹配文件和目录
- en: In this section, we will learn about pattern matching for files and directories.
    Python has the `glob` module, which is used to find the names of files and directories
    that match specific patterns.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关文件和目录的模式匹配。Python有`glob`模块，用于查找与特定模式匹配的文件和目录的名称。
- en: 'Now, we will look at an example. First, create a `pattern_match.py` script and
    write the following content in it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一个例子。首先，创建一个`pattern_match.py`脚本，并在其中写入以下内容：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the script as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the previous example, we used Python's `glob` module for pattern matching.
    `glob` (pathname) will return the list of names that matches with the pathname.
    In out script, we have passed three pathnames in three different `glob()` functions.
    In the first `glob()`, we passed the pathname as `*.txt;` this will return all
    the filenames with `.txt` extensions. In the second `glob()`, we passed `[0-9].txt`;
    this will return filenames that start with a digit. In the third `glob()`, we
    passed `**/*.txt`, which will return filenames as well as directory names. It
    will also return the filenames from those directories. In the fourth `glob()`,
    we passed `**/`, which will return directory names only.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们使用了Python的`glob`模块进行模式匹配。`glob`(路径名)将返回与路径名匹配的名称列表。在我们的脚本中，我们在三个不同的`glob()`函数中传递了三个路径名。在第一个`glob()`中，我们传递了路径名`*.txt;`，这将返回所有具有`.txt`扩展名的文件名。在第二个`glob()`中，我们传递了`[0-9].txt`，这将返回以数字开头的文件名。在第三个`glob()`中，我们传递了`**/*.txt`，它将返回文件名以及目录名。它还将返回这些目录中的文件名。在第四个`glob()`中，我们传递了`**/`，它将仅返回目录名。
- en: 'Metadata: data about data'
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元数据：关于数据的数据
- en: In this section, we are going learn about the `pyPdf` module, which helps in
    extracting the metadata from a `pdf` file. But first, what is metadata? Metadata
    is data about data. Metadata is structured information that describes primary
    data. Metadata is a summary of that data. It contains the basic information regarding
    your actual data. It helps in finding a particular instance of your data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`pyPdf`模块，该模块有助于从`pdf`文件中提取元数据。但首先，什么是元数据？元数据是关于数据的数据。元数据是描述主要数据的结构化信息。元数据是数据的摘要。它包含有关实际数据的基本信息。它有助于找到数据的特定实例。
- en: Make sure you have the `pdf` file present in your directory from which you want
    to extract the information.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的目录中有`pdf`文件，您想从中提取信息。
- en: 'First, we have to install the `pyPdf` module, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须安装`pyPdf`模块，如下所示：
- en: '[PRE30]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we will write a `metadata_example.py` script and we will see how we get
    the metadata information from it. We are going to write this script in Python
    2:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个`metadata_example.py`脚本，并查看如何从中获取元数据信息。我们将在Python 2中编写此脚本：
- en: '[PRE31]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the script as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE32]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding script, we used the `pyPdf` module of Python 2\. First, we
    created a `file_name` variable that stores the path of our `pdf`. Using `PdfFileReader()`,
    data gets read. The `pdf_data` variable will hold the information about your `pdf`.
    Lastly, we wrote a for loop to get the metadata information.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，我们使用了Python 2的`pyPdf`模块。首先，我们创建了一个`file_name`变量，用于存储我们的`pdf`的路径。使用`PdfFileReader()`，数据被读取。`pdf_data`变量将保存有关您的`pdf`的信息。最后，我们编写了一个for循环来获取元数据信息。
- en: Compressing and restoring
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩和恢复
- en: 'In this section, we are going to learn about the `make_archive()` function
    of the `shutil` module, which will compress an entire directory. For that, we
    are going to write a `compress_a_directory.py` script and write the following
    content in it:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`shutil`模块的`make_archive()`函数，该函数将压缩整个目录。为此，我们将编写一个`compress_a_directory.py`脚本，并在其中写入以下内容：
- en: '[PRE33]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Run the script as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE34]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the preceding script, in `shutil.make_archive()` function, we passed the
    first argument as a name to our compressed file. `zip` will be our compression
    technique. And the, `work/` will be the name of the directory that we want to
    compress.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，在`shutil.make_archive()`函数中，我们将第一个参数作为我们压缩文件的名称。`zip`将是我们的压缩技术。然后，`work/`将是我们要压缩的目录的名称。
- en: 'Now, to restore the data from the compressed file, we are going to use the `unpack_archive()`
    function from the `shutil` module. Create an `unzip_a_directory.py` script and
    write the following content in it:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要从压缩文件中恢复数据，我们将使用`shutil`模块的`unpack_archive()`函数。创建一个`unzip_a_directory.py`脚本，并在其中写入以下内容：
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the script as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE36]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, check your directory. You will get all the contents after unzipping the
    directory.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查您的目录。解压目录后，您将获得所有内容。
- en: Using the tarfile module to create TAR archives
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用tarfile模块创建TAR存档
- en: This section will help you to learn about how we can create tar archives using
    Python's `tarfile` module.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将帮助您了解如何使用Python的`tarfile`模块创建tar存档。
- en: 'The `tarfile` module is used to read and write tar archives using `gzip`, `bz2`
    compression techniques. Make sure the necessary files and directories are present.
    Now, create a `tarfile_example.py` script and write the following content in it:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`tarfile`模块用于使用`gzip`、`bz2`压缩技术读取和写入tar存档。确保必要的文件和目录存在。现在，创建一个`tarfile_example.py`脚本，并在其中写入以下内容：'
- en: '[PRE37]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run the script as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE38]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Now, check your present working directory; you will see `work.tar.gz` has been
    created.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查您当前的工作目录；您会看到`work.tar.gz`已经被创建。
- en: Using a tarfile module to examine the contents of TAR files
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用tarfile模块检查TAR文件的内容
- en: In this section, we will learn about how we can examine the contents of a created
    tar archive without actually extracting that tar file. We will do it using Python's
    `tarfile` module.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在不实际提取tar文件的情况下检查已创建的tar存档的内容。我们将使用Python的`tarfile`模块进行操作。
- en: 'Create a `examine_tar_file_content.py` script and write the following content
    in it:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`examine_tar_file_content.py`脚本，并在其中写入以下内容：
- en: '[PRE39]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run the script as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式运行脚本：
- en: '[PRE40]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In previous example, we used the `tarfile` module to examine the contents of
    the created tar file. We used the `getnames()` function to read the data.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的示例中，我们使用了`tarfile`模块来检查创建的tar文件的内容。我们使用了`getnames()`函数来读取数据。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about Python scripts for handling files and directories.
    We also learned how to use the `os` module to work with directories. We learned
    how to copy, move, rename, and delete files and directories. We also learned about
    the pandas module in Python, which is used in comparing and merging data. We learned
    about creating tar files and reading the contents of tar files using the `tarfile`
    module. We also did pattern matching while searching files and directories.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了处理文件和目录的Python脚本。我们还学习了如何使用`os`模块处理目录。我们学习了如何复制、移动、重命名和删除文件和目录。我们还学习了Python中的pandas模块，用于比较和合并数据。我们学习了如何创建tar文件并使用`tarfile`模块读取tar文件的内容。我们还在搜索文件和目录时进行了模式匹配。
- en: In the next chapter, we will learn about `tar` archives and ZIP creations.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习`tar`存档和ZIP创建。
- en: Questions
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How to deal with different path regardless of different OS (Windows, Llinux)?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何处理不同路径，而不考虑不同的操作系统（Windows，Llinux）？
- en: What are different arguments available for `print()` in python?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中`print()`的不同参数是什么？
- en: What is the use of `dir()` keyword in python?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python中，`dir()`关键字的用途是什么？
- en: What is dataframe, series in `pandas` ?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pandas`中的数据框，系列是什么？'
- en: What is list comprehension?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是列表推导？
- en: Can we do set comprehension and dictionary comprehension? If yes how?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用集合推导和字典推导吗？如果可以，如何操作？
- en: How to print first/last `N` rows using pandas dataframe?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用pandas dataframe打印第一个/最后一个`N`行？
- en: Write a program using list comprehension for printing the odd numbers
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用列表推导编写一个打印奇数的程序
- en: What is the type of `sys.argv`?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sys.argv` 的类型是什么？'
- en: a) set
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a) 集合
- en: b) list
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b) 列表
- en: c) tuple
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c) 元组
- en: d) string
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d) 字符串
- en: Further reading
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '`pathlib` documentation: [https://docs.python.org/3/library/pathlib.html](https://docs.python.org/3/library/pathlib.html)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathlib` 文档： [https://docs.python.org/3/library/pathlib.html](https://docs.python.org/3/library/pathlib.html)'
- en: '[`pandas` documentation: ](https://pandas.pydata.org/pandas-docs/stable/)[https://pandas.pydata.org/pandas-docs/stable/](https://pandas.pydata.org/pandas-docs/stable/)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pandas` 文档：](https://pandas.pydata.org/pandas-docs/stable/)[https://pandas.pydata.org/pandas-docs/stable/](https://pandas.pydata.org/pandas-docs/stable/)'
- en: '`os` module documentation: [https://docs.python.org/3/library/os.html](https://docs.python.org/3/library/os.html)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os` 模块文档：[https://docs.python.org/3/library/os.html](https://docs.python.org/3/library/os.html)'
