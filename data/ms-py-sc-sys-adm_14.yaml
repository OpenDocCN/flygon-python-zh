- en: Working with Apache and Other Log Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache和其他日志文件
- en: In this chapter, you are going to learn about log files. You will learn how
    to parse log files. You will also learn why you need to write exceptions in your
    programs. The different ways to parse different files are also important. You
    will also learn about `ErrorLog` and `AccessLog`. Finally, you will learn about
    how to parse other log files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习有关日志文件的知识。您将学习如何解析日志文件。您还将了解为什么需要在程序中编写异常。解析不同文件的不同方法也很重要。您还将了解`ErrorLog`和`AccessLog`。最后，您将学习如何解析其他日志文件。
- en: 'In this chapter, you will learn the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Parsing complex log files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析复杂的日志文件
- en: The need for exceptions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常的需要
- en: Tricks for parsing different files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析不同文件的技巧
- en: Error log
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误日志
- en: Access log
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问日志
- en: Parsing other log files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析其他日志文件
- en: Parsing complex log files
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析复杂的日志文件
- en: First, we are going to examine the concept of parsing complex log files. Parsing
    log files is a challenging task because most log files are in plain text format,
    and that format does not follow any rules. Those files may be modified without
    showing any warning. The user can decide what kind of data they are going to store
    in a log file and in which format, as well as who is going to develop the application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将研究解析复杂日志文件的概念。解析日志文件是一项具有挑战性的任务，因为大多数日志文件都是以纯文本格式，而且该格式没有遵循任何规则。这些文件可能会在不显示任何警告的情况下进行修改。用户可以决定他们将在日志文件中存储什么类型的数据以及以何种格式存储，以及谁将开发应用程序。
- en: Before moving on to an example of log parsing or changing configurations in
    a log file, first we have to understand what we have got in a typical log file.
    According to that we have to decide, we will learn how to manipulate or get the
    information from it. We can also look for common terms in the log file so that
    we can use those common terms to fetch data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行日志解析示例或更改日志文件中的配置之前，我们首先必须了解典型日志文件中包含什么。根据这一点，我们必须决定我们将学习如何操作或从中获取信息。我们还可以在日志文件中查找常见术语，以便我们可以使用这些常见术语来获取数据。
- en: Generally, you will see that most of the content generated in a log file is
    by the application containers and also either the entries of system access state
    (in other words, logging off and logging on) or the entries of a system accessed
    over a network. Therefore, when your system is accessed over a network remotely,
    the entry of such a remote connection will be saved into a log file. Let's take
    an example for such condition. We already have a file named `access.log`  with
    some log information.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会发现日志文件中生成的大部分内容是由应用程序容器生成的，还有系统访问状态的条目（换句话说，注销和登录）或通过网络访问的系统的条目。因此，当您的系统通过网络远程访问时，这种远程连接的条目将保存在日志文件中。让我们以这种情况为例。我们已经有一个名为`access.log`的文件，其中包含一些日志信息。
- en: 'So, let''s create a `read_apache_log.py` script and write the following content
    in it:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个名为`read_apache_log.py`的脚本，并在其中写入以下内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, we created one `read_apache_log` function to read
    Apache log files. Within that, we opened a log file and then printed the log entries
    in it. After defining the `read_apache_log()` function, we called it in the main
    function with the Apache log file's name. In our case, the Apache log file is
    named `access.log`**.**
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个`read_apache_log`函数来读取Apache日志文件。在其中，我们打开了一个日志文件，然后打印了其中的日志条目。在定义了`read_apache_log()`函数之后，我们在主函数中调用了它，并传入了Apache日志文件的名称。在我们的案例中，Apache日志文件的名称是`access.log`。
- en: 'After reading log entries in the `access.log` file, now we are going to parse
    the IP addresses from the log file. For that, create a `parse_ip_address.py` script and
    write the following content in it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在`access.log`文件中读取日志条目后，现在我们将从日志文件中解析IP地址。为此，请创建一个名为`parse_ip_address.py`的脚本，并在其中写入以下内容：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, we created the Apache log parser to determine some
    specific IP addresses with their number of requests on your server. So, it is
    clear that we don't want entire log entries in the Apache log file, we just want
    to fetch IP addresses from the log file. To do that, we have to define a pattern
    to search IP addresses, and we can do that by using regular expressions. Because
    of that, we imported the `re` module. Then we imported the `Collection` module
    as the alternative to Python's built-in datatypes, `dict`, `list`, `set`, and
    `tuple`. This module has specialized container datatypes. After importing the
    required modules, we write a pattern using a regular expression to match specific
    conditions to map IP addresses from the log file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了Apache日志解析器来确定服务器上一些特定IP地址及其请求次数。因此，很明显我们不想要Apache日志文件中的整个日志条目，我们只想从日志文件中获取IP地址。为此，我们必须定义一个模式来搜索IP地址，我们可以通过使用正则表达式来实现。因此，我们导入了`re`模块。然后我们导入了`Collection`模块作为Python内置数据类型`dict`、`list`、`set`和`tuple`的替代品。该模块具有专门的容器数据类型。在导入所需的模块后，我们使用正则表达式编写了一个模式，以匹配从日志文件中映射IP地址的特定条件。
- en: In that matching pattern, `\d` can be any numeric digit between `0` to `9` and
    `\r` stands for raw string. Then, we opened the Apache log file named `access.log`
    and read it. After that, we applied a regular expression condition on the Apache log
    file, then uses the `counter` function of `collection` module to get a count of
    each IP address that we are fetching on the basis of the `re` conditions. Finally,
    we printed the result of the operation, as we can see in the output.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在匹配模式中，`\d`可以是`0`到`9`之间的任何数字，`\r`代表原始字符串。然后，我们打开名为`access.log`的Apache日志文件并读取它。之后，我们在Apache日志文件上应用了正则表达式条件，然后使用`collection`模块的`counter`函数来获取我们根据`re`条件获取的每个IP地址的计数。最后，我们打印了操作的结果，如输出中所示。
- en: The need for exceptions
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常的需要
- en: In this section, we are going to look at the need for exceptions in Python programming.
    The normal program flow consists of events and signals. The term exception revels
    that there is something wrong with your program. These exceptions can be of any
    type, such as zero division error, import error, attribute error, or assertion
    error. These exceptions will occur whenever the specified functions cannot perform
    their tasks properly. The moment the exception occurs the program execution stops
    and the interpreter will proceed with the exception handling process. The exception
    handling process consists of writing your code in  a `try…except` block. The reason
    the exception handling is that something unexpected happened in your program.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看看Python编程中异常的需要。正常的程序流程包括事件和信号。异常一词表明您的程序出了问题。这些异常可以是任何类型，比如零除错误、导入错误、属性错误或断言错误。这些异常会在指定的函数无法正常执行其任务时发生。一旦异常发生，程序执行就会停止，解释器将继续进行异常处理过程。异常处理过程包括在`try…except`块中编写代码。异常处理的原因是您的程序发生了意外情况。
- en: Analyzing exceptions
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析异常
- en: In this section, we are going to understand analyzing exceptions. Every exception
    that occurs must be handled. Your log files should also contain few exceptions.
    If you are getting similar types of exceptions a number of times, then your program
    has some issue and you should make the necessary changes as soon as possible.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将了解分析异常。每个发生的异常都必须被处理。您的日志文件也应该包含一些异常。如果您多次遇到类似类型的异常，那么您的程序存在一些问题，您应该尽快进行必要的更改。
- en: 'Consider the following example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After running the program, you get the output as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序后，您将得到以下输出：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we are trying to read a file that is not present in our directory
    and as a result it shows an error. So, from the error we can analyze what kind
    of solution we have to provide. To handle such a case, we can use an exception
    handling technique. So, let's see an example of handling errors using an exception
    handling technique.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们试图读取一个在我们目录中不存在的文件，结果显示了一个错误。因此，通过错误我们可以分析我们需要提供什么样的解决方案。为了处理这种情况，我们可以使用异常处理技术。所以，让我们看一个使用异常处理技术处理错误的例子。
- en: 'Consider the following example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After running the program, you get the output as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序后，您将得到以下输出：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we are trying to read a file that is not present in our directory. But,
    as we used a file exception technique in this example, we put our code in `try:`
    and `except:` blocks. So, if any error or exception occurs in a `try:` block,
    it will skip that error and execute the code in an `except:` block. In our case,
    we just put a `print` statement in an `except:` block. Therefore, after running
    the script, when the exception occurs in the `try:` block, it skips that exception
    and executes the code in the `except:` block. So, the `print` statement in the
    `except` block gets executed, as we can see in the previous output.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们试图读取一个在我们目录中不存在的文件。但是，在这个例子中，我们使用了文件异常技术，将我们的代码放在`try:`和`except:`块中。因此，如果在`try:`块中发生任何错误或异常，它将跳过该错误并执行`except:`块中的代码。在我们的情况下，我们只在`except:`块中放置了一个`print`语句。因此，在运行脚本后，当异常发生在`try:`块中时，它会跳过该异常并执行`except:`块中的代码。因此，在`except`块中的`print`语句会被执行，正如我们在之前的输出中所看到的。
- en: Tricks for parsing different files
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析不同文件的技巧
- en: 'In this section, we are going to learn about the tricks to use to parse different
    files. Before we start with the actual parsing, we must read the data first. You
    need to understand where you will be getting all the data from. But, you must
    also remember all the log files come in different sizes. To make your task simpler,
    here is a list to follow:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习解析不同文件时使用的技巧。在开始实际解析之前，我们必须先读取数据。您需要了解您将从哪里获取所有数据。但是，您也必须记住所有的日志文件大小都不同。为了简化您的任务，这里有一个要遵循的清单：
- en: Remember the log files can be either plain text or compressed.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请记住，日志文件可以是纯文本或压缩文件。
- en: All the Log files have a `.log` extension for a plain text file and `log.bz2`
    for a `bzip2` file.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有日志文件都有一个`.log`扩展名的纯文本文件和一个`log.bz2`扩展名的`bzip2`文件。
- en: You should process the set of files based on their name.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该根据文件名处理文件集。
- en: All the parsing of log files must be combined into a single report.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有日志文件的解析必须合并成一个报告。
- en: The tool you are using must operate on all files, from a specified directory
    or from different directories. Log files from all sub-directories should also
    be included.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您使用的工具必须能够处理所有文件，无论是来自指定目录还是来自不同目录。所有子目录中的日志文件也应包括在内。
- en: Error log
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误日志
- en: 'In this section, we are going to learn about the error log. The related directives
    for the error log are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将学习错误日志。错误日志的相关指令如下：
- en: '`ErrorLog`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ErrorLog`'
- en: '`LogLevel`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogLevel`'
- en: The location and the name of server log files are set by the `ErrorLog` directive.
    It is the most important log file. The Apache `httpd` sends the information in
    this and also records produced while processing. Whenever a problem occurs with
    the server, this will be the first place to look. It contains the details of the
    things that went wrong and the process of fixing it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器日志文件的位置和名称由`ErrorLog`指令设置。这是最重要的日志文件。Apache `httpd`发送的信息和处理过程中产生的记录都在其中。每当服务器出现问题时，这将是第一个需要查看的地方。它包含了出现问题的细节以及修复问题的过程。
- en: The error log is written into a file. On Unix systems, the errors can be sent
    to `syslog` by the server or you can pipe them to your program. The first thing
    in that log entry is the date and time of the message. The second entry records
    the severity of the error.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志被写入文件中。在Unix系统上，服务器可以将错误发送到`syslog`，或者您可以将它们传送到您的程序中。日志条目中的第一件事是消息的日期和时间。第二个条目记录了错误的严重程度。
- en: The `LogLevel` directive handles the errors sent to the error log by restricting
    the severity level. The third entry contains the information about the client
    who generated the error. That information will be the IP address. The next will
    be the message itself. It contains the information that the server has been configured
    to deny the client access. The server will then report the filesystem path of
    the requested document.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`LogLevel`指令通过限制严重级别处理发送到错误日志的错误。第三个条目包含生成错误的客户端的信息。该信息将是IP地址。接下来是消息本身。它包含了服务器已配置为拒绝客户端访问的信息。服务器将报告所请求文档的文件系统路径。'
- en: The various types of message can appear in the error log files. The error log
    file also contains the debugging output from CGI scripts. Whatever the information
    is written into the `stderr` will be directly copied to the error log.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志文件中可能出现各种类型的消息。错误日志文件还包含来自CGI脚本的调试输出。无论信息写入`stderr`，都将直接复制到错误日志中。
- en: 'The error log file is not customizable. The entries in the error log that deals
    with the requests will have corresponding entries in the access log. You should
    always monitor the error log for the problems during testing. On Unix systems,
    you can run the following command to accomplish this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 错误日志文件是不可定制的。处理请求的错误日志中的条目将在访问日志中有相应的条目。您应该始终监视错误日志以解决测试期间的问题。在Unix系统上，您可以运行以下命令来完成这个任务：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Access log
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问日志
- en: In this section, you are going to learn about the access log. The server access
    log will record all the requests processed by the server. The `CustomLog` directive
    controls the location and content of the access log. The `LogFormat` directive
    is used to select the contents of the logs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习访问日志。服务器访问日志将记录服务器处理的所有请求。`CustomLog`指令控制访问日志的位置和内容。`LogFormat`指令用于选择日志的内容。
- en: Storing the information in the access log means starting log management. The
    next step will be analyzing the information that helps us get useful statistics.
    The Apache `httpd` has various versions, and these versions have used some other
    modules and directives to control access logging. You can configure the format
    of the access log. This format is specified using a format string.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将信息存储在访问日志中意味着开始日志管理。下一步将是分析帮助我们获得有用统计信息的信息。Apache `httpd`有各种版本，这些版本使用了一些其他模块和指令来控制访问日志记录。您可以配置访问日志的格式。这个格式是使用格式字符串指定的。
- en: Common log format
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用日志格式
- en: 'In this section, we are going to learn about common log format. The following
    syntax shows the configuration for the access log:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习通用日志格式。以下语法显示了访问日志的配置：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This string will define a nickname and then it will associate that nickname
    with the log format string. The log format string is made of percent directives.
    Each percent directive tells the server to log specific information. This string
    may contain literal characters. Those characters will get copied directly in log
    output.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符串将定义一个昵称，然后将该昵称与日志格式字符串关联起来。日志格式字符串由百分比指令组成。每个百分比指令告诉服务器记录特定的信息。这个字符串可能包含文字字符。这些字符将直接复制到日志输出中。
- en: The `CustomLog` directive will set up a new log file with the help of a defined *nickname*.
    The filename for the access log is relative to the `ServerRoot`, unless it begins
    with a slash.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`CustomLog`指令将使用定义的*昵称*设置一个新的日志文件。访问日志的文件名相对于`ServerRoot`，除非以斜杠开头。'
- en: The configuration we stated previously will write the log entries in a **Common
    Log Format** (**CLF**). This is a standard format and can be produced by many
    different web servers. Many log analysis programs read this log format.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到的配置将以**通用日志格式**（**CLF**）写入日志条目。这是一种标准格式，可以由许多不同的Web服务器生成。许多日志分析程序读取这种日志格式。
- en: 'Now, we will see what each percent directive means:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到每个百分比指令的含义：
- en: '`%h`:This shows us the IP address of the client who made the request to the
    web server. If `HostnameLookups` is on, then the server will determine the hostname
    and will log it in place of the IP address.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%h`：这显示了向Web服务器发出请求的客户端的IP地址。如果`HostnameLookups`打开，那么服务器将确定主机名并将其记录在IP地址的位置。'
- en: '`%l`: This term is used to indicate that the information is not available for
    a requested piece.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%l`：这个术语用于指示所请求的信息不可用。'
- en: '`%u`:This is the user ID of the person who has requested the document. The
    same value is provided to CGI scripts in the `REMOTE_USER` environment variable.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%u`：这是请求文档的用户ID。相同的值将在`REMOTE_USER`环境变量中提供给CGI脚本。'
- en: '`%t`:This term is used to detect the time at which the processing request of
    server is finished. The format is as follows:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%t`：这个术语用于检测服务器处理请求完成的时间。格式如下：'
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For the `day` parameter, it takes two digits. For `month`, we have to define
    three letters. For year, as the year has four characters, we have to take four
    digits. Now after `day`, `month`, and `year`, we have to take two digits each
    for `hour`, `minute`, and `seconds`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`day`参数，需要两位数字。对于`month`，我们必须定义三个字母。对于年份，由于年份有四个字符，我们必须取四位数字。现在，在`day`、`month`和`year`之后，我们必须为`hour`、`minute`和`seconds`各取两位数字。
- en: '`\"%r\"`: This term is used as the request line, which is given in double quotes
    from the client. This request line has useful information. The request client
    uses the `GET` method and the protocol used is HTTP.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\"%r\"`：这个术语用作请求行，客户端用双引号给出。这个请求行包含有用的信息。请求客户端使用`GET`方法，使用的协议是HTTP。'
- en: '`%>s`: This term defines the status code for the client. The status code is
    very important and useful, because it indicates whether the request sent by the
    client is successfully made to the server or not.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%>s`：这个术语定义了客户端的状态代码。状态代码非常重要和有用，因为它指示了客户端发送的请求是否成功地发送到服务器。'
- en: '`%b`: This term defines the total size of the object when it returns to the
    client. This total size does not include the size of the response header.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%b`：这个术语定义了对象返回给客户端时的总大小。这个总大小不包括响应头的大小。'
- en: Parsing other log files
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析其他日志文件
- en: 'There are also different log files available within our system, including Apache
    log. In our Linux distribution, the log files are in the `/var/log/` folder within
    the root filesystem as shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的系统中还有其他不同的日志文件，包括Apache日志。在我们的Linux发行版中，日志文件位于根文件系统中的`/var/log/`文件夹中，如下所示：
- en: '![](assets/42d14bf4-400a-417b-950f-1abb543b30f8.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42d14bf4-400a-417b-950f-1abb543b30f8.png)'
- en: 'In the preceding screenshot, we can easily see the different types of log files
    (for instance, authentication log file `auth.log`, system log file `syslog`, and
    kernel log `kern.log`) available for different operations entries. As we perform
    operations on Apache log files, as shown previously, we can also perform the same
    kind of operations on local log files. Let''s see an example for parsing one of
    the log files from before. Create a `simple_log.py` script and write the following
    content in it:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，我们可以很容易地看到不同类型的日志文件（例如，认证日志文件`auth.log`，系统日志文件`syslog`和内核日志`kern.log`）可用于不同的操作条目。当我们对Apache日志文件执行操作时，如前所示，我们也可以对本地日志文件执行相同类型的操作。让我们看一个以前解析日志文件的例子。在`simple_log.py`脚本中创建并写入以下内容：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the script and you will get the output as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将得到以下输出：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example, first we created one simple file object, `f`, and
    opened the `kern.log` file in it with read mode. After that, we applied the `readlines()`
    function over `file` object to read the data in the file line-by-line in the `for`
    loop. Then we applied the **`split()`** function on each line of the kernel log
    file and then printed the whole file using the `print` function, as can be seen
    in the output.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，首先我们创建了一个简单的文件对象`f`，并以读模式在其中打开了`kern.log`文件。之后，我们在`file`对象上应用了`readlines()`函数，以便在`for`循环中逐行读取文件中的数据。然后我们对内核日志文件的每一行应用了**`split()`**函数，然后使用`print`函数打印整个文件，如输出所示。
- en: 'Like reading the kernel log file, we can also perform various operations on
    it, just like we are going to perform some operations now. Now, we are going to
    access content in the kernel log file through indexing. It is possible because
    of the `split` function, as it splits all the information in the file as a different
    iteration. So, let''s see an example of such a condition. Create a `simple_log1.py` script
    and put the following script in it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 像读取内核日志文件一样，我们也可以对其执行各种操作，就像我们现在要执行一些操作一样。现在，我们将通过索引访问内核日志文件中的内容。这是可能的，因为`split`函数将文件中的所有信息拆分为不同的迭代。因此，让我们看一个这样的条件的例子。创建一个`simple_log1.py`脚本，并将以下脚本放入其中：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the script and you will get the following output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本，您将获得以下输出：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example, we just added `[1:3]` next to the `split` function,
    in other words, slicing. A sub-sequence of a sequence is known as a slice and
    the operation that extracts a sub-sequence is known as slicing. In our example,
    we use square brackets (`[ ]`) as the slice operator and have two integer values
    inside it, separated by a colon (`:`). The operator `[1:3]` returns the part of
    the sequence from the first element to the third element, including the first
    but excluding the last. When we slice any sequence, the sub-sequence we got always
    has the same type as the original sequence from which it was derived.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们只是在`split`函数旁边添加了`[1:3]`，换句话说，切片。序列的子序列称为切片，提取子序列的操作称为切片。在我们的例子中，我们使用方括号（`[
    ]`）作为切片运算符，并在其中有两个整数值，用冒号（`:`）分隔。操作符`[1:3]`返回序列的第一个元素到第三个元素的部分，包括第一个但不包括最后一个。当我们对任何序列进行切片时，我们得到的子序列始终与从中派生的原始序列具有相同的类型。
- en: However, the elements of a list (or tuple) can be of any type; no matter how
    we apply slicing over it, the derived slice of a list is a list. So, after applying
    slicing on log file, as a result of that we got the output shown previously.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，列表（或元组）的元素可以是任何类型；无论我们如何对其进行切片，列表的派生切片都是列表。因此，在对日志文件进行切片后，我们得到了先前显示的输出。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about how to work with different types of log files.
    You also learned about parsing complex log files and the need for exceptions while
    handling these files. The tricks for parsing log files will help in performing
    the parsing smoothly. You also learned about `ErrorLog` and `AccessLog`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何处理不同类型的日志文件。您还了解了解析复杂日志文件以及在处理这些文件时异常处理的必要性。解析日志文件的技巧将有助于顺利进行解析。您还了解了`ErrorLog`和`AccessLog`。
- en: In the next chapter, you are going to learn about SOAP and REST communication.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关SOAP和REST通信的内容。
- en: Questions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between runtime and compile time exceptions in Python?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中运行时异常和编译时异常有什么区别？
- en: What are regular expressions?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是正则表达式？
- en: Explore the Linux commands `head`, `tail`, `cat`, and `awk`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索Linux命令`head`，`tail`，`cat`和`awk`。
- en: Write a Python program to append the contents of one file to another file.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个Python程序，将一个文件的内容追加到另一个文件中。
- en: Write a Python program to read the contents of a file in reverse order.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个Python程序，以相反的顺序读取文件的内容。
- en: What would be the output of the following expressions?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下表达式的输出将是什么？
- en: '`re.search(r''C\Wke'', ''C@ke'').group()`'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`re.search(r''C\Wke'', ''C@ke'').group()`'
- en: '`re.search(r''Co+kie'', ''Cooookie'').group()`'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`re.search(r''Co+kie'', ''Cooookie'').group()`'
- en: '`re.match(r''<.*?>'', ''<h1>TITLE</h1>'').group()`'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`re.match(r''<.*?>'', ''<h1>TITLE</h1>'').group()`'
- en: Further reading
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Python logging: [https://docs.python.org/3/library/logging.html](https://docs.python.org/3/library/logging.html)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python日志记录：[https://docs.python.org/3/library/logging.html](https://docs.python.org/3/library/logging.html)
- en: Regular expression: [https://docs.python.org/3/howto/regex.html](https://docs.python.org/3/howto/regex.html)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式：[https://docs.python.org/3/howto/regex.html](https://docs.python.org/3/howto/regex.html)
- en: Exception handling: [https://www.pythonforbeginners.com/error-handling/python-try-and-except ](https://www.pythonforbeginners.com/error-handling/python-try-and-except)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常处理：[https://www.pythonforbeginners.com/error-handling/python-try-and-except](https://www.pythonforbeginners.com/error-handling/python-try-and-except)
