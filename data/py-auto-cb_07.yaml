- en: Developing Stunning Graphs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发令人惊叹的图表
- en: 'The following recipes will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下示例：
- en: Plotting a simple sales graph
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制简单的销售图表
- en: Drawing stacked bars
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制堆叠条形图
- en: Plotting pie charts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制饼图
- en: Displaying multiple lines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示多条线。
- en: Drawing a scatter plot
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制散点图
- en: Visualizing maps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化地图
- en: Adding legends and annotations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加图例和注释
- en: Combining graphs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合图表
- en: Saving charts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存图表
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Graphs and images are fantastic ways of presenting complex data in a way that's
    easily understandable. In this chapter, we will make use of the powerful `matplotlib` library
    to learn how to create all kinds of graphs. `matplotlib` is a library that's aimed
    at displaying data in multiple ways, and it can create absolute stunning plots
    that will help transmit and display information in the best way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图表和图像是呈现复杂数据的绝妙方式，易于理解。在本章中，我们将利用强大的`matplotlib`库来学习如何创建各种图表。`matplotlib`是一个旨在以多种方式显示数据的库，它可以创建绝对令人惊叹的图表，有助于以最佳方式传输和显示信息。
- en: The graphs we'll cover will go from simple bar graphs to line or pie charts,
    and combine multiple plots in the same graph, annotate them, or even draw geographical
    maps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖的图表将从简单的条形图到线图或饼图，并结合多个图表在同一图表中，注释它们，甚至绘制地理地图。
- en: Plotting a simple sales graph
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制简单的销售图表
- en: In this recipe, we'll see how to draw a sales graph by drawing bars proportional
    to sales in different periods.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何通过绘制与不同时期销售成比例的条形来绘制销售图表。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We can install `matplotlib` in our virtual environment using the following
    commands:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令在我们的虚拟环境中安装`matplotlib`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In some OSes, this may require us to install additional packages; for example,
    in Ubuntu it may require us to run `apt-get install python3-tk`. Check the `matplolib`
    docs for details.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些操作系统中，这可能需要我们安装额外的软件包；例如，在Ubuntu中可能需要我们运行`apt-get install python3-tk`。查看`matplolib`文档以获取详细信息。
- en: 'If you are using macOS, it''s possible that you''ll get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用的是macOS，可能会出现这样的错误—`RuntimeError: Python is not installed as a framework`。请参阅`matplolib`文档以了解如何解决：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import `matplotlib`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Prepare the data to be displayed on the graph:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备要在图表上显示的数据：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Split the data into usable formats for the graph. This is a preparation step:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据拆分为图表可用的格式。这是一个准备步骤：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a bar graph with the data:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有数据的条形图：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Display the graph:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图表：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result will be displayed as follows in a new window:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将在新窗口中显示如下：
- en: '![](assets/bd9e3f18-0570-48cd-8817-7a9d8dca9732.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bd9e3f18-0570-48cd-8817-7a9d8dca9732.png)'
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After importing the module, the data is presented in step 2 from the *How to
    do it…* section in a convenient way, which will likely be similar to the way the
    data was originally stored.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 导入模块后，数据将以方便的方式呈现在第2步的*如何做*部分中，这很可能类似于数据最初的存储方式。
- en: Because of the way `matplotlib` works, it requires an *X* component as well
    as a *Y* component. In this case, our *X* component is just a sequence of integers,
    as many as data points. We create that in `POS`. In `VALUES`, we store the numeric
    value of the sales as a sequence, and in `LABELS` the associated label for each
    data point. All that preparation work is done in step 3.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`matplotlib`的工作方式，它需要*X*组件以及*Y*组件。在这种情况下，我们的*X*组件只是一系列整数，与数据点一样多。我们在`POS`中创建了这个。在`VALUES`中，我们将销售的数值存储为一个序列，在`LABELS`中存储了每个数据点的相关标签。所有这些准备工作都在第3步完成。
- en: Step 4 creates the bar graph, with the sequences *X* (`POS`) and *Y* (`VALUES`).
    These define our bars. To specify the period it refers to, we put labels on the
    *x* axis for each value with `.xticks` in the same way. To clarify the meaning,
    we add a label with `.ylabel`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步创建了条形图，使用了*X*（`POS`）和*Y*（`VALUES`）的序列。这些定义了我们的条形。为了指定它所指的时期，我们使用`.xticks`在*x*轴上为每个值放置标签。为了澄清含义，我们使用`.ylabel`添加标签。
- en: To display the resulting  graph, step 5 calls `.show`, which opens a new window
    with the result.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示结果图表，第5步调用`.show`，它会打开一个新窗口显示结果。
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`.show`会阻止程序的执行。当窗口关闭时，程序将恢复。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You may want to change the format in which the values are presented. In our
    example, maybe the numbers represent millions of dollars. To do so, you can add
    a formatter to the *y* axis, so the values represented there will have it applied
    to them:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望更改值的呈现格式。在我们的示例中，也许数字代表数百万美元。为此，您可以向*y*轴添加格式化程序，以便在那里表示的值将应用于它们：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`value_format` is a function that returns a value based on the value and position
    of the data. Here, it will return the value 100 as `$ 100 M`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`value_format`是一个根据数据的值和位置返回值的函数。在这里，它将返回值100作为`$ 100 M`。'
- en: Values will be retrieved as floats, requiring you to transform them into integers
    for display.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 值将以浮点数形式检索，需要将它们转换为整数进行显示。
- en: To apply the formatter, we need to retrieve the `axis` object with `.gca` (get
    current axes). Then, the `.yaxis` gets the formatter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用格式化程序，我们需要使用`.gca`（获取当前轴）检索`axis`对象。然后，`.yaxis`获取格式化程序。
- en: 'The color of the bars can also be determined with the `color` parameter. Colors
    can be specified in multiple formats, as described in [https://matplotlib.org/api/colors_api.html](https://matplotlib.org/api/colors_api.html),
    but my favorite is following the XKCD color survey, using the `xkcd:` prefix (no
    space after the colon):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 条的颜色也可以使用`color`参数确定。颜色可以以多种格式指定，如[https://matplotlib.org/api/colors_api.html](https://matplotlib.org/api/colors_api.html)中所述，但我最喜欢的是遵循XKCD颜色调查，使用`xkcd:`前缀（冒号后没有空格）：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The full survey can be found here: [https://xkcd.com/color/rgb/](https://xkcd.com/color/rgb/).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的调查可以在这里找到：[https://xkcd.com/color/rgb/](https://xkcd.com/color/rgb/)。
- en: Most common colors, such as blue or red, are also available for quick tests.
    They tend to be a little bright to be used in good-looking reports, though.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数常见的颜色，如蓝色或红色，也可以用于快速测试。但它们往往有点亮，不能用于漂亮的报告。
- en: 'Combining the color with formatting the axis gives the following result:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将颜色与格式化轴结合起来，得到以下结果：
- en: '![](assets/2487d3fa-1b81-4594-97ba-1b5dfafbd44e.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2487d3fa-1b81-4594-97ba-1b5dfafbd44e.png)'
- en: Bar graphs don't need to display information in a temporal way. As we've seen, `matplotlib` requires
    us to specify the *X* parameter of each bar. That's a powerful tool to generate
    all kinds of graphs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图不一定需要以时间顺序显示信息。正如我们所见，`matplotlib`要求我们指定每个条的*X*参数。这是一个生成各种图表的强大工具。
- en: For example, the bars can be arranged to display a histogram, such as for displaying
    people of a certain height. The bars will start at a low height, increase to the
    average size, and then drop back. Don't limit yourself to just spreadsheet charts!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以安排条形以显示直方图，比如显示特定身高的人。条形将从较低的高度开始增加到平均大小，然后再降低。不要局限于电子表格图表！
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。
- en: See also
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Drawing stacked bars* recipe
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制堆叠条形图*的方法'
- en: The *Adding legends and annotations* recipe
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加图例和注释*的方法'
- en: The *Combining graphs* recipe
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组合图表*的方法'
- en: Drawing stacked bars
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制堆叠条形图
- en: A powerful way of displaying different categories is to present them as stacked
    bars, so each of the categories and the total are displayed. We'll see in this
    recipe how to do that.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一种强大的显示不同类别的方法是将它们呈现为堆叠条形图，因此每个类别和总数都会显示出来。我们将在这个方法中看到如何做到这一点。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We need to install `matplotlib` in our virtual environment:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在虚拟环境中安装`matplotlib`：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you are using macOS, it''s possible that you get an error like this: `RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用的是macOS，可能会出现这样的错误：`RuntimeError: Python is not installed as a framework`。请参阅`matplolib`文档以了解如何解决：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import `matplotlib`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Prepare the data. This represents two products'' sales, one established, and
    a new one:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备数据。这代表了两种产品的销售，一个是已建立的，另一个是新产品：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Process the data to prepare the expected format:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理数据以准备期望的格式：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create the bar plot. Two plots are required:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建条形图。需要两个图：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Display the graph:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图表：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The result will be displayed in a new window as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在一个新窗口中，如下所示：
- en: '![](assets/6d97abab-342a-4cee-b175-3786b4ae9dd5.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6d97abab-342a-4cee-b175-3786b4ae9dd5.png)'
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After importing the module, the data is presented in step 2 in a convenient
    way, which will likely be similar to the way the data was originally stored.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 导入模块后，在第2步以一种方便的方式呈现数据，这可能与数据最初存储的方式类似。
- en: In step 3, the data is prepared in three sequences, `VALUESA`, `VALUEB`, and
    `LABELS`. A `POS` sequence to correctly position the bars is added.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步中，数据准备为三个序列，`VALUESA`，`VALUEB`和`LABELS`。添加了一个`POS`序列以正确定位条形。
- en: Step 4 creates the bar graph, with the sequences *X* (`POS`) and *Y* (`VALUESB`).
    The second bar sequence, `VALUESA`, is added on top of the previous one, using
    the `bottom` parameter. This stacks the bars.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步创建了条形图，使用了序列*X*（`POS`）和*Y*（`VALUESB`）。第二个条形序列`VALUESA`添加到前一个上面，使用`bottom`参数。这样就堆叠了条形。
- en: Notice that we stack the second value, `VALUESB`, first. The second value represents
    a new product introduced in the market, while `VALUESA` is more stable. This better shows
    the growth of the new product.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们首先堆叠第二个值`VALUESB`。第二个值代表市场上推出的新产品，而`VALUESA`更加稳定。这更好地显示了新产品的增长。
- en: Each of the periods is labeled on the *X* axis with `.xticks`. To clarify the
    meaning, we add a label with `.ylabel`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 每个期间都在*X*轴上用`.xticks`标记。为了澄清含义，我们使用`.ylabel`添加标签。
- en: To display the resulting graph, step 5 calls `.show`, which opens a new window
    with the result.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示生成的图表，第5步调用`.show`，这将打开一个新窗口显示结果。
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`.show`会阻止程序的执行。当窗口关闭时，程序将恢复。
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Another way of presenting stacked bars is adding them as percentages, so the
    total doesn't change, only the relative sizes compared to each other.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 呈现堆叠条形的另一种方法是将它们添加为百分比，这样总数不会改变，只是相对大小相互比较。
- en: 'To do that, `VALUESA` and `VALUEB` need to be calculated relative to the percentages
    in this way:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，需要根据百分比计算`VALUESA`和`VALUEB`：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This makes each value equal to the percentage of the total, and the total always
    adds up to `100`. This produces the following graphic:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得每个值都等于总数的百分比，总数始终加起来为`100`。这产生了以下图形：
- en: '![](assets/f1270a74-2f03-49e2-b731-c2a539e6a774.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1270a74-2f03-49e2-b731-c2a539e6a774.png)'
- en: The bars doesn't necessarily need to be stacked. Sometimes, it may be interesting
    to present the bars one against the other for comparison.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 条形不一定需要堆叠。有时，将条形相互对比呈现可能会更有趣。
- en: 'To do that, we need to move the position of the second bar sequence. We''ll
    need also to set thinner bars to allow space:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要移动第二个条形序列的位置。我们还需要设置更细的条形以留出空间：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note how the width of the bar is set to a third of the space, as our reference
    space is `1` between the bars. The first bar is moved to the left and the second
    to the right to center them. The `bottom` argument has been deleted to not stack
    the bars:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意条的宽度设置为空间的三分之一，因为我们的参考空间在条之间是`1`。第一根条移到左边，第二根移到右边以使它们居中。已删除`bottom`参数，以不堆叠条形：
- en: '![](assets/7cd52074-9e8e-4407-ae9f-e751c8e64e3f.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7cd52074-9e8e-4407-ae9f-e751c8e64e3f.png)'
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。
- en: See also
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Plotting a simple sales graph* recipe
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制简单销售图表*食谱'
- en: The *Adding legends and annotations* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加图例和注释*食谱'
- en: The *Combining graphs* recipe
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组合图表*食谱'
- en: Plotting pie charts
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制饼图
- en: Pie charts! A Business 101 favorite, and a common way of presenting percentages.
    We'll see in this recipe how to plot a pie chart, with different slices representing
    proportions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图！商业101最喜欢的图表，也是呈现百分比的常见方式。在这个食谱中，我们将看到如何绘制一个饼图，不同的切片代表不同的比例。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to install `matplotlib` in our virtual environment using the following
    commands:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用以下命令在虚拟环境中安装`matplotlib`：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplotlib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用的是macOS，可能会出现这样的错误——`RuntimeError: Python is not installed as a framework`。请参阅`matplotlib`文档以了解如何解决此问题：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import `matplotlib`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Prepare the data. This represents several lines of products:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备数据。这代表了几条产品线：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Process the data to prepare the expected format:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理数据以准备预期格式：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create the pie chart:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建饼图：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Display the graph:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图表：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result will be displayed in a new window as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在新窗口中，如下所示：
- en: '![](assets/d11a4172-49d1-4df0-a0a9-df33e6bb7c10.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d11a4172-49d1-4df0-a0a9-df33e6bb7c10.png)'
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The module is imported in step 1 of the *How to do it…* section, and the data
    to present is imported in step 2\. The data is separated into two components,
    a list of `VALUES` and a list of `LABELS`, in step 3.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做...*部分的第1步中导入了该模块，并在第2步中导入了要呈现的数据。在第3步中，数据被分成两个部分，一个是`VALUES`的列表，另一个是`LABELS`的列表。
- en: The creation of the chart happens in step 4\. The pie chart is created by adding
    `VALUES` and `LABELS`. The `autopct` parameter formats the value so it displays
    it as a percentage to a single decimal place.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的创建发生在第4步。饼图是通过添加`VALUES`和`LABELS`来创建的。`autopct`参数格式化值，以便将其显示为百分比到小数点后一位。
- en: The call to `axis` ensure the pie chart will look round, instead of having a
    bit of perspective and appearing as an oval.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对`axis`的调用确保饼图看起来是圆形的，而不是有一点透视并呈现为椭圆。
- en: To display the resulting  graph, step 5 calls `.show`, which opens a new window
    with the result.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示生成的图表，第5步调用`.show`，它会打开一个新窗口显示结果。
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`.show`会阻塞程序的执行。当窗口关闭时，程序将恢复。
- en: There's more...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Pie charts are a little overused in business graphs. Most of the time, a bar
    chart with percentages or values will be a better way of visualizing the data,
    especially if more than two or three options are displayed. Try to limit the use
    of pie charts in your reports and data presentations.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图在商业图表中有点过度使用。大多数情况下，使用带百分比或值的条形图会更好地可视化数据，特别是当显示两个或三个以上的选项时。尽量限制在报告和数据演示中使用饼图。
- en: 'Rotating the start of the wedges is possible with the `startangle` parameter,
    and the direction to set up the wedges is defined by `counterclock` (defaults
    to  `True`):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`startangle`参数可以旋转楔形的起始位置，使用`counterclock`来设置楔形的方向（默认为`True`）：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The format inside the label can be set by a function. As the value inside the
    pie is defined as a percentage, finding the original value can be a little tricky.
    The following snippet creates a dictionary indexing by its percentage as an integer,
    so we can retrieve the referenced value. Please note that this assumes that no
    percentage gets repeated. If that''s the case, the labels may be slightly incorrect.
    In that case, we may need to use up to the first decimal place for better precision:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 标签内的格式可以通过函数设置。由于饼图内的值被定义为百分比，找到原始值可能有点棘手。以下代码片段创建了一个按整数百分比索引的字典，因此我们可以检索引用的值。请注意，这假设没有重复的百分比。如果有这种情况，标签可能会略有不正确。在这种情况下，我们可能需要使用更好的精度，最多使用小数点后一位：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'One or more wedges can also be separated by using the explode parameter. This
    specifies how separated the wedge is from the center:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个楔形也可以通过使用explode参数分开。这指定了楔形与中心的分离程度：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Combining all these options, we get the following result:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 结合所有这些选项，我们得到以下结果：
- en: '![](assets/907bd5d6-c5cb-49cb-8f51-29aebf936ed1.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/907bd5d6-c5cb-49cb-8f51-29aebf936ed1.png)'
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。
- en: See also
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Plotting a simple sales graph* recipe
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制简单销售图表*食谱'
- en: The *Drawing stacked bars* recipe
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制堆叠条形图*食谱'
- en: Displaying multiple lines
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示多条线
- en: This recipe will show how to display multiple lines in a graph.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将展示如何在图表中显示多条线。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to install `matplotlib` in our virtual environment:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在虚拟环境中安装`matplotlib`：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用的是macOS，可能会出现这样的错误——`RuntimeError: Python is not installed as a framework`。请参阅`matplolib`文档以了解如何解决此问题：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import `matplotlib`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Prepare the data. This represents two products'' sales:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备数据。这代表了两种产品的销售：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Process the data to prepare the expected format:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理数据以准备预期格式：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create the line plot. Two lines are required:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建线图。需要两条线：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Display the graph:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图表：
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The result will be displayed in a new window:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在一个新窗口中：
- en: '![](assets/defcbfbe-a08d-4ed8-b19d-b03b82ef8552.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/defcbfbe-a08d-4ed8-b19d-b03b82ef8552.png)'
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the *How to do it…* section, step 1 imports the module and step 2 shows the
    data to be plotted in a formatted way.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做…*部分，第1步导入模块，第2步以格式化的方式显示要绘制的数据。
- en: In step 3, the data is prepared in three sequences, `VALUESA`, `VALUEB`, and `LABELS`.
    A `POS` sequence to correctly position each point is added.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步中，数据准备好了三个序列`VALUESA`，`VALUEB`和`LABELS`。添加了一个`POS`序列来正确定位每个点。
- en: Step 4 creates the graph, with the sequences *X* (`POS`) and *Y* (`VALUESA`),
    and then `POS` and `VALUESB`. The value of `'o-'` is added to draw a circle on
    each of the data points and a full line between them.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步创建了图表，使用了序列*X*（`POS`）和*Y*（`VALUESA`），然后是`POS`和`VALUESB`。添加了值为`'o-'`，以在每个数据点上绘制一个圆圈，并在它们之间绘制一条实线。
- en: By default, the plot will display a solid line, with no marker on each point.
    If only the marker is used (that is, `'o'`), there'll be no line.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，图表将显示一条实线，每个点上没有标记。如果只使用标记（即`'o'`），就不会有线。
- en: Each of the periods is labeled on the *X* axis with `.xticks`. To clarify the
    meaning, we add a label with `.ylabel`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*X*轴上的每个周期都带有`.xticks`标签。为了澄清含义，我们使用`.ylabel`添加了一个标签。'
- en: To display the resulting graph, step 5 calls `.show`, which opens a new window
    with the result.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示结果图表，第5步调用`.show`，它会打开一个新窗口显示结果。
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`.show`会阻塞程序的执行。当窗口关闭时，程序将恢复。
- en: There's more...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Graphs with lines are deceptively simple and able to create a lot of interesting
    representations. It is probably the most convenient when showing mathematical
    graphs. For example, we can display a graph showing Moore's Law in a few lines
    of code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 带有线条的图表看起来简单，能够创建许多有趣的表示。在显示数学图表时，这可能是最方便的。例如，我们可以用几行代码显示Moore定律的图表。
- en: Moore's Law is an observation by Gordon Moore that the number of components
    in an integrated circuit doubles every two years. It was first described in 1965
    and then corrected in 1975\. It seems to be quite close to the historic rate of
    technological advancement over the last 40 years.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 摩尔定律是戈登·摩尔观察到的一个现象，即集成电路中的元件数量每两年翻一番。它首次在1965年被描述，然后在1975年得到修正。它似乎与过去40年的技术进步历史速度非常接近。
- en: 'We first create a line describing the theoretical line, with data points from
    1970 to 2013\. Starting with 1000 transistors, we double it every two years, up
    to 2013:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一条描述理论线的线，数据点从1970年到2013年。从1000个晶体管开始，每两年翻一番，直到2013年：
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Following some documentation, we extract a few examples of commercial CPUs,
    their year of release, and their number of integrated components from here: [http://www.wagnercg.com/Portals/0/FunStuff/AHistoryofMicroprocessorTransistorCount.pdf](http://www.wagnercg.com/Portals/0/FunStuff/AHistoryofMicroprocessorTransistorCount.pdf).
    Due to the big numbers, we''ll use the notation of `1_000_000` for a million,
    available in Python 3:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 根据一些文档，我们从这里提取了一些商用CPU的例子，它们的发布年份以及集成元件的数量：[http://www.wagnercg.com/Portals/0/FunStuff/AHistoryofMicroprocessorTransistorCount.pdf](http://www.wagnercg.com/Portals/0/FunStuff/AHistoryofMicroprocessorTransistorCount.pdf)。由于数字很大，我们将使用Python
    3中的`1_000_000`表示一百万：
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Draw a line with markers to display those points at the proper places. The
    `''v''` mark will display a triangle:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制一条带有标记的线，以在正确的位置显示这些点。`'v'`标记将显示一个三角形：
- en: '[PRE33]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For each data point, append a label in the proper place with the name of the
    CPU:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个数据点，将一个标签附加在正确的位置，标有CPU的名称：
- en: '[PRE34]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, growth doesn''t make sense displayed in a linear graph, so we change
    the scale to be logarithmic, which makes exponential growth look like a straight
    line. But to keep the sense of dimension, add a grid. Call `.show` to display
    the graph:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，成长在线性图表中没有意义，因此我们将比例改为对数，这样指数增长看起来像一条直线。但为了保持尺度的意义，添加一个网格。调用`.show`显示图表：
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The resulting graph will be displayed:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图将显示：
- en: '![](assets/bc851b15-ef70-481c-b08e-51b3879cfb60.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc851b15-ef70-481c-b08e-51b3879cfb60.png)'
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
    In particular, check the available formats for the lines (solid, dashed, dotted,
    and so on) and markers (dot, circle, triangle, star, and so on) here: [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。特别是，可以在这里检查线条（实线、虚线、点线等）和标记（点、圆圈、三角形、星形等）的可用格式：[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html)。
- en: See also
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Adding legends and annotations* recipe
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加图例和注释*配方'
- en: The *Combining graphs* recipe
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组合图表*配方'
- en: Drawing a scatter plot
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制散点图
- en: A scatter plot is one where the information is only displayed as dots with *X*
    and *Y* values. They are very useful when presenting samples and to see whether
    there's any relationship between two variables. In this recipe, we'll display
    a graph plotting time spent on a website against money spent, to see whether we
    can see a pattern.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图是一种只显示为点的信息，具有*X*和*Y*值。当呈现样本并查看两个变量之间是否存在关系时，它们非常有用。在这个配方中，我们将显示一个图表，绘制在网站上花费的时间与花费的金钱，以查看是否可以看到一个模式。
- en: Getting ready
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We need to install `matplotlib` in our virtual environment:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在虚拟环境中安装`matplotlib`：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用的是macOS，可能会出现这样的错误——`RuntimeError: Python is not installed as a framework`。请参阅`matplolib`文档，了解如何解决此问题：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: As data points, we'll use the `scatter.csv` file to read the data. This file
    is available on GitHub at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/scatter.csv](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/scatter.csv).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据点，我们将使用`scatter.csv`文件来读取数据。此文件可在GitHub上找到：[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/scatter.csv](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/scatter.csv)。
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Import `matplotlib` and `csv`. `FuncFormatter` is also imported to format the
    axes later:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`和`csv`。还导入`FuncFormatter`以稍后格式化轴：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Prepare the data, reading from the file using the `csv` module:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备数据，使用`csv`模块从文件中读取：
- en: '[PRE38]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Prepare the data for plotting, and then plot it:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备绘图数据，然后绘制：
- en: '[PRE39]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Improve the context by formatting the axes:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过格式化轴来改善上下文：
- en: '[PRE40]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Show the graph:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图表：
- en: '[PRE41]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The result will be displayed in a new window:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在新窗口中：
- en: '![](assets/ced40fbf-6f2b-4eb1-b8b9-f5483b9f4989.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ced40fbf-6f2b-4eb1-b8b9-f5483b9f4989.png)'
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Steps 1 and 2 of the *How to do it…* section import the modules we'll use later
    and read the data from the CSV file. The data is transformed into a list to allow
    us to iterate through it several times, as that's necessary in step 3.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*如何做…*部分的步骤1和2导入了我们稍后将使用的模块并从CSV文件中读取数据。数据被转换为列表，以允许我们多次迭代，这在第3步中是必要的。'
- en: Step 3 prepares the data in two arrays, and then uses `.scatter` to plot them.
    The parameters for `.scatter`, as with other methods of `matplotlib`, require
    an array of *X* and *Y* values. They both need to have the same size. The data
    is converted into `float` from the file format, to ensure the number format.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 第3步将数据准备为两个数组，然后使用`.scatter`来绘制它们。与`matplotlib`的其他方法一样，`.scatter`的参数需要*X*和*Y*值的数组。它们都需要具有相同的大小。数据从文件格式转换为`float`，以确保数字格式。
- en: Step 4 refines the way the data is presented on each of the axis. The same operation
    is presented twice—a function is created that define how the values on that axis
    should be displayed (in dollars or in minutes). The function accepts as input
    the value to display and the position. Typically, the position will be ignored.
    The axis formatter will be overwritten with `.set_major_formatter`. Notice that
    both axes are returned with `.gca` (get current axes).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步改进了数据在每个轴上的呈现方式。相同的操作被呈现两次——创建一个函数来定义该轴上的值应该如何显示（以美元或分钟）。该函数接受要显示的值和位置作为输入。通常，位置将被忽略。轴格式化程序将被覆盖为`.set_major_formatter`。请注意，两个轴都将使用`.gca`（获取当前轴）返回。
- en: A label is added to the axes with `.xlabel` and `.ylabel`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.xlabel`和`.ylabel`向轴添加标签。
- en: Finally, step 5 displays the graph in a new window. Analyzing the result, we
    can say that there seem to be two kinds of users, ones who spend less that 10
    minutes and never spend more than $10, and users who spend more time and also
    have a higher chance of spending up to $100.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第5步在新窗口中显示图表。分析结果，我们可以说似乎有两种用户，一些用户花费不到10分钟，从不花费超过10美元，还有一些用户花费更多时间，也更有可能花费高达100美元。
- en: Note that the data presented is synthetic, and it has been generated with the
    result in mind. Real-life data will probably look more spread out.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所呈现的数据是合成的，并且已经根据结果生成。现实生活中的数据可能看起来更分散。
- en: There's more...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: A scatter plot can display not only points in two dimensions, but also add a
    third (area) and even a fourth dimension (color).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图不仅可以显示二维空间中的点，还可以添加第三个（面积）甚至第四个维度（颜色）。
- en: To add those elements, use the parameters `s` for *size* and `c` for *color*.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加这些元素，使用参数`s`表示*大小*，`c`表示*颜色*。
- en: 'Size is defined as the diameter of a ball in points squared. So, for a ball
    of diameter 10, 100 will be used. Color can use any of the usual definitions of
    color in `matplotlib`,  such as hex color, RGB, and so on. See the documentation
    for more details: [https://matplotlib.org/users/colors.html](https://matplotlib.org/users/colors.html).For
    example, we can generate a random graph using the four dimensions in the following
    way:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 大小被定义为点的直径的平方。因此，对于直径为10的球，将使用100。颜色可以使用`matplotlib`中颜色的任何常规定义，例如十六进制颜色、RGB等。有关更多详细信息，请参阅文档：[https://matplotlib.org/users/colors.html](https://matplotlib.org/users/colors.html)。例如，我们可以使用以下方式生成一个随机图表的四个维度：
- en: '[PRE42]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '`COLOR_SCALE` goes from green to red, and the size of each of the points will
    be between `0` and `50` points in diameter. The result should be something like
    this:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`COLOR_SCALE`从绿色到红色，每个点的大小将在`0`到`50`之间。结果应该是这样的：'
- en: '![](assets/ab8e4b1e-6dfa-4367-8e57-47e7557c5f45.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ab8e4b1e-6dfa-4367-8e57-47e7557c5f45.png)'
- en: Note that it is random, so each time it will generate a different graph.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是随机的，因此每次都会生成不同的图表。
- en: The `alpha` value makes each of the points semitransparent, allowing us to see
    where they overlap. The higher this value is, the less transparent the points
    will be. This parameter will affect the displayed color, as it will blend the
    point with the background.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`alpha`值使每个点半透明，使我们能够看到它们重叠的位置。该值越高，点的透明度越低。此参数将影响显示的颜色，因为它将点与背景混合。'
- en: Even though it's possible to display two independent values in the size and
    color, they can also be related to any of the other values. For example, making
    the color dependent on the size will make all the points of the same size the
    same color, which may help distinguish the data. Remember that the ultimate goal
    of a graph is to make data easy to understand. Try different approaches to improve
    this.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以在大小和颜色中显示两个独立的值，但它们也可以与任何其他值相关联。例如，使颜色依赖于大小将使所有相同大小的点具有相同的颜色，这可能有助于区分数据。请记住，图表的最终目标是使数据易于理解。尝试不同的方法来改进这一点。
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。
- en: See also
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Displaying multiple lines* recipe
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显示多行*的方法'
- en: The *Adding legends and annotations* recipe
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加图例和注释*的方法'
- en: Visualizing maps
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化地图
- en: To show information that changes from region to region, the best way is to display
    a map that presents the information, while at the same time giving a regional
    sense of position and location for the data.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示从区域到区域变化的信息，最好的方法是显示一张呈现信息的地图，同时为数据提供区域位置和位置的感觉。
- en: In this recipe, we'll make use of the `fiona` module to import GIS information,
    as well as `matplotlib` to display the information. We will display a map of Western
    Europe and display the population of each country with a color grade. The darker
    the color, the larger the population.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将利用`fiona`模块导入GIS信息，以及`matplotlib`来显示信息。 我们将显示西欧的地图，并显示每个国家的人口与颜色等级。
    颜色越深，人口越多。
- en: Getting ready
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to install `matplotlib` and `fiona` in our virtual environment:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在虚拟环境中安装`matplotlib`和`fiona`：
- en: '[PRE43]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用的是macOS，可能会出现这样的错误-`RuntimeError: Python is not installed as a framework`。
    请参阅`matplolib`文档以了解如何解决此问题：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: The map data needs to be downloaded. Fortunately, there's a lot of freely available
    data for geographic information. A search on Google should quickly return almost
    everything you need, including detailed information on regions, counties, rivers,
    or any other kind of data.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 需要下载地图数据。 幸运的是，有很多免费提供的地理信息数据。 在Google上搜索应该很快返回几乎您需要的所有内容，包括有关地区，县，河流或任何其他类型数据的详细信息。
- en: GIS information is available in different formats from a lot of public organizations.
    `fiona` is capable of understanding most common formats and treating them in equivalent
    ways, but there are small differences. Read the `fiona` documentation for more
    details.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 来自许多公共组织的GIS信息以不同格式可用。 `fiona`能够理解大多数常见格式并以等效方式处理它们，但存在细微差异。 请阅读`fiona`文档以获取更多详细信息。
- en: The data we'll use in this recipe, covering all European countries, is available
    on GitHub at the following URL:  [https://github.com/leakyMirror/map-of-europe/blob/master/GeoJSON/europe.geojson](https://github.com/leakyMirror/map-of-europe/blob/master/GeoJSON/europe.geojson).
    Note it is in GeoJSON, which is an easy standard to work with.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在此示例中使用的数据，涵盖所有欧洲国家，可在GitHub的以下网址找到：[https://github.com/leakyMirror/map-of-europe/blob/master/GeoJSON/europe.geojson](https://github.com/leakyMirror/map-of-europe/blob/master/GeoJSON/europe.geojson)。
    请注意，它是GeoJSON格式，这是一种易于使用的标准。
- en: How to do it...
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Import the modules to be used later:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入稍后要使用的模块：
- en: '[PRE44]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Load the population of the countries to display. The population has been:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载要显示的国家的人口。 人口已经是：
- en: '[PRE45]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Prepare the `colormap`, which will determine the color each country will be
    displayed in a shade of green. Calculate which color corresponds to each country:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备`colormap`，它将确定每个国家显示在绿色阴影中的颜色。 计算每个国家对应的颜色：
- en: '[PRE46]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open the file and read the data, filtering by the countries we defined the
    population of in step 1:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件并读取数据，按照我们在第1步中定义的国家进行过滤：
- en: '[PRE47]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Plot each of the countries in the proper color:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以正确的颜色绘制每个国家：
- en: '[PRE48]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Display the result:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示结果：
- en: '[PRE49]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The result will be displayed in a new window:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在新窗口中：
- en: '![](assets/d4a76e46-e98f-4763-8e14-5658dd95e0e6.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d4a76e46-e98f-4763-8e14-5658dd95e0e6.png)'
- en: How it works...
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After importing the modules in step 1 from the *How to do it…* section, the
    data to be displayed is defined in step 2\. Note that the names need to be in
    the same format as they'll be in the GEO file. The minimum and maximum populations
    are calculated to properly balance the range later.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何操作...*部分的第1步中导入模块后，将在第2步中定义要显示的数据。 请注意，名称需要与GEO文件中的格式相同。 最小和最大人口将被计算以正确平衡范围。
- en: The population has been rounded to a significant number, and it's defined in
    millions. Only a few countries have been defined for the purposes of this recipe,
    but there are more available in the GIS file and the map can be extended toward
    the East.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 人口已经舍入到一个显著数字，并以百万定义。 仅为此示例的目的定义了一些国家，但在GIS文件中还有更多可用的国家，并且地图可以向东扩展。
- en: A `colormap` defining the color range in shades of green (`Greens`) is described
    in step 3\. This is one standard `colormap` in `matplotlib`, but others described
    in the documentation can be used ([https://matplotlib.org/examples/color/colormaps_reference.html](https://matplotlib.org/examples/color/colormaps_reference.html)),
    such as oranges, reds, or plasma for a more cold-to-hot approach.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步中描述了定义绿色阴影（`Greens`）范围的`colormap`。 这是`matplotlib`中的一个标准`colormap`，但可以使用文档中描述的其他`colormap`（[https://matplotlib.org/examples/color/colormaps_reference.html](https://matplotlib.org/examples/color/colormaps_reference.html)），例如橙色，红色或等离子体，以获得更冷到热的方法。
- en: The `COUNTRY_COLOUR` dictionary stores the color defined by the `colormap` for
    each country. The population is reduced to a number from 0.0 (least population)
    to 1.0 (most), and passed to `colormap` to retrieve the color at the scale it
    corresponds to.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`COUNTRY_COLOUR`字典存储了由`colormap`为每个国家定义的颜色。 人口减少到从0.0（最少人口）到1.0（最多）的数字，并传递给`colormap`以检索其对应的比例的颜色。'
- en: The GIS information is then retrieved in step 4\. The `europe.geojson` file is
    read using `fiona` and the data is copied so we can use it in the next steps.
    It also filters to only deal with the countries we defined the population of,
    so no extra countries are plotted.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在第4步中检索GIS信息。 使用`fiona`读取`europe.geojson`文件，并复制数据，以便在接下来的步骤中使用。 它还会过滤，只处理我们定义了人口的国家，因此不会绘制额外的国家。
- en: The loop in step 5 goes country by country, and then we plot it using `.fill`,
    which plots a polygon. The geometry of each of the different countries is either
    a single polygon (`Polygon`) or more than one (`MultiPolygon`). In each case,
    the proper polygons are drawn, all in the same color. This means `MultiPolygon` is
    drawn several times.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤5中的循环逐个国家进行，然后我们使用`.fill`来绘制它，它绘制一个多边形。每个不同国家的几何形状都是一个单一的多边形（`Polygon`）或多个多边形（`MultiPolygon`）。在每种情况下，适当的多边形都以相同的颜色绘制。这意味着`MultiPolygon`会被绘制多次。
- en: GIS information is stored as points for coordinates describing the latitude
    and longitude of the point. Areas, such as countries, have a list of coordinates
    that describe an area within them. Some maps are more precise and have more points
    defining areas. Multiple polygons may be required to define a country, as some
    parts may be separated from each other, islands being the most obvious cases,
    but there are also enclaves.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: GIS信息以描述纬度和经度的坐标点的形式存储。区域，如国家，有一系列坐标来描述其中的区域。一些地图更精确，有更多的点来定义区域。可能需要多个多边形来定义一个国家，因为一些部分可能相互分离，岛屿是最明显的情况，但也有飞地。
- en: Finally, the data is displayed by calling `.show`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过调用`.show`来显示数据。
- en: There's more...
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Taking advantage of the information contained in the GIS file, we can add extra
    information to the map. The `properties` object contains information about the
    name of the country, but also its ISO name, FID code, and central location as
    `LON` and `LAT`. We can use this information to display the name of the country
    using `.text`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 利用GIS文件中包含的信息，我们可以向地图添加额外的信息。`properties`对象包含有关国家名称的信息，还有ISO名称、FID代码和中心位置的`LON`和`LAT`。我们可以使用这些信息来使用`.text`显示国家的名称：
- en: '[PRE50]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This code will live inside the loop in step 6 in the *How to do it…* section.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将存在于*如何做*部分的步骤6中的循环中。
- en: If you analyze the file, you'll see that the `properties` object contains information
    about the population, stored as POP2005, so you can draw the population info directly
    from the map. That is left as an exercise. Different map files will contain different
    information, so be sure to play around to unleash all the possibilities.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你分析这个文件，你会发现`properties`对象包含有关人口的信息，存储为POP2005，所以你可以直接从地图上绘制人口信息。这留作练习。不同的地图文件将包含不同的信息，所以一定要尝试一下，释放所有可能性。
- en: Also, you may notice that the map may be distorted in some cases. `matplotlib`
    will try to present it in a square box, and if the map is not roughly square,
    this will be evident. For example, try to display only Spain, Portugal, Ireland,
    and the UK. We can force the graph to present 1 point of latitude with the same
    space as 1 point of longitude, which is a good approach if we are not drawing
    something near the poles. This is achieved by calling `.set_aspect` in the axes.
    Current axes can be obtained through `.gca` (**get current axes**)
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可能会注意到在某些情况下地图可能会变形。`matplotlib`会尝试将其呈现为一个正方形的框，如果地图不是大致正方形，这将是明显的。例如，尝试只显示西班牙、葡萄牙、爱尔兰和英国。我们可以强制图表以1点纬度与1点经度相同的空间来呈现，这是一个很好的方法，如果我们不是在靠近极地的地方绘制东西。这是通过在轴上调用`.set_aspect`来实现的。当前轴可以通过`.gca`（**获取当前轴**）获得。
- en: '[PRE51]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Also, to improve the look of the map, we can set up a background color that
    helps to differentiate between the background and the foreground, and remove the
    labels in the axes, as printing the latitude and longitude is probably distracting.
    Removing the labels on the axes is achieved by setting empty labels with `.xticks`
    and `.yticks`. The background color is mandated by the foreground color of the
    axes:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了改善地图的外观，我们可以设置一个背景颜色，以帮助区分背景和前景，并删除轴上的标签，因为打印纬度和经度可能会分散注意力。通过使用`.xticks`和`.yticks`设置空标签来实现在轴上删除标签。背景颜色由轴的前景颜色规定：
- en: '[PRE52]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Finally, to better differentiate between the different regions, a line surrounding
    each area can be added. This can be done by drawing a thin line with the same
    data as `.fill`, right after. Notice that this code is repeated twice in step
    2:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了更好地区分不同的区域，可以添加一个包围每个区域的线。这可以通过在`.fill`之后用相同的数据绘制一条细线来实现。请注意，这段代码在步骤2中重复了两次。
- en: '[PRE53]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Applying all these elements to the map, it now looks like this:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些元素应用到地图上，现在看起来是这样的：
- en: '![](assets/a57d8513-6d08-4ba4-a29c-9f03641ec34f.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a57d8513-6d08-4ba4-a29c-9f03641ec34f.png)'
- en: The resulting code is available on GitHub here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/visualising_maps.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/visualising_maps.py).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的代码可以在GitHub上找到：[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/visualising_maps.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/visualising_maps.py)。
- en: As we've seen, maps are drawn as general polygons. Don't be afraid to include
    other geometrical forms. You can define your own polygons and print them with
    `.fill` or some extra labels. For example, far away regions may need to be transported
    to avoid having too big a map. Or, rectangles can be used to print extra information
    on top of parts of the map.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，地图是以一般的多边形绘制的。不要害怕包括其他几何形状。你可以定义自己的多边形，并用`.fill`或一些额外的标签打印它们。例如，远离的地区可能需要被运输，以避免地图太大。或者，可以使用矩形在地图的部分上打印额外的信息。
- en: The full `fiona` documentation can be found here: [http://toblerity.org/fiona/](http://toblerity.org/fiona/). The
    full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`fiona`文档可以在这里找到：[http://toblerity.org/fiona/](http://toblerity.org/fiona/)。完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。
- en: See also
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Adding legends and annotations* recipe
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加图例和注释*配方'
- en: The *Combining graphs* recipe
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组合图表*配方'
- en: Adding legends and annotations
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加图例和注释
- en: When drawing graphs with dense information, a legend may be required to determine
    the specific colors or help better understand the data presented. In `matplotlib`,
    legends can be pretty rich and have multiple ways of presenting them. Annotations
    to draw attention to specific points are also good ways to focus the message for
    the audience.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制具有密集信息的图表时，可能需要图例来确定特定颜色或更好地理解所呈现的数据。在`matplotlib`中，图例可以非常丰富，并且有多种呈现方式。注释也是吸引观众注意力的好方法，以便更好地传达信息。
- en: In this recipe, we'll create a graph with three different components and display
    a legend with information to better understand it, as well as annotating the most
    interesting points on our graph.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将创建一个具有三个不同组件的图表，并显示一个包含信息的图例，以更好地理解它，并在图表上注释最有趣的点。
- en: Getting ready
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to install `matplotlib` in our virtual environment:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在虚拟环境中安装`matplotlib`：
- en: '[PRE54]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您正在使用macOS，可能会出现这样的错误——`RuntimeError: Python is not installed as a framework`。请参阅`matplolib`文档以了解如何解决：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: How to do it...
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Import `matplotlib`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`：
- en: '[PRE55]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Prepare the data to be displayed on the graph, and the legends that should
    be displayed. Each of the lines is composed of the time label, sales of `ProductA`,
    sales of `ProductB`, and sales of `ProductC`:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备要在图表上显示的数据，以及应该显示的图例。每行由时间标签、`ProductA`的销售额、`ProductB`的销售额和`ProductC`的销售额组成：
- en: '[PRE56]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Split the data into usable formats for the graph. This is a preparation step:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据拆分为图表可用的格式。这是一个准备步骤：
- en: '[PRE57]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create a bar graph with the data:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建带有数据的条形图：
- en: '[PRE58]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add an annotation displaying the maximum growth in the chart:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个注释，显示图表中的最大增长：
- en: '[PRE59]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add the `legend`:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`legend`：
- en: '[PRE60]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Display the graph:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图表：
- en: '[PRE61]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The result will be displayed in a new window:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在新窗口中：
- en: '![](assets/7284a61f-70fe-43e5-b151-152dd0086307.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7284a61f-70fe-43e5-b151-152dd0086307.png)'
- en: How it works...
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Steps 1 and 2  of the *How to do it…* section prepare the imports and the data
    that will be displayed in the bar, in a format similar to what well-structured
    input data will look like. In step 3, the data is split into different arrays
    to prepare the input in `matplotlib`. Basically, each data sequence is stored
    in a different array.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '*操作步骤*的第1步和第2步准备了导入和将在条形图中显示的数据，格式类似于良好结构化的输入数据。在第3步中，数据被拆分成不同的数组，以准备在`matplotlib`中输入。基本上，每个数据序列都存储在不同的数组中。'
- en: Step 4 draws the data. Each data sequence gets a call to `.bar`, specifying
    its position and values. Labels do the same as `.xticks`. To separate each of
    the bars around the labels, the first one is displaced to the left and the third
    to the right.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步绘制数据。每个数据序列都会调用`.bar`，指定其位置和值。标签与`.xticks`相同。为了在标签周围分隔每个条形图，第一个条形图向左偏移，第三个向右偏移。
- en: An annotation is added above the bar for `ProductC` in the second quarter. Note
    that the annotation includes the point in `xy` and the text location in `xytext`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二季度的`ProductC`条形图上方添加了一个注释。请注意，注释包括`xy`中的点和`xytext`中的文本位置。
- en: In step 6, the legend is added. Notice that the labels need to be added in the
    same order as the data was input. The legend is located automatically in an area
    that doesn't cover any data. `arroprops` details the arrow to point to the data.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6步中，添加了图例。请注意，标签需要按照输入数据的顺序添加。图例会自动放置在不覆盖任何数据的区域。`arroprops`详细说明了指向数据的箭头。
- en: Finally, the graph is drawn in step 7 by calling `.show`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第7步通过调用`.show`绘制图表。
- en: Calling `.show` blocks the execution of the program. The program will resume
    when the window is closed.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`.show`会阻止程序的执行。当窗口关闭时，程序将恢复执行。
- en: There's more...
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Legends will be display automatically in most cases with just a call to `.legend`.
    If you need to customize the order in which they appear, you may refer each label
    to a specific element. For example, this way (note it calls `ProductA` the `valueC`
    series)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图例通常会自动显示，只需调用`.legend`即可。如果需要自定义它们的显示顺序，可以将每个标签指定给特定元素。例如，这种方式（注意它将`ProductA`称为`valueC`系列）
- en: '[PRE62]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The location of the legend can also be changed manually, through the `loc` parameter.
    By default, it is `best` and it will draw the legend over an area where there's
    the least overlap of data (ideally none). But values such as `right`, `upper left`,
    and so on can be used, or a specific `(X, Y)` tuple.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图例的位置也可以通过`loc`参数手动更改。默认情况下，它是`best`，它会在数据最少重叠的区域绘制图例（理想情况下没有）。但是可以使用诸如`right`、`upper
    left`等值，或者特定的`(X, Y)`元组。
- en: 'Another option is to plot the legend outside of the graph, using the `bbox_to_anchor` option.
    In this case, the legend is attached to the (*X*, *Y*) of the bounding box, where
    `0` is the bottom-left corner of the graph and `1` is the upper-right corner.
    This may cause the legend to be clipped by the external border, so you may need
    to adjust where the graph starts and ends with `.subplots_adjust`:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是在图表之外绘制图例，使用`bbox_to_anchor`选项。在这种情况下，图例附加到边界框的（*X*，*Y*）位置，其中`0`是图表的左下角，`1`是右上角。这可能导致图例被外部边框剪切，因此您可能需要通过`.subplots_adjust`调整图表的起始和结束位置：
- en: '[PRE63]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Adjusting the `bbox_to_anchor` parameter and `.subplots_adjust` will require
    a little bit of trial and error, until the expected result is produced.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 调整`bbox_to_anchor`参数和`.subplots_adjust`将需要一些试错，直到产生预期的结果。
- en: '`.subplots_adjust` references the positions as the position of the axis where
    it will be displayed. This means that `right=0.80` will leave 20% of the screen
    on the right of the plot, while the default for left is 0.125, meaning it leaves
    12.5% of the space on the left of the plot. See the documentation for further
    details: [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html).'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`.subplots_adjust`引用了位置，作为将显示的轴的位置。这意味着`right=0.80`将在绘图的右侧留下20%的屏幕空间，而左侧的默认值为0.125，这意味着在绘图的左侧留下12.5%的空间。有关更多详细信息，请参阅文档：[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots_adjust.html)。'
- en: 'The annotations can be done in different styles and can be tweaked with different
    options regarding the way to connect and so on. For example, this code will create
    an arrow with the `fancy` style connecting with a curve. The result is displayed
    here:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 注释可以以不同的样式进行，并可以通过不同的选项进行调整，例如连接方式等。例如，这段代码将创建一个箭头，使用“fancy”样式连接一个曲线。结果显示在这里：
- en: '[PRE64]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In our recipe, we did not annotate to exactly the end of the bar (point (`1.2`,
    `15`)), but slightly above it, to give a little bit of breathing space.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的方法中，我们没有精确地注释到条的末端（点（`1.2`，`15`）），而是略高于它，以留出一点空间。
- en: Adjusting the exact point to annotate and where to locate the text will require
    a bit of testing. The text was also positioned by looking for the best place to
    not overlap the text with the bars. The font size and color can be changed, using
    the `fontsize` and `color` parameters, in both the `.legend` and `.annotate` calls.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 调整注释的确切位置和文本的位置将需要进行一些测试。文本的位置也是通过寻找最佳位置来避免与条形图重叠而定位的。字体大小和颜色可以使用`.legend`和`.annotate`调用中的`fontsize`和`color`参数进行更改。
- en: 'Applying all these elements, the graph may look similar to this. This graph
    can be replicated by calling the `legend_and_annotation.py` script available in
    GitHub here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/adding_legend_and_annotations.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/adding_legend_and_annotations.py):'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 应用所有这些元素，图表可能看起来类似于这样。可以通过调用GitHub上的`legend_and_annotation.py`脚本来复制此图表：[https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/adding_legend_and_annotations.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter07/adding_legend_and_annotations.py)：
- en: '![](assets/cbe93454-92bf-4133-a125-e94c0269ba18.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cbe93454-92bf-4133-a125-e94c0269ba18.png)'
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
    In particular, the guide for legends is here: [https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend) and
    for annotations it is here: [https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。特别是图例的指南在这里：[https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend)，注释的指南在这里：[https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html)。
- en: See also
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Drawing stacked bars* recipe
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制堆叠条形图*的方法'
- en: The *Combining graphs* recipe
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组合图表*的方法'
- en: Combining graphs
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合图表
- en: More than one graph can be combined in the same graph. In this recipe, we'll
    see how to present data in the same plot, on two different axes, and how to add
    more plots to the same graph.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在同一图表中组合多个图表。在这个方法中，我们将看到如何在同一图表上以两个不同的轴呈现数据，并如何在同一图表上添加更多的图表。
- en: Getting ready
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to install `matplotlib` in our virtual environment:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在虚拟环境中安装`matplotlib`：
- en: '[PRE65]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用的是macOS，可能会出现这样的错误——`RuntimeError: Python is not installed as a framework`。请参阅`matplolib`文档，了解如何解决此问题：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: How to do it...
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Import `matplotlib`:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`：
- en: '[PRE66]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Prepare the data to be displayed on the graph and the legends that should be
    displayed. Each of the lines is composed of the time label,  sales of `ProductA`,
    and sales of `ProductB`. Notice how `ProductB` has a much higher value than `A`:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备数据以在图表上显示，并显示应该显示的图例。每条线由时间标签、`ProductA`的销售额和`ProductB`的销售额组成。请注意，`ProductB`的值远高于`A`：
- en: '[PRE67]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Prepare the data in independent arrays:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备独立数组中的数据：
- en: '[PRE68]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Note that this expands and creates a list for each of the values.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这将扩展并为每个值创建一个列表。
- en: The values can also be expanded with this—`LABELS`, `VALUESA`, `VALUESB`, `VALUESC
    = ZIP(*DATA)`
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值也可以通过`LABELS`、`VALUESA`、`VALUESB`、`VALUESC = ZIP(*DATA)`进行扩展。
- en: 'Create a first subplot:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第一个子图：
- en: '[PRE69]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Create a bar graph with information about `VALUESA`:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个关于`VALUESA`的条形图：
- en: '[PRE70]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Create a different *Y* axis, and add information about `VALUESB` as a line
    plot:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个不同的*Y*轴，并将`VALUESB`的信息添加为线图：
- en: '[PRE71]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Create another subplot and fill it with `VALUESC`:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个子图，并用`VALUESC`填充它：
- en: '[PRE72]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Display the graph:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图表：
- en: '[PRE73]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The result will be displayed in a new window:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将显示在一个新窗口中：
- en: '![](assets/ba4d0d65-86cb-462a-a017-9b5bc32a8d21.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba4d0d65-86cb-462a-a017-9b5bc32a8d21.png)'
- en: How it works...
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: After importing the module, the data is presented in step 2 in the *How to do
    it…* section in a convenient way, which will likely be similar to the way the
    data was originally stored. Step 3 is a preparation step that splits the data
    into different arrays for the next steps.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 导入模块后，数据以一种方便的方式呈现在“如何做…”部分的第2步中，这很可能类似于数据最初的存储方式。第3步是一个准备步骤，将数据分割成不同的数组，以便进行下一步。
- en: Step 4 creates a new `.subplot`. This splits the full drawing into two elements.
    The parameters are number of rows, columns, and selected subplot. So, we create
    two subplots in a column and drew in the first one.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步创建一个新的`.subplot`。这将把整个图形分成两个元素。参数是行数、列数和所选的子图。因此，我们在一列中创建了两个子图，并在第一个子图中绘制。
- en: Step 5 prints a `.bar` plot in this subplot using `VALUESA` data, and labels
    the *Y* axis with `Sales A` using `.ylabel`.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 第5步使用`VALUESA`数据在此子图中打印了一个`.bar`图，并使用`.ylabel`标记了*Y*轴为`Sales A`。
- en: Step 6 creates a new *Y* axis with `.twinx`, drawing `VALUESB` now as a line
    plot through `.plot`. The label is marked with `.ylabel` as `Sales B`. The *X*
    axis is labeled using `.xticks`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 第6步使用`.twinx`创建一个新的*Y*轴，通过`.plot`绘制`VALUESB`为线图。标签使用`.ylabel`标记为`Sales B`。使用`.xticks`标记*X*轴。
- en: The `VALUESB` plot is set as red to avoid both plots having the same color.
    By default, the first color is the same in both cases, and that will lead to confusion.
    The data points are marked with the `'o'` option.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`VALUESB`图形设置为红色，以避免两个图形具有相同的颜色。默认情况下，两种情况下的第一种颜色是相同的，这将导致混淆。数据点使用`''o''`选项标记。'
- en: In step 7, we changed to the second subplot using `.subplot`. The plot prints `VALUESC`
    as a line, and again puts the labels on the *X* axis with `.xticker` and sets
    the minimum of the *Y* axis to `0`. The graph is then displayed in step 8.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7步中，我们使用`.subplot`切换到第二个子图。图形以线条形式打印`VALUESC`，然后使用`.xticker`在*X*轴上放置标签，并将*Y*轴的最小值设置为`0`。然后在第8步显示图形。
- en: There's more...
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Plots with multiple axes are complicated to read as a general rule. Use them
    only when there's a good reason to do so and the data is highly correlated.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，具有多个轴的图形很难阅读。只有在有充分理由这样做并且数据高度相关时才使用它们。
- en: By default, the *Y* axis in line plots will try to present information between
    the minimum and maximum *Y* values. Truncating the axis is normally not the best
    way to present information, as it can distort the perceived differences. For example,
    changing values in the range from 10 to 11 can look like a huge deal if the graph
    goes from 10 to 11, but this is less than 10%. Setting the *Y* axis minimum to
    `0` with `plt.gca().set_ylim(ymin=0)` is a good idea, especially with two different
    axes.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，线图中的*Y*轴将尝试呈现*Y*值的最小值和最大值之间的信息。通常截断轴不是呈现信息的最佳方式，因为它可能扭曲感知的差异。例如，如果图形从10到11，那么在10到11之间的值的变化可能看起来很重要，但这不到10%。将*Y*轴最小值设置为`0`，使用`plt.gca().set_ylim(ymin=0)`是一个好主意，特别是在有两个不同的轴时。
- en: The call to select the subplot will first go by row, then by column, so `.subplot(2,
    2, 3)` will select the subplot in the first column, second row.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 选择子图的调用将首先按行，然后按列进行，因此`.subplot(2, 2, 3)`将选择第一列，第二行的子图。
- en: The divided subplot grid can be changed. A first call to `.subplot(2, 2, 1)`
    and `.subplot(2, 2, 2)`, and then calling `.subplot(2, 1, 2)`, will create a structure
    with two small plots in the first row and a wider one in the second. Going back
    will overwrite previously drawn subplots.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 分割的子图网格可以更改。首先调用`.subplot(2, 2, 1)`和`.subplot(2, 2, 2)`，然后调用`.subplot(2, 1,
    2)`，将在第一行创建两个小图和第二行一个较宽的图的结构。返回将覆盖先前绘制的子图。
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
    In particular, the guide for legends is here: [https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend).
    For annotations, it is here: [https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html).
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。特别是，图例指南在这里：[https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend)。有关注释的信息在这里：[https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html)。
- en: See also
  id: totrans-370
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Drawing multiple lines* recipe
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制多条线*教程'
- en: The *Visualizing maps* recipe
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可视化地图*教程'
- en: Saving charts
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存图表
- en: Once a chart is ready, we can store it on the hard drive so it can be referenced
    in other documents. We'll see in this recipe how to save charts in different formats.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图表准备好，我们可以将其存储在硬盘上，以便在其他文档中引用。在本教程中，我们将看到如何以不同的格式保存图表。
- en: Getting ready
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to install `matplotlib` in our virtual environment:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在虚拟环境中安装`matplotlib`：
- en: '[PRE74]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'If you are using macOS, it''s possible that you get an error like this—`RuntimeError:
    Python is not installed as a framework`. See the `matplolib` documentation on
    how to fix it: [https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html).'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您使用的是macOS，可能会出现这样的错误——`RuntimeError: Python is not installed as a framework`。请参阅`matplolib`文档以了解如何解决此问题：[https://matplotlib.org/faq/osx_framework.html](https://matplotlib.org/faq/osx_framework.html)。'
- en: How to do it...
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Import `matplotlib`:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`matplotlib`：
- en: '[PRE75]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Prepare the data to be displayed on the graph and split it into different arrays:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备要显示在图表上的数据，并将其拆分为不同的数组：
- en: '[PRE76]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Create a bar graph with the data:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数据创建条形图：
- en: '[PRE77]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Save the graph to the hard drive:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图表保存到硬盘：
- en: '[PRE78]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: How it works...
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: After importing and preparing the data in steps 1 and 2 in the *How to do it…*
    section, the graph is generated in step 3 by calling `.bar`. A `.ylabel` is added
    and the *X* axis is labeled with the proper time description through `.xticks`.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在*如何做…*部分的第1和第2步中导入和准备数据后，通过调用`.bar`在第3步生成图表。添加了一个`.ylabel`，并通过`.xticks`标记了*X*轴的适当时间描述。
- en: Step 4 saves the file to the hard drive with the name `data.png`.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 第4步将文件保存到硬盘上，文件名为`data.png`。
- en: There's more...
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The resolution of the image can be determined through the `dpi` parameter.
    This will affect the size of the file. Use resolutions between `72` and `300`.
    Lower ones will be difficult to read, and higher ones won''t make sense unless
    the size of the graph is humongous:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 图像的分辨率可以通过`dpi`参数确定。这将影响文件的大小。使用`72`到`300`之间的分辨率。较低的分辨率将难以阅读，较高的分辨率除非图形的大小巨大，否则没有意义：
- en: '[PRE79]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '`matplotlib` understands how to store the most common file formats, such as
    JPEG, PDF, and PNG. It will be used automatically when the filename has the proper
    extension.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`了解如何存储最常见的文件格式，如JPEG、PDF和PNG。当文件名具有适当的扩展名时，它将自动使用。'
- en: Unless you have a specific requirement, use PNG. It is very efficient at storing
    graphs with limited colors when compared with other formats. If you need to find
    all the supported files, you can call `plt.gcf().canvas.get_supported_filetypes()`.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您有特定要求，否则请使用PNG。与其他格式相比，它在存储具有有限颜色的图形时非常高效。如果您需要找到所有支持的文件，可以调用`plt.gcf().canvas.get_supported_filetypes()`。
- en: The full `matplotlib` documentation can be found here: [https://matplotlib.org/](https://matplotlib.org/).
    In particular, the guide for legends is here: [https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend).
    For annotations, it is here: [https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`matplotlib`文档可以在这里找到：[https://matplotlib.org/](https://matplotlib.org/)。特别是图例指南在这里：[https://matplotlib.org/users/legend_guide.html#plotting-guide-legend](https://matplotlib.org/users/legend_guide.html#plotting-guide-legend)。有关注释的信息在这里：[https://matplotlib.org/users/annotations.html](https://matplotlib.org/users/annotations.html)。
- en: See also
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Plotting a simple sales graph* recipe
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制简单销售图*配方'
- en: The *Adding legends and annotations* recipe
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加图例和注释*配方'
