- en: Graphical User Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形用户界面
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Alerts—showing alert dialogs on graphical systems
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报-在图形系统上显示警报对话框
- en: Dialog boxes—how to ask simple questions with a dialog box
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话框-如何使用对话框询问简单问题
- en: ProgressBar dialog—how to provide a graphical progress dialog
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ProgressBar对话框-如何提供图形进度对话框
- en: Lists—how to implement a scrollable list of elements to pick from
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表-如何实现可滚动的元素列表以供选择
- en: Menus—how to create menus in a GUI application to allow multiple actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜单-如何在GUI应用程序中创建菜单以允许多个操作
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Python comes with a feature that is rarely shipped with a programming language:
    a built-in **graphical user interface** (**GUI**) library.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python带有一个编程语言很少提供的功能：内置的**图形用户界面**（**GUI**）库。
- en: Python ships with a working version of the `Tk` widgets toolkit, which can be
    controlled through the `tkinter` module provided by the standard library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python附带了一个可通过标准库提供的`tkinter`模块控制的`Tk`小部件工具包的工作版本。
- en: The `Tk` toolkit actually is used through a simple language called `Tcl`. All
    `Tk` widgets can be controlled through the `Tcl` commands.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tk`工具包实际上是通过一种称为`Tcl`的简单语言使用的。所有`Tk`小部件都可以通过`Tcl`命令进行控制。'
- en: 'Most of these commands are very simple, and take the following form:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些命令都非常简单，采用以下形式：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, something such as the following would lead to a button (identified
    as `mybutton`) with a red `"click here"` text:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下内容会导致一个按钮（标识为`mybutton`）上有红色的“点击这里”文本：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As those commands are usually relatively simple, Python ships with a built-in
    `Tcl` interpreter and uses it to drive the `Tk` widgets.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些命令通常相对简单，Python附带了一个内置的`Tcl`解释器，并使用它来驱动`Tk`小部件。
- en: Nowadays, nearly everyone, even the more hardcore computer users, are used to
    relying on GUIs for many of their tasks, especially for simple applications that
    require basic interactions, such as picking a choice, confirming an entry, or
    showing some progress. The usage of a GUI can therefore be pretty convenient.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，几乎每个人，甚至更加专注的计算机用户，都习惯于依赖GUI来完成他们的许多任务，特别是对于需要基本交互的简单应用程序，例如选择选项，确认输入或显示一些进度。因此，使用GUI可能非常方便。
- en: With graphical applications, the user frequently has no need to go through the
    help page of the application, read the documentation, and get through the options
    provided by the application to learn their specific syntax. GUIs have been providing
    a consistent interaction language for decades and are a good way to keep the entry
    barrier to your software low, if used properly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图形应用程序，用户通常无需查看应用程序的帮助页面，阅读文档并浏览应用程序提供的选项以了解其特定的语法。 GUI已经提供了几十年的一致交互语言，如果正确使用，是保持软件入门门槛低的好方法。
- en: As Python ships with what you need to create powerful console applications and
    also good GUIs, the next time you need to create a new tool it might be a good
    idea to stop thinking for a moment about what your users will find more convenient
    and head to `tkinter` if your choice is for a graphical application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python提供了创建强大的控制台应用程序和良好的GUI所需的一切，因此下次您需要创建新工具时，如果您选择图形应用程序，也许停下来考虑一下您的用户会发现什么更方便，前往`tkinter`可能是一个不错的选择。
- en: While `tkinter` can be limited compared to powerful toolkits, such as Qt or
    GTK, it surely is a fully platform-independent solution that is good enough for
    most applications.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`tkinter`与强大的工具包（如Qt或GTK）相比可能有限，但它确实是一个完全独立于平台的解决方案，对于大多数应用程序来说已经足够好了。
- en: Alerts
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报
- en: 'The most simple type of GUI is the alert. Just print something to inform the
    user of a result or event in a graphical box:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的GUI类型是警报。只需在图形框中打印一些内容以通知用户结果或事件：
- en: '![](assets/ca5ecdd4-5d78-49d5-a9d8-50c84ff5b921.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ca5ecdd4-5d78-49d5-a9d8-50c84ff5b921.png)'
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Alerts in `tkinter` are managed by the `messagebox` object and we can create
    one simply by asking `messagebox` to show one for us:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`tkinter`中的警报由`messagebox`对象管理，我们可以通过要求`messagebox`为我们显示一个来创建一个：'
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once we have our `alert` helper in place, we can initialize a `Tk` interpreter
    and show as many alerts as we want:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了`alert`助手，我们可以初始化`Tk`解释器并显示我们想要的多个警报：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If everything worked as expected, we should see a pop-up dialog and, once dismissed,
    a new one should come up with `Hello Again`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按预期工作，我们应该看到一个弹出对话框，一旦解除，新的对话框应该出现“再见”。
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `alert` function itself is just a thin wrapper over what `tkinter.messagebox`
    provides.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert`函数本身只是`tkinter.messagebox`提供的一个薄包装。'
- en: 'There are three types of message boxes we can show: `error`, `warning`, and
    `info`. If an unsupported kind of dialog box is requested, we just reject it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以显示三种类型的消息框：`error`，`warning`和`info`。如果请求了不支持的对话框类型，我们会拒绝它：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each kind of dialog box is shown by relying on a different method of the `messagebox`.
    The information boxes are shown using `messagebox.showinfo`, while errors are
    shown using `messagebox.showerror`, and so on.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每种对话框都是通过依赖`messagebox`的不同方法来显示的。信息框使用`messagebox.showinfo`显示，而错误使用`messagebox.showerror`显示，依此类推。
- en: 'So, we grab the relevant method of `messagebox`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们获取`messagebox`的相关方法：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, we call it to display our box:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用它来显示我们的框：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `alert` function is very simple, but there is one more thing that we need
    to keep in mind.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert`函数非常简单，但还有一件事情我们需要记住。'
- en: The `tkinter` library works by interacting with `Tk` through its own interpreter
    and environment, and this has to be created and started.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`tkinter`库通过与`Tk`的解释器和环境交互来工作，必须创建和启动它。'
- en: If we don't start one ourselves, `tkinter` will start one for us as soon as
    it needs to send some commands. But, this leads to an empty main window always
    being created.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们自己不开始，`tkinter`需要在需要发送一些命令时立即为我们启动一个。但是，这会导致始终创建一个空的主窗口。
- en: So, if you use `alert` as it is, you will get your alert, but you will also
    get empty windows in the corner of your screen.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您像这样使用`alert`，您将收到警报，但您也会在屏幕角落看到空窗口。
- en: 'To avoid this, we need to initialize the `Tk` environment ourselves and disable
    the main window, as we don''t have any use for it:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们需要自己初始化`Tk`环境并禁用主窗口，因为我们对它没有任何用处：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then we can show as many alerts as we want, without the risk of leaking empty
    unwanted windows around the screen.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以显示任意数量的警报，而不会出现在屏幕周围泄漏空的不需要的窗口的风险。
- en: Dialog boxes
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话框
- en: Dialog boxes are the most simple and common interaction a user interface can
    provide. Asking for one simple input, such as a number, text, or yes/no, handles
    many needs of interaction with a user in simple applications.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框是用户界面可以提供的最简单和最常见的交互。询问一个简单的输入，比如数字、文本或是是/否，可以满足简单应用程序与用户交互的许多需求。
- en: '`tkinter` comes with dialogs for most cases, but it might be hard to spot them
    all if you don''t already know the library. As a pointer, all dialog boxes provided
    by `tkinter` share a very similar signature, so it''s easy to make a `dialog`
    function that allows us to show them all:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`tkinter`提供了大多数情况下的对话框，但如果你不知道这个库，可能很难找到它们。作为一个指针，`tkinter`提供的所有对话框都有非常相似的签名，因此很容易创建一个`dialog`函数来显示它们：'
- en: '![](assets/f0d43442-8643-4db8-a0bc-86a03b14bcdf.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f0d43442-8643-4db8-a0bc-86a03b14bcdf.png)'
- en: 'The dialog box will look as shown:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框将如下所示：
- en: '![](assets/28197129-73c7-41d8-ab0b-85af9edb584b.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/28197129-73c7-41d8-ab0b-85af9edb584b.png)'
- en: 'The window to open a file appears as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件的窗口如下截图所示：
- en: '![](assets/04fb7778-7b6f-42c7-8c77-b323c93b81e0.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/04fb7778-7b6f-42c7-8c77-b323c93b81e0.png)'
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We can create a `dialog` function to hide the minor differences between dialog
    types and call the appropriate dialog depending on the kind of request:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个`dialog`函数来隐藏对话框类型之间的细微差异，并根据请求的类型调用适当的对话框：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can then test our `dialog` method to show all the possible dialog types,
    and show back the user choice:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以测试我们的`dialog`方法来显示所有可能的对话框类型，并显示用户的选择：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The kinds of dialog provided by `tkinter` are divided between the `messagebox`,
    `simpledialog`, and `filedialog` modules (you might consider `colorchooser` too,
    but it's rarely needed).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`tkinter`提供的对话框类型分为`messagebox`、`simpledialog`和`filedialog`模块（你可能也考虑`colorchooser`，但它很少需要）。'
- en: 'So, depending on the kind of dialog that the user wants, we need to pick the
    right module and call the function required to show it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据用户想要的对话框类型，我们需要选择正确的模块并调用所需的函数来显示它：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If none of the modules expose a function to show the requested kind of dialog
    (all the functions are named `ask*`), the loop will finish without ever breaking
    and thus will enter the `else` clause, raising an exception to notify the caller
    that the requested type is unavailable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有模块公开函数来显示请求的对话框类型（所有函数都以`ask*`命名），循环将在没有打破的情况下结束，因此将进入`else`子句，引发异常以通知调用者请求的类型不可用。
- en: If the loop instead exited with `break`, the `widget` variable will point to
    the module that is able to show the requested dialog and the `show` variable will
    lead to the function actually being able to show it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果循环以`break`退出，`widget`变量将指向能够显示请求的对话框的模块，而`show`变量将导致实际能够显示它的函数。
- en: Once we have the right function in place, we need to account for the minor differences
    between the various dialog functions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了正确的函数，我们需要考虑各种对话框函数之间的细微差异。
- en: The major one is related to `messagebox` dialogs that have a `message` argument,
    while the `simpledialog` dialog has a prompt argument to show the message for
    the user. The `filedialog` doesn't require any message at all.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的问题与`messagebox`对话框有一个`message`参数有关，而`simpledialog`对话框有一个提示参数来显示用户的消息。`filedialog`根本不需要任何消息。
- en: 'This is done by creating a basic dictionary of options with the custom-provided
    options and the `title` option, as it is always available in all kinds of dialog:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过创建一个基本的选项字典和自定义提供的选项以及`title`选项来完成的，因为在所有类型的对话框中始终可用：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then the `message` option is replaced with the right name (or skipped) by looking
    up in the `dialog._argsmap` dictionary the mapping from the name of the `dialog` argument
    to the expected one.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过查找`dialog._argsmap`字典中从`dialog`参数的名称到预期参数的映射，将`message`选项替换为正确的名称（或跳过）。
- en: 'For example, in the case of `simpledialog`, the `{''message'': ''prompt''}`
    mapping is used. The `message` variable is looked up in function local variables
    (`locals()[arg]`) and it''s then assigned to the options dictionary with the `prompt`
    name as specified by `replacement`. Then, the function assigned to `show` is finally
    called to display the dialog:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，在`simpledialog`的情况下，使用`{''message'': ''prompt''}`映射。`message`变量在函数局部变量中查找（`locals()[arg]`），然后将其分配给选项字典，`prompt`名称由`replacement`指定。然后，最终调用分配给`show`的函数来显示对话框：'
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ProgressBar dialog
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进度条对话框
- en: When doing a long-running operation, the most frequent way to inform a user
    of progress is through a progress bar.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行长时间运行的操作时，向用户显示进度的最常见方式是通过进度条。
- en: 'While running an operation in a thread, we can update a progress bar to show
    that the operation is moving forward and give the user a hint about the time it
    might take to complete the work:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在线程中运行操作时，我们可以更新进度条以显示操作正在向前推进，并向用户提示可能需要完成工作的时间：
- en: '![](assets/e0ec92d1-34a2-46f5-92e1-6616f7d96c3f.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e0ec92d1-34a2-46f5-92e1-6616f7d96c3f.png)'
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The `simpledialog.SimpleDialog` widget is used to create simple dialogs with
    some text and buttons. We are going to leverage it to display a progress bar instead
    of the buttons:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`simpledialog.SimpleDialog`小部件用于创建带有一些文本和按钮的简单对话框。我们将利用它来显示进度条而不是按钮：'
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then `ProgressDialog` can be created and we can use a background thread to
    let the operation progress (like a download), and then update the progress bar
    whenever our operation moves forward:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以创建`ProgressDialog`，并使用后台线程让操作进展（比如下载），然后在我们的操作向前推进时更新进度条：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Our dialog itself is mostly based on the `simpledialog.SimpleDialog` widget.
    We create it and then set `self.default = None` to prevent the user from being
    able to close the dialog by pressing the `<Return>` key, and we also set `self.default
    = None` to prevent the user from closing the dialog by pressing the button on
    the window. We want the dialog to stay open until it has been completed:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的对话框本身主要基于`simpledialog.SimpleDialog`小部件。我们创建它，然后设置`self.default = None`以防止用户能够通过按`<Return>`键关闭对话框，并且我们还设置`self.default
    = None`以防止用户通过按窗口上的按钮关闭对话框。我们希望对话框保持打开状态，直到完成为止：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then we actually need the progress bar itself, which will be shown below the
    text message, and we also move the dialog in front, because we want the user to
    be aware that something is happening:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们实际上需要进度条本身，它将显示在文本消息下方，并且我们还将对话框移到前面，因为我们希望用户意识到正在发生某事：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the last part, we need to schedule `self._update`, which will continue to
    loop until the dialog quits updating the progress bar if there is a new progress
    value available. The progress value can be provided through `self._queue`, where
    we will insert new progress values whenever they are provided through the `set_progress`
    method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一部分，我们需要安排`self._update`，它将继续循环，直到对话框停止更新进度条，如果`self._queue`中有新的进度值可用。进度值可以通过`self._queue`提供，我们将在通过`set_progress`方法提供新的进度值时插入新的进度值：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We need to go through `Queue` because the dialog with the progress bar update
    would block the whole program.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过`Queue`进行，因为具有进度条更新的对话框会阻塞整个程序。
- en: While the `Tkinter mainloop` function is running (which is called by `simpledialog.SimpleDialog.go()`), nothing
    else can move forward.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Tkinter mainloop`函数运行时（由`simpledialog.SimpleDialog.go()`调用），没有其他东西可以继续进行。
- en: So the UI and the download must proceed in two different threads, and as we
    can't update the UI from a different thread, we must send the progress values
    from the thread that produces them to the UI thread that will consume them to
    update the progress bar.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，UI和下载必须在两个不同的线程中进行，并且由于我们无法从不同的线程更新UI，因此必须从生成它们的线程将进度值发送到将其消耗以更新进度条的UI线程。
- en: 'The thread performing the operation and producing the progress updates can
    then send those progress updates to the UI thread through the `set_progress` method:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行操作并生成进度更新的线程可以通过`set_progress`方法将这些进度更新发送到UI线程：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On the other side, the UI thread will be calling the `self._update` method
    continuously (every 200 ms), to check if there is an update request in `self._queue`,
    and then applying it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，UI线程将不断调用`self._update`方法（每200毫秒一次），以检查`self._queue`中是否有更新请求，然后应用它：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'At the end of the update, the method will reschedule itself:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新结束时，该方法将重新安排自己：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This way, we will go on forever checking if there is an update for the progress
    bar every 200 ms until `self.root mainloop` is quit.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们将永远继续每200毫秒检查进度条是否有更新，直到`self.root mainloop`退出。
- en: 'To use `ProgressDialog`, we simulated a download taking 5 seconds. This was
    done by creating the dialog itself:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用`ProgressDialog`，我们模拟了一个需要5秒钟的下载。这是通过创建对话框本身完成的：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And then we started a background thread that goes on for 5 seconds, updating
    the progress every half a second:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们启动了一个后台线程，持续5秒，每隔半秒更新一次进度：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The update happens because the thread calls `p.set_progress`, which will set
    a new progress value in the queue, signaling to the UI thread that there is a
    new progress value to set.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 更新发生是因为线程调用`p.set_progress`，它将在队列中设置一个新的进度值，向UI线程发出新的进度值设置信号。
- en: Once the download is completed, the progress dialog will be exited through `p.done(0)`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载完成，进度对话框将通过`p.done(0)`退出。
- en: 'Once we have our download thread in place, we can actually display the progress
    dialog and wait for it to quit:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的下载线程就位，我们就可以显示进度对话框并等待其退出：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Lists
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: When more than two choices are available to the user, the best way to list them
    is through lists. The `tkinter` module provides a `ListBox`, which allows us to
    show a set of entries in a scrollable widget for the user to pick from.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户有两个以上的选择时，最好的列出它们的方式是通过列表。`tkinter`模块提供了一个`ListBox`，允许我们在可滚动的小部件中显示一组条目供用户选择。
- en: 'We can use this to implement a dialog where the user can pick one of many options
    and grab the chosen one:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用它来实现一个对话框，用户可以从中选择许多选项并抓取所选项：
- en: '![](assets/3d954334-8b5f-4610-b619-ac1f212250db.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d954334-8b5f-4610-b619-ac1f212250db.png)'
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: The `simpledialog.Dialog` class can be used to implement simple OK/cancel dialogs,
    and allows us to provide any body of the dialog with custom content.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`simpledialog.Dialog`类可用于实现简单的确定/取消对话框，并允许我们提供具有自定义内容的对话框主体。'
- en: 'We can use it to add a message and a list to a dialog and let the user make
    a selection:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用它向对话框添加消息和列表，并让用户进行选择：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once we have `ChoiceDialog`, we can display it with a list of items and have
    the user pick one or cancel the dialog:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有了`ChoiceDialog`，我们可以显示它并提供一个项目列表，让用户选择一个或取消对话框：
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `ChoiceDialog.selection` attribute will always contain the selected item,
    or `None` if the dialog was canceled.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChoiceDialog.selection`属性将始终包含所选项目，如果对话框被取消，则为`None`。'
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`simpledialog.Dialog` creates a dialog with `Ok` and `Cancel` buttons by default
    and only provides a title.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`simpledialog.Dialog`默认创建一个带有`确定`和`取消`按钮的对话框，并且只提供一个标题。'
- en: 'In our case, apart from creating the dialog itself, we also want to keep the
    message of the dialog and the items available for selection, so that we can show
    them to the user. Also, by default, we want to set that no item was selected yet.
    Finally, we can call `simpledialog.Dialog.__init__`, as once it''s called, the
    main thread will block and we can''t do anything else until the dialog is dismissed:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，除了创建对话框本身之外，我们还希望保留对话框的消息和可供选择的项目，以便我们可以向用户显示它们。此外，默认情况下，我们希望设置尚未选择任何项目。最后，我们可以调用`simpledialog.Dialog.__init__`，一旦调用它，主线程将阻塞，直到对话框被解除：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can add any additional content by overriding the `simpledialog.Dialog.body`
    method. This method can add more widgets as children of the dialog main body and
    can return a specific widget that should have focus:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过重写`simpledialog.Dialog.body`方法来添加任何其他内容。这个方法可以将更多的小部件添加为对话框主体的子级，并且可以返回应该具有焦点的特定小部件：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `body` method is created within `simpledialog.Dialog.__init__`, so it's
    called before blocking the main thread.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`body`方法是在`simpledialog.Dialog.__init__`中创建的，因此在阻塞主线程之前调用它。'
- en: After the content of the dialog is in place, the dialog will block waiting for
    a button to be clicked by the user.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框的内容放置好后，对话框将阻塞等待用户点击按钮。
- en: If the `cancel` button is clicked, the dialog is dismissed automatically and
    the `ChoiceDialog.selection` will remain `None`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击`cancel`按钮，则对话框将自动关闭，`ChoiceDialog.selection`将保持为`None`。
- en: 'If `Ok` is clicked, instead, the `ChoiceDialog.validate` method is called to
    check that the choice is valid. Our `validate` implementation will check if the
    user actually selected an entry before clicking `Ok` or not, and will only let
    the user dismiss the dialog if there was a selected item:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击`Ok`，则调用`ChoiceDialog.validate`方法来检查选择是否有效。我们的`validate`实现将检查用户在点击`Ok`之前是否实际选择了条目，并且只有在有选定项目时才允许用户关闭对话框：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If the validation passes, the `ChoiceDialog.apply` method is called to confirm
    the choice and we just set in `self.selection` the name of the selected item,
    so that it''s accessible for the caller once the dialog is not visible anymore:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证通过，将调用`ChoiceDialog.apply`方法来确认选择，然后我们只需在`self.selection`中设置所选项目的名称，这样一旦对话框不再可见，调用者就可以访问它了：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This makes it possible to show the dialog and read back the selected value
    from the `selection` attribute once it''s dismissed:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得可以显示对话框并在其关闭后从`selection`属性中读取所选值成为可能：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Menus
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 菜单
- en: 'When your application allows you to perform more than one action, a menu is
    frequently the most common way to allow access to those actions:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序允许执行多个操作时，菜单通常是允许访问这些操作的最常见方式：
- en: '![](assets/ca3d5d42-6626-40f4-925f-c9ef2ff3a557.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ca3d5d42-6626-40f4-925f-c9ef2ff3a557.png)'
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The `tkinter.Menu` class allows us to create menus, submenus, actions, and
    separators. So, it provides everything we might need to create basic menus in
    our GUI-based application:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`tkinter.Menu`类允许我们创建菜单、子菜单、操作和分隔符。因此，它提供了我们在基于GUI的应用程序中创建基本菜单所需的一切：'
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `set_menu` function allows us to create whole menu hierarchies easily out
    of nested dictionaries of actions and submenus:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_menu`函数允许我们轻松地从嵌套的操作和子菜单的字典中创建整个菜单层次结构：'
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you are using Python 3.6+, you can also avoid `OrderedDict` and use a plain
    dictionary, as the dictionary will already be ordered.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Python 3.6+，还可以避免使用`OrderedDict`，而是使用普通字典，因为字典已经是有序的。
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Provided a window, the `set_menu` function creates a `Menu` object and sets
    it as the window menu:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个窗口，`set_menu`函数创建一个`Menu`对象并将其设置为窗口菜单：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Then it populates the menu with the choices provided through the `choices` argument.
    That is expected to be a dictionary where the key is the name of the menu entry
    and the value is the callable that should be called when the choice is selected,
    or another dictionary if the choice should lead to a submenu. Finally, it supports
    separators when both the label and the choice are set to `-`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它使用通过`choices`参数提供的选择填充菜单。这个参数预期是一个字典，其中键是菜单条目的名称，值是在选择时应调用的可调用对象，或者如果选择应导致子菜单，则是另一个字典。最后，当标签和选择都设置为`-`时，它支持分隔符。
- en: 'The menu is populated by traversing the tree of options through a recursive
    function that calls `Menu.add_command`, `Menu.add_cascade`, and `Menu.add_separator`, depending
    on the encountered entry:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单通过递归函数遍历选项树来填充，该函数调用`Menu.add_command`、`Menu.add_cascade`和`Menu.add_separator`，具体取决于遇到的条目：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
