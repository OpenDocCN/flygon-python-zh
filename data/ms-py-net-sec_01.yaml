- en: Working with Python Scripting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python脚本
- en: Throughout this chapter, we will introduce Python scripting, collections, functions,
    exception-handling, and object-oriented programming. We will review how to create
    classes, objects, and Python's particularities to initialize objects, including
    the use of special attributes and methods. Also it will be introduce a methodology,
    tools, and development environments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Python脚本、集合、函数、异常处理和面向对象编程。我们将回顾如何创建类、对象以及Python初始化对象的特点，包括使用特殊属性和方法。还将介绍一种方法、工具和开发环境。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Programming and installing Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程和安装Python
- en: Data structures and Python collections
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据结构和Python集合
- en: Python functions and managing exceptions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python函数和异常处理
- en: Object-Oriented Programming in Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的面向对象编程
- en: The OMSTD methodology including how to manage modules, packages, dependencies,
    passing parameters, working with virtual environments, and the `STB` module for
    Python scripting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括如何管理模块、包、依赖项、传递参数、使用虚拟环境以及Python脚本的`STB`模块的OMSTD方法论
- en: The main development environments for script-development in Python
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python脚本开发的主要开发环境
- en: Interacting and debugging with Python IDE
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Python IDE交互和调试
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before you start reading this book, you should know the basics of Python programming,
    such as the basic syntax, variable type, data type tuple, list dictionary, functions,
    strings, and methods. Two versions, 3.6.5 and 2.7.14, are available at [python.org/downloads/](http://python.org/downloads/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始阅读本书之前，您应该了解Python编程的基础知识，如基本语法、变量类型、数据类型元组、列表字典、函数、字符串和方法。在[python.org/downloads/](http://python.org/downloads/)上提供了两个版本，3.6.5和2.7.14。
- en: 'Examples and source code for this chapter are available in the GitHub repository
    in the `chapter 1` folder: [https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例和源代码可在GitHub存储库的`chapter 1`文件夹中找到：[https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security)。
- en: Programming and installing Python
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程和安装Python
- en: Python is a byte-compiled, object-oriented programming language that is easy
    to read and write. The language is great for security professionals because it
    allows for the rapid creation of tests as well as reusable items for future use.
    As many security tools are written in Python, it offers many opportunities for
    extending and adding features to tools that are already written.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种易于阅读和编写的字节编译的面向对象编程语言。这种语言非常适合安全专业人员，因为它允许快速创建测试以及可重用的项目以供将来使用。由于许多安全工具都是用Python编写的，它为对已经编写的工具进行扩展和添加功能提供了许多机会。
- en: Introducing Python scripting
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Python脚本
- en: In this book, we will work with two versions. If you use a Linux Distribution,
    such as Debian or Kali, there will be no problems since Python is multi-platform
    and version 2.7 comes installed by default in the majority of linux distributions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用两个版本。如果您使用Debian或Kali等Linux发行版，那么不会有问题，因为Python是多平台的，并且在大多数Linux发行版中默认安装了2.7版本。
- en: Why choose Python?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Python？
- en: 'There are many reasons to choose Python as your main programming language:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多选择Python作为主要编程语言的原因：
- en: Multi-platform and open source language.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多平台和开源语言。
- en: Simple, fast, robust, and powerful language.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单、快速、强大的语言。
- en: Many libraries, modules, and projects focused on computer security are written
    in Python.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多关于计算机安全的库、模块和项目都是用Python编写的。
- en: There is a lot of documentation and a very large user community.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有很多文档和一个非常庞大的用户社区。
- en: It is a language designed to make robust programs with a few lines of code,
    something that in other languages is only possible after including many characteristics
    of each language.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种设计用于用几行代码创建强大程序的语言，而在其他语言中，只有在包含每种语言的许多特性之后才有可能实现。
- en: Ideal for prototypes and rapid-concept tests (PoC).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于原型和快速概念测试（PoC）。
- en: Multi-platform
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多平台
- en: The Python interpreter is available on many platforms (Linux, DOS, Windows,
    and macOS X). The code that we create in Python is translated into bytecode when
    it is executed for the first time. For that reason, in systems in which we are
    going to execute our programs or scripts developed in Python, we need the interpreter
    to be installed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python解释器可在许多平台上使用（Linux、DOS、Windows和macOS X）。我们在Python中创建的代码在第一次执行时会被翻译成字节码。因此，在我们要执行Python中开发的程序或脚本的系统中，我们需要安装解释器。
- en: Object-Oriented Programming
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: Object-oriented programming is a paradigm where programs are defined in terms
    of "object classes" that communicate with each other by sending messages. It is
    an evolution of the paradigms of procedural, structured, and modular programming,
    and is implemented in languages such as Java, Python, or C ++.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程是一种范式，程序是通过“对象类”来定义的，它们通过发送消息来相互通信。它是程序化、结构化和模块化编程范式的演变，并在Java、Python或C++等语言中实现。
- en: Classes define the behavior and available state that is specified in objects,
    and allow a more direct representation of the concepts necessary for modeling
    a problem, allowing the user to define new types.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类定义了对象中指定的行为和可用状态，并允许更直接地表示建模问题所需的概念，允许用户定义新类型。
- en: 'Objects are characterized by:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的特点是：
- en: An identity that differentiates them from each other
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分它们之间的身份
- en: Defining their behavior through methods
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过方法定义它们的行为
- en: Defining their state through properties and attributes
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过属性和属性定义它们的状态
- en: Classes allow grouping in a new type of data and the functionalities associated
    with objects, favoring separation between the details of the implementation of
    the essential properties for its use. In this way, the goal is to not show more
    than the relevant information, hiding the state and the internal methods of the
    class, it is known as "encapsulation," and it is a principle inherited from modular
    programming.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 类允许在新类型的数据和与对象相关的功能之间进行分组，有利于在实现的细节和其使用的基本属性之间进行分离。这样，目标是不显示更多的相关信息，隐藏类的状态和内部方法，这被称为“封装”，它是继承自模块化编程的原则。
- en: An important aspect in the use of classes is that they are not manipulated directly,
    but serve to define new types. A class defines properties and behaviors for objects
    (instances of a class). A class acts as a template for a set of objects, which
    are said to belong to the class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用类的一个重要方面是它们不是直接操作的，而是用来定义新类型。类为对象（类的实例）定义属性和行为。类充当一组对象的模板，这些对象被认为属于该类。
- en: 'The most important techniques used in object-oriented programming are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程中使用的最重要的技术包括：
- en: '**Abstraction**: Objects can perform tasks, interact with other objects, or
    modify and report their status without the need to communicate how those actions
    are performed.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抽象**：对象可以执行任务，与其他对象交互，或者修改和报告它们的状态，而无需沟通这些操作是如何执行的。'
- en: '**Encapsulation**: Objects prevent the modification of their internal state
    or a call to internal methods by other objects, and are only related through a
    clear interface that defines how they relate to other objects.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封装**：对象通过清晰的接口阻止其他对象修改其内部状态或调用内部方法，并且只通过这个接口与其他对象相关联。'
- en: '**Polymorphism**: Different behaviors may be associated with the same name.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多态性**：不同的行为可以与相同的名称相关联。'
- en: '**Inheritance**: Objects are related to others by establishing hierarchies,
    and it is possible that some objects inherit the properties and methods of other
    objects, extending their behavior and/or specializing. Objects are grouped like
    this in classes that form hierarchies.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继承**：对象通过建立层次结构与其他对象相关联，有可能一些对象继承其他对象的属性和方法，扩展它们的行为和/或专业化。对象以这种方式分组在形成层次结构的类中。'
- en: Obtaining and installing Python
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取和安装Python
- en: Installation of Python is fast on Linux and Windows platforms. Windows users
    can use an installer in an easy way that makes configuration work for you. In
    Linux, you have the option to build the installation from the source code, but
    it's not mandatory, and you can use classic package-management dependencies, such
    as apt-get.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux和Windows平台上，Python的安装速度很快。Windows用户可以使用一个简单的安装程序，使配置工作变得容易。在Linux上，您可以选择从源代码构建安装，但这并不是强制的，您可以使用经典的包管理依赖，如apt-get。
- en: Many Linux distributions come preinstalled with Python 2\. When installing Python
    3 on such a system, it is important to keep in mind that we are not replacing
    the installation of Python 2\. In this way, when we install Python 3, it can be
    installed in parallel with Python 2 on the same machine. After installing Python
    3, you can call the python interpreter using the Python3 executable.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Linux发行版预装了Python 2。在这样的系统上安装Python 3时，重要的是要记住我们并没有替换Python 2的安装。这样，当我们安装Python
    3时，它可以与同一台机器上的Python 2并行安装。安装Python 3后，可以使用Python3可执行文件调用python解释器。
- en: Installing Python on Windows
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Python
- en: 'Windows users can obtain the installer from the main Python site: [https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi](https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi).
    Just double-click the installer, and follow the steps to install it. It should
    create a directory at `C:/Python27/`; this directory will have the `Python.exe`
    interpreter as well as all of the default libraries installed.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可以从主Python网站获取安装程序：[https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi](https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi)。只需双击安装程序，然后按照安装步骤进行安装。它应该在`C:/Python27/`创建一个目录；这个目录将有`Python.exe`解释器以及所有默认安装的库。
- en: The Python installation allows you to customize where the environment will be
    installed. The default location for Python 2.7.14 is `C:\Python27`, although you
    can specify another location. This route will be relevant when looking for certain
    modules and tools.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Python安装允许您自定义环境的安装位置。Python 2.7.14的默认位置是`C:\Python27`，尽管您可以指定其他位置。当寻找特定模块和工具时，这个路径将是相关的。
- en: 'We can customize the installation if we want to include the documentation or
    install a series of utilities, such as the `pip` package manager or the IDLE development
    environment, to edit and execute scripts. It is recommended you leave the options
    marked so that it installs them and we have as complete an environment as possible:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要包括文档或安装一系列实用程序（如`pip`软件包管理器或IDLE开发环境，用于编辑和执行脚本），则可以自定义安装。建议您保留已标记的选项，以便安装它们，使我们拥有尽可能完整的环境：
- en: '![](assets/5d69cf39-2c64-4588-8b80-95fb8f541609.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5d69cf39-2c64-4588-8b80-95fb8f541609.png)'
- en: It is important to check the Add python.exe to the Path box. This will allow
    you to run Python directly from the command prompt from any path without having
    to go to the installation directory.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要检查“将python.exe添加到路径”框。这将允许您从任何路径直接从命令提示符运行Python，而无需转到安装目录。
- en: 'At the time of installing the version of Python for Windows, you can also see
    that it is available IDLE, an editor or IDE (Integrated Development Environment)
    of Python that will allow us to write and test the code. Once installed, we can
    verify that everything is correct:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Python版本的Windows时，您还可以看到IDLE可用，这是Python的编辑器或IDE（集成开发环境），它将允许我们编写和测试代码。安装完成后，我们可以验证一切是否正确：
- en: Open the folder where you have installed it
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开安装的文件夹
- en: Enter `C:\Python27\Lib\idlelib`
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`C:\Python27\Lib\idlelib`
- en: Run the `**idle.bat**` file with a double-click
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击运行`**idle.bat**`文件
- en: Another option we have for Windows users is WinPython, which is available at **[http://winpython.github.io](http://winpython.github.io).**
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户的另一个选择是WinPython，可以在**[http://winpython.github.io](http://winpython.github.io)**上找到。
- en: WinPython is a Python distribution; you can install it on Windows 7/8/10 operating
    systems for scientific and educational use.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: WinPython是一个Python发行版；您可以在Windows 7/8/10操作系统上安装它进行科学和教育用途。
- en: 'This distribution is something different from others because it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个发行版与其他发行版不同，因为它：
- en: '**Requires no installation**: WinPython lives entirely in its own directory,
    without any OS installation'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无需安装**：WinPython完全存在于自己的目录中，无需任何操作系统安装'
- en: '**Is portable**: You can easily zip your python project and install in other
    machines in an easy way'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**便携式**：您可以轻松地压缩您的Python项目并在其他机器上进行安装'
- en: Installing Python for Linux
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上安装Python
- en: 'Python is installed by default in most Gnu/Linux distributions. If we want
    to install it in Ubuntu or Debian-based distributions, we can do it through the
    `apt-get` package manager:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Python默认安装在大多数Gnu/Linux发行版中。如果我们想要在Ubuntu或基于Debian的发行版中安装它，我们可以通过`apt-get`软件包管理器来实现：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Python collections
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python集合
- en: In this section, we will review different types of data collections, such as
    as lists, tuples, and dictionaries. We will see methods and operations for managing
    these data structures and a practical example where we review the main use cases.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾不同类型的数据集合，如列表、元组和字典。我们将看到用于管理这些数据结构的方法和操作，以及一个实际示例，我们将在其中回顾主要用例。
- en: Lists
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: Lists in Python are equivalent to structures as dynamic vectors in programming
    languages such as C. We can express literals by enclosing their elements between
    a pair of brackets and separating them with commas. The first element of a list
    has index 0\. The indexing operator allows access to an element and is expressed
    syntactically by adding its index in brackets to the list, list [index].
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的列表相当于C等编程语言中的动态向量结构。我们可以通过在一对方括号之间封装它们的元素并用逗号分隔来表示文字。列表的第一个元素的索引为0。索引运算符允许访问元素，并通过在方括号中添加其索引来在列表中表达语法上：
- en: 'Consider the following example: a programmer can construct a list by appending
    items using the `append()` method, print the items, and then sort them before
    printing again. In the following example, we define a list of protocols and use
    the main methods of a Python list as append, index, and remove:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：程序员可以通过使用`append()`方法添加项目来构建列表，打印项目，然后在再次打印之前对它们进行排序。在以下示例中，我们定义了一个协议列表，并使用Python列表的主要方法，如append、index和remove：
- en: '[PRE1]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To access specific positions, we use the `index` method, and to delete an element,
    we use the remove method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问特定位置，我们使用`index`方法，要删除一个元素，我们使用remove方法：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To print out the whole protocol list, use the following code. This will loop
    through all the elements and print them:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印整个协议列表，请使用以下代码。这将循环遍历所有元素并将它们打印出来：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Lists also have methods, which help to manipulate the values inside them and allow
    us to store more than one variable inside it and provide a better method for sorting
    arrays of objects in Python. These are the most-used methods for manipulating
    lists:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 列表还有一些方法，可以帮助我们操纵其中的值，并允许我们在其中存储多个变量，并为Python中的对象数组提供更好的排序方法。这些是最常用的用于操纵列表的方法：
- en: '**.append(value):** Appends an element at the end of the list'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.append(value):** 在列表末尾添加一个元素'
- en: '**.count(''x''):** Gets the number of ''x'' in the list'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.count(''x''):** 获取列表中''x''的数量'
- en: '**.index(''x''):** Returns the index of ''x'' in the list'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.index(''x''):** 返回列表中''x''的索引'
- en: '**.insert(''y'',''x''):** Inserts ''x'' at location ''y'''
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.insert(''y'',''x''):** 在位置''y''插入''x'''
- en: '**.pop():** Returns the last element and also removes it from the list'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.pop():** 返回最后一个元素并从列表中删除它'
- en: '**.remove(''x''):** Removes the first ''x'' from the list'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.remove(''x''):** 从列表中删除第一个''x'''
- en: '**.reverse():** Reverses the elements in the list'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.reverse():** 反转列表中的元素'
- en: '**.sort():** Sorts the list alphabetically in ascending order, or numerically
    in ascending order'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.sort():** 按字母顺序升序或按数字顺序升序对列表进行排序'
- en: Reversing a List
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反转列表
- en: 'Another interesting operations that we have in lists is the one that offers
    the possibility of going back to the list through the `reverse ()` method:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在列表中拥有的另一个有趣的操作是通过`reverse()`方法返回列表的可能性：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Another way to do the same operation use the `-1` index. This quick and easy
    technique shows how you can access all the elements of a list in reverse order:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 执行相同操作的另一种方法是使用`-1`索引。这种快速简便的技术显示了如何以相反的顺序访问列表的所有元素：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Comprehension lists
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解列表
- en: Comprehension lists allow you to create a new list of iterable objects. Basically,
    they contain the expression that must be executed for each element inside the
    loop that iterates over each element.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 理解列表允许您创建一个可迭代对象的新列表。基本上，它们包含必须为迭代每个元素的循环内的表达式。
- en: 'The basic syntax is:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 基本语法是：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'List comprehensions can also be used to iterate over strings:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 列表理解也可以用于迭代字符串：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tuples
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: 'A tuple is like a list, but its size and elements are immutable, that is, its
    values cannot be changed nor can more elements be added than initially defined.
    A tuple is delimited by parentheses. If we try to modify an element of a tuple,
    we get an error indicating that the tuple object does not support the assignment
    of elements:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 元组类似于列表，但其大小和元素是不可变的，也就是说，其值不能被更改，也不能添加比最初定义的更多的元素。元组由括号括起来。如果我们尝试修改元组的元素，我们会收到一个错误，指示元组对象不支持元素的赋值：
- en: '![](assets/a3849051-44d7-4322-833b-2bceec82c9a3.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3849051-44d7-4322-833b-2bceec82c9a3.png)'
- en: Dictionaries
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: The Python dictionary data structure allows us to associate values with keys.
    A key is any immutable object. The value associated with a key can be accessed
    with the indexing operator. In Python, dictionaries are implemented using hash
    tables.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Python字典数据结构允许我们将值与键关联起来。键是任何不可变对象。与键关联的值可以通过索引运算符访问。在Python中，使用哈希表实现字典。
- en: 'A Python dictionary is a `storage` method for key:value pairs. Python dictionaries
    are enclosed in curly brackets, `{}`.Dictionaries, also called associative matrices,
    which owe their name to collections that relate a key and a value. For example,
    let''s look at a dictionary of protocols with names and numbers:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Python字典是一种存储键值对的方法。Python字典用大括号`{}`括起来。字典，也称为关联矩阵，得名于将键和值相关联的集合。例如，让我们看一个具有名称和数字的协议字典：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The limitation with dictionaries is that we cannot create multiple values with
    the same key. This will overwrite the previous value of the duplicate keys. Operations
    on dictionaries are unique. We can combine two distinct dictionaries into one
    by using the `update` method. Also, the `update` method will merge existing elements
    if they conflict:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的限制在于我们不能使用相同的键创建多个值。这将覆盖重复键的先前值。字典的操作是唯一的。我们可以使用`update`方法将两个不同的字典合并为一个。此外，`update`方法将在元素冲突时合并现有元素：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will return the following dictionary:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下字典：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The first value is the key and the second is the value associated with the
    key. As a key, we can use any immutable value: we could use numbers, strings,
    booleans, or tuples, but not lists or dictionaries, since they are mutable.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值是键，第二个是与键关联的值。作为键，我们可以使用任何不可变的值：我们可以使用数字、字符串、布尔值或元组，但不能使用列表或字典，因为它们是可变的。
- en: The main difference between dictionaries and lists or tuples is that the values
    stored in a dictionary are accessed not by their index, because they have no order,
    but by their key, using the [] operator again.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 字典与列表或元组的主要区别在于，存储在字典中的值不是通过它们的索引访问的，因为它们没有顺序，而是通过它们的键，再次使用`[]`运算符。
- en: 'As in lists and tuples, you can also use this operator to reassign values:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与列表和元组一样，您也可以使用此运算符重新分配值：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When constructing a dictionary, each key is separated from its value by a colon,
    and we separate items by commas. The `.keys ()` method will return a list of all
    keys of a dictionary and the `.items ()` method will return a complete list of
    elements in the dictionary.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 构建字典时，每个键都用冒号与其值分隔，我们用逗号分隔项。`.keys()`方法将返回字典的所有键的列表，`.items()`方法将返回字典中所有元素的完整列表。
- en: 'Following are examples using these methods:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用这些方法的示例：
- en: '`services.keys()` is method that will return all the keys in dictionary.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services.keys()`是一个方法，将返回字典中的所有键。'
- en: '`services.items()` is method that will return the entire list of items in dictionary.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services.items()`是一个方法，将返回字典中所有项目的完整列表。'
- en: '![](assets/81e31826-beac-4f5c-aaca-e6bdafed7960.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/81e31826-beac-4f5c-aaca-e6bdafed7960.png)'
- en: 'From the point of view of performance, the key within a dictionary is converted
    to a hash value when it is stored in order to save space and improve performance
    when searching or indexing the dictionary. It is also possible to print the dictionary
    and browse the keys in a specific order. The following code extracts the dictionary
    elements and then orders them:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从性能的角度来看，字典中的键在存储时被转换为哈希值，以节省空间并在搜索或索引字典时提高性能。还可以打印字典并按特定顺序浏览键。以下代码提取字典元素，然后对其进行排序：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can extract keys and values for each element in the dictionary:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以提取字典中每个元素的键和值：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, you might want to iterate over a dictionary and extract and display
    all the "key:value" pairs:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可能希望遍历字典并提取和显示所有的“键:值”对：
- en: '[PRE41]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Python functions and managing exceptions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python函数和异常管理
- en: In this section, we will review Python functions and managing exceptions. We
    will see some examples for declaring and using both in our script code. We'll
    also review the main exceptions we can find in Python for include in our scripts.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾Python函数和异常管理。我们将看到一些声明和在脚本代码中使用它们的示例。我们还将回顾我们可以在Python中找到的主要异常，以便在我们的脚本中包含。
- en: Python functions
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python函数
- en: In Python, functions provide organized blocks of reusable code. Typically, this
    allows a programmer to write a block of code to perform a single, related action.
    While Python provides many built-in functions, a programmer can create user-defined
    functions. In addition to helping us to program and debug by dividing the program
    into parts, the functions also allow us to reuse code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，函数提供了有组织的可重用代码块。通常，这允许程序员编写一块代码来执行单个相关操作。虽然Python提供了许多内置函数，程序员可以创建用户定义的函数。除了通过将程序分成部分来帮助我们编程和调试外，函数还允许我们重用代码。
- en: Python functions are defined using the def keyword with the function name, followed
    by the function parameters. The body of the function consists of Python statements
    that are to be executed. At the end of the function, you can choose to return
    a value to the function caller, or by default, it will return the None object
    if you do not specify a return value.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Python函数是使用def关键字定义的，后面跟着函数名和函数参数。函数的主体由要执行的Python语句组成。在函数的末尾，您可以选择向函数调用者返回一个值，或者默认情况下，如果您没有指定返回值，它将返回None对象。
- en: 'For example, we can define a function that, given a sequence of numbers and
    an item passed by a parameter, returns True if the element is within the sequence
    and False otherwise:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以定义一个函数，给定一个数字序列和一个通过参数传递的项目，如果元素在序列中，则返回True，否则返回False：
- en: '[PRE42]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Managing exceptions
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常管理
- en: Exceptions are errors detected by Python during program execution. When the
    interpreter encounters an exceptional situation, such as trying to divide a number
    by 0 or trying to access a file that does not exist, it generates or throws an
    exception, informing the user that there is a problem.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 异常是Python在程序执行期间检测到的错误。当解释器遇到异常情况时，例如尝试将数字除以0或尝试访问不存在的文件时，它会生成或抛出异常，通知用户存在问题。
- en: If the exception is not captured, the execution flow is interrupted and the
    information associated with the exception in the console is displayed so that
    the programmer can solve the problem.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未捕获异常，执行流程将被中断，并在控制台中显示与异常相关的信息，以便程序员解决问题。
- en: 'Let''s see a small program that would throw an exception when trying to divide
    1 by 0\. If we execute it, we will get the following error message:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个小程序，当尝试将1除以0时会引发异常。如果我们执行它，将会得到以下错误消息：
- en: '![](assets/13968d79-9053-41f1-bfb8-a73c3e2f14fc.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/13968d79-9053-41f1-bfb8-a73c3e2f14fc.png)'
- en: The first thing that is shown is the traceback, which consists of a list of
    the calls that caused the exception. As we see in the stack trace, the error was
    caused by the call to calculate () of line 7, which in turn calls division (1,
    0) on line 5, and ultimately the execution of the a/b sentence of division line
    2.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先显示的是回溯，它由导致异常的调用列表组成。正如我们在堆栈跟踪中看到的那样，错误是由第7行的calculate()调用引起的，该调用又在第5行调用division(1,
    0)，最终在division的第2行执行a/b语句。
- en: 'The Python language provides an exception-handling capability to do just this.
    We use try/except statements to provide exception-handling. Now, the program tries
    to execute the division by zero. When the error occurs, our exception-handling
    catches the error and prints a message to the screen:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Python语言提供了异常处理能力来做到这一点。我们使用try/except语句来提供异常处理。现在，程序尝试执行除以零的操作。当错误发生时，我们的异常处理捕获错误并在屏幕上打印消息：
- en: '![](assets/994fd36f-cd81-417b-b530-651d019d1475.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/994fd36f-cd81-417b-b530-651d019d1475.png)'
- en: 'In the following example, we try to create a file-type f object. If the file
    is not passed as a parameter, an exception of the IOError type is thrown, which
    we capture thanks to our try-except:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们尝试创建一个文件类型的f对象。如果未将文件作为参数传递，则会抛出IOError类型的异常，我们通过try-except捕获到这个异常：
- en: '![](assets/867ef05a-d3b5-41e1-9ce7-d4d4dbaa17b6.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/867ef05a-d3b5-41e1-9ce7-d4d4dbaa17b6.png)'
- en: 'Some of the exceptions available by default are listed here (the class from
    which they are derived is in parentheses):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下提供的一些异常列在此处（它们派生自的类在括号中）：
- en: '**BaseException**: Class from which all exceptions inherit.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BaseException**：所有异常继承的类。'
- en: '**Exception** (BaseException): Super class of all exceptions that are not output.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常（BaseException）：所有不输出的异常的超类。
- en: '**ZeroDivisionError** (ArithmeticError): Launched when the second argument
    of a division or module operation was `0`.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ZeroDivisionError**（ArithmeticError）：当除法或模块运算的第二个参数为`0`时引发。'
- en: '**EnvironmentError** (StandardError): Parent class of errors related to input/output.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EnvironmentError**（StandardError）：与输入/输出相关的错误的父类。'
- en: '**IOError** (EnvironmentError): Error in an input/output operation.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IOError**（EnvironmentError）：输入/输出操作中的错误。'
- en: '**OSError** (EnvironmentError): Error in a system call.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OSError**（EnvironmentError）：系统调用中的错误。'
- en: '**ImportError** (StandardError): The module or the module element that you
    wanted to import was not found.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ImportError**（StandardError）：未找到要导入的模块或模块元素。'
- en: Python as an OOP language
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python作为面向对象的语言
- en: In this section, we will review Object-Oriented Programming and inheritance
    in Python.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾Python中的面向对象编程和继承。
- en: Object-Oriented programming is one of the paradigms most used today. While it
    fits a lot of situations that we can find in day-to-day life, in Python, we can
    combine it with other paradigms to get the best out of the language and increase
    our productivity while maintaining an optimal code design.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程是当今最常用的范例之一。虽然它适用于我们在日常生活中可以找到的许多情况，在Python中，我们可以将其与其他范例结合起来，以充分利用语言并在保持最佳代码设计的同时提高我们的生产力。
- en: Python is an object-oriented language and allows you to define classes and instantiate
    objects from these definitions. A block headed by a class statement is a class
    definition. The functions that are defined in the block are its methods, also
    called member functions.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种面向对象的语言，允许您定义类并从这些定义实例化对象。由class语句开头的块是类定义。在块中定义的函数是其方法，也称为成员函数。
- en: 'The way Python creates objects is with the class keyword. A Python object is
    a collection of methods, variables, and properties. You can create many objects
    with the same class definition. Here is a simple example of a protocol object
    definition:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Python创建对象的方式是使用class关键字。Python对象是方法、变量和属性的集合。您可以使用相同的类定义创建许多对象。以下是协议对象定义的简单示例：
- en: You can find the following code in the `protocol.py` file.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`protocol.py`文件中找到以下代码。
- en: '[PRE48]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `__init__` method is a special method that, as its name suggests, act as
    a constructor method to perform any initialization process that is necessary.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__`方法是一个特殊的方法，正如其名称所示，它充当构造方法来执行任何必要的初始化过程。'
- en: The first parameter of the method is a special keyword and we use the self identifier
    for reference the current object. It is a reference to the object itself and provides
    a way to access its attributes and methods.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的第一个参数是一个特殊的关键字，我们使用self标识符来引用当前对象。它是对对象本身的引用，并提供了一种访问其属性和方法的方式。
- en: The self parameter is equivalent to the pointer that can be found in languages
    such as C ++ or Java. In Python, self is a reserved word of the language and is
    mandatory, it is the first parameter of conventional methods and through it you
    can access the attributes and methods of the class.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: self参数相当于在C++或Java等语言中找到的指针。在Python中，self是语言的保留字，是强制性的，它是常规方法的第一个参数，并且通过它可以访问类的属性和方法。
- en: 'To create an object, write the name of the class followed by any parameter
    that is necessary in parentheses. These parameters are the ones that will be passed
    to the `__init__` method, which is the method that is called when the class is
    instantiated:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建对象，请在类名后面写上任何必要的参数，这些参数将传递给`__init__`方法，这是在实例化类时调用的方法：
- en: '[PRE49]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now that we have created our object, we can access its attributes and methods
    through the object.attribute and `object.method()` syntax:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的对象，我们可以通过object.attribute和`object.method()`语法访问其属性和方法：
- en: '[PRE50]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Inheritance
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承
- en: 'The main concepts of object-oriented programming languages are: encapsulation,
    inheritance, and polymorphism. In an object-oriented language, objects are related
    to others by establishing hierarchies, and it is possible that some objects inherit
    the properties and methods of other objects, extending their behavior and/or specializing.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程语言的主要概念是：封装、继承和多态。在面向对象语言中，对象通过建立层次关系与其他对象相关联，有可能一些对象继承其他对象的属性和方法，扩展它们的行为和/或特化。
- en: Inheritance allows us to generate a new class from another, inheriting its attributes
    and methods, adapting or expanding them as necessary. To indicate that a class
    inherits from another class, we need to put the name of the class that is inherited
    between parentheses.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 继承允许我们从另一个类生成一个新类，继承其属性和方法，根据需要进行调整或扩展。要指示一个类从另一个类继承，我们需要将被继承的类的名称放在括号中。
- en: In OOPS terminology, it is said that "B inherits from A," "B is a class derived
    from A," "A is the base class of B," or "A is a superclass of B."
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程术语中，有人说“B继承自A”，“B是从A派生出来的类”，“A是B的基类”，或者“A是B的超类”。
- en: 'This facilitates the reuse of the code, since you can implement the basic behaviors
    and data in a base class and specialize them in the derived classes:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于代码的重用，因为你可以在基类中实现基本行为和数据，并在派生类中对其进行特化：
- en: '![](assets/6b5697ad-3499-43a3-8f4a-278cea025cb2.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6b5697ad-3499-43a3-8f4a-278cea025cb2.png)'
- en: The OMSTD methodology and STB Module for Python scripting
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OMSTD方法和Python脚本的STB模块
- en: OMSTD stands for Open Methodology for Security Tool Developers, it is a methodology
    and set of good practices in Python for the development of security tools. This
    guide is intended for developments in Python, although in reality you can extend
    the same ideas to other languages. At this point, I will discuss the methodology
    and some tricks we can follow to make the code more readable and reusable.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: OMSTD代表安全工具开发的开放方法论，它是Python开发安全工具的方法和一套良好实践。本指南适用于Python开发，尽管实际上你可以将相同的想法扩展到其他语言。在这一点上，我将讨论方法和一些技巧，我们可以遵循使代码更易读和可重用。
- en: Python packages and modules
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python包和模块
- en: The Python programming language is a high-level and general-use language with
    clear syntax and a complete standard library. Often referred to as a scripting
    language, security experts have highlighted Python as a language to develop information-security
    toolkits. The modular design, the human-readable code, and the fully-developed
    library set provide a starting point for security researchers and experts to build
    tools.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程语言是一种高级通用语言，具有清晰的语法和完整的标准库。通常被称为脚本语言，安全专家们已经将Python作为开发信息安全工具包的语言。模块化设计、易读的代码和完全开发的库集为安全研究人员和专家构建工具提供了一个起点。
- en: Python comes with a comprehensive standard library that provides everything
    from integrated modules that provide access to simple I/O, to platform-specific
    API calls. The beauty of Python is the modules, packages, and individual frames
    contributed by the users. The bigger a project is, the greater the order and the
    separation between the different parties must be. In Python, we can make this
    division using the modules concept.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Python自带了一个全面的标准库，提供了从提供简单I/O访问的集成模块到特定平台API调用的一切。Python的美妙之处在于用户贡献的模块、包和个体框架。项目越大，不同方面之间的顺序和分离就越重要。在Python中，我们可以使用模块的概念来实现这种分离。
- en: What is a module in Python?
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的模块是什么？
- en: A module is a collection of functions, classes, and variables that we can use
    from a program. There is a large collection of modules available with the standard
    Python distribution.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是一个我们可以从程序中使用的函数、类和变量的集合。标准Python发行版中有大量的模块可用。
- en: The import statement followed by the name of the module gives us access to the
    objects defined in it. An imported object becomes accessible from the program
    or module that imports it, through the identifier of the module, point operator,
    and the identifier of the object in question.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 导入语句后面跟着模块的名称，使我们能够访问其中定义的对象。导入的对象通过模块的标识符、点运算符和所需对象的标识符，可以从导入它的程序或模块中访问。
- en: 'A module can be defined as a file that contains Python definitions and declarations.
    The name of the file is the name of the module with the `.py` suffix attached.
    We can begin by defining a simple module that will exist in a .py file within
    the same directory as our `main.py` script that we are going to write:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以被定义为包含Python定义和声明的文件。文件的名称是附加了`.py`后缀的模块的名称。我们可以从定义一个简单的模块开始，该模块将存在于与我们将要编写的`main.py`脚本相同的目录中：
- en: '`main.py`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.py`'
- en: '`my_module.py`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`my_module.py`'
- en: 'Within this `my_module.py` file, we’ll define a simple `test()` function that
    will print “This is my first module”:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在`my_module.py`文件中，我们将定义一个简单的`test()`函数，它将打印“This is my first module”：
- en: '[PRE51]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Within our `main.py` file, we can then import this file as a module and use
    our newly-defined test() method, like so:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`main.py`文件中，我们可以将这个文件作为一个模块导入，并使用我们新定义的test()方法，就像这样：
- en: '[PRE52]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: That is all we need to define a very simple `python` module within our Python
    programs.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要在Python程序中定义一个非常简单的`python`模块的全部内容。
- en: Difference Between a Python Module and a Python Package
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python模块和Python包之间的区别
- en: When we are working with Python, it is important to understand the difference
    between a Python module and a `Python` package. It is important differentiate
    them; a package is a module that includes one or more modules.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Python时，了解Python模块和`Python`包之间的区别很重要。重要的是要区分它们；包是包含一个或多个模块的模块。
- en: Part of software development is to add functionality based on modules in a programming
    language. As new methods and innovations are made, developers supply these functional
    building blocks as modules or packages. Within the Python network, the majority
    of these modules and packages are free, with many, including the full source code,
    allowing you to enhance the behavior of the supplied modules and to independently
    validate the code.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发的一部分是基于编程语言中的模块添加功能。随着新的方法和创新的出现，开发人员提供这些功能构建块作为模块或包。在Python网络中，其中大多数模块和包都是免费的，其中包括完整的源代码，允许您增强提供的模块的行为并独立验证代码。
- en: Passing parameters in Python
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中传递参数
- en: To develop this task, the best thing is to use the `argparse` module that comes
    installed by default when you install Python.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这个任务，最好使用默认安装Python时自带的`argparse`模块。
- en: For more information, you can check out the official website: [https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，您可以查看官方网站：[https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html)。
- en: 'The following is an example of how to use it in our scripts:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在我们的脚本中使用它的示例：
- en: You can find the following code in the filename `testing_parameters.py`
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在文件名`testing_parameters.py`中找到以下代码
- en: '[PRE53]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In the params variable, we have the parameters that the user has entered from
    the command line. To access them, you have to use the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在params变量中，我们有用户从命令行输入的参数。要访问它们，您必须使用以下内容：
- en: '[PRE54]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'One of the interesting options is that it is possible to indicate the type
    of parameter with the type attribute. For example, if we want a certain parameter
    to be treated as if it were an integer, we could do it in the following way:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个有趣的选项是可以使用type属性指示参数的类型。例如，如果我们希望某个参数被视为整数，我们可以这样做：
- en: '[PRE55]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Another thing that could help us to have a more readable code is to declare
    a class that acts as a global object for the parameters:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件有助于使我们的代码更易读的事情是声明一个充当参数全局对象的类：
- en: '[PRE56]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'For example, if we want to pass several parameters at the same time to a function,
    we could use this global object, which is the one that contains the global execution
    parameters. For example, if we have two parameters, we can construct the object
    in this way:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要同时向函数传递多个参数，我们可以使用这个全局对象，其中包含全局执行参数。例如，如果我们有两个参数，我们可以这样构建对象：
- en: You can find the below code in the filename `params_global.py`
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在文件名`params_global.py`中找到以下代码
- en: '[PRE57]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: In the previous script, we can see that we obtain parameters with the `argparse`
    module and we encapsulate these parameters in an object with the Parameters class.With
    this practice, we get encapsulated parameters in an object to facilitate the retrieval
    of these parameters from different points of the script.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个脚本中，我们可以看到我们使用`argparse`模块获取参数，并将这些参数封装在Parameters类的对象中。通过这种做法，我们可以在对象中封装参数，以便从脚本的不同点轻松检索这些参数。
- en: Managing dependencies in a Python project
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python项目中管理依赖项
- en: If our project has dependencies with other libraries, the ideal would be to
    have a file where we have these dependencies, so that the installation and distribution
    of our module is as simple as possible. For this task, we can create a file called
    `requirements.txt`, which, if we invoke it with the pip utility, will lower all
    the dependencies that the module in question needs.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的项目依赖于其他库，理想情况是有一个文件，其中包含这些依赖项，以便我们的模块的安装和分发尽可能简单。为此任务，我们可以创建一个名为`requirements.txt`的文件，如果我们使用pip实用程序调用它，将降低所讨论模块需要的所有依赖项。
- en: 'To install all the dependencies using pip:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pip安装所有依赖项：
- en: '[PRE58]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Here, `pip` is the `Python` package and dependency manager whereas `requirements.txt`
    is the file where all the dependencies of the project are detailed.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`pip`是`Python`包和依赖项管理器，而`requirements.txt`是详细列出项目所有依赖项的文件。
- en: Generating the requirements.txt file
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成requirements.txt文件
- en: We also have the possibility to create the `requirements.txt` file from the
    project source code.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有可能从项目源代码创建`requirements.txt`文件。
- en: For this task, we can use the `pipreqs` module, whose code can be downloaded
    from the GitHub repository at [https://github.com/bndr/pipreqs](https://github.com/bndr/pipreqs)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为此任务，我们可以使用`pipreqs`模块，其代码可以从GitHub存储库下载：[https://github.com/bndr/pipreqs](https://github.com/bndr/pipreqs)
- en: In this way, the module can be installed either with the `pip install pipreqs` command
    or through the GitHub code repository using the` python setup.py install` command.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，该模块可以使用`pip install pipreqs`命令或通过GitHub代码存储库使用`python setup.py install`命令进行安装。
- en: 'For more information about the module, you can query the official pypi page:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 有关该模块的更多信息，您可以查询官方pypi页面：
- en: '[https://pypi.python.org/pypi/pipreqs](https://pypi.python.org/pypi/pipreqs).'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pypi.python.org/pypi/pipreqs](https://pypi.python.org/pypi/pipreqs)。'
- en: 'To generate the `requirements.txt` file, you have to execute the following
    command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成`requirements.txt`文件，您必须执行以下命令：
- en: '[PRE59]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Working with virtual environments
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚拟环境
- en: When working with Python, it is strongly recommended you use Python virtual
    environments. Virtual environments help separate the dependencies required for
    projects and keep our global directory clean of `project` packages. A virtual
    environment provides a separate environment for installing Python modules and
    an isolated copy of the Python executable file and associated files. You can have
    as many virtual environments as you need, which means that you can have multiple
    module configurations configured, and you can easily switch between them.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Python时，强烈建议您使用Python虚拟环境。虚拟环境有助于分离项目所需的依赖项，并保持我们的全局目录清洁，不受`project`包的影响。虚拟环境为安装Python模块提供了一个单独的环境，以及Python可执行文件和相关文件的隔离副本。您可以拥有尽可能多的虚拟环境，这意味着您可以配置多个模块配置，并且可以轻松地在它们之间切换。
- en: From version 3, Python includes a `venv` module, which provides this functionality.
    The documentation and examples are available at [https://docs.python.org/3/using/windows.html#virtual-environments](https://docs.python.org/3/using/windows.html#virtual-environments)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本3开始，Python包括一个`venv`模块，提供了这个功能。文档和示例可在[https://docs.python.org/3/using/windows.html#virtual-environments](https://docs.python.org/3/using/windows.html#virtual-environments)找到
- en: 'There is also a standalone tool available for earlier versions, which can be
    found at:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个独立的工具可用于早期版本，可以在以下位置找到：
- en: '[https://virtualenv.pypa.io/en/latest](https://virtualenv.pypa.io/en/latest)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://virtualenv.pypa.io/en/latest](https://virtualenv.pypa.io/en/latest)'
- en: Using virtualenv and virtualwrapper
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用virtualenv和virtualwrapper
- en: When you install a `Python` module in your local machine without using a virtual
    environment, you are installing it globally in the operating system. This installation
    usually requires a user root administrator and that `Python` module is installed
    for every user and every project.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在本地计算机上安装`Python`模块而不使用虚拟环境时，您正在全局在操作系统中安装它。此安装通常需要用户根管理员，并且该`Python`模块为每个用户和每个项目安装。
- en: At this point, the best practice is install a Python virtual environment if
    you need to work on multiple Python projects or you need a way to work with all
    associated libraries in many projects.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，最佳实践是如果您需要在多个Python项目上工作，或者您需要一种在许多项目中使用所有关联库的方法，那么最好安装Python虚拟环境。
- en: 'Virtualenv is a `Python` module that allows you to create virtual and isolated
    environments. Basically, you create a folder with all the executable files and
    modules needed for a project. You can install virtualenv with the following command:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Virtualenv是一个允许您创建虚拟和隔离环境的`Python`模块。基本上，您创建一个包含项目所需的所有可执行文件和模块的文件夹。您可以使用以下命令安装virtualenv：
- en: '[PRE60]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'To create a new virtual environment, create a folder and enter the folder from
    the command line:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的虚拟环境，请创建一个文件夹，并从命令行进入该文件夹：
- en: '[PRE61]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'For example, this creates a new environment called myVirtualEnv, which you
    must activate in order to use it:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这将创建一个名为myVirtualEnv的新环境，您必须激活它才能使用它：
- en: '[PRE62]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Executing this command will initiate a folder with the name indicated in your
    current working directory with all the executable files of Python and the `pip`
    module that allows you to install different packages in your virtual environment.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令将在您当前的工作目录中启动一个名为指示的文件夹，其中包含Python的所有可执行文件和允许您在虚拟环境中安装不同包的`pip`模块。
- en: Virtualenv is like a sandbox where all the dependencies of the project will
    be installed when you are working, and all modules and dependencies are kept separate.
    If users have the  same version of Python installed on their machine, the same
    code will work from the virtual environment without requiring any change.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Virtualenv就像一个沙盒，当您工作时，项目的所有依赖项都将被安装，所有模块和依赖项都是分开保存的。如果用户在他们的计算机上安装了相同版本的Python，那么相同的代码将在虚拟环境中运行，而不需要任何更改。
- en: '`Virtualenvwrapper` allows you to better organize all your virtually-managed
    environments on your machine and provides a more optimal way to use `virtualenv`.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`Virtualenvwrapper`允许您更好地组织在您的计算机上所有虚拟管理的环境，并提供更优化的方式来使用`virtualenv`。'
- en: 'We can use the pip command to install `virtualwrapper` since is available in
    the official Python repository. The only requirement to install it is to have
    previously installed `virtualenv`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用pip命令安装`virtualwrapper`，因为它在官方Python存储库中可用。安装它的唯一要求是先前安装了`virtualenv`：
- en: '[PRE63]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'To create a virtual environment in Windows, you can use the `virtualenv` command:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows中创建一个虚拟环境，您可以使用`virtualenv`命令：
- en: '[PRE64]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: When we execute previous command, we see this result:![](assets/9c138124-d264-4e0d-8fec-dff36f65f947.png)
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行前面的命令时，我们会看到这个结果：![](assets/9c138124-d264-4e0d-8fec-dff36f65f947.png)
- en: 'The execution of the `virtualenv` command in Windows generates four folders:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中执行`virtualenv`命令会生成四个文件夹：
- en: '![](assets/bb6e3654-f1bc-4599-a2a5-d9df33dd48b3.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb6e3654-f1bc-4599-a2a5-d9df33dd48b3.png)'
- en: 'In the scripts folder, there is a script called `activate.bat` to activate
    the virtual env. Once we have it active, we will have a clean environment of modules
    and libraries and we will have to download the dependencies of our project so
    that they are copied in this directory using the following code:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在scripts文件夹中，有一个名为`activate.bat`的脚本，用于激活虚拟环境。一旦激活，我们将拥有一个干净的模块和库环境，并且我们将不得不下载我们项目的依赖项，以便将它们复制到这个目录中，使用以下代码：
- en: '[PRE65]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This is the active folder when we can find the active.bat script:![](assets/fdaf0e17-8d1d-447b-9900-c131a7463a14.png)
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这是活动文件夹，当我们可以找到active.bat脚本时：![](assets/fdaf0e17-8d1d-447b-9900-c131a7463a14.png)
- en: The STB (Security Tools Builder) module
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: STB（Security Tools Builder）模块
- en: This tool will allow us to create a base project on which we can start to develop
    our own tool.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具将允许我们创建一个基础项目，我们可以在其上开始开发我们自己的工具。
- en: The official repository of this tool is [https://github.com/abirtone/STB](https://github.com/abirtone/STB).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具的官方存储库是[https://github.com/abirtone/STB](https://github.com/abirtone/STB)。
- en: For the installation, we can do it by downloading the source code and executing
    the `setup.py` file, which will download the dependencies that are in the `requirements.txt`
    file.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安装，我们可以通过下载源代码并执行`setup.py`文件来完成，这将下载`requirements.txt`文件中的依赖项。
- en: We can also do it with the `**pip install stb**` command.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`**pip install stb**`命令来完成。
- en: 'When executing the `**stb**` command, we get the following screen that asks
    us for information to create our project:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`**stb**`命令时，我们会得到以下屏幕，要求我们提供信息来创建我们的项目：
- en: '![](assets/3701b9aa-a4ca-4a4c-98e2-1bd182c5e566.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3701b9aa-a4ca-4a4c-98e2-1bd182c5e566.png)'
- en: 'With this command, we have an application skeleton with a `setup.py` file that
    we can execute if we want to install the tool as a command in the system. For
    this, we can execute:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，我们将获得一个带有`setup.py`文件的应用程序骨架，如果我们想要将该工具安装为系统中的命令，则可以执行：
- en: '[PRE66]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'When we execute the previous command, we obtain the next folder structure:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行前面的命令时，我们会得到下一个文件夹结构：
- en: '![](assets/de04da7e-a815-4716-8c4c-7efe0105b0d9.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de04da7e-a815-4716-8c4c-7efe0105b0d9.png)'
- en: 'This has also created a `port_scanning_lib` folder that contains the files
    that allow us to execute it:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这也创建了一个包含允许我们执行它的文件的`port_scanning_lib`文件夹：
- en: '[PRE67]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'If we execute the script with the help option (-h), we see that there is a
    series of parameters we can use:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用帮助选项（-h）执行脚本，我们会看到一系列可以使用的参数：
- en: '![](assets/7b7a9cde-99c8-4a5d-ad17-130bb441799e.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7b7a9cde-99c8-4a5d-ad17-130bb441799e.png)'
- en: 'We can see the code that has been generated in the `port_scanning.py` file:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在`port_scanning.py`文件中生成的代码：
- en: '[PRE68]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Here, we can see the parameters that are defined and that a `GlobalParameters`
    object is used to pass the parameters that are inside the `parsed_args` variable.
    The method to be executed is found in the `**api.py**` file.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到定义的参数，并且使用`GlobalParameters`对象传递`parsed_args`变量中的参数。要执行的方法在`**api.py**`文件中找到。
- en: 'For example, at this point, we could retrieve the parameters entered from the
    command line:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这一点上，我们可以从命令行中检索输入的参数：
- en: '[PRE69]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We can execute the script from the command line, passing our ip target as a
    parameter:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从命令行执行脚本，将我们的ip目标作为参数传递：
- en: '[PRE70]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'If we execute now, we see how we can obtain the first introduced parameter
    in the output:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在执行，我们可以看到如何在输出中获得首次引入的参数：
- en: '![](assets/46600ebf-0ca5-46dd-94bd-a8a7ef1f3af1.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/46600ebf-0ca5-46dd-94bd-a8a7ef1f3af1.png)'
- en: The main development environments for script-development
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本开发的主要开发环境
- en: In this section, we will review Pycharm and WingIDE as development environments
    for python scripting.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将审查Pycharm和WingIDE作为Python脚本的开发环境。
- en: Setting up a development environment
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: In order to rapidly develop and debug Python applications, it is absolutely
    necessary to use a solid IDE. If you want to try different options, we recommend
    you check out the list that is on the official site of Python, where they can
    see the tools according to their operating systems and their needs: [https://wiki.python.org/moin/IntegratedDevelopmentEnvironments](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速开发和调试Python应用程序，绝对必须使用稳固的IDE。如果您想尝试不同的选项，我们建议您查看Python官方网站上的列表，那里可以根据操作系统和需求查看工具：[https://wiki.python.org/moin/IntegratedDevelopmentEnvironments](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments)。
- en: 'Of all the environments, we will highlight the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有环境中，我们将强调以下内容：
- en: '**Pycharm: **[http://www.jetbrains.com/pycharm](http://www.jetbrains.com/pycharm)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pycharm: **[http://www.jetbrains.com/pycharm](http://www.jetbrains.com/pycharm)'
- en: '**Wing IDE**: [https://wingware.com](https://wingware.com)'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wing IDE**: [https://wingware.com](https://wingware.com)'
- en: Pycharm
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pycharm
- en: PyCharm is an IDE developed by the company Jetbrains, and is based on IntelliJ
    IDEA, the IDE of the same company, but focused on Java and is the base for Android
    Studio.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm是由Jetbrains公司开发的IDE，基于同一公司的IDE IntelliJ IDEA，但专注于Java，并且是Android Studio的基础。
- en: 'PyCharm is multi-platform and we can find binaries for Windows, Linux, and
    macOS X. There are two versions of PyCharm: **community** and **professional**,
    with differences in features related to integration with web frameworks and database
    support.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm是多平台的，我们可以在Windows，Linux和macOS X上找到二进制文件。 PyCharm有两个版本：社区和专业，其特性与Web框架集成和数据库支持相关。
- en: In this url we can see a comparison between community and professional edition: [http://www.jetbrains.com/pycharm](http://www.jetbrains.com/pycharm)
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在此网址上，我们可以看到社区版和专业版之间的比较：[http://www.jetbrains.com/pycharm](http://www.jetbrains.com/pycharm)
- en: 'The main advantages of this development environment are:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这个开发环境的主要优势是：
- en: Autocomplete, syntax highlighter, analysis tool and refactoring.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动完成，语法高亮，分析工具和重构。
- en: Integration with web frameworks such as Django, Flask, Pyramid, Web2Py, jQuery,
    and AngularJS.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Django，Flask，Pyramid，Web2Py，jQuery和AngularJS等Web框架集成。
- en: Advanced debugger.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级调试器。
- en: Compatible with SQLAlchemy (ORM), Google App Engine, Cython.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与SQLAlchemy（ORM），Google App Engine，Cython兼容。
- en: 'Connection with version-control systems: Git, CVS, Mercurial.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与版本控制系统的连接：Git，CVS，Mercurial。
- en: WingIDE
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WingIDE
- en: WingIDE is a multi-platform environment available for Windows, Mac, and Linux
    and provides all the functionalities at the level of debugging and variables-exploration.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: WingIDE是一个多平台环境，可在Windows，Mac和Linux上使用，并提供了与调试和变量探索相关的所有功能。
- en: WingIDE has a rich feature set that will easily support the development of sophisticated
    Python Applications. With WingIDE, you are able to inspect variables, stack arguments,
    and memory locations without the process changing any of their values before you
    can record them. Breakpoints are the most common feature that you will use when
    debugging a process. Wing Personal is the free version of this Python IDE, which
    can be found at [https://wingware.com/downloads/wingide-personal](https://wingware.com/downloads/wingide-personal)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: WingIDE具有丰富的功能集，可以轻松支持复杂Python应用程序的开发。使用WingIDE，您可以检查变量，堆栈参数和内存位置，而不会在记录它们之前更改任何值。断点是调试过程中最常用的功能。
    Wing Personal是这个Python IDE的免费版本，可以在[https://wingware.com/downloads/wingide-personal](https://wingware.com/downloads/wingide-personal)找到
- en: 'WingIDE uses the Python configuration installed in your system:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: WingIDE使用您系统中安装的Python配置：
- en: '![](assets/7f4752ae-8d20-42c4-9fb5-5b518dfa22b7.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f4752ae-8d20-42c4-9fb5-5b518dfa22b7.png)'
- en: Debugging with WingIDE
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WingIDE进行调试
- en: 'In this example, we are debugging a Python script that accepts two input parameters:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在调试一个接受两个输入参数的Python脚本：
- en: '![](assets/609a7394-7c59-4fe9-b2ca-ec68e47e0d8b.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/609a7394-7c59-4fe9-b2ca-ec68e47e0d8b.png)'
- en: 'An interesting topic is the possibility of adding a breakpoint in our program
    with the option `Add Breakpoint` option, in this way, we can debug and see the
    contents of the variables just at the point where we have established the breakpoint:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的话题是在我们的程序中添加断点的可能性，使用`Add Breakpoint`选项，这样，我们可以调试并查看变量的内容，就在我们设置断点的地方：
- en: '![](assets/d8fa3334-2f5d-4c58-b545-51588db32702.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d8fa3334-2f5d-4c58-b545-51588db32702.png)'
- en: We can set a breakpoint in the call to the `view_parameters` method.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在调用`view_parameters`方法时设置断点。
- en: 'To execute a script in debug mode with parameters, you have to edit the properties
    of the script and add the parameters that our script needs within the debug tag:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 要以调试模式执行带参数的脚本，您必须编辑脚本的属性，并在调试标记中添加脚本需要的参数：
- en: '![](assets/43824730-490c-44bd-8424-18ca965c8fe3.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43824730-490c-44bd-8424-18ca965c8fe3.png)'
- en: 'If we execute in debug mode with a breakpoint inside the function, we can see
    the content of the parameters in local **string variables**:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在函数内部执行调试模式并设置断点，我们可以看到本地**字符串变量**中参数的内容：
- en: '![](assets/c044a72c-4ac9-4fc8-af31-9f3f516ae7f3.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c044a72c-4ac9-4fc8-af31-9f3f516ae7f3.png)'
- en: 'In the following screenshot we can visualize the values of the params variable
    that contains the values we are debugging:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们可以可视化params变量的值，该变量包含我们正在调试的值：
- en: '![](assets/53fc3235-2be1-4166-aae1-ef20f6f7ea24.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53fc3235-2be1-4166-aae1-ef20f6f7ea24.png)'
- en: Summary
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install Python on the Windows and Linux operating
    systems. We reviewed the main data structures and collections, such as lists,
    tuples, and dictionaries. We also reviewed functions, managing exceptions, and
    how to create classes and objects, as well as the use of attributes and special
    methods. Then we looked at development environments and a methodology to introduce
    into programming with Python. OMSTD is a methodology and set of best practices
    in Python for the development of security tools. Finally, we reviewed the main
    development environments, PyCharm and WingIDE, for script-development in Python.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在Windows和Linux操作系统上安装Python。我们回顾了主要的数据结构和集合，如列表、元组和字典。我们还回顾了函数、异常处理的管理，以及如何创建类和对象，以及属性和特殊方法的使用。然后我们看了开发环境和一种介绍Python编程的方法论。OMSTD是Python开发安全工具的一种方法论和最佳实践。最后，我们回顾了主要的开发环境，PyCharm和WingIDE，用于Python脚本开发。
- en: In the next [chapter](a00521f9-8119-4877-aee1-b24e589cc432.xhtml), we will explore
    programming system packages for working with operating systems and filesystems,
    threads, and concurrency.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个[章节](a00521f9-8119-4877-aee1-b24e589cc432.xhtml)中，我们将探讨用于处理操作系统和文件系统、线程和并发的编程系统包。
- en: Questions
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the differences between Python 2.x and 3.x?
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 2.x和3.x之间有什么区别？
- en: What is the programming paradigm used by Python developers and what are the
    main concepts behind this paradigm?
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python开发人员使用的编程范式是什么，这个范式背后的主要概念是什么？
- en: What data structure in Python allows us to associate values with keys?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python中的哪种数据结构允许我们将值与键关联起来？
- en: What are the main development environments for Python scripting?
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python脚本的主要开发环境是什么？
- en: What is the methodology we can follow as a set of good practices in Python for
    the development of security tools?
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为Python开发安全工具的一套良好实践方法，我们可以遵循什么方法论？
- en: What is the `Python` module that helps to create isolated Python environments?
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有助于创建隔离的Python环境的`Python`模块是什么？
- en: Which tool allows us to create a base project on which we can start to develop
    our own tool?
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个工具允许我们创建一个基础项目，我们可以在其上开始开发我们自己的工具？
- en: How we can debug variables in Python development environments?
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在Python开发环境中调试变量？
- en: How we can add a breakpoint in `pycharm`?
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在`pycharm`中添加断点？
- en: How we can add a breakpoint in Wing IDE?
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在Wing IDE中添加断点？
- en: Further reading
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In these links, you will find more information about mentioned tools and official
    python documentation for search into some of the commented modules:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些链接中，您将找到有关提到的工具和官方Python文档的更多信息，以便查找其中一些被评论模块的信息：
- en: '[http://winpython.github.io](http://winpython.github.io)'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://winpython.github.io](http://winpython.github.io)'
- en: '[https://docs.python.org/2.7/library/](https://docs.python.org/2.7/library/)'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/2.7/library/](https://docs.python.org/2.7/library/)'
- en: '[https://docs.python.org/3.6/library/](https://docs.python.org/3.6/library/)'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3.6/library/](https://docs.python.org/3.6/library/)'
- en: '[https://virtualenv.pypa.io/en/latest](https://virtualenv.pypa.io/en/latest)'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://virtualenv.pypa.io/en/latest](https://virtualenv.pypa.io/en/latest)'
- en: '[https://wiki.python.org/moin/IntegratedDevelopmentEnvironments](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments)'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://wiki.python.org/moin/IntegratedDevelopmentEnvironments](https://wiki.python.org/moin/IntegratedDevelopmentEnvironments)'
