- en: Chapter 7. Storing Data in Our MySQL Database via Our GUI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。通过我们的GUI将数据存储在MySQL数据库中
- en: In this chapter we will enhance our Python GUI by connecting to a MySQL database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过连接到MySQL数据库来增强我们的Python GUI。
- en: Connecting to a MySQL database from Python
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Python连接到MySQL数据库
- en: Configuring the MySQL connection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置MySQL连接
- en: Designing the Python GUI database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计Python GUI数据库
- en: Using the SQL INSERT command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SQL INSERT命令
- en: Using the SQL UPDATE command
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SQL UPDATE命令
- en: Using the SQL DELETE command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SQL DELETE命令
- en: Storing and retrieving data from our MySQL database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从我们的MySQL数据库中存储和检索数据
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Before we can connect to a MySQL server, we have to have access to a MySQL server.
    The first recipe in this chapter will show you how to install the free MySQL Server
    Community Edition.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以连接到MySQL服务器之前，我们必须先访问MySQL服务器。本章的第一个步骤将向您展示如何安装免费的MySQL服务器社区版。
- en: After successfully connecting to a running instance of our MySQL server, we
    will design and create a database that will accept a book title, which could be
    our own journal or a quote we found somewhere on the Internet. We will require
    a page number for the book, which could be blank, and then we will `insert` the
    quote we like from a book, journal, website or friend into our MySQL database
    using our GUI built in Python 3.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 成功连接到我们的MySQL服务器运行实例后，我们将设计并创建一个数据库，该数据库将接受一本书的标题，这可能是我们自己的日记或者是我们在互联网上找到的引用。我们将需要书的页码，这可能为空白，然后我们将使用我们在Python
    3中构建的GUI将我们喜欢的引用从一本书、日记、网站或朋友中`插入`到我们的MySQL数据库中。
- en: We will insert, modify, delete and display our favorite quotes using our Python
    GUI to issue these SQL commands and to display the data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的Python GUI来插入、修改、删除和显示我们喜欢的引用，以发出这些SQL命令并显示数据。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**CRUD** is a database term you might come across that abbreviates the four
    basic SQL commands and stands for **Create**, **Read**, **Update**, and **Delete**.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**CRUD**是您可能遇到的一个数据库术语，它缩写了四个基本的SQL命令，代表**创建**、**读取**、**更新**和**删除**。'
- en: Connecting to a MySQL database from Python
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Python连接到MySQL数据库
- en: Before we can connect to a MySQL database, we have to connect to the MySQL server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以连接到MySQL数据库之前，我们必须先连接到MySQL服务器。
- en: In order to do this, we need to know the IP address of the MySQL server as well
    as the port it is listening on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要知道MySQL服务器的IP地址以及它所监听的端口。
- en: We also have to be a registered user with a password in order to get authenticated
    by the MySQL server.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须是一个注册用户，并且需要密码才能被MySQL服务器验证。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have access to a running MySQL server instance and you also
    need to have administrator privileges in order to create databases and tables.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问一个正在运行的MySQL服务器实例，并且您还需要具有管理员权限才能创建数据库和表。
- en: 'There is a free MySQL Community Edition available from the official MySQL website.
    You can download and install it on your local PC from: [http://dev.mysql.com/downloads/](http://dev.mysql.com/downloads/)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方MySQL网站上有一个免费的MySQL社区版可用。您可以从以下网址在本地PC上下载并安装它：[http://dev.mysql.com/downloads/](http://dev.mysql.com/downloads/)
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In this chapter, we are using MySQL Community Server (GPL) Release: 5.6.26.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用的是MySQL社区服务器（GPL）版本：5.6.26。
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In order to connect to MySQL, we first need to install a special Python connector
    driver. This driver will enable us to talk to the MySQL server from Python.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接到MySQL，我们首先需要安装一个特殊的Python连接器驱动程序。这个驱动程序将使我们能够从Python与MySQL服务器通信。
- en: 'The driver is freely available on the MySQL website and comes with a very nice
    online tutorial. You can install it from:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该驱动程序可以在MySQL网站上免费获得，并附带一个非常好的在线教程。您可以从以下网址安装它：
- en: '[http://dev.mysql.com/doc/connector-python/en/index.html](http://dev.mysql.com/doc/connector-python/en/index.html)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://dev.mysql.com/doc/connector-python/en/index.html](http://dev.mysql.com/doc/connector-python/en/index.html)'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you choose the installer that matches the version of Python you have
    installed. In this chapter, we are using the installer for Python 3.4.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 确保选择与您安装的Python版本匹配的安装程序。在本章中，我们使用Python 3.4的安装程序。
- en: '![How to do it…](graphics/B04829_07_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_07_01.jpg)'
- en: There is currently a little bit of a surprise at the end of the installation
    process. When we start the `.msi` installer we briefly see a MessageBox showing
    the progress of the installation, but then it disappears. We get no confirmation
    that the installation actually succeeded.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程的最后，目前有一点小小的惊喜。当我们启动`.msi`安装程序时，我们会短暂地看到一个显示安装进度的MessageBox，但然后它就消失了。我们没有收到安装是否成功的确认。
- en: One way to verify that we installed the correct driver, that lets Python talk
    to MySQL, is by looking into the Python site-packages directory.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 验证我们是否安装了正确的驱动程序，让Python能够与MySQL通信，一种方法是查看Python site-packages目录。
- en: If your site-packages directory looks similar to the following screenshot and
    you see some new files that have `mysql_connector_python` in their name, well,
    then we did indeed install something…
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的site-packages目录看起来类似于以下屏幕截图，并且您看到一些新文件的名称中带有`mysql_connector_python`，那么我们确实安装了一些东西...
- en: '![How to do it…](graphics/B04829_07_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_07_02.jpg)'
- en: 'The official MySQL website mentioned above comes with a tutorial, at the following
    URL:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述提到的官方MySQL网站附带一个教程，网址如下：
- en: '[http://dev.mysql.com/doc/connector-python/en/connector-python-tutorials.html](http://dev.mysql.com/doc/connector-python/en/connector-python-tutorials.html)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://dev.mysql.com/doc/connector-python/en/connector-python-tutorials.html](http://dev.mysql.com/doc/connector-python/en/connector-python-tutorials.html)'
- en: The online tutorial example on how to verify that installing the Connector/Python
    driver worked is a little bit misleading as it tries to connect to an employees'
    database that did not get created automatically, at least in my Community Edition.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在线教程示例中关于验证安装Connector/Python驱动程序是否成功的部分有点误导，因为它试图连接到一个员工数据库，这个数据库在我的社区版中并没有自动创建。
- en: The way to verify that our Connector/Python driver really did get installed
    is by just connecting to the MySQL server without specifying a particular database
    and then printing out the connection object.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 验证我们的Connector/Python驱动程序是否真的安装了的方法是，只需连接到MySQL服务器而不指定特定的数据库，然后打印出连接对象。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Replace the placeholder bracketed names `<adminUser>` and `<adminPwd>` with
    the real credentials you are using in your MySQL installation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用你在MySQL安装中使用的真实凭据替换占位符括号名称`<adminUser>`和`<adminPwd>`。
- en: If you installed the MySQL Community Edition, you are the administrator and
    will have chosen both a username and password during the MySQL installation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您安装了MySQL社区版，您就是管理员，并且在MySQL安装过程中会选择用户名和密码。
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If running the preceding code results in the following output printed to the
    console, then we are good.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行上述代码导致以下输出打印到控制台，则表示正常。
- en: '![How to do it…](graphics/B04829_07_03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_07_03.jpg)'
- en: If you are not able to connect to the MySQL server, then something probably
    went wrong during the installation. If this is the case, try uninstalling MySQL,
    reboot your PC, and then run the MySQL installation again. Double-check that you
    downloaded the MySQL installer to match your version of Python. If you have more
    than one version of Python installed, that sometimes leads to confusion as the
    one you installed last gets prepended to the Windows path environmental variable
    and some installers just use the first Python version they can find in this location.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法连接到MySQL服务器，那么在安装过程中可能出了问题。如果是这种情况，请尝试卸载MySQL，重新启动您的PC，然后再次运行MySQL安装程序。仔细检查您下载的MySQL安装程序是否与您的Python版本匹配。如果您安装了多个版本的Python，有时会导致混淆，因为您最后安装的版本会被添加到Windows路径环境变量中，并且一些安装程序只会使用在此位置找到的第一个Python版本。
- en: That happened to me when I installed a Python 32-bit version in addition to
    my 64-bit version and I was puzzled why some of my downloaded modules did not
    work.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我安装了Python 32位版本并且我困惑为什么一些我下载的模块无法工作时，这种情况发生了。
- en: The installers downloaded the 32-bit modules, which are incompatible with a
    64-bit version of Python.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序下载了32位模块，这些模块与64位版本的Python不兼容。
- en: How it works…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to connect our GUI to a MySQL server, we need to be able to connect
    to the server with administrative privileges if we want to create our own database.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的GUI连接到MySQL服务器，如果我们想创建自己的数据库，我们需要能够以管理员权限连接到服务器。
- en: If the database already exists, then we just need the authorization rights to
    connect, insert, update, and delete data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库已经存在，那么我们只需要连接、插入、更新和删除数据的授权权限。
- en: We will create a new database on a MySQL server in the next recipe.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个教程中，我们将在MySQL服务器上创建一个新的数据库。
- en: Configuring the MySQL connection
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置MySQL连接
- en: In the previous recipe, we used the shortest way to connect to a MySQL server
    by hard-coding the credentials required for authentication into the `connection`
    method. While this is a fast approach for early development, we definitely do
    not want to expose our MySQL server credentials to anybody unless we *grant* permission
    to databases, tables, views, and related database commands to specific users.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个教程中，我们使用了最短的方式通过将用于身份验证的凭据硬编码到`connection`方法中来连接到MySQL服务器。虽然这是早期开发的快速方法，但我们绝对不希望将我们的MySQL服务器凭据暴露给任何人，除非我们*授予*特定用户对数据库、表、视图和相关数据库命令的权限。
- en: A much safer way to get authenticated by a MySQL server is by storing the credentials
    in a configuration file, which is what we will do in this recipe.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将凭据存储在配置文件中，通过MySQL服务器进行身份验证的一个更安全的方法是我们将在本教程中实现的。
- en: We will use our configuration file to connect to the MySQL server and then create
    our own database on the MySQL server.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的配置文件连接到MySQL服务器，然后在MySQL服务器上创建我们自己的数据库。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will use this database in all of the following recipes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在所有接下来的教程中使用这个数据库。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Access to a running MySQL server with administrator privileges is required to
    run the code shown in this recipe.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 需要具有管理员权限的运行中的MySQL服务器才能运行本教程中显示的代码。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The previous recipe shows how to install the free Community Edition of MySQL
    Server. The administrator privileges will enable you to implement this recipe.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个教程展示了如何安装免费的MySQL服务器社区版。管理员权限将使您能够实现这个教程。
- en: How to do it…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, we create a dictionary in the same module of the `MySQL.py` code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`MySQL.py`代码的同一模块中创建一个字典。
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, in the connection method, we unpack the dictionary values. Instead of
    writing,
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在连接方法中，我们解压字典的值。而不是写成，
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: we use `(**dbConfig)`, which does the same as above but is much shorter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`(**dbConfig)`，这与上面的方法相同，但更简洁。
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This results in the same successful connection to the MySQL server, but the
    difference is that the connection method no longer exposes any mission-critical
    information.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致与MySQL服务器的相同成功连接，但不同之处在于连接方法不再暴露任何关键任务信息。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A database server is critical to your mission. You realize this once you have
    lost your valuable data…and can't find any recent backup!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库服务器对你的任务至关重要。一旦你丢失了宝贵的数据...并且找不到任何最近的备份时，你就会意识到这一点！
- en: '![How to do it…](graphics/B04829_07_04.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_07_04.jpg)'
- en: Now, placing the same username, password, database, and so on into a dictionary
    in the same Python module does not eliminate the risk of having the credentials
    seen by anyone perusing the code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在同一个Python模块中将相同的用户名、密码、数据库等放入字典中并不能消除任何人浏览代码时看到凭据的风险。
- en: In order to increase database security, we first move the dictionary into its
    own Python module. Let's call the new Python module `GuiDBConfig.py`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加数据库安全性，我们首先将字典移到自己的Python模块中。让我们称这个新的Python模块为`GuiDBConfig.py`。
- en: We then import this module and unpack the credentials, as we did before.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们导入这个模块并解压凭据，就像之前做的那样。
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Once we place this module into a secure place, separated from the rest of the
    code, we have achieved a better level of security for our MySQL data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将这个模块放在一个安全的地方，与其余代码分开，我们就为我们的MySQL数据实现了更高级别的安全性。
- en: 'Now that we know how to connect to MySQL and have administrator privileges,
    we can create our own database by issuing the following commands:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何连接到MySQL并具有管理员权限，我们可以通过发出以下命令来创建我们自己的数据库：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In order to execute commands to MySQL, we create a cursor object from the connection
    object.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行对MySQL的命令，我们从连接对象创建一个游标对象。
- en: A cursor is usually a place in a specific row in a database table, which we
    move up or down the table, but here we use it to create the database itself.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 游标通常是数据库表中特定行的位置，我们可以在表中向上或向下移动，但在这里我们使用它来创建数据库本身。
- en: We wrap the Python code into a `try…except` block and use the built-in error
    codes of MySQL to tell us if anything went wrong.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将Python代码包装到`try...except`块中，并使用MySQL的内置错误代码告诉我们是否出现了任何问题。
- en: We can verify that this block works by executing the database-creating code
    twice. The first time, it will create a new database in MySQL, and the second
    time it will print out an error message stating that this database already exists.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行创建数据库的代码两次来验证此块是否有效。第一次，它将在MySQL中创建一个新数据库，第二次将打印出一个错误消息，说明此数据库已经存在。
- en: We can verify which databases exist by executing the following MySQL command
    using the very same cursor object syntax.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用完全相同的游标对象语法执行以下MySQL命令来验证哪些数据库存在。
- en: Instead of issuing the `CREATE DATABASE` command, we create a cursor and use
    it to execute the `SHOW DATABASES` command, the result of which we fetch and print
    to the console output.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是发出`CREATE DATABASE`命令，而是创建一个游标并使用它来执行`SHOW DATABASES`命令，然后获取并打印到控制台输出的结果。
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We retrieve the results by calling the `fetchall` method on the cursor object.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在游标对象上调用`fetchall`方法来检索结果。
- en: Running this code shows us which databases currently exist in our MySQL server
    instance. As we can see from the output, MySQL ships with several built-in databases,
    such as `information_schema`, and so on. We have successfully created our own
    `guidb` database, which is shown in the output. All other databases illustrated
    come shipped with MySQL.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码会显示我们的MySQL服务器实例中当前存在哪些数据库。从输出中可以看到，MySQL附带了几个内置数据库，例如`information_schema`等。我们已成功创建了自己的`guidb`数据库，如输出所示。所有其他数据库都是MySQL附带的。
- en: '![How to do it…](graphics/B04829_07_05.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](graphics/B04829_07_05.jpg)'
- en: Note how, even though we specified the database when we created it in mixed-case
    letters as GuiDB, the `SHOW DATABASES` command shows all existing databases in
    MySQL in lower-case and displays our database as `guidb`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管我们在创建时指定了数据库的混合大小写字母为GuiDB，但`SHOW DATABASES`命令显示MySQL中所有现有数据库的小写形式，并将我们的数据库显示为`guidb`。
- en: How it works…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to connect our Python GUI to a MySQL database, we first have to know
    how to connect to the MySQL server. This requires establishing a connection and
    this connection will only be accepted by MySQL if we are able to provide the required
    credentials.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的Python GUI连接到MySQL数据库，我们首先必须知道如何连接到MySQL服务器。这需要建立一个连接，只有当我们能够提供所需的凭据时，MySQL才会接受这个连接。
- en: While it is easy to place strings into one line of Python code, when we deal
    with databases we have to be really thoughtful, because today's personal sandbox
    development environment, by tomorrow, could easily end up being accessible on
    the World Wide Web.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将字符串放入一行Python代码很容易，但在处理数据库时，我们必须非常谨慎，因为今天的个人沙箱开发环境，明天很容易就可能变成全球网络上可以访问的环境。
- en: You do not want to compromise database security and the first part of this recipe
    showed ways to be more secure by placing the connection credentials to the MySQL
    server into a separate file, and by placing this file into a location where it
    is not accessible from the outside world, our database system will become more
    secure.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您不希望危害数据库安全性，这个配方的第一部分展示了通过将MySQL服务器的连接凭据放入一个单独的文件，并将此文件放在外部世界无法访问的位置，来更安全地放置连接凭据的方法，我们的数据库系统将变得更加安全。
- en: In a real-world production environment, both the MySQL server installation,
    connection credentials and this dbConfig file would be handled by IT system administrators
    who would enable you to import the dbConfig file to connect to the MySQL server
    without you knowing what the actual credentials are. Unpacking dbConfig would
    not expose the credentials as it does in our code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实的生产环境中，MySQL服务器安装、连接凭据和dbConfig文件都将由IT系统管理员处理，他们将使您能够导入dbConfig文件以连接到MySQL服务器，而您不知道实际的凭据是什么。解压dbConfig不会像我们的代码那样暴露凭据。
- en: The second part created our own database in a MySQL server instance and we will
    extend and use this database in the very next recipes, combining it with our Python
    GUI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分在MySQL服务器实例中创建了我们自己的数据库，我们将在接下来的配方中扩展并使用这个数据库，将其与我们的Python GUI结合使用。
- en: Designing the Python GUI database
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计Python GUI数据库
- en: Before we start creating tables and inserting data into them we have to design
    the database. Unlike changing local Python variable names, changing a database
    schema once it has been created and loaded with data is not that easy.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建表并向其中插入数据之前，我们必须设计数据库。与更改本地Python变量名称不同，一旦创建并加载了数据的数据库模式就不那么容易更改。
- en: We would have to `DROP` the table, which means we would lose all the data that
    was in the table. So, before dropping a table, we would have to extract the data,
    then `DROP` the table, and recreate it under a different name and finally reimport
    the original data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除表之前，我们必须提取数据，然后`DROP`表，并以不同的名称重新创建它，最后重新导入原始数据。
- en: You get the picture…
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你明白了...
- en: Designing our GUI MySQL database means first thinking about what we want our
    Python application to do with it and then choose names for our tables that match
    the intended purpose.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 设计我们的GUI MySQL数据库首先意味着考虑我们希望我们的Python应用程序如何使用它，然后选择与预期目的相匹配的表名。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are working with the MySQL database we created in the previous recipe. A
    running instance of MySQL is necessary and the two previous recipes show how to
    install MySQL and all necessary additional drivers, as well as how to create the
    database we are using in this chapter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用前一篇中创建的MySQL数据库。需要运行一个MySQL实例，前两篇文章介绍了如何安装MySQL和所有必要的附加驱动程序，以及如何创建本章中使用的数据库。
- en: How to do it…
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: First, we move widgets from our Python GUI around between the two tabs we created
    in the previous recipes, in order to organize our Python GUI better to connect
    to a MySQL database.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在前几篇中创建的两个标签之间在我们的Python GUI中移动小部件，以便更好地组织我们的Python GUI以连接到MySQL数据库。
- en: We rename several widgets and separate the code that accesses the MySQL data
    to what used to be named Tab 1, and we will move unrelated widgets to what we
    called in earlier recipes Tab 2.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重命名了几个小部件，并将访问MySQL数据的代码分离到以前称为Tab 1的位置，我们将不相关的小部件移动到我们在早期配方中称为Tab 2的位置。
- en: We also adjust some internal Python variable names in order to understand our
    code better.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还调整了一些内部Python变量名，以便更好地理解我们的代码。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Code readability is a coding virtue and not a waste of time.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可读性是一种编码美德，而不是浪费时间。
- en: Our refactored Python GUI now looks like the following screenshot. We have renamed
    the first tab as MySQL and created two tkinter LabelFrame widgets. We labeled
    the one on the top, Python Database, and it contains two labels and six tkinter
    entry widgets plus three buttons, which we aligned in four rows and three columns
    using the tkinter grid layout manager.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重构后的Python GUI现在看起来像下面的截图。我们将第一个标签重命名为MySQL，并创建了两个tkinter LabelFrame小部件。我们将顶部的一个标记为Python数据库，它包含两个标签和六个tkinter输入小部件加上三个按钮，我们使用tkinter网格布局管理器将它们排列在四行三列中。
- en: We will enter book titles and pages into the entry widgets and clicking the
    buttons will result in either inserting, retrieving, or modifying book quotations.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将书名和页数输入到输入小部件中，点击按钮将导致插入、检索或修改书籍引用。
- en: The LabelFrame at the bottom has a label of **Book Quotation** and the ScrolledText
    widget that is part of this frame will display our books and quotations.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 底部的LabelFrame有一个**图书引用**的标签，这个框架中的ScrolledText小部件将显示我们的书籍和引用。
- en: '![How to do it…](graphics/B04829_07_06.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤…](graphics/B04829_07_06.jpg)'
- en: We will create two SQL tables to hold our data. The first will hold the data
    for the book title and the book page. We will then join with the second table,
    which will hold the book quotation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个SQL表来保存我们的数据。第一个将保存书名和书页的数据。然后我们将与第二个表连接，第二个表将保存书籍引用。
- en: We will link the two tables together via primary to foreign key relations.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过主键到外键关系将这两个表连接在一起。
- en: So, let's create the first database table now.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在让我们创建第一个数据库表。
- en: Before we do that, let's verify first that our database indeed has no tables.
    According to the online MySQL documentation, the command to view the tables that
    exist in a database is as follows.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之前，让我们先验证一下我们的数据库确实没有表。根据在线MySQL文档，查看数据库中存在的表的命令如下。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '13.7.5.38 `SHOW` `TABLES` syntax:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 13.7.5.38 `SHOW` `TABLES` 语法：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is important to note that, in the preceding syntax, arguments in square brackets
    such as `FULL` are optional while arguments in curly braces such as `FROM` are
    required in the description for the `SHOW TABLES` command. The pipe symbol between
    `FROM` and `IN` means that the MySQL syntax requires one or the other.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在上述语法中，方括号中的参数（如`FULL`）是可选的，而花括号中的参数（如`FROM`）是`SHOW TABLES`命令描述中所需的。在`FROM`和`IN`之间的管道符号表示MySQL语法要求其中一个。
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we execute the SQL command in Python we get the expected result, which
    is an empty list, showing us that our database currently has no tables.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Python中执行SQL命令时，我们得到了预期的结果，即一个空列表，显示我们的数据库当前没有表。
- en: '![How to do it…](graphics/B04829_07_07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤…](graphics/B04829_07_07.jpg)'
- en: We can also first select the database by executing the `USE <DB>` command. Now,
    we don't have to pass it into the `SHOW TABLES` command because we already selected
    the database we want to talk to.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过执行`USE <DB>`命令首先选择数据库。现在，我们不必将其传递给`SHOW TABLES`命令，因为我们已经选择了要交谈的数据库。
- en: 'The following code creates the same true result as did the previous one:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了与之前相同的真实结果：
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now that we know how to verify that our database has no tables, let's create
    some. After we have created two tables, we will verify that they have truly made
    it into our database by using the same commands as before.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何验证我们的数据库中是否有表，让我们创建一些表。创建了两个表之后，我们将使用与之前相同的命令验证它们是否真的进入了我们的数据库。
- en: We create the first table, named `Books`, by executing the following code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过执行以下代码创建了第一个名为`Books`的表。
- en: '[PRE10]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We can verify that the table was created in our database by executing the following
    commands.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下命令验证表是否在我们的数据库中创建了。
- en: '![How to do it…](graphics/B04829_07_08.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤…](graphics/B04829_07_08.jpg)'
- en: Now the result is no longer an empty list but a list that contains a tuple,
    showing the `books` table we just created.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的结果不再是一个空列表，而是一个包含元组的列表，显示了我们刚刚创建的`books`表。
- en: We can use the MySQL command line client to see the columns in our table. In
    order to do this, we have to log in as the root user. We also have to append a
    semicolon to the end of the command.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用MySQL命令行客户端查看表中的列。为了做到这一点，我们必须以root用户身份登录。我们还必须在命令的末尾添加一个分号。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On Windows, you simply double-click the MySQL command line client shortcut,
    which is automatically installed during the MySQL installation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，您只需双击MySQL命令行客户端的快捷方式，这个快捷方式会在MySQL安装过程中自动安装。
- en: 'If you don''t have a shortcut on your desktop, you can find the executable
    at the following path for a typical default installation:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的桌面上没有快捷方式，您可以在典型默认安装的以下路径找到可执行文件：
- en: '`C:\Program Files\MySQL\MySQL Server 5.6\bin\mysql.exe`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Program Files\MySQL\MySQL Server 5.6\bin\mysql.exe`'
- en: 'Without a shortcut to run the MySQL client, you have to pass it some parameters:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有运行MySQL客户端的快捷方式，您必须传递一些参数：
- en: '`C:\Program Files\MySQL\MySQL Server 5.6\bin\mysql.exe`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\Program Files\MySQL\MySQL Server 5.6\bin\mysql.exe`'
- en: '`--defaults-file=C:\ProgramData\MySQL\MySQL Server 5.6\my.ini`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--defaults-file=C:\ProgramData\MySQL\MySQL Server 5.6\my.ini`'
- en: '`-uroot`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-uroot`'
- en: '`-p`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p`'
- en: Either double-clicking the shortcut, or using the command line with the full
    path to the executable and passing in the required parameters, will bring up the
    MySQL command line client which prompts you to enter the password for the root
    user.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 双击快捷方式，或使用完整路径到可执行文件的命令行并传递所需的参数，将打开MySQL命令行客户端，提示您输入root用户的密码。
- en: If you remember the password you assigned to the root user during the installation,
    you can then run the `SHOW COLUMNS FROM books;` command, as shown below. This
    will display the columns of our `books` table from our guidb.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您记得在安装过程中为root用户分配的密码，那么可以运行`SHOW COLUMNS FROM books;`命令，如下所示。这将显示我们的`books`表的列从我们的guidb。
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When executing commands in the MySQL client, the syntax is not Pythonic.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL客户端执行命令时，语法不是Pythonic的。
- en: '![How to do it…](graphics/B04829_07_09.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_09.jpg)'
- en: 'Next, we will create the second table that will store the book and journal
    quotations. We will create it by executing the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建第二个表，用于存储书籍和期刊引用。我们将通过执行以下代码来创建它：
- en: '[PRE11]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Executing the `SHOW TABLES` command now shows that our database has two tables.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`SHOW TABLES`命令现在显示我们的数据库有两个表。
- en: '![How to do it…](graphics/B04829_07_10.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_10.jpg)'
- en: We can see the columns by executing the SQL command using Python.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用Python执行SQL命令来查看列。
- en: '![How to do it…](graphics/B04829_07_11.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_11.jpg)'
- en: Using the MySQL client might present the data in a better format. We could also
    use Python's pretty print (`pprint`) feature.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MySQL客户端可能以更好的格式显示数据。我们还可以使用Python的漂亮打印（`pprint`）功能。
- en: '![How to do it…](graphics/B04829_07_12.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_12.jpg)'
- en: The MySQL client still shows our columns in a clearer format which can be seen
    when you run this client.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL客户端仍然以更清晰的格式显示我们的列，当您运行此客户端时可以看到。
- en: How it works…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We designed our Python GUI database and refactored our GUI in preparation to
    use our new database. We then created a MySQL database and created two tables
    within it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计了Python GUI数据库，并重构了我们的GUI，以准备使用我们的新数据库。然后我们创建了一个MySQL数据库，并在其中创建了两个表。
- en: We verified that the tables made it into our database by using both Python and
    the MySQL client that ships with the MySQL server.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过Python和随MySQL服务器一起提供的MySQL客户端验证了表是否成功进入我们的数据库。
- en: In the next recipe, we will insert data into our tables.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个步骤中，我们将向我们的表中插入数据。
- en: Using the SQL INSERT command
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQL INSERT命令
- en: This recipe presents the entire Python code that shows you how to create and
    drop MySQL databases and tables, as well as how to display the existing databases,
    tables, columns, and data of our MySQL instance.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本步骤介绍了整个Python代码，向您展示如何创建和删除MySQL数据库和表，以及如何显示我们的MySQL实例中现有数据库、表、列和数据。
- en: After creating the database and tables, we will insert data into the two tables
    we are creating in this recipe.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建数据库和表之后，我们将向本步骤中创建的两个表中插入数据。
- en: Note
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are using a primary to foreign key relationship to connect the data of the
    two tables.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用主键到外键的关系来连接两个表的数据。
- en: We will go into the details of how this works in the following two recipes,
    where we modify and delete the data in our MySQL database.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的两个步骤中详细介绍这是如何工作的，我们将修改和删除我们的MySQL数据库中的数据。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the MySQL database we created in the previous recipe and
    also shows you how to drop and recreate the GuiDB.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本步骤基于我们在上一个步骤中创建的MySQL数据库，并向您展示如何删除和重新创建GuiDB。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Dropping the database of course deletes all data the database had in its tables,
    so we will also show you how to re-insert that data.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 删除数据库当然会删除数据库中表中的所有数据，因此我们还将向您展示如何重新插入这些数据。
- en: How to do it…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: The entire code of our `MySQL.py` module is present in the code folder of this
    chapter, which is available for download from Packt Publishing's website. It creates
    the database, adds tables to it, and then inserts data into the two tables we
    created.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`MySQL.py`模块的整个代码都在本章的代码文件夹中，可以从Packt Publishing的网站上下载。它创建数据库，向其中添加表，然后将数据插入我们创建的两个表中。
- en: Here we will outline the code without showing all implementation details in
    order to preserve space, because it would take too many pages to show the entire
    code.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将概述代码，而不显示所有实现细节，以节省空间，因为显示整个代码需要太多页面。
- en: '[PRE12]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running the preceding code creates the following tables and data in the database
    we created.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码会在我们创建的数据库中创建以下表和数据。
- en: '![How to do it…](graphics/B04829_07_13.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_13.jpg)'
- en: How it works…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We have created a MySQL database, established a connection to it, and then created
    two tables that hold the data for a favorite book or journal quotation.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个MySQL数据库，建立了与之的连接，然后创建了两个表，用于存储喜爱的书籍或期刊引用的数据。
- en: We have distributed the data between two tables because the quotations tend
    to be rather large while the book titles and book page numbers are very short.
    By doing this, we can increase the efficiency of our database.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在两个表之间分配数据，因为引用往往相当大，而书名和书页码非常短。通过这样做，我们可以提高数据库的效率。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In SQL database language, separating data into separate tables is called normalization.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL数据库语言中，将数据分隔到单独的表中称为规范化。
- en: Using the SQL UPDATE command
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQL UPDATE命令
- en: This recipe will use the code from the previous recipe, explain it in more detail,
    and then extend the code to update our data.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将使用前一个配方中的代码，对其进行更详细的解释，然后扩展代码以更新我们的数据。
- en: In order to update data we have previously inserted into our MySQL database
    tables, we use the SQL `UPDATE` command.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新我们之前插入到MySQL数据库表中的数据，我们使用SQL `UPDATE`命令。
- en: Getting ready
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the previous recipe, so read and study the previous recipe
    in order to follow the coding in this recipe where we modify existing data.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方是基于前一个配方的，所以请阅读和研究前一个配方，以便理解本配方中修改现有数据的编码。
- en: How to do it…
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'First, we will display the data to be modified by running the following Python
    to MySQL command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将通过运行以下Python到MySQL命令来显示要修改的数据：
- en: '[PRE13]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running the code creates the following result:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码会产生以下结果：
- en: '![How to do it…](graphics/B04829_07_14.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_14.jpg)'
- en: We might not agree with the "Gang of Four", so let's change their famous programming
    quote.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们不同意“四人帮”的观点，所以让我们修改他们著名的编程引语。
- en: Note
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Gang of Four are the four authors who created the world famous book called
    *Design Patterns,* which strongly influenced our entire software industry to recognize,
    think, and code using software design patterns.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 四人帮是创作了世界著名书籍《设计模式》的四位作者，这本书对整个软件行业产生了深远影响，使我们认识到、思考并使用软件设计模式进行编码。
- en: We will do this by updating our database of favorite quotes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过更新我们最喜爱的引语数据库来实现这一点。
- en: First, we retrieve the primary key value by searching for the book title and
    then we pass that value into our search for the quote.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过搜索书名来检索主键值，然后将该值传递到我们对引语的搜索中。
- en: '[PRE14]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This gives us the following result:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了以下结果：
- en: '![How to do it…](graphics/B04829_07_15.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_15.jpg)'
- en: Now that we know the primary key of the quote, we can update the quote by executing
    the following commands.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了引语的主键，我们可以通过执行以下命令来更新引语。
- en: '[PRE15]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: By running the preceding code we make this programming classic more Pythonic.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行上述代码，我们使这个经典的编程更加Pythonic。
- en: As can be seen in the following screenshot, before we ran the preceding code,
    our title with `Book_ID 1` was related via a primary to foreign key relationship
    to the quotation in the `Books_Book_ID` column of the quotation table.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，在运行上述代码之前，我们的`Book_ID 1`标题通过主外键关系与引语表的`Books_Book_ID`列相关联。
- en: This is the original quotation from the *Design Patterns* book.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这是《设计模式》书中的原始引语。
- en: We then updated the quotation related to this ID via the SQL `UPDATE` command.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过SQL `UPDATE`命令更新了与该ID相关的引语。
- en: None of the IDs have changed, but the quotation that is now associated with
    `Book_ID 1` has changed, as can be seen in the second MySQL client window, as
    follows.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ID都没有改变，但现在与`Book_ID 1`相关联的引语已经改变，如下所示在第二个MySQL客户端窗口中。
- en: '![How to do it…](graphics/B04829_07_16.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_16.jpg)'
- en: How it works…
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this recipe, we retrieved existing data from our database and database tables
    we created in earlier recipes. We inserted data into the tables and updated our
    data using the SQL `UPDATE` command.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们从数据库和之前配方中创建的数据库表中检索现有数据。我们向表中插入数据，并使用SQL `UPDATE`命令更新我们的数据。
- en: Using the SQL DELETE command
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQL DELETE命令
- en: In this recipe, we will use the SQL `DELETE` command to delete the data we created
    in the previous recipes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用SQL `DELETE`命令来删除我们在前面配方中创建的数据。
- en: While deleting data might at first sight sound trivial, once we get a rather
    large database design in production, things might not be that easy any more.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然删除数据乍一看似乎很简单，但一旦我们在生产中拥有一个相当大的数据库设计，事情可能就不那么容易了。
- en: Because we have designed our GUI database by relating two tables via a primary
    to foreign key relation, when we delete certain data we do not end up with orphan
    records because this database design takes care of cascading deletes.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们通过主外键关系设计了GUI数据库，当我们删除某些数据时，不会出现孤立记录，因为这种数据库设计会处理级联删除。
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the MySQL database, tables, as well as the data inserted into
    those tables from the previous recipes in this chapter. In order to show how to
    create orphan records, we will have to change the design of one of our database
    tables.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方使用了MySQL数据库、表以及本章前面配方中插入到这些表中的数据。为了展示如何创建孤立记录，我们将不得不改变其中一个数据库表的设计。
- en: How to do it…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: We kept our database design simple by using only two database tables.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过只使用两个数据库表来保持我们的数据库设计简单。
- en: While this works when we delete data, there is always a chance of ending up
    with orphan records. What this means is that we delete data in one table but somehow
    do not delete the related data in another SQL table.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在删除数据时这样做是有效的，但总会有可能出现孤立记录。这意味着我们在一个表中删除数据，但在另一个SQL表中却没有删除相关数据。
- en: If we create our `quotations` table without a foreign key relationship to the
    `books` table, we can end up with orphan records.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建`quotations`表时没有与`books`表建立外键关系，就可能出现孤立记录。
- en: '[PRE16]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After inserting data into the `books` and `quotations` tables, if we execute
    the same `delete` statement as before we are only deleting the book with `Book_ID
    1`, while the related quotation with the `Books_Book_ID 1` is left behind.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在向`books`和`quotations`表中插入数据后，如果我们执行与之前相同的`delete`语句，我们只会删除`Book_ID 1`的书籍，而与之相关的引语`Books_Book_ID
    1`则会被留下。
- en: This in an orphaned record. There no longer exists a book record that has a
    `Book_ID` of `1`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个孤立的记录。不再存在`Book_ID`为`1`的书籍记录。
- en: '![How to do it…](graphics/B04829_07_17.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/B04829_07_17.jpg)'
- en: This situation can create a mess, which we can avoid by using cascading deletes.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况可能会造成混乱，我们可以通过使用级联删除来避免这种情况。
- en: We do this in the creation of the tables by adding certain database constraints.
    When we created the table that holds the quotations in a previous recipe, we created
    our `quotations` table with a foreign key constraint that explicitly references
    the primary key of the books table, linking the two.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在创建表时通过添加某些数据库约束来实现这一点。在之前的示例中，当我们创建包含引用的表时，我们使用外键约束创建了我们的“引用”表，明确引用了书籍表的主键，将两者联系起来。
- en: '[PRE17]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `FOREIGN KEY` relation includes the `ON DELETE CASCADE` attribute, which
    basically tells our MySQL server to delete related records in this table when
    the records this foreign key relates to are deleted.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: “外键”关系包括“ON DELETE CASCADE”属性，这基本上告诉我们的MySQL服务器，在删除与这些外键相关的记录时，删除这个表中的相关记录。
- en: Note
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Without specifying the `ON DELETE CASCADE` attribute in the creation of our
    table we can neither delete nor update our data because an `UPDATE` is a `DELETE`
    followed by an `INSERT`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建表时，如果不指定“ON DELETE CASCADE”属性，我们既不能删除也不能更新我们的数据，因为“UPDATE”是“DELETE”后跟“INSERT”。
- en: Because of this design, no orphan records will be left behind, which is what
    we want.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种设计，不会留下孤立的记录，这正是我们想要的。
- en: Note
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In MySQL, we have to specify `ENGINE=InnoDB` in order to use foreign keys.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，我们必须指定“ENGINE=InnoDB”才能使用外键。
- en: Let's display the data in our database.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们显示我们数据库中的数据。
- en: '[PRE18]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This shows us the following data in our database tables:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了我们数据库表中的以下数据：
- en: '![How to do it…](graphics/B04829_07_18.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法…](graphics/B04829_07_18.jpg)'
- en: This shows us that we have two records that are related via primary to foreign
    key relationships.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了我们有两条通过主键到外键关系相关的记录。
- en: When we now delete a record in the `books` table, we expect the related record
    in the `quotations` table to also be deleted by a cascading delete.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在删除“书籍”表中的记录时，我们期望“引用”表中的相关记录也将通过级联删除被删除。
- en: 'Let''s try this by executing the following SQL commands in Python:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过在Python中执行以下SQL命令来执行此操作：
- en: '[PRE19]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After executing the preceding commands to delete records, we get the following
    new results:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行前面的删除记录命令后，我们得到了以下新结果：
- en: '![How to do it…](graphics/B04829_07_19.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法…](graphics/B04829_07_19.jpg)'
- en: Note
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The famous `Design Patterns` are gone from our database of favorite quotations…
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 著名的“设计模式”已经从我们喜爱的引用数据库中消失了…
- en: How it works…
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We triggered cascading deletes in this recipe by designing our database in a
    solid fashion via primary to foreign key relationships with cascading deletes.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 通过通过主键到外键关系进行级联删除，通过设计我们的数据库，我们在这个示例中触发了级联删除。
- en: This keeps our data sane and integral.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以保持我们的数据完整和完整。
- en: Note
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this recipe and the sample code we have referred to the same table names
    sometimes starting capitalized and at other times in all lower-case.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例和示例代码中，我们有时引用相同的表名，有时以大写字母开头，有时全部使用小写字母。
- en: This works for a Windows default installation of MySQL but might not work on
    Linux unless we change a setting.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于MySQL的Windows默认安装，但在Linux上可能不起作用，除非我们更改设置。
- en: 'Here is a link to the official MySQL documentation: [http://dev.mysql.com/doc/refman/5.0/en/identifier-case-sensitivity.html](http://dev.mysql.com/doc/refman/5.0/en/identifier-case-sensitivity.html)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这是官方MySQL文档的链接：[http://dev.mysql.com/doc/refman/5.0/en/identifier-case-sensitivity.html](http://dev.mysql.com/doc/refman/5.0/en/identifier-case-sensitivity.html)
- en: In the next recipe, we will use the code of our `MySQL.py` module from our Python
    GUI.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将使用我们的Python GUI中的“MySQL.py”模块的代码。
- en: Storing and retrieving data from our MySQL database
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从我们的MySQL数据库中存储和检索数据
- en: We will use our Python GUI to insert data into our MySQL database tables. We
    have already refactored the GUI we built in previous recipes in preparation for
    connecting and using a database.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的Python GUI将数据插入到我们的MySQL数据库表中。我们已经重构了之前示例中构建的GUI，以便连接和使用数据库。
- en: We will use two textbox entry widgets into which we can type the book or journal
    title and the page number. We will also use a ScrolledText widget to type our
    favorite book quotations into, which we will then store in our MySQL database.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用两个文本框输入小部件，可以在其中输入书名或期刊标题和页码。我们还将使用一个ScrolledText小部件来输入我们喜爱的书籍引用，然后将其存储在我们的MySQL数据库中。
- en: Getting ready
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will build on the MySQL database and tables we created in previous
    recipes.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将建立在我们之前创建的MySQL数据库和表的基础上。
- en: How to do it…
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: We will insert, retrieve, and modify our favorite quotations using our Python
    GUI. We have refactored the MySQL tab of our GUI in preparation for this.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的Python GUI来插入、检索和修改我们喜爱的引用。我们已经重构了我们GUI中的MySQL选项卡，为此做好了准备。
- en: '![How to do it…](graphics/B04829_07_20.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法…](graphics/B04829_07_20.jpg)'
- en: In order to make the buttons do something, we will connect them to callback
    functions, as we did in previous recipes.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让按钮起作用，我们将把它们连接到回调函数，就像我们在之前的示例中所做的那样。
- en: We will display the data in the ScrolledText widget below the buttons.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在按钮下方的ScrolledText小部件中显示数据。
- en: In order to do this, we will import the `MySQL.py` module, as we did before.
    All of the code that talks to our MySQL server instance and database resides in
    this module, which is a form of encapsulating code in the spirit of object-oriented
    programming.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将像之前一样导入“MySQL.py”模块。所有与我们的MySQL服务器实例和数据库通信的代码都驻留在这个模块中，这是一种封装代码的形式，符合面向对象编程的精神。
- en: We connect the **Insert Quote** button to the following callback function.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将“插入引用”按钮连接到以下回调函数。
- en: '[PRE20]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When we now run our code, we can insert data from our Python GUI into our MySQL
    database.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在运行我们的代码时，我们可以从我们的Python GUI中将数据插入到我们的MySQL数据库中。
- en: '![How to do it…](graphics/B04829_07_21.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![操作方法…](graphics/B04829_07_21.jpg)'
- en: After entering a book title and book page plus a quotation from the book or
    movie, we insert the data into our database by clicking the **Insert Quote** button.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 输入书名和书页以及书籍或电影中的引用后，通过单击“插入引用”按钮将数据插入到我们的数据库中。
- en: Our current design allows for titles, pages, and a quotation. We can also insert
    our favorite quotations from movies. While a movie does not have pages, we can
    use the page column to insert the approximate time when the quotation occurred
    within the movie.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的设计允许标题、页面和引语。我们还可以插入我们最喜欢的电影引语。虽然电影没有页面，但我们可以使用页面列来插入引语在电影中发生的大致时间。
- en: Next, we can verify that all of this data made it into our database tables by
    issuing the same commands we used previously.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过发出与之前使用的相同命令来验证所有这些数据是否已经进入了我们的数据库表。
- en: '![How to do it…](graphics/B04829_07_22.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B04829_07_22.jpg)'
- en: After inserting the data, we can verify that it made it into our two MySQL tables
    by clicking the **Get Quotes** button which then displays the data we inserted
    into our two MySQL database tables, as shown above.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入数据之后，我们可以通过单击**获取引语**按钮来验证它是否已经进入了我们的两个MySQL表中，然后显示我们插入到两个MySQL数据库表中的数据，如上所示。
- en: Clicking the **Get Quotes** button invokes the callback method we associated
    with the button click event. This gives us the data that we display in our ScrolledText
    widget.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**获取引语**按钮会调用与按钮单击事件关联的回调方法。这给了我们在我们的ScrolledText小部件中显示的数据。
- en: '[PRE21]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We use the `self.mySQL` class instance variable to invoke the `showBooks()`
    method, which is part of the MySQL class we imported.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`self.mySQL`类实例变量来调用`showBooks()`方法，这是我们导入的MySQL类的一部分。
- en: '[PRE22]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works…
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we imported the Python module that contains all of the coding
    logic to connect to our MySQL database and know how to insert, update, delete,
    and display the data.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们导入了包含所有连接到我们的MySQL数据库并知道如何插入、更新、删除和显示数据的编码逻辑的Python模块。
- en: We have now connected our Python GUI to this SQL logic.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经将我们的Python GUI连接到了这个SQL逻辑。
