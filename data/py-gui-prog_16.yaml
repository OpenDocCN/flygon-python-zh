- en: Understanding Dialogs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解对话框
- en: 'In this chapter, we will learn how to use the following types of dialog:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用以下类型的对话框：
- en: The input dialog box
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入对话框
- en: Using the input dialog
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用输入对话框
- en: Using the color dialog
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用颜色对话框
- en: Using the font dialog
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字体对话框
- en: Using the file dialog
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文件对话框
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Dialogs are required in all applications to get input from the user, and also
    to guide the user to enter the correct data. Interactive dialogs make the application
    quite user-friendly too. There are basically the following two types of dialog:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有应用程序中都需要对话框来从用户那里获取输入，还要指导用户输入正确的数据。交互式对话框也使应用程序变得非常用户友好。基本上有以下两种类型的对话框：
- en: '**Modal dialog**: A modal dialog is a dialog that wants the user to enter mandatory
    information. This type of dialog doesn''t allow the user to use other parts of
    the application until the modal dialog is closed. That is, the user needs to enter
    the required information in the modal dialog, and after closing the dialog, the
    user can access the rest of the application.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模态对话框**：模态对话框是一种要求用户输入强制信息的对话框。这种对话框在关闭之前不允许用户使用应用程序的其他部分。也就是说，用户需要在模态对话框中输入所需的信息，关闭对话框后，用户才能访问应用程序的其余部分。'
- en: '**Non-modal or modeless dialogs**: These are dialogs that enable the user to
    interact with the rest of the application and dialog box too. That is, the user
    can continue interacting with the rest of the application while keeping the modeless
    dialog open. That is why modeless dialogs are usually used for getting non-essential
    or non-critical information from the user.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非模态或无模式对话框**：这些对话框使用户能够与应用程序的其余部分和对话框进行交互。也就是说，用户可以在保持无模式对话框打开的同时继续与应用程序的其余部分进行交互。这就是为什么无模式对话框通常用于从用户那里获取非必要或非关键信息。'
- en: The input dialog box
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入对话框
- en: 'An input dialog box is with the help of the `QInputDialog` class. The `QInputDialog`
    class provides a dialog to get a single value from the user. The provided input
    dialog consists of a text field and two buttons, OK and Cancel. The text field
    enables us to get a single value from the user, where that single value can be
    a string, a number, or an item from a list. The following are the methods provided
    by the `QInputDialog` class to accept different types of input from the user:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`QInputDialog`类来创建输入对话框。`QInputDialog`类提供了一个对话框，用于从用户那里获取单个值。提供的输入对话框包括一个文本字段和两个按钮，OK和Cancel。文本字段使我们能够从用户那里获取单个值，该单个值可以是字符串、数字或列表中的项目。以下是`QInputDialog`类提供的方法，用于接受用户不同类型的输入：
- en: '`getInt()`:This method shows a spin box for accepting an integer number. To
    get an integer from the user, you need to use the following syntax:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getInt()`:该方法显示一个旋转框以接受整数。要从用户那里得到一个整数，您需要使用以下语法：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Take a look at the following example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的例子：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code prompts the user to enter quantity. If the user does not
    enter any value, the default value `2` will be assigned to the `quantity` variable.
    The user can enter any value between `1` and `100`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码提示用户输入数量。如果用户没有输入任何值，则默认值`2`将被赋给`quantity`变量。用户可以输入`1`到`100`之间的任何值。
- en: '`getDouble()`: This method shows a spin box with a floating point number to
    accept fractional values. To get a fractional value from the user, you need to
    use the following syntax:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDouble()`:该方法显示一个带有浮点数的旋转框，以接受小数值。要从用户那里得到一个小数值，您需要使用以下语法：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Take a look at the following example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的例子：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code prompts the user to enter the price of the product. If the
    user does not enters any value, the default value `1.50` will be assigned to the
    `price` variable. The user can enter any value between `0` and `100`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码提示用户输入产品的价格。如果用户没有输入任何值，则默认值`1.50`将被赋给`price`变量。用户可以输入`0`到`100`之间的任何值。
- en: '`getText()`: This method shows a Line Edit widget to accept text from the user.
    To get text from the user, you need to use the following syntax:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getText()`:该方法显示一个Line Edit小部件，以从用户那里接受文本。要从用户那里获取文本，您需要使用以下语法：'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Take a look at the following example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的例子：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code will display an input dialog box with the title, Get Customer
    Name. The dialog box will also display a Line Edit widget allowing user to enter
    some text. A Label widget will also be displayed before the Line Edit widget showing
    the text, Enter your name:. The customer's name, entered in the dialog box will
    be assigned to the `name` variable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将显示一个标题为“获取客户名称”的输入对话框。对话框还将显示一个Line Edit小部件，允许用户输入一些文本。在Line Edit小部件之前还将显示一个Label小部件，显示文本“输入您的姓名:”。在对话框中输入的客户姓名将被赋给`name`变量。
- en: '`getItem()`: This method shows a combo box displaying several items to choose
    from. To get an item from a drop-down box, you need to use the following syntax:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getItem()`:该方法显示一个下拉框，显示多个可供选择的项目。要从下拉框中获取项目，您需要使用以下语法：'
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, `array` is the list of items that need to be displayed in the combo box.
    The `current item` is the item that is treated as the current item in the combo
    box. `Editable` is the Boolean value, which, if set to `True`, means the user
    can edit the combo box and enter their own text. When `Editable` is set to `False`,
    it means the user can only select an item from the combo box but cannot edit items. Take
    a look at the following example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`array`是需要在下拉框中显示的项目列表。`current item`是在下拉框中被视为当前项目的项目。`Editable`是布尔值，如果设置为`True`，则意味着用户可以编辑下拉框并输入自己的文本。当`Editable`设置为`False`时，这意味着用户只能从下拉框中选择项目，但不能编辑项目。看一下下面的例子：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding code will display an input dialog with the title Input Dialog.
    The dialog box shows a combo box showing a list of countries that are displayed
    via the elements from the countries array. The Label widget before the combo box
    shows the text, List of countries. The selected country name from the combo box
    will be assigned to the `countryName` variable. Users can only choose the country
    from the combo box but cannot edit any country name from the combo box.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将显示一个标题为“输入对话框”的输入对话框。对话框显示一个下拉框，其中显示了通过countries数组的元素显示的国家列表。下拉框之前的Label小部件显示文本“国家列表”。从下拉框中选择的国家名称将被分配给`countryName`变量。用户只能从下拉框中选择国家，但不能编辑任何国家名称。
- en: Using the input dialog
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用输入对话框
- en: The input dialog can accept data of any type, including integer, double, and
    text. In this recipe, we will learn to get text from the user. We will make use
    of an input dialog to know the name of the country in which the user lives.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 输入对话框可以接受任何类型的数据，包括整数、双精度和文本。在本示例中，我们将学习如何从用户那里获取文本。我们将利用输入对话框来了解用户所居住的国家的名称。
- en: The input dialog box will display a combo box showing different country names.
    On choosing a country by name, the chosen country name will appear in the textbox.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 输入对话框将显示一个显示不同国家名称的下拉框。通过名称选择国家后，所选的国家名称将显示在文本框中。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create a new application based on the Dialog without Buttons template
    by performing the following steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据没有按钮的对话框模板创建一个新的应用程序，执行以下步骤：
- en: Since the application will prompt the user to choose the country that he/she
    lives, via input dialog, so drag and drop one Label widget, one Line Edit widget,
    and one Push Button widget onto the form.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于应用程序将提示用户通过输入对话框选择所居住的国家，因此将一个Label小部件、一个Line Edit小部件和一个Push Button小部件拖放到表单中。
- en: Set the text property of the Label widget to `Your Country`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Label小部件的文本属性设置为“你的国家”。
- en: Set the text property of the Push Button widget to `Choose Country`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为“选择国家”。
- en: Set the objectName property of the Line Edit widget to `lineEditCountry`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Line Edit小部件的objectName属性设置为`lineEditCountry`。
- en: Set the objectName property of the Push Button widget to `pushButtonCountry`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为`pushButtonCountry`。
- en: Save the application with the name `demoInputDialog.ui`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoInputDialog.ui`。
- en: 'The form will now look as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在表单将如下所示：
- en: '![](assets/3a59be73-9686-4b0a-92a6-c5ea8a7bf4b3.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a59be73-9686-4b0a-92a6-c5ea8a7bf4b3.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs converting to Python code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。
- en: 'To do the conversion, you need to open a Command Prompt window, navigate to
    the folder where the file is saved, and issue the following command line:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进行转换，您需要打开一个命令提示符窗口，导航到保存文件的文件夹，并发出以下命令行：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can find the generated Python script, `demoInputDialog.py`, in the source
    code bundle of this book.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的源代码包中找到生成的Python脚本`demoInputDialog.py`。
- en: Treat the `demoInputDialog.py` script as a header file, and import it to the
    file from which you will invoke its user interface design.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoInputDialog.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callInputDialog.pyw` and import the
    `demoInputDialog.py` code into it:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callInputDialog.pyw`的Python文件，并将`demoInputDialog.py`的代码导入其中：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the `demoInputDialog.py` file, a class with the name of the top-level object
    is created with `Ui_ prepended`. That is, for the top-level object, Dialog, the `Ui_Dialog` class
    is created and stores the interface elements of our widget. That class has two
    methods, `setupUi()` and `retranslateUi()`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`demoInputDialog.py`文件中，创建一个名为顶层对象的类，前面加上`Ui_`。也就是说，对于顶层对象Dialog，创建了`Ui_Dialog`类，并存储了我们小部件的接口元素。该类有两个方法，`setupUi()`和`retranslateUi()`。
- en: The `setupUi()` method creates the widgets that are used in defining the user
    interface in Qt Designer. Also, the properties of the widgets are set in this
    method. The `setupUi()` method takes a single argument, which is the top-level
    widget of the application, an instance of `QDialog`. The `retranslateUi()` method
    translates the interface.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`setupUi()`方法创建了在Qt Designer中定义用户界面中使用的小部件。此方法还设置了小部件的属性。`setupUi()`方法接受一个参数，即应用程序的顶层小部件，即`QDialog`的一个实例。`retranslateUi()`方法翻译了界面。'
- en: In the `callInputDialog.pyw` file, you can see that the click event of the Push
    Button widget is connected to the `dispmessage()` method that is used to select
    the country; when the user clicks the push button, the `dispmessage()` method
    will be invoked. The `dispmessage()` method defines a string array called countries
    that contains several country names in the form of array elements. After that,
    the `getItem` method of the `QInputDialog` class is invoked and opens up an input
    dialog box displaying a combo box. When the user clicks the combo box, it will
    expand, showing the country names that are assigned to the `countries` string
    array. When the user selects a country, followed by clicking the OK button in
    the dialog box, the selected country name will be assigned to the `countryName` variable.
    The selected country name will then be displayed through the Line Edit widget.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callInputDialog.pyw`文件中，可以看到Push Button小部件的单击事件连接到`dispmessage()`方法，该方法用于选择国家；当用户单击推送按钮时，将调用`dispmessage()`方法。`dispmessage()`方法定义了一个名为countries的字符串数组，其中包含了几个国家名称的数组元素。之后，调用`QInputDialog`类的`getItem`方法，打开一个显示下拉框的输入对话框。当用户单击下拉框时，它会展开，显示分配给`countries`字符串数组的国家名称。当用户选择一个国家，然后单击对话框中的OK按钮，所选的国家名称将被分配给`countryName`变量。然后，所选的国家名称将通过Line
    Edit小部件显示出来。
- en: 'On running the application, you get an empty Line Edit widget and a push button,
    Choose Country, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将得到一个空的Line Edit小部件和一个名为“选择国家”的推送按钮，如下截图所示：
- en: '![](assets/eb1fe98b-1676-4764-b7e0-ca45a599d5b5.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb1fe98b-1676-4764-b7e0-ca45a599d5b5.png)'
- en: 'On clicking the Choose Country button, the input dialog box will open, as shown
    in the following screenshot. The input dialog shows a combo box along with two
    buttons, OK and Cancel. On clicking the combo box, it will expand to show all
    the country names, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“选择国家”按钮后，输入对话框框将打开，如下截图所示。输入对话框显示一个组合框以及两个按钮“确定”和“取消”。单击组合框，它将展开显示所有国家名称，如下截图所示：
- en: '![](assets/33a4befd-4197-4c3e-920c-fc7ce186433d.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/33a4befd-4197-4c3e-920c-fc7ce186433d.png)'
- en: 'After choosing a country name from the combo box, followed by clicking the
    OK button, the chosen country name will be displayed in the Line Edit box, as
    shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从组合框中选择国家名称，然后单击“确定”按钮后，所选国家名称将显示在行编辑框中，如下截图所示：
- en: '![](assets/362a4ebc-bc81-4595-826b-21c961807936.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/362a4ebc-bc81-4595-826b-21c961807936.png)'
- en: Using the color dialog
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用颜色对话框
- en: In this recipe, we will learn to use color dialog to display a color palette,
    allowing users to select predefined colors from the palette or create a new custom
    color.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习使用颜色对话框显示颜色调色板，允许用户从调色板中选择预定义的颜色或创建新的自定义颜色。
- en: The application includes a frame, and when the user selects any color from the
    color dialog, the chosen color will be applied to the frame. Besides this, the
    hex code of the selected color will also be displayed via a Label widget.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序包括一个框架，当用户从颜色对话框中选择任何颜色时，所选颜色将应用于框架。除此之外，所选颜色的十六进制代码也将通过Label小部件显示。
- en: In this recipe, we will be making use of the `QColorDialog` class, which provides
    a dialog widget for selecting color values.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用`QColorDialog`类，该类提供了一个用于选择颜色值的对话框小部件。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s create a new application based on the Dialog without Buttons template
    by performing the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据以下步骤创建一个基于无按钮对话框模板的新应用程序：
- en: Drag and drop a Push Button, a Frame, and a Label widget onto the form.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个Push Button、一个Frame和一个Label小部件拖放到表单上。
- en: Set the text property of the Push Button widget to `Choose color`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为“选择颜色”。
- en: Set the objectName property of the Push Button widget to `pushButtonColor`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为“pushButtonColor”。
- en: Set the objectName property of the Frame widget to `frameColor`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Frame小部件的objectName属性设置为“frameColor”。
- en: Set the Label widget to `labelColor`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Label小部件设置为“labelColor”。
- en: Save the application with the name `demoColorDialog.ui`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoColorDialog.ui`。
- en: 'The form will now look as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 表格现在将如下所示：
- en: '![](assets/134219b5-01b1-4f44-bd45-52d5cdd09caa.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/134219b5-01b1-4f44-bd45-52d5cdd09caa.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file. You can use `pyuic5` utility to convert the XML file into Python
    code. The generated Python script, `demoColorDialog.py`, can be seen in the source
    code bundle of this book. The `demoColorDialog.py` script will be used as a header
    file, and will be imported in another Python script file, which will invoke this
    user interface design.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件。您可以使用`pyuic5`实用程序将XML文件转换为Python代码。生成的Python脚本`demoColorDialog.py`可以在本书的源代码包中找到。`demoColorDialog.py`脚本将用作头文件，并将在另一个Python脚本文件中导入，该文件将调用此用户界面设计。
- en: 'Create another Python file with the name `callColorDialog.pyw` and import the
    `demoColorDialog.py` code into it:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callColorDialog.pyw`的Python文件，并将`demoColorDialog.py`代码导入其中：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `callColorDialog.pyw` file, you can see that the click() event of the
    push button is connected to the `dispcolor()` method; that is, when the user clicks
    the Choose color button, the `dispcolor()` method will be invoked. The `dispmessage()` method
    invokes the `getColor()` method of the `QColorDialog` class, which opens up a
    dialog showing different colors. Not only can the user choose any predefined basic
    color from the dialog box, but they can create a new custom color too. After choosing
    the desired color, when the user clicks the OK button from the color dialog, the
    chosen color will be assigned to the frame by invoking the `setStyleSheet()` method
    on the Frame widget class. Also, the hex code of the chosen color is displayed
    via the Label widget.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callColorDialog.pyw`文件中，您可以看到按钮的click()事件连接到`dispcolor()`方法；也就是说，当用户单击“选择颜色”按钮时，将调用`dispcolor()`方法。`dispmessage()`方法调用`QColorDialog`类的`getColor()`方法，打开一个显示不同颜色的对话框。用户不仅可以从对话框中选择任何预定义的基本颜色，还可以创建新的自定义颜色。选择所需的颜色后，当用户从颜色对话框中单击“确定”按钮时，所选颜色将通过在Frame小部件类上调用`setStyleSheet()`方法来分配给框架。此外，所选颜色的十六进制代码也通过Label小部件显示。
- en: 'On running the application, initially you see a push button, Choose color,
    and a frame that is filled with black by default, as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，最初会看到一个按钮“选择颜色”，以及一个默认填充为黑色的框架，如下截图所示：
- en: '![](assets/49d02cee-9ab4-4642-8246-6ab2bd1c733b.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/49d02cee-9ab4-4642-8246-6ab2bd1c733b.png)'
- en: 'On clicking the Choose color button, the color dialog opens up, showing the
    basic colors shown in the following screenshot. The color dialog also enables
    you to create your own custom color too:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“选择颜色”按钮，颜色对话框将打开，显示以下截图中显示的基本颜色。颜色对话框还可以让您创建自定义颜色：
- en: '![](assets/b1c886f2-3210-4155-b51b-7083e10959cf.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1c886f2-3210-4155-b51b-7083e10959cf.png)'
- en: 'After selecting a color, when you select the OK button, the chosen color will
    be applied to the frame and the hex code of the chosen color will be displayed
    via the Label widget, as shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 选择颜色后，单击“确定”按钮，所选颜色将应用于框架，并且所选颜色的十六进制代码将通过Label小部件显示，如下截图所示：
- en: '![](assets/594e7f78-ec74-4168-a3ac-caa5adae3102.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/594e7f78-ec74-4168-a3ac-caa5adae3102.png)'
- en: Using the font dialog
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用字体对话框
- en: In this recipe, we will learn to use a font dialog to apply different fonts
    and styles to the selected text.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习使用字体对话框为所选文本应用不同的字体和样式。
- en: We will make use of a Text Edit widget and a Push Button widget in this application.
    The push button, when clicked, will open the font dialog. The font and style selected
    from the font dialog will be applied to the text written in the Text Edit widget.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将使用Text Edit小部件和Push Button小部件。点击按钮后，将打开字体对话框。从字体对话框中选择的字体和样式将应用于Text
    Edit小部件中的文本。
- en: In this recipe, we will be making use of the `QFontDialog` class, which displays
    a Dialog widget meant for selecting a font.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用`QFontDialog`类，该类显示一个用于选择字体的对话框小部件。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s create a new application based on the Dialog without Buttons template
    by performing the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据无按钮模板创建一个新的应用程序，执行以下步骤：
- en: Drag and drop a Push Button and a Text Edit widget onto the form.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个Push Button和一个Text Edit小部件拖放到表单上。
- en: Set the text property of the Push Button widget to `Choose Font`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为`Choose Font`。
- en: Set the objectName property of the Push Button widget to `pushButtonFont`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为`pushButtonFont`。
- en: Save the application with the name `demoFontDialog.ui`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoFontDialog.ui`。
- en: 'After performing the preceding steps, the application will appear as shown
    in the following screenshot:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行上述步骤后，应用程序将显示如下截图所示：
- en: '![](assets/2c394b22-bf10-464e-828c-e79074e2cb4d.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c394b22-bf10-464e-828c-e79074e2cb4d.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file. Using the `pyuic5` command, you can convert the XML file into
    Python code. The generated Python script,  `demoFontDialog.py`, can be seen in
    the source code bundle of this book. The `demoFontDialog.py` script will be used
    as a header file, and will be imported in another Python script file, which will
    invoke this user interface design.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件。使用`pyuic5`命令，您可以将XML文件转换为Python代码。生成的Python脚本`demoFontDialog.py`可以在本书的源代码包中找到。`demoFontDialog.py`脚本将被用作头文件，并将在另一个Python脚本文件中导入，该文件将调用此用户界面设计。
- en: 'Create another Python file with the name `callFontDialog.pyw` and import the
    `demoFontDialog.py` code into it:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callFontDialog.pyw`的Python文件，并将`demoFontDialog.py`代码导入其中。
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the `callFontDialog.pyw` file, you can see that the click() event of the
    push button is connected to the `changefont()` method; that is, when the user
    clicks the Choose Font button, the `change()` method will be invoked. The `changefont()` method
    invokes the `getFont()` method of the `QFontDialog` class, which opens up a dialog
    showing different fonts, font styles, sizes, and effects. On choosing a font,
    font style, size, or effect, the effect of the choice on the text will be displayed
    in the Sample box. On choosing the desired font, font style, size, and effect,
    when user clicks the OK button, the selected choices will be assigned to the `font` variable.
    Subsequently, the `setFont()` method is invoked on the `TextEdit` class to apply
    the chosen font and styles to the text displayed through the Text Edit widget.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callFontDialog.pyw`文件中，您可以看到将push button的click()事件连接到`changefont()`方法；也就是说，当用户点击Choose
    Font按钮时，将调用`change()`方法。`changefont()`方法调用`QFontDialog`类的`getFont()`方法，打开一个对话框，显示不同的字体、字体样式、大小和效果。选择字体、字体样式、大小或效果后，将在示例框中显示文本的选择效果。选择所需的字体、字体样式、大小和效果后，当用户点击OK按钮时，所选的选择将被分配给`font`变量。随后，在`TextEdit`类上调用`setFont()`方法，将所选的字体和样式应用于通过Text
    Edit小部件显示的文本。
- en: 'On running the application, you see a push button, the Change Font widget,
    and the Text Edit widget, as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您将看到一个按钮，Change Font小部件和Text Edit小部件，如下截图所示：
- en: '![](assets/7cf1dce1-7e0a-4cfe-978e-601477340c7c.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7cf1dce1-7e0a-4cfe-978e-601477340c7c.png)'
- en: 'To see the impact of a chosen font from the font dialog, you need to type some
    text in the Text Edit widget, as shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看从字体对话框中选择的字体的影响，您需要在Text Edit小部件中输入一些文本，如下截图所示：
- en: '![](assets/e93a5f1c-e881-4674-85ee-e3386739f82a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e93a5f1c-e881-4674-85ee-e3386739f82a.png)'
- en: 'On selecting the Change Font button, the font dialog will open up, as shown
    in the following screenshot. You can see that a different font name will be displayed
    on the leftmost tab. The middle tab shows different font styles that enable you
    to make the text appear in bold, italic, bold italic, and regular. The rightmost
    tab shows different sizes. At the bottom, you can see different checkboxes that
    enable you to make text appear in underline, strikeout, and so on. Choose the
    options from any tab and the impact of the chosen font and style can be seen on
    the sample text shown in the Sample box. After selecting the desired font and
    style, click the OK button to close the font dialog:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Change Font按钮后，字体对话框将打开，如下截图所示。您可以看到不同的字体名称将显示在最左边的选项卡上。中间选项卡显示不同的字体样式，使您可以使文本以粗体、斜体、粗斜体和常规形式显示。最右边的选项卡显示不同的大小。在底部，您可以看到不同的复选框，使您可以使文本显示为下划线、删除线等。从任何选项卡中选择选项，所选字体和样式对示例框中显示的示例文本的影响可见。选择所需的字体和样式后，点击OK按钮关闭字体对话框：
- en: '![](assets/4448d866-eb2e-407b-a9ef-97ac098f20d8.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4448d866-eb2e-407b-a9ef-97ac098f20d8.png)'
- en: 'The effect of the chosen font and style will appear on the text written in
    the Text Edit widget, as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 所选字体和样式的效果将显示在Text Edit小部件中显示的文本上，如下截图所示：
- en: '![](assets/48b1df37-7b6a-4b51-acce-79ffce0be77e.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/48b1df37-7b6a-4b51-acce-79ffce0be77e.png)'
- en: Using the file dialog
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用文件对话框
- en: In this recipe, we will learn to use a file dialog to understand how different
    file operations, such as opening a file and saving a file, are done.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习使用文件对话框，了解如何执行不同的文件操作，如打开文件和保存文件。
- en: We will learn to create a file menu with two menu items, Open and Save. On clicking
    the Open menu item, the file open dialog box will open, which will help in browsing
    and choosing the file to open. The file contents of the opened file is displayed
    in the Text Edit box. The user can even update the file contents if desired. After
    making the desired modifications in the file, when the user clicks the Save option
    from the File menu, the file contents will be updated.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习创建一个包含两个菜单项Open和Save的文件菜单。单击Open菜单项后，将打开文件打开对话框，帮助浏览和选择要打开的文件。打开文件的文件内容将显示在文本编辑框中。用户甚至可以在需要时更新文件内容。在对文件进行所需的修改后，当用户从文件菜单中单击Save选项时，文件内容将被更新。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will be making use of the `QFileDialog` class, which displays
    a dialog that allows users to select files or directories. The files can be selected
    for both opening and saving.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将使用`QFileDialog`类，该类显示一个对话框，允许用户选择文件或目录。文件可以用于打开和保存。
- en: 'In this recipe, I will be using the following two methods of the `QFileDialog`
    class:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我将使用`QFileDialog`类的以下两种方法：
- en: '`getOpenFileName()`: This method opens the file dialog, enabling the user to
    browse the directories and open the desired file. The syntax of the `getOpenFileName()` method
    is as follows:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getOpenFileName()`: 该方法打开文件对话框，使用户可以浏览目录并打开所需的文件。`getOpenFileName()`方法的语法如下：'
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding code, `filter` represents the file extensions; it determines
    the types of file displayed to open, for example as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`filter`表示文件扩展名；它确定要显示的文件类型，例如如下所示：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding example, you can see that files from the `home` directory are
    displayed. The files with the extensions `.png`, `.jpg`, `.txt`, and `.xml` will
    be displayed in the dialog box.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，您可以看到来自`home`目录的文件。对话框中将显示扩展名为`.png`、`.jpg`、`.txt`和`.xml`的文件。
- en: '`getSaveFileName()`: This method opens the file save dialog, enabling the user
    to save the file with the desired name and in the desired folder. The syntax of
    the `getSaveFileName()` method is as follows:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getSaveFileName()`: 该方法打开文件保存对话框，使用户可以以所需的名称和所需的文件夹保存文件。`getSaveFileName()`方法的语法如下：'
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`options` represents various options for how to run the dialog, for example,
    take a look at the following code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`options`表示如何运行对话框的各种选项，例如，请查看以下代码：'
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s create a new application based on the Main Window template. The Main
    Window template includes a menu at the top by default:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于主窗口模板创建一个新的应用程序。主窗口模板默认包含顶部的菜单：
- en: We can even use two push buttons to initiate the file open dialog box and file
    save dialog box, but using the menu items to initiate file operations will give
    the feel of a real-time application.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们甚至可以使用两个按钮来启动文件打开对话框和文件保存对话框，但使用菜单项来启动文件操作将给人一种实时应用程序的感觉。
- en: The default menu bar in the Main Window template shows Type Here in place of
    the menu name.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主窗口模板中的默认菜单栏显示“Type Here”代替菜单名称。
- en: The Type Here option indicates that the user can type the desired menu name,
    replacing the Type Here text. Let's type `File`, creating a menu in the menu bar.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “Type Here”选项表示用户可以输入所需的菜单名称，替换“Type Here”文本。让我们输入`File`，在菜单栏中创建一个菜单。
- en: On pressing the *Enter* key, the term Type Here will appear as a menu item under
    the File menu.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键后，术语“Type Here”将出现在文件菜单下的菜单项中。
- en: Let's type `Open` as the first menu item in the File menu.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件菜单中将Open作为第一个菜单项。
- en: On pressing the *Enter* key after creating the first menu item, Open, the term
    Type Here will appear below Open.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建第一个菜单项Open后按下*Enter*键后，术语“Type Here”将出现在Open下方。
- en: Replace Type Here with the menu item, Save.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用菜单项Save替换Type Here。
- en: After creating the File menu along with two menu items, Open and Save
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含两个菜单项Open和Save的文件菜单后
- en: 'The application will appear as shown in the following screenshot:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序将显示如下截图所示：
- en: '![](assets/b905aec6-f952-4af1-aeb4-ebab19256086.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b905aec6-f952-4af1-aeb4-ebab19256086.png)'
- en: 'In the Action Editor window that is below the Property Editor window, you can
    see that the default object names of the Open and Save menu items are `actionOpen`
    and `actionSave`, respectively. The Shortcut tab in the Action Editor window is
    currently blank, as no shortcut has yet been assigned to either menu item:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在属性编辑器窗口下方的操作编辑器窗口中，可以看到Open和Save菜单项的默认对象名称分别为`actionOpen`和`actionSave`。操作编辑器窗口中的Shortcut选项卡目前为空，因为尚未为任何菜单项分配快捷键：
- en: '![](assets/f68b6bba-5a63-43b9-b8b2-5d1fbc82a9e3.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f68b6bba-5a63-43b9-b8b2-5d1fbc82a9e3.png)'
- en: 'To assign a shortcut to the Open menu item, double-click on the blank space
    in the Shortcut tab of the `actionOpen` menu item. You get the dialog box, as
    shown in the following screenshot:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为Open菜单项分配快捷键，双击`actionOpen`菜单项的Shortcut选项卡中的空白处。您将得到如下截图所示的对话框：
- en: '![](assets/836d5b52-ff7e-4240-b084-25b0a393679f.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/836d5b52-ff7e-4240-b084-25b0a393679f.png)'
- en: The Text, Object name, and ToolTip boxes are automatically filled with default
    text.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 文本、对象名称和工具提示框会自动填充默认文本。
- en: Click on the Shortcut box to place the cursor in that box, and press the *Ctrl* and
    *O* keys to assign *Ctrl* + *O* as a shortcut to the Open menu item.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Shortcut框以将光标放置在该框中，并按下*Ctrl*和*O*键，将*Ctrl* + *O*分配为Open菜单项的快捷键。
- en: Double-click on the blank space in the Shortcut tab of the `actionSave` menu
    item and press *Ctrl* + *S* in the Shortcut box of the dialog box that opens up.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`actionSave`菜单项的Shortcut选项卡的空白处双击，并在打开的对话框的Shortcut框中按下*Ctrl* + *S*。
- en: 'After assigning the shortcut keys to both the menu items, Open and Save. The
    Action Editor window will appear as shown in the following screenshot:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在为两个菜单项Open和Save分配快捷键后。操作编辑器窗口将显示如下截图所示：
- en: '![](assets/5e2020b6-9dfd-4a42-a2b4-304bcd498027.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e2020b6-9dfd-4a42-a2b4-304bcd498027.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file. On application of the `pyuic5` command, the XML file will be converted
    into Python code. The generated Python script, `demoFileDialog.py`, can be seen
    in the source code bundle of the book. The `demoFileDialog.py` script will be
    used as a header file, and will be imported in another Python script file, which
    will invoke this user interface design, the `File` menu and its respective menu
    items.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件。在应用`pyuic5`命令后，XML文件将被转换为Python代码。生成的Python脚本`demoFileDialog.py`可以在本书的源代码包中找到。`demoFileDialog.py`脚本将用作头文件，并将在另一个Python脚本文件中导入，该文件将调用此用户界面设计、“文件”菜单及其相应的菜单项。
- en: 'Create another Python file with the name `callFileDialog.pyw` and import the
    `demoFileDialog.py` code into it:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callFileDialog.pyw`的Python文件，并将`demoFileDialog.py`代码导入其中：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `callFileDialog.pyw` file, you can see that the click() event of the
    Open menu item with `objectName`, `actionOpen`, is connected to the `openFileDialog` method;
    when the user clicks the Open menu item, the `openFileDialog` method will be invoked.
    Similarly, the click() event of the Save menu item with `objectName`, `actionSave`,
    is connected to the `saveFileDialog` method; when the user clicks the Save menu
    item, the `saveFileDialog` method will be invoked.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callFileDialog.pyw`文件中，您可以看到具有`objectName`、`actionOpen`的“打开”菜单项的click()事件连接到`openFileDialog`方法；当用户单击“打开”菜单项时，将调用`openFileDialog`方法。类似地，“保存”菜单项的click()事件与`objectName`、`actionSave`连接到`saveFileDialog`方法；当用户单击“保存”菜单项时，将调用`saveFileDialog`方法。
- en: In the `openFileDialog` method, the open file dialog is opened by invoking the
    `getOpenFileName` method of the `QFileDialog` class. The open file dialog enables
    the user to browse the directories and choose the desired file to open. After
    selecting the file, when the user clicks the OK button, the selected filename
    is assigned to the `fname` variable. The file is opened in read-only mode and
    the file contents are read and assigned to the Text Edit widget; that is, the
    file content is displayed in the Text Edit widget.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在`openFileDialog`方法中，通过调用`QFileDialog`类的`getOpenFileName`方法打开文件对话框。打开文件对话框使用户能够浏览目录并选择要打开的文件。选择文件后，当用户单击“确定”按钮时，所选文件名将被分配给`fname`变量。文件以只读模式打开，并且文件内容被读取并分配给文本编辑小部件；也就是说，文件内容显示在文本编辑小部件中。
- en: After making the changes in the file contents being displayed in the Text Edit
    widget, when the user clicks the Save menu item from the File dialog, the `saveFileDialog()` method
    will be invoked.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑小部件中显示的文件内容进行更改后，当用户从文件对话框中单击“保存”菜单项时，将调用`saveFileDialog()`方法。
- en: In the `saveFileDialog()` method, the `getSaveFileName()` method is invoked
    on the `QFileDialog` class, which will open the file save dialog box. You can
    save the file with the same name at the same location, or with some other name.
    If the same filename is provided at the same location, then, on clicking the OK
    button, you get a dialog box asking whether you want to overwrite the original
    file with the updated content. On supplying the filename, that file is opened
    in write mode and the content in the Text Edit widget will be read and written
    into the file. That is, the updated file contents that are available in the Text
    Edit widget are written into the supplied filename.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在`saveFileDialog()`方法中，调用`QFileDialog`类上的`getSaveFileName()`方法，将打开文件保存对话框。您可以在相同位置使用相同名称保存文件，或者使用其他名称。如果在相同位置提供相同的文件名，则单击“确定”按钮后，将会出现一个对话框，询问您是否要用更新的内容覆盖原始文件。提供文件名后，该文件将以写入模式打开，并且文本编辑小部件中的内容将被读取并写入文件。也就是说，文本编辑小部件中可用的更新文件内容将被写入提供的文件名。
- en: 'On running the application, you find a File menu with two menu items, Open
    and Save, as shown in the following screenshot. You can see the shortcuts of the
    Open and Save menu items too:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您会发现一个带有两个菜单项“打开”和“保存”的文件菜单，如下面的屏幕截图所示。您还可以看到“打开”和“保存”菜单项的快捷键：
- en: '![](assets/e8b9094f-1160-4842-b63f-ed080a134dd5.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e8b9094f-1160-4842-b63f-ed080a134dd5.png)'
- en: 'On clicking the Open menu item from the File menu, or on pressing the shortcut
    keys *Ctrl* + *O*, you get the Open file dialog, as shown in the following screenshot.
    You can browse the desired directory and select the file to open. After selecting
    the file, you need to click the Open button from the dialog:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 单击文件菜单中的“打开”菜单项，或按下快捷键*Ctrl* + *O*，您将获得打开文件对话框，如下面的屏幕截图所示。您可以浏览所需的目录并选择要打开的文件。选择文件后，您需要从对话框中单击“打开”按钮：
- en: '![](assets/147ba560-0280-49a9-b9fb-8c6a6c6d98ef.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/147ba560-0280-49a9-b9fb-8c6a6c6d98ef.png)'
- en: 'The content of the selected file will be displayed in the Text Edit box, as
    shown in the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 所选文件的内容将显示在文本编辑框中，如下面的屏幕截图所示：
- en: '![](assets/3155d9b5-2c8f-4450-b4a5-b16fb00e9a18.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3155d9b5-2c8f-4450-b4a5-b16fb00e9a18.png)'
- en: 'After making modifications in the file contents shown in the Text Edit box,
    when the user clicks on the Save menu item from the File menu, the `getSaveFileName` method
    will be invoked to display the save file dialog box. Let''s save the file with
    the original name, followed by clicking the Save button, as shown in the following
    screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑框中显示的文件内容进行修改后，当用户从文件菜单中单击“保存”菜单项时，将调用`getSaveFileName`方法以显示保存文件对话框。让我们使用原始名称保存文件，然后单击“保存”按钮，如下面的屏幕截图所示：
- en: '![](assets/7e2a8d8f-0369-42b2-b5f6-32582404514d.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7e2a8d8f-0369-42b2-b5f6-32582404514d.png)'
- en: 'Because the file is being saved with the same name, you will get a dialog box
    asking for confirmation to replace the original file with the new content, as
    shown in the following screenshot. Click on Yes to update the file with the new
    content:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因为文件将以相同的名称保存，您将收到一个对话框，询问是否要用新内容替换原始文件，如下面的屏幕截图所示。单击“是”以使用新内容更新文件：
- en: '![](assets/f629f0a0-3d64-4e81-9aa3-13fefe6f9a13.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f629f0a0-3d64-4e81-9aa3-13fefe6f9a13.png)'
