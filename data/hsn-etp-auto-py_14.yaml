- en: Creating and Managing VMware Virtual Machines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和管理VMware虚拟机
- en: For a long long time, virtualization has been an important technology in the
    IT industry as it provides an efficient way for hardware resources and allows
    us to easily manage application life cycle inside the **Virtual Machine** (**VM**).
    In 2001, VMware released the first version of the ESXi that could run directly
    over the **commodity off the shelf** (**COTS**) **server **while converting it
    to a resource that could be consumed by multiple separate virtual machines. In
    this chapter, we will explore many options available to automate the building
    of virtual machine thanks to Python and Ansible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 很长一段时间以来，虚拟化一直是IT行业中的重要技术，因为它为硬件资源提供了高效的方式，并允许我们轻松地管理**虚拟机**（**VM**）内的应用程序生命周期。2001年，VMware发布了ESXi的第一个版本，可以直接在**现成的商用服务器**（**COTS**）上运行，并将其转换为可以被多个独立虚拟机使用的资源。在本章中，我们将探索许多可用于通过Python和Ansible自动构建虚拟机的选项。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up the lab environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置实验室环境
- en: Generating a VMX file using Jinja2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jinja2生成VMX文件
- en: VMware Python clients
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware Python客户端
- en: Using Ansible playbooks to manage instances
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible Playbooks管理实例
- en: Setting up the environment
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'For this chapter, we will have VMware ESXi version 5.5 installed over a Cisco
    UCS server and host a few virtual machines. We need to enable a few things in
    our ESXi server in order to expose some external ports to the outside world:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在Cisco UCS服务器上安装VMware ESXi 5.5，并托管一些虚拟机。我们需要在ESXi服务器中启用一些功能，以便将一些外部端口暴露给外部世界：
- en: The first thing is to enable both Shell and SSH access to the ESXi console.
    Basically, ESXi allows you to manage it using the vSphere client (based on C#
    for the versions before 5.5.x and based on HTML for version 6 and up). Once we
    enable the Shell and SSH access, this will give us the ability to use the CLI
    to manage virtual infrastructure and to perform tasks such as creating, deleting,
    and customizing the virtual machine.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要启用ESXi控制台的Shell和SSH访问。基本上，ESXi允许您使用vSphere客户端来管理它（基于C#的5.5.x版本之前和基于HTML的6及更高版本）。一旦我们启用了Shell和SSH访问，这将使我们能够使用CLI来管理虚拟基础架构，并执行诸如创建、删除和自定义虚拟机等任务。
- en: 'Access the ESXi vSphere client and go to Configuration, then choose Security
    Profiles from the left tab, and finally click on Properties:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问ESXi vSphere客户端，转到“配置”，然后从左侧选项卡中选择“安全配置文件”，最后点击“属性”：
- en: '![](../images/00171.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00171.jpeg)'
- en: 'A pop-up window will be opened that contains a list of services, statuses,
    and various options that can be applied:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将打开一个弹出窗口，其中包含服务、状态和各种可以应用的选项：
- en: Select SSH service and then click on Option. Another pop-up window will be opened.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择SSH服务，然后点击“选项”。将打开另一个弹出窗口。
- en: Choose the first option that reads Start automatically if any ports are open,
    and stop when all ports are closed under the Startup Policy.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动策略下选择第一个选项，即如果有任何端口打开则自动启动，并在所有端口关闭时停止。
- en: 'Also, click on Start under Service Commands and hit OK:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，点击“服务命令”下的“启动”，然后点击“确定”：
- en: '![](../images/00172.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00172.jpeg)'
- en: 'Repeat the same steps again for the ESXi Shell service. This will ensure that
    both services will be started once the ESXi server has started and will be opened
    and ready to accept the connection. You can test both services, SSH to the ESXi
    IP address and provide the root credentials as with SSH connection:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 再次为ESXi Shell服务重复相同的步骤。这将确保一旦ESXi服务器启动，两个服务都将启动，并且将打开并准备好接受连接。您可以测试两个服务，通过SSH连接到ESXi
    IP地址，并提供root凭据：
- en: '![](../images/00173.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00173.jpeg)'
- en: Generating a VMX file using Jinja2
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jinja2生成VMX文件
- en: The basic unit for a virtual machine (sometimes called a guest machine) is the
    VMX file. This file contains all the settings needed to build the virtual machine
    in terms of compute resources, allocated memory, HDD, and networking. Also, it
    defines the operating system that runs over the machine so the VMware can install
    some tools to manage the VM powering.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机（有时称为客户机）的基本单元是VMX文件。该文件包含构建虚拟机所需的所有设置，包括计算资源、分配的内存、硬盘和网络。此外，它定义了在机器上运行的操作系统，因此VMware可以安装一些工具来管理VM的电源。
- en: 'An additional file is needed: VMDK. This file stores the actual contents of
    the VM and acts as the hard disk for the VM partitions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要一个额外的文件：VMDK。该文件存储VM的实际内容，并充当VM分区的硬盘：
- en: '![](../images/00174.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00174.jpeg)'
- en: These files (VMX and VMDK) should be stored under the `/vmfs/volumes/datastore1`
    directory in the ESXi Shell and should be inside a directory with the name of
    the virtual machine.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件（VMX和VMDK）应存储在ESXi Shell中的`/vmfs/volumes/datastore1`目录下，并且应该位于以虚拟机名称命名的目录中。
- en: Building the VMX template
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建VMX模板
- en: 'We are now going to create the template file that we will use to build our
    virtual machine in Python. Here''s an example of the final running VMX file that
    we need to generate with the help of Python and Jinja2:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建模板文件，用于在Python中构建虚拟机。以下是我们需要使用Python和Jinja2生成的最终运行的VMX文件的示例：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I added some comments inside the file to illustrate the functionality of each
    block. However, in the actual file, you won't see these comments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我在文件中添加了一些注释，以说明每个块的功能。但是，在实际文件中，您看不到这些注释。
- en: 'Let''s analyze the file and understand the meaning of some fields:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析文件并理解一些字段的含义：
- en: '`vhv.enable`: When set to `True`, the ESXi server will expose the CPU host
    flags to the guest CPU that allows the running of the VM inside the guest machine
    (called nested virtualization).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vhv.enable`：当设置为`True`时，ESXi服务器将向客户机CPU公开CPU主机标志，从而允许在客户机内运行VM（称为嵌套虚拟化）。'
- en: '`displayName`: The name that will be registered in the ESXi and shown in the
    vSphere client.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`displayName`：在ESXi中注册的名称，并在vSphere客户端中显示的名称。'
- en: '`memsize`: This defines the allocated RAM to the VM and should be provided
    in megabytes.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`memsize`：定义分配给VM的RAM，应以兆字节为单位提供。'
- en: '`numvcpus`: This defines the number of physical CPUs allocated to the VM. This
    flag is used with `cpuid.coresPerSocket` so it can define the total number of
    vCPU allocated.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numvcpus`：这定义了分配给VM的物理CPU数量。此标志与`cpuid.coresPerSocket`一起使用，因此可以定义分配的vCPU总数。'
- en: '`scsi0.virtualDev`: The type of SCSI controller for the virtual hard drive.
    It can be one of four values: BusLogic, LSI Logic parallel, LSI Logic SAS, or
    VMware paravirtual.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scsi0.virtualDev`：虚拟硬盘的SCSI控制器类型。它可以是四个值之一：BusLogic，LSI Logic parallel，LSI
    Logic SAS或VMware paravirtual。'
- en: '`scsi0:0.fileName`: This defines the name of the `vmdk` (in the same directory)
    that will store the actual virtual machine settings.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scsi0:0.fileName`：这定义了将存储实际虚拟机设置的`vmdk`（在同一目录中）的名称。'
- en: '`ide1:0.fileName`: The image path that contains the installation binaries packaged
    in ISO format. This will make the ESXi connect the ISO image in the image CD-ROM
    (IDE device).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ide1:0.fileName`：包含以ISO格式打包的安装二进制文件的镜像路径。这将使ESXi连接到镜像CD-ROM（IDE设备）中的ISO镜像。'
- en: '`ethernet0.networkName`: This is the name of the virtual switch in ESXi that
    should connect to VM NIC. You can add additional instances of this parameter to
    reflect additional network interfaces.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ethernet0.networkName`：这是ESXi中应连接到VM NIC的虚拟交换机的名称。您可以添加此参数的其他实例，以反映其他网络接口。'
- en: 'Now we will build the Jinja2 template; you can review [Chapter 6](part0102.html#318PC0-9cfcdc5beecd470bbeda046372f0337f),
    *Configuration Generator with Python and Jinja2,* for the basics of templating
    using the Jinja2 language:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将构建Jinja2模板；您可以查看[第6章](part0102.html#318PC0-9cfcdc5beecd470bbeda046372f0337f)，*使用Python和Jinja2进行配置生成*，了解使用Jinja2语言进行模板化的基础知识：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that we removed the static values for the relevant fields, such as `diplayName`,
    `memsize`, and so on, and replaced them with double curly braces with variable
    names inside them. During template rendering from Python, these fields will be
    replaced with actual values to construct a valid VMX file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经删除了相关字段的静态值，比如`diplayName`，`memsize`等，并用双大括号替换为变量名。在Python模板渲染期间，这些字段将被实际值替换，以构建有效的VMX文件。
- en: 'Now, let''s build the Python script that will render the file. Usually, we
    use the YAML data serialization in conjunction with Jinja2 to fill in the data
    of the template. But since we already explain the YAML concept in [Chapter 6](https://cdp.packtpub.com/hands_on_enterprise_automation_with_python/wp-admin/post.php?post=295&action=edit#post_33), *Configuration
    Generator with Python and Jinja2*, we will get our data from another data source,
    Microsoft Excel:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建渲染文件的Python脚本。通常，我们会将YAML数据序列化与Jinja2结合使用，以填充模板的数据。但是，由于我们已经在[第6章](https://cdp.packtpub.com/hands_on_enterprise_automation_with_python/wp-admin/post.php?post=295&action=edit#post_33)中解释了YAML概念，*使用Python和Jinja2进行配置生成*，我们将从另一个数据源，Microsoft
    Excel中获取数据：
- en: '![](../images/00175.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00175.jpeg)'
- en: Handling Microsoft Excel data
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Microsoft Excel数据
- en: Python has some excellent libraries that can handle the data written in an Excel
    sheet. We already used the Excel sheet in [Chapter 4](part0062.html#1R42S0-9cfcdc5beecd470bbeda046372f0337f), *Using
    Python to Manage Network Devices*, when we needed to automate the `netmiko` configuration
    and read the data that described the infrastructure of the Excel file. Now, we
    will start by installing the Python `xlrd` library inside the Automation Server.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Python有一些出色的库，可以处理Excel表中的数据。在[第4章](part0062.html#1R42S0-9cfcdc5beecd470bbeda046372f0337f)中，我们已经使用了Excel表，*使用Python管理网络设备*，当我们需要自动化`netmiko`配置并读取描述Excel文件基础设施的数据时。现在，我们将开始在自动化服务器中安装Python
    `xlrd`库。
- en: 'Use the following command to install `xlrd`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装`xlrd`：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../images/00176.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00176.jpeg)'
- en: 'Follow the steps given below:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: The XLRD module can open the Microsoft workbook and parse the contents using
    the `open_workbook()` method.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: XLRD模块可以打开Microsoft工作簿，并使用`open_workbook()`方法解析内容。
- en: Then you can select the sheet that contains your data either by providing the
    sheet index or the sheet name to the `sheet_by_index()` or `sheet_by_name()` methods
    respectively.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以通过将工作表索引或工作表名称提供给`sheet_by_index()`或`sheet_by_name()`方法来选择包含数据的工作表。
- en: 'Finally, you can access the row data by providing the row number to the `row()`
    function which converts the row data into a Python list:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以通过将行号提供给`row()`函数来访问行数据，该函数将行数据转换为Python列表：
- en: '![](../images/00177.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00177.jpeg)'
- en: Notice that  `nrows` and `ncols` are special variables which will be populated
    once you open the sheet that counts the number of rows and number of columns inside
    the sheet. You can iterate over with the `for` loop. The number always start from
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`nrows`和`ncols`是特殊变量，一旦打开计算工作表中的行数和列数的工作表，它们将被填充。您可以使用`for`循环进行迭代。编号始终从开始。
- en: 'Back to the virtual machine example. We will have the following data in the
    Excel sheet, which reflects the virtual machine settings:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 回到虚拟机示例。在Excel表中，我们将有以下数据，反映虚拟机设置：
- en: '![](../images/00178.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00178.jpeg)'
- en: 'To read the data into Python, we will use the following script:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将数据读入Python，我们将使用以下脚本：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the previous script, we did the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，我们做了以下事情：
- en: We imported the `xlrd` module and provided the Excel file to the `open_workbook()`
    method to read the Excel sheet and save that to the `workbook` variable.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入了`xlrd`模块，并将Excel文件提供给`open_workbook()`方法以读取Excel工作表，并将其保存到`workbook`变量中。
- en: Then, we accessed the first sheet using the `sheet_by_index()` method and saved
    the reference to the `sheet` variable.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`sheet_by_index()`方法访问了第一个工作表，并将引用保存到`sheet`变量中。
- en: Now we will iterate over the opened sheet and get each field using the `row()`
    method. This will allow us to convert the row to a Python list. Since we need
    only one value inside the row, we will use the list slice to access the index.
    Remember that the list index always starts with zero. We will store that value
    into the variable and we will use this variable to populate the Jinja2 template
    in the next section.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将遍历打开的表格，并使用`row()`方法获取每个字段。这将允许我们将行转换为Python列表。由于我们只需要行内的一个值，我们将使用列表切片来访问索引。请记住，列表索引始终从零开始。我们将把该值存储到变量中，并在下一部分中使用该变量来填充Jinja2模板。
- en: Generating VMX files
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成VMX文件
- en: 'The last part is to generate the VMX files from the Jinja2 template. We will
    read the data from the Excel sheet and add it to the empty dictionary, `vmx_data`.
    This dictionary will be passed later to the `render()` function inside the Jinja2
    template. The Python dictionary key will be the template variable name while the
    value will be the substituted values that should be in the file. The final part
    in the script is to open a file in writing mode inside the `vmx_files` directory
    and write the data into it for each VMX file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分是从Jinja2模板生成VMX文件。我们将从Excel表中读取数据，并将其添加到空字典`vmx_data`中。稍后将该字典传递给Jinja2模板中的`render()`函数。Python字典键将是模板变量名，而值将是应该在文件中替换的值。脚本的最后一部分是在`vmx_files`目录中以写入模式打开文件，并为每个VMX文件写入数据：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The script output is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下：
- en: '![](../images/00179.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00179.jpeg)'
- en: 'The files are stored under `vmx_files` and each one contains specific information
    for the virtual machine as configured in the excel sheet:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 文件存储在`vmx_files`下，每个文件都包含在Excel表中配置的虚拟机的特定信息：
- en: '![](../images/00180.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00180.jpeg)'
- en: 'Now, we will use both `paramiko` and `scp` libraries to connect to the ESXi
    Shell and upload these files under `/vmfs/volumes/datastore1`. To achieve that,
    we will first create a function named `upload_and_create_directory()` that accepts `vm
    name`, `hard disk size`, and VMX `source file`.  `paramiko` will connect to the
    ESXi server and execute the required commands which will create both the directory
    and VMDK under `/vmfs/volumes/datastore1`. Finally, we will use `SCPClient` from
    the `scp` module to upload the source files to the previously created directory
    and run the registry command to add the machine to the vSphere client:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`paramiko`和`scp`库连接到ESXi Shell，并将这些文件上传到`/vmfs/volumes/datastore1`下。为了实现这一点，我们将首先创建一个名为`upload_and_create_directory()`的函数，该函数接受`vm
    name`、`hard disk size`和VMX`source file`。`paramiko`将连接到ESXi服务器并执行所需的命令，这将在`/vmfs/volumes/datastore1`下创建目录和VMDK。最后，我们将使用`scp`模块中的`SCPClient`将源文件上传到先前创建的目录，并运行注册命令将机器添加到vSphere客户端：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We need to define this function *before* we run theJinja2 template and generate
    the VMX and call the function *after* we save the file to the `vmx_files` directory
    and pass the required arguments to it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在运行Jinja2模板并生成VMX之前定义这个函数*之前*，并在将文件保存到`vmx_files`目录并传递所需的参数后调用该函数。
- en: 'The final code should be as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最终代码应该如下所示：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The script output is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下：
- en: '![](../images/00181.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00181.jpeg)'
- en: 'If you check the vSphere client after you run the script, you will find four
    machines have been created with the name provided in the Excel sheet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行脚本后检查vSphere客户端，您会发现已经创建了四台机器，这些机器的名称是在Excel表中提供的：
- en: '![](../images/00182.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00182.jpeg)'
- en: 'Also, you will find the virtual machine customized with settings such as CPUs,
    Memory, and connected ISO room:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您会发现虚拟机已经定制了诸如CPU、内存和连接的ISO室等设置：
- en: '![](../images/00183.jpeg)You can complete your automation workflow in VMware
    by connecting the created virtual machine to Cobbler. We covered it in [Chapter
    8](part0116.html#3EK180-9cfcdc5beecd470bbeda046372f0337f), *Preparing the System
    Lab Environment*. Cobbler will automate the operating system installation and
    customization either Windows, CentOS, or Ubuntu. After that, you can use Ansible,
    which we covered in [Chapter 13](part0168.html#506UG0-9cfcdc5beecd470bbeda046372f0337f)*,
    Ansible for System Administration*, to prepare the system in terms of security,
    configuration, and installed packages, then deploy your application after that.
    This is a full-stack automation that covers things such as virtual machine creation
    and getting your application up and running.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00183.jpeg)您可以通过将创建的虚拟机连接到Cobbler来在VMware中完成自动化工作流程。我们在[第8章](part0116.html#3EK180-9cfcdc5beecd470bbeda046372f0337f)中介绍了这一点，*准备系统实验环境*。Cobbler将自动化操作系统安装和定制，无论是Windows、CentOS还是Ubuntu。之后，您可以使用我们在[第13章](part0168.html#506UG0-9cfcdc5beecd470bbeda046372f0337f)中介绍的Ansible，*系统管理的Ansible*，来准备系统的安全性、配置和已安装的软件包，然后部署您的应用程序。这是一个全栈自动化，涵盖了虚拟机创建和应用程序的运行。'
- en: VMware Python clients
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VMware Python客户端
- en: VMware products (ESXi and vCenter, which used to manage ESXi) support receiving
    external API requests through the web service. You can execute the same administration
    tasks you do on the vSphere client, such as creating a new virtual machine, creating
    a new vSwitch, or even controlling the `vm` status, but this time through the
    supported API that has bindings for many languages, such as Python, Ruby, and
    Go.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: VMware产品（用于管理ESXi的ESXi和vCenter）支持通过Web服务接收外部API请求。您可以执行与vSphere客户端上相同的管理任务，例如创建新的虚拟机、创建新的vSwitch，甚至控制`vm`状态，但这次是通过支持的API进行的，该API具有许多语言的绑定，例如Python、Ruby和Go。
- en: vSphere has a special model for the inventory and everything inside it is an
    object with specific values. You can access this model and see the actual values
    for your infrastructure through the **Managed Object Browser** (**MoB**) which
    gives you access to all object details. We will use the official Python bindings
    from VMware (`pyvmomi`) to interact with this model and alter the values (or create
    them) inside the inventory.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: vSphere具有库存的特殊模型，其中的每个对象都具有特定的值。您可以访问此模型，并通过**托管对象浏览器**（**MoB**）查看基础设施的实际值。我们将使用VMware的官方Python绑定（`pyvmomi`）与此模型进行交互，并更改库存中的值（或创建它们）。
- en: 'It''s worth noting that the MoB can be accessed through the web browser by
    going to `http://<ESXi_server_ip_or_domain>/mob`,which will ask you to provide
    the root username and password:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，可以通过浏览器访问MoB，方法是转到`http://<ESXi_server_ip_or_domain>/mob`，这将要求您提供根用户名和密码：
- en: '![](../images/00184.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00184.jpeg)
- en: 'You can click on any of the hyperlinks to see more details and access each
    *leaf* inside each tree or context. For example, click on Content.about to see
    full details about your server such as the exact version, build, and full name:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单击任何超链接以查看更多详细信息并访问每个树或上下文中的每个*叶*。例如，单击Content.about以查看有关服务器的完整详细信息，例如确切的版本、构建和完整名称：
- en: '![](../images/00185.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00185.jpeg)
- en: Notice how the table is structured. The first column contains the property name,
    the second column is the data type of that property, and, finally, the third column
    is the actual running value.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意表的结构。第一列包含属性名称，第二列是该属性的数据类型，最后，第三列是实际运行值。
- en: Installing PyVmomi
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyVmomi
- en: PyVmomi is available to download either though Python `pip` or as a system package
    from different repos.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: PyVmomi可以通过Python `pip`或不同仓库的系统包进行下载。
- en: 'For Python installation, use the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python安装，请使用以下命令：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../images/00186.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00186.jpeg)
- en: Notice the version downloaded from `pip` is `6.5.2017.5-1`, which correlates
    with the vSphere release VMware vSphere 6.5, but this doesn't mean it won't work
    with older releases of ESXi. For example, I have VMware vSphere 5.5, which works
    flawlessly with the latest `pyvmomi` version.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从`pip`下载的版本是`6.5.2017.5-1`，与vSphere发布的VMware vSphere 6.5相对应，但这并不意味着它不能与旧版本的ESXi一起使用。例如，我有VMware
    vSphere 5.5，它可以与最新的`pyvmomi`版本完美配合使用。
- en: 'For system installation:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 系统安装：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The Pyvmomi library uses dynamic types which means features such as Intelli-Sense
    and autocomplete features in IDE do not work with it. You have to rely on documentation
    and MoB to discover what classes or methods are needed to get the job done but,
    once you discover the way it works, it will be pretty easy to work with.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Pyvmomi库使用动态类型，这意味着IDE中的智能感知和自动完成功能等功能无法与其一起使用。您必须依赖文档和MoB来发现需要哪些类或方法来完成工作，但是一旦您发现它的工作原理，就会很容易使用。
- en: First steps with pyvmomi
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pyvmomi的第一步
- en: 'The first thing is you need to do is connect to ESXi MoB by providing the username,
    password, and host IP, and start to navigate to the MoB to get the required data.
    This can be done by using the `SmartConnectNoSSL()` method:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要通过提供用户名、密码和主机IP连接到ESXi MoB，并开始导航到MoB以获取所需的数据。这可以通过使用`SmartConnectNoSSL()`方法来完成：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that there''s another method called `SmartConnect()` and you must provide
    the SSL context to it when establishing a connection, otherwise the connection
    will fail. However, you can use the following code snippet to request that the
    SSL does not verify the certificate and to pass this context to `SmartConnect()`
    in the `sslCContext` argument:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，还有另一种称为`SmartConnect()`的方法，当建立连接时必须向其提供SSL上下文，否则连接将失败。但是，您可以使用以下代码片段请求SSL不验证证书，并将此上下文传递给`SmartConnect()`的`sslCContext`参数：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For the sake of beverity and to keep our code short, we will use the built-in
    `SmartConnectNoSSL()`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了严谨性和保持代码简洁，我们将使用内置的`SmartConnectNoSSL()`。
- en: 'Next, we will start exploring the MoB and get the full name and version of
    our server in the `about` object. Remember, it''s located under the `content`
    object, so we need to access that too:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始探索MoB并在`about`对象中获取服务器的完整名称和版本。请记住，它位于`content`对象下，所以我们也需要访问它：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output is as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '**![](../images/00187.jpeg)**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**！[](../images/00187.jpeg)**'
- en: Great. Now we understand how the API works. Let's get into some serious scripts
    and retrieve some details about the deployed virtual machine in our ESXi.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了API的工作原理。让我们进入一些严肃的脚本，并检索有关我们ESXi中部署的虚拟机的一些详细信息。
- en: 'The script is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本如下：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the previous example, we did the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们做了以下事情：
- en: We established the API connection again to MoB by providing the ESXi/vCenter
    credentials to the `SmartConnectNoSSL` method.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们再次通过向`SmartConnectNoSSL`方法提供ESXi/vCenter凭据来建立API连接到MoB。
- en: Then, we accessed the data center object by accessing the `content` then `rootFolder`
    objects and finally `childEntity`. The returned object was an iterable so we accessed
    the first element (the first data center) since we had only one ESXi in the lab.
    You could iterate over all data centers to get a list of all virtual machines
    in all registered data centers.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过访问`content`然后`rootFolder`对象和最后`childEntity`来访问数据中心对象。返回的对象是可迭代的，因此我们访问了第一个元素（实验室中只有一个ESXi的第一个数据中心）。您可以遍历所有数据中心以获取所有注册数据中心中所有虚拟机的列表。
- en: 'The virtual machines can be accessed via the `vmFolder` and the `childEntity`.
    Again, remember the returned output is iteratable and represents the virtual machine
    list stored inside the `virtual_machines` variable:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟机可以通过`vmFolder`和`childEntity`访问。同样，请记住返回的输出是可迭代的，并表示存储在`virtual_machines`变量中的虚拟机列表：
- en: '![](../images/00188.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00188.jpeg)
- en: 'We iterated over the `virtual_machines` object and we query the CPU, Memory,
    Full name, and IP address of each element (for each virtual machine). These elements
    are located under each virtual machine tree in the `summary` and `config` leafs.
    Here is an example of our `AutomationServer` settings:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们遍历了`virtual_machines`对象，并查询了每个元素（每个虚拟机）的CPU、内存、全名和IP地址。这些元素位于`summary`和`config`叶子下的每个虚拟机树中。以下是我们的`AutomationServer`设置的示例：
- en: '![](../images/00189.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00189.jpeg)'
- en: 'The script output is as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下：
- en: '![](../images/00190.jpeg)Note that the `python-vm` machines that we created
    early at the beginning of the chapter are printed in the last screenshot. You
    can use PyVmomi as a validation tool that integrates with your automation workflow
    to validate whether machines are up and running and to make decisions based on
    the returned output.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在本章的开头我们创建的`python-vm`虚拟机在最后一个截图中显示出来。您可以使用PyVmomi作为验证工具，与您的自动化工作流集成，验证虚拟机是否正在运行，并根据返回的输出做出决策。
- en: Changing the virtual machine state
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改虚拟机状态
- en: This time we will use the `pyvmomi` bindings to change the virtual machine state.
    This will be done by checking the virtual machine name as we did before; then,
    we will navigate to another tree in MoB and get the runtime status. Finally, we
    will apply either the `PowerOn()` or `PowerOff()` function on the machine depending
    on its current status. This will switch the machine state from `On` to `Off` and
    vice versa.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们将使用`pyvmomi`绑定来更改虚拟机状态。这将通过检查虚拟机名称来完成；然后，我们将导航到MoB中的另一个树，并获取运行时状态。最后，我们将根据其当前状态在机器上应用`PowerOn()`或`PowerOff()`函数。这将把机器状态从`On`切换到`Off`，反之亦然。
- en: 'The script is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本如下：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The script output is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下：
- en: '![](../images/00191.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00191.jpeg)'
- en: 'Also, you can validate the virtual machine statue from the vSphere client and
    check the hosts that start with `python-vm*`, changing their power state from
    `poweredOff` to `poweredOn`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以从vSphere客户端验证虚拟机状态，并检查以`python-vm*`开头的主机，将它们的电源状态从`poweredOff`更改为`poweredOn`：
- en: '![](../images/00192.gif)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00192.gif)'
- en: There's more
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多
- en: You can find many useful scripts based on the `pyvmomi` bindings (in different
    languages) in the official VMware repository at GitHub ([https://github.com/vmware/pyvmomi-community-samples/tree/master/samples](https://github.com/vmware/pyvmomi-community-samples/tree/master/samples)).
    The scripts are provided by numerous contributors who use the tools and test them
    on a daily basis. Most of the scripts provide room to enter your configuration
    (such as ESXi IP address and credentials) without modifying the script source
    code by providing it as arguments.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub的官方VMware存储库中找到基于`pyvmomi`绑定的许多有用的脚本（使用不同的语言）（[https://github.com/vmware/pyvmomi-community-samples/tree/master/samples](https://github.com/vmware/pyvmomi-community-samples/tree/master/samples)）。这些脚本由许多使用工具并在日常基础上测试它们的贡献者提供。大多数脚本提供了输入您的配置（如ESXi
    IP地址和凭据）的空间，而无需通过提供它作为参数修改脚本源代码。
- en: Using Ansible playbook to manage instances
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible Playbook管理实例
- en: In the last part of VMware automation, we will utilize the Ansible tool to administrate
    the VMware infrastructure. Ansible ships with more than 20 VMware modules ([http://docs.ansible.com/ansible/latest/modules/list_of_cloud_modules.html#vmware](http://docs.ansible.com/ansible/latest/modules/list_of_cloud_modules.html#vmware)),
    which can execute many tasks such as managing data centers, clusters, and virtual
    machines. In older Ansible versions, Ansible used the `pysphere` module (which
    is not official; the author of the module has not maintained it since 2013) to
    automate the tasks. However, the newer version now supports the `pyvmomi` bindings.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在VMware自动化的最后部分，我们将利用Ansible工具来管理VMware基础架构。Ansible附带了20多个VMware模块（[http://docs.ansible.com/ansible/latest/modules/list_of_cloud_modules.html#vmware](http://docs.ansible.com/ansible/latest/modules/list_of_cloud_modules.html#vmware)），可以执行许多任务，如管理数据中心、集群和虚拟机。在较旧的Ansible版本中，Ansible使用`pysphere`模块（这不是官方的；模块的作者自2013年以来就没有维护过它）来自动化任务。然而，新版本现在支持`pyvmomi`绑定。
- en: Ansible also supports the VMware SDN product (NSX). Ansible Tower can be accessed
    from **VMware vRealize Automation** (**vRA**), which allows for complete workflow
    integration between different tools.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible还支持VMware SDN产品（NSX）。Ansible Tower可以从**VMware vRealize Automation**（**vRA**）访问，允许在不同工具之间实现完整的工作流集成。
- en: 'The following is the Ansible Playbook:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Ansible Playbook：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the previous playbook, we can see the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的playbook中，我们可以看到以下内容：
- en: The first part of the playbook was to define the ESXi host IP and credentials
    in the `vars` section and to use them later in tasks.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: playbook的第一部分是在`vars`部分中定义ESXi主机IP和凭据，并在后续任务中使用它们。
- en: Then we wrote a simple validation to fail the playbook if the username or password
    was not provided.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们编写了一个简单的验证，如果未提供用户名或密码，就会使playbook失败。
- en: Then, we used the `vmware_guest` module provided by ansible ([https://docs.ansible.com/ansible/2.4/vmware_guest_module.html](https://docs.ansible.com/ansible/2.4/vmware_guest_module.html))
    to provision the virtual machine. Inside this task, we provided the required information,
    such as disk size and hardware in term of CPU and memory. Notice that we defined
    the state of the virtual machine as `poweredon` so ansible will power on the virtual
    machine after creating it.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们使用ansible提供的`vmware_guest`模块（[https://docs.ansible.com/ansible/2.4/vmware_guest_module.html](https://docs.ansible.com/ansible/2.4/vmware_guest_module.html)）来提供虚拟机。在这个任务中，我们提供了所需的信息，比如磁盘大小和CPU和内存方面的硬件。请注意，我们将虚拟机的状态定义为`poweredon`，因此ansible将在创建后启动虚拟机。
- en: Disks, networks, hardware, and CD-ROMs are all keys inside the `vmware_guest`
    module used to describe the virtualized hardware specs needed for spawning the
    new VM over the VMware ESXi.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘、网络、硬件和CD-ROM都是`vmware_guest`模块中的关键，用于描述在VMware ESXi上生成新VM所需的虚拟化硬件规格。
- en: 'Run the playbook using the following command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行playbook：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following is the screenshot of the Playbook output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Playbook输出的截图：
- en: '![](../images/00193.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00193.jpeg)'
- en: 'You can validate the virtual machine creation and binding with the CentOS ISO
    file in the vSphere client:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在vSphere客户端中验证虚拟机的创建和与CentOS ISO文件的绑定：
- en: '![](../images/00194.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00194.jpeg)'
- en: You can also change the state of the existing virtual machine and choose from
    `poweredon`, `poweredoff`, `restarted`, `absent`, `suspended`, `shutdownguest`,
    and `rebootguest` by changing the value in `state` inside the playbook.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过更改剧本中“状态”中的值来更改现有虚拟机的状态，并从“poweredon”、“poweredoff”、“restarted”、“absent”、“suspended”、“shutdownguest”和“rebootguest”中进行选择。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: VMware products are used widely inside IT infrastructure to provide virtualized
    environments for running applications and workloads. At the same time, VMware
    also provides API bindings in many languages that can be used to automate administration
    tasks. In the next chapter, we will explore another virtualization framework called
    OpenStack that relies on the KVM hypervisor from Red Hat.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: VMware产品广泛用于IT基础设施中，为运行应用程序和工作负载提供虚拟化环境。与此同时，VMware还提供了许多语言的API绑定，可用于自动化管理任务。在下一章中，我们将探索另一个名为OpenStack的虚拟化框架，该框架依赖于红帽公司的KVM
    hypervisor。
