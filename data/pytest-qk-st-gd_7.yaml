- en: Introducing pytest
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入pytest
- en: Automated testing is considered to be an indispensable tool and methodology
    for producing high-quality software. Testing should be a part of every professional
    software developer's toolbox, yet at the same time, it is considered by many to
    be a boring and repetitive part of the job. But that does not have to be the case
    when you use pytest as your testing framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试被认为是生产高质量软件的不可或缺的工具和方法。测试应该是每个专业软件开发人员工具箱的一部分，但与此同时，许多人认为这是工作中无聊和重复的部分。但当您使用pytest作为测试框架时，情况就不一样了。
- en: This book will introduce you to various key features and will teach how to use
    pytest effectively in your day-to-day coding tasks right from the first chapter,
    focusing on making you productive as quickly as possible. Writing tests should
    then become a joy, rather than a boring part of the job.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将向您介绍各种关键功能，并教您如何从第一章开始有效地使用pytest进行日常编码任务，重点是让您尽快提高生产力。编写测试应该成为一种乐趣，而不是工作中无聊的部分。
- en: 'We will start by taking a look at the reasons why automated testing is important.
    I will also try to convince you that it is not something that you should have
    simply because it is the right thing to do. Automated testing is something that
    you will want to have because it will make your job much **easier and more enjoyable**.
    We will take a glimpse at Python''s standard `unittest` module, and introduce
    pytest and why it carries so much more punch while also being dead simple to get
    started with. Then, we will cover how to write tests, how to organize them into
    classes and directories, and how to use pytest''s command line effectively. From
    there, we will take a look at how to use marks to control skipping tests or expecting
    test failures, how to use custom marks to your advantage, and how to test multiple
    inputs using the same testing code parameterization to avoid copy/pasting code.
    This will help us to learn how to manage and reuse testing resources and environments
    using one of pytest''s most loved features: fixtures. After that, we will take
    a tour of some of the more popular and useful plugins from the vast plugin ecosystem
    that pytest has to offer. Finally, we will approach the somewhat more advanced
    topic of how to gradually convert `unittest` based test suites into the pytest
    style in order to take advantage of its many benefits in existing code bases.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先看一下自动化测试的重要性。我还会试图说服您，这不是因为这是正确的事情，所以您应该拥有它。自动化测试是您希望拥有的东西，因为它会让您的工作变得更加轻松和愉快。我们将简要介绍Python的标准`unittest`模块，并介绍pytest以及为什么它具有更多的功能，同时使用起来非常简单。然后，我们将介绍如何编写测试，如何将它们组织成类和目录，以及如何有效地使用pytest的命令行。然后，我们将看一下如何使用标记来控制跳过测试或期望测试失败，如何利用自定义标记，以及如何使用相同的测试代码参数化来测试多个输入，以避免复制/粘贴代码。这将帮助我们学习如何使用pytest最受欢迎的功能之一：fixture来管理和重用测试资源和环境。之后，我们将介绍pytest提供的一些更受欢迎和有用的插件。最后，我们将探讨如何逐步将基于`unittest`的测试套件转换为pytest风格，以便在现有代码库中充分利用其许多优势。
- en: 'In this chapter, we will take a quick look at why we should be testing, the
    built-in `unittest` module, and an overview of pytest. Here is what will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将快速了解为什么我们应该进行测试，内置的`unittest`模块以及pytest的概述。以下内容将被涵盖：
- en: Why spend time writing tests?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要花时间编写测试？
- en: A quick look at the `unittest` module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速了解`unittest`模块
- en: Why pytest?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择pytest？
- en: Let's get started by taking a step back and thinking about why writing tests
    is considered to be so important.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先退一步，思考为什么编写测试被认为是如此重要。
- en: Why spend time writing tests?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要花时间编写测试？
- en: Testing programs manually is natural; writing automated tests is not.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 手动测试程序是自然的；编写自动化测试则不是。
- en: Programmers use various techniques when learning to code or when dabbling in
    new technologies and libraries. It is common to write short snippets, follow a
    tutorial, play in the REPL, or even use Jupyter ([http://jupyter.org/](http://jupyter.org/)).
    Often, this involves manually verifying the results of what is being studied by
    using print statements or plotting graphics. This is easy, natural, and a perfectly
    valid way of learning new things.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员在学习编码或尝试新技术和库时使用各种技术。编写短小的代码片段，跟随教程，使用REPL玩耍，甚至使用Jupyter（[http://jupyter.org/](http://jupyter.org/)）。通常，这涉及手动验证所学内容的结果，使用打印语句或绘制图形。这是一种简单、自然且完全有效的学习新知识的方式。
- en: This pattern, however, should not be carried over to professional software development.
    Professional software is not simple; on the contrary, it is usually very complex.
    Depending on how well designed a system is, parts can be intertwined in strange
    ways, with the addition of new functionality potentially breaking another, apparently
    unrelated, part of the system. Fixing a bug might cause another bug to spring
    up somewhere else.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种模式不应该延续到专业软件开发中。专业软件并不简单；相反，它通常非常复杂。根据系统设计的好坏，各个部分可能以奇怪的方式交织在一起，新功能的添加可能会破坏系统的另一个看似无关的部分。修复一个错误可能会导致另一个错误在其他地方出现。
- en: How can you make sure that a new functionality is working or that a bug has
    been squashed for good? Just as important, how can you ensure that, by fixing
    or introducing a new feature, another part of the system will not be broken?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如何确保新功能正常工作或错误已经被彻底解决？同样重要的是，如何确保通过修复或引入新功能，系统的另一部分不会被破坏？
- en: The answer is by having a healthy and embracing suite of automated tests, also
    called a test suite.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是通过拥有一套健康和全面的自动化测试，也称为测试套件。
- en: A test suite is, simply put, code that tests your code. Usually, they create
    one or more necessary resources and call the application code under test. They
    then assert that the results are as expected. Besides being executed on the developer's
    machine, in most modern setups, they are run continuously—for example, every hour
    or every commit—by an automated system such as Jenkins. Because of this, adding
    tests for a piece of code means that, from now on, it will be tested again and
    again as features are added and bugs are fixed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件简单来说就是测试您的代码的代码。通常，它们会创建一个或多个必要的资源，并调用要测试的应用程序代码。然后，他们断言结果是否符合预期。除了在开发人员的机器上执行外，在大多数现代设置中，它们会被连续运行，例如每小时或每次提交，由像Jenkins这样的自动化系统运行。因此，为一段代码添加测试意味着从现在开始，它将在添加功能和修复错误时一遍又一遍地进行测试。
- en: 'Having automated tests means that you can make changes to a program and immediately
    see if those changes have broken part of the system, acting as a safety net for
    developers. Having a good test suite is very liberating: you no longer fear improving
    a piece of code that was written 8 years ago, and if you make any mistakes, the
    test suite will tell you. You can add a new feature and be confident that it will
    not break any other parts of the system that you did not expect. It is absolutely
    essential to be able to convert a large library from Python 2 to 3 with confidence,
    or make large-scale refactorings. By adding one or more automated tests that reproduce
    a bug, and prove that you fixed it, you ensure the bug won''t be reintroduced
    by refactoring or another coding error later down the road.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有自动化测试意味着您可以对程序进行更改，并立即查看这些更改是否破坏了系统的某个部分，作为开发人员的安全网。拥有一个良好的测试套件非常令人振奋：您不再害怕改进8年前编写的代码，如果犯了任何错误，测试套件会告诉您。您可以添加一个新功能，并确信它不会破坏您没有预料到的系统的其他部分。能够有信心地将一个大型库从Python
    2转换为3，或进行大规模的重构，是绝对必要的。通过添加一个或多个自动化测试来重现一个bug，并证明您已经修复了它，您可以确保这个bug不会在以后的重构或其他编码错误中再次出现。
- en: 'Once you get used to enjoying the benefits of having a test suite as a safety
    net, you might even decide to write tests for APIs that you depend on but know
    that developers don''t have tests for: it is a rare moment of professional pride
    to be able to produce failing tests to the original developers to prove that their
    new release is to blame for a bug and not your code.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你习惯了享受测试套件作为安全网的好处，你甚至可能决定为你依赖的API编写测试，但知道开发人员没有测试：能够向原始开发人员提供失败的测试来证明他们的新版本是导致错误的原因，而不是你的代码，这是一个罕见的职业骄傲时刻。
- en: Having a well written and in-depth test suite will allow you to make changes,
    big or small, with confidence, and help you sleep better at night.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个写得很好、深入的测试套件将使您能够放心地进行任何大小的更改，并帮助您晚上睡得更好。
- en: A quick look at the unittest module
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速查看unittest模块
- en: 'Python comes with the built-in `unittest` module, which is a framework to write
    automated tests based on JUnit, a unit testing framework for Java. You create
    tests by subclassing from `unittest.TestCase` and defining methods that begin
    with `test`. Here''s an example of a typical minimal test case using `unittest`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python自带内置的`unittest`模块，这是一个基于Java的单元测试框架JUnit编写自动化测试的框架。您可以通过从`unittest.TestCase`继承并定义以`test`开头的方法来创建测试。以下是使用`unittest`的典型最小测试用例的示例：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The focus of this example is on showcasing the test itself, not the code being
    tested, so we will be using a simple `fibonacci` function. The Fibonacci sequence
    is an infinite sequence of positive integers where the next number in the sequence
    is found by summing up the two previous numbers. Here are the first 11 numbers:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的重点是展示测试本身，而不是被测试的代码，所以我们将使用一个简单的`fibonacci`函数。斐波那契数列是一个无限的正整数序列，其中序列中的下一个数字是通过将前两个数字相加得到的。以下是前11个数字：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Our `fibonacci` function receives an `index` of the fibonacci sequence, computes
    the value on the fly, and returns it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`fibonacci`函数接收斐波那契数列的`index`，实时计算值并返回它。
- en: 'To ensure the function is working as expected, we call it with a value that
    we know the correct answer for (the fourth element of the Fibonacci series is
    3), then the `self.assertEqual(a, b)` method is called to check that `a` and `b`
    are equal. If the function has a bug and does not return the expected result,
    the framework will tell us when we execute it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保函数按预期工作，我们使用我们知道正确答案的值来调用它（斐波那契数列的第四个元素是3），然后调用`self.assertEqual(a, b)`方法来检查`a`和`b`是否相等。如果函数有bug并且没有返回预期的结果，当我们执行它时，框架会告诉我们：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It seems there''s a bug in our `fibonacci` function and whoever wrote it forgot
    that for `n=0` it should return `0`. Fixing the function and running the test
    again shows that the function is now correct:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`fibonacci`函数似乎有一个bug，写它的人忘记了对于`n=0`应该返回`0`。修复函数并再次运行测试显示函数现在是正确的：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is great and is certainly a step in the right direction. But notice that,
    in order to code this very simple check, we had to do a number of things not really
    related to the check itself:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，当然是朝着正确的方向迈出的一步。但请注意，为了编写这个非常简单的检查，我们必须做一些与检查本身无关的事情：
- en: Import `unittest`
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`unittest`
- en: Create a class subclassing from `unittest.TestCase`
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个从`unittest.TestCase`继承的类
- en: Use `self.assertEqual()` to do the checking; there are a lot of `self.assert*`
    methods that should be used for all situations like `self.assertGreaterEqual`
    (for ≥ comparisons), `self.assertLess` (for < comparisons), `self.assertAlmostEqual`
    (for floating point comparisons), `self.assertMultiLineEqual()` (for multi-line
    string comparisons), and so on
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`self.assertEqual()`进行检查；有很多`self.assert*`方法应该用于所有情况，比如`self.assertGreaterEqual`（用于≥比较），`self.assertLess`（用于<比较），`self.assertAlmostEqual`（用于浮点数比较），`self.assertMultiLineEqual()`（用于多行字符串比较），等等
- en: The above feels like unnecessary boilerplate, and while it is certainly not
    the end of the world, some people feel that the code is non-Pythonic; code is
    written just to placate the framework into doing what you need it to.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容感觉像是不必要的样板文件，虽然这当然不是世界末日，但有些人觉得这段代码不符合Pythonic的风格；代码只是为了迎合框架而编写的。
- en: Also, the `unittest` framework doesn't provide much in terms of batteries included
    to help you write your tests for the real world. Need a temporary directory? You
    need to create it yourself and clean up afterwards. Need to connect to a PostgreSQL
    database to test a Flask application? You will need to write the supporting code
    to connect to the database, create the required tables, and clean up when the
    tests end. Need to share utility test functions and resources between tests? You
    will need to create base classes and reuse them through subclassing, which in
    large code bases might evolve into multiple inheritance. Some frameworks provide
    their own `unittest` support code (for example, Django, [https://www.djangoproject.com/](https://www.djangoproject.com/)),
    but those frameworks are rare.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`unittest`框架在帮助您编写真实世界的测试方面并没有提供太多内置功能。需要临时目录吗？您需要自己创建并在之后清理。需要连接到PostgreSQL数据库来测试Flask应用程序？您需要编写支持代码来连接到数据库，创建所需的表，并在测试结束时进行清理。需要在测试之间共享实用程序测试函数和资源吗？您需要创建基类并通过子类化重用它们，在大型代码库中可能会演变成多重继承。一些框架提供自己的`unittest`支持代码（例如Django，[https://www.djangoproject.com/](https://www.djangoproject.com/)），但这些框架很少。
- en: Why pytest?
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择pytest？
- en: Pytest is a mature and full-featured testing framework, from small tests to
    large scale functional tests for applications and libraries alike.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest是一个成熟且功能齐全的测试框架，从小型测试到应用程序和库的大规模功能测试。
- en: 'Pytest is simple to get started with. To write tests, you don''t need classes;
    you can write simple functions that start with `test` and use Python''s built-in
    `assert` statement:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest很容易上手。要编写测试，您不需要类；您可以编写以`test`开头并使用Python内置的`assert`语句的简单函数：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'That''s it. You import your code, write a function, and use plain assert calls
    to ensure they are working as you expect: no need to make a subclass and use various
    `self.assert*` methods to do your testing. And the beautiful thing is that it
    also provides helpful output when an assertion fails:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。您导入您的代码，编写一个函数，并使用普通的assert调用来确保它们按您的期望工作：无需创建子类并使用各种`self.assert*`方法来进行测试。而美妙的是，当断言失败时，它还提供了有用的输出：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that the values involved in the expression and the code around it are
    displayed to make it easier to understand the error.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，表达式中涉及的值和周围的代码都会显示出来，以便更容易理解错误。
- en: Pytest not only makes it **simple to write tests**, it has many **command-line
    options that increase productivity**, such as running just the last failing tests,
    or running a specific group of tests by name or because they're specially marked.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest不仅使编写测试变得**简单**，它还有许多**命令行选项来提高生产力**，比如仅运行最后失败的测试，或者按名称或特殊标记运行特定组的测试。
- en: Creating and managing testing resources is an important aspect that is often
    overlooked in tutorials or overviews of testing frameworks. Tests for real-world
    applications usually need complex setups, such as starting a background worker,
    filling up a database, or initializing a GUI. Using pytest, those complex test
    resources can be managed by a powerful mechanism called **fixtures**. Fixtures
    are simple to use but very powerful at the same time, and many people refer to
    them as *pytest's killer feature.* They will be shown in detail in [Chapter 4](bf8b3438-83e6-4ce5-9df4-4da086636ef7.xhtml),
    *Fixtures*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和管理测试资源是经常被忽视的重要方面，通常在教程或测试框架的概述中被忽略。真实应用程序的测试通常需要复杂的设置，比如启动后台工作程序，填充数据库或初始化GUI。使用pytest，这些复杂的测试资源可以通过一个称为**fixtures**的强大机制来管理。fixtures使用简单，但同时非常强大，许多人称之为*pytest的杀手功能*。它们将在[第4章](bf8b3438-83e6-4ce5-9df4-4da086636ef7.xhtml)中详细介绍，*Fixtures*。
- en: 'Customization is important, and pytest goes a step further by defining a very
    powerful **plugin** system. Plugins can change several aspects of the test run,
    from how tests are executed to providing new fixtures and capabilities to make
    it easy to test many types of applications and frameworks. There are plugins that
    execute tests in a random order each time to ensure tests are not changing global
    state that might affect other tests, plugins that repeat failing tests a number
    of times to weed out flaky behavior, plugins that show failures as they appear
    instead of only at the end of the run, and plugins that execute tests across many
    CPUs to speed up the suite. There are also plugins that are useful when testing
    Django, Flask, Twisted, and Qt applications, further plugins for the acceptance
    testing of web applications using Selenium. The number of external plugins is
    really staggering: at the time of writing, there are over 500 pytest plugins available
    to be installed and used right away ([http://plugincompat.herokuapp.com/](http://plugincompat.herokuapp.com/)).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 定制很重要，pytest通过定义一个非常强大的**插件**系统进一步发展。插件可以改变测试运行的多个方面，从测试的执行方式到提供新的fixtures和功能，以便轻松测试许多类型的应用程序和框架。有一些插件每次以随机顺序执行测试，以确保测试不会改变可能影响其他测试的全局状态，有一些插件多次重复执行失败的测试以排除不稳定的行为，有一些插件在测试运行结束时显示失败，而不仅仅是在最后显示，还有一些插件在多个CPU上执行测试以加快测试套件的速度。还有一些插件在测试Django、Flask、Twisted和Qt应用程序时非常有用，还有一些插件用于使用Selenium进行Web应用程序的验收测试。外部插件的数量真的令人震惊：在撰写本文时，有超过500个pytest插件可供安装和立即使用（[http://plugincompat.herokuapp.com/](http://plugincompat.herokuapp.com/)）。
- en: 'To summarize pytest:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 总结pytest：
- en: You use plain `assert` statements to write your checks, with detailed reporting
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用普通的`assert`语句来编写您的检查，并进行详细的报告
- en: pytest has automatic test discovery
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pytest具有自动测试发现功能
- en: It has fixtures to manage test resources
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有fixtures来管理测试资源
- en: It has many, many plugins to expand its built-in capabilities and help test
    a huge number of frameworks and applications
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有许多插件，可以扩展其内置功能，并帮助测试大量的框架和应用程序
- en: It runs `unittest` based test suites out of the box and without any modifications,
    so you can gradually migrate existing test suites
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以直接运行基于`unittest`的测试套件，无需任何修改，因此您可以逐渐迁移现有的测试套件
- en: For these reasons, many consider pytest to be a Pythonic approach to writing
    tests in Python. It makes it easy to write simple tests and is powerful enough
    to write very complex functional tests. Perhaps more importantly, though, pytest
    makes testing fun.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，许多人认为pytest是在Python中编写测试的一种Pythonic方法。它使编写简单的测试变得容易，并且足够强大，可以编写非常复杂的功能测试。然而，更重要的是，pytest让测试变得有趣。
- en: Writing automated tests, and enjoying their many benefits, will become natural
    with pytest.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pytest编写自动化测试，并享受它们的诸多好处，将会变得自然而然。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered why writing tests is important in order to produce
    high-quality software and to give you the confidence to introduce changes without
    fear. After that, we took a look at the built-in `unittest` module and how it
    can be used to write tests. Finally, we had a quick introduction to pytest, discovered
    how simple it is to write tests with it, looked at its key features, and also
    looked at the vast quantity of third-party plugins that cover a wide range of
    use cases and frameworks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了为什么编写测试对于生产高质量软件以及让您有信心引入变化是重要的。之后，我们看了一下内置的`unittest`模块以及如何使用它来编写测试。最后，我们简要介绍了pytest，发现了使用它编写测试是多么简单，看了它的主要特点，还看了大量覆盖各种用例和框架的第三方插件。
- en: In the next chapter, we will learn how to install pytest, how to write simple
    tests, how to better organize them into files and directories within your project,
    and how to use the command line effectively.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何安装pytest，如何编写简单的测试，如何更好地将它们组织到项目的文件和目录中，以及如何有效地使用命令行。
