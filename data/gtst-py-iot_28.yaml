- en: Gesture Recognition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手势识别
- en: Since the beginning of time, humans have communicated with each other using
    gestures, even before there wasn't any formal language. Hand gestures were the
    primary way of communication, and it is also evident in the ancient sculptures
    found all across the world that the signs have been a successful way of transferring
    a huge amount of data in a very efficient way, sometimes, even more efficient
    than language itself.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自人类诞生以来，人们就使用手势相互交流，甚至在没有任何正式语言之前。手势是交流的主要方式，这也可以从世界各地发现的古代雕塑中看出，手势一直是一种非常有效地传递大量数据的成功方式，有时甚至比语言本身更有效。
- en: Gestures are natural, and they can occur as a reflex to a certain situation.
    It also happens subconsciously even without our knowing. So, it becomes an ideal
    way of communication with various devices. However, the question remains, how?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 手势是自然的，它们可能是对某种情况的反射。即使在我们不知道的情况下，它也会在潜意识中发生。因此，它成为了与各种设备进行交流的理想方式。然而，问题仍然存在，如何？
- en: We can be sure that if we are talking about gestures, then we would surely have
    to do a lot of programming to identify the gestures in the videos; furthermore,
    it would require a huge amount of processing power to make it happen as well.
    Hence, it is out of the question. We can build some basic gesture-recognition
    system using an array of proximity sensors. However, the range of gestures recognized
    would be very limited, and the overall ports being used would be multiple fold.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以肯定，如果我们谈论手势，那么我们肯定需要做大量的编程来识别视频中的手势；此外，这也需要大量的处理能力来实现。因此，这是不可能的。我们可以使用一系列接近传感器构建一些基本的手势识别系统。然而，识别的手势范围将非常有限，使用的端口也会多倍增加。
- en: Hence, we need to find a solution that is easy to work with and does not cost
    more than what it would deliver.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要找到一个易于使用且成本不会超过其提供的解决方案。
- en: 'This chapter will be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Electric field sensing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电场感应
- en: Using the Flick HAT
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flick HAT
- en: Gesture recognition-based automation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于手势识别的自动化
- en: Electric field sensing
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电场感应
- en: Near-field sensing is a very interesting field of sensing. Be prepared for some
    interesting stuff. If you are feeling a little sleepy, or if you are lacking attention,
    then get some coffee because the working principle of this system is going to
    be a little new.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 近场传感是一个非常有趣的传感领域。准备好一些有趣的东西。如果你感到有点困倦，或者注意力不集中，那就喝点咖啡，因为这个系统的工作原理可能会有点新。
- en: Whenever there is a charge, there is an associated electrical field that comes
    along with it. These charges propagate through the space and go around an object.
    When that happens, the electric field associated with it has a specific characteristic.
    This characteristic will be the same till the time the environment around it is
    empty.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当有电荷时，就会伴随着一个相关的电场。这些电荷在空间中传播并绕过物体。当这种情况发生时，与之相关的电场具有特定的特征。只要周围的环境是空的，这种特征就会保持不变。
- en: 'For the gesture-recognition board that we are using, the field that would be
    sensed around it is only for about a few centimeters, so anything beyond that
    point can be disregarded. If there is nothing in that vicinity, then we can safely
    assume that the pattern of electric field being sensed would be unchanged. However,
    whenever an object such as our hand comes in the vicinity, then these waves are
    distorted. The distortion is directly linked to the position of the object and
    its position. With this distortion, we can sense where the finger is, and with
    constant sensing, we see what kind of motion is being performed. The board in
    question looks like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们使用的手势识别板，它周围的感应范围只有几厘米，所以超出这一点的任何东西都可以忽略不计。如果那个区域没有任何东西，那么我们可以安全地假设被感应到的电场模式不会改变。然而，每当一个物体，比如我们的手，靠近时，这些波就会被扭曲。这种扭曲直接与物体的位置和姿势有关。通过这种扭曲，我们可以感应到手指的位置，并通过持续的感应，看到正在执行的动作是什么。所讨论的板看起来像这样：
- en: '![](Images/73e2e142-b4a4-4f4c-aced-19fc2353a0b1.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/73e2e142-b4a4-4f4c-aced-19fc2353a0b1.jpg)'
- en: The central criss-crossed area on the board is the transmitter and on the extreme
    sides are rectangular structures that are four in number. These are the sensing
    elements. These sense the pattern of waves in the space. Based on it, they can
    derive what are the x, y, and z coordinates of the object. This is powered by
    a chip named MGC 3130\. This does all the computation and delivers the raw reading
    to the user, regarding the coordinates.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 板上的中央交叉区域是发射器，两侧是四个矩形结构。这些是感应元件。它们感应空间中的波纹模式。基于此，它们可以推导出物体的x、y和z坐标。这由一个名为MGC
    3130的芯片提供动力。这个芯片进行所有计算，并将原始读数传递给用户，关于坐标。
- en: Using the Flick HAT
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flick HAT
- en: Flick HAT comes in the form of a shield, which you can simply plug into your
    Raspberry Pi and start using. However, once you do that, you will not be left
    with any GPIO pins. Hence, to save ourselves from that problem, we will be connecting
    it using male-to-female wires. This will give us access to the other GPIO pins
    and then we can have fun.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Flick HAT以盾牌的形式出现，你可以简单地将其插入树莓派并开始使用。然而，一旦你这样做了，你就不会剩下任何GPIO引脚。因此，为了避免这个问题，我们将使用公对母导线连接它。这将使我们可以访问其他GPIO引脚，然后我们可以玩得开心。
- en: 'So, go ahead and connect it as follows. The following is a pin diagram of the
    Flick board:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，继续按以下方式连接。以下是Flick板的引脚图：
- en: '![](Images/1685e1fc-657c-43f0-b058-708de0c1e97d.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1685e1fc-657c-43f0-b058-708de0c1e97d.png)'
- en: 'Thereafter, make the connections as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照以下方式进行连接：
- en: '![](Images/80ba5ee5-864a-4132-96b9-eaca317eb73e.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/80ba5ee5-864a-4132-96b9-eaca317eb73e.png)'
- en: 'Once the connection is done, simply upload this code and see what happens:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 连接完成后，只需上传这个代码，看看会发生什么：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now once you have uploaded  the code, lets go ahead and understand what this
    code is actually doing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一旦你上传了代码，让我们继续了解这个代码实际在做什么。
- en: We are using a library called  `import flicklib` this is provided by the manufacturer
    of this board. The functions of this library would be used all over in this chapter
    for communicating with the flick board and getting the data
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用一个名为`import flicklib`的库，这是由这块板的制造商提供的。这个库的函数将在本章中用于与挥动板通信和获取数据。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, we are defining a function named `message(value)` what this would do
    is simply print whatever value would be passed on to the function in the argument:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为`message(value)`的函数，它将简单地打印传递给函数的任何值：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This has a special concept of decorators. By definition, a decorator is a function
    that takes another function and extends the behavior of the latter function without
    explicitly modifying it. In the preceding line of code, we are declaring that
    it is a decorator `@`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一个特殊的装饰器概念。根据定义，装饰器是一个接受另一个函数并扩展后者行为的函数，而不明确修改它。在上一行代码中，我们声明它是一个装饰器`@`。
- en: 'This has a special job: dynamically defines any function in a program. What
    this means in plain English is that the function defined using this methodology
    can work differently depending on how the user defines it.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一个特殊的作用：动态定义程序中的任何函数。这意味着用这种方法定义的函数可以根据用户的定义而有不同的工作方式。
- en: 'The function `move()` will further be complimented by the function, which is
    getting defined after it. These kind of functions are named nested functions.
    That is functions inside a function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`move()`将进一步由在其后定义的函数补充。这种函数称为嵌套函数。也就是函数内部的函数：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we are defining a function named `move()`, which has arguments as `x`,
    `y`, and `z`. Inside the function, we have defined a global variable named `xyztxt`;
    now, the value of `xyztxt` would be in a form of five digit, with a decimal after
    three places. How did we know that? As you can see, we are using a function named
    `format()`. What this function does is format the values of a given variable according
    to the way the user has requested it for. We have declared here the value as `{:5.3f}`. `:5`
    represents that it would be of five digits, and `3f` represents that the decimal
    places would be after three digits. Hence, the format would be `xxx.xx`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为`move()`的函数，它的参数是`x`、`y`和`z`。在函数内部，我们定义了一个名为`xyztxt`的全局变量；现在，`xyztxt`的值将以五位数字的形式呈现，小数点后有三位。我们是如何知道的呢？正如你所看到的，我们使用了一个名为`format()`的函数。这个函数的作用是根据用户的要求格式化给定变量的值。我们在这里声明值为`{:5.3f}`。`:5`表示它将是五位数，`3f`表示小数点后将是三位数。因此，格式将是`xxx.xx`：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we have defined a function named `flick(start, finish)`. It has two arguments: `start`
    and `finish`. Using the line `flicktxt = ''FLICK-'' + start[0].upper() + finish[0].upper()`, this
    is slicing the characters as recognized by the gesture board. If a south–north
    swipe is detected, then the start will get south and finish is north. Now we are
    only using the first characters of the words:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为`flick(start, finish)`的函数。它有两个参数：`start`和`finish`。使用行`flicktxt
    = 'FLICK-' + start[0].upper() + finish[0].upper()`，这是根据手势板识别的字符进行切片。如果检测到南-北挥动，则开始为南，结束为北。现在我们只使用单词的第一个字符：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We are again defining the variables named `xyztxt` and `flicktxt` globally.
    Earlier, what we have done is that we have defined it in the function. Hence,
    it is important for us to define it in the main program:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次全局定义了名为`xyztxt`和`flicktxt`的变量。之前，我们所做的是在函数中定义它。因此，重要的是在主程序中定义它：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `flicktxt` variable would get a value corresponding to the gesture  when
    the gesture is detected. In case there is no gesture then `flicktxt` would be
    left empty. A variable named `flickcount` will count how many times its swiped.
    If the values are out of the range specified then the `flicktxt` would be cleared
    to empty string using the line `flicktxt = ''` and `flickcount` would be made
    0.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到手势时，`flicktxt`变量将获得与手势相对应的值。如果没有手势，那么`flicktxt`将保持为空。一个名为`flickcount`的变量将计算它被刷过多少次。如果值超出指定范围，那么`flicktxt`将使用行`flicktxt
    = ''`清除为空字符串，`flickcount`将被设为0。
- en: The final output of this would be a text given to user providing in which direction
    the hand is flicked.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个文本输出，向用户提供手势挥动的方向。
- en: Gesture recognition-based automation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于手势识别的自动化
- en: 'Now we have interfaced the connections as per the following diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经按照以下图表接口了连接：
- en: '![](Images/f11065c7-a56f-4673-a5e8-9604941953e7.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f11065c7-a56f-4673-a5e8-9604941953e7.png)'
- en: 'Let''s go ahead and upload the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续上传以下代码：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The program is in addition to the program we have done before, as always we
    have some added functionality of using the data being received by the flick gesture
    board and using it to switch on or switch off the lights.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序是在我们之前完成的程序的基础上，我们始终有一些额外的功能，可以使用通过手势板接收到的数据来开启或关闭灯光。
- en: 'Like the previous program, we are taking in the gestures over the board in
    the form of the directions of swipes, and using a simple condition to switch off
    the lights, or switch them on. So, let''s see what are the additions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的程序一样，我们正在以手势板上的方向形式接收手势，并使用简单的条件来关闭灯光或打开它们。因此，让我们看看有哪些添加：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first condition is simple. We are comparing the value of `flicktxt` to
    a given variable, which in our case is `FLICK-WE`, wherein `WE` stands for **west**
    to **east**. So when we flick from west to east, or in other words, when we flick
    from left to right, the lights would be switched off:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个条件很简单。我们正在将`flicktxt`的值与给定变量进行比较，在我们的情况下是`FLICK-WE`，其中`WE`代表从**西**到**东**。因此，当我们从西向东挥动，或者换句话说，当我们从左向右挥动时，灯光将被关闭：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As before, we are again taking in a variable named `FLICK-EW`, which stands
    for flick from east to west. What it does is whenever we flick our hand from east
    to west, or from right to left, the lights will be switched on:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，我们再次使用名为`FLICK-EW`的变量，它代表从东到西的挥动。它的作用是，每当我们从东向西挥动手，或者从右向左挥动手时，灯光将被打开：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we have put a dimmer along with a fan to control the speed of the fan as
    well; hence, we will have to give it a PWM corresponding to the speed that we
    want to drive it. Now whenever the user will flick his hand from south to north
    or from down to up. The condition `if dc_inc <100` will check whether the value
    of the `dc_inc` is less than or equal to `100` or not. If it is, then it will
    increment the value of the `dc_inc` by `20` values. Using the function `ChangeDutyCycle()`,
    we are providing the different duty cycle to the dimmer; hence, changing the overall
    speed of the fan. Every time you swipe up the value of the fan, it will increase
    by 20%:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经加入了一个调光器和一个风扇来控制风扇的速度；因此，我们将不得不给它一个与我们想要驱动它的速度相对应的PWM。现在每当用户将手从南向北或从下到上甩动时。条件
    `if dc_inc <100` 将检查 `dc_inc` 的值是否小于或等于 `100`。如果是，则它将增加 `20` 的值。使用函数 `ChangeDutyCycle()`，我们为调光器提供不同的占空比；因此改变了风扇的整体速度。每次你向上划动风扇的值，它将增加20%：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we are were able to understand the concept of how gesture recognition
    works via electric field detection. We also understood how easy it is to use a
    gesture-controlled board and control the home using gestures. We will cover the
    machine learning part in the next chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们能够理解手势识别是如何通过电场检测工作的概念。我们也了解到使用手势控制板和手势控制家庭是多么容易。我们将在下一章中涵盖机器学习部分。
