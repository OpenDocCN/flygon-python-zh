- en: Setting Up Our Python Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的Python环境
- en: In this chapter, we will provide a brief introduction to the Python programming
    language and the differences between the current versions. Python ships in two
    active versions, and making a decision on which one to use during development
    is important. In this chapter, we will download and install Python binaries into
    the operating system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将简要介绍Python编程语言以及当前版本之间的区别。Python有两个活跃版本，并且在开发过程中选择使用哪一个是很重要的。在这一章中，我们将下载并安装Python二进制文件到操作系统中。
- en: 'At the end of the chapter, we will install one of the most advanced **Integrated
    Development Editors** (**IDEs**) used by professional developers around the world:
    PyCharm. PyCharm provides smart code completion, code inspections, on-the-fly
    error highlighting and quick fixes, automated code refactoring, and rich navigation
    capabilities, which we will go over throughout this book, as we write and develop
    Python code.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将安装全球专业开发人员使用的最先进的**集成开发环境**（**IDE**）之一：PyCharm。PyCharm提供智能代码完成、代码检查、实时错误突出显示和快速修复、自动代码重构以及丰富的导航功能，我们将在本书中编写和开发Python代码时进行介绍。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An introduction to Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python简介
- en: Installing the PyCharm IDE
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装PyCharm IDE
- en: Exploring some nifty PyCharm features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索一些巧妙的PyCharm功能
- en: An introduction to Python
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python简介
- en: Python is a high-level programming language that provides a friendly syntax;
    it is easy to learn and use, for both beginner and expert programmers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种提供友好语法的高级编程语言；它易于学习和使用，无论是初学者还是专家程序员。
- en: Python was originally developed by Guido van Rossum in 1991; it depends on a
    mix of C, C++, and other Unix shell tools. Python is known as a language for general
    purpose programming, and today it's used in many fields, such as software development,
    web development, network automation, system administration, and scientific fields.
    Thanks to its large number of modules available for download, covering many fields,
    Python can cut development time down to a minimum.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python最初是由Guido van Rossum于1991年开发的；它依赖于C、C++和其他Unix shell工具的混合。Python被称为通用编程语言，并且今天它被用于许多领域，如软件开发、Web开发、网络自动化、系统管理和科学领域。由于其大量可供下载的模块，涵盖了许多领域，Python可以将开发时间缩短到最低。
- en: 'The Python syntax was designed to be readable; it has some similarities to
    the English language, while the code construction itself is beautiful. Python
    core developers provide 20 informational rules, called the Zen of Python, that
    influenced the design of the Python language; most of them involve building clean,
    organized, and readable code. The following are some of the rules:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python语法设计得易读；它与英语有些相似，而代码本身的构造也很美。Python核心开发人员提供了20条信息规则，称为Python之禅，这些规则影响了Python语言的设计；其中大部分涉及构建清洁、有组织和易读的代码。以下是其中一些规则：
- en: Beautiful is better than ugly.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 美好优于丑陋。
- en: Explicit is better than implicit.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 显式优于隐式。
- en: Simple is better than complex.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 简单优于复杂。
- en: Complex is better than complicated.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂优于复杂。
- en: You can read more about the Zen of Python at [https://www.python.org/dev/peps/pep-0020/](https://www.python.org/dev/peps/pep-0020/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.python.org/dev/peps/pep-0020/](https://www.python.org/dev/peps/pep-0020/)上阅读更多关于Python之禅的内容。
- en: Python versions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python版本
- en: 'Python comes with two major versions: Python 2.x and Python 3.x. There are
    subtle differences between the two versions; the most obvious is the way their `print`
    functions treat multiple strings. Also, all new features will only be added to
    3.x, while 2.x will receive security updates before full retirement. This won''t
    be an easy migration, as many applications are built on Python 2.x.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python有两个主要版本：Python 2.x和Python 3.x。这两个版本之间有细微的差异；最明显的是它们的`print`函数对多个字符串的处理方式。此外，所有新功能只会添加到3.x，而2.x将在完全退役之前接收安全更新。这不会是一个简单的迁移，因为许多应用程序都是基于Python
    2.x构建的。
- en: Why are there two active versions?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么有两个活跃版本？
- en: 'I will quote the reason from the official Python website:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我将引用官方Python网站上的原因：
- en: <q class="calibre21">"Guido van Rossum (the original creator of the Python language)
    decided to clean up Python 2.x properly, with less regard for backwards compatibility
    than is the case for new releases in the 2.x range. The most drastic improvement
    is the better Unicode support (with all text strings being Unicode by default)
    as well as saner bytes/Unicode separation.</q> <q class="calibre21">"Besides,
    several aspects of the core language (such as print and exec being statements,
    integers using floor division) have been adjusted to be easier for newcomers to
    learn and to be more consistent with the rest of the language, and old cruft has
    been removed (for example, all classes are now new-style, "range()" returns a
    memory efficient iterable, not a list as in 2.x)."</q>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <q class="calibre21">"Guido van Rossum（Python语言的原始创造者）决定彻底清理Python 2.x，不像对2.x范围内的新版本那样考虑向后兼容性。最重大的改进是更好的Unicode支持（默认情况下所有文本字符串都是Unicode），以及更合理的字节/Unicode分离。</q>
    <q class="calibre21">"此外，核心语言的几个方面（如print和exec作为语句，整数使用地板除法）已经调整为更容易让新手学习，并且更一致于语言的其他部分，并且已经删除了旧的不必要的东西（例如，所有类现在都是新式的，“range()”返回一个内存高效的可迭代对象，而不是像2.x中的列表那样）。</q>
- en: You can read more about this topic at [https://wiki.python.org/moin/Python2orPython3](https://wiki.python.org/moin/Python2orPython3).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://wiki.python.org/moin/Python2orPython3](https://wiki.python.org/moin/Python2orPython3)上阅读更多关于这个主题的内容。
- en: Should you only learn Python 3?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您是否应该只学习Python 3？
- en: It depends*.* Learning Python 3 will  future-proof your code, and you will use
    up-to-date features from the developers. However, note that some third-party modules
    and frameworks lack support for Python 3 and will continue to do so for the near
    future, until they completely port their libraries to Python 3.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于*.*学习Python 3将使您的代码具有未来性，并且您将使用开发人员提供的最新功能。但是，请注意，一些第三方模块和框架不支持Python 3，并且在不久的将来将继续如此，直到他们完全将他们的库移植到Python
    3。
- en: 'Also, note that some network vendors, such as Cisco, provide limited support
    for Python 3.x, as most of the required features are already covered in Python
    2.x releases. For example, the following are the supported Python versions for
    Cisco devices; you will see that all devices support 2.x, not 3.x:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，一些网络供应商（如思科）对Python 3.x提供有限支持，因为大多数所需功能已经在Python 2.x版本中涵盖。例如，以下是思科设备支持的Python版本；您将看到所有设备都支持2.x，而不支持3.x：
- en: '![](../images/00005.jpeg)Source: [https://developer.cisco.com/site/python/](https://developer.cisco.com/site/python/)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00005.jpeg)来源：[https://developer.cisco.com/site/python/](https://developer.cisco.com/site/python/)
- en: Does this mean I can't write code that runs on both Python 2 and Python 3?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这是否意味着我不能编写在Python 2和Python 3上运行的代码？
- en: 'No, you can, of course, write your code in Python 2.x and make it compatible
    with both versions, but you will need to import a few libraries first, such as
    the `__future__` module, to make it backward compatible. This module contains
    some functions that tweak the Python 2.x behavior and make it exactly like Python
    3.x. Take a look at the following examples to understand the differences between
    the two versions:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不，当然可以在Python 2.x中编写代码并使其与两个版本兼容，但您需要首先导入一些库，例如`__future__`模块，使其向后兼容。此模块包含一些函数，可以调整Python
    2.x的行为，并使其与Python 3.x完全相同。看一下以下示例，以了解两个版本之间的区别：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following code is for Python 2 and 3:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码适用于Python 2和3：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, if you need to print multiple strings, the Python 2 syntax will be as
    follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您需要打印多个字符串，Python 2的语法将如下所示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you try to use parentheses to print multiple strings in Python 2, it will
    interpret it as a tuple, which is wrong. For that reason, we will import the `__future__`
    module at the beginning of our code, to prevent that behavior and instruct Python
    to print multiple strings.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试在Python 2中使用括号打印多个字符串，它将将其解释为元组，这是错误的。因此，我们将在代码开头导入`__future__`模块，以防止该行为并指示Python打印多个字符串。
- en: 'The output will be as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](../images/00006.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00006.jpeg)
- en: Python installation
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python安装
- en: 'Whether you choose to go with a popular Python version (2.x) or build future-proof
    code with Python 3.x, you will need to download the Python binaries from the official
    website and install them in your operating system. Python provides support for
    different platforms (Windows, Mac, Linux, Raspberry PI, and so on):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择使用流行的Python版本（2.x）还是使用Python 3.x构建未来的代码，您都需要从官方网站下载Python二进制文件并在操作系统中安装它们。
    Python支持不同的平台（Windows，Mac，Linux，Raspberry PI等）：
- en: 'Go to [https://www.python.org/downloads/](https://www.python.org/downloads/) and
    choose the latest version of either 2.x or 3.x:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://www.python.org/downloads/](https://www.python.org/downloads/)并选择最新的2.x或3.x版本：
- en: '![](../images/00007.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00007.jpeg)
- en: 'Choose your platform from the Download page, and either the x86 or x64 version:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下载页面选择您的平台，以及x86或x64版本：
- en: '![](../images/00008.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00008.jpeg)
- en: 'Install the package as usual. It''s important to select the Add python to the
    path option during the installation, in order to access Python from the command
    line (in the case of Windows). Otherwise, Windows won''t recognize the Python
    commands and will throw an error:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样安装软件包。在安装过程中选择将python添加到路径选项很重要，以便从命令行访问Python（在Windows的情况下）。否则，Windows将无法识别Python命令并将抛出错误：
- en: '![](../images/00009.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00009.jpeg)
- en: 'Verify that the installation is complete by opening the command line or terminal
    in your operating system and typing `python`. This should access the Python console
    and provide a verification that Python has successfully installed on your system:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在操作系统中打开命令行或终端并键入`python`来验证安装是否完成。这应该访问Python控制台并提供Python已成功安装在您的系统上的验证：
- en: '![](../images/00010.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00010.jpeg)
- en: Installing the PyCharm IDE
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PyCharm IDE
- en: PyCharm is a fully fledged IDE, used by many developers around the world to
    write and develop Python code. The IDE is developed by the Jetbrains company and
    provides rich code analysis and completion, syntax highlighting, unit testing,
    code coverage, error discovery, and other Python linting operations.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm是一个完整的IDE，被世界各地的许多开发人员用来编写和开发Python代码。这个IDE是由Jetbrains公司开发的，提供丰富的代码分析和完成，语法高亮，单元测试，代码覆盖率，错误发现和其他Python代码操作。
- en: Also, PyCharm Professional Edition supports Python web frameworks, such as Django,
    web2py, and Flask, beside integrations with Docker and vagrant for running a code
    over them. It provides amazing integration with multiple version control systems,
    such as Git (and GitHub), CVS, and subversion.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，PyCharm专业版支持Python Web框架，如Django，web2py和Flask，以及与Docker和vagrant的集成。它与多个版本控制系统（如Git（和GitHub），CVS和subversion）提供了惊人的集成。
- en: 'In the next few steps, we will install PyCharm Community Edition:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个步骤中，我们将安装PyCharm社区版：
- en: 'Go to the PyCharm download page ([https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/)))
    and choose your platform. Also, choose to download either the Community Edition
    (free forever) or the Professional Edition (the Community version is completely
    fine for running the codes in this book):'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到PyCharm下载页面（[https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/)）并选择您的平台。此外，选择下载Community
    Edition（永久免费）或Professional Edition（Community版本完全适用于运行本书中的代码）：
- en: '![](../images/00011.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00011.jpeg)
- en: 'Install the software as usual, but make sure that you select the following
    options:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样安装软件，但确保选择以下选项：
- en: 32- or 64-bit launcher (depending on your operating system).
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32位或64位的启动器（取决于您的操作系统）。
- en: Create Associations (this will make PyCharm the default application for Python
    files).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建关联（这将使PyCharm成为Python文件的默认应用程序）。
- en: 'Download and install JRE x86 by JetBrains:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装JetBrains的JRE x86：
- en: '![](../images/00012.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: ！[](../images/00012.jpeg)
- en: 'Wait until PyCharm downloads the additional packages from the internet, and
    installs it, then choose Run PyCharm Community Edition:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待PyCharm从互联网下载附加包并安装它，然后选择运行PyCharm社区版：
- en: '![](../images/00013.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00013.jpeg)'
- en: Since this is a new and fresh installation, we won't import any settings from
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个新的安装，我们不会从中导入任何设置
- en: '![](../images/00014.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00014.jpeg)'
- en: 'Select the desired UI theme (either the default or *darcula,* for dark mode).
    You can install some additional plugins, such as Markdown and BashSupport, which
    will make PyCharm recognize and support those languages. When you finish, click
    on Start Using PyCharm:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所需的UI主题（默认或*darcula*，用于暗模式）。您可以安装一些附加插件，例如Markdown和BashSupport，这将使PyCharm识别和支持这些语言。完成后，单击开始使用PyCharm：
- en: '![](../images/00015.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00015.jpeg)'
- en: Setting up a Python project inside PyCharm
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PyCharm中设置Python项目
- en: Inside PyCharm, a Python project is a collection of Python files that you have
    developed and Python modules that are either built in or were installed from a
    third party. You will need to create a new project and save it to a specific location
    inside your machine before starting to develop your code. Also, you will need
    to choose the default interpreter for this project. By default, PyCharm will scan
    the default location on the system and search for the Python interpreter. The
    other option is to create a completely isolated environment, using Python `virtualenv`.
    The basic problem with the `virtualenv` address is its package dependencies. Let's
    assume that you're working on multiple different Python projects, and one of them
    needs a specific version of *x* package. On the other hand, one of the other projects
    needs a completely different version from the same package. Notice that all installed
    Python packages go to `/usr/lib/python2.7/site-packages`, and you can't store
    different versions of the same package. The `virtualenv` will solve this problem
    by creating an environment that has its own installation directories and its own
    package; each time you work on either of the two projects, PyCharm (with the help
    of `virtualenv`) will activate the corresponding environment to avoid any conflict
    between packages.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在PyCharm中，一个Python项目是你开发的Python文件的集合，以及内置的或从第三方安装的Python模块。在开始开发代码之前，您需要创建一个新项目并将其保存到计算机内的特定位置。此外，您需要为该项目选择默认解释器。默认情况下，PyCharm将扫描系统上的默认位置并搜索Python解释器。另一个选项是使用Python
    `virtualenv` 创建一个完全隔离的环境。`virtualenv`的基本问题是其包依赖性。假设您正在处理多个不同的Python项目，其中一个项目需要特定版本的*x*包。另一方面，另一个项目需要完全不同版本的相同包。请注意，所有安装的Python包都放在`/usr/lib/python2.7/site-packages`中，您无法存储相同包的不同版本。`virtualenv`将通过创建一个具有自己的安装目录和自己的包的环境来解决此问题；每次您在这两个项目中的任何一个上工作时，PyCharm（借助`virtualenv`的帮助）将激活相应的环境，以避免包之间的任何冲突。
- en: 'Follow these steps to set up the project:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置项目：
- en: 'Choose Create New Project:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建新项目：
- en: '![](../images/00016.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00016.jpeg)'
- en: 'Choose the project settings:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目设置：
- en: '![](../images/00017.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00017.jpeg)'
- en: Select the type of project; in our case, it will be Pure Python*.*
  id: totrans-70
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目类型；在我们的情况下，它将是纯Python*.*
- en: Choose the project's location on the local hard drive.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地硬盘上选择项目的位置。
- en: Choose the Project Interpreter. Either use the existing Python installation
    in the default directory, or create a new virtual environment tied specifically
    to that project.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目解释器。要么使用默认目录中现有的Python安装，要么创建一个专门与该项目绑定的新虚拟环境。
- en: Click on Create*.*
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Create*.*
- en: 'Create a new Python File inside the project:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目内创建一个新的Python文件：
- en: '![](../images/00018.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00018.jpeg)'
- en: Right-click on the project name and select New.
  id: totrans-76
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目名称，然后选择New。
- en: Choose Python File from the menu, then choose a filename.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择Python文件，然后选择文件名。
- en: 'A new, blank file is opened, and you can write a Python code directly into
    it. Try to import the `__future__` module, for example, and PyCharm will automatically
    open a pop-up window with all possible completions available as shown in the following
    screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的空白文件，您可以直接在其中编写Python代码。例如，尝试导入`__future__`模块，PyCharm将自动打开一个弹出窗口，显示所有可能的补全，如下面的屏幕截图所示：
- en: '![](../images/00019.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00019.jpeg)'
- en: 'Run your code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的代码：
- en: '![](../images/00020.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00020.jpeg)'
- en: Enter the code that you wish to run.
  id: totrans-82
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您希望运行的代码。
- en: Choose Edit Configuration to configure the runtime settings for the Python file.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择编辑配置以配置Python文件的运行时设置。
- en: 'Configure new Python settings for running your file:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置运行文件的新Python设置：
- en: '![](../images/00021.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00021.jpeg)'
- en: Click on the + sign to add a new configuration, and choose Python.
  id: totrans-86
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击+号添加新配置，然后选择Python。
- en: Choose the configuration name.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择配置名称。
- en: Choose the script path inside your project.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目内的脚本路径。
- en: Click on OK.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击确定。
- en: 'Run the code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码：
- en: '![](../images/00022.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00022.jpeg)'
- en: Click on the play button beside the configuration name.
  id: totrans-92
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击配置名称旁边的播放按钮。
- en: PyCharm will execute the code inside the file specified in the configuration,
    and will return the output to the terminal.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PyCharm将执行配置中指定的文件中的代码，并将输出返回到终端。
- en: Exploring some nifty PyCharm features
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索一些巧妙的PyCharm功能
- en: In this section, we will explore some of PyCharm's features. PyCharm has a huge
    collection of tools out of the box, including an integrated debugger and test
    runner, Python profiler, a built-in Terminal, integration with major VCS and built-in
    database tools, remote development capabilities with remote interpreters, an integrated
    SSH Terminal, and integration with Docker and Vagrant. For a list of other features,
    please check the official site ([https://www.jetbrains.com/pycharm/features/](https://www.jetbrains.com/pycharm/features/)).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨PyCharm的一些特性。PyCharm拥有大量的内置工具，包括集成调试器和测试运行器、Python分析器、内置终端、与主要版本控制系统的集成和内置数据库工具、远程开发能力与远程解释器、集成SSH终端，以及与Docker和Vagrant的集成。有关其他功能的列表，请查看官方网站（[https://www.jetbrains.com/pycharm/features/](https://www.jetbrains.com/pycharm/features/)）。
- en: Code debugging
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码调试
- en: Code debugging is a process that can help you to understand the cause of an
    error, by providing an input to the code and walking through each line of the
    code and seeing how it evaluates at the end. The Python language contains some
    debugging tools to get insights from the code, starting with a simple `print`
    function, assert command till a complete unit testing for the code. PyCharm provides
    an easy way to debug the code and see the evaluated values.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 代码调试是一个过程，可以帮助您了解错误的原因，通过为代码提供输入并逐行查看代码的执行情况，以及最终的评估结果。Python语言包含一些调试工具，从简单的`print`函数、assert命令到代码的完整单元测试。PyCharm提供了一种简单的调试代码和查看评估值的方法。
- en: 'To debug code in PyCharm (say, a nested `for` loop with `if` clauses), you
    need to set a breakpoint on the line at which you want PyCharm to stop the program
    execution. When PyCharm hits this line, it will pause the program and dump the
    memory to see the contents of each variable:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要在PyCharm中调试代码（比如，一个带有`if`子句的嵌套`for`循环），您需要在希望PyCharm停止程序执行的行上设置断点。当PyCharm到达这一行时，它将暂停程序并转储内存以查看每个变量的内容：
- en: '![](../images/00023.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00023.jpeg)'
- en: 'Notice that the value of each variable is printed besides it, on the first
    iteration:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在第一次迭代时，每个变量的值都会被打印在其旁边：
- en: '![](../images/00024.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00024.jpeg)'
- en: 'Also, you can right-click on the breakpoint and add a specific condition for
    any variable. If the variable is evaluated to a specific value, then a log message
    will be printed:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以右键单击断点，并为任何变量添加特定条件。如果变量评估为特定值，那么将打印日志消息：
- en: '![](../images/00025.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00025.jpeg)'
- en: Code refactoring
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码重构
- en: Refactoring the code is the process of changing the structure of a specific
    variable name inside your code. For example, you may choose a name for your variable
    and use it for a project that consists of multiple source files, then later decide
    to rename the variable to something more descriptive. PyCharm provides many refactoring
    techniques, to make sure that the code can be updated without breaking the operation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 重构代码是更改代码中特定变量名称结构的过程。例如，您可能为变量选择一个名称，并在由多个源文件组成的项目中使用它，然后决定将变量重命名为更具描述性的名称。PyCharm提供了许多重构技术，以确保代码可以更新而不会破坏操作。
- en: 'PyCharm does the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm执行以下操作：
- en: The refactoring itself
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构本身
- en: Scans every file inside the project and makes sure that the references to the
    variables are updated
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描项目中的每个文件，并确保变量的引用已更新
- en: If something can't be updated automatically, it will give you a warning and
    open a menu, so you can decide what to do
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果某些内容无法自动更新，它将给出警告并打开一个菜单，让您决定如何处理
- en: Saves the code before refactoring it, so you can revert it later
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在重构代码之前保存代码，以便以后可以恢复
- en: Let's look at an example. Assume that we have three Python files in our project,
    called `refactor_1.py`, `refactor_2.py`, and `refactor_3.py`. The first file contains
    `important_funtion(x)`, which is also used in both `refactor_2.py` and `refactor_3.py`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子。假设我们的项目中有三个Python文件，分别为`refactor_1.py`、`refactor_2.py`和`refactor_3.py`。第一个文件包含`important_funtion(x)`，它也在`refactor_2.py`和`refactor_3.py`中使用。
- en: '![](../images/00026.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00026.jpeg)'
- en: 'Copy the following code in a `refactor_1.py` file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码复制到`refactor_1.py`文件中：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Copy the following code in a `refactor_2.py` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码复制到`refactor_2.py`文件中：
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Copy the following code in a `refactor_3.py` file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码复制到`refactor_3.py`文件中：
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To perform the refactoring, you need to right-click on the method itself, select
    Refactor | Rename, and enter the new name for the method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行重构，您需要右键单击方法本身，选择重构 | 重命名，并输入方法的新名称：
- en: '![](../images/00027.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00027.jpeg)'
- en: 'Notice that a window opens at the bottom of the IDE, listing all references
    of this function, the current value for each one, and which file will be affected
    after the refactoring:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，IDE底部会打开一个窗口，列出此函数的所有引用，每个引用的当前值，以及重构后将受影响的文件：
- en: '![](../images/00028.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00028.jpeg)'
- en: If you choose Do Refactor, all of the references will be updated with the new
    name, and your code will not be broken.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择执行重构，所有引用将使用新名称进行更新，您的代码将不会被破坏。
- en: Installing packages from the GUI
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从GUI安装包
- en: PyCharm can be used to install packages for existing interpreters (or the `virtualenv`)
    using the GUI. Also, you can see a list of all installed packages, and whether
    upgrades are available for them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm可以用来使用GUI为现有的解释器（或`virtualenv`）安装包。此外，您可以查看所有已安装包的列表，以及它们是否有可用的升级版本。
- en: 'First, you need to go to File | Settings | Project | Project Interpreter:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要转到文件 | 设置 | 项目 | 项目解释器：
- en: '![](../images/00029.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00029.jpeg)'
- en: 'As shown in the preceding screenshot, PyCharm provides a list of installed
    packages and their current versions. You can click on the + sign to add a new
    package to the project interpreter, then enter the package initials into the search
    box:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，PyCharm提供了已安装包及其当前版本的列表。您可以点击+号将新包添加到项目解释器中，然后在搜索框中输入包的缩写：
- en: '![](../images/00030.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00030.jpeg)'
- en: You should see a list of available packages, containing a name and description
    for each one. Also, you can specify a specific version to be installed on your
    interpreter. Once you have clicked on Install Package, PyCharm will execute a
    `pip` command on your system (and may ask you for a permission); then, it will
    download the package onto the installation directory and execute the `setup.py`
    file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个可用软件包的列表，其中包含每个软件包的名称和描述。此外，您可以指定要安装在您的解释器上的特定版本。一旦您点击安装软件包，PyCharm将在您的系统上执行一个`pip`命令（可能会要求您权限）；然后，它将下载软件包到安装目录并执行`setup.py`文件。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the differences between Python 2 and Python 3,
    and how to decide which one to use, based on your needs. Also, you learned how
    to install a Python interpreter and how to use PyCharm as an advanced editor to
    write and manage your code's life cycle.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了Python 2和Python 3之间的区别，以及如何根据您的需求决定使用哪种版本。此外，您还学习了如何安装Python解释器，以及如何使用PyCharm作为高级编辑器来编写和管理代码的生命周期。
- en: In the next chapter, we will discuss the Python package structure and the common
    Python packages used in automation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Python软件包结构和自动化中常用的Python软件包。
