- en: Using Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用图形
- en: 'In every application, graphics play a major role in making it more user-friendly.
    Graphics make concepts easier to understand. In this chapter, we will be covering
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个应用程序中，图形在使其更加用户友好方面起着重要作用。图形使概念更容易理解。在本章中，我们将涵盖以下主题：
- en: Displaying mouse coordinates
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示鼠标坐标
- en: Displaying coordinates where the mouse button is clicked and released
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示鼠标点击和释放的坐标
- en: Displaying a point where the mouse button is clicked
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示鼠标按钮点击的点
- en: Drawing a line between two mouse clicks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在两次鼠标点击之间绘制一条线
- en: Drawing lines of different types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制不同类型的线
- en: Drawing a circle of a desired size
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制所需大小的圆
- en: Drawing a rectangle between two mouse clicks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在两次鼠标点击之间绘制一个矩形
- en: Drawing text in a desired font and size
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以所需的字体和大小绘制文本
- en: Creating a toolbar that shows different graphics tools
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建显示不同图形工具的工具栏
- en: Plotting a line using Matplotlib
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Matplotlib绘制一条线
- en: Plotting a bar using Matplotlib
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Matplotlib绘制条形图
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: For drawing and painting in Python, we will be making use of several classes.
    The most important of them is the `QPainter` class.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Python中进行绘制和绘画，我们将使用几个类。其中最重要的是`QPainter`类。
- en: This class is used for painting. It can draw lines, rectangles, circles, and
    complex shapes. While drawing with `QPainter`, you can use the `QPainter` class
    pen to define the color of the drawing; thickness of the pen/brush; style; whether
    the line is drawn as solid, dotted, or dash-dot; and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类用于绘图。它可以绘制线条、矩形、圆形和复杂的形状。在使用`QPainter`绘图时，可以使用`QPainter`类的笔来定义绘图的颜色、笔/刷的粗细、样式，以及线条是实线、虚线还是点划线等。
- en: 'Several methods of the `QPainter` class are used in this chapter to draw different
    shapes. A few of them are listed here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用了`QPainter`类的几种方法来绘制不同的形状。以下是其中的一些：
- en: '`QPainter::drawLine()`: This method is used for drawing a line between two
    sets of *x* and *y* coordinates'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QPainter::drawLine()`: 该方法用于在两组*x*和*y*坐标之间绘制一条线'
- en: '`QPainter::drawPoints()`: This method is used for drawing a point at a location
    specified through the supplied *x* and *y* coordinates'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QPainter::drawPoints()`: 该方法用于在通过提供的*x*和*y*坐标指定的位置绘制一个点'
- en: '`QPainter::drawRect()`: This method is used for drawing a rectangle between
    two sets of *x* and *y* coordinates'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QPainter::drawRect()`: 该方法用于在两组*x*和*y*坐标之间绘制一个矩形'
- en: '`QPainter::drawArc()`: This method is used for drawing an arc from the specified
    center location, between two specified angles, and with a specified radius'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QPainter::drawArc()`: 该方法用于从指定的中心位置绘制弧，介于两个指定的角度之间，并具有指定的半径'
- en: '`QPainter::drawText()`: This method is used for drawing text in a specified
    font style, color, and size'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QPainter::drawText()`: 该方法用于以指定的字体样式、颜色和大小绘制文本'
- en: To understand the different classes and methods required to display graphics
    practically, let's follow some recipes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际显示图形所需的不同类和方法，让我们遵循一些操作步骤。
- en: Displaying mouse coordinates
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示鼠标坐标
- en: To draw any shape with the mouse, you need to know where the mouse button is
    clicked, to where the mouse is dragged, and where the mouse button is released.
    Only after knowing the coordinates where the mouse button is clicked can you go
    ahead and execute commands to draw different shapes. In this recipe, we will be
    learning to display the *x* and *y* coordinates to which the mouse is moved on
    the form.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要用鼠标绘制任何形状，您需要知道鼠标按钮的点击位置，鼠标拖动到何处以及鼠标按钮释放的位置。只有在知道鼠标按钮点击的坐标后，才能执行命令来绘制不同的形状。在这个教程中，我们将学习在表单上显示鼠标移动到的*x*和*y*坐标。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'In this recipe, we will be tracking mouse movement and will be displaying the
    *x* and *y* coordinates which the mouse is moved on the form. So, in all, we will
    be using two Label widgets in this application, one for displaying a message and
    the other for displaying mouse coordinates. The complete steps for creating this
    application are shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将跟踪鼠标移动，并在表单上显示鼠标移动的*x*和*y*坐标。因此，在这个应用程序中，我们将使用两个Label小部件，一个用于显示消息，另一个用于显示鼠标坐标。创建此应用程序的完整步骤如下：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个基于没有按钮的对话框模板的应用程序。
- en: Add two `QLabel` widgets to the form by dragging and dropping two Label widgets
    on the form.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将两个Label小部件拖放到表单上，向表单添加两个`QLabel`小部件。
- en: Set the text property of the first Label widget to `This app will display x,y
    coordinates where mouse is moved on`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个Label小部件的文本属性设置为`This app will display x,y coordinates where mouse is moved
    on`。
- en: Delete the text property of the second Label widget as its text property will
    be set through code.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第二个Label小部件的文本属性，因为它的文本属性将通过代码设置。
- en: Save the application by name as `demoMousetrack.ui`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoMousetrack.ui`。
- en: 'The form will now appear as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 表单现在将显示如下截图所示：
- en: '![](assets/42107aa5-261d-42aa-8327-ed81cf97bbae.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42107aa5-261d-42aa-8327-ed81cf97bbae.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. The `pyuic5` utility
    is used for converting the XML file into Python code. The generated Python script,
    `demoMousetrack.py`, can be seen in the source code bundle of the book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。使用`pyuic5`实用程序将XML文件转换为Python代码。书籍的源代码包中可以看到生成的Python脚本`demoMousetrack.py`。
- en: Treat the `demoMousetrack.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoMousetrack.py`脚本视为头文件，并将其从中调用用户界面设计的文件中导入。
- en: 'Create another Python file with the name `callMouseTrack.pyw` and import the
    `demoMousetrack.py` code into it:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callMouseTrack.pyw`的Python文件，并将`demoMousetrack.py`代码导入其中：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To enable the application to keep track of the mouse, a method, `setMouseTracking(True)`,
    is used. This method will sense the mouse movement and whenever the mouse is moved,
    it will invoke the `mouseMoveEvent()` method. In `mouseMoveEvent()`, the `x` and
    `y` methods are invoked on the `event` object to get the *x* and *y* coordinate
    values of the mouse's location. The *x* and *y* coordinates are assigned to the
    `x` and `y` variables respectively. The values in the *x* and *y* coordinates
    are displayed in the desired format via the Label widget.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序跟踪鼠标，使用了一个方法`setMouseTracking(True)`。这个方法将感应鼠标移动，每当鼠标移动时，它将调用`mouseMoveEvent()`方法。在`mouseMoveEvent()`中，对`event`对象调用`x`和`y`方法以获取鼠标位置的*x*和*y*坐标值。*x*和*y*坐标分别赋给`x`和`y`变量。通过标签小部件以所需的格式显示*x*和*y*坐标的值。
- en: 'On running the application, you will get a message that on moving the mouse,
    its *x* and *y* coordinate values will be displayed. When you move the mouse on
    the form, the *x* and *y* coordinates of the mouse location will be displayed
    through the second Label widget, as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将会收到一条消息，提示鼠标移动时将显示其*x*和*y*坐标值。当您在表单上移动鼠标时，鼠标位置的*x*和*y*坐标将通过第二个标签小部件显示，如下截图所示：
- en: '![](assets/da24bcb9-6682-437e-96ac-72ca5f5d78f5.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/da24bcb9-6682-437e-96ac-72ca5f5d78f5.png)'
- en: Displaying coordinates where the mouse button is clicked and released
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示鼠标按下和释放的坐标
- en: In this recipe, we will be learning to display the *x* and *y* coordinates where
    the mouse button is clicked, along with the coordinates of where the mouse button
    is released.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习显示鼠标按下的*x*和*y*坐标，以及鼠标释放的坐标。
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Two methods, `mousePressEvent()` and `mouseReleaseEvent()`, will play major
    role in this recipe. The `mousePressEvent()` method will be automatically invoked
    when the mouse is pressed and will reveal the *x* and *y* coordinates when the
    mouse press event has occurred. Similarly, the `mouseReleaseEvent()` method will
    be invoked automatically whenever the mouse button is released. Two Label widgets
    will be used in this recipe to display the coordinates where the mouse button
    is clicked and where the mouse button is released. Here are the steps to create
    such an application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法，`mousePressEvent()`和`mouseReleaseEvent()`，在这个示例中将起到重要作用。当鼠标按下时，`mousePressEvent()`方法将自动被调用，并在鼠标按下事件发生时显示*x*和*y*坐标。同样，`mouseReleaseEvent()`方法将在鼠标按钮释放时自动被调用。两个标签小部件将用于显示鼠标按下和释放的坐标。以下是创建这样一个应用程序的步骤：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add three `QLabel` widgets to the form by dragging and dropping three Label
    widgets on the form.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将三个标签小部件拖放到表单上，向表单添加三个`QLabel`小部件。
- en: Set the text property of the first Label widget to `Displays the x,y coordinates
    where mouse is pressed and released`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个标签小部件的文本属性设置为`显示鼠标按下和释放的*x*和*y*坐标`。
- en: Delete the text property of the second and third Label widgets, as their text
    properties will be set through code.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第二个和第三个标签小部件的文本属性，因为它们的文本属性将通过代码设置。
- en: Set the objectName property of the second Label widget to `labelPress`, as it
    will be used for displaying the *x* and *y* coordinates of the location where
    the mouse button is clicked.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个标签小部件的objectName属性设置为`labelPress`，因为它将用于显示鼠标按下的位置的*x*和*y*坐标。
- en: Set the objectName property of the third Label widget to `labelRelease` because
    it will be used for displaying the *x* and *y* coordinates of the location where
    the mouse button is released.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个标签小部件的objectName属性设置为`labelRelease`，因为它将用于显示鼠标释放的位置的*x*和*y*坐标。
- en: Save the application by name as `demoMouseClicks.ui`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoMouseClicks.ui`。
- en: 'The form will now appear as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 表单现在将显示如下截图所示：
- en: '![](assets/349370c8-045c-4665-a596-a08ee0f4ca45.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/349370c8-045c-4665-a596-a08ee0f4ca45.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. The `pyuic5` utility
    is used for converting the XML file into Python code. The generated Python script,
    `demoMouseClicks.py`, can be seen in the source code bundle of the book.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在一个`.ui`文件中，这是一个XML文件，需要转换为Python代码。使用`pyuic5`实用程序将XML文件转换为Python代码。生成的Python脚本`demoMouseClicks.py`可以在本书的源代码包中看到。
- en: Treat the `demoMouseClicks.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoMouseClicks.py`脚本视为头文件，并将其导入到您将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callMouseClickCoordinates.pyw` and
    import the `demoMouseClicks.py` code into it:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callMouseClickCoordinates.pyw`的Python文件，并将`demoMouseClicks.py`代码导入其中：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Two methods are automatically invoked when you click the mouse. The `mousePressEvent()` method is
    invoked when you press the mouse button and the `mouseReleaseEvent()` method is
    invoked when you release the mouse button. To display the *x* and *y* coordinates
    of the location where the mouse button is clicked and released, we make use of
    these two methods. In both the methods, we simply invoke the `x()` and `y()` methods
    on the `event` object to fetch the *x* and *y* coordinate values of the mouse
    location. The fetched `x` and `y` values will be assigned to the `x` and `y` variables,
    respectively. The values in the `x` and `y` variables are formatted in the desired
    format and displayed through the two Label widgets.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当单击鼠标时，会自动调用两个方法。当按下鼠标按钮时，会调用`mousePressEvent()`方法，当释放鼠标按钮时，会调用`mouseReleaseEvent()`方法。为了显示鼠标点击和释放的位置的*x*和*y*坐标，我们使用这两种方法。在这两种方法中，我们只需在`event`对象上调用`x()`和`y()`方法来获取鼠标位置的*x*和*y*坐标值。获取的*x*和*y*值将分别赋给`x`和`y`变量。`x`和`y`变量中的值将以所需的格式进行格式化，并通过两个Label部件显示出来。
- en: On running the application, you will get a message that the *x* and *y* coordinates
    of the location where the mouse button is clicked and released will be displayed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将会收到一个消息，显示鼠标按下和释放的位置的*x*和*y*坐标。
- en: 'When you press the mouse button and release it, the *x* and *y* coordinates
    of the location where the mouse is pressed and released will be displayed through
    the two Label widgets, as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下鼠标按钮并释放它时，鼠标按下和释放的位置的*x*和*y*坐标将通过两个Label部件显示出来，如下截图所示：
- en: '![](assets/d2b7047e-aabd-43b8-9b9a-dff3be87f80e.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d2b7047e-aabd-43b8-9b9a-dff3be87f80e.png)'
- en: Displaying a point where the mouse button is clicked
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示鼠标点击的点
- en: In this recipe, we will be learning to display the point where the mouse button
    is clicked on the form. Point here means a dot. That is, wherever the user presses
    the mouse, a dot will appear at that coordinate. You will also learn to define
    the size of the dot too.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习在窗体上显示鼠标点击的点。这里的点指的是一个小圆点。也就是说，无论用户在哪里按下鼠标，都会在那个坐标处出现一个小圆点。你还将学会定义小圆点的大小。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The `mousePressEvent()` method will be used in this recipe as it is the method
    that is automatically invoked when the mouse is pressed on the form. In the `mousePressEvent()`
    method, we will execute the command to display a dot or point of the desired size.
    Here are the steps to understand how you can display a point or dot on the form
    where the mouse button is clicked:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，将使用`mousePressEvent()`方法，因为它是在窗体上按下鼠标时自动调用的方法。在`mousePressEvent()`方法中，我们将执行命令来显示所需大小的点或圆点。以下是了解如何在单击鼠标的地方在窗体上显示一个点或圆点的步骤：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add a `QLabel` widgets to the form by dragging and dropping a Label widget on
    the form.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放Label部件将`QLabel`部件添加到窗体中。
- en: Set the text property of the Label widget to `Click the mouse where you want
    to display a dot`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Label部件的文本属性设置为“单击鼠标以显示一个点的位置”。
- en: Save the application by name as `demoDrawDot.ui`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDrawDot.ui`。
- en: 'The form will now appear as shown in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 窗体现在将显示如下截图所示：
- en: '![](assets/ec7eda2f-85a9-454a-80a7-41c9fc88a2ea.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec7eda2f-85a9-454a-80a7-41c9fc88a2ea.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. The `pyuic5` utility
    is used for converting the XML file into Python code. The generated Python script,
    `demoDrawDot.py`, can be seen in the source code bundle of the book.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在一个`.ui`文件中，这是一个XML文件，需要转换为Python代码。使用`pyuic5`工具将XML文件转换为Python代码。生成的Python脚本`demoDrawDot.py`可以在本书的源代码包中找到。
- en: Treat the `demoDrawDot.py` script as a header file, and import it into the file
    from which you will invoke its user interface design.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoDrawDot.py`脚本视为头文件，并将其从用户界面设计中调用的文件中导入。
- en: 'Create another Python file with the name `callDrawDot.pyw` and import the `demoDrawDot.py`
    code into it:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDrawDot.pyw`的Python文件，并将`demoDrawDot.py`代码导入其中：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Because we want to display the point where the mouse button is clicked, the
    `mousePressEvent()` method is used. In the `mousePressEvent()` method, the `pos().x()`
    and `pos().y()` methods are invoked on the `event` object to fetch the locations
    of the *x* and *y* coordinates and assign them to the `0` and `1` elements of
    the `pos1` array. That is, the `pos1` array is initialized to the *x* and *y*
    coordinate values where the mouse button is clicked. After initializing the `pos1`
    array, the `self.update()` method is called to invoke the `paintEvent()` method.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们想要显示鼠标点击的点，所以使用了`mousePressEvent()`方法。在`mousePressEvent()`方法中，对`event`对象调用`pos().x()`和`pos().y()`方法来获取*x*和*y*坐标的位置，并将它们分配给`pos1`数组的`0`和`1`元素。也就是说，`pos1`数组被初始化为鼠标点击的*x*和*y*坐标值。在初始化`pos1`数组之后，调用`self.update()`方法来调用`paintEvent()`方法。
- en: In the `paintEvent()` method, an object of the `QPainter` class is defined by
    name as `qp`. An object of the `QPen` class is defined by name as pen to set the
    thickness of the pen and its color. Finally, a point is displayed by invoking
    the `drawPoint()` method at the location whose value is defined in the `pos1`
    array, that is, where the mouse button is clicked.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`paintEvent()`方法中，通过名称为`qp`的`QPainter`类对象定义了一个对象。通过名称为pen的`QPen`类对象设置了笔的粗细和颜色。最后，通过在`pos1`数组中定义的位置调用`drawPoint()`方法显示一个点。
- en: 'On running the application, you will get a message that a dot will be displayed
    where the mouse button will be clicked. When you click the mouse, a point will
    appear at that location, as shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，将会收到一条消息，指出鼠标按钮点击的地方将显示一个点。当您点击鼠标时，一个点将出现在那个位置，如下截图所示：
- en: '![](assets/ba0d76c7-9948-4b42-9843-1fd8aaf1b17c.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba0d76c7-9948-4b42-9843-1fd8aaf1b17c.png)'
- en: Drawing a line between two mouse clicks
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在两次鼠标点击之间画一条线
- en: In this recipe, we will learn to display a line between two points, from where
    the mouse button is clicked till where the mouse button is released on the form.
    The focus of this recipe is to understand how the mouse press and release events
    are handled, how the x *a* and *y* coordinates where the mouse button is clicked
    and released are accessed, and how a line is drawn from the location where the
    mouse button is clicked to the location where the mouse button is released.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何在两个点之间显示一条线，从鼠标按钮点击的地方到鼠标按钮释放的地方。这个示例的重点是理解如何处理鼠标按下和释放事件，如何访问鼠标按钮点击和释放的*x*和*y*坐标，以及如何在鼠标按钮点击的位置和鼠标按钮释放的位置之间绘制一条线。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The major players in this recipe are the `mousePressEvent()`, `mouseReleaseEvent()`,
    and `paintEvent()` methods. The `mousePressEvent()` and `mouseReleaseEvent()`
    methods are automatically executed whenever the mouse button is clicked or released,
    respectively. These two methods will be used to access the *x* and *y* coordinates
    where the mouse button is clicked and released. Finally, the `paintEvent()` method
    is used to draw a line between the coordinates that were supplied by the `mousePressEvent()`
    and `mouseReleaseEvent()` methods. Here is the step-by-step procedure to create
    this application:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例中的主要方法是`mousePressEvent()`、`mouseReleaseEvent()`和`paintEvent()`。`mousePressEvent()`和`mouseReleaseEvent()`方法在鼠标按钮被点击或释放时自动执行。这两种方法将用于访问鼠标按钮被点击和释放的*x*和*y*坐标。最后，`paintEvent()`方法用于在`mousePressEvent()`和`mouseReleaseEvent()`方法提供的坐标之间绘制一条线。以下是创建此应用程序的逐步过程：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add a `QLabel` widget to the form by dragging and dropping a Label widget on
    the form.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放标签小部件到表单上，向表单添加一个`QLabel`小部件。
- en: Set the text property of the Label widget to `Click the mouse and drag it to
    draw the line of desired size`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的文本属性设置为`单击鼠标并拖动以绘制所需大小的线`。
- en: Save the application by name as `demoDrawLine.ui`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDrawLine.ui`。
- en: 'The form will now appear as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 表单现在将显示如下截图所示：
- en: '![](assets/14d862a2-330c-4b2a-a5a9-c82308f27209.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/14d862a2-330c-4b2a-a5a9-c82308f27209.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. The `pyuic5` utility
    is used for converting the XML file into Python code. The generated Python script,
    `demoDrawLine.py`, can be seen in the source code bundle of the book.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在一个`.ui`文件中，这是一个XML文件，需要转换为Python代码。`pyuic5`实用程序用于将XML文件转换为Python代码。生成的Python脚本`demoDrawLine.py`可以在书的源代码包中看到。
- en: Treat the `demoDrawLine.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoDrawLine.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callDrawLine.pyw` and import the
    `demoDrawLine.py` code into it:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDrawLine.pyw`的Python文件，并将`demoDrawLine.py`代码导入其中：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As we want to display a line between the locations where the mouse button is
    clicked and released, we will be making use of two methods, `mousePressEvent()`
    and `mouseReleaseEvent()`. As the name suggests, the `mousePressEvent()` method
    is automatically invoked when a mouse button is pressed. Similarly, the `mouseReleaseEvent()`
    method is automatically invoked when the mouse button is released. In these two
    methods, we will be simply saving the values of the *x* and *y* coordinates where
    the mouse button is clicked and released. Two arrays are defined in this application,
    `pos1` and `pos2`, where `pos1` stores the *x* and *y* coordinates of the location
    where the mouse button is clicked, and the `pos2` array stores the *x* and *y*
    coordinates of the location where the mouse button is released. Once the *x* and
    *y* coordinates of the locations where the mouse button is clicked and released
    are assigned to the `pos1` and `pos2` arrays, the `self.update()` method is invoked
    in the `mouseReleaseEvent()` method to invoke the `paintEvent()` method. In the
    `paintEvent()` method, the `drawLine()` method is invoked and the *x* and *y*
    coordinates stored in the `pos1` and `pos2` array are passed to it to draw a line
    between the mouse press and mouse release locations.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想要在鼠标按钮点击和释放的位置之间显示一条线，我们将使用两种方法，`mousePressEvent()`和`mouseReleaseEvent()`。顾名思义，`mousePressEvent()`方法在鼠标按钮按下时自动调用。同样，`mouseReleaseEvent()`方法在鼠标按钮释放时自动调用。在这两种方法中，我们将简单地保存鼠标按钮点击和释放的*x*和*y*坐标的值。在这个应用程序中定义了两个数组`pos1`和`pos2`，其中`pos1`存储鼠标按钮点击的位置的*x*和*y*坐标，`pos2`数组存储鼠标按钮释放的位置的*x*和*y*坐标。一旦鼠标按钮点击和释放的位置的*x*和*y*坐标被分配给`pos1`和`pos2`数组，`self.update()`方法在`mouseReleaseEvent()`方法中被调用以调用`paintEvent()`方法。在`paintEvent()`方法中，调用`drawLine()`方法，并将存储在`pos1`和`pos2`数组中的*x*和*y*坐标传递给它，以在鼠标按下和鼠标释放的位置之间绘制一条线。
- en: 'On running the application, you will get a message to click and drag the mouse
    button between the locations where the line is required. So, click the mouse button
    and keeping the mouse button pressed, drag it to the desired location and release
    the mouse button. A line will be drawn between the locations where the mouse button
    is clicked and where it is released, as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将收到一条消息，要求在需要绘制线条的位置之间单击并拖动鼠标按钮。因此，单击鼠标按钮并保持鼠标按钮按下，将其拖动到所需位置，然后释放鼠标按钮。将在鼠标按钮单击和释放的位置之间绘制一条线，如下面的屏幕截图所示：
- en: '![](assets/af765355-e32c-4cbc-8c68-130b778aa710.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/af765355-e32c-4cbc-8c68-130b778aa710.png)'
- en: Drawing lines of different types
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制不同类型的线条
- en: In this recipe, we will be learning to display lines of different types between
    two points, from the mouse click location to where the mouse button is released.
    The user will be shown different line types to choose from, such as solid, dash
    line, dash-dot line, and so on. The line will be draw in the selected line type.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将学习在两个点之间显示不同类型的线条，从鼠标单击位置到释放鼠标按钮的位置。用户将显示不同的线条类型可供选择，例如实线、虚线、虚线点线等。线条将以所选线条类型绘制。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'It is the `QPen` class that is used for defining the size or thickness of the
    pen used for drawing shapes. The `setStyle()` method of the `QPen` class is used
    in this recipe to define the style of the line. Here is the step-by-step procedure
    to draw lines of different styles:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 用于定义绘制形状的笔的大小或厚度的是`QPen`类。在这个示例中，使用`QPen`类的`setStyle()`方法来定义线条的样式。以下是绘制不同样式线条的逐步过程：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add a `QLabel` widget to the form by dragging and dropping a Label widget on
    the form.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在表单上拖放一个标签小部件来向表单添加一个`QLabel`小部件。
- en: Add a `QListWidget` widget by dragging and dropping a List Widget item on the
    form.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放一个列表小部件项目在表单上添加一个`QListWidget`小部件。
- en: Set the text property of the Label widget to `Select the style from the list
    and then click and drag to draw a line`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的文本属性设置为`从列表中选择样式，然后单击并拖动以绘制一条线`。
- en: Save the application by name as `demoDrawDiffLine.ui`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDrawDiffLine.ui`。
- en: 'The List Widget item will be used for showing different types of lines, so
    right-click on the List Widget widget and select the Edit Items option to add
    a few line types to the List Widget item. Click the + (plus) button at the bottom
    of the dialog box that opens up and add a few line types, as shown in the following
    screenshot:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表小部件将用于显示不同类型的线条，因此右键单击列表小部件并选择“编辑项目”选项以向列表小部件添加几种线条类型。单击打开的对话框框底部的+（加号）按钮，并添加几种线条类型，如下面的屏幕截图所示：
- en: '![](assets/2d9c24db-f1d3-4c5b-86f8-946e1db3c09b.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2d9c24db-f1d3-4c5b-86f8-946e1db3c09b.png)'
- en: Set the objectName property of the List Widget item to `listWidgetLineType`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将列表小部件项目的objectName属性设置为`listWidgetLineType`。
- en: 'The form will now appear as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 表单现在将显示如下屏幕截图所示：
- en: '![](assets/3da8852a-3a65-41e2-94d6-9a50803b8a8f.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3da8852a-3a65-41e2-94d6-9a50803b8a8f.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. The `pyuic5` utility
    is used for converting the XML file into Python code. The generated Python script,
    `demoDrawDiffLine.py`, can be seen in the source code bundle of the book.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。`pyuic5`实用程序用于将XML文件转换为Python代码。生成的Python脚本`demoDrawDiffLine.py`可以在本书的源代码包中看到。
- en: Treat the `demoDrawDiffLine.py` script as a header file, and import it into
    the file from which you will invoke its user interface design.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoDrawDiffLine.py`脚本视为头文件，并将其导入到您将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callDrawDiffLine.pyw` and import
    the `demoDrawDiffLine.py` code into it:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDrawDiffLine.pyw`的Python文件，并将`demoDrawDiffLine.py`代码导入其中：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A line has to be drawn between the mouse press and mouse release locations,
    so we will be making use of two methods in this application, `mousePressEvent()`
    and `mouseReleaseEvent()`. The `mousePressEvent()` method is automatically invoked
    when the left mouse button is clicked. Similarly, the `mouseReleaseEvent()` method
    is automatically invoked when the mouse button is released.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在鼠标按下和鼠标释放位置之间绘制一条线，因此我们将在此应用程序中使用两种方法，`mousePressEvent()`和`mouseReleaseEvent()`。当单击鼠标左键时，`mousePressEvent()`方法会自动调用。同样，当鼠标按钮释放时，`mouseReleaseEvent()`方法会自动调用。
- en: In these two methods, we will be saving the values of the *x* and *y* coordinates
    where the mouse button is clicked and released respectively. Two arrays are defined
    in this application, `pos1` and `pos2`, where `pos1` stores the *x* and *y* coordinates
    of the location where the mouse button is clicked and the `pos2` array stores
    the *x* and *y* coordinates of the location where the mouse button is released.
    In the `mouseReleaseEvent()` method, we fetch the line type chosen by the user
    from the List widget and assign the chosen line type to the `lineType` variable.
    Also, the `self.update()` method is invoked in the `mouseReleaseEvent()` method
    to invoke the `paintEvent()` method. In the `paintEvent()` method, you define
    a pen of `4` pixels in width and assign it a black color. Also, you assign a style
    to the pen that matches the line type chosen by the user from the List widget.
    Finally, the `drawLine()` method is invoked and the *x* and *y* coordinates stored
    in the `pos1` and `pos2` array are passed to it to draw a line between the mouse
    press and mouse release locations. The line will be displayed in the style that
    is selected from the List widget.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种方法中，我们将保存鼠标单击和释放时的*x*和*y*坐标的值。在这个应用程序中定义了两个数组`pos1`和`pos2`，其中`pos1`存储鼠标单击的位置的*x*和*y*坐标，`pos2`数组存储鼠标释放的位置的*x*和*y*坐标。在`mouseReleaseEvent()`方法中，我们从列表小部件中获取用户选择的线类型，并将所选的线类型分配给`lineType`变量。此外，在`mouseReleaseEvent()`方法中调用了`self.update()`方法来调用`paintEvent()`方法。在`paintEvent()`方法中，您定义了一个宽度为`4`像素的画笔，并将其分配为黑色。此外，您为画笔分配了一个与用户从列表小部件中选择的线类型相匹配的样式。最后，调用`drawLine()`方法，并将存储在`pos1`和`pos2`数组中的*x*和*y*坐标传递给它，以在鼠标按下和鼠标释放位置之间绘制一条线。所选的线将以从列表小部件中选择的样式显示。
- en: 'On running the application, you will get a message to select the line type
    from the list and click and drag the mouse button between the locations where
    the line is required. So, after selecting a desired line type, click the mouse
    button and keeping the mouse button pressed, drag it to the desired location and
    release the mouse button. A line will be drawn between the locations where the
    mouse button is clicked and where it is released in the style that is chosen from
    the list. The following screenshot shows the lines of different types:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将收到一条消息，要求从列表中选择线类型，并在需要线的位置之间单击并拖动鼠标按钮。因此，在选择所需的线类型后，单击鼠标按钮并保持鼠标按钮按下，将其拖动到所需位置，然后释放鼠标按钮。将在鼠标按钮单击和释放的位置之间绘制一条线，以所选的样式显示在列表中。以下截图显示了不同类型的线：
- en: '![](assets/9b53d16b-2706-4bad-b105-9f86f5163ee6.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9b53d16b-2706-4bad-b105-9f86f5163ee6.png)'
- en: Drawing a circle of a desired size
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制所需大小的圆
- en: In this recipe, we will be learning to draw a circle. The user will click and
    drag the mouse to define the diameter of the circle, and the circle will be drawn
    at the diameter specified by the user.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何绘制一个圆。用户将点击并拖动鼠标来定义圆的直径，圆将根据用户指定的直径进行绘制。
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'A circle is nothing but an arc that is drawn from 0 to 360 degrees. The length
    of the arc, or you can say the diameter of the circle, is determined by the distance
    of mouse press event and mouse release events. A rectangle is defined internally
    from mouse press event until mouse release event, and the circle is drawn within
    that rectangle. Here are the complete steps to create this application:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一个圆实际上就是从0到360度绘制的弧。弧的长度，或者可以说是圆的直径，由鼠标按下事件和鼠标释放事件的距离确定。在鼠标按下事件到鼠标释放事件之间内部定义了一个矩形，并且圆在该矩形内绘制。以下是创建此应用程序的完整步骤：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个基于无按钮对话框模板的应用程序。
- en: Add a `QLabel` widget to the form by dragging and dropping a Label widget on
    the form.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放一个标签小部件到表单上，向表单添加一个`QLabel`小部件。
- en: Set the text property of the Label widget to `Click the mouse and drag it to
    draw a  circle of the desired size`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的文本属性设置为`单击鼠标并拖动以绘制所需大小的圆`。
- en: 'Save the application by name as `demoDrawCircle.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDrawCircle.ui`。表单现在将显示如下截图所示：
- en: '![](assets/53947d76-a10c-4516-9a77-6e50d2412f11.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53947d76-a10c-4516-9a77-6e50d2412f11.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file and it
    is an XML file. The XML file is converted into Python code by applying the `pyuic5`
    utility. You can find the generated Python code, `demoDrawCircle.py`, in the source
    code bundle of the book.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，它是一个XML文件。通过应用`pyuic5`实用程序将XML文件转换为Python代码。您可以在本书的源代码包中找到生成的Python代码`demoDrawCircle.py`。
- en: Treat the `demoDrawCircle.py` script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoDrawCircle.py`脚本视为头文件，并将其导入到您将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callDrawCircle.pyw` and import the
    `demoDrawCircle.py` code into it:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDrawCircle.pyw`的Python文件，并将`demoDrawCircle.py`代码导入其中：
- en: '[PRE5]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To draw a circle with the diameter defined between the mouse button pressed
    and released locations, we will be making use of two methods, `mousePressEvent()`
    and `mouseReleaseEvent()`. The `mousePressEvent()` method is automatically invoked
    when a mouse button is pressed and the `mouseReleaseEvent()` method is automatically
    invoked when the mouse button is released. In these two methods, we will be simply
    saving the values of the *x* and *y* coordinates where the mouse button is clicked
    and released. Two arrays, `pos1` and `pos2`, are defined, where the `pos1` array
    stores the *x* and *y* coordinates of the location where the mouse button is clicked
    and the `pos2` array stores the *x* and *y* coordinates of the location where
    the mouse button is released. The `self.update()` method that is invoked in the
    `mouseReleaseEvent()` method will invoke the `paintEvent()` method. In the `paintEvent()`
    method, the width of the rectangle is computed by finding the difference between
    the *x* coordinates of mouse press and mouse release locations. Similarly, the
    height of the rectangle is computed by finding the difference between the y coordinates
    of mouse press and mouse release events.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在鼠标按下和释放的位置之间绘制直径定义的圆，我们将使用两种方法，`mousePressEvent()`和`mouseReleaseEvent()`。当鼠标按钮按下时，`mousePressEvent()`方法会自动调用，当鼠标按钮释放时，`mouseReleaseEvent()`方法会自动调用。在这两种方法中，我们将简单地保存鼠标按下和释放的*x*和*y*坐标的值。定义了两个数组`pos1`和`pos2`，其中`pos1`数组存储鼠标按下的位置的*x*和*y*坐标，`pos2`数组存储鼠标释放的位置的*x*和*y*坐标。在`mouseReleaseEvent()`方法中调用的`self.update()`方法将调用`paintEvent()`方法。在`paintEvent()`方法中，通过找到鼠标按下和鼠标释放位置的*x*坐标之间的差异来计算矩形的宽度。类似地，通过找到鼠标按下和鼠标释放事件的*y*坐标之间的差异来计算矩形的高度。
- en: The circle will be created of a size equal to the width and height of the rectangle,
    that is, the circle will be created within the boundaries specified by the user
    with the mouse.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '圆的大小将等于矩形的宽度和高度，也就是说，圆将在用户用鼠标指定的边界内创建。 '
- en: Also, in the `paintEvent()` method, the `drawArc()` method is invoked and the
    rectangle, starting angle of the arc, and length of the arc are passed to it.
    The starting angle is specified as `0`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`paintEvent()`方法中，调用了`drawArc()`方法，并将矩形、弧的起始角度和弧的长度传递给它。起始角度被指定为`0`。
- en: 'On running the application, you will get a message to click and drag the mouse
    button to define the diameter of the circle to be drawn. So, click the mouse button
    and keeping the mouse button pressed, drag it to the desired location and release
    the mouse button. A circle will be drawn between the locations where the mouse
    button is clicked and where it is released, as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，会收到一条消息，要求点击并拖动鼠标按钮以定义要绘制的圆的直径。因此，点击鼠标按钮并保持鼠标按钮按下，将其拖动到所需位置，然后释放鼠标按钮。将在鼠标按下和释放的位置之间绘制一个圆，如下截图所示：
- en: '![](assets/361dd5cf-84ec-4f7e-91da-d01e1547202f.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/361dd5cf-84ec-4f7e-91da-d01e1547202f.png)'
- en: Drawing a rectangle between two mouse clicks
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在两次鼠标点击之间绘制一个矩形
- en: In this recipe, we will be learning to display a rectangle between the two points
    where the mouse button is clicked and released on the form.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习在表单上显示鼠标按下和释放的两个点之间的矩形。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'It is a very simple application, where the `mousePressEvent()` and `mouseReleaseEvent()`
    methods are used to find the *x* and *y* coordinates of the location where the
    mouse is pressed and released, respectively. Thereafter, the `drawRect()` method
    is invoked to draw the rectangle from the coordinates where the mouse button is
    clicked to the coordinates where the mouse button is released. The step-by-step
    procedure for creating this application is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的应用程序，其中使用`mousePressEvent()`和`mouseReleaseEvent()`方法来分别找到鼠标按下和释放的位置的*x*和*y*坐标。然后，调用`drawRect()`方法来从鼠标按下的位置到鼠标释放的位置绘制矩形。创建此应用程序的逐步过程如下：
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们基于没有按钮的对话框模板创建一个应用程序。
- en: Add a `QLabel` widget to the form by dragging and dropping a Label widget on
    the form.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单上通过拖放标签小部件添加一个`QLabel`小部件。
- en: Set the text property of the Label widget to `Click the mouse and drag it to
    draw a rectangle of the desired size`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的文本属性设置为`点击鼠标并拖动以绘制所需大小的矩形`。
- en: 'Save the application by name as `demoDrawRectangle.ui`. The form will now appear
    as shown in the following screenshot:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDrawRectangle.ui`。表单现在将显示如下截图所示：
- en: '![](assets/23480372-2821-4af3-abba-cb0ad86dc49b.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/23480372-2821-4af3-abba-cb0ad86dc49b.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file, and needs to be converted into Python code. The `pyuic5` utility
    is used for converting the XML file into Python code. The generated Python script,
    `demoDrawRectangle.py`, can be seen in the source code bundle of the book.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在一个`.ui`文件中，这是一个XML文件，需要转换为Python代码。使用`pyuic5`工具将XML文件转换为Python代码。生成的Python脚本`demoDrawRectangle.py`可以在本书的源代码包中找到。
- en: Treat the `demoDrawRectangle.py` script as a header file, and import it into
    the file from which you will invoke its user interface design.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoDrawRectangle.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callDrawRectangle.pyw` and import
    the `demoDrawRectangle.py` code into it:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDrawRectangle.pyw`的Python文件，并将`demoDrawRectangle.py`的代码导入其中：
- en: '[PRE6]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To draw a rectangle between the mouse button pressed and released locations,
    we will be making use of two methods, `mousePressEvent()` and `mouseReleaseEvent()`.
    The `mousePressEvent()` method is automatically invoked when a mouse button is
    pressed and the `mouseReleaseEvent()` method is automatically invoked when the
    mouse button is released. In these two methods, we will be simply saving the values
    of the *x* and *y* coordinates where the mouse button is clicked and released
    respectively. Two arrays, `pos1` and `pos2`, are defined, where the `pos1` array
    stores the *x* and *y* coordinates of the location where the mouse button is clicked
    and the `pos2` array stores the *x* and *y* coordinates of the location where
    the mouse button is released. The `self.update()` method that is invoked in the
    `mouseReleaseEvent()` method will invoke the `paintEvent()` method. In the `paintEvent()`
    method, the width of the rectangle is computed by finding the difference between
    the *x* coordinates of mouse press and mouse release locations. Similarly, the
    height of the rectangle is computed by finding the difference between the *y*
    coordinates of mouse press and mouse release events.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在鼠标按钮按下和释放的位置之间绘制矩形，我们将使用两种方法，`mousePressEvent()`和`mouseReleaseEvent()`。当鼠标按钮按下时，`mousePressEvent()`方法会自动被调用，当鼠标按钮释放时，`mouseReleaseEvent()`方法会自动被调用。在这两种方法中，我们将简单地保存鼠标按钮单击和释放时的*x*和*y*坐标的值。定义了两个数组`pos1`和`pos2`，其中`pos1`数组存储鼠标按钮单击的位置的*x*和*y*坐标，`pos2`数组存储鼠标按钮释放的位置的*x*和*y*坐标。在`mouseReleaseEvent()`方法中调用的`self.update()`方法将调用`paintEvent()`方法。在`paintEvent()`方法中，矩形的宽度通过找到鼠标按下和鼠标释放位置的*x*坐标之间的差异来计算。同样，矩形的高度通过找到鼠标按下和鼠标释放事件的*y*坐标之间的差异来计算。
- en: Also, in the `paintEvent()` method, the `drawRect()` method is invoked and the
    *x* and *y* coordinates stored in the `pos1` array are passed to it. Also, the
    width and height of the rectangle are passed to the `drawRect()` method to draw
    the rectangle between the mouse press and mouse release locations.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`paintEvent()`方法中，调用了`drawRect()`方法，并将存储在`pos1`数组中的*x*和*y*坐标传递给它。此外，矩形的宽度和高度也传递给`drawRect()`方法，以在鼠标按下和鼠标释放位置之间绘制矩形。
- en: On running the application, you will get a message to click and drag the mouse
    button between the locations where the rectangle is required. So, click the mouse
    button and keeping the mouse button pressed, drag it to the desired location and
    release the mouse button.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，您将收到一条消息，要求单击并拖动鼠标按钮以在所需位置之间绘制矩形。因此，单击鼠标按钮并保持鼠标按钮按下，将其拖动到所需位置，然后释放鼠标按钮。
- en: 'A rectangle will be drawn between the locations where the mouse button is clicked
    and where it is released, as shown in the following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在鼠标按钮单击和释放的位置之间将绘制一个矩形，如下截图所示：
- en: '![](assets/46b5d873-feca-40d4-a47d-8cd1a9adf217.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/46b5d873-feca-40d4-a47d-8cd1a9adf217.png)'
- en: Drawing text in a desired font and size
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以所需的字体和大小绘制文本
- en: In this recipe, we will learn to draw text in a specific font and at a specific
    font size. Four widgets will be required in this recipe such as Text Edit, List
    Widget, Combo Box, and Push Button. The Text Edit widget will be used to enter
    the text that the user wants to display in the desired font and size. The List
    Widget box will display different font names that the user can select from. The
    Combo Box widget will display font sizes that the user can select to define the
    size of the text. The Push Button widget will initiate the action, that is, the
    text entered in the Text Edit widget will be displayed in the chosen font and
    size on clicking the push button.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何以特定的字体和特定的字体大小绘制文本。在这个教程中将需要四个小部件，如文本编辑，列表小部件，组合框和按钮。文本编辑小部件将用于输入用户想要以所需字体和大小显示的文本。列表小部件框将显示用户可以从中选择的不同字体名称。组合框小部件将显示用户可以选择以定义文本大小的字体大小。按钮小部件将启动操作，也就是说，单击按钮后，文本编辑小部件中输入的文本将以所选字体和大小显示。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The `QPainter` class is the focus of this recipe. The `setFont()` and `drawText()`
    methods of the `QPainter` class will be used in this recipe. The `setFont()` method
    will be invoked to set the font style and font size chosen by the user and the
    `drawText()` method will draw the text written by the user in the Text Edit widget
    in the specified font style and size. Here is the step-by-step procedure to learn
    how these methods are used:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPainter`类是本教程的重点。`QPainter`类的`setFont()`和`drawText()`方法将在本教程中使用。`setFont()`方法将被调用以设置用户选择的字体样式和字体大小，`drawText()`方法将以指定的字体样式和大小绘制用户在文本编辑小部件中编写的文本。以下是逐步学习这些方法如何使用的过程：'
- en: Let's create an application based on the Dialog without Buttons template.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个基于无按钮对话框模板的应用程序。
- en: Add the `QLabel`, `QTextEdit`, `QListWidget`, `QComboBox`, and `QPushButton`
    widgets to the form by dragging and dropping a Label widget, a Text Edit widget,
    a List Widget box, a Combo Box widget, and a Push Button widget on the form.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`QLabel`，`QTextEdit`，`QListWidget`，`QComboBox`和`QPushButton`小部件通过拖放标签小部件，文本编辑小部件，列表小部件框，组合框小部件和按钮小部件添加到表单中。
- en: Set the text property of the Label widget to `Enter some text in leftmost box,
    select font and size, and click the Draw Text button`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的文本属性设置为“在最左边的框中输入一些文本，选择字体和大小，然后单击绘制文本按钮”。
- en: 'The List Widget box will be used for showing different fonts, so right-click
    on the List Widget box and select the Edit Items option to add a few font names
    to the List Widget box. Click the + (plus) button at the bottom of the dialog
    box that opens up and add a few font names, as shown in the following screenshot:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表小部件框将用于显示不同的字体，因此右键单击列表小部件框，选择“编辑项目”选项，向列表小部件框添加一些字体名称。单击打开的对话框底部的+（加号）按钮，并添加一些字体名称，如下截图所示：
- en: '![](assets/4af8bf5d-9571-4dfc-adfc-3ff8071a0010.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4af8bf5d-9571-4dfc-adfc-3ff8071a0010.png)'
- en: The Combo Box widget will be used for showing different font sizes, so we need
    to add certain font sizes to the Combo Box widget. Right-click on the Combo Box
    widget and select the Edit Items option.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组合框小部件将用于显示不同的字体大小，因此我们需要向组合框小部件添加一些字体大小。右键单击组合框小部件，然后选择“编辑项目”选项。
- en: 'Click the + (plus) button at the bottom of the dialog box that opens up and
    add a couple of font sizes, as shown in the following screenshot:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击打开的对话框框底部的+（加号）按钮，并添加一些字体大小，如下面的屏幕截图所示：
- en: '![](assets/4a210911-d3db-4235-b58c-be82fae13bb0.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a210911-d3db-4235-b58c-be82fae13bb0.png)'
- en: Set the text property of the Push Button widget to `Draw Text`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的文本属性设置为“绘制文本”。
- en: Set the objectName property of the List Widget box to `listWidgetFont`.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将列表小部件框的objectName属性设置为`listWidgetFont`。
- en: Set the objectName property of the Combo Box widget to `comboBoxFontSize`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组合框小部件的objectName属性设置为`comboBoxFontSize`。
- en: Set the objectName property of the Push Button widget to pushButtonDrawText.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的objectName属性设置为pushButtonDrawText。
- en: Save the application by name as `demoDrawText.ui`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoDrawText.ui`。
- en: 'The form will now appear as shown in this screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 表单现在将显示如下的屏幕截图：
- en: '![](assets/685adb85-c7f3-40db-b4ae-5ad6090a29ea.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/685adb85-c7f3-40db-b4ae-5ad6090a29ea.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file and it
    is an XML file. The XML file is converted into Python code by applying the `pyuic5`
    utility. You can find the generated Python code, `demoDrawText.py`, in the source
    code bundle of the book.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，它是一个XML文件。通过应用`pyuic5`实用程序将XML文件转换为Python代码。您可以在本书的源代码包中找到生成的Python代码`demoDrawText.py`。
- en: Treat the `demoDrawText.py`  script as a header file, and import it into the
    file from which you will invoke its user interface design.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`demoDrawText.py`脚本视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callDrawText.pyw` and import the
    `demoDrawText.py` code into it:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callDrawText.pyw`的Python文件，并将`demoDrawText.py`代码导入其中：
- en: '[PRE7]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The click() event of the Push Button widget is connected to the `dispText()`
    method, that is, whenever the push button is clicked, the `dispText()` method
    will be invoked.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 推送按钮小部件的click()事件连接到`dispText()`方法，也就是说，每当点击推送按钮时，将调用`dispText()`方法。
- en: In the `dispText()` method, the font name selected from the List Widget box
    is accessed and assigned to the `fontName` variable. Also, the font size selected
    from the combo box is accessed and assigned to the `fontSize` variable. Besides
    this, the text written in the Text Edit widget is fetched and assigned to the
    `textToDraw` variable. Finally, the `self.update()` method is invoked; it will
    invoke the `paintEvent()` method.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dispText()`方法中，访问从列表小部件框中选择的字体名称，并将其分配给`fontName`变量。此外，访问从组合框中选择的字体大小，并将其分配给`fontSize`变量。除此之外，获取并分配在文本编辑小部件中编写的文本给`textToDraw`变量。最后，调用`self.update()`方法；它将调用`paintEvent()`方法。
- en: 'In the `paintEvent()` method, the `drawText()` method is called and will draw
    the text written in the Text Edit widget in the font style that is assigned to
    the `fontName` variable, and in the font size specified in the `fontSize` variable.
    On running the application, you will find a Text Edit widget on the extreme left,
    font names displayed in the List Widget box, and font sizes displayed via the
    Combo box widget. You need to enter some text in the Text Edit widget, select
    a font style from the List Widget box and font size from the Combo Box widget,
    and click on the Draw Text button. On clicking the Draw Text button, the text
    written in the Text Edit widget will be displayed in the selected font and selected
    font size, as shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在`paintEvent()`方法中，调用`drawText()`方法，将以`fontName`变量分配的字体样式和`fontSize`变量中指定的字体大小绘制在文本编辑小部件中编写的文本。运行应用程序后，您将在极左边看到一个文本编辑小部件，字体名称显示在列表小部件框中，字体大小通过组合框小部件显示。您需要在文本编辑小部件中输入一些文本，从列表小部件框中选择一个字体样式，从组合框小部件中选择一个字体大小，然后单击“绘制文本”按钮。单击“绘制文本”按钮后，文本编辑小部件中编写的文本将以所选字体和所选字体大小显示，如下面的屏幕截图所示：
- en: '![](assets/b50a34fb-8383-4fec-b359-c0a6d2bea7f1.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b50a34fb-8383-4fec-b359-c0a6d2bea7f1.png)'
- en: Creating a toolbar that shows different graphics tools
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个显示不同图形工具的工具栏
- en: In this recipe, we will learn to create a toolbar that shows three toolbar buttons.
    These three toolbar buttons show the icons for the line, circle, and rectangle.
    When the user clicks the line toolbar button from the toolbar, he/she can click
    and drag the mouse on the form to draw a line between the two mouse locations.
    Similarly, by clicking on the circle toolbar button, the user can draw a circle
    on the form by clicking and dragging the mouse.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习创建一个显示三个工具栏按钮的工具栏。这三个工具栏按钮显示线条、圆圈和矩形的图标。当用户从工具栏中单击线条工具栏按钮时，他/她可以在表单上单击并拖动鼠标以在两个鼠标位置之间绘制一条线。类似地，通过单击圆圈工具栏按钮，用户可以通过单击和拖动鼠标在表单上绘制一个圆圈。
- en: How to do it…
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The focus of this recipe is to help you understand how frequently used commands
    in an application can be provided to the user via a toolbar, making them easy
    to access and use. You will learn to create toolbar buttons, define their shortcuts,
    and their icons too. To define the icons for the toolbar buttons, you will learn
    to create and use the resource file. The creation and execution of each toolbar
    button is explained very clearly step by step:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的重点是帮助您理解如何通过工具栏向用户提供应用程序中经常使用的命令，使它们易于访问和使用。您将学习创建工具栏按钮，定义它们的快捷键以及它们的图标。为工具栏按钮定义图标，您将学习创建和使用资源文件。逐步清晰地解释了每个工具栏按钮的创建和执行过程：
- en: Let’s create a new application to understand the steps involved in creating
    a toolbar.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新应用程序来了解创建工具栏涉及的步骤。
- en: Launch Qt Designer and create a main window-based application. You get a new
    application with the default menu bar.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Qt Designer并创建一个基于主窗口的应用程序。您将获得一个带有默认菜单栏的新应用程序。
- en: You can remove the menu bar by right-clicking on it and selecting the Remove
    Menu Bar option from the shortcut menu that pops up.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以右键单击菜单栏，然后从弹出的快捷菜单中选择“删除菜单栏”选项来删除菜单栏。
- en: 'To add a toolbar, right-click on the Main Window template and select Add Tool
    Bar from the context menu. A blank toolbar will be added below the menu bar, as
    shown in the following screenshot:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加工具栏，右键单击“主窗口”模板，然后从上下文菜单中选择“添加工具栏”。将在菜单栏下方添加一个空白工具栏，如下截图所示：
- en: '![](assets/cf2901c2-01df-4d2a-88ff-69dd27d17455.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf2901c2-01df-4d2a-88ff-69dd27d17455.png)'
- en: We want to create a toolbar with three toolbar buttons, line, circle, and rectangle.
    Since the three toolbar buttons will represent three icon images, we assume we
    have icon files, that is, files with an extension `.ico` for the line, circle,
    and rectangle.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要创建一个具有三个工具栏按钮的工具栏，分别是线条、圆形和矩形。由于这三个工具栏按钮将代表三个图标图像，我们假设已经有了图标文件，即扩展名为`.ico`的线条、圆形和矩形文件。
- en: To add tools to the toolbar, create an action in the Action Editor box; each
    toolbar button in the toolbar is represented by an action. The Action Editor box
    is usually found below the Property Editor window.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将工具添加到工具栏中，在“操作编辑器”框中创建一个操作；工具栏中的每个工具栏按钮都由一个操作表示。操作编辑器框通常位于属性编辑器窗口下方。
- en: 'If the Action Editor window is not visible, select Action Editor from the View
    menu. The Action Editor window appears as shown here:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果“操作编辑器”窗口不可见，请从“视图”菜单中选择“操作编辑器”。操作编辑器窗口将显示如下：
- en: '![](assets/cf7c369d-b4c5-49f3-b5e1-441e3e6143de.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf7c369d-b4c5-49f3-b5e1-441e3e6143de.png)'
- en: In the Action Editor window, select the New button to create an action for the
    first toolbar button. You get the dialog to enter detailed information for the
    new action.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“操作编辑器”窗口中，选择“新建”按钮，为第一个工具栏按钮创建一个操作。您将获得一个对话框，以输入新操作的详细信息。
- en: In the Text box, specify the name of the action, `Circle`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中，指定操作的名称为“Circle”。
- en: In the Object name box, the name of the action object automatically appears,
    prefixed with the text `action`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“对象名称”框中，操作对象的名称将自动显示，前缀为文本“action”。
- en: In the ToolTip box, enter any descriptive text.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“工具提示”框中，输入任何描述性文本。
- en: In the Shortcut box, press *Ctrl* + *C* character to assign `Ctrl + C` as the
    shortcut key for drawing a circle.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“快捷方式”框中，按下*Ctrl* + *C*字符，将`Ctrl + C`分配为绘制圆形的快捷键。
- en: The Icon drop-down list shows two options, Choose Resource... and Choose File.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图标下拉列表显示两个选项，选择资源…和选择文件。
- en: 'You can assign an icon image to the action either by clicking the Choose File...
    option or from the resource file:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过单击“选择文件…”选项或从资源文件中为操作分配图标图像：
- en: '![](assets/e086d3f2-763a-4856-9cbb-e1dc5cd6ba7e.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e086d3f2-763a-4856-9cbb-e1dc5cd6ba7e.png)'
- en: You can select several icons in a resource file and that resource file can then
    be used in different applications.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在资源文件中选择多个图标，然后该资源文件可以在不同的应用程序中使用。
- en: 'Select the Choose Resource... option. You get the Select Resource dialog, as
    shown in the following screenshot:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“选择资源…”选项。您将获得“选择资源”对话框，如下截图所示：
- en: '![](assets/276ca224-3288-4f68-b55a-b73768c3e92c.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/276ca224-3288-4f68-b55a-b73768c3e92c.png)'
- en: 'Since no resource has yet been created, the dialog box is empty. You see two
    icons at the top. The first icon represents Edit Resources and the second icon
    represents Reload. On clicking the Edit Resources icon, you get the dialog shown
    here:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 由于尚未创建任何资源，对话框为空。您会在顶部看到两个图标。第一个图标代表编辑资源，第二个图标代表重新加载。单击“编辑资源”图标后，您将看到如下对话框：
- en: '![](assets/990531d8-648a-46ec-aacb-cc2ef781da4b.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/990531d8-648a-46ec-aacb-cc2ef781da4b.png)'
- en: 'Now let''s see how we can create a resource file by performing the following
    steps:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何通过以下步骤创建资源文件：
- en: The first step is to create a resource file or load an existing resource file.
    The first three icons at the bottom represent New Resource File, Edit Resource
    File, and Remove.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是创建一个资源文件或加载一个现有的资源文件。底部的前三个图标分别代表新资源文件、编辑资源文件和删除。
- en: Click on New Resource File icon. You will be prompted to specify the name of
    the resource file.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“新建资源文件”图标。将提示您指定资源文件的名称。
- en: Let's name the new resource file `iconresource`. The file will be saved with
    the extension `.qrc`.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将新资源文件命名为`iconresource`。该文件将以扩展名`.qrc`保存。
- en: The next step is to add a prefix to the resource file. The three icons below
    the Prefix / Path pane are Add Prefix, Add Files, and Remove.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是向资源文件添加前缀。前缀/路径窗格下的三个图标分别是添加前缀、添加文件和删除。
- en: Click on the Add Prefix option, and you will be prompted to enter the prefix
    name.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加前缀”选项，然后将提示您输入前缀名称。
- en: Enter the prefix as `Graphics`. After adding the prefix, we are ready to add
    our three icons, circle, rectangle, and line, to the resource file. Recall that
    we have three icon files with the extension `.ico`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前缀输入为“Graphics”。添加前缀后，我们准备向资源文件添加我们的三个图标，圆形、矩形和线条。请记住，我们有三个扩展名为`.ico`的图标文件。
- en: Click the Add Files option to add icons. On clicking the Add Files option, you
    will be asked to browse to the drive/directory and select the icon files.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加文件”选项以添加图标。单击“添加文件”选项后，将要求您浏览到驱动器/目录并选择图标文件。
- en: 'Select the three icon files one by one. After adding the three icons, the Edit
    Resources dialog appears as shown here:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐个选择三个图标文件。添加完三个图标后，编辑资源对话框将显示如下：
- en: '![](assets/4a5b9237-59a2-458c-9f2a-49c9e5d6fc7c.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a5b9237-59a2-458c-9f2a-49c9e5d6fc7c.png)'
- en: On clicking the OK button, the resource file will appear, showing the three
    icons to choose from.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”按钮后，资源文件将显示三个可供选择的图标。
- en: 'Since we want to assign an icon for the circle action, click on the circle
    icon, followed by clicking the OK button:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们想要为圆形操作分配一个图标，因此单击圆形图标，然后单击“确定”按钮：
- en: '![](assets/136162d0-9399-4687-99fa-6c23c97afe3a.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/136162d0-9399-4687-99fa-6c23c97afe3a.png)'
- en: The selected circle icon will be assigned to actionCircle.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 所选的圆形图标将被分配给actionCircle。
- en: 'Similarly, create two more actions, `actionRectangle` and `actionLine`, for
    the rectangle and line toolbar buttons. After adding the three actions, the Action
    Editor window will appear as shown here:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，为矩形和线条工具栏按钮创建另外两个操作，`actionRectangle`和`actionLine`。添加了这三个操作后，操作编辑器窗口将显示如下：
- en: '![](assets/03c156e2-1e98-4390-92d0-9b0d0fe8d940.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03c156e2-1e98-4390-92d0-9b0d0fe8d940.png)'
- en: To display the toolbar buttons in the toolbar, click one action from the Action
    Editor window and, keeping it pressed, drag it to the toolbar.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在工具栏中显示工具栏按钮，从操作编辑器窗口中单击一个操作，并保持按住状态，将其拖动到工具栏中。
- en: Save the application with the name `demoToolBars.ui`.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为`demoToolBars.ui`。
- en: 'After dragging the three actions to the toolbar, the toolbar will appear as
    shown here:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 将三个操作拖动到工具栏后，工具栏将显示如下：
- en: '![](assets/314fa220-5b14-4a10-bafb-314fc5d3ce72.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/314fa220-5b14-4a10-bafb-314fc5d3ce72.png)'
- en: 'The `pyuic5` command line utility will convert the `.ui` (XML) file into Python
    code, and the generated code will be named `demoToolBars.py`. You can find the
    `demoToolBars.py` script in the source code bundle of this book. The `iconresource.qrc`
    file that we created must be converted into Python format before we move further.
    The following command line will convert the resource file into a Python script:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyuic5`命令行实用程序将把`.ui`（XML）文件转换为Python代码，生成的代码将被命名为`demoToolBars.py`。您可以在本书的源代码包中找到`demoToolBars.py`脚本。我们创建的`iconresource.qrc`文件必须在我们继续之前转换为Python格式。以下命令行将资源文件转换为Python脚本：'
- en: '[PRE8]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a Python script named `callToolBars.pyw` that imports the code, `demoToolBar.py`,
    to invoke the toolbar and to draw the graphic whose toolbar button is selected
    from the toolbar. The script file will appear as follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`callToolBars.pyw`的Python脚本，导入代码`demoToolBar.py`，以调用工具栏并绘制从工具栏中选择的图形。脚本文件将如下所示：
- en: '[PRE9]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The triggered() signal of the action of each toolbar button is connected to
    the respective method. The triggered() signal of the actionCircle toolbar button
    is connected to the `drawCircle()` method, so whenever the circle toolbar button
    is selected from the toolbar, the `drawCircle()` method will be invoked. Similarly,
    the triggered() signal of `actionRectangle` and `actionLine` are connected to
    the `drawRectangle()` and `drawLine()` methods, respectively. In the `drawCircle()`
    method, a variable `toDraw` is assigned a string, `circle`. The `toDraw` variable
    will be used to determine the graphics to be drawn in the `paintEvent()` method.
    The `toDraw` variable can be assigned any of the three strings, `line`, `circle`,
    or `rectangle`. A conditional branching is applied on the value in the `toDraw`
    variable and accordingly, methods to draw a line, rectangle, or circle will be
    invoked.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工具栏按钮的操作的triggered()信号都连接到相应的方法。actionCircle工具栏按钮的triggered()信号连接到`drawCircle()`方法，因此每当从工具栏中选择圆形工具栏按钮时，将调用`drawCircle()`方法。类似地，`actionRectangle`和`actionLine`的triggered()信号分别连接到`drawRectangle()`和`drawLine()`方法。在`drawCircle()`方法中，一个变量`toDraw`被赋予一个字符串`circle`。`toDraw`变量将用于确定在`paintEvent()`方法中要绘制的图形。`toDraw`变量可以分配任何三个字符串之一，`line`、`circle`或`rectangle`。在`toDraw`变量的值上应用条件分支，相应地，将调用绘制线条、矩形或圆形的方法。
- en: How big a line, circle, or rectangle will be drawn is determined by the mouse
    clicks; the user needs to click the mouse on the form and drag the mouse and release
    it at the location up to which he/she wants to draw the line, circle, or rectangle.
    In other words, the length of the line, width and height of the rectangle, and
    diameter of the circle will be determined by the mouse.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制线条、圆形或矩形的大小由鼠标点击确定；用户需要在窗体上单击鼠标，拖动鼠标并释放它到想要绘制线条、圆形或矩形的位置。换句话说，线条的长度、矩形的宽度和高度以及圆形的直径将由鼠标确定。
- en: Two arrays, `pos1` and `pos2`, are used to store the *x* and *y* coordinates
    of the location where the mouse is clicked and the location where the mouse is
    released, respectively. The *x* and *y* coordinate values are assigned to the
    `pos1` and `pos2` array via two methods, `mousePressEvent()` and `mouseReleaseEvent()`.
    The `mousePressEvent()` method is automatically invoked when the mouse button
    is clicked and the `mouseReleaseEvent()` method is automatically invoked when
    the mouse button is released.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pos1`和`pos2`两个数组来存储鼠标单击位置和鼠标释放位置的*x*和*y*坐标。*x*和*y*坐标值通过`mousePressEvent()`和`mouseReleaseEvent()`两种方法分配给`pos1`和`pos2`数组。当鼠标按钮被单击时，`mousePressEvent()`方法会自动调用，当鼠标按钮释放时，`mouseReleaseEvent()`方法会自动调用。
- en: In the `mouseReleaseEvent()` method, after assigning the *x* and *y* coordinate
    values of the location where the mouse button is released, the `self.update()`
    method is invoked to invoke the `paintEvent()` method. In the `paintEvent()` method,
    branching takes place on the basis of the string assigned to the `toDraw` variable.
    If the `toDraw` variable is assigned the string `line` (by the `drawLine()` method),
    the `drawLine()` method will be invoked of `QPainter` class to draw the line between
    the two mouse locations. Similarly, if the `toDraw` variable is assigned the string
    `circle` (by the `drawCircle()` method), the `drawArc()` method will be invoked
    of the `QPainter` class to draw a circle with a diameter supplied by mouse locations.
    If the `toDraw` variable is assigned the string `rectangle` by the `drawRectangle()`
    method, then the `drawRect()` method will be invoked of the `QPainter` class 
    to draw a rectangle of the width and height supplied by the mouse locations.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mouseReleaseEvent()`方法中，分配鼠标释放的位置的*x*和*y*坐标值后，调用`self.update()`方法来调用`paintEvent()`方法。在`paintEvent()`方法中，基于分配给`toDraw`变量的字符串进行分支。如果`toDraw`变量被分配了字符串`line`（由`drawLine()`方法），则将调用`QPainter`类的`drawLine()`方法来在两个鼠标位置之间绘制线。类似地，如果`toDraw`变量被分配了字符串`circle`（由`drawCircle()`方法），则将调用`QPainter`类的`drawArc()`方法来绘制由鼠标位置提供的直径的圆。如果`toDraw`变量由`drawRectangle()`方法分配了字符串`rectangle`，则将调用`QPainter`类的`drawRect()`方法来绘制由鼠标位置提供的宽度和高度的矩形。
- en: 'On running the application, you will find a toolbar with three toolbar buttons,
    circle, rectangle, and line, as shown in the following screenshot (left). Click
    on the circle toolbar button, then click the mouse button on the form, and, keeping
    the mouse button pressed, drag it to define the diameter of the circle and release
    the mouse button. A circle will be drawn from the location where the mouse button
    is clicked up to the location where the mouse button is released (right):'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您将在工具栏上找到三个工具栏按钮，圆形、矩形和线，如下截图所示（左）。点击圆形工具栏按钮，然后在表单上点击鼠标按钮，并保持鼠标按钮按下，拖动以定义圆的直径，然后释放鼠标按钮。将从鼠标按钮点击的位置到释放鼠标按钮的位置绘制一个圆（右）：
- en: '![](assets/179df12e-a471-46a1-9a71-2178ca4063ce.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/179df12e-a471-46a1-9a71-2178ca4063ce.png)'
- en: 'To draw a rectangle, click on the rectangle tool, click the mouse button at
    a location on the form, and, keeping the mouse button pressed, drag it to define
    the height and width of the rectangle. On releasing the mouse button, a rectangle
    will be drawn between the mouse pressed and mouse released locations (left). Similarly,
    click the line toolbar button and click the mouse button on the form. Keeping
    the mouse button pressed, drag it up to the location where you want the line to
    be drawn. On releasing the mouse button, a line will be drawn between the locations
    where the mouse button is clicked and released (right):'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制一个矩形，点击矩形工具，点击鼠标按钮在表单上的一个位置，并保持鼠标按钮按下，拖动以定义矩形的高度和宽度。释放鼠标按钮时，将在鼠标按下和鼠标释放的位置之间绘制一个矩形（左）。类似地，点击线工具栏按钮，然后在表单上点击鼠标按钮。保持鼠标按钮按下，将其拖动到要绘制线的位置。释放鼠标按钮时，将在鼠标按下和释放的位置之间绘制一条线（右）：
- en: '![](assets/243bd53e-551a-4efa-a6ed-349fc4e2e1a6.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/243bd53e-551a-4efa-a6ed-349fc4e2e1a6.png)'
- en: Plotting a line using Matplotlib
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Matplotlib绘制一条线
- en: In this recipe, we will learn to plot a line using Matplotlib that passes through
    specific *x* and *y* coordinates.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将学习使用Matplotlib绘制通过特定*x*和*y*坐标的线。
- en: Matplotlib is a Python 2D plotting library that makes the complicated task of
    plotting lines, histograms, bar charts, and so on quite easy. This library not
    only plots, but also provides an API that enables the embedding of plots in applications
    too.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib是一个Python 2D绘图库，使绘制线条、直方图、条形图等复杂的任务变得非常容易。该库不仅可以绘制图表，还提供了一个API，可以在应用程序中嵌入图表。
- en: Getting ready
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You can install Matplotlib by using the following statement:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下语句安装Matplotlib：
- en: '[PRE10]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s assume that we want to plot a line that uses the following sets of *x*
    and *y* coordinates:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要绘制一条线，使用以下一组*x*和*y*坐标：
- en: '[PRE11]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: On the *x* axis, the value of `x` begins from `0` and increases towards the
    right and on the *y* axis, the value of `y` is `0` at the bottom and increases
    as we move up. Because the last pair of coordinates is `30`, `60`, the graph will
    have the maximum `x` value of `30` and the maximum `y` value of `60`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在*x*轴上，`x`的值从`0`开始向右增加，在*y*轴上，`y`的值在底部为`0`，向上移动时增加。因为最后一对坐标是`30`，`60`，所以图表的最大`x`值为`30`，最大`y`值为`60`。
- en: 'The following methods of `matplotlib.pyplot` will be used in this recipe:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中将使用`matplotlib.pyplot`的以下方法：
- en: '`title()`: This method is used to set the title of the graph'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title()`: 该方法用于设置图表的标题'
- en: '`xlabel()`: This method is to display the specific text along the *x* axis'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xlabel()`: 该方法用于在*x*轴上显示特定文本'
- en: '`ylabel()`: This method is to display the specific text along the *y* axis'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ylabel()`: 该方法用于在*y*轴上显示特定文本'
- en: '`plot()`: This method is used for plotting at the specified *x* and *y* coordinates'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot()`: 该方法用于在指定的*x*和*y*坐标处绘制图表'
- en: How to do it...
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a Python script with the name `demoPlotLine.py` and write the following
    code in it:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`demoPlotLine.py`的Python脚本，并在其中编写以下代码：
- en: '[PRE12]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You import `matplotlib.pyplot` in the script and name it graph. Using the `title()`
    method, you set the title of the graph. Thereafter, the `xlabel()` and `ylabel()`
    methods are invoked to define the text for the *x* axis and *y* axis, respectively.
    Because we want to plot a line using three sets of *x* and *y* coordinates, two
    arrays are defined by name, *x* and *y*. The values of the *x* and *y* coordinates
    that we want to plot are defined in the two arrays, *x* and *y*, respectively.
    The `plot()` method is invoked and the two *x* and *y* arrays are passed to it
    to plot the line using the three *x* and *y* coordinate values defined in the
    two arrays. The show method is invoked to display the plotting.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您在脚本中导入`matplotlib.pyplot`并将其命名为graph。使用`title()`方法，您设置图表的标题。然后，调用`xlabel()`和`ylabel()`方法来定义*x*轴和*y*轴的文本。因为我们想要使用三组*x*和*y*坐标绘制一条线，所以定义了两个名为*x*和*y*的数组。在这两个数组中分别定义了我们想要绘制的三个*x*和*y*坐标值的值。调用`plot()`方法，并将这两个*x*和*y*数组传递给它，以使用这两个数组中定义的三个*x*和*y*坐标值绘制线。调用show方法显示绘图。
- en: 'On running the application, you find that a line is plotted that passes through
    the specified *x* and *y* coordinates. Also, the graph will show the specified
    title, Plotting a Line !. Besides this, you can see the designated text being
    displayed along the *x* axis and *y* axis as shown in the following screenshot:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您会发现绘制了一条通过指定的*x*和*y*坐标的线。此外，图表将显示指定的标题，绘制一条线！除此之外，您还可以在*x*轴和*y*轴上看到指定的文本，如下截图所示：
- en: '![](assets/b2c02ed5-8d94-4c5c-a52a-bec1ed0b908e.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b2c02ed5-8d94-4c5c-a52a-bec1ed0b908e.png)'
- en: Plotting a bar using Matplotlib
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Matplotlib绘制条形图
- en: In this recipe, we will learn to plot a bar using Matplotlib that compares the
    growth of a business over past three years. You will supply the profit percentage
    in 2016, 2017, and 2018 and the application will show a bar representing the profit
    percentage in the past three years.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将学习使用Matplotlib绘制条形图，比较过去三年业务增长。您将提供2016年、2017年和2018年的利润百分比，应用程序将显示代表过去三年利润百分比的条形图。
- en: Getting ready
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s assume that the profit percentage of the organization over the last
    three years is as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 假设组织过去三年的利润百分比如下：
- en: '**2016**: Profit was 70%'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2016年：利润为70%
- en: '**2017**: Profit was 90%'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2017年：利润为90%
- en: '**2018**: Profit is 80%'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2018年：利润为80%
- en: 'You want to display bars that represent profit percentages and along the *x*
    axis, and you want the years to be displayed: 2016, 2017, and 2018\. Along the
    *y* axis, you want to display the bar that represent the profit percentage. The
    value of `y` on the *y* axis will begin from `0` at the bottom and increases while
    moving toward the top, with the maximum value, `100`, at the top.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 您想显示代表利润百分比的条形，并沿*x*轴显示年份：2016年、2017年和2018年。沿*y*轴，您希望显示代表利润百分比的条形。 *y*轴上的`y`值将从底部的`0`开始增加，向顶部移动时增加，最大值为顶部的`100`。
- en: 'The following methods of `matplotlib.pyplot` will be used in this recipe:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将使用`matplotlib.pyplot`的以下方法：
- en: '`title()`: This method is used to set the title of the graph'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title()`: 用于设置图表的标题'
- en: '`bar()`: To plot the bar from the two supplied arrays; one array will represent
    data for the *x* axis, and the second array will represent data for the *y* axis'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bar()`: 从两个提供的数组绘制条形图；一个数组将代表*x*轴的数据，第二个数组将代表*y*轴的数据'
- en: '`plot()`: This method is used for plotting at the specified *x* and *y* coordinates'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot()`: 用于在指定的*x*和*y*坐标处绘图'
- en: How to do it...
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a Python script with the name `demoPlotBars.py` and write the following
    code in it:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`demoPlotBars.py`的Python脚本，并在其中编写以下代码：
- en: '[PRE13]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: You import `matplotlib.pyplot` in the script and name it graph. You define two
    arrays, years and profit, where the years array will contain the data for 2016,
    2017, and 2018 to represent the years whose profits we want to compare. Similarly,
    the profit array will contain the values that represent the profit percentages
    for the last three years. Thereafter, the `bar()` method is invoked and the two
    arrays, years and profit, are passed to it to display the bar comparing profits
    in the last three years. The `title()` method is invoked to display the title,
    Growth in Business. The `plot()` method is invoked to indicate the maximum `y`
    value along the *y* axis. Finally, the `show()` method is invoked to display the
    bar.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 您在脚本中导入`matplotlib.pyplot`并将其命名为graph。您定义两个数组，years和profit，其中years数组将包含2016年、2017年和2018年的数据，以表示我们想要比较利润的年份。类似地，profit数组将包含代表过去三年利润百分比的值。然后，调用`bar()`方法，并将这两个数组years和profit传递给它，以显示比较过去三年利润的条形图。调用`title()`方法显示标题，业务增长。调用`plot()`方法指示*y*轴上的最大`y`值。最后，调用`show()`方法显示条形图。
- en: 'On running the application, you find that a bar is plotted that displays the
    profits of the organization in the past three years. The *x* axis shows the years
    and the *y* axis shows the profit percentage. Also, the graph will show the specified
    title, Growth in Business as shown in the following screenshot:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您会发现绘制了一根条形图，显示了组织在过去三年的利润。 *x*轴显示年份，*y*轴显示利润百分比。此外，图表将显示指定的标题，业务增长，如下截图所示：
- en: '![](assets/9b933396-c535-4c40-bc3f-d099b006d5db.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9b933396-c535-4c40-bc3f-d099b006d5db.png)'
