- en: Object-Oriented Programming and MVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程和MVC
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Structuring our data with a class
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类来构造我们的数据
- en: Composing widgets to display information
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合小部件以显示信息
- en: Reading records from a CSV file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从CSV文件中读取记录
- en: Persisting data into a SQLite database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据持久化到SQLite数据库中
- en: Refactoring using the MVC pattern
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MVC模式进行重构
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: So far, all our applications held data in memory as local variables or attributes.
    However, we also want to be able to persist information so that it is not lost
    when the program is closed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的应用程序都将数据保存在内存中作为本地变量或属性。但是，我们也希望能够持久化信息，以便在程序关闭时不会丢失。
- en: 'In this chapter, we will discuss how to represent and display this data using
    **object-oriented programming** (**OOP**) principles and applying the **Model-View-Controller**
    (**MVC**) pattern. In short, this pattern proposes three components into which
    we can divide our GUI: a **model** that holds the application data, a **view** that
    displays this data, and a **controller** that handles user events and connects
    the view with the model.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何使用**面向对象编程**（**OOP**）原则和应用**模型-视图-控制器**（**MVC**）模式来表示和显示这些数据。简而言之，这种模式提出了三个组件，我们可以将我们的GUI分为这三个组件：一个**模型**保存应用程序数据，一个**视图**显示这些数据，一个**控制器**处理用户事件并连接视图和模型。
- en: These concepts are related to how we manipulate and persist information, and
    in turn help us to improve the organization of our programs. Most of these recipes
    are not specific to Tkinter, and you can apply the same principles to other GUI
    libraries.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些概念与我们如何操作和持久化信息有关，并帮助我们改进程序的组织。大多数这些示例不特定于Tkinter，您可以将相同的原则应用于其他GUI库。
- en: Structuring our data with a class
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类来构造我们的数据
- en: We will take the example of a contact list application to illustrate how to
    model our data using Python classes. Even though the user interface may offer
    lots of different functionalities, we will need to define what attributes represent
    our domain model—in our case, each individual contact.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以联系人列表应用程序为例，说明如何使用Python类来建模我们的数据。即使用户界面可能提供许多不同的功能，我们仍需要定义哪些属性代表我们的领域模型——在我们的情况下，每个个人联系人。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Every contact will contain the following information:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每个联系人将包含以下信息：
- en: A first and last name, which must not be empty
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名字和姓氏，不能为空
- en: An email address, such as `john.doe@acme.com`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件地址，例如`john.doe@acme.com`
- en: A phone number with the *(123) 4567890* format
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电话号码，格式为*(123) 4567890*
- en: With this abstraction, we can start writing the code of our `Contact` class.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个抽象，我们可以开始编写我们的`Contact`类的代码。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, we define a couple of utility functions that we will reuse to validate
    the fields that are mandatory or must follow a specific format:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义了一对实用函数，我们将重复使用它们来验证必填字段或必须遵循特定格式的字段：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we define our `Contact` class and its `__init__` method. We set here
    all the parameters to the corresponding fields. We also store the compiled regular
    expressions as class attributes since we will use them for every instance to perform
    the field validations:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义我们的`Contact`类及其`__init__`方法。我们在这里设置所有参数对应的字段。我们还将编译的正则表达式存储为类属性，因为我们将在每个实例中使用它们来执行字段验证：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, this definition is not enough to enforce the validations for each
    field. To do so, we use the `@property` decorator, which allow us to wrap access
    to an internal attribute:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个定义还不足以强制执行每个字段的验证。为此，我们使用`@property`装饰器，它允许我们包装对内部属性的访问：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The same technique is applied for `first_name` since it is also mandatory.
    The `email` and `phone` attributes follow a similar approach, using the `matches`
    function with the corresponding regular expression:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的技术也适用于`first_name`，因为它也是必需的。`email`和`phone`属性采用类似的方法，使用`matches`函数和相应的正则表达式：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This script should be saved as `chapter5_01.py`, since we will import it later
    in future recipes with this name.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本应保存为`chapter5_01.py`，因为我们将在以后的示例中使用这个名称导入它。
- en: How it works...
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we mentioned earlier, the `property` descriptor is a mechanism for triggering
    function calls while accessing the attributes of an object.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，`property`描述符是一种在访问对象的属性时触发函数调用的机制。
- en: 'In our example, they wrap access to the internal attributes with a leading
    underscore, like so:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，它们使用下划线包装对内部属性的访问，如下所示：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `property` descriptor is typically used with the `@decorated` syntax—remember
    to always use the same name for the decorated functions:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`property`描述符通常与`@decorated`语法一起使用——请记住始终使用相同的名称来装饰函数：'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There's more...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You may find the complete implementation of our `Contact` class quite verbose
    and repetitive. For each attribute, we will need to assign it in the `__init__`
    method and write its corresponding getter and setter methods.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现我们的`Contact`类的完整实现非常冗长和重复。对于每个属性，我们都需要在`__init__`方法中分配它，并编写其对应的getter和setter方法。
- en: 'Fortunately, we have several alternatives to reduce this amount of boilerplate
    code. The `namedtuple` function from the standard library allows us to create
    lightweight tuple subclasses with named fields:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有几种替代方案来减少这种样板代码的数量。标准库中的`namedtuple`函数允许我们创建具有命名字段的轻量级元组子类：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, we still need to add a workaround to implement the validation of the
    fields. To address this common problem, we can use the `attrs` package available
    from the Python Package Index.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们仍然需要添加一个解决方法来实现字段的验证。为了解决这个常见问题，我们可以使用Python包索引中提供的`attrs`包。
- en: 'As usual, you can install it using the following command line with `pip`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，您可以使用以下命令行和`pip`安装它：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once installed, you can replace all the properties with the `attr.ib` descriptor.
    It also lets you specify a `validator` callback that takes the class instance,
    the attribute to be modified, and the value to be set.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您可以用`attr.ib`描述符替换所有属性。它还允许您指定一个`validator`回调，该回调接受类实例、要修改的属性和要设置的值。
- en: 'With some minor modifications, we can rewrite our `Contact` class, reducing
    the number of lines of code by half:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一些小的修改，我们可以重写我们的`Contact`类，将代码行数减少一半：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When adding an external dependency in your projects, note not only the productivity
    benefits, but also other important aspects, such as documentation, support, and
    licensing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中添加外部依赖时，注意不仅要考虑生产力的好处，还要注意其他重要方面，如文档、支持和许可证。
- en: You can find more information about the `attrs` package on its website at [http://www.attrs.org/en/stable/](http://www.attrs.org/en/stable/).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在其网站[http://www.attrs.org/en/stable/](http://www.attrs.org/en/stable/)上找到有关`attrs`包的更多信息。
- en: Composing widgets to display information
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合小部件以显示信息
- en: It is difficult to build large applications if all the code is contained in
    a single class. By splitting the GUI code into specific classes, we can modularize
    the structure of our program and create widgets with well-defined purposes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有的代码都包含在一个类中，构建大型应用程序将会很困难。通过将GUI代码拆分为特定的类，我们可以模块化程序的结构，并创建具有明确定义目的的小部件。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Apart from importing the Tkinter package, we will import the `Contact` class
    from the preceding recipe:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了导入Tkinter包，我们还将从前面的配方中导入`Contact`类：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Verify that the `chapter5_01.py` file is in the same directory; otherwise, this
    `import-from` statement will raise `ImportError`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 验证`chapter5_01.py`文件是否在相同的目录中；否则，这个`import-from`语句将引发`ImportError`。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'We will create a scrollable list that will show all contacts. To represent
    each item in the list as a string, we will display the contact''s last and first
    names:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个可滚动的列表，显示所有联系人。为了将列表中的每个项目表示为一个字符串，我们将显示联系人的姓和名：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To display and allow us to edit the details of a contact, we will also create
    a specific form. We will take the `LabelFrame` widget as a base class, with a
    `Label` and an `Entry` for each field:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示并允许我们编辑联系人的详细信息，我们还将创建一个特定的表单。我们将以`LabelFrame`小部件作为基类，为每个字段添加一个`Label`和一个`Entry`：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'An important detail of the `ContactList` class is that it exposes the possibility
    to attach a callback to the double-click event. It also passes the clicked index
    as an argument to this function. We do this because we want to hide the implementation
    details of the underlying `Listbox`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContactList`类的一个重要细节是，它公开了将回调附加到双击事件的可能性。它还将点击的索引作为参数传递给这个函数。我们这样做是因为我们希望隐藏底层`Listbox`的实现细节：'
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`ContactForm` also offers an abstraction to instantiate a new contact from
    the values input in the entries:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContactForm`还提供了一个抽象，用于从输入的值实例化一个新的联系人：'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Since we included field validations in our `Contact` class, instantiating a
    new contact might raise a `ValueError` if an entry contains an invalid value.
    To notify the user of this, we show an error dialog with the error message.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在`Contact`类中包含了字段验证，实例化一个新的联系人可能会引发`ValueError`，如果一个条目包含无效值。为了通知用户，我们会显示一个带有错误消息的错误对话框。
- en: Reading records from a CSV file
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从CSV文件中读取记录
- en: 'As a first approach to loading read-only data into our application, we will
    use a **comma-separated values** (**CSV**) file. This format tabulates data in
    plain text files, where each file corresponds to the fields of a record, separated
    by commas, like so:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为将只读数据加载到我们的应用程序的第一种方法，我们将使用**逗号分隔值**（**CSV**）文件。这种格式将数据制表在纯文本文件中，其中每个文件对应于记录的字段，用逗号分隔，如下所示：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This solution is easy to implement for simple scenarios, especially if the text
    fields do not contain line breaks. We will use the `csv` module from the standard
    library, and once the records are loaded into our application, we will populate
    the widgets developed in the previous recipes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种解决方案对于简单的场景很容易实现，特别是如果文本字段不包含换行符。我们将使用标准库中的`csv`模块，一旦记录加载到我们的应用程序中，我们将填充在前面的配方中开发的小部件。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will assemble the custom widgets we created in the previous recipe. Once
    the records are loaded from the CSV file, our application will look as shown in
    the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将组装在前面的配方中创建的自定义小部件。一旦从CSV文件加载记录，我们的应用程序将如下截图所示：
- en: '![](images/4c1f3853-759d-44a7-8bd8-7b1302be4fae.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](images/4c1f3853-759d-44a7-8bd8-7b1302be4fae.png)'
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Apart from importing the `Contact` class, we will also import the `ContactForm`
    and `ContactList` widgets:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 除了导入`Contact`类，我们还将导入`ContactForm`和`ContactList`小部件：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `load_contacts` function is responsible for reading the CSV file and transforming
    all the records into a list of `Contact` instances.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`load_contacts`函数负责读取CSV文件，并将所有记录转换为`Contact`实例的列表。'
- en: 'Each row read by `csv.reader` is returned as a tuple of strings, created by
    splitting the corresponding line using the comma delimiter. Since this tuple uses
    the same order as the parameters defined in the `__init__` method of the `Contact`
    class, we can simply unpack it with the `*` operator. This code can be summarized
    in a single line using a list comprehension, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`csv.reader`读取的每一行都作为一个字符串元组返回，通过使用逗号分隔符拆分相应的行创建。由于这个元组使用与`Contact`类的`__init__`方法中定义的参数相同的顺序，我们可以简单地使用`*`运算符解包它。这段代码可以用列表推导式总结为一行，如下所示：'
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There is no problem in returning the list within the `with` block, since the
    context manager automatically closes the file when the method execution finishes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在`with`块中返回列表没有问题，因为上下文管理器在方法执行完成时会自动关闭文件。
- en: Persisting data into a SQLite database
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据持久化到SQLite数据库
- en: Since we want to be able to persist changes to the data through our application,
    we must implement a solution that serves both for reading and writing operations.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望能够通过我们的应用程序持久保存数据的更改，我们必须实现一个既用于读取又用于写入操作的解决方案。
- en: We could write all the records to the same plain text file we read them from
    after every modification, but this may be an ineffective solution when updating
    some records individually.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在每次修改后将所有记录写入我们从中读取的同一纯文本文件，但是当单独更新一些记录时，这可能是一种低效的解决方案。
- en: Since all the information is going to be stored locally, we can use a SQLite
    database to persist our application data. The `sqlite3` module is a part of the
    standard library, so you do not need any additional dependencies to start using
    it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有信息都将存储在本地，我们可以使用SQLite数据库来持久保存我们的应用程序数据。`sqlite3`模块是标准库的一部分，因此您无需任何额外的依赖项即可开始使用它。
- en: This recipe does not pretend to be a comprehensive guide to SQLite, but a practical
    introduction to integrate it into your Tkinter applications.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例并不打算成为SQLite的全面指南，而是一个实际的介绍，将其集成到您的Tkinter应用程序中。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before using the database in our application, we need to create and populate
    it with some initial data. All our contacts are stored in the CSV file, so we
    will use a migration script to read all the records and insert them into the database.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中使用数据库之前，我们需要创建并填充它一些初始数据。我们所有的联系人都存储在CSV文件中，因此我们将使用迁移脚本读取所有记录并将它们插入数据库。
- en: First, we create a connection to the `contacts.db` file, where our data will
    be stored. Then, we create the `contacts` table with the `last_name`, `first_name`,
    `email`, and `phone` text fields.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建到`contacts.db`文件的连接，我们的数据将存储在其中。然后，我们使用`last_name`、`first_name`、`email`和`phone`文本字段创建`contacts`表。
- en: 'Since `csv.reader` returns an iterable of tuples whose fields follow the same
    order that we have defined in our `CREATE TABLE` statement, we can pass it directly
    to the `executemany` method. It will execute the `INSERT` statement for each tuple,
    replacing the question marks with the actual values of each record:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`csv.reader`返回一个元组的可迭代对象，其字段遵循我们在`CREATE TABLE`语句中定义的相同顺序，我们可以直接将其传递给`executemany`方法。它将为每个元组执行`INSERT`语句，用实际值替换问号：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `with` statement automatically commits the transaction and closes both the
    file and the SQLite connection at the end of the execution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`with`语句会自动提交事务，并在执行结束时关闭文件和SQLite连接。'
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To add new contacts to our database, we will define a `Toplevel` subclass that
    reuses `ContactForm` to instantiate a new contact:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要将新联系人添加到我们的数据库，我们将定义一个`Toplevel`子类，它重用`ContactForm`来实例化一个新联系人：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following top-level window will be displayed on top of the main window
    and returns the focus once the dialog is confirmed or closed:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下顶级窗口将显示在主窗口之上，并在对话框确认或关闭后返回焦点：
- en: '![](images/a86cb45d-2ed0-4f5f-ae76-d9a6e4db65d9.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](images/a86cb45d-2ed0-4f5f-ae76-d9a6e4db65d9.png)'
- en: 'We will also extend our `ContactForm` class with two additional buttons—one
    for updating the contact information, and another one for deleting the selected
    contact:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将扩展我们的`ContactForm`类，增加两个额外的按钮——一个用于更新联系人信息，另一个用于删除所选联系人：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `bind_save` and `bind_delete` methods allow us to attach a callback to the
    corresponding button's `command`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`bind_save`和`bind_delete`方法允许我们将回调附加到相应按钮的`command`上。'
- en: 'To integrate all these changes, we will add the following code to our `App`
    class:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要整合所有这些更改，我们将向我们的`App`类添加以下代码：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We also need to modify the `load_contacts` method to create the contacts from
    a query result:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要修改`load_contacts`方法以从查询结果创建联系人：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To add a contact to the list, we will instantiate a `NewContact` dialog and
    call its `show` method to get the details of the new contact. If these values
    are valid, we will store them in a tuple in the same order as they are specified
    in our `INSERT` statement:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要将联系人添加到列表中，我们将实例化一个`NewContact`对话框，并调用其`show`方法以获取新联系人的详细信息。如果这些值有效，我们将按照与我们的`INSERT`语句中指定的相同顺序将它们存储在一个元组中：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once a contact is selected, we can update its details by retrieving the current
    form values. If they are valid, we execute an `UPDATE` statement to set the columns
    of the record with the specified `rowid`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 选择联系人后，我们可以通过检索当前表单值来更新其详细信息。如果它们有效，我们执行`UPDATE`语句以设置具有指定`rowid`的记录的列。
- en: 'Since the fields of this statement are in the same order as the `INSERT` statement,
    we reuse the `to_values` method to create a tuple from the contact instance—the
    only difference is that we have to append the substitution parameter for `rowid`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此语句的字段与`INSERT`语句的顺序相同，我们重用`to_values`方法从联系人实例创建一个元组——唯一的区别是我们必须附加`rowid`的替换参数：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To delete the selected contact, we get its `rowid` to replace it in our `DELETE`
    statement. Once the transaction is committed, the contact is removed from the
    GUI by clearing the form and deleting it from the list. The `selection` attribute
    is also set to `None` to avoid performing operations over an invalid selection:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除所选联系人，我们获取其`rowid`以替换我们的`DELETE`语句。一旦事务提交，联系人将从GUI中清除表单并从列表中删除。`selection`属性也设置为`None`，以避免对无效选择执行操作：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we will wrap the code to initialize our application in a `main` function:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将包装代码以初始化我们的应用程序在一个`main`函数中：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With all these changes, our complete application will look as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有了所有这些更改，我们完整的应用程序将如下所示：
- en: '![](images/54018c9c-4b84-4521-b888-b9ca33f899e4.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](images/54018c9c-4b84-4521-b888-b9ca33f899e4.png)'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This type of application is referred to using the **CRUD** acronym, which stands
    for **Create, Read, Update, and Delete**, and is easily mapped into the SQL statements
    `INSERT`, `SELECT`, `UPDATE`, and `DELETE`. We will now take a look at how to
    implement each operation using the `sqlite3.Connection` class.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的应用程序被称为**CRUD**首字母缩写，代表**创建、读取、更新和删除**，并且很容易映射到SQL语句`INSERT`、`SELECT`、`UPDATE`和`DELETE`。我们现在将看一下如何使用`sqlite3.Connection`类来实现每个操作。
- en: '`INSERT` statements add new records to a table, specifying the column names
    with the corresponding values. If you omit the column names, the column order
    will be used.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`INSERT`语句向表中添加新记录，指定列名和相应的值。如果省略列名，将使用列顺序。'
- en: 'When you create a table in SQLite, it adds, by default, a column called `rowid` and
    automatically assigns a unique value to identify each row. Since we usually need
    it for subsequent operations, we retrieve it with the `lastrowid` attribute available
    in the `Cursor` class:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在SQLite中创建一个表时，默认情况下会添加一个名为`rowid`的列，并自动分配一个唯一值来标识每一行。由于我们通常需要它进行后续操作，我们使用`Cursor`类中可用的`lastrowid`属性来检索它：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`SELECT` statements retrieve the values of one or more columns from the records
    of a table. Optionally, we can add a `WHERE` clause to filter the records to be
    retrieved. This is useful to efficiently implement searches and pagination, but
    we will omit this functionality in our sample application:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`SELECT`语句从表的记录中检索一个或多个列的值。可选地，我们可以添加一个`WHERE`子句来过滤要检索的记录。这对于有效地实现搜索和分页非常有用，但在我们的示例应用程序中，我们将忽略这个功能：'
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`UPDATE` statements modify the value of one or more columns from the records
    in a table. Typically, we add a `WHERE` clause to update only the rows that match
    the given criteria—here, we could use `rowid` if we want to update a specific
    record:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`UPDATE`语句修改表中记录的一个或多个列的值。通常，我们添加一个`WHERE`子句，只更新符合给定条件的行 - 在这里，如果我们想要更新特定记录，我们可以使用`rowid`：'
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, `DELETE` statements remove one or more records from a table. It is
    even more important to add the `WHERE` clause in these statements, because if
    we omit it, the statement will delete all the rows in the table:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`DELETE`语句从表中删除一个或多个记录。在这些语句中添加`WHERE`子句更加重要，因为如果我们省略它，该语句将删除表中的所有行：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: See also
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Composing widgets to display information* recipe
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*组合小部件以显示信息*食谱'
- en: Refactoring using the MVC pattern
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MVC模式进行重构
- en: Now that we have developed the complete functionality of our application, we
    can spot some problems in our current design. For instance, the `App` class has
    several responsibilities, from instantiating Tkinter widgets to executing SQL
    statements.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开发了应用程序的完整功能，我们可以发现当前设计中存在一些问题。例如，`App`类有多个职责，从实例化Tkinter小部件到执行SQL语句。
- en: Although it seems easy and straightforward to write methods that perform an
    operation from end to end, this approach leads to code bases that are harder to
    maintain. We can detect this flaw by anticipating possible architectural changes,
    such as replacing our relational database with a REST backend accessed via HTTP.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管编写从头到尾执行操作的方法似乎很容易和直接，但这种方法会导致更难以维护的代码库。我们可以通过预期可能的架构更改来检测这种缺陷，例如用通过HTTP访问的REST后端替换我们的关系数据库。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start by defining the MVC pattern and how it maps to the different parts
    of the application we built in our previous recipe.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先定义MVC模式以及它如何映射到我们在上一篇文章中构建的应用程序的不同部分。
- en: 'This pattern divides our application into three components that encapsulate
    a single responsibility, forming the MVC triad:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式将我们的应用程序分为三个组件，每个组件封装一个单一的责任，形成MVC三合一：
- en: The **model** represents the domain data and contains the business rules to
    interact with it. In our example, it is the `Contact` class and the SQLite-specific
    code.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**表示领域数据，并包含与之交互的业务规则。在我们的示例中，它是`Contact`类和特定于SQLite的代码。'
- en: The **view** is a graphical representation of the model data. In our case, it
    is made by the Tkinter widgets that compose the GUI.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**是模型数据的图形表示。在我们的情况下，它由组成GUI的Tkinter小部件组成。'
- en: The **controller** connects the view and the model by receiving user input and
    updating the model data. This corresponds to our callbacks and event handlers
    and the attributes needed.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**通过接收用户输入并更新模型数据来连接视图和模型。这对应于我们的回调和事件处理程序以及所需的属性。'
- en: We will refactor our application to achieve this separation of concerns. You
    will note that the interactions between components require additional code, but
    they also help us to define their boundaries.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重构我们的应用程序以实现这种关注点的分离。您会注意到组件之间的交互需要额外的代码，但它们也帮助我们定义它们的边界。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Firstly, we extract all the pieces of code that interact with the database
    into a separate class. This will allow us to hide the implementations details
    of our persistence layer, only exposing the four necessary methods, `get_contacts`,
    `add_contact`, `update_contact`, and `delete_contact`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将所有与数据库交互的代码片段提取到一个单独的类中。这将允许我们隐藏持久层的实现细节，只暴露四个必要的方法，`get_contacts`，`add_contact`，`update_contact`和`delete_contact`：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This, alongside the `Contact` class, will compose our model.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个，连同`Contact`类，将组成我们的模型。
- en: 'Now, our view will simply contain the sufficient code to display the GUI and
    the methods to let the controller update it. We will also rename the class to
    `ContactsView` to better express its purpose:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的视图将只包含足够的代码来显示GUI和让控制器更新它的方法。我们还将将类重命名为`ContactsView`，以更好地表达其目的。
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that user input is handled by the controller, so we added a `set_ctrl`
    method to connect it to the Tkinter callbacks.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，用户输入由控制器处理，因此我们添加了一个`set_ctrl`方法来将其连接到Tkinter回调。
- en: 'Our `ContactsController` class will now contain all code missing from our initial
    `App` class, that is, the interactions between interface and persistence with
    the `selection` and `contacts` attributes:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`ContactsController`类现在将包含我们初始的`App`类中缺失的所有代码，也就是界面和持久性之间的交互，具有`selection`和`contacts`属性：
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We will create a `__main__.py` script that will allow us not only to Bootstrap
    our application, but also to be able to launch it from a zipped file or with the
    name of the containing directory:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`__main__.py`脚本，不仅允许我们引导我们的应用程序，还可以从压缩文件或包含目录名称启动它：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The original MVC implementation was introduced in the Smalltalk programming
    language, and it is represented by the following diagram:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的MVC实现是在Smalltalk编程语言中引入的，并且由以下图表表示：
- en: '![](images/994bfa05-b8eb-48a8-9870-dc89e1d1df40.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](images/994bfa05-b8eb-48a8-9870-dc89e1d1df40.jpg)'
- en: In the preceding diagram, we can see that the view passes user events to the
    controller, which in turn updates the model. To propagate these changes to the
    view, the model implements the **observer pattern**. This means that views subscribed
    to the model get notified when an update occurs, so they can query the model state
    and change the displayed data.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们可以看到视图将用户事件传递给控制器，控制器再更新模型。为了将这些更改传播到视图，模型实现了**观察者模式**。这意味着订阅模型的视图在更新发生时会收到通知，因此它们可以查询模型状态并更改显示的数据。
- en: 'There is a variation of this design where there is no communication between
    the view and the model. Instead, changes to the view are made by the controller
    after it updates the model:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种设计的变体，视图和模型之间没有通信。相反，控制器在更新模型后，通过更改视图来进行视图的更改。
- en: '![](images/162786bf-3623-4440-bebb-4fd75fd9d71b.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](images/162786bf-3623-4440-bebb-4fd75fd9d71b.jpg)'
- en: This approach is known as **passive model**, and it is the most common approach
    for modern MVC implementations—especially for web frameworks. We used this variation
    in our example because it simplifies our `ContactsRepository` and does not require
    major modifications to our `ContactsController` class.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法被称为**被动模型**，它是现代MVC实现中最常见的方法，特别是对于Web框架来说。我们在示例中使用了这种变体，因为它简化了我们的`ContactsRepository`，并且不需要对我们的`ContactsController`类进行重大修改。
- en: There's more...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You might have noted that update and delete operations work thanks to the `rowid`
    field, for instance, in the `update_contact` method from the `ContactsController`
    class:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，更新和删除操作是通过`rowid`字段实现的，例如，在`ContactsController`类的`update_contact`方法中：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Since this is an implementation detail for our SQLite database, this should
    be hidden from the rest of our components.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是我们SQLite数据库的实现细节，这应该对我们的其他组件隐藏起来。
- en: A solution would be to add another field to the `Contact` class with a name
    such as `id` or `contact_id`—note that `id` is also a Python built-in function
    and some editors might incorrectly highlight it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个解决方案是向`Contact`类添加另一个字段，例如`id`或`contact_id`，注意`id`也是Python的内置函数，一些编辑器可能会错误地将其标记出来。
- en: Then, we can assume this field is part of our domain data as a unique identifier
    and leave the implementation details of how it is generated to the model.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以假设这个字段是我们领域数据的一部分，作为一个唯一标识符，并将它的生成实现细节留给模型。
