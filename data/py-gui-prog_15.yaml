- en: Understanding OOP Concepts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解OOP概念
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Object-oriented programming
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: Using classes in GUI
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GUI中使用类
- en: Using single inheritance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单一继承
- en: Using multilevel inheritance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多层继承
- en: Using multiple inheritance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多重继承
- en: Object-oriented programming
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: Python supports **object-oriented programming** (**OOP**). OOP supports reusability;
    that is, code that was written earlier can be reused for making large applications,
    instead of starting from scratch. The term object in OOP refers to a variable
    or instance of a class, where a class is a template or blueprint of a structure
    that consists of methods and variables. The variables in the class are called
    **data members**, and the methods are called **member functions**. When instances
    or objects of a class are made, the objects automatically get access to data members
    and methods.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持**面向对象编程**（**OOP**）。OOP支持可重用性；也就是说，之前编写的代码可以被重用来制作大型应用程序，而不是从头开始。OOP中的对象指的是类的变量或实例，其中类是一个结构的模板或蓝图，包括方法和变量。类中的变量称为**数据成员**，方法称为**成员函数**。当类的实例或对象被创建时，对象会自动获得对数据成员和方法的访问。
- en: Creating a class
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个类
- en: 'The `class` statement is used for creating a class. The following is the syntax
    for creating a class:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`class`语句用于创建一个类。以下是创建类的语法：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `class_name` is an identifier to identify the class. After the `class`
    statement comes the statements that make up the body of the class. The `class`
    body consists of different methods and variables to be defined in that class.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`class_name`是一个标识符，用于标识类。在`class`语句之后是构成类主体的语句。`class`主体包括要在该类中定义的不同方法和变量。
- en: 'You can make an individual class or a class that inherits another class. The
    class that is being inherited is called the **base class**. The `base_classes` parameter
    after `class_name` in the syntax represents all the base classes that this class
    will be inheriting. If there is more than one base class, then they need to be
    separated by commas. The class that is being inherited is called the **super class**
    or **base class**, and the inheriting class is called a **derived class** or **subclass**.
    The derived class can use the methods and variables of the base class, and hence
    implements reusability:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个独立的类或继承另一个类。被继承的类称为**基类**。在语法中，`class_name`后的`base_classes`参数表示该类将继承的所有基类。如果有多个基类，则它们需要用逗号分隔。被继承的类称为**超类**或**基类**，继承的类称为**派生类**或**子类**。派生类可以使用基类的方法和变量，从而实现可重用性：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, `Student` is a class that contains an attribute called `name`
    that is initialized to null.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`Student`是一个包含名为`name`的属性的类，该属性初始化为null。
- en: Using the built-in class attributes
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内置类属性
- en: 'A `class` statement automatically assigns certain values to certain fixed class
    attributes. Those class attributes can be used to fetch information about the
    class. The list of class attributes are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`class`语句会自动为某些固定的类属性分配特定的值。这些类属性可以用于获取有关类的信息。类属性的列表如下：'
- en: '`__name__`: This attribute represents the class name used in the `class` statement'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__name__`：表示`class`语句中使用的类名'
- en: '`__bases__`: This attribute represents the base class names mentioned in the
    `class` statement'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__bases__`：表示`class`语句中提到的基类名称'
- en: '`__dict__`: The dictionary object that represents other class attributes'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__dict__`：表示其他类属性的字典对象'
- en: '`__module__`: This attribute represents the module name in which the class
    is defined'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__module__`：表示定义类的模块名称'
- en: 'A class can have any number of methods, and each method can have any number
    of parameters. One mandatory first parameter is always defined in a method, and
    that first parameter is usually named `self`  (though you can give any name to
    this parameter). The `self` parameter refers to the instance of the class that
    calls the method. The syntax for defining methods in a class is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类可以有任意数量的方法，每个方法可以有任意数量的参数。方法中始终定义了一个强制的第一个参数，通常将该第一个参数命名为`self`（尽管您可以为此参数指定任何名称）。`self`参数指的是调用方法的类的实例。在类中定义方法的语法如下：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A class can have the following two types of data member:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类可以有以下两种类型的数据成员：
- en: '**Class variable**: These are the variables that are shareable by all instances,
    and changes made to these variables by any one instance can be seen by other instances
    too. These are the data members that are defined outside of any method of the
    class.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类变量**：这些是所有实例可共享的变量，任何一个实例对这些变量所做的更改也可以被其他实例看到。这些是在类的任何方法之外定义的数据成员。'
- en: '**Instance variable**: These variables, which are defined inside a method,
    only belong to the current instance of the object and are known as **instance
    variables**. Changes made to instance variables by any instance are limited to
    that particular instance and don''t affect the instance variables of other instances.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例变量**：这些变量仅在方法内部定义，仅属于对象的当前实例，并且被称为**实例变量**。任何实例对实例变量所做的更改仅限于该特定实例，并不影响其他实例的实例变量。'
- en: Let's see how to create an instance method and how it can be used to access
    class variables.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个实例方法以及如何使用它来访问类变量。
- en: Accessing class variables in instance methods
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在实例方法中访问类变量
- en: 'To access class variables, the class variables must be prefixed with the class
    name. For example, to access the `name` class variable of the `Student` class,
    you need to access it as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问类变量，必须使用类名作为前缀。例如，要访问`Student`类的`name`类变量，需要按以下方式访问：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see that the `name` class variable is prefixed with the `Student` class
    name.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，`name`类变量以`Student`类名作为前缀。
- en: Instances
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例
- en: 'To use the variables and methods of any class, we need to create its objects
    or instances. An instance of a class gets its own copy of variables and methods.
    This means the variable of one instance will not interfere with the variable of
    another instance. We can create as many instances of a class as desired. To create
    an instance of a class, you need to write the class name followed by arguments
    (if any). For example, the following statement creates an instance of the `Student` class
    with the name `studentObj`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用任何类的变量和方法，我们需要创建其对象或实例。类的实例会得到自己的变量和方法的副本。这意味着一个实例的变量不会干扰另一个实例的变量。我们可以创建任意数量的类的实例。要创建类的实例，需要写类名，后跟参数（如果有）。例如，以下语句创建了一个名为`studentObj`的`Student`类的实例：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can create any number of instances of the `Student` class. For example,
    the following line creates another instance of the `Student` class:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建任意数量的`Student`类的实例。例如，以下行创建了`Student`类的另一个实例：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, the instance can access the class attribute and method of the class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，实例可以访问类的属性和方法。
- en: You need to specify `self` explicitly when defining the method. While calling
    the method, `self` is not mandatory because Python adds it automatically.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义方法时需要明确指定`self`。在调用方法时，`self`不是必需的，因为Python会自动添加它。
- en: To define the variables of a class, we get help from the `__init__()` method.
    The `__init__()` method is like a constructor in traditional OOP languages and
    is the first method to be executed after the creation of an instance. It is used
    for initializing the variables of the class. Depending on how the `__init__()`
    method is defined in the class, that is, with or without parameters, the arguments
    may or may not be passed to the `__init__()` method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义类的变量，我们需要使用`__init__()`方法的帮助。`__init__()`方法类似于传统面向对象编程语言中的构造函数，并且是在创建实例后首先执行的方法。它用于初始化类的变量。根据类中如何定义`__init__()`方法，即是否带有参数，参数可能会传递给`__init__()`方法，也可能不会。
- en: 'As mentioned earlier, the first argument of every class method is a class instance
    that is called `self`. In the `__init__()` method, `self` refers to the newly
    created instance:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，每个类方法的第一个参数是一个称为`self`的类实例。在`__init__()`方法中，`self`指的是新创建的实例：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding example, the `studentObj` instance is the instance of the `Student` class being
    created, and its class variable will be initialized to the `David` string.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`studentObj`实例是正在创建的`Student`类的实例，并且其类变量将被初始化为`David`字符串。
- en: 'Even arguments can be passed to the `__init__()` method, as shown in the following
    example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以将参数传递给`__init__()`方法，如下例所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, the `studentObj` instance is created and the `David` string
    is passed to it. The string will be assigned to the `name` parameter defined in
    the `__init__()` method, which, in turn, will be used to initialize the class
    variable, `name`, of the instance. Remember, the `__init__()` method must not
    return a value.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，创建了`studentObj`实例并将`David`字符串传递给它。该字符串将被分配给`__init__()`方法中定义的`name`参数，然后用于初始化实例的类变量`name`。请记住，`__init__()`方法不能返回值。
- en: 'Like the class variables, the methods of the class can be accessed by the instance
    of the class, followed by the method name, with a period (`.`) in between. Assuming
    there is a `printName()` method in the `Student` class, it can be accessed via
    the `studentObj` instance with the following statement:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与类变量一样，可以通过类的实例访问类的方法，后跟方法名，中间用句点(`.`)分隔。假设`Student`类中有一个`printName()`方法，可以通过以下语句通过`studentObj`实例访问：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using classes in GUI
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GUI中使用类
- en: The data received from the user through the GUI can be directly processed by
    making use of simple variables, and the processed data can be displayed through
    variables only. But to keep the data in a structured format and get the benefits
    of OOP, we will learn to keep data in the form of classes. That is, the data accessed
    by the user through the GUI can be assigned to the class variables, processed,
    and displayed through class methods.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过GUI从用户接收的数据可以直接通过简单变量进行处理，并且处理后的数据只能通过变量显示。但是，为了保持数据的结构化格式并获得面向对象编程的好处，我们将学习将数据保存在类的形式中。也就是说，用户通过GUI访问的数据可以分配给类变量，通过类方法进行处理和显示。
- en: Let's create an application that will prompt the user to enter a name and, on
    clicking the push button after entering a name, the application will display a
    hello message along with the entered name. The name entered by the user will be
    assigned to a class variable and the hello message will also be generated by invoking
    the class method of the class.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个应用程序，提示用户输入姓名，并在输入姓名后点击推送按钮时，应用程序将显示一个hello消息以及输入的姓名。用户输入的姓名将被分配给一个类变量，并且hello消息也将通过调用类的类方法生成。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The focus of this recipe is to understand how the data entered by the user
    is assigned to the class variable, and how the message displayed can be accessed
    via class methods. Let''s create a new application based on the Dialog without
    Buttons template and follow these steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的重点是理解用户输入的数据如何分配给类变量，以及如何通过类方法访问显示的消息。让我们基于没有按钮的对话框模板创建一个新应用程序，并按照以下步骤进行操作：
- en: Drag and drop two Label widgets, one Line Edit, and one Push Button widget onto
    the form.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个标签小部件、一个行编辑和一个推送按钮小部件拖放到表单上。
- en: Set the text property of the first Label widget to `Enter your name`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个标签小部件的文本属性设置为`输入您的姓名`。
- en: Let's not change the text property of the second Label widget and keep its text
    property to its default value of TextLabel. This is because its text property
    will be set through code to display the hello message.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不要更改第二个标签小部件的文本属性，并将其文本属性保持为默认值`TextLabel`。这是因为它的文本属性将通过代码设置以显示hello消息。
- en: Set the text property of the Push Button widget to `Click`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将推送按钮小部件的文本属性设置为`Click`。
- en: Set the objectName property of the Line Edit widget to `lineEditName`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LineEdit小部件的objectName属性设置为`lineEditName`。
- en: Set the objectName property of the Label widget to `labelResponse`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Label小部件的objectName属性设置为`labelResponse`。
- en: Set the objectName property of the Push Button widget to `ButtonClickMe`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的objectName属性设置为`ButtonClickMe`。
- en: 'Save the application with the name `LineEditClass.ui`. The application will
    appear as shown in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序保存为名称为`LineEditClass.ui`的应用程序。应用程序将显示如下屏幕截图所示：
- en: '![](assets/8899b4c1-7dfa-4483-8ceb-5e17f7e60834.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8899b4c1-7dfa-4483-8ceb-5e17f7e60834.png)'
- en: The user interface created with Qt Designer is stored in a `.ui` file, which
    is an XML file and needs to be converted to Python code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Qt Designer创建的用户界面存储在`.ui`文件中，这是一个XML文件，需要转换为Python代码。
- en: 'To do the conversion, you need to open a Command Prompt window, navigate to
    the folder where the file is saved, and issue the following command line:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进行转换，您需要打开命令提示符窗口，导航到保存文件的文件夹，并发出以下命令行：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The generated Python script,  `LineEditClass.py`, can be seen in the source
    code bundle of this book.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在本书的源代码包中看到生成的Python脚本`LineEditClass.py`。
- en: Treat the preceding code as a header file, and import it into the file from
    which you will invoke its user interface design.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将上述代码视为头文件，并将其导入到将调用其用户界面设计的文件中。
- en: 'Create another Python file with the name `callLineEditClass.pyw` and import
    the `LineEditClass.py` code into it:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callLineEditClass.pyw`的Python文件，并将`LineEditClass.py`代码导入其中：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `LineEditClass.py` file, a class with the name of the top-level object
    is created with `Ui_ prepended`. That is, for the top-level object, `Dialog`,
    the `Ui_Dialog` class is created and stores the interface elements of our widget.
    That class has two methods, `setupUi()` and `retranslateUi()`. The `setupUi()`
    method creates the widgets that are used in defining the user interface in Qt
    Designer. Also, the properties of the widgets are set in this method. The `setupUi()`
    method takes a single argument, which is the top-level widget of the application,
    an instance of `QDialog`. The `retranslateUi()` method translates the interface.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LineEditClass.py`文件中，创建了一个名为顶级对象的类，其名称为`Ui_ prepended`。也就是说，对于顶级对象`Dialog`，创建了`Ui_Dialog`类，并存储了小部件的接口元素。该类有两个方法，`setupUi()`和`retranslateUi()`。`setupUi()`方法创建了在Qt
    Designer中定义用户界面时使用的小部件。此方法还设置了小部件的属性。`setupUi()`方法接受一个参数，即应用程序的顶级小部件，即`QDialog`的实例。`retranslateUi()`方法翻译了界面。
- en: 'In the `callLineEditClass.py` file, you can see that a class is defined called
    `Student`. The `Student` class includes a class variable called `name` and the
    following two methods:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`callLineEditClass.py`文件中，可以看到定义了一个名为`Student`的类。`Student`类包括一个名为`name`的类变量和以下两个方法：
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and a `name` parameter, which will be used to initialize the `name` class variable'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和一个`name`参数，该参数将用于初始化`name`类变量'
- en: '`printName`: This method simply returns the value in the name class variable'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`printName`: 此方法简单地返回名称类变量中的值'
- en: The `clicked()` event of the Push Button widget is connected to the `dispmessage()`
    method; after entering a name in the Line Edit widget, when the user clicks the
    push button, the `dispmessage()` method will be invoked. The `dispmessage()` method
    defines the object of the `Student` class by name, `studentObj`, and passes the
    name entered by the user in the Line Edit widget as a parameter. Hence, the constructor
    of the `Student` class will be invoked and the name entered by the user is passed
    to the constructor. The name entered in the Line Edit widget will be assigned
    to the class variable, `name`. After that, the Label widget called `labelResponse`
    is set to display the string, `Hello`, and the `printName` method of the `Student`
    class is invoked, which returns the string assigned to the name variable.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将Push Button小部件的`clicked()`事件连接到`dispmessage()`方法；在LineEdit小部件中输入名称后，当用户单击按钮时，将调用`dispmessage()`方法。`dispmessage()`方法通过名称定义了`Student`类的对象，`studentObj`，并将用户在LineEdit小部件中输入的名称作为参数传递。因此，将调用`Student`类的构造函数，并将用户输入的名称传递给构造函数。在LineEdit小部件中输入的名称将被分配给类变量`name`。之后，名为`labelResponse`的Label小部件将设置为显示字符串`Hello`，并调用`Student`类的`printName`方法，该方法返回分配给名称变量的字符串。
- en: 'Hence, on clicking the push button, the Label widget will be set to display
    the string, `Hello`, followed by the name entered by the user in the Line Edit
    box, as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，单击按钮后，Label小部件将设置为显示字符串`Hello`，然后是用户在LineEdit框中输入的名称，如下面的屏幕截图所示：
- en: '![](assets/4087bf43-9f4a-438f-9afc-3896bed1d43a.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4087bf43-9f4a-438f-9afc-3896bed1d43a.png)'
- en: Making the application more elaborate
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使应用程序更加详细
- en: We can also make use of two or more class attributes in the class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在类中使用两个或更多类属性。
- en: Let's assume that besides the class name `Student`, we want to also add student's
    code to the class. In that case, we need to add one more attribute, `code` to
    the class, and also a `getCode()` method, which will access the student code assigned.
    Besides the class, the GUI will also change.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设除了类名`Student`之外，我们还想将学生的代码添加到类中。在这种情况下，我们需要向类中添加一个名为`code`的属性，还需要一个`getCode()`方法，该方法将访问分配的学生代码。除了类之外，GUI也将发生变化。
- en: 'We need to add one more Label widgets and one Line Edit widget to the application
    and let''s save it by another name, `demoStudentClass`. After adding the Label
    and Line Edit widgets, the user interface will appear as shown in the following
    screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向应用程序添加一个以上的Label小部件和一个LineEdit小部件，并将其保存为另一个名称`demoStudentClass`。添加Label和LineEdit小部件后，用户界面将显示如下屏幕截图所示：
- en: '![](assets/a7049b4f-3d2b-444c-9acd-db786bb48423.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a7049b4f-3d2b-444c-9acd-db786bb48423.png)'
- en: The user interface file, `demoStudentClass.ui`, needs to be converted into Python
    code. The generated Python script,  `demoStudentClass.py`, can be seen in the
    source code bundle of this book.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面文件`demoStudentClass.ui`需要转换为Python代码。可以在本书的源代码包中看到生成的Python脚本`demoStudentClass.py`。
- en: 'Let''s create another Python file with the name `callStudentClass.pyw` and
    import the `demoStudentClass.py` code to it. The code in `callStudentClass.pyw`
    is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个名为`callStudentClass.pyw`的Python文件，并将`demoStudentClass.py`代码导入其中。`callStudentClass.pyw`中的代码如下：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding code, you see that a class is defined called `Student`. The
    `Student` class includes the two class variables called `name` and `code`. Besides
    the two class variables, the `Student` class includes the following three methods
    too:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，您可以看到定义了一个名为`Student`的类。`Student`类包括两个名为`name`和`code`的类变量。除了这两个类变量，`Student`类还包括以下三个方法：
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and two parameters, `code` and `name`, which will be used to initialize the two
    class variables, `code` and ``name``'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和两个参数，`code`和`name`，它们将用于初始化两个类变量，`code`和`name`'
- en: '`getCode()`: This method simply returns the value in the `code` class variable'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCode()`: 该方法简单地返回`code`类变量中的值'
- en: '`getName()`: This method simply returns the value in the `name` class variable'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getName()`: 该方法简单地返回`name`类变量中的值'
- en: The `clicked()` event of the Push Button widget is connected to the `dispmessage()` method;
    after entering the code and name in the Line Edit widget, when the user clicks
    the Push Button, the `dispmessage()` method will be invoked. The `dispmessage()` method
    defines the object of the `Student` class by name, `studentObj`, and passes the
    code and name entered by the user in the Line Edit widgets as parameters. The
    constructor of the `Student` class, `__init__()`, will be invoked and the code
    and name entered by the user are passed to it. The code and name entered will
    be assigned to the class variables code and name, respectively. After that, the
    Label widget called `labelResponse` is set to display the code and name entered
    by invoking the two methods, `getCode` and `getName`, via the `studentObj` object
    of the `Student` class.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 推按钮小部件的`clicked()`事件连接到`dispmessage()`方法；在行编辑小部件中输入代码和名称后，用户单击推按钮，将调用`dispmessage()`方法。`dispmessage()`方法通过名称定义`Student`类的对象，`studentObj`，并将用户在行编辑小部件中输入的代码和名称作为参数传递。`Student`类的构造函数`__init__()`将被调用，并将用户输入的代码和名称传递给它。输入的代码和名称将分别分配给类变量code和name。之后，标签小部件称为`labelResponse`被设置为通过`Student`类的`studentObj`对象调用两个方法`getCode`和`getName`显示输入的代码和名称。
- en: 'Hence, on clicking the push button, the Label widget will display the code
    and name entered by the user in two Line Edit widgets, as shown in the following
    screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，单击推按钮后，标签小部件将显示用户在两个行编辑小部件中输入的代码和名称，如下截图所示：
- en: '![](assets/e9877017-e033-432c-a3c9-fd5b0d47c65f.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e9877017-e033-432c-a3c9-fd5b0d47c65f.png)'
- en: Inheritance
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承
- en: Inheritance is a concept by which the method and variables of an existing class
    can be reused by another class, without the need for re-coding them. That is,
    existing code that is tested and run can be reused immediately in other classes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是一个概念，通过该概念，现有类的方法和变量可以被另一个类重用，而无需重新编写它们。也就是说，经过测试和运行的现有代码可以立即在其他类中重用。
- en: Types of inheritance
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继承的类型
- en: 'The following are the three types of inheritance:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三种继承类型：
- en: '**Single inheritance**: One class inherits another class'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一继承**: 一个类继承另一个类'
- en: '**Multilevel inheritance**: One class inherits another class, which in turn
    is inherited by some other class'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多级继承**: 一个类继承另一个类，而后者又被另一个类继承'
- en: '**Multiple inheritance**: One class inherits two or more classes'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多重继承**: 一个类继承两个或更多个类'
- en: Using single inheritance
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用单一继承
- en: 'Single inheritance is the simplest type of inheritance, where one class is
    derived from another single class, as shown in the following diagram:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 单一继承是最简单的继承类型，其中一个类从另一个单一类派生，如下图所示：
- en: '![](assets/a30a06b6-5b72-4811-863e-2597433190bf.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a30a06b6-5b72-4811-863e-2597433190bf.png)'
- en: Class **B** inherits class **A**. Here, class **A** will be called the super
    class or base class, and class **B** will be called the derived class or subclass.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 类**B**继承类**A**。在这里，类**A**将被称为超类或基类，类**B**将被称为派生类或子类。
- en: 'The following statement defines single inheritance where the `Marks` class
    inherits the `Student` class:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句定义了单一继承，其中`Marks`类继承了`Student`类：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding statement, `Student` is the base class and `Marks` is the derived
    class. Consequently, the instance of the `Marks` class can access the methods
    and variables of the `Student` class.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语句中，`Student`是基类，`Marks`是派生类。因此，`Marks`类的实例可以访问`Student`类的方法和变量。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To understand the concept of single inheritance through a running example, let's
    create an application that will prompt the user to enter the code, name, and history
    and geography marks of a student, and will display them on the click of a button.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过一个运行示例理解单一继承的概念，让我们创建一个应用程序，提示用户输入学生的代码、名称、历史和地理成绩，并在单击按钮时显示它们。
- en: The code and name entered by the user will be assigned to the class members
    of a class called `Student`. The history and geography marks will be assigned
    to the class members of another class called `Marks`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入的代码和名称将被分配给名为`Student`的类的类成员。历史和地理成绩将被分配给名为`Marks`的另一个类的类成员。
- en: To access code and name, along with the history and geography marks, the `Marks`
    class will inherit the `Student` class. Using inheritance, the instance of the
    `Marks` class will access and display the code and name of the `Student` class.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问代码和名称，以及历史和地理成绩，`Marks`类将继承`Student`类。使用继承，`Marks`类的实例将访问并显示`Student`类的代码和名称。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Launch Qt Designer and create a new application based on the Dialog without
    Buttons template by performing the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Qt Designer，并根据以下步骤创建一个基于无按钮对话框模板的新应用程序：
- en: In the application, drag and drop five Label widgets, four Line Edit widgets,
    and one Push Button widget onto the form.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中，将五个标签小部件、四个行编辑小部件和一个按钮小部件拖放到表单上。
- en: Set the text property of the four Label widgets to `Student Code`, `Student
    Name`, `History Marks`, and `Geography Marks`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个标签小部件的文本属性设置为`学生代码`，`学生姓名`，`历史成绩`和`地理成绩`。
- en: Delete the text property of the fifth Label widget, as its text property will
    be set through the code to display the code, name, and history and geography marks.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除第五个标签小部件的文本属性，因为它的文本属性将通过代码设置以显示代码、名称、历史和地理成绩。
- en: Set the text property of the Push Button widget to `Click`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮小部件的文本属性设置为`点击`。
- en: Set the objectName property of the four Line Edit widgets to `lineEditCode`,
    `lineEditName`, `lineEditHistoryMarks`, and `lineEditGeographyMarks`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个行编辑小部件的objectName属性设置为`lineEditCode`，`lineEditName`，`lineEditHistoryMarks`和`lineEditGeographyMarks`。
- en: Set the objectName property of the Label widget to `labelResponse` and the objectName
    property of the Push Button widget to `ButtonClickMe`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签小部件的objectName属性设置为`labelResponse`，将按钮小部件的objectName属性设置为`ButtonClickMe`。
- en: 'Save the application with the name `demoSimpleInheritance.ui`. The application
    will appear as shown in the following screenshot:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`demoSimpleInheritance.ui`保存应用程序。应用程序将显示如下截图所示：
- en: '![](assets/ae5f11dc-7444-41b8-bbb6-8ee75483b7ac.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae5f11dc-7444-41b8-bbb6-8ee75483b7ac.png)'
- en: The user interface file, `demoSimpleInheritance.ui`, is an XML file and is converted
    into Python code using the `pyuic5` utility. You can find the generated Python
    script, `demoSimpleInheritance.py`, in the source code bundle of this book. The
    preceding code will be used as a header file, and will be imported in another
    Python script file, which will invoke the user interface design defined in, `demoSimpleInheritance.py`
    file.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面文件`demoSimpleInheritance.ui`是一个XML文件，并使用`pyuic5`实用程序转换为Python代码。您可以在本书的源代码包中找到生成的Python脚本`demoSimpleInheritance.py`。上述代码将被用作头文件，并将被导入到另一个Python脚本文件中，该文件将调用在`demoSimpleInheritance.py`文件中定义的用户界面设计。
- en: 'Create another Python file with the name `callSimpleInheritance.pyw` and import
    the `demoSimpleInheritance.py` code into it. The code in the Python script, `callSimpleInheritance.pyw`,
    is as given here:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callSimpleInheritance.pyw`的Python文件，并将`demoSimpleInheritance.py`代码导入其中。Python脚本`callSimpleInheritance.pyw`中的代码如下所示：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this code, you see that a class is defined, called `Student`. The `Student`
    class includes two class variables called `name` and `code`, along with the following
    three methods:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，您可以看到定义了一个名为`Student`的类。`Student`类包括两个名为`name`和`code`的类变量，以及以下三个方法：
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and two parameters, `code` and `name`, that will be used to initialize the two
    class variables, `code` and `name`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和两个参数，`code`和`name`，这些参数将用于初始化两个类变量，`code`和`name`'
- en: '`getCode()`: This method simply returns the value in the `code` class variable'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCode()`: 这个方法简单地返回`code`类变量中的值'
- en: '`getName()`: This method simply returns the value in the `name` class variable'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getName()`: 这个方法简单地返回`name`类变量中的值'
- en: The `Marks` class inherits the `Student` class. Consequently, an instance of
    the `Marks` class will not only be able to access its own members, but also that
    of the `Student` class.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`Marks`类继承了`Student`类。因此，`Marks`类的实例不仅能够访问自己的成员，还能够访问`Student`类的成员。'
- en: 'The `Marks` class includes two class variables called `historyMarks` and `geographyMarks`,
    along with the following three methods:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`Marks`类包括两个名为`historyMarks`和`geographyMarks`的类变量，以及以下三个方法：'
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and four parameters, `code`, `name`, `historyMarks`, and `geographyMarks`. From
    this constructor, the constructor of the `Student` class will be invoked and the
    `code` and `name` parameters will be passed to this constructor. The `historyMarks`
    and `geographyMarks` parameters will be used to initialize the class members,
    `historyMarks`, and `geographyMarks`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和四个参数，`code`，`name`，`historyMarks`和`geographyMarks`。从这个构造函数中，将调用`Student`类的构造函数，并将`code`和`name`参数传递给这个构造函数。`historyMarks`和`geographyMarks`参数将用于初始化类成员`historyMarks`和`geographyMarks`。'
- en: '`getHistoryMarks()`: This method simply returns the value in the `historyMarks`
    class variable.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getHistoryMarks()`: 这个方法简单地返回`historyMarks`类变量中的值。'
- en: '`getGeographyMarks()`: This method simply returns the value in the `geographyMarks`
    class variable.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getGeographyMarks()`: 这个方法简单地返回`geographyMarks`类变量中的值。'
- en: The `clicked()` event of the Push Button is connected to the `dispmessage()` method.
    After entering the code, name, and history and geography marks in the Line Edit
    widgets, when the user clicks the push button, the `dispmessage()` method will
    be invoked. The `dispmessage()` method defines the object of the `Marks` class
    by name, `marksObj`, and passes the code, name, and history and geography marks
    entered by the user in the Line Edit widgets as parameters. The constructor of
    the `Marks` class, `__init__()`, will be invoked and the code, name, history,
    and geography marks entered by the user are passed to it. From the constructor
    of the `Marks` class, the constructor of the `Student` class will be invoked and
    `code` and `name` will be passed to that constructor. The `code` and `name` parameters
    will be assigned to the `code` and `name` class variables, respectively, of the
    `Student` class.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的`clicked()`事件连接到`dispmessage()`方法。在Line Edit小部件中输入代码、姓名、历史和地理成绩后，用户单击按钮时，将调用`dispmessage()`方法。`dispmessage()`方法通过名称定义了`Marks`类的对象`marksObj`，并将用户在Line
    Edit小部件中输入的代码、姓名、历史和地理成绩作为参数传递。`Marks`类的构造函数`__init__()`将被调用，并将用户输入的代码、姓名、历史和地理成绩传递给它。从`Marks`类的构造函数中，将调用`Student`类的构造函数，并将`code`和`name`传递给该构造函数。`code`和`name`参数将分别分配给`Student`类的`code`和`name`类变量。
- en: Similarly, the history and geography marks will be assigned to `historyMarks`
    and `geographyMarks` class variables, respectively, of the `Marks` class. After
    that, the Label widget called `labelResponse` is set to display the code, name,
    and history and geography marks entered by invoking the four methods, `getCode`, `getName`,
    `getHistoryMarks`, and `getGeographyMarks`, via the `marksObj` object. The `marksObj`
    object of the `Marks` class gets the right to access the `getCode` and `getName` methods
    of the `Student` class because of using inheritance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，历史和地理成绩将分配给`Marks`类的`historyMarks`和`geographyMarks`类变量。之后，将设置名为`labelResponse`的Label小部件，以通过调用四个方法`getCode`、`getName`、`getHistoryMarks`和`getGeographyMarks`来显示用户输入的代码、姓名、历史和地理成绩。通过`marksObj`对象，`Marks`类的`marksObj`对象获得了访问`Student`类的`getCode`和`getName`方法的权限，因为使用了继承。
- en: 'Hence, on clicking the push button, the Label widget will display the code,
    name, history marks, and geography marks entered by the user via the Label widget
    called `labelResponse`, as shown in this screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，单击按钮后，Label小部件将通过名为`labelResponse`的Label小部件显示用户输入的代码、姓名、历史成绩和地理成绩，如下图所示：
- en: '![](assets/85fd758c-d18c-4054-82f6-e71290dc9ff3.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/85fd758c-d18c-4054-82f6-e71290dc9ff3.png)'
- en: Using multilevel inheritance
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多级继承
- en: 'Multilevel inheritance is where one class inherits another single class. The
    inheriting class in turn is inherited by a third class, as shown in the following
    diagram:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 多级继承是指一个类继承另一个单一类。转而继承第三个类，如下图所示：
- en: '![](assets/60be84f7-6eaa-49f2-b0bb-7f9adc6f8627.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60be84f7-6eaa-49f2-b0bb-7f9adc6f8627.png)'
- en: In the preceding diagram, you can see that class **B** inherits class **A**
    and class **C**, in turn, inherits class **B**.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，您可以看到类**B**继承了类**A**，而类**C**又继承了类**B**。
- en: 'The following statement defines multilevel inheritance, where the `Result`
    class inherits the `Marks` class and the `Marks` class, in turn, inherits the
    `Student` class:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句定义了多级继承，其中`Result`类继承了`Marks`类，而`Marks`类又继承了`Student`类：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding statement, `Student` is the base class and the `Marks` class
    inherits the `Student` class. The `Result` class inherits the `Marks` class. Consequently,
    the instance of the `Result` class can access the methods and variables of the
    `Marks` class, and the instance of the `Marks` class can access the methods and
    variables of the `Student` class.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语句中，`Student`是基类，`Marks`类继承了`Student`类。`Result`类继承了`Marks`类。因此，`Result`类的实例可以访问`Marks`类的方法和变量，而`Marks`类的实例可以访问`Student`类的方法和变量。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To understand the concept of multilevel inheritance, let''s create an application
    that will prompt the user to enter the code, name, history marks, and geography
    marks of a student and will display the total marks and percentage on the click
    of a button. The total marks will be the sum of history marks and geography marks.
    Assuming the maximum mark is 100, the formula for computing the percentage is:
    total marks/200 * 100.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解多级继承的概念，让我们创建一个应用程序，提示用户输入学生的代码、姓名、历史成绩和地理成绩，并在单击按钮时显示总分和百分比。总分将是历史成绩和地理成绩的总和。假设最高分为100，计算百分比的公式为：总分/200
    * 100。
- en: The code and name entered by the user will be assigned to the class members
    of a class called `Student`. The history and geography marks will be assigned
    to the class members of another class called `Marks`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入的代码和姓名将分配给名为`Student`的类的类成员。历史和地理成绩将分配给名为`Marks`的另一个类的类成员。
- en: To access code and name along with the history and geography marks, the `Marks`
    class will inherit the `Student` class.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问代码和姓名以及历史和地理成绩，`Marks`类将继承`Student`类。
- en: Using this multilevel inheritance, the instance of the `Marks` class will access
    the code and name of the `Student` class. To calculate total marks and percentage,
    one more class is used, called the `Result` class. The `Result` class will inherit
    the `Marks` class. Consequently, the instance of the `Result` class can access
    the class members of the `Marks` class, as well as those of the `Student` class.
    The `Result` class has two class members, `totalMarks` and `percentage`. The `totalMarks`
    class member will be assigned the sum of the `historyMarks` and `geographyMarks`
    members of the `Marks` class. The percentage member will be assigned the percentage
    acquired on the basis of the history and geography marks.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种多层继承，`Marks`类的实例将访问`Student`类的代码和名称。为了计算总分和百分比，还使用了一个名为`Result`的类。`Result`类将继承`Marks`类。因此，`Result`类的实例可以访问`Marks`类的类成员，以及`Student`类的成员。`Result`类有两个类成员，`totalMarks`和`percentage`。`totalMarks`类成员将被分配为`Marks`类的`historyMarks`和`geographyMarks`成员的总和。百分比成员将根据历史和地理成绩获得的百分比进行分配。
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'In all, there are three classes, named `Student`, `Marks`, and `Result`, where
    the `Result` class will inherit the `Marks` class and the `Marks` class, in turn,
    will inherit the `Student` class. Consequently, the members of the `Result` class
    can access the class members of the `Marks` class as well as those of the `Student`
    class. Here is the step-by-step procedure to create this application:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，有三个类，名为`Student`，`Marks`和`Result`，其中`Result`类将继承`Marks`类，而`Marks`类将继承`Student`类。因此，`Result`类的成员可以访问`Marks`类的类成员以及`Student`类的成员。以下是创建此应用程序的逐步过程：
- en: Launch Qt Designer and create a new application based on the Dialog without
    Buttons template.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Qt Designer并基于无按钮模板创建一个新应用程序。
- en: Drag and drop six Label widgets, six Line Edit widgets, and one Push Button
    widget onto the form.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将六个Label小部件、六个Line Edit小部件和一个Push Button小部件拖放到表单上。
- en: Set the text property of the six Label widgets to `Student Code`, `Student Name`,
    `History Marks`, `Geography Marks`, `Total`, and `Percentage`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将六个Label小部件的文本属性设置为`Student Code`、`Student Name`、`History Marks`、`Geography
    Marks`、`Total`和`Percentage`。
- en: Set the text property of the Push Button widget to `Click`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的文本属性设置为`Click`。
- en: Set the objectName property of the six Line Edit widgets to `lineEditCode`,
    `lineEditName`, `lineEditHistoryMarks`, `lineEditGeographyMarks`, `lineEditTotal`,
    and `lineEditPercentage`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将六个Line Edit小部件的对象名称属性设置为`lineEditCode`、`lineEditName`、`lineEditHistoryMarks`、`lineEditGeographyMarks`、`lineEditTotal`和`lineEditPercentage`。
- en: Set the objectName property of the Push Button widget to `ButtonClickMe`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Push Button小部件的对象名称属性设置为`ButtonClickMe`。
- en: Disable the `lineEditTotal` and `lineEditPercentage` boxes by unchecking the
    Enable property from the Property Editor window. The `lineEditTotal` and `lineEditPercentage` widgets
    are disabled because values in these boxes will be assigned through the code and
    we don't want their values to be altered by the user.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过取消选中属性编辑器窗口中的启用属性，禁用`lineEditTotal`和`lineEditPercentage`框。`lineEditTotal`和`lineEditPercentage`小部件被禁用，因为这些框中的值将通过代码分配，我们不希望用户更改它们的值。
- en: 'Save the application with the name `demoMultilevelInheritance.ui`. The application
    will appear as shown in the following screenshot:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`demoMultilevelInheritance.ui`保存应用程序。应用程序将显示如下截图所示：
- en: '![](assets/6e59be73-0f7c-455e-a947-bfb9c7883a3a.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6e59be73-0f7c-455e-a947-bfb9c7883a3a.png)'
- en: The user interface file, `demoMultilevelInheritance.ui`, is an XML file and
    is converted into Python code by making use of the `pyuic5` utility. You can see
    the generated Python script, `demoMultilevelInheritance.py`, in the source code
    bundle of this book. The `demoMultilevelInheritance.py `filewill be used as a
    header file, and will be imported in another Python script file, which will use
    the GUI created in `demoMultilevelInheritance.py`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面文件`demoMultilevelInheritance.ui`是一个XML文件，并通过使用`pyuic5`实用程序将其转换为Python代码。您可以在本书的源代码包中看到生成的Python脚本`demoMultilevelInheritance.py`。`demoMultilevelInheritance.py`文件将用作头文件，并将在另一个Python脚本文件中导入，该文件将使用在`demoMultilevelInheritance.py`中创建的GUI。
- en: 'Create another Python file with the name `callMultilevelInheritance.pyw` and
    import the `demoMultilevelInheritance.py` code into it. The code in the Python
    script, `callMultilevelInheritance.pyw`, is as shown here:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callMultilevelInheritance.pyw`的Python文件，并将`demoMultilevelInheritance.py`代码导入其中。Python脚本`callMultilevelInheritance.pyw`中的代码如下所示：
- en: '[PRE15]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the preceding code, in the `callMultilevelInheritance.pyw` file, you can
    see that a class is defined called `Student`. The `Student` class includes two
    class variables called `name` and `code`, along with the following three methods:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，在`callMultilevelInheritance.pyw`文件中，您可以看到定义了一个名为`Student`的类。`Student`类包括两个名为`name`和`code`的类变量，以及以下三种方法：
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and two parameters, `code`, and `name`, that will be used to initialize the two
    class variables `code` and `name`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和两个参数，`code`和`name`，用于初始化两个类变量`code`和`name`'
- en: '`getCode()`: This method simply returns the value in the `code` class variable'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCode()`: 此方法简单地返回`code`类变量中的值'
- en: '`getName()`: This method simply returns the value in the `name` class variable'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getName()`: 此方法简单地返回`name`类变量中的值'
- en: The `Marks` class inherits the `Student` class. Consequently, an instance of
    the `Marks` class will not only be able to access its own members, but also those
    of the `Student` class.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`Marks`类继承`Student`类。因此，`Marks`类的实例不仅能够访问自己的成员，还能够访问`Student`类的成员。'
- en: 'The `Marks` class includes two class variables called `historyMarks` and `geographyMarks`,
    along with the following three methods:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`Marks`类包括两个名为`historyMarks`和`geographyMarks`的类变量，以及以下三种方法：'
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and four parameters, `code`, `name`, `historyMarks`, and `geographyMarks`. From
    this constructor, the constructor of the `Student` class will be invoked and the
    `code` and `name` parameters will be passed to this constructor. The `historyMarks`
    and `geographyMarks` parameters will be used to initialize the `historyMarks`
    and `geographyMarks` class members.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和四个参数，`code`、`name`、`historyMarks`和`geographyMarks`。从这个构造函数中，将调用`Student`类的构造函数，并将`code`和`name`参数传递给该构造函数。`historyMarks`和`geographyMarks`参数将用于初始化`historyMarks`和`geographyMarks`类成员。'
- en: '`getHistoryMarks()`: This method simply returns the value in the `historyMarks`
    class variable.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getHistoryMarks()`: 此方法简单地返回`historyMarks`类变量中的值。'
- en: '`getGeographyMarks()`: This method simply returns the value in the `geographyMarks`
    class variable.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getGeographyMarks()`: 此方法简单地返回`geographyMarks`类变量中的值。'
- en: The `Result` class inherits the `Marks` class. An instance of the `Result` class
    will not only be able to access its own members, but also those of the `Marks`
    class and of the `Student` class too.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result`类继承了`Marks`类。`Result`类的实例不仅能够访问自己的成员，还能访问`Marks`类和`Student`类的成员。'
- en: 'The `Result` class includes two class variables, called `totalMarks` and `percentage`,
    along with the following three methods:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result`类包括两个类变量，称为`totalMarks`和`percentage`，以及以下三个方法：'
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and four parameters, `code`, `name`, `historyMarks`, and `geographyMarks`. From
    this constructor, the constructor of the `Marks` class will be invoked and the `code`,
    `name`, `historyMarks`, and `geographyMarks` parameters will be passed to that
    constructor. The sum of `historyMarks` and `geographyMarks` will be assigned to
    the `totalMarks` class variable. Assuming the maximum mark for each is 100, the
    percentage of the history and geography marks will be computed and assigned to
    the percentage class variable.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和四个参数，`code`、`name`、`historyMarks`和`geographyMarks`。从这个构造函数中，将调用`Marks`类的构造函数，并将`code`、`name`、`historyMarks`和`geographyMarks`参数传递给该构造函数。`historyMarks`和`geographyMarks`的总和将被赋给`totalMarks`类变量。假设每个的最高分为100，将计算历史和地理成绩的百分比，并将其分配给百分比类变量。'
- en: '`getTotalMarks()`: This method simply returns the sum of the `historyMarks`
    and `geographyMarks` class variables.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getTotalMarks()`: 此方法简单地返回`historyMarks`和`geographyMarks`类变量的总和。'
- en: '`getPercentage()`: This method simply returns the percentage of the history
    and geography marks.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPercentage()`: 此方法简单地返回历史和地理成绩的百分比。'
- en: The `clicked()` event of the Push Button widget is connected to the `dispmessage()` method.
    After entering code, name, history marks, and geography marks in the Line Edit
    widgets, when the user clicks the push button, the `dispmessage()` method will
    be invoked. The `dispmessage()` method defines the object of the `Result` class
    by name, `resultObj`, and passes the code, name, history, and geography marks
    entered by the user in the Line Edit widgets as parameters. The constructor of
    the `Result` class, `__init__()`, will be invoked and the code, name, history
    marks, and geography marks entered by the user are passed to it. From the `Result`
    class's constructor, the `Marks` class's constructor will be invoked and code,
    name, history marks, and geography marks will be passed to that constructor. From
    the `Marks` class's constructor, the `Student` class constructor will be invoked
    and the `code` and `name` parameters are passed to it. In the `Student` class's
    constructor, the `code` and `name` parameters will be assigned to the class variables `code`
    and `name`, respectively. Similarly, the history and geography marks will be assigned
    to the `historyMarks` and `geographyMarks` class variables, respectively, of the
    `Marks` class.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮小部件的`clicked()`事件连接到`dispmessage()`方法。在行编辑小部件中输入代码、姓名、历史成绩和地理成绩后，用户单击按钮，将调用`dispmessage()`方法。`dispmessage()`方法通过姓名`resultObj`定义`Result`类的对象，并将用户在行编辑小部件中输入的代码、姓名、历史和地理成绩作为参数传递。`Result`类的构造函数`__init__()`将被调用，并将用户输入的代码、姓名、历史成绩和地理成绩传递给它。从`Result`类的构造函数中，将调用`Marks`类的构造函数，并将代码、姓名、历史成绩和地理成绩传递给该构造函数。从`Marks`类的构造函数中，将调用`Student`类的构造函数，并将`code`和`name`参数传递给它。在`Student`类的构造函数中，`code`和`name`参数将分配给类变量`code`和`name`。类似地，历史和地理成绩将分配给`Marks`类的`historyMarks`和`geographyMarks`类变量。
- en: The sum of `historyMarks` and `geographyMarks` will be assigned to the `totalMarks`
    class variable. Also, the percentage of the history and geography marks will be
    computed and assigned to the `percentage` class variable.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`historyMarks`和`geographyMarks`的总和将被赋给`totalMarks`类变量。此外，历史和地理成绩的百分比将被计算并赋给`percentage`类变量。'
- en: After that, the Line Edit widget called `lineEditTotal` is set to display the
    total marks, that is, the sum of history and geography marks, by invoking the
    `getTotalMarks` method via `resultObj`. Also, the Line Edit widget called `lineEditPercentage`
    is set to display the percentage of marks by invoking the `getPercentage` method
    via `resultObj`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，称为`lineEditTotal`的行编辑小部件被设置为通过`resultObj`调用`getTotalMarks`方法来显示总分，即历史和地理成绩的总和。同样，称为`lineEditPercentage`的行编辑小部件被设置为通过`resultObj`调用`getPercentage`方法来显示百分比。
- en: 'Hence, on clicking the push button, the Line Edit widgets called `lineEditTotal`
    and `lineEditPercentage` will display the total marks and percentage of history
    and geography marks entered by the user, as shown in the following screenshot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，单击按钮后，称为`lineEditTotal`和`lineEditPercentage`的行编辑小部件将显示用户输入的历史和地理成绩的总分和百分比，如下截图所示：
- en: '![](assets/d449d2e5-b4df-4d4b-83de-7453ccab8863.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d449d2e5-b4df-4d4b-83de-7453ccab8863.png)'
- en: Using multiple inheritance
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多重继承
- en: 'Multiple inheritance is where one class inherits two or more classes, as shown
    in the following diagram:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 多重继承是指一个类继承了两个或更多个类，如下图所示：
- en: '![](assets/18fd865e-1ed7-4668-8579-ecb61a333042.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/18fd865e-1ed7-4668-8579-ecb61a333042.png)'
- en: Class **C** inherits both classes, class **A** and class **B**.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 类**C**同时继承类**A**和类**B**。
- en: 'The following statement defines multilevel inheritance where the `Result` class
    inherits the `Marks` class and the `Marks` class in turn inherits the `Student`
    class:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句定义了多级继承，其中`Result`类继承了`Marks`类，而`Marks`类又继承了`Student`类：
- en: '[PRE16]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding statements, `Student` and `Marks` are the base classes and
    the `Result` class inherits both the `Student` class and the `Marks` class. Consequently,
    the instance of the `Result` class can access the methods and variables of the
    `Marks` and `Student` classes.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的语句中，`Student`和`Marks`是基类，`Result`类继承了`Student`类和`Marks`类。因此，`Result`类的实例可以访问`Marks`和`Student`类的方法和变量。
- en: Getting ready
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'To understand the concept of multilevel inheritance practically, let''s create
    an application that will prompt the user to enter the code, name, history marks,
    and geography marks of a student, and will display the total marks and percentage
    on the click of a button. The total marks will be the sum of history marks and
    geography marks. Assuming the maximum mark for each is 100, the formula for computing
    the percentage is: total marks/200 * 100.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际理解多级继承的概念，让我们创建一个应用程序，提示用户输入学生的代码、姓名、历史成绩和地理成绩，并在单击按钮时显示总分和百分比。总分将是历史成绩和地理成绩的总和。假设每个的最高分为100，计算百分比的公式为：总分/200
    * 100。
- en: The code and name entered by the user will be assigned to the class members
    of a class called `Student`. The history and geography marks will be assigned
    to the class members of another class called `Marks`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入的代码和姓名将分配给一个名为`Student`的类的类成员。历史和地理成绩将分配给另一个名为`Marks`的类的类成员。
- en: To access code and name, along with the history and geography marks, the `Result`
    class will inherit both classes, the `Student` class as well as the `Marks` class.
    Using this multiple inheritance, the instance of the `Result` class can access
    the code and name of the `Student` class, as well as the `historyMarks` and `geographyMarks`
    class variables of the `Marks` class. In other words, using multiple inheritance,
    the instance of the `Result` class can access the class members of the `Marks`
    class, as well as those of the `Student` class. The `Result` class has two class
    members, `totalMarks` and `percentage`. The `totalMarks` class member will be
    assigned the sum of the `historyMarks` and `geographyMarks` members of the `Marks`
    class. The percentage member will be assigned the percentage acquired on the basis
    of the history and geography marks.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问代码和姓名，以及历史和地理成绩，`Result`类将同时继承`Student`类和`Marks`类。使用这种多重继承，`Result`类的实例可以访问`Student`类的代码和姓名，以及`Marks`类的`historyMarks`和`geographyMarks`类变量。换句话说，使用多重继承，`Result`类的实例可以访问`Marks`类的类成员，以及`Student`类的类成员。`Result`类有两个类成员，`totalMarks`和`percentage`。`totalMarks`类成员将被分配为`Marks`类的`historyMarks`和`geographyMarks`成员的总和。百分比成员将根据历史和地理成绩的基础上获得的百分比进行分配。
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s understand through a step-by-step procedure how multilevel inheritance
    is applied to three classes, `Student`, `Marks`, and `Result`. The `Result` class
    will inherit both classes, `Student` and `Marks`. These steps explain how the
    members of the `Result` class can access the class members of the `Student` and
    `Marks` classes through multilevel inheritance:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过逐步过程来了解多级继承如何应用于三个类，`Student`，`Marks`和`Result`。`Result`类将同时继承`Student`和`Marks`两个类。这些步骤解释了`Result`类的成员如何通过多级继承访问`Student`和`Marks`类的类成员：
- en: Launch Qt Designer and create a new application based on the Dialog without
    Buttons template.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Qt Designer，并基于无按钮的对话框模板创建一个新应用程序。
- en: In the application, drag and drop six Label widgets, six Line Edit widgets,
    and one Push Button widget onto the form.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中，将六个标签小部件、六个行编辑小部件和一个按钮小部件拖放到表单上。
- en: Set the text property of the six Label widgets to `Student Code`, `Student Name`,
    `History Marks`, `Geography Marks`, `Total`, and `Percentage`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将六个标签小部件的文本属性设置为`学生代码`，`学生姓名`，`历史成绩`，`地理成绩`，`总分`和`百分比`。
- en: Set the text property of the Push Button widget to `Click`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮小部件的文本属性设置为`点击`。
- en: Set the objectName property of the six Line Edit widgets to `lineEditCode`,
    `lineEditName`, `lineEditHistoryMarks`, `lineEditGeographyMarks`, `lineEditTotal`,
    and `lineEditPercentage`.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将六个行编辑小部件的objectName属性设置为`lineEditCode`，`lineEditName`，`lineEditHistoryMarks`，`lineEditGeographyMarks`，`lineEditTotal`和`lineEditPercentage`。
- en: Set the objectName property of the Push Button widget to `ButtonClickMe`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮小部件的objectName属性设置为`ButtonClickMe`。
- en: Disable the `lineEditTotal` and `lineEditPercentage` boxes by unchecking the
    Enable property from the Property Editor window. The `lineEditTotal` and `lineEditPercentage`
    boxes are disabled because values in these boxes will be assigned through the
    code, and we don't want their values to be altered by the user.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过取消选中属性编辑器窗口中的启用属性，禁用`lineEditTotal`和`lineEditPercentage`框。`lineEditTotal`和`lineEditPercentage`框被禁用，因为这些框中的值将通过代码分配，并且我们不希望用户更改它们的值。
- en: 'Save the application with the name `demoMultipleInheritance.ui`. The application
    will appear as shown in the following screenshot:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`demoMultipleInheritance.ui`保存应用程序。应用程序将显示如下截图所示：
- en: '![](assets/a27d6894-3d5e-4a3d-a2af-f12757b4dc3e.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a27d6894-3d5e-4a3d-a2af-f12757b4dc3e.png)'
- en: The user interface file `demoMultipleInheritance .ui` is an XML file and is
    converted into Python code using the `pyuic5` utility. You can find the generated
    Python code, `demoMultipleInheritance.py`, in the source code bundle of this book.
    The `demoMultipleInheritance.py` file will be used as a header file and will be
    imported in another Python script file, which will invoke the GUI created in the
    `demoMultipleInheritance.py` file.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面文件`demoMultipleInheritance .ui`是一个XML文件，并使用`pyuic5`实用程序转换为Python代码。您可以在本书的源代码包中找到生成的Python代码`demoMultipleInheritance.py`。`demoMultipleInheritance.py`文件将被用作头文件，并将在另一个Python脚本文件中导入，该文件将调用在`demoMultipleInheritance.py`文件中创建的GUI。
- en: 'Create another Python file with the name `callMultipleInheritance.pyw` and
    import the `demoMultipleInheritance.py` code into it:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`callMultipleInheritance.pyw`的Python文件，并将`demoMultipleInheritance.py`代码导入其中：
- en: '[PRE17]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this code, you can see that a class is defined called `Student`. The `Student`
    class includes two class variables called `name` and `code`, along with the following
    three methods:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，您可以看到定义了一个名为`Student`的类。`Student`类包括两个名为`name`和`code`的类变量，以及以下三种方法：
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and two parameters, `code` and `name`, that will be used to initialize the two
    class variables `code` and `name`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和两个参数，`code`和`name`，这些参数将用于初始化两个类变量`code`和`name`。'
- en: '`getCode()`: This method simply returns the value in the `code` class variable'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCode()`: 此方法简单地返回`code`类变量中的值'
- en: '`getName()`: This method simply returns the value in the `name` class variable'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getName()`: 此方法简单地返回`name`类变量中的值'
- en: 'The `Marks` class includes two class variables, called `historyMarks` and `geographyMarks`,
    along with the following three methods:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`Marks`类包括两个类变量，名为`historyMarks`和`geographyMarks`，以及以下三种方法：'
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and two parameters, `historyMarks` and `geographyMarks`. The `historyMarks` and
    `geographyMarks` parameters will be used to initialize the `historyMarks` and
    `geographyMarks` class members.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和两个参数，`historyMarks`和`geographyMarks`。`historyMarks`和`geographyMarks`参数将用于初始化`historyMarks`和`geographyMarks`类成员。'
- en: '`getHistoryMarks()`: This method simply returns the value in the `historyMarks`
    class variable.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getHistoryMarks()`: 此方法简单地返回`historyMarks`类变量中的值。'
- en: '`getGeographyMarks()`: This method simply returns the value in the `geographyMarks`
    class variable.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getGeographyMarks()`: 此方法简单地返回`geographyMarks`类变量中的值。'
- en: The `Result` class inherits the `Student` class as well as the `Marks` class.
    An instance of the `Result` class will not only be able to access its own members,
    but also those of the `Marks` class and of the `Student` class too.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result`类继承了`Student`类以及`Marks`类。`Result`类的实例不仅能够访问自己的成员，还能够访问`Marks`类和`Student`类的成员。'
- en: 'The `Result` class includes two class variables called `totalMarks` and `percentage`,
    along with the following three methods:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result`类包括两个名为`totalMarks`和`percentage`的类变量，以及以下三种方法：'
- en: '`__init__()`: It is a constructor that takes the mandatory `self` parameter
    and four parameters, `code`, `name`, `historyMarks`, and `geographyMarks`. From
    this constructor, the `Student` class constructor will be invoked and the `code`
    and `name` parameters will be passed to that constructor. Also, from this constructor,
    the `Marks` class constructor will be invoked and the `historyMarks` and `geographyMarks`
    parameters will be passed to that constructor. The sum of `historyMarks` and `geographyMarks`
    will be assigned to the `totalMarks` class variable. Assuming the maximum mark
    for each is 100, the percentage of the history and geography marks will be computed
    and assigned to the `percentage` class variable.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__()`: 这是一个构造函数，它接受强制的`self`参数和四个参数，`code`、`name`、`historyMarks`和`geographyMarks`。从这个构造函数中，将调用`Student`类的构造函数，并将`code`和`name`参数传递给该构造函数。同样，从这个构造函数中，将调用`Marks`类的构造函数，并将`historyMarks`和`geographyMarks`参数传递给该构造函数。`historyMarks`和`geographyMarks`的总和将被分配给`totalMarks`类变量。假设每个的最高分数为100，将计算历史和地理成绩的百分比，并将其分配给`percentage`类变量。'
- en: '`getTotalMarks()`: This method simply returns the sum of the `historyMarks`
    and `geography` class variables.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getTotalMarks()`: 此方法简单地返回`historyMarks`和`geography`类变量的总和。'
- en: '`getPercentage()`: This method simply returns the percentage of history and
    geography marks.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPercentage()`: 此方法简单地返回历史和地理成绩的百分比。'
- en: The `clicked()` event of the Push Button widget is connected to the `dispmessage()` method.
    After entering code, name, history marks, and geography marks in the Line Edit
    widgets, when the user clicks the push button, the `dispmessage()` method will
    be invoked. The `dispmessage()` method defines the object of the `Result` class
    by name, `resultObj`, and passes the code, name, history marks, and geography
    marks entered by the user in the Line Edit widgets as parameters. The constructor
    of the `Result` class, `__init__()`, will be invoked and the code, name, history
    marks, and geography marks entered by the user are passed to it. From the `Result`
    class's constructor, the `Student` class constructor and the `Marks` class constructor
    will be invoked. The code and name will be passed to the `Student` class constructor,
    and history and geography marks will be passed to the `Marks` class constructor.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮小部件的`clicked()`事件连接到`dispmessage()`方法。在LineEdit小部件中输入代码、名称、历史成绩和地理成绩后，当用户单击按钮时，将调用`dispmessage()`方法。`dispmessage()`方法通过名称定义了`Result`类的对象，`resultObj`，并将用户在LineEdit小部件中输入的代码、名称、历史成绩和地理成绩作为参数传递。将调用`Result`类的构造函数`__init__()`，并将用户输入的代码、名称、历史成绩和地理成绩传递给它。从`Result`类的构造函数中，将调用`Student`类的构造函数和`Marks`类的构造函数。代码和名称将传递给`Student`类的构造函数，历史和地理成绩将传递给`Marks`类的构造函数。
- en: In the `Student` class constructor, the code and name will be assigned to the `code`
    and `name` class variables, respectively. Similarly, in the `Marks` class constructor,
    the history and geography marks will be assigned to the `historyMarks` and `geographyMarks` class
    variables, respectively, of the `Marks` class.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Student`类构造函数中，代码和名称将分配给`code`和`name`类变量。同样，在`Marks`类构造函数中，历史和地理成绩将分配给`Marks`类的`historyMarks`和`geographyMarks`类变量。
- en: The sum of `historyMarks` and `geographyMarks` will be assigned to the `totalMarks`
    class variable. Also, the percentage of the history and geography marks will be
    computed and assigned to the `percentage` class variable.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`historyMarks`和`geographyMarks`的总和将分配给`totalMarks`类变量。此外，历史和地理成绩的百分比将计算并分配给`percentage`类变量。'
- en: After that, the Line Edit widget called `lineEditTotal` is set to display the
    total marks, that is, the sum of the history and geography marks, by invoking
    the `getTotalMarks` method via `resultObj`. Also, the Line Edit widget called
    `lineEditPercentage` is set to display the percentage of marks by invoking the
    `getPercentage` method via `resultObj`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，LineEdit小部件称为`lineEditTotal`被设置为通过`resultObj`调用`getTotalMarks`方法来显示总分，即历史和地理成绩的总和。同样，LineEdit小部件称为`lineEditPercentage`被设置为通过`resultObj`调用`getPercentage`方法来显示百分比。
- en: 'Hence, on clicking the push button, the Line Edit widgets called `lineEditTotal`
    and `lineEditPercentage` will display the total marks and percentage of the history
    and geography marks entered by the user, as shown in the following screenshot:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，单击按钮后，LineEdit小部件称为`lineEditTotal`和`lineEditPercentage`将显示用户输入的历史和地理成绩的总分和百分比，如下面的屏幕截图所示：
- en: '![](assets/e3d7ca1c-8089-43bc-b7ee-b4391dce7d38.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e3d7ca1c-8089-43bc-b7ee-b4391dce7d38.png)'
