- en: Generating System Reports and System Monitoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成系统报告和系统监控
- en: Collecting data and generating recurring system reports are essential tasks
    for any system administrator, and automating these tasks can help us to discover
    issues early on, in order to provide solutions for them. In this chapter, we will
    see some proven methods for automating data collection from servers and generating
    that data into formal reports. We will learn how to manage new and existing users,
    using Python and Ansible. Also, we will dive into log analysis and monitoring
    the system **Key Performance Indicators** (**KPIs**). You can schedule the monitoring
    scripts to run on a regular basis.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 收集数据并生成定期系统报告是任何系统管理员的重要任务，并自动化这些任务可以帮助我们及早发现问题，以便为其提供解决方案。在本章中，我们将看到一些经过验证的方法，用于从服务器自动收集数据并将这些数据生成为正式报告。我们将学习如何使用Python和Ansible管理新用户和现有用户。此外，我们还将深入研究日志分析和监控系统**关键绩效指标**（**KPI**）。您可以安排监视脚本定期运行。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Collecting data from Linux
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Linux收集数据
- en: Managing users in Ansible
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ansible中管理用户
- en: Collecting data from Linux
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Linux收集数据
- en: Native Linux commands provide useful data about the current system status and
    health. However, each one of those Linux commands and utilities are focused on
    getting data from only one aspect of the system. We need to leverage Python modules
    to get those details back to the administrator and generate useful system reports.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本机Linux命令提供有关当前系统状态和健康状况的有用数据。然而，这些Linux命令和实用程序都专注于从系统的一个方面获取数据。我们需要利用Python模块将这些详细信息返回给管理员并生成有用的系统报告。
- en: We will divide the reports into two parts. The first one is getting general
    information about the system by using the `platform` module, while the second
    part is exploring the hardware resources in terms of the CPU and memory.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将报告分为两部分。第一部分是使用`platform`模块获取系统的一般信息，而第二部分是探索CPU和内存等硬件资源。
- en: 'We will start by leveraging the `platform` module, which is a built-in library
    inside of Python. The `platform` module contains many methods that can be used
    to get details about the system that Python operates on:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先利用Python内置库中的`platform`模块。`platform`模块包含许多方法，可用于获取Python所在系统的详细信息：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../images/00157.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00157.jpeg)'
- en: 'Running the same script on a Windows machine will result in different outputs,
    reflecting the current system. So, when we run it on a Windows PC, we will get
    `Windows` as the output from the script:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows机器上运行相同的脚本将产生不同的输出，反映当前的系统。因此，当我们在Windows PC上运行它时，我们将从脚本中获得`Windows`作为输出：
- en: '![](../images/00158.gif)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00158.gif)'
- en: 'Another useful function is `uname()`, which does the same job as the Linux
    command (`uname -a`): retrieving the machine''s hostname, architecture, and kernel,
    but in a structured format, so that you can match any value by referring to its
    index:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的函数是`uname()`，它与Linux命令(`uname -a`)执行相同的工作：检索机器的主机名、架构和内核，但以结构化格式呈现，因此您可以通过引用其索引来匹配任何值：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../images/00159.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00159.jpeg)'
- en: The first value is the system type, which we get using the `system()` method,
    and the second value is the hostname of the current machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个值是系统类型，我们使用`system()`方法获取，第二个值是当前机器的主机名。
- en: 'You can explore and list all of the available functions inside the `platform`
    module by using autocomplete in PyCharm; you can check the documentation for each
    function by pressing *CTRL *+ *Q*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用PyCharm中的自动完成功能来探索并列出`platform`模块中的所有可用函数；您可以通过按下*CTRL* + *Q*来检查每个函数的文档：
- en: '![](../images/00160.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00160.jpeg)'
- en: The second part of designing our script is using the information made available
    by the Linux files to explore the hardware configuration in the Linux machine.
    Remember that the CPU, memory, and network information could be accessible from
    under `/proc/`; we will read this information and access it using standard `open()`
    function in Python. You can get more information about the available resources
    by reading and exploring `/proc/`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 设计脚本的第二部分是使用Linux文件提供的信息来探索Linux机器中的硬件配置。请记住，CPU、内存和网络信息可以从`/proc/`下访问；我们将读取此信息并使用Python中的标准`open()`函数进行访问。您可以通过阅读和探索`/proc/`来获取有关可用资源的更多信息。
- en: '**Script:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本：**'
- en: 'This is the first step for importing the `platform` module. It''s needed only
    for this task:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是导入`platform`模块的第一步。这仅适用于此任务：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This snippet contains the functions used in this exercise; we will design two
    functions - `check_feature()` and `get_value_from_string()`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此片段包含了此练习中使用的函数；我们将设计两个函数 - `check_feature()`和`get_value_from_string()`：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, the following is the main body of the Python script, which contains
    the Python logic to get the required information:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是Python脚本的主体，其中包含获取所需信息的Python逻辑：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This part is used to print the information obtained from the previous section:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分用于打印从上一部分获得的信息：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding example, the following steps were performed:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，执行了以下步骤：
- en: First, we opened `/proc/cpuinfo` and read its contents, then stored the result
    in `cpu_data`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们打开了`/proc/cpuinfo`并读取了它的内容，然后将结果存储在`cpu_data`中。
- en: The number of processors inside the file could be found by counting the keyword
    `processor` using the `count()` String function.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`count()`字符串函数计算文件中处理器的数量可以找到。
- en: Then, we needed to get the options and features available for each processor.
    For that, we got only one processor entry (since they're usually identical to
    each other) and passed it the `check_feature()` function. This method accepts
    the feature that we want to search in one argument, and the other is the processor
    data, which will return `True` if the feature is available in the processor data.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要获取每个处理器可用的选项和特性。为此，我们只获取了一个处理器条目（因为它们通常是相同的），并将其传递给`check_feature()`函数。该方法接受我们想要在一个参数中搜索的特性，另一个是处理器数据，如果处理器数据中存在该特性，则返回`True`。
- en: The processor data is available in key-value pairs. So, we designed the `get_value_from_string()`
    method, which accepts the key name and will search for its corresponding value
    by iterating over the processor data; then, we will  split on the `:`  delimiter
    for every returned key value pair to get the value only.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理器数据以键值对的形式可用。因此，我们设计了`get_value_from_string()`方法，它接受键名，并通过迭代处理器数据来搜索其对应的值；然后，我们将在每个返回的键值对上使用`:`分隔符进行拆分，以获取值。
- en: All of these values are added to the `cpu_feature` list using the `append()`
    method.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有这些值都使用`append()`方法添加到`cpu_feature`列表中。
- en: We then repeated the same operation with the memory information to get the total,
    free, and swap memory.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们重复了相同的操作，使用内存信息获取总内存、空闲内存和交换内存。
- en: Next, we used the platform's built-in methods, such as `system()`, `uname()`,
    and `python_version()`, to get information about the system.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用平台的内置方法，如`system()`、`uname()`和`python_version()`，来获取有关系统的信息。
- en: At the end, we printed the report that contains the preceding information.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们打印了包含上述信息的报告。
- en: 'The script output can be seen in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本输出如下截图所示：
- en: '![](../images/00161.jpeg)Another way to represent the generated data is to
    leverage the `matplotlib` library that we used in [Chapter 5](part0087.html#2IV0U0-9cfcdc5beecd470bbeda046372f0337f),
    *Extracting Useful Data for Network Devices*, to visualize data over time.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00161.jpeg)表示生成的数据的另一种方法是利用我们在[第5章](part0087.html#2IV0U0-9cfcdc5beecd470bbeda046372f0337f)中使用的`matplotlib`库，以便随时间可视化数据。'
- en: Sending generated data through email
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过电子邮件发送生成的数据
- en: The report generated in the previous section provides a good overview of the
    resources currently on the system. However, we can tweak the script and extend
    its functionality to send us an email with all of the details. This is  very useful
    for a **Network Operation Center** (**NoC**) team, which can receive emails from
    a monitored system based on specific incidents (HDD failure, high CPU, or dropped
    packets). Python has a built-in library called `smtplib`, where it leverages the
    **Simple Mail Transfer Protocol** (**SMTP**) that is responsible for sending and
    receiving emails from mail servers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节生成的报告中，提供了系统当前资源的良好概述。但是，我们可以调整脚本并扩展其功能，以便通过电子邮件发送所有细节给我们。这对于**网络运营中心**（**NoC**）团队非常有用，他们可以根据特定事件（硬盘故障、高CPU或丢包）从受监控系统接收电子邮件。Python有一个名为`smtplib`的内置库，它利用**简单邮件传输协议**（**SMTP**）负责与邮件服务器发送和接收电子邮件。
- en: This requires that you have local email servers on your machine, or that you
    use one of the free online email services, such as Gmail or Outlook. For this
    example, we will log in to [http://www.gmail.com](http://www.gmail.com) using
    the SMTP and send email with our data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这要求您的计算机上有本地电子邮件服务器，或者您使用其中一个免费的在线电子邮件服务，如Gmail或Outlook。在本例中，我们将使用SMTP登录到[http://www.gmail.com](http://www.gmail.com)，并使用我们的数据发送电子邮件。
- en: Without further ado, we will modify our script and add the SMTP support to it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 话不多说，我们将修改我们的脚本，并为其添加SMTP支持。
- en: 'We will import the required modules into Python. Again, `smtplib` and `platform`
    are needed for this task:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所需的模块导入Python。同样，`smtplib`和`platform`对于这个任务是必需的：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is the part of the function that contains both the `check_feature()` and
    `get_value_from_string()` functions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是函数的一部分，包含`check_feature()`和`get_value_from_string()`函数：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, the main body of the Python script is as follows, containing the Python
    logic to get the required information:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Python脚本的主体如下，包含了获取所需信息的Python逻辑：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'At the end, we need to populate the variables with some values to properly
    connect to the `gmail` server:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为变量赋一些值，以便正确连接到`gmail`服务器：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding example, the following applies:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，适用以下内容：
- en: The first part is the same as the original example, but instead of printing
    the data to the terminal, we add it to the `Data_Sent_in_Email` variable.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一部分与原始示例相同，但是不是将数据打印到终端，而是将其添加到`Data_Sent_in_Email`变量中。
- en: The `Header` variable represents the email header containing the sender's address,
    the recipient's address, and the email's subject.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Header`变量代表包含发件人地址、收件人地址和电子邮件主题的电子邮件标题。'
- en: We use the `SMTP()` class inside of the `smtplib` module to connect to the public
    Gmail SMTP server and negotiate the TTLS connection. This is the default method
    when connecting to Gmail servers. We hold the SMTP connection in the `server`
    variable.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`smtplib`模块内的`SMTP()`类来连接到公共Gmail SMTP服务器并协商TTLS连接。这是连接到Gmail服务器时的默认方法。我们将SMTP连接保存在`server`变量中。
- en: 'Now, we log in to the server by using the `login()` method, and finally, we
    use the `sendmail()` function to send the email. `sendmail()` accepts three arguments:
    the sender, the recipient, and the email body.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们使用`login()`方法登录到服务器，最后，我们使用`sendmail()`函数发送电子邮件。`sendmail()`接受三个参数：发件人、收件人和电子邮件正文。
- en: 'Finally, we close the connection with the server:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们关闭与服务器的连接：
- en: '**Script output**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本输出**'
- en: '![](../images/00162.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00162.jpeg)'
- en: Using the time and date modules
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用时间和日期模块
- en: Great; so far, we have been able to send custom data generated from our servers
    through email. However, there might be a difference in time between the generated
    data and the email's delivery time, due to network congestion or a failure in
    the mail system, or any other reason. So, we can't depend on the email to correlate
    the delivery time with the actual event time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 很好；到目前为止，我们已经能够通过电子邮件发送从我们的服务器生成的自定义数据。然而，由于网络拥塞或邮件系统故障等原因，生成的数据和电子邮件的传递时间之间可能存在时间差异。因此，我们不能依赖电子邮件将传递时间与实际事件时间相关联。
- en: For that reason, we will use the Python `datetime` module to follow the current
    time on the monitored system. This module can format the time in many attributes,
    such as year, month, day, hour, and minute.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用Python的`datetime`模块来跟踪监视系统上的当前时间。该模块可以以许多属性格式化时间，如年、月、日、小时和分钟。
- en: Aside from that, the `datetime` instance from the `datetime` module is actually
    a standalone object in Python (like int, string, boolean, and so on); hence, it
    has its own attributes inside of Python.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，`datetime`模块中的`datetime`实例实际上是Python中的一个独立对象（如int、string、boolean等）；因此，它在Python内部有自己的属性。
- en: 'To convert the `datetime` object to a string, you can use the `strftime()`
    method, which is available as an attribute inside of the created object. Also,
    it provides a method for formatting the time by using the following directives:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`datetime`对象转换为字符串，可以使用`strftime()`方法，该方法作为创建的对象内的属性可用。此外，它提供了一种通过以下指令格式化时间的方法：
- en: '| **Directive** | **Meaning** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|**指令**|**含义**|'
- en: '| `%Y` | Returns the year, from 0001 to 9999 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|`%Y`|返回年份，从0001到9999|'
- en: '| `%m` | Returns the month number |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '|`%m`|返回月份|'
- en: '| `%d` | Returns the day of the month |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '|`%d`|返回月份的日期|'
- en: '| `%H` | Returns the hour number, 0-23 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '|`%H`|返回小时数，0-23|'
- en: '| `%M` | Returns the minutes, 0-59 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '|`%M`|返回分钟数，0-59|'
- en: '| `%S` | Returns the seconds,0-59 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '|`%S`|返回秒数，0-59|'
- en: 'So, we will tweak our script and add the following snippet to the code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将调整我们的脚本，并将以下片段添加到代码中：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: First, we imported the `datetime` class from the `datetime` module. Then, we
    created the `time_now` object using the `datetime` class and the `now()` function,
    which returns the current time on the running system. Finally, we used `strftime()`,
    with a directive, to format the time in a specific format and convert it to a
    string for printing (remember, the object has a `datetime` object).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从`datetime`模块中导入了`datetime`类。然后，我们使用`datetime`类和`now()`函数创建了`time_now`对象，该函数返回正在运行系统上的当前时间。最后，我们使用`strftime()`，带有一个指令，以特定格式格式化时间并将其转换为字符串以进行打印（记住，该对象有一个`datetime`对象）。
- en: 'The script''s output is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的输出如下：
- en: '![](../images/00163.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00163.jpeg)'
- en: Running the script on a regular basis
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定期运行脚本
- en: A final step in the script is to schedule the script to run at a time interval.
    This can be daily, weekly, hourly, or at a specific time. This can be done using
    the `cron` job on Linux systems. `cron` is used to schedule a repeated event,
    such as cleaning up directories, backing up databases, rotating logs, or anything
    else you can think of.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的最后一步是安排脚本在一定时间间隔内运行。这可以是每天、每周、每小时或在特定时间。这可以通过Linux系统上的`cron`作业来完成。`cron`用于安排重复事件，如清理目录、备份数据库、旋转日志，或者你能想到的其他任何事情。
- en: 'To view the current jobs scheduled, use the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前计划的作业，使用以下命令：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To edit `crontab`, use the `-e` switch. If this is the first time you are running `cron`,
    you will be prompted to use your favorite editor (`nano` or `vi`).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`crontab`，使用`-e`开关。如果这是你第一次运行`cron`，系统会提示你使用你喜欢的编辑器（`nano`或`vi`）。
- en: 'A typical `crontab` consists of five stars, each one representing a time entry:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的`crontab`由五个星号组成，每个星号代表一个时间条目：
- en: '| **Field** | **Values** |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '|**字段**|**值**|'
- en: '| Minutes | 0-59 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '|分钟|0-59|'
- en: '| Hours | 0-23 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '|小时|0-23|'
- en: '| Day of the month | 1-31 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '|月份的日期|1-31|'
- en: '| Month | 1-12 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '|月份|1-12|'
- en: '| Day of the week | 0-6 (Sunday - Saturday) |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '|星期几|0-6（星期日-星期六）|'
- en: 'For example, if you need to schedule a job to run every Friday at 9:00 P.M.
    you will use the following entry:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你需要安排一个工作在每周五晚上9点运行，你将使用以下条目：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you need to have a command every day at 12:00 A.M. (a backup, for example),
    use the following `cron` job:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要每天凌晨12点执行一个命令（例如备份），使用以下`cron`作业：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Also, you can schedule the `cron` to run at *every* specific interval. For
    example, if you need to run a job every `5` minutes, use this `cron` job:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以安排`cron`在*每个*特定的间隔运行。例如，如果你需要每`5`分钟运行一次作业，使用这个`cron`作业：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Back to our script; we can schedule it to run every day at 7:30 AM:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的脚本；我们可以安排它在每天上午7:30运行：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, remember to save the `cron`  job before exiting.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，记得在退出之前保存`cron`作业。
- en: It's better to provide a full command path to Linux, rather than a relative
    path, to avoid any potential issues.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最好提供Linux的完整命令路径，而不是相对路径，以避免任何潜在问题。
- en: Managing users in Ansible
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ansible中管理用户
- en: Now, we will discuss how to manage users in different systems.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论如何在不同系统中管理用户。
- en: Linux systems
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux系统
- en: Ansible provides powerful user management modules to manage different tasks
    on a system. We have a chapter dedicated to discussing Ansible ([Chapter 13](part0168.html#506UG0-9cfcdc5beecd470bbeda046372f0337f), *Ansible
    for System Administration*), but in this chapter, we will explore its power for
    managing user accounts across a company's infrastructure.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了强大的用户管理模块，用于管理系统上的不同任务。我们有一个专门讨论Ansible的章节（[第13章](part0168.html#506UG0-9cfcdc5beecd470bbeda046372f0337f)，*系统管理的Ansible*），但在本章中，我们将探讨其在管理公司基础设施上管理用户帐户的能力。
- en: Sometimes, companies allow root access to all users, to get rid of the headache
    of user management; this is not a good solution in terms of security and auditing.
    It's the best practice to give the right permissions to the right users, and to
    revoke them once users leave the company.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，公司允许所有用户访问root权限，以摆脱用户管理的麻烦；这在安全和审计方面不是一个好的解决方案。最佳实践是给予正确的用户正确的权限，并在用户离开公司时撤销这些权限。
- en: Ansible provides an unmatched way to manage users across multiple servers, through
    either password or password-less (SSH key) access.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了一种无与伦比的方式来管理多台服务器上的用户，可以通过密码或无密码（SSH密钥）访问。
- en: There are a few other things that need to be taken into consideration when creating
    users in a Linux system. The user must have a shell (such as Bash, CSH, ZSH, and
    so on) in order to log in to the server. Also, the user should have a home directory
    (usually under `/home`). Finally, the user must be in a group that determines
    its privileges and permissions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Linux系统中的用户时，还有一些其他需要考虑的事项。用户必须有一个shell（如Bash、CSH、ZSH等）才能登录到服务器。此外，用户应该有一个主目录（通常在`/home`下）。最后，用户必须属于一个确定其特权和权限的组。
- en: 'Our first example will be creating a user with an SSH key in the remote server,
    using the ad hoc command. The key source is at the `ansible` tower, while we execute
    the command on `all` servers:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个示例将是在远程服务器上使用临时命令创建一个带有SSH密钥的用户。密钥源位于`ansible` tower，而我们在`all`服务器上执行命令：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The second example is creating a user using the Playbook:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例是使用Playbook创建用户：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s look at the task''s parameters:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下任务的参数：
- en: In our tasks, we use a user module that contains several parameters, such as
    `name`, that set the username for the user.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的任务中，我们使用了一个包含多个参数的用户模块，比如`name`，用于设置用户的用户名。
- en: The second parameter is `password`, where we set the user's password, but in
    a crypted format. You need to use the `mkpasswd` command, which prompts you for
    the password and will generate the hash value.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是`password`，用于设置用户的密码，但是以加密格式。您需要使用`mkpasswd`命令，该命令会提示您输入密码并生成哈希值。
- en: '`groups` is a list of groups that the user belongs to; hence, the user will
    inherit the permissions. You can use comma-separated values in this field.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups`是用户所属的组列表；因此，用户将继承权限。您可以在此字段中使用逗号分隔的值。'
- en: '`state` is used to tell Ansible whether the user will be created or deleted.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`用于告诉Ansible用户是要创建还是删除。'
- en: You can define the user shell used for remote access in the `shell` parameter.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在`shell`参数中定义用于远程访问的用户shell。
- en: '`createhome` and `home` are parameters used to specify the user''s home location.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createhome`和`home`是用于指定用户主目录位置的参数。'
- en: Another parameter is `ssh_key_file`, which specifies the SSH filename. Also,
    the `ssh_key_passphrase` will specify the passphrase for the SSH key.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个参数是`ssh_key_file`，用于指定SSH文件名。此外，`ssh_key_passphrase`将指定SSH密钥的密码。
- en: Microsoft Windows
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软Windows
- en: 'Ansible provides the `win_user` module to manage local Windows user accounts.
    This is very useful when creating users on active directory domains or Microsoft
    SQL databases (`mssql`), or when creating default accounts on normal PCs. The
    following example will create a user called `bassem` and give it the password
    `access123`. The difference here is that the password is given in plain text and
    not in the crypted value, as in the Unix-based system:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了`win_user`模块来管理本地Windows用户帐户。在创建活动目录域或Microsoft SQL数据库（`mssql`）上的用户或在普通PC上创建默认帐户时，这非常有用。以下示例将创建一个名为`bassem`的用户，并为其设置密码`access123`。不同之处在于密码是以明文而不是加密值给出的，就像在基于Unix的系统中一样：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `password_never_expires` parameter will prevent Windows from expiring the
    password after a specific time; this is useful when creating admin and default
    accounts. On the other hand, `password_expired`, if set to `yes`, will require
    the user to enter a new password and change it upon first login.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`password_never_expires`参数将防止Windows在特定时间后使密码过期；这在创建管理员和默认帐户时非常有用。另一方面，如果将`password_expired`设置为`yes`，将要求用户在首次登录时输入新密码并更改密码。'
- en: The `groups` parameter will add the user from a listed value or comma-separated
    list of groups. This will depend on the `groups_action` parameter, and could be
    `add`, `replace`, or `remove`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups`参数将用户添加到列出的值或逗号分隔的组列表中。这将取决于`groups_action`参数，可以是`add`、`replace`或`remove`。'
- en: Finally, the state will tell Ansible what should be done to the user. This parameter
    could be `present`, `absent`, or `query`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，状态将告诉Ansible应该对用户执行什么操作。此参数可以是`present`、`absent`或`query`。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about collecting data and reports from Linux machines
    and alerting through email using time and date modules. We also learned how to
    manage users in Ansible.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从Linux机器收集数据和报告，并使用时间和日期模块通过电子邮件进行警报。我们还学习了如何在Ansible中管理用户。
- en: In the next chapter, we will learn how to interact with DBMS using Python connectors.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Python连接器与DBMS进行交互。
