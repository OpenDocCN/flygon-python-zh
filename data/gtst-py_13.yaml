- en: Sorting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: Whenever data is collected, there comes a time when it becomes necessary to
    sort the data. The sorting operation is common to all datasets, be it a collection
    of names, telephone numbers, or items on a simple to-do list.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当收集到数据时，总会有必要对数据进行排序。排序操作对所有数据集都是常见的，无论是名称集合、电话号码还是简单的待办事项列表。
- en: 'In this chapter, we''ll study a few sorting techniques, including the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习一些排序技术，包括以下内容：
- en: Bubble sort
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冒泡排序
- en: Insertion sort
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入排序
- en: Selection sort
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择排序
- en: Quick sort
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速排序
- en: Heap sort
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆排序
- en: In our treatment of these sorting algorithms, we will take into consideration
    their asymptotic behavior. Some of the algorithms are relatively easy to develop
    but may perform poorly. Other algorithms that are a little complex to write will
    show impressive performance.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对这些排序算法的处理中，我们将考虑它们的渐近行为。一些算法相对容易开发，但性能可能较差。其他一些稍微复杂的算法将表现出色。
- en: After sorting, it becomes much easier to conduct search operations on a collection
    of items. We'll start with the simplest of all sorting algorithms--the bubble
    sort algorithm.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 排序后，对一组项目进行搜索操作变得更加容易。我们将从最简单的排序算法开始--冒泡排序算法。
- en: Sorting algorithms
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序算法
- en: In this chapter, we will go through a number of sorting algorithms that have
    varying levels of difficulty of implementation. Sorting algorithms are categorized
    by their memory usage, complexity, recursion, whether they are comparison-based
    among other considerations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些排序算法，这些算法的实现难度各不相同。排序算法根据它们的内存使用、复杂性、递归性质、是否基于比较等等因素进行分类。
- en: Some of the algorithms use more CPU cycles and as such have bad asymptotic values.
    Others chew on more memory and other computing resources as they sort a number
    of values. Another consideration is how sorting algorithms lend themselves to
    being expressed recursively or iteratively or both. There are algorithms that
    use comparison as the basis for sorting elements. An example of this is the bubble
    sort algorithm. Examples of a non-comparison sorting algorithm are the buck sort
    and pigeonhole sort.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些算法使用更多的CPU周期，因此具有较差的渐近值。其他算法在对一些值进行排序时会消耗更多的内存和其他计算资源。另一个考虑因素是排序算法如何适合递归或迭代表达。有些算法使用比较作为排序元素的基础。冒泡排序算法就是一个例子。非比较排序算法的例子包括桶排序和鸽巢排序。
- en: Bubble sort
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冒泡排序
- en: The idea behind a bubble sort algorithm is very simple. Given an unordered list,
    we compare adjacent elements in the list, each time, putting in the right order
    of magnitude, only two elements. The algorithm hinges on a swap procedure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序算法的思想非常简单。给定一个无序列表，我们比较列表中的相邻元素，每次只放入正确的大小顺序，只有两个元素。该算法依赖于一个交换过程。
- en: 'Take a list with only two elements:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 取一个只有两个元素的列表：
- en: '![](assets/f0a85ca0-df91-41ff-9f1e-0b3e3f9d27a9.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f0a85ca0-df91-41ff-9f1e-0b3e3f9d27a9.jpg)'
- en: 'To sort this list, simply swap them into the right position with **2** occupying
    index **0** and **5** occupying index **1**. To effectively swap these elements,
    we need to have a temporary storage area:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要对这个列表进行排序，只需将它们交换到正确的位置，**2** 占据索引 **0**，**5** 占据索引 **1**。为了有效地交换这些元素，我们需要一个临时存储区域：
- en: '![](assets/0970d2ce-bc86-4644-8abd-a3ca29004526.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0970d2ce-bc86-4644-8abd-a3ca29004526.jpg)'
- en: 'Implementation of the bubble sort algorithm starts with the swap method, illustrated
    in the preceding image. First, element **5** will be copied to a temporary location,
    `temp`. Then element **2** will be moved to index **0**. Finally, **5** will be
    moved from temp to index **1**. At the end of it all, the elements will have been
    swapped. The list will now contain the element: `[2, 5]`. The following code will
    swap the elements of `unordered_list[j]` with `unordered_list[j+1]` if they are
    not in the right order:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序算法的实现从交换方法开始，如前面的图像所示。首先，元素**5**将被复制到临时位置`temp`。然后元素**2**将被移动到索引**0**。最后，**5**将从temp移动到索引**1**。最终，元素将被交换。列表现在将包含元素：`[2,
    5]`。以下代码将交换`unordered_list[j]`的元素与`unordered_list[j+1]`的元素，如果它们不是按正确顺序排列的：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we have been able to swap a two-element array, it should be simple
    to use this same idea to sort a whole list.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经能够交换一个两元素数组，使用相同的思想对整个列表进行排序应该很简单。
- en: 'We''ll run this swap operation in a double-nested loop. The inner loop is as
    follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一个双重嵌套循环中运行这个交换操作。内部循环如下：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Knowing how many times to swap is important when implementing a bubble sort
    algorithm. To sort a list of numbers such as `[3, 2, 1]`, we need to swap the
    elements a maximum of twice. This is equal to the length of the list minus 1,
    `iteration_number = len(unordered_list)-1`. We subtract `1` because it gives us
    exactly the maximum number of iterations to run:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现冒泡排序算法时，知道交换的次数是很重要的。要对诸如`[3, 2, 1]`的数字列表进行排序，我们需要最多交换两次元素。这等于列表长度减1，`iteration_number
    = len(unordered_list)-1`。我们减去`1`是因为它恰好给出了最大迭代次数：
- en: '![](assets/1b019547-0241-48e8-b5b4-00c2e924fc9c.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1b019547-0241-48e8-b5b4-00c2e924fc9c.jpg)'
- en: By swapping the adjacent elements in exactly two iterations, the largest number
    ends up at the last position on the list.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在精确两次迭代中交换相邻元素，最大的数字最终位于列表的最后位置。
- en: The `if` statement makes sure that no needless swaps occur if two adjacent elements
    are already in the right order. The inner `for` loop only causes the swapping
    of adjacent elements to occur exactly twice in our list.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: if语句确保如果两个相邻元素已经按正确顺序排列，则不会发生不必要的交换。内部的for循环只会在我们的列表中精确发生两次相邻元素的交换。
- en: 'However, you''ll realize that the running of the `for` loop for the first time
    does not entirely sort our list. How many times does this swapping operation have
    to occur in order for the entire list to be sorted? If we repeat the whole process
    of swapping the adjacent elements a number of times, the list will be sorted.
    An outer loop is used to make this happen. The swapping of elements in the list
    results in the following dynamics:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你会意识到第一次运行 `for` 循环并没有完全排序我们的列表。这个交换操作必须发生多少次，才能使整个列表排序好呢？如果我们重复整个交换相邻元素的过程多次，列表就会排序好。外部循环用于实现这一点。列表中元素的交换会导致以下动态变化：
- en: '![](assets/39090fa9-d4b6-4852-857f-3b50ecb814e8.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/39090fa9-d4b6-4852-857f-3b50ecb814e8.jpg)'
- en: 'We recognize that a total of four comparisons at most were needed to get our
    list sorted. Therefore, both inner and outer loops have to run `len(unordered_list)-1`
    times for all elements to be sorted:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们意识到最多需要四次比较才能使我们的列表排序好。因此，内部和外部循环都必须运行 `len(unordered_list)-1` 次，才能使所有元素都排序好：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The same principle is used even if the list contains many elements. There are
    a lot of variations of the bubble sort too that minimize the number of iterations
    and comparisons.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 即使列表包含许多元素，也可以使用相同的原则。冒泡排序也有很多变体，可以最小化迭代和比较的次数。
- en: The bubble sort is a highly inefficient sorting algorithm with a time complexity
    of `O(n2)` and best case of `O(n)`. Generally, the bubble sort algorithm should
    not be used to sort large lists. However, on relatively small lists, it performs
    fairly well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序是一种高度低效的排序算法，时间复杂度为 `O(n2)`，最佳情况为 `O(n)`。通常情况下，不应该使用冒泡排序算法来对大型列表进行排序。然而，在相对较小的列表上，它的性能还是相当不错的。
- en: There is a variant of the bubble sort algorithm where if there is no comparison
    within the inner loop, we simply quit the entire sorting process. The absence
    of the need to swap elements in the inner loop suggests the list has already been
    sorted. In a way, this can help speed up the generally considered slow algorithm.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种冒泡排序算法的变体，如果在内部循环中没有比较，我们就会简单地退出整个排序过程。在内部循环中不需要交换元素的情况下，表明列表已经排序好了。在某种程度上，这可以帮助加快通常被认为是缓慢的算法。
- en: Insertion sort
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入排序
- en: The idea of swapping adjacent elements to sort a list of items can also be used
    to implement the insertion sort. In the insertion sort algorithm, we assume that
    a certain portion of the list has already been sorted, while the other portion
    remains unsorted. With this assumption, we move through the unsorted portion of
    the list, picking one element at a time. With this element, we go through the
    sorted portion of the list and insert it in the right order so that the sorted
    portion of the list remains sorted. That is a lot of grammar. Let's walk through
    the explanation with an example.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过交换相邻元素来对一系列项目进行排序的想法也可以用于实现插入排序。在插入排序算法中，我们假设列表的某个部分已经排序好了，而另一部分仍然未排序。在这种假设下，我们遍历列表的未排序部分，一次选择一个元素。对于这个元素，我们遍历列表的排序部分，并按正确的顺序将其插入，以使列表的排序部分保持排序。这是很多语法。让我们通过一个例子来解释一下。
- en: 'Consider the following array:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下数组：
- en: '![](assets/49dda629-6835-48b4-828e-a815559f5aa2.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/49dda629-6835-48b4-828e-a815559f5aa2.jpg)'
- en: 'The algorithm starts by using a `for` loop to run between the indexes **1**
    and **4**. We start from index **1** because we assume the sub-array with index
    **0** to already be in the sorted order:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法首先使用 `for` 循环在索引 **1** 和 **4** 之间运行。我们从索引 **1** 开始，因为我们假设索引 **0** 的子数组已经按顺序排序好了：
- en: '![](assets/53faaf1a-49f5-4089-a3e7-9814324f0587.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53faaf1a-49f5-4089-a3e7-9814324f0587.jpg)'
- en: 'At the start of the execution of the loop, we have the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环执行开始时，我们有以下情况：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At the beginning of the execution of each run of the `for` loop, the element
    at `unsorted_list[index]` is stored in the `insert_value` variable. Later, when
    we find the appropriate position in the sorted portion of the list, `insert_value`
    will be stored at that index or location:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次运行 `for` 循环时，`unsorted_list[index]` 处的元素被存储在 `insert_value` 变量中。稍后，当我们找到列表排序部分的适当位置时，`insert_value`
    将被存储在该索引或位置上：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `search_index` is used to provide information to the `while` loop--exactly
    where to find the next element that needs to be inserted in the sorted portion
    of the list.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`search_index` 用于向 `while` 循环提供信息--确切地指出在列表的排序部分中需要插入的下一个元素的位置。'
- en: 'The `while` loop traverses the list backwards, guided by two conditions: first,
    if `search_index > 0`, then it means that there are more elements in the sorted
    portion of the list; second, for the `while` loop to run, `unsorted_list[search_index-1]`
    must be greater than the `insert_value`. The `unsorted_list[search_index-1]` array
    will do either of the following things:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环向后遍历列表，受两个条件的控制：首先，如果 `search_index > 0`，那么意味着列表的排序部分还有更多的元素；其次，`while`
    循环运行时，`unsorted_list[search_index-1]` 必须大于 `insert_value`。`unsorted_list[search_index-1]`
    数组将执行以下操作之一：'
- en: Point to the element just before the `unsorted_list[search_index]` before the
    `while` loop is executed the first time
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一次执行 `while` 循环之前，指向 `unsorted_list[search_index]` 之前的一个元素
- en: Point to one element before `unsorted_list[search_index-1]` after the `while`
    loop has been run the first time
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一次运行 `while` 循环后，指向 `unsorted_list[search_index-1]` 之前的一个元素
- en: In our list example, the `while` loop will be executed because `5 > 1`. In the
    body of the while loop, the element at `unsorted_list[search_index-1]` is stored
    at `unsorted_list[search_index]`. `search_index -= 1` moves the list traversal
    backwards till it bears the value `0`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的列表示例中，`while` 循环将被执行，因为 `5 > 1`。在 `while` 循环的主体中，`unsorted_list[search_index-1]`
    处的元素被存储在 `unsorted_list[search_index]` 处。`search_index -= 1` 使列表遍历向后移动，直到它的值为
    `0`。
- en: 'Our list now looks like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的列表现在是这样的：
- en: '![](assets/b17904e5-ddf3-4b03-a469-27bb91a2c855.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b17904e5-ddf3-4b03-a469-27bb91a2c855.jpg)'
- en: 'After the `while` loop exits, the last known position of `search_index` (which
    in this case is `0`) now helps us to know where to insert `insert_value`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环退出后，`search_index`的最后已知位置（在这种情况下为`0`）现在帮助我们知道在哪里插入`insert_value`：'
- en: '![](assets/c172bc52-6f58-4dd7-bf0d-a6cb59b078f0.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c172bc52-6f58-4dd7-bf0d-a6cb59b078f0.jpg)'
- en: On the second iteration of the `for` loop, `search_index` will have the value
    **2**, which is the index of the third element in the array. At this point, we
    start our comparison in the direction to the left (towards index **0**). **100**
    will be compared with **5** but because **100** is greater than **5**, the while
    loop will not be executed. **100** will be replaced by itself because the `search_index` variable
    never got decremented. As such, `unsorted_list[search_index] = insert_value` will
    have no effect.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环的第二次迭代中，`search_index`将具有值**2**，这是数组中第三个元素的索引。此时，我们从左向右（朝向索引**0**）开始比较。**100**将与**5**进行比较，但由于**100**大于**5**，`while`循环将不会执行。**100**将被自己替换，因为`search_index`变量从未被减少。因此，`unsorted_list[search_index]
    = insert_value`将不会产生任何效果。
- en: When `search_index` is pointing at index **3**, we compare **2** with **100**
    and move **100** to where **2** is stored. We then compare **2** with **5** and
    move **5** to where **100** was initially stored. At this point, the `while` loop
    will break and **2** will be stored in index **1**. The array will be partially
    sorted with the values `[1, 2, 5, 100, 10]`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当`search_index`指向索引**3**时，我们将**2**与**100**进行比较，并将**100**移动到**2**所存储的位置。然后我们将**2**与**5**进行比较，并将**5**移动到最初存储**100**的位置。此时，`while`循环将中断，**2**将存储在索引**1**中。数组将部分排序，值为`[1,
    2, 5, 100, 10]`。
- en: The preceding step will occur one last time for the list to be sorted.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤将再次发生一次，以便对列表进行排序。
- en: The insertion sort algorithm is considered stable in that it does not change
    the relative order of elements that have equal keys. It also only requires no
    more memory than what is consumed by the list because it does the swapping in-place.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 插入排序算法被认为是稳定的，因为它不会改变具有相等键的元素的相对顺序。它也只需要的内存不多于列表消耗的内存，因为它是原地交换。
- en: Its worst case value is **O**(n²) and its best case is **O**(n).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它的最坏情况值为**O**(n²)，最佳情况为**O**(n)。
- en: Selection sort
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择排序
- en: Another popular sorting algorithm is the selection sort. This sorting algorithm
    is simple to understand, yet also inefficient, with its worst and best asymptotic
    values being **O**(*n²*). It begins by finding the smallest element in an array
    and interchanging it with data at, for instance, array index [**0**]. The same
    operation is done a second time; however, the smallest element in the remainder
    of the list after finding the first smallest element is interchanged with the
    data at index [**1**].
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的排序算法是选择排序。这种排序算法简单易懂，但效率低下，其最坏和最佳渐近值为**O**(*n²*)。它首先找到数组中最小的元素，并将其与数据交换，例如，数组索引[**0**]处的数据。然后再次执行相同的操作；然而，在找到第一个最小元素后，列表剩余部分中的最小元素将与索引[**1**]处的数据交换。
- en: 'In a bid to throw more light on how the algorithm works, lets sort a list of
    numbers:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地解释算法的工作原理，让我们对一组数字进行排序：
- en: '![](assets/8c80e026-2a8e-420c-932f-a5558325cd3b.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8c80e026-2a8e-420c-932f-a5558325cd3b.jpg)'
- en: Starting at index **0**, we search for the smallest item in the list that exists
    between index **1** and the index of the last element. When this element has been
    found, it is exchanged with the data found at index **0**. We simply repeat this
    process until the list becomes sorted.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从索引**0**开始，我们搜索列表中在索引**1**和最后一个元素的索引之间存在的最小项。找到这个元素后，它将与索引**0**处找到的数据交换。我们只需重复此过程，直到列表变得有序。
- en: 'Searching for the smallest item within the list is an incremental process:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中搜索最小项是一个递增的过程：
- en: '![](assets/f0024d27-cc67-4fd2-b74d-79829b6bc126.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f0024d27-cc67-4fd2-b74d-79829b6bc126.jpg)'
- en: A comparison of elements **2** and **5** selects **2** as the lesser of the
    two. The two elements are swapped.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对元素**2**和**5**进行比较，选择**2**作为较小的元素。这两个元素被交换。
- en: 'After the swap operation, the array looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 交换操作后，数组如下所示：
- en: '![](assets/fad6b44b-d9b6-4eb9-9de1-f1c042ab1273.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fad6b44b-d9b6-4eb9-9de1-f1c042ab1273.jpg)'
- en: 'Still at index **0**, we compare **2** with **65**:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在索引**0**处，我们将**2**与**65**进行比较：
- en: '![](assets/f598f296-8582-48c3-bba4-3620c0aa7a77.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f598f296-8582-48c3-bba4-3620c0aa7a77.jpg)'
- en: Since **65** is greater than **2**, the two elements are not swapped. A further
    comparison is made between the element at index **0**, which is **2**, with element
    at index **3**, which is **10**. No swap takes place. When we get to the last
    element in the list, we will have the smallest element occupying index **0**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**65**大于**2**，所以这两个元素不会交换。然后在索引**0**处的元素**2**和索引**3**处的元素**10**之间进行了进一步的比较。不会发生交换。当我们到达列表中的最后一个元素时，最小的元素将占据索引**0**。
- en: A new set of comparisons will begin, but this time, from index **1**. We repeat
    the whole process of comparing the element stored there with all the elements
    between index **2** through to the last index.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的比较集将开始，但这一次是从索引**1**开始。我们重复整个比较过程，将存储在那里的元素与索引**2**到最后一个索引之间的所有元素进行比较。
- en: 'The first step of the second iteration will look like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次迭代的第一步将如下所示：
- en: '![](assets/d3575fa3-2dc3-4adb-a3f0-648d31b7e1d8.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d3575fa3-2dc3-4adb-a3f0-648d31b7e1d8.jpg)'
- en: 'The following is an implementation of the selection sort algorithm. The argument
    to the function is the unsorted list of items we want to put in ascending order
    of magnitude:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是选择排序算法的实现。函数的参数是我们想要按升序排列的未排序项目列表的大小：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The algorithm begins by using the outer `for` loop to go through the list, `size_of_list`,
    a number of times. Because we pass `size_of_list` to the `range` method, it will
    produce a sequence from **0** through to `size_of_list-1`. It is a subtle note.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 算法从使用外部`for`循环开始遍历列表`size_of_list`，多次。因为我们将`size_of_list`传递给`range`方法，它将产生一个从**0**到`size_of_list-1`的序列。这是一个微妙的注释。
- en: 'The inner loop is responsible for going through the list and making the necessary
    swap any time that we encounter an element less than the element pointed to by
    `unsorted_list[i]`. Notice that the inner loop begins from `i+1` up to `size_of_list-1`.
    The inner loop begins its search for the smallest element between `i+1` but uses
    the `j` index:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 内部循环负责遍历列表，并在遇到小于`unsorted_list[i]`指向的元素时进行必要的交换。注意，内部循环从`i+1`开始，直到`size_of_list-1`。内部循环开始在`i+1`之间搜索最小的元素，但使用`j`索引：
- en: '![](assets/8a52cc8e-82c2-4959-81ad-713c2ff0e31a.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8a52cc8e-82c2-4959-81ad-713c2ff0e31a.jpg)'
- en: The preceding diagram shows the direction in which the algorithm searches for
    the next smallest item.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了算法搜索下一个最小项的方向。
- en: Quick sort
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速排序
- en: The quick sort algorithm falls under the divide and conquer class of algorithms,
    where we break (divide) a problem into smaller chunks that are much simpler to
    solve (conquer). In this case, an unsorted array is broken into sub-arrays that
    are partially sorted, until all elements in the list are in the right position,
    by which time our unsorted list will have become sorted.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 快速排序算法属于分治算法类，其中我们将问题分解为更简单的小块来解决。在这种情况下，未排序的数组被分解成部分排序的子数组，直到列表中的所有元素都处于正确的位置，此时我们的未排序列表将变为已排序。
- en: List partitioning
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表分区
- en: Before we divide the list into smaller chunks, we have to partition it. This
    is the heart of the quick sort algorithm. To partition the array, we must first
    select a pivot. All the elements in the array will be compared with this pivot.
    At the end of the partitioning process, all elements that are less than the pivot
    will be to the left of the pivot, while all elements greater than the pivot will
    lie to the right of the pivot in the array.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将列表分成更小的块之前，我们必须对其进行分区。这是快速排序算法的核心。要对数组进行分区，我们必须首先选择一个枢轴。数组中的所有元素将与此枢轴进行比较。在分区过程结束时，小于枢轴的所有元素将位于枢轴的左侧，而大于枢轴的所有元素将位于数组中枢轴的右侧。
- en: Pivot selection
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枢轴选择
- en: For the sake of simplicity, we'll take the first element in any array as the
    pivot. This kind of pivot selection degrades in performance, especially when sorting
    an already sorted list. Randomly picking the middle or last element in the array
    as the pivot does not improve the situation any further. In the next chapter,
    we will adopt a better approach to selecting the pivot in order to help us find
    the smallest element in a list.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们将任何数组中的第一个元素作为枢轴。这种枢轴选择会降低性能，特别是在对已排序列表进行排序时。随机选择数组中间或最后一个元素作为枢轴也不会改善情况。在下一章中，我们将采用更好的方法来选择枢轴，以帮助我们找到列表中的最小元素。
- en: Implementation
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施
- en: Before we delve into the code, let's run through the sorting of a list using
    the quick sort algorithm. The partitioning step is very important to understand
    so we'll tackle that operation first.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入代码之前，让我们通过使用快速排序算法对列表进行排序的步骤。首先要理解分区步骤非常重要，因此我们将首先解决该操作。
- en: 'Consider the following list of integers. We shall partition this list using
    the partition function below:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下整数列表。我们将使用以下分区函数对此列表进行分区：
- en: '![](assets/129d9de4-f95a-41ad-ae21-bb3f3cd31416.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/129d9de4-f95a-41ad-ae21-bb3f3cd31416.jpg)'
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The partition function receives the array that we need to partition as its
    parameters: the index of its first element and the index of its last element.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 分区函数接收我们需要分区的数组作为参数：其第一个元素的索引和最后一个元素的索引。
- en: The value of the pivot is stored in the `pivot` variable, while its index is
    stored in `pivot_index`. We are not using `unsorted_array[0]` because when the
    unsorted array parameter is called with a segment of an array, index `0` will
    not necessarily point to the first element in that array. The index of the next
    element to the pivot, `first_index + 1`, marks the position where we begin to
    look for the element in the array that is greater than the `pivot`, `greater_than_pivot_index
    = first_index + 1`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 枢轴的值存储在`pivot`变量中，而其索引存储在`pivot_index`中。我们没有使用`unsorted_array[0]`，因为当调用未排序数组参数时，索引`0`不一定指向该数组中的第一个元素。枢轴的下一个元素的索引，`first_index
    + 1`，标记了我们开始在数组中寻找大于`pivot`的元素的位置，`greater_than_pivot_index = first_index + 1`。
- en: '`less_than_pivot_index = index_of_last_element` marks the position of the last
    element in the list which is, where we begin the search for the element that is
    less than the pivot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`less_than_pivot_index = index_of_last_element`标记了列表中最后一个元素的位置，即我们开始搜索小于枢轴的元素的位置：'
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At the beginning of the execution of the main `while` loop the array looks
    like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行主`while`循环之前，数组如下所示：
- en: '![](assets/e135214b-12e9-49a2-8b7c-d9cde7b8deb6.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e135214b-12e9-49a2-8b7c-d9cde7b8deb6.jpg)'
- en: The first inner `while` loop moves one index to the right until it lands on
    index **2**, because the value at that index is greater than **43**. At this point,
    the first `while` loop breaks and does not continue. At each test of the condition
    in the first `while` loop, `greater_than_pivot_index += 1` is evaluated only if
    the `while` loop's test condition evaluates to `True`. This makes the search for
    the element greater than the pivot progress to the next element on the right.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个内部`while`循环每次向右移动一个索引，直到落在索引**2**上，因为该索引处的值大于**43**。此时，第一个`while`循环中断并不再继续。在第一个`while`循环的条件测试中，只有当`while`循环的测试条件评估为`True`时，才会评估`greater_than_pivot_index
    += 1`。这使得对大于枢轴的元素的搜索向右侧的下一个元素进行。
- en: 'The second inner `while` loop moves one index at a time to the left, until
    it lands on index **5**, whose value, **20**, is less than **43**:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个内部`while`循环每次向左移动一个索引，直到落在索引**5**上，其值**20**小于**43**：
- en: '![](assets/6782b5b8-9018-4ce3-9403-d6d9d4772ce9.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6782b5b8-9018-4ce3-9403-d6d9d4772ce9.jpg)'
- en: 'At this point, neither inner `while` loop can be executed any further:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，内部`while`循环都无法继续执行：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since `greater_than_pivot_index < less_than_pivot_index`, the body of the if
    statement swaps the element at those indexes. The else condition breaks the infinite
    loop any time `greater_than_pivot_index` becomes greater than `less_than_pivot_index`.
    In such a condition, it means that `greater_than_pivot_index` and `less_than_pivot_index`
    have crossed over each other.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`greater_than_pivot_index < less_than_pivot_index`，if语句的主体交换了这些索引处的元素。else条件在任何时候`greater_than_pivot_index`变得大于`less_than_pivot_index`时打破无限循环。在这种情况下，这意味着`greater_than_pivot_index`和`less_than_pivot_index`已经交叉。
- en: 'Our array now looks like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数组现在是这样的：
- en: '![](assets/f4888a16-82c6-4fdf-8293-a3dfb72e8e24.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f4888a16-82c6-4fdf-8293-a3dfb72e8e24.jpg)'
- en: The break statement is executed when `less_than_pivot_index` is equal to `3`
    and `greater_than_pivot_index` is equal to `4`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当`less_than_pivot_index`等于`3`且`greater_than_pivot_index`等于`4`时，执行break语句。
- en: 'As soon as we exit the `while` loop, we interchange the element at `unsorted_array[less_than_pivot_index]`
    with that of `less_than_pivot_index`, which is returned as the index of the pivot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们退出`while`循环，我们就会交换`unsorted_array[less_than_pivot_index]`的元素和`less_than_pivot_index`的元素，后者作为枢轴的索引返回：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The image below shows how the code interchanges 4 with 43 as the last step
    in the partitioning process:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图片显示了代码在分区过程的最后一步中如何交换4和43：
- en: '![](assets/3dbea1c3-5526-45a0-89c1-c3952d09044c.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3dbea1c3-5526-45a0-89c1-c3952d09044c.jpg)'
- en: To recap, the first time the quick sort function was called, it was partitioned
    about the element at index **0**. After the return of the partitioning function,
    we obtain the array `[4, 3, 20, 43, 89, 77]`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，第一次调用快速排序函数时，它是围绕索引**0**的元素进行分区的。在分区函数返回后，我们得到数组`[4, 3, 20, 43, 89, 77]`。
- en: As you can see, all elements to the right of element **43** are greater, while
    those to the left are smaller. The partitioning is complete.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，元素**43**右边的所有元素都更大，而左边的元素更小。分区完成了。
- en: Using the split point 43 with index 3, we will recursively sort the two sub-arrays
    `[4, 30, 20]` and `[89, 77]` using the same process we just went through.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分割点43和索引3，我们将递归地对两个子数组`[4, 30, 20]`和`[89, 77]`进行排序，使用刚刚经历的相同过程。
- en: 'The body of the main `quick sort` function is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 主`quick sort`函数的主体如下：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `quick sort` function is a very simple method, no more than 6 lines of code.
    The heavy lifting is done by the `partition` function. When the `partition` method
    is called it returns the partition point. This is the point in the `unsorted_array`
    where all elements to the left are less than the pivot and all elements to its
    right are greater than it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`quick sort`函数是一个非常简单的方法，不超过6行代码。繁重的工作由`partition`函数完成。当调用`partition`方法时，它返回分区点。这是`unsorted_array`中的一个点，左边的所有元素都小于枢轴，右边的所有元素都大于它。'
- en: 'When we print the state of `unsorted_array` immediately after the partition
    progress, we see clearly how the partitioning is happening:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在分区进度之后立即打印`unsorted_array`的状态时，我们清楚地看到了分区是如何进行的：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Taking a step back, let's sort the first sub array after the first partition
    has happened. The partitioning of the `[4, 3, 20]` sub array will stop when `greater_than_pivot_index`
    is at index `2` and `less_than_pivot_index` is at index `1`. At that point, the
    two markers are said to have crossed. Because `greater_than_pivot_index` is greater
    than `less_than_pivot_index`, further execution of the `while` loop will cease.
    Pivot 4 will be exchanged with `3`, while index `1` is returned as the partition
    point.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 退一步，让我们在第一次分区发生后对第一个子数组进行排序。`[4, 3, 20]`子数组的分区将在`greater_than_pivot_index`在索引`2`和`less_than_pivot_index`在索引`1`时停止。在那一点上，两个标记被认为已经交叉。因为`greater_than_pivot_index`大于`less_than_pivot_index`，`while`循环的进一步执行将停止。枢轴4将与`3`交换，而索引`1`将作为分区点返回。
- en: The quick sort algorithm has a **O**(*n²*) worst case complexity, but it is
    efficient when sorting large amounts of data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 快速排序算法的最坏情况复杂度为**O**(*n²*)，但在对大量数据进行排序时效率很高。
- en: Heap sort
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆排序
- en: In [Chapter 11](db2adce8-072d-4722-ae9d-6e32791c97d6.xhtml), *Graphs and Other
    Algorithms*, we implemented the (binary) heap data structure. Our implementation
    always made sure that after an element has been removed or added to a heap, the
    heap order property is maintained by using the sink and float helper methods.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](db2adce8-072d-4722-ae9d-6e32791c97d6.xhtml)中，*图和其他算法*，我们实现了（二叉）堆数据结构。我们的实现始终确保在元素被移除或添加到堆后，使用sink和float辅助方法来维护堆顺序属性。
- en: 'The heap data structure can be used to implement the sorting algorithm called
    the heap sort. As a recap, let''s create a simple heap with the following items:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 堆数据结构可以用来实现称为堆排序的排序算法。回顾一下，让我们创建一个简单的堆，其中包含以下项目：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The heap, `h`, is created and the elements in the `unsorted_list` are inserted.
    After each method call to `insert`, the heap order property is restored by the
    subsequent call to the `float` method. After loop has terminated, at the top of
    our heap will be element `4`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 堆`h`被创建，并且`unsorted_list`中的元素被插入。在每次调用`insert`方法后，堆顺序属性都会通过随后调用`float`方法得到恢复。循环终止后，我们的堆顶部将是元素`4`。
- en: The number of elements in our heap is `10`. If we call the `pop` method on the
    heap object `h`, 10 times and store the actual elements being popped, we end up
    with a sorted list. After each `pop` operation, the heap is readjusted to maintain
    the heap order property.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们堆中的元素数量是`10`。如果我们在堆对象`h`上调用`pop`方法10次并存储实际弹出的元素，我们最终得到一个排序好的列表。每次`pop`操作后，堆都会重新调整以保持堆顺序属性。
- en: 'The `heap_sort` method is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`heap_sort`方法如下：'
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `for` loop simply calls the `pop` method `self.size` number of times. `sorted_list`
    will contain a sorted list of items after the loop terminates.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环简单地调用`pop`方法`self.size`次。循环终止后，`sorted_list`将包含一个排序好的项目列表。'
- en: The `insert` method is called *n* number of times. Together with the `float`
    method, the `insert` operation takes a worst case runtime of **O**(*n log n*),
    as does the `pop` method. As such, this sorting algorithm incurs a worst case
    runtime of **O**(*n log n*).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`insert`方法被调用*n*次。与`float`方法一起，`insert`操作的最坏情况运行时间为**O**(*n log n*)，`pop`方法也是如此。因此，这种排序算法的最坏情况运行时间为**O**(*n
    log n*)。'
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have explored a number of sorting algorithms. Quick sort
    performs much better than the other sorting algorithms. Of all the algorithms
    discussed, quick sort preserves the index of the list that it sorts. We'll use
    this property in the next chapter as we explore the selection algorithms.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了许多排序算法。快速排序比其他排序算法表现要好得多。在讨论的所有算法中，快速排序保留了它所排序的列表的索引。在下一章中，我们将利用这一特性来探讨选择算法。
