- en: AWS Cloud Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS云网络
- en: Cloud computing is one of the major trends in computing today. Public cloud
    providers have transformed the high-tech industry and what it means to launch
    a service from scratch. We no longer need to build our own infrastructure; we can
    pay the public cloud providers to rent a portion of their resources for our infrastructure
    needs. Nowadays, walking around any technology conferences or meetups, we will
    be hard-pressed to find a person who has not learned about, used, or built services
    based in the cloud. Cloud computing is here, and we better get used to working
    with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算是当今计算领域的主要趋势之一。公共云提供商已经改变了高科技行业，以及从零开始推出服务的含义。我们不再需要构建自己的基础设施；我们可以支付公共云提供商租用他们资源的一部分来满足我们的基础设施需求。如今，在任何技术会议或聚会上，我们很难找到一个没有了解、使用或构建基于云的服务的人。云计算已经到来，我们最好习惯与之一起工作。
- en: There are several service models of cloud computing, roughly divided into **Software-as-a-Service**
    (**SaaS**) ([https://en.wikipedia.org/wiki/Software_as_a_service](https://en.wikipedia.org/wiki/Software_as_a_service)),
    **Platform-as-a-Service** (**PaaS**) ([https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS)](https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS))),
    and **Infrastructure-as-a-Service** (**IaaS**) ([https://en.wikipedia.org/wiki/Infrastructure_as_a_service](https://en.wikipedia.org/wiki/Infrastructure_as_a_service)).
    Each service model offers a different level of abstraction from the user's perspective.
    For us, networking is part of the Infrastructure-as-a-Service offering and the
    focus of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算有几种服务模型，大致分为软件即服务（SaaS）（[https://en.wikipedia.org/wiki/Software_as_a_service](https://en.wikipedia.org/wiki/Software_as_a_service)）、平台即服务（PaaS）（[https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS)](https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS)）和基础设施即服务（IaaS）（[https://en.wikipedia.org/wiki/Infrastructure_as_a_service](https://en.wikipedia.org/wiki/Infrastructure_as_a_service)）。每种服务模型从用户的角度提供了不同的抽象级别。对我们来说，网络是基础设施即服务提供的一部分，也是本章的重点。
- en: '**Amazon Web Services** (**AWS**—[https://aws.amazon.com/](https://aws.amazon.com/))
    is the first company to offer IaaS public cloud services and the clear leader
    in the space by market share in 2018\. If we define the term **Software Defined
    Networking** (**SDN**) as a group of software services working together to create
    network constructs – IP addresses, access lists, Network Address Translation,
    routers – we can make the argument that AWS is the world''s largest implementation
    of SDN. They utilize their massive scale of the global network, data centers,
    and hosts to offer an amazing array of networking services.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊云服务（AWS）是第一家提供IaaS公共云服务的公司，也是2018年市场份额方面的明显领导者。如果我们将“软件定义网络”（SDN）定义为一组软件服务共同创建网络结构
    - IP地址、访问列表、网络地址转换、路由器 - 我们可以说AWS是世界上最大的SDN实现。他们利用全球网络、数据中心和主机的大规模来提供令人惊叹的各种网络服务。
- en: If you are interested in learning about Amazon's scale and networking, I would
    highly recommend taking a look at James Hamilton's AWS re:Invent 2014 talk: [https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ).
    It is a rare insider's view of the scale and innovation at AWS.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣了解亚马逊的规模和网络，我强烈建议您观看James Hamilton在2014年AWS re:Invent的演讲：[https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ)。这是一个罕见的内部人员对AWS规模和创新的视角。
- en: 'In this chapter, we will discuss the networking services offered by the AWS
    cloud services and how we can use Python to work with them:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论AWS云服务提供的网络服务以及如何使用Python与它们一起工作：
- en: AWS setup and networking overview
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS设置和网络概述
- en: Virtual private cloud
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟私有云
- en: Direct Connect and VPN
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接连接和VPN
- en: Networking scaling services
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络扩展服务
- en: Other AWS network services
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他AWS网络服务
- en: AWS setup
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS设置
- en: If you do not already have an AWS account and wish to follow along with these
    examples, please log on to [https://aws.amazon.com/](https://aws.amazon.com/)
    and sign up. The process is pretty straightforward and simple; you will need a
    credit card and some form of verification. AWS offers a number of services in
    a free tier ([https://aws.amazon.com/free/](https://aws.amazon.com/free/)), where
    you can use some of the most popular services for free up to a certain level.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有AWS账户并希望跟随这些示例，请登录[https://aws.amazon.com/](https://aws.amazon.com/)并注册。这个过程非常简单明了；您需要一张信用卡和某种形式的验证。AWS在免费套餐中提供了许多服务（[https://aws.amazon.com/free/](https://aws.amazon.com/free/)），在一定水平上可以免费使用一些最受欢迎的服务。
- en: 'Some of the services listed are free for the first year, and others are free
    up to a certain limit without time restraint. Please check the AWS site for the
    latest offerings:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的一些服务在第一年是免费的，其他服务在一定限额内是免费的，没有时间限制。请查看AWS网站获取最新的优惠。
- en: '![](assets/c63f6039-b3d3-41b9-9654-c91aa3b51537.png)AWS free tier'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c63f6039-b3d3-41b9-9654-c91aa3b51537.png)AWS免费套餐'
- en: 'Once you have an account, you can sign in via the AWS console ([https://console.aws.amazon.com/](https://console.aws.amazon.com/))
    and take a look at the different services offered by AWS. The console is where
    we can configure all the services and look at our monthly bills:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了账户，您可以通过AWS控制台（[https://console.aws.amazon.com/](https://console.aws.amazon.com/)）登录并查看AWS提供的不同服务。控制台是我们可以配置所有服务并查看每月账单的地方。
- en: '![](assets/40bd402d-f546-4d6c-b4bc-157cff3d978a.png)AWS console'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/40bd402d-f546-4d6c-b4bc-157cff3d978a.png)AWS控制台'
- en: AWS CLI and Python SDK
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS CLI和Python SDK
- en: 'We can also manage the AWS services via the command-line interface. The AWS
    CLI is a Python package that can be installed via PIP ([https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)).
    Let''s install it on our Ubuntu host:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过命令行界面管理AWS服务。AWS CLI是一个可以通过PIP安装的Python包（[https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)）。让我们在Ubuntu主机上安装它：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the AWS CLI is installed, for easier and more secure access, we will create
    a user and configure AWS CLI with the user credentials. Let''s go back to the
    AWS console and select IAM for user and access management:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了AWS CLI后，为了更轻松和更安全地访问，我们将创建一个用户并使用用户凭据配置AWS CLI。让我们回到AWS控制台，选择IAM进行用户和访问管理：
- en: '![](assets/5fc1647e-cd89-424f-81af-e674415d622c.png) AWS IAM'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5fc1647e-cd89-424f-81af-e674415d622c.png) AWS IAM'
- en: 'We can choose `Users` on the left panel to create a user:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在左侧面板上选择“用户”来创建用户：
- en: '![](assets/697ef15f-61f3-445d-a5ef-3f24332c0a84.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/697ef15f-61f3-445d-a5ef-3f24332c0a84.png)'
- en: 'Select programmatic access and assign the user to the default administrator
    group:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 选择编程访问并将用户分配给默认管理员组：
- en: '![](assets/b6f17d3f-d822-41e8-a054-4089af2a9e9d.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6f17d3f-d822-41e8-a054-4089af2a9e9d.png)'
- en: 'The last step will show an Access key ID and a Secret access key. Copy them
    into a text file and keep it in a safe place:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步将显示访问密钥ID和秘密访问密钥。将它们复制到文本文件中并保存在安全的地方：
- en: '![](assets/3a53eaff-674a-4c07-8d58-3e256e86bfab.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3a53eaff-674a-4c07-8d58-3e256e86bfab.png)'
- en: 'We will complete the AWS CLI authentication credential setup via `aws configure` in
    the terminal. We will go over AWS regions in the upcoming section; we will use
    `us-east-1` for now, but feel free to come back and change this value later:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过终端中的`aws configure`完成AWS CLI身份验证凭据设置。我们将在接下来的部分中介绍AWS地区；现在我们将使用`us-east-1`，但随时可以返回并更改这个值：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will also install the AWS Python SDK, Boto3 ([https://boto3.readthedocs.io/en/latest/](https://boto3.readthedocs.io/en/latest/)):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将安装AWS Python SDK，Boto3 ([https://boto3.readthedocs.io/en/latest/](https://boto3.readthedocs.io/en/latest/))：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are now ready to move on to the subsequent sections, starting with an introduction
    to AWS cloud networking services.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备继续进行后续部分，从介绍AWS云网络服务开始。
- en: AWS network overview
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS网络概述
- en: 'When we discuss AWS services, we need to start at the top with regions and
    availability zones. They have big implications for all of our services. At the
    time of writing this book, AWS listed 18 Regions, 55 **Availability**** Zones**
    (**AZ**), and one local region around the world. In the words of AWS Global Infrastructure,
    ([https://aws.amazon.com/about-aws/global-infrastructure/](https://aws.amazon.com/about-aws/global-infrastructure/)):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论AWS服务时，我们需要从地区和可用性区开始。它们对我们所有的服务都有重大影响。在撰写本书时，AWS列出了18个地区、55个可用性区和一个全球范围的本地地区。用AWS全球基础设施的话来说，([https://aws.amazon.com/about-aws/global-infrastructure/](https://aws.amazon.com/about-aws/global-infrastructure/))：
- en: '"The AWS Cloud infrastructure is built around Regions and Availability Zones
    (AZs). AWS Regions provide multiple, physically separated and isolated Availability
    Zones which are connected with low latency, high throughput, and highly redundant
    networking."'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “AWS云基础设施建立在地区和可用性区（AZ）周围。AWS地区提供多个物理上分离和隔离的可用性区，这些区域通过低延迟、高吞吐量和高度冗余的网络连接在一起。”
- en: 'Some of the services AWS offer are global, but most of the services are region-based.
    What this means for us is that we should build our infrastructure in a region
    that is closest to our intended users. This will reduce the latency of the service
    to our customer. If our users are in the United States east coast, we should pick
    `us-east-1` (N. Virginia) or `us-east-2` (Ohio) as our region if the service is
    regional-based:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供的一些服务是全球性的，但大多数服务是基于地区的。对我们来说，这意味着我们应该在最接近我们预期用户的地区建立基础设施。这将减少服务对客户的延迟。如果我们的用户在美国东海岸，如果服务是基于地区的，我们应该选择`us-east-1`（北弗吉尼亚）或`us-east-2`（俄亥俄）作为我们的地区：
- en: '![](assets/8255a3ce-7fed-4297-aa14-49c62b673c65.png)AWS regions'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8255a3ce-7fed-4297-aa14-49c62b673c65.png)AWS地区'
- en: 'Not all regions are available to all users, for example, GovCloud and the China region
    are not available to users in the United States by default. You can list the regions
    available to you via `aws ec2 describe-regions`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有地区都对所有用户可用，例如，GovCloud和中国地区默认情况下对美国用户不可用。您可以通过`aws ec2 describe-regions`列出对您可用的地区：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All the regions are completely independent of one another. Most resources are
    not replicated across regions. If we have multiple regions, say `US-East` and
    `US-West`, and need redundancy between them, we will need to replicate the necessary
    resources ourselves. The way you choose a region is on the top right corner of
    the console:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所有地区都是完全独立的。大多数资源不会在地区之间复制。如果我们有多个地区，比如`US-East`和`US-West`，并且需要它们之间的冗余，我们将需要自己复制必要的资源。选择地区的方式是在控制台右上角：
- en: '![](assets/6c3fe18c-aab2-4757-85b8-ce9584f5eddd.png)If the service is region-based,
    for example, EC2, the portal will only show the service when the right region
    is selected. If our EC2 instances are in `us-east-1` and we are looking at the
    us-west-1 portal, none of the EC2 instances will show up. I have made this mistake
    a few times, and wondered where all of my instances went!'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6c3fe18c-aab2-4757-85b8-ce9584f5eddd.png)如果服务是基于地区的，例如EC2，只有在选择正确的地区时，门户才会显示该服务。如果我们的EC2实例在`us-east-1`，而我们正在查看us-west-1门户，则不会显示任何EC2实例。我犯过这个错误几次，并且想知道我的所有实例都去哪了！'
- en: 'The number behind the regions in the preceding AWS regions screenshot represents
    the number of AZ in each region. Each region has multiple availability zones.
    Each availability zone is isolated, but the AZs in a region are connected through
    low-latency fiber connections:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的AWS地区截图中，地区后面的数字代表每个地区的AZ数量。每个地区有多个可用性区。每个可用性区都是隔离的，但地区中的可用性区通过低延迟的光纤连接在一起：
- en: '![](assets/9d72cf3c-5508-4524-966e-84554a9fa937.png)AWS regions and availability zones'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9d72cf3c-5508-4524-966e-84554a9fa937.png)AWS地区和可用性区'
- en: Many of the resources we built are copied across availability zones. The concept
    of AZ is very important, and its constraints are important to us for the network
    services we will build.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建的许多资源都会在可用性区复制。AZ的概念非常重要，它的约束对我们构建的网络服务非常重要。
- en: AWS independently maps availability zones to identifiers for each account. For
    example, my availability zone, us-eas-1a, might not be the same as `us-east-1a`
    for another account.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: AWS独立地为每个账户将可用区映射到标识符。例如，我的可用区us-eas-1a可能与另一个账户的`us-east-1a`不同。
- en: 'We can check the AZs in a region in AWS CLI:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用AWS CLI检查一个区域中的可用区：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Why do we care about regions and availability zones so much? As we will see
    in the coming few sections, the networking services are usually bound by the region
    and availability zones. **Virtual Private Cloud (VPC)**, for example, needs to
    reside entirely in one region, and each subnet needs to reside entirely in one
    availability zone. On the other hand, **NAT Gateway** is AZ-bound, so we will
    need to create one per AZ if we needed redundancy. We will go over both services
    in more detail, but their use cases are offered here as examples of how regions
    and availability zones are the basis of the AWS network services offering.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们如此关心区域和可用区？正如我们将在接下来的几节中看到的，网络服务通常受区域和可用区的限制。例如，**虚拟私有云（VPC）**需要完全位于一个区域，每个子网需要完全位于一个可用区。另一方面，**NAT网关**是与可用区相关的，因此如果我们需要冗余，就需要为每个可用区创建一个。我们将更详细地介绍这两项服务，但它们的用例在这里作为AWS网络服务提供的基础的例子。
- en: '**AWS Edge locations** are part of the **AWS CloudFront** content delivery
    network in 59 cities across 26 countries. These edge locations are used to distribute
    content with low latency with a smaller footprint than the full data center Amazon
    builds for the region and availability zones. Sometimes, people mistook the edge
    locations'' point-of-presence for full AWS regions. If the footprint is listed
    as an edge location only, the AWS services such as EC2 or S3 will not be offered.
    We will revisit the edge location in the *AWS CloudFront* section.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS边缘位置**是**AWS CloudFront**内容传递网络的一部分，分布在26个国家的59个城市。这些边缘位置用于以低延迟分发内容，比整个数据中心的占地面积小。有时，人们会误将边缘位置的出现地点误认为是完整的AWS区域。如果占地面积仅列为边缘位置，那么AWS服务，如EC2或S3，将不会提供。我们将在*AWS
    CloudFront*部分重新讨论边缘位置。'
- en: '**AWS Transit Centers** is one of the least documented aspects of AWS networks.
    It was mentioned in James Hamilton''s 2014 **AWS re:Invent** keynote ([https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ))
    as the aggregation points for different AZs in the region. To be fair, we do not
    know if the transit center still exists and functions the same way after all these
    years. However, it is fair to make an educated guess about the placement of the
    transit center and its correlation about the **AWS Direct Connect** service that
    we will look at later in this chapter.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Transit Centers**是AWS网络中最少有文档记录的方面之一。它在James Hamilton的2014年**AWS re:Invent**主题演讲中提到（[https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ)），作为该区域不同可用区的聚合点。公平地说，我们不知道转换中心是否仍然存在并且在这些年后是否仍然起作用。然而，对于转换中心的位置以及它与我们将在本章后面看到的**AWS
    Direct Connect**服务的相关性，做出一个合理的猜测是公平的。'
- en: James Hamilton, a VP and distinguished engineer from AWS, is one of the most
    influential technologists at AWS. If there is anybody who I would consider authoritative
    when it comes to AWS networking, it would be him. You can read more about his
    visions on his blog, Perspectives, at [https://perspectives.mvdirona.com/](https://perspectives.mvdirona.com/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: James Hamilton是AWS的副总裁和杰出工程师之一，是AWS最有影响力的技术专家之一。如果有人在AWS网络方面具有权威性，那就是他。您可以在他的博客Perspectives上阅读更多关于他的愿景，网址为[https://perspectives.mvdirona.com/](https://perspectives.mvdirona.com/)。
- en: 'It is impossible to cover all of the services related to AWS in one chapter.
    There are some relevant services not directly related to networking that we do
    not have the space to cover, but we should be familiar with:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个章节中不可能涵盖所有与AWS相关的服务。有一些与网络直接相关的相关服务我们没有空间来涵盖，但我们应该熟悉：
- en: The **Identify and Access Management** (**IAM**)service, [https://aws.amazon.com/iam/](https://aws.amazon.com/iam/), is
    the service that enables us to manage access to AWS services and resources securely.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份和访问管理**（**IAM**）服务，[https://aws.amazon.com/iam/](https://aws.amazon.com/iam/)，是使我们能够安全地管理对AWS服务和资源的访问的服务。'
- en: '**Amazon Resource Names** (**ARNs**), [https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html),
    uniquely identify AWS resources across all of AWS. This resource name is important
    when we need to identify a service, such as DynamoDB and API Gateway, that needs
    access to our VPC resources.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon资源名称**（**ARNs**），[https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)，在整个AWS中唯一标识AWS资源。当我们需要识别需要访问我们的VPC资源的服务时，这个资源名称是重要的，比如DynamoDB和API
    Gateway。'
- en: '**Amazon Elastic Compute Cloud** (**EC2**), [https://aws.amazon.com/ec2/](https://aws.amazon.com/ec2/),
    is the service that enables us to obtain and provision compute capacities, such
    as Linux and Windows instances, via AWS interfaces. We will use EC2 instances
    throughout this chapter in our examples.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon弹性计算云**（**EC2**），[https://aws.amazon.com/ec2/](https://aws.amazon.com/ec2/)，是使我们能够通过AWS接口获取和配置计算能力，如Linux和Windows实例的服务。我们将在本章的示例中使用EC2实例。'
- en: For the sake of learning, we will exclude AWS GovCloud (US) and China, neither
    of which uses the AWS global infrastructure and have their own limitations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习的目的，我们将排除AWS GovCloud（美国）和中国，它们都不使用AWS全球基础设施，并且有自己的限制。
- en: 'This was a relatively long introduction to the AWS network overview, but an
    important one. These concepts and terms will be referred to in the rest of the
    chapters in this book. In the upcoming section, we will take a look at the most
    import concept (in my opinion) for AWS networking: the virtual private cloud.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对AWS网络概述的一个相对较长的介绍，但是非常重要。这些概念和术语将在本书的其余章节中被引用。在接下来的章节中，我们将看一下AWS网络中最重要的概念（在我看来）：虚拟私有云。
- en: Virtual private cloud
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟私有云
- en: '**Amazon Virtual Private Cloud (Amazon VPC)** enables customers to launch AWS
    resources into a virtual network dedicated to the customer''s account. It is truly
    a customizable network that allows you to define your own IP address range, add
    and delete subnets, create routes, add VPN gateways, associate security policies,
    connect EC2 instances to your own datacenter, and much more. In the early days
    when VPC was not available, all EC2 instances in the AZ were on a single, flat
    network that was shared among all customers. How comfortable would the customer
    be with putting their information in the cloud? Not very, I''d imagine. Between
    the launch of EC2 in 2007 until the launch of VPC in 2009, VPC functions was one
    of the most requested features of AWS.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊虚拟私有云（Amazon VPC）使客户能够将AWS资源启动到专门为客户账户提供的虚拟网络中。这是一个真正可定制的网络，允许您定义自己的IP地址范围，添加和删除子网，创建路由，添加VPN网关，关联安全策略，将EC2实例连接到自己的数据中心等等。在VPC不可用的早期，AZ中的所有EC2实例都在一个共享的单一平面网络上。客户将把他们的信息放在云中会有多舒服呢？我想不会很舒服。从2007年EC2推出到2009年VPC推出之前，VPC功能是AWS最受欢迎的功能之一。
- en: The packets leaving your EC2 host in a VPC are intercepted by the Hypervisor.
    The Hypervisor will check them with a mapping service which understands our VPC
    construct. The packets leaving your EC2 hosts are encapsulated with the AWS real
    servers' source and destination addresses. The encapsulation and mapping service
    allows for the flexibility of VPC, but also some of the limitations (multicast,
    sniffing) of VPC. This is, after all, a virtual network.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在VPC中离开您的EC2主机的数据包将被Hypervisor拦截。Hypervisor将使用了解我们VPC结构的映射服务对其进行检查。离开您的EC2主机的数据包将使用AWS真实服务器的源和目的地地址进行封装。封装和映射服务允许VPC的灵活性，但也有一些VPC的限制（多播，嗅探）。毕竟，这是一个虚拟网络。
- en: Since December 2013, all EC2 instances are VPC-only. If we use a launch wizard
    to create our EC2 instance, it will automatically be put into a default VPC with
    a virtual internet gateway for public access. In my opinion, all but the most
    basic use cases should use the default VPC. For most cases, we would need to define
    our non-default, customized VPC.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 自2013年12月以来，所有EC2实例都是VPC-only。如果我们使用启动向导创建EC2实例，它将自动放入具有虚拟互联网网关以进行公共访问的默认VPC。在我看来，除了最基本的用例，所有情况都应该使用默认VPC。对于大多数情况，我们需要定义我们的非默认自定义VPC。
- en: 'Let''s create the following VPC using the AWS console in `us-east-1`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`us-east-1`使用AWS控制台创建以下VPC：
- en: '![](assets/afa05231-3c87-47f3-a238-273e37860134.png)Our first VPC in US-East-1'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/afa05231-3c87-47f3-a238-273e37860134.png)我们在美国东部的第一个VPC'
- en: If you recall, VPC is AWS region-bound, and the subnets are Availability Zone-based.
    Our first VPC will be based in `us-east-1`; the three subnets will be allocated
    to three different availability zones in 1a, 1b, and 1c.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得，VPC是AWS区域绑定的，子网是基于可用性区域的。我们的第一个VPC将基于`us-east-1`；三个子网将分配给1a、1b和1c中的三个不同的可用性区域。
- en: 'Using the AWS console to create the VPC and subnets is pretty straightforward,
    and AWS provides a number of good tutorials online. I have listed the steps with
    the associated links on the VPC dashboard:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AWS控制台创建VPC和子网非常简单，AWS在网上提供了许多很好的教程。我已经在VPC仪表板上列出了相关链接的步骤：
- en: '![](assets/c1fe117d-9253-45cb-bb5a-934f48d39aef.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c1fe117d-9253-45cb-bb5a-934f48d39aef.png)'
- en: 'The first two steps are point and click processes that most network engineers
    can work through, even without prior experience. By default, the VPC only contains
    the local route, `10.0.0.0/16`. Now, we will create an internet gateway and associate
    it with the VPC:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个步骤是点对点的过程，大多数网络工程师甚至没有先前的经验也可以完成。默认情况下，VPC只包含本地路由`10.0.0.0/16`。现在，我们将创建一个互联网网关并将其与VPC关联：
- en: '![](assets/4d402e8e-89ff-4a1d-82f2-9ac736fffdca.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4d402e8e-89ff-4a1d-82f2-9ac736fffdca.png)'
- en: 'We can then create a custom route table with a default route pointing to the
    internet gateway. We will associate this route table with our subnet in `us-east-1a`,
    `10.0.0.0/24`, thus allowing it to be public facing:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以创建一个自定义路由表，其中包含指向互联网网关的默认路由。我们将把这个路由表与我们在`us-east-1a`的子网`10.0.0.0/24`关联，从而使其可以面向公众：
- en: '![](assets/04ccec30-9248-4b9d-8f58-ea68cbbcd6d8.png)Route table'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/04ccec30-9248-4b9d-8f58-ea68cbbcd6d8.png)路由表'
- en: 'Let''s use Boto3 Python SDK to see what we have created; I used the tag `mastering_python_networking_demo`
    as the tag for the VPC, which we can use as the filer:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Boto3 Python SDK来查看我们创建了什么；我使用标签`mastering_python_networking_demo`作为VPC的标签，我们可以将其用作过滤器：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This script will allow us to programmatically query the region for the VPC
    we created:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将允许我们以编程方式查询我们创建的VPC的区域：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Boto3 VPC API documentation can be found at [https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc](https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Boto3 VPC API文档可以在[https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc](https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc)找到。
- en: You may be wondering about how the subnets can reach one another within the
    VPC. In a physical network, the network needs to connect to a router to reach
    beyond its own local network. It is not so different in VPC, except it is an *implicit
    router* with a default routing table of the local network, which in our example
    is `10.0.0.0/16`. This implicit router was created when we created our VPC.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道VPC中的子网如何相互到达。在物理网络中，网络需要连接到路由器才能到达其本地网络之外。在VPC中也是如此，只是它是一个具有本地网络默认路由表的*隐式路由器*，在我们的示例中是`10.0.0.0/16`。当我们创建VPC时，将创建此隐式路由器。
- en: Route tables and route targets
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由表和路由目标
- en: Routing is one of the most important topics in network engineering. It is worth
    looking at it more closely. We already saw that we had an implicit router and
    the main routing table when we created the VPC. From the last example, we created
    an internet gateway, a custom routing table with a default route pointing to the
    internet gateway, and associated the custom routing table with a subnet.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是网络工程中最重要的主题之一。值得更仔细地研究它。我们已经看到在创建VPC时有一个隐式路由器和主路由表。从上一个示例中，我们创建了一个互联网网关，一个默认路由指向互联网网关的自定义路由表，并将自定义路由表与子网关联。
- en: 'The concept of the route target is where VPC is a bit different than traditional
    networking. In summary:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 路由目标的概念是VPC与传统网络有些不同的地方。总之：
- en: Each VPC has an implicit router
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个VPC都有一个隐式路由器
- en: Each VPC has the main routing table with the local route populated
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个VPC都有一个带有本地路由的主路由表
- en: You can create custom-routing tables
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以创建自定义路由表
- en: Each subnet can follow a custom-routing table or the default main routing table
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个子网可以遵循自定义路由表或默认的主路由表
- en: The route table route target can be an internet gateway, NAT gateway, VPC peers,
    and so on
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由表路由目标可以是互联网网关、NAT网关、VPC对等连接等
- en: 'We can use Boto3 to look at the custom route tables and association with the
    subnets:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Boto3查看自定义路由表和子网的关联：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We only have one custom route table:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只有一个自定义路由表：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating the subnets are straight forward by clicking on the left subnet section
    and follow the on-screen instruction. For our purpose, we will create three subnets,
    `10.0.0.0/24` public subnet, `10.0.1.0/24`, and `10.0.2.0/24` private subnets.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击左侧子网部分并按照屏幕上的指示进行操作，创建子网非常简单。对于我们的目的，我们将创建三个子网，`10.0.0.0/24`公共子网，`10.0.1.0/24`和`10.0.2.0/24`私有子网。
- en: 'We now have a working VPC with three subnets: one public and two private. So
    far, we have used the AWS CLI and Boto3 library to interact with AWS VPC. Let''s
    take a look at another automation tool, **CloudFormation**.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个带有三个子网的工作VPC：一个公共子网和两个私有子网。到目前为止，我们已经使用AWS CLI和Boto3库与AWS VPC进行交互。让我们看看另一个自动化工具**CloudFormation**。
- en: Automation with CloudFormation
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CloudFormation进行自动化
- en: 'AWS CloudFomation ([https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/)),
    is one way in which we can use a text file to describe and launch the resource
    that we need. We can use CloudFormation to provision another VPC in the `us-west-1`
    region:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFomation ([https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/))，是我们可以使用文本文件描述和启动所需资源的一种方式。我们可以使用CloudFormation在`us-west-1`地区配置另一个VPC：
- en: '![](assets/d37b0edc-2d29-4752-a72b-62c4184507a2.png)VPC for US-West-1'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/d37b0edc-2d29-4752-a72b-62c4184507a2.png)美国西部的VPC'
- en: 'The CloudFormation template can be in YAML or JSON; we will use YAML for our
    first template for provisioning:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation模板可以是YAML或JSON；我们将使用YAML来创建我们的第一个配置模板：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can execute the template via the AWS CLI. Notice that we specify a region
    of `us-west-1` in our execution:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过AWS CLI执行模板。请注意，在我们的执行中指定了`us-west-1`地区：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can verify the status via AWS CLI:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过AWS CLI验证状态：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For demonstration purposes, the last CloudFormation template created a VPC
    without any subnet. Let''s delete that VPC and use the following template to create
    both the VPC as well as the subnet. Notice that we will not have the VPC-id before
    VPC creation, so we will use a special variable to reference the VPC-id in the
    subnet creation. This is the same technique we can use for other resources, such
    as the routing table and internet gateway:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，最后一个CloudFormation模板创建了一个没有任何子网的VPC。让我们删除该VPC，并使用以下模板创建VPC和子网。请注意，在VPC创建之前我们将没有VPC-id，因此我们将使用特殊变量来引用子网创建中的VPC-id。这是我们可以用于其他资源的相同技术，比如路由表和互联网网关：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can execute and verify the creation of the resources as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以执行并验证资源的创建如下：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can also verify the VPC and subnet information from the AWS console. We
    will verify the VPC from the console first:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从AWS控制台验证VPC和子网信息。我们将首先从控制台验证VPC：
- en: '![](assets/c08d36c4-58bc-4669-8468-0e1e363b3f7b.png)VPC in us-west-1'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c08d36c4-58bc-4669-8468-0e1e363b3f7b.png)VPC在us-west-1'
- en: 'We can also take a look at the subnet:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看子网：
- en: '![](assets/68f0b4e2-69b7-4e6c-a7ca-c5d6003ac4d3.png)Subnet in us-west-1'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/68f0b4e2-69b7-4e6c-a7ca-c5d6003ac4d3.png)us-west-1的子网'
- en: We now have two VPCs in the two coasts of the United States. They are currently
    behaving like two islands, each by themselves. This may or may not be your desired
    state of operation. If you would like the to VPC to be able to connect them to
    each other, we can use VPC peering ([https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html](https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html))
    to allow direct communication.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在美国两个海岸有两个VPC。它们目前的行为就像两个孤立的岛屿。这可能是您期望的操作状态，也可能不是。如果您希望VPC能够相互连接，我们可以使用VPC对等连接（[https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html](https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html)）来允许直接通信。
- en: VPC peering is not limited to the same account. You can connect VPCs across
    different accounts, as long as the request was accepted and the other aspects
    (security, routing, DNS name) are taken care of.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: VPC对等连接不限于同一帐户。只要请求被接受并且其他方面（安全性、路由、DNS名称）得到处理，您就可以连接不同帐户的VPC。
- en: In the coming section, we will take a look at VPC security groups and the network
    access control list.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将看一下VPC安全组和网络访问控制列表。
- en: Security groups and the network ACL
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全组和网络ACL
- en: 'AWS Security Groups and the Access Control list can be found under the Security
    section of your VPC:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: AWS安全组和访问控制列表可以在VPC的安全部分找到：
- en: '![](assets/8ecdda0a-5132-499c-bd48-8b417eed3499.png)VPC security'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8ecdda0a-5132-499c-bd48-8b417eed3499.png)VPC安全'
- en: 'A security group is a stateful virtual firewall that controls inbound and outbound
    access for resources. Most of the time, we will use the security group as a way
    to limit public access to our EC2 instance. The current limitation is 500 security
    groups in each VPC. Each security group can contain up to 50 inbound and 50 outbound
    rules. You can use the following sample script to create a security group and
    two simple ingress rules:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组是一个有状态的虚拟防火墙，用于控制资源的入站和出站访问。大多数情况下，我们将使用安全组来限制对我们的EC2实例的公共访问。当前限制是每个VPC中有500个安全组。每个安全组最多可以包含50个入站和50个出站规则。您可以使用以下示例脚本创建一个安全组和两个简单的入站规则：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can execute the script and receive confirmation on the creation of the security
    group that can be associated with other AWS resources:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以执行脚本并收到有关创建可与其他AWS资源关联的安全组的确认：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Network **Access Control Lists** (**ACLs**) is an additional layer of security
    that is stateless. Each subnet in VPC is associated with a network ACL. Since
    ACL is stateless, you will need to specify both inbound and outbound rules.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 网络访问控制列表（ACL）是一个无状态的额外安全层。VPC中的每个子网都与一个网络ACL相关联。由于ACL是无状态的，您需要指定入站和出站规则。
- en: 'The important differences between the security group and ACLs are as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组和ACL之间的重要区别如下：
- en: The security group operates at the network interface level where ACL operates
    at the subnet level
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组在网络接口级别操作，而ACL在子网级别操作
- en: For a security group, we can only specify allow rules but not deny rules, whereas
    ACL supports both allow and deny rules
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于安全组，我们只能指定允许规则，而ACL支持允许和拒绝规则
- en: A security group is stateful; return traffic is automatically allowed. Return
    traffic needs to be specifically allowed in ACL
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组是有状态的；返回流量会自动允许。返回流量需要在ACL中明确允许
- en: Let's take a look at one of the coolest feature of AWS networking, Elastic IP.
    When I initially learned about Elastic IP, I was blown away by the ability of
    assigning and reassigning IP addresses dynamically.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看AWS网络中最酷的功能之一，弹性IP。当我最初了解弹性IP时，我对动态分配和重新分配IP地址的能力感到震惊。
- en: Elastic IP
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹性IP
- en: '**Elastic IP** (**EIP**) is a way to use a public IPv4 address that''s reachable
    from the internet. It can be dynamically assigned to an EC2 instance, network
    interface, or other resources. A few characteristics of Elastic IP are as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性IP（EIP）是一种使用可以从互联网访问的公共IPv4地址的方式。它可以动态分配给EC2实例、网络接口或其他资源。弹性IP的一些特点如下：
- en: The Elastic IP is associated with the account and is region-specific. For example,
    the EIP in `us-east-1` can only be associated with resources in `us-east-1`.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性IP与账户关联，并且是特定于地区的。例如，`us-east-1`中的EIP只能与`us-east-1`中的资源关联。
- en: You can disassociate an Elastic IP from a resource, and re-associate it with
    a different resource. This flexibility can sometimes be used to ensure high availability.
    For example, you can migrate from a smaller EC2 instance to a larger EC2 instance
    by reassigning the same IP address from the small EC2 instance to the larger one.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以取消与资源的弹性IP关联，并将其重新关联到不同的资源。这种灵活性有时可以用于确保高可用性。例如，您可以通过将相同的IP地址从较小的EC2实例重新分配到较大的EC2实例来实现迁移。
- en: There is a small hourly charge associated with Elastic IP.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性IP有与之相关的小额每小时费用。
- en: 'You can request Elastic IP from the portal. After assignment, you can associate
    it with the desired resources:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从门户请求弹性IP。分配后，您可以将其与所需的资源关联：
- en: '![](assets/a40704c5-33fd-426b-b1be-f69f3075f380.png)Elastic IPUnfortunately,
    Elastic IP has a default limit of five per region, [https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a40704c5-33fd-426b-b1be-f69f3075f380.png)弹性IP不幸的是，弹性IP在每个地区有默认限制，[https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html)。'
- en: In the coming section, we will look at how we can use the NAT Gateway to allow
    communication for the private subnets to the internet.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将看看如何使用NAT网关允许私有子网与互联网通信。
- en: NAT Gateway
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NAT网关
- en: To allow the hosts in our EC2 public subnet to be accessed from the internet,
    we can allocate an Elastic IP and associate it with the network interface of the
    EC2 host. However, at the time of writing this book, there is a limit of five
    Elastic IPs per EC2-VPC ([https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips)).
    Sometimes, it would be nice to allow the host in a private subnet outbound access
    when needed without creating a permanent one-to-one mapping between the Elastic
    IP and the EC2 host.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许我们的EC2公共子网中的主机从互联网访问，我们可以分配一个弹性IP并将其与EC2主机的网络接口关联。然而，在撰写本书时，每个EC2-VPC最多只能有五个弹性IP的限制([https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips))。有时，当需要时，允许私有子网中的主机获得出站访问权限而不创建弹性IP和EC2主机之间的永久一对一映射会很好。
- en: 'This is where **NAT Gateway** can help, by allowing the hosts in the private
    subnet temporarily outbound access by performing a **Network Address Translation**
    (**NAT**). This operation is similar to the **Port Address Translation** (**PAT**)
    that we normally perform on the corporate firewall. To use a NAT Gateway, we can
    perform the following steps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是NAT网关可以帮助的地方，它允许私有子网中的主机通过执行网络地址转换（NAT）临时获得出站访问权限。这个操作类似于我们通常在公司防火墙上执行的端口地址转换（PAT）。要使用NAT网关，我们可以执行以下步骤：
- en: Create a NAT Gateway in a subnet with access to the internet gateway via the
    AWS CLI, Boto3 library, or AWS console. The NAT Gateway will need to be assigned
    with an Elastic IP.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过AWS CLI、Boto3库或AWS控制台在具有对互联网网关访问权限的子网中创建NAT网关。NAT网关将需要分配一个弹性IP。
- en: Point the default route in the private subnet to the NAT Gateway.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将私有子网中的默认路由指向NAT网关。
- en: The NAT Gateway will follow the default route to the internet gateway for external
    access.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NAT网关将遵循默认路由到互联网网关以进行外部访问。
- en: 'This operation can be illustrated in the following diagram:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作可以用下图来说明：
- en: '![](assets/ded1b88d-2dbe-4de3-b153-6899e345416c.png)NAT Gateway operations'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: NAT网关操作
- en: 'One of the most common questions for NAT Gateway typically surrounds which
    subnet the NAT Gateway should reside in. The rule of thumb is to remember that
    the NAT Gateway needs public access. Therefore, it should be created in the subnet
    with public internet access with an available Elastic IP to be assigned to it:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: NAT网关通常围绕着NAT网关应该位于哪个子网的最常见问题之一。经验法则是要记住NAT网关需要公共访问。因此，它应该在具有公共互联网访问权限的子网中创建，并分配一个可用的弹性IP：
- en: '![](assets/b105eeed-7e66-4fe6-a4fc-739c5e684ae7.png)NAT Gateway creation'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: NAT网关创建
- en: In the coming section, we will take a look at how to connect our shiny virtual
    network in AWS to our physical network.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将看一下如何将我们在AWS中闪亮的虚拟网络连接到我们的物理网络。
- en: Direct Connect and VPN
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接连接和VPN
- en: Up to this point, our VPC is a self-contained network that resides in the AWS
    network. It is flexible and functional, but to access the resources inside of
    the VPC, we will need to access them with their internet-facing services such
    as SSH and HTTPS.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的VPC是驻留在AWS网络中的一个自包含网络。它是灵活和功能齐全的，但要访问VPC内部的资源，我们需要使用它们的面向互联网的服务，如SSH和HTTPS。
- en: 'In this section, we will look at the two ways AWS allow us to connect to the
    VPC from our private network: IPSec VPN Gateway and Direct Connect.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下AWS允许我们从私人网络连接到VPC的两种方式：IPSec VPN网关和直接连接。
- en: VPN Gateway
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPN网关
- en: The first way to connect our on-premise network to VPC is with traditional IPSec
    VPN connections. We will need a publicly accessible device that can establish
    VPN connections to AWS's VPN device. The customer gateway needs to support route-based
    IPSec VPNs where the VPN connection is treated as a connection that a routing
    protocol can run over the virtual link. Currently, AWS recommends using BGP to
    exchange routes.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的本地网络连接到VPC的第一种方式是使用传统的IPSec VPN连接。我们需要一个可以与AWS的VPN设备建立VPN连接的公共可访问设备。客户网关需要支持基于路由的IPSec
    VPN，其中VPN连接被视为可以在虚拟链路上运行路由协议的连接。目前，AWS建议使用BGP交换路由。
- en: 'On the VPC side, we can follow a similar routing table where we can route a
    particular subnet toward the **Virtual Private Gateway** target:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在VPC端，我们可以遵循类似的路由表，可以将特定子网路由到**虚拟私有网关**目标：
- en: '![](assets/19a6440f-7df1-4c3c-90dc-b66f37a76114.png)VPC VPN connection (source: [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html))'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: VPC VPN连接（来源：[https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)）
- en: Besides IPSec VPN, we can also use a dedicated circuit to connect.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 除了IPSec VPN，我们还可以使用专用电路进行连接。
- en: Direct Connect
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接连接
- en: 'The IPSec VPN connection we saw is an easy way to provide connectivity for
    on-premise equipment to the AWS cloud resources. However, it suffers the same
    faults that IPSec over the internet always does: it is unreliable, and we have
    very little control over it. There is very little performance monitoring and no
    **Service-Level Agreement** (**SLA**) until the connection reaches a part of the
    internet that we can control.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的IPSec VPN连接是提供本地设备与AWS云资源连接的简单方法。然而，它遭受了IPSec在互联网上总是遭受的相同故障：它是不可靠的，我们对它几乎没有控制。性能监控很少，直到连接到我们可以控制的互联网部分才有**服务级别协议**（SLA）。
- en: For all of these reasons, any production-level, mission-critical traffic is
    more likely to traverse through the second option Amazon provides, that is, AWS
    Direct Connect. AWS Direct Connect allows customers to connect their data center
    and colocation to their AWS VPC with a dedicated virtual circuit. The somewhat
    difficult part of this operation is usually bringing our network to where we can
    connect with AWS physically, typically in a carrier hotel. You can find a list
    of the AWS Direct Connect locations here: [https://aws.amazon.com/directconnect/details/](https://aws.amazon.com/directconnect/details/).
    The Direct Connect link is just a fiber patch connection that you can order from
    the particular carrier hotel to patch the network to a network port and configure
    the dot1q trunk's connectivity.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 出于所有这些原因，任何生产级别的、使命关键的流量更有可能通过亚马逊提供的第二个选项，即AWS直接连接。AWS直接连接允许客户使用专用虚拟电路将他们的数据中心和机房连接到他们的AWS
    VPC。这个操作通常比较困难的部分通常是将我们的网络带到可以与AWS物理连接的地方，通常是在一个承载商酒店。您可以在这里找到AWS直接连接位置的列表：[https://aws.amazon.com/directconnect/details/](https://aws.amazon.com/directconnect/details/)。直接连接链接只是一个光纤补丁连接，您可以从特定的承载商酒店订购，将网络连接到网络端口并配置dot1q干线的连接。
- en: 'There are also increasingly more connectivity options for Direct Connect via
    a third-party carrier with MPLS circuits and aggregated links. One of the most
    affordable options that I found and use is the Equinix Cloud Exchange ([https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)).
    By using the Equinix Cloud Exchange, we can leverage the same circuit and connect
    to different cloud providers at a fraction of the cost of dedicated circuits:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 还有越来越多的通过第三方承运商使用MPLS电路和聚合链路进行直接连接的连接选项。我发现并使用的最实惠的选择之一是Equinix Cloud Exchange
    ([https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/))。通过使用Equinix
    Cloud Exchange，我们可以利用相同的电路并以较低成本连接到不同的云提供商：
- en: '![](assets/966cabb6-fb23-4921-96f6-290e979d6c9f.png)Equinix Cloud Exchange
    (source: [https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)[)](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/966cabb6-fb23-4921-96f6-290e979d6c9f.png)Equinix Cloud Exchange（来源：[https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)）'
- en: In the upcoming section, we will take a look at some of the network scaling
    services AWS offers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将看一下 AWS 提供的一些网络扩展服务。
- en: Network scaling services
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络扩展服务
- en: In this section, we will take a look at some of the network services AWS offers.
    Many of the services do not have a direct network implication, such as DNS and
    content distribution network. They are relevant in our discussion due to their
    close relationship with the network and application's performance.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下 AWS 提供的一些网络服务。许多服务没有直接的网络影响，比如 DNS 和内容分发网络。由于它们与网络和应用性能的密切关系，它们与我们的讨论相关。
- en: Elastic Load Balancing
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹性负载均衡
- en: '**Elastic Load Balancing** (**ELB**) allows incoming traffic from the internet
    to be automatically distributed across multiple EC2 instances. Just like load
    balancers in the physical world, this allows us to have better redundancy and
    fault tolerance while reducing the per-server load. ELB comes in two flavors:
    application and network load balancing.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**弹性负载均衡**（**ELB**）允许来自互联网的流量自动分布到多个 EC2 实例。就像物理世界中的负载均衡器一样，这使我们能够在减少每台服务器负载的同时获得更好的冗余和容错。ELB
    有两种类型：应用和网络负载均衡。'
- en: The application load balancer handles web traffic via HTTP and HTTPS; the network
    load balancer operates on a TCP level. If your application runs on HTTP or HTTPS,
    it is generally a good idea to go with the application load balancer. Otherwise,
    using the network load balancer is a good bet.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 应用负载均衡器通过 HTTP 和 HTTPS 处理 Web 流量；网络负载均衡器在 TCP 层运行。如果您的应用程序在 HTTP 或 HTTPS 上运行，通常最好选择应用负载均衡器。否则，使用网络负载均衡器是一个不错的选择。
- en: 'A detailed comparison of the application and network load balancer can be found
    at [https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/)找到应用和网络负载均衡器的详细比较：
- en: '![](assets/af58c911-8764-46d9-a3e3-71e90df6e39b.png)Elastic Load Balancer Comparison
    (Source: [https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/))'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/af58c911-8764-46d9-a3e3-71e90df6e39b.png)弹性负载均衡器比较（来源：[https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/)）'
- en: Elastic Load Balancer offers a way to load balance traffic once it enters the
    resource in our region. The AWS Route53 DNS service allows geographic load balance
    between regions.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性负载均衡器提供了一种在资源进入我们地区后平衡流量的方式。AWS Route53 DNS 服务允许在地区之间进行地理负载平衡。
- en: Route53 DNS service
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Route53 DNS 服务
- en: We all know what domain name services are; Route53 is AWS's DNS service. Route53
    is a full-service domain registrar where you can purchase and manage domains directly
    from AWS. Regarding network services, DNS allows a way to load balance between
    geographic regions by service domain names in a round-robin fashion between regions.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道域名服务是什么；Route53 是 AWS 的 DNS 服务。Route53 是一个全功能的域名注册商，您可以直接从 AWS 购买和管理域名。关于网络服务，DNS
    允许通过在地理区域之间以轮询方式服务域名来实现负载平衡。
- en: 'We need the following items before we can use DNS for load balancing:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用 DNS 进行负载平衡之前，我们需要以下项目：
- en: An Elastic Load Balancer in each of the intended load balance regions.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个预期的负载平衡地区中都有一个弹性负载均衡器。
- en: A registered domain name. We do not need Route53 as the domain registrar.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册的域名。我们不需要 Route53 作为域名注册商。
- en: Route53 is the DNS service for the domain.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Route53 是该域的 DNS 服务。
- en: We can then use the Route 53 latency-based routing policy with health-check
    in an active-active environment between the two Elastic Load Balancers.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以在两个弹性负载均衡器之间的主动-主动环境中使用 Route 53 基于延迟的路由策略和健康检查。
- en: CloudFront CDN services
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudFront CDN 服务
- en: 'CloudFront is Amazon''s **Content Delivery Network** (**CDN**) that reduces
    the latency for content delivery by physically serving the content closer to the
    customer. The content can be static web page content, videos, applications, APIs,
    or most recently, Lambda functions. CloudFront edge locations include the existing
    AWS regions, but are also in many other locations around the globe. The high-level
    operation of CloudFront is as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFront 是亚马逊的**内容分发网络**（**CDN**），通过在物理上为客户提供更接近的内容，减少了内容交付的延迟。内容可以是静态网页内容、视频、应用程序、API，或者最近的
    Lambda 函数。CloudFront 边缘位置包括现有的 AWS 区域，还有全球许多其他位置。CloudFront 的高级操作如下：
- en: Users access your website for one or more objects
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户访问您的网站以获取一个或多个对象
- en: DNS routes the request to the Amazon CloudFront edge location closest to the
    user's request
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS 将请求路由到距用户请求最近的 Amazon CloudFront 边缘位置
- en: The CloudFront edge location will either service the content via the cache or
    request the object from the origin
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFront 边缘位置将通过缓存提供内容或从源请求对象
- en: AWS CloudFront and CDN services in general are typically handled by application
    developers or DevOps engineers. However, it is always good to be aware of their
    operations.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFront 和 CDN 服务通常由应用程序开发人员或 DevOps 工程师处理。但是，了解它们的运作方式总是很好的。
- en: Other AWS network services
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他 AWS 网络服务
- en: 'There are lots of other AWS Network Services that we do not have the space
    to cover. Some of the more important ones are listed in this section:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他 AWS 网络服务，我们没有空间来介绍。一些更重要的服务列在本节中：
- en: '**AWS Transit VPC** ([https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/](https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/)):
    This is a way to connect multiple virtual private clouds to a common VPC that
    serves as a transit center. This is a relatively new service, but it can minimize
    the connection that you need to set up and manage. This can also serve as a tool
    when you need to share resources between separate AWS accounts.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Transit VPC** ([https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/](https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/))：这是一种连接多个虚拟私有云到一个作为中转中心的公共VPC的方式。这是一个相对较新的服务，但它可以最小化您需要设置和管理的连接。这也可以作为一个工具，当您需要在不同的AWS账户之间共享资源时。'
- en: '**Amazon GuardDuty** ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/)):
    This is a managed threat detection service that continuously monitors for malicious
    or unauthorized behavior to help protect our AWS workloads. It monitors API calls
    or potentially unauthorized deployments.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon GuardDuty** ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/))：这是一个托管的威胁检测服务，持续监视恶意或未经授权的行为，以帮助保护我们的AWS工作负载。它监视API调用或潜在的未经授权的部署。'
- en: '**AWS WAF**([https://aws.amazon.com/waf/](https://aws.amazon.com/waf/)): This
    is a web application firewall that helps protect web applications from common
    exploits. We can define customized web security rules to allow or block web traffic.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS WAF**([https://aws.amazon.com/waf/](https://aws.amazon.com/waf/))：这是一个Web应用程序防火墙，可以帮助保护Web应用程序免受常见的攻击。我们可以定义定制的Web安全规则来允许或阻止Web流量。'
- en: '**AWS Shield** ([https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)):
    This is a managed **Distributed Denial of Service** (**DDoS**) protection service
    that safeguards applications running on AWS. The protection service is free for
    all customers at the basic level; the advanced version of AWS Shield is a fee-based
    service.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Shield** ([https://aws.amazon.com/shield/](https://aws.amazon.com/shield/))：这是一个托管的**分布式拒绝服务**（**DDoS**）保护服务，可保护在AWS上运行的应用程序。基本级别的保护服务对所有客户免费；AWS
    Shield的高级版本是一项收费服务。'
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at AWS Cloud Networking services. We went over the
    AWS network definitions of Region, Availability Zone, Edge Locations, and Transit
    Center. By understanding the overall AWS network, this gives us a good idea of
    some of the limitations and contains for the other AWS network services. Throughout
    this chapter, we used the AWS CLI, the Python Boto3 library, as well as CloudFormation
    to automate some of the tasks.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入了解了AWS云网络服务。我们讨论了AWS网络中区域、可用区、边缘位置和中转中心的定义。通过了解整体的AWS网络，这让我们对其他AWS网络服务的一些限制和内容有了一个很好的了解。在本章的整个过程中，我们使用了AWS
    CLI、Python Boto3库以及CloudFormation来自动化一些任务。
- en: We covered the AWS virtual private cloud in depth with the configuration of
    the route table and route targets. The example on security groups and network
    ACL controls the security for our VPC. We also looked at Elastic IP and NAT Gateways
    regarding allowing external access.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们深入讨论了AWS虚拟私有云，包括路由表和路由目标的配置。关于安全组和网络ACL控制我们VPC的安全性的示例。我们还讨论了弹性IP和NAT网关，以允许外部访问。
- en: 'There are two ways to connect AWS VPC to on-premise networks: Direct Connect
    and IPSec VPN. We briefly looked at each and the advantages of using them. Toward
    the end of this chapter, we looked at network scaling services offered by AWS,
    including Elastic Load Balancing, Route53 DNS, and CloudFront.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 连接AWS VPC到本地网络有两种方式：直接连接和IPSec VPN。我们简要地介绍了每种方式以及使用它们的优势。在本章的最后，我们了解了AWS提供的网络扩展服务，包括弹性负载均衡、Route53
    DNS和CloudFront。
- en: 'In [Chapter 11](85c09606-4a40-46f3-82b8-0b20550fd64d.xhtml), *Working with
    Git*, we will take a more in-depth look at the version control system we have
    been working with: Git.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第11章](85c09606-4a40-46f3-82b8-0b20550fd64d.xhtml)中，*使用Git*，我们将更深入地了解我们一直在使用的版本控制系统：Git。
