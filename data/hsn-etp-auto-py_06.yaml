- en: Configuration Generator with Python and Jinja2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python和Jinja2生成配置
- en: This chapter introduces you to the YAML format for representing data and generating
    a configuration from the golden templates created by the Jinja2 language. We will
    use these two concepts in both Ansible and Python to create a data model store
    for our configuration.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了YAML格式，用于表示数据并从Jinja2语言创建的黄金模板生成配置。我们将在Ansible和Python中使用这两个概念来创建我们配置的数据模型存储。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is YAML?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是YAML？
- en: Building golden configuration templates with Jinja2
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jinja2构建黄金配置模板
- en: What is YAML?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是YAML？
- en: '**YAML Ain’t Markup Language** (**YAML**) is often called a data serialization
    language. It was intended to be human-readable and organize data into a structured
    format. Programming languages can understand the content of YAML files (which
    usually have a `.yml` or `.yaml` extension) and map them to built-in data types.
    For example, when you consume a `.yaml` file in your Python script, it will automatically
    convert the content into either a dictionary `{}` or list `[]`, so you can work
    and iterate over it.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**YAML Ain’t Markup Language**（**YAML**）通常被称为数据序列化语言。它旨在是人类可读的，并将数据组织成结构化格式。编程语言可以理解YAML文件的内容（通常具有`.yml`或`.yaml`扩展名），并将其映射到内置数据类型。例如，当您在Python脚本中使用`.yaml`文件时，它将自动将内容转换为字典`{}`或列表`[]`，因此您可以对其进行处理和迭代。'
- en: YAML rules help to construct a readable file so it's important to understand
    them in order to write a valid and well formatted YAML file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: YAML规则有助于构建可读文件，因此了解它们以编写有效和格式良好的YAML文件非常重要。
- en: YAML file formatting
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YAML文件格式
- en: 'There''re a few rules to follow while developing YAML files. YAML uses indentation
    (like Python), which builds the relationship of items with one another:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发YAML文件时需要遵循一些规则。YAML使用缩进（类似于Python），它建立了项目之间的关系：
- en: So, the first rule when writing a YAML file is to make your indentation consistent,
    using either whitespace or tabs, and don't mix them.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，编写YAML文件的第一个规则是使缩进保持一致，使用空格或制表符，并且不要混合使用它们。
- en: The second rule is to use a colon `:` when creating a dictionary with a key
    and value (sometimes they're called associative arrays in `yaml`). The item to
    the left of the colon is the key, while the item to the right of the colon is
    the value.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二条规则是在创建具有键和值的字典时使用冒号`:`（有时称为`yaml`中的关联数组）。冒号左侧的项目是键，而冒号右侧的项目是值。
- en: 'The third rule is to use dashes `"-" ` when grouping items inside a list. You
    can mix dictionaries and lists inside the YAML file in order to effectively describe
    your data. The left-hand side serves as a dictionary key, while the right-hand
    side serves as a dictionary value. You can create any number of levels to have
    structured data:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三条规则是在列表中使用破折号`"-"`来分组项目。您可以在YAML文件中混合使用字典和列表，以有效地描述您的数据。左侧作为字典键，右侧作为字典值。您可以创建任意数量的级别以获得结构化数据：
- en: '![](../images/00112.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00112.jpeg)'
- en: 'Let''s take an example and apply these rules to it:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子并应用这些规则：
- en: '![](../images/00113.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00113.jpeg)'
- en: There are a number of things to look at it. Firstly, the file has one top level,
    `my_datacenter`, which serves as a top-level key and its values consists of all
    the indented lines after it, which are `GW`, `switch1`, and `switch2`. Those items
    also serve as keys and have values inside them, which are `eve_port`, `device_template`, `hostname`, `mgmt_int`, `mgmt_ip`,
    and `mgmt_subnet` and which serve as Level 3 keys and Level 2 values at the same
    time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多事情要看。首先，文件有一个顶级，`my_datacenter`，它作为顶级键，其值由它之后的所有缩进行组成，即`GW`，`switch1`和`switch2`。这些项目也作为键，并在其中有值，即`eve_port`，`device_template`，`hostname`，`mgmt_int`，`mgmt_ip`和`mgmt_subnet`，它们同时作为第3级键和第2级值。
- en: The other thing to notice is `enabled_ports`, which is a key but has a value
    that serves as a lists. We know this because the next level of indentation is
    a dash.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件事要注意的是`enabled_ports`，它是一个键，但具有作为列表的值。我们知道这一点，因为下一级缩进是一个破折号。
- en: Notice that all interfaces are sibling elements because they have the same level
    of indentation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有接口都是同级元素，因为它们具有相同级别的缩进。
- en: Finally, it's not required to have a single or double quotation around strings.
    Python will do that automatically when we load the file into it and it will also
    determine the data type and location of each item based on indentation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，不需要在字符串周围使用单引号或双引号。当我们将文件加载到Python中时，Python会自动执行这些操作，并且还将根据缩进确定每个项目的数据类型和位置。
- en: 'Now, let''s develop a Python script that reads this YAML file and converts
    it into dictionaries and lists using the `yaml` module:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开发一个Python脚本，读取这个YAML文件，并使用`yaml`模块将其转换为字典和列表：
- en: '![](../images/00114.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00114.jpeg)'
- en: 'In this example, we can see the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到以下内容：
- en: We imported the `yaml` module inside our Python script in order to handle the
    YAML files. Also, we imported the `pprint` function to show the hierarchy of nested
    dictionaries and lists.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在Python脚本中导入了`yaml`模块，以处理YAML文件。此外，我们导入了`pprint`函数，以显示嵌套字典和列表的层次结构。
- en: Then, we opened the `yaml_example.yml` file using the `with` clause and the `open()`
    function as a `yaml_file`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们使用`with`子句和`open（）`函数打开了`yaml_example.yml`文件作为`yaml_file`。
- en: Finally, we use the `load()` function to load the file into the `yaml_data`
    variable. At this stage, the Python interpreter will analyze the `yaml` file's
    content and build the relationships between items, then convert them to the standard
    data type. The output can be shown at the console using the `pprint()` function.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们使用`load（）`函数将文件加载到`yaml_data`变量中。在这个阶段，Python解释器将分析`yaml`文件的内容并建立项目之间的关系，然后将它们转换为标准数据类型。输出可以使用`pprint（）`函数在控制台上显示。
- en: '**Script output**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本输出**'
- en: '![](../images/00115.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00115.jpeg)'
- en: 'It''s now fairly easy to access any information using standard Python methods.
    For example, you can access the `switch1` config by using `my_datacenter` followed
    by the `switch1` keys, as in the following code snippet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用标准Python方法访问任何信息都相当容易。例如，您可以通过使用`my_datacenter`后跟`switch1`键来访问`switch1`配置，如以下代码片段所示：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, you can iterate over the keys with a simple `for` loop and print the
    values of any level:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以使用简单的`for`循环迭代键，并打印任何级别的值：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As a best practice, it's recommended you keep the key names consistent and change
    only the values while you describe your data. For example, the `hostname`, `mgmt_intf`,
    and `mgmt_ip` items exist on all devices with the same name, while they have different
    values in the `.yaml` file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最佳实践，建议您保持键名一致，仅在描述数据时更改值。例如，`hostname`，`mgmt_intf`和`mgmt_ip`项目在所有具有相同名称的设备上都存在，而它们在`.yaml`文件中的值不同。
- en: Text editor tips
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本编辑器提示
- en: Correct indentation is very important for YAML data. It's recommended to use
    an advanced text editor such as, Sublime Text or Notepad++, as they have options
    that convert the tabs to a specific number of whitespaces. At the same time, you
    can choose the specific tab indentation size to be 2 or 4\. So, your editor will
    convert the tab to a static number of whitespaces whenever you click on the *Tab*
    button. Finally, you can choose to display vertical lines at each indentation
    to ensure that lines are indented the same amount.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的缩进对于YAML数据非常重要。建议使用高级文本编辑器，如Sublime Text或Notepad++，因为它们具有将制表符转换为特定数量的空格的选项。同时，您可以选择特定的制表符缩进大小为2或4。因此，每当您点击*Tab*按钮时，您的编辑器将将制表符转换为静态数量的空格。最后，您可以选择在每个缩进处显示垂直线，以确保行缩进相同。
- en: Please note that Microsoft Windows Notepad doesn't have that option and this
    may result in a formatting error in your YAML file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Microsoft Windows Notepad没有此选项，这可能会导致YAML文件的格式错误。
- en: 'The following is an example of an advanced editor called Sublime Text that
    can be configured with the aforementioned options:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个名为Sublime Text的高级编辑器的示例，可以配置为使用上述选项：
- en: '![](../images/00116.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00116.jpeg)'
- en: The screenshot shows the vertical line guides that ensure that the sibling items
    are at the same indentation level and number of spaces when you click on Tab.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕截图显示了垂直线指南，确保当您点击Tab时，兄弟项目处于相同的缩进级别和空格数。
- en: Building a golden configuration with Jinja2
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jinja2构建黄金配置
- en: Most network engineers have a text file that serves as a template for a specific
    device configuration. This file contains sections of network configuration with
    many values. When the network engineer wants to provision a new device or change
    its configuration, they will basically replace specific values from this file
    with another one to generate a new configuration.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网络工程师都有一个文本文件，用作特定设备配置的模板。该文件包含许多值的网络配置部分。当网络工程师想要配置新设备或更改其配置时，他们基本上会用另一个文件中的特定值替换此文件中的特定值，以生成新的配置。
- en: Using Python and Ansible, later in this book we will automate this process efficiently
    using the Jinja2 template language ([http://jinja.pocoo.org](http://jinja.pocoo.org)).
    The core concept of and driver for developing Jinja2 is to have a unified syntax
    across all template files for specific network/system configurations and to separate
    the data from the actual configuration. This allows us to use the same template
    multiple times but with a different set of data. Also, as shown on the Jinja2
    web page, it has some unique features that make it stand out from the other template
    languages.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面，我们将使用Python和Ansible，使用Jinja2模板语言([http://jinja.pocoo.org](http://jinja.pocoo.org))高效地自动化此过程。
    Jinja2开发的核心概念和驱动程序是在特定网络/系统配置的所有模板文件中具有统一的语法，并将数据与实际配置分离。这使我们能够多次使用相同的模板，但使用不同的数据集。此外，正如Jinja2网页所示，它具有一些独特的功能，使其脱颖而出，与其他模板语言不同。
- en: 'The following are some of the features mentioned on the official website:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是官方网站上提到的一些功能：
- en: Powerful automatic HTML escaping system for cross-site scripting prevention.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的自动HTML转义系统，用于跨站点脚本预防。
- en: High performance with just-in-time compilation to Python bytecode. Jinja2 will
    translate your template sources on first load into Python bytecode for the best
    runtime performance.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高性能，使用即时编译到Python字节码。Jinja2将在首次加载时将您的模板源代码转换为Python字节码，以获得最佳的运行时性能。
- en: Optional ahead-of-time compilation.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的提前编译。
- en: Easy to debug with a debug system that integrates template compile and runtime
    errors into the standard Python traceback system.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于调试，具有将模板编译和运行时错误集成到标准Python回溯系统的调试系统。
- en: 'Configurable syntax: For instance, you can reconfigure Jinja2 to better fit
    output formats, such as LaTeX or JavaScript.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可配置的语法：例如，您可以重新配置Jinja2以更好地适应输出格式，例如LaTeX或JavaScript。
- en: 'Template designer helpers: Jinja2 ships with a wide range of useful little
    helpers that help solve common tasks in templates, such as breaking up sequences
    of items into multiple columns.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板设计帮助程序：Jinja2附带了一系列有用的小助手，可帮助解决模板中的常见任务，例如将项目序列分成多列。
- en: Another important Jinja feature is *template inheritance*, with which we can
    create a *base/parent template* that defines a basic structure for our system
    or the Day 0 initial configuration for all devices. This initial configuration
    will be the base configuration and contains the common pieces such as usernames,
    management subnet, default routes, and SNMP communities.  The other *child templates *extend
    the base template and inherit it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的Jinja功能是*模板继承*，我们可以创建一个*基础/父模板*，为我们的系统或所有设备的Day 0初始配置定义基本结构。此初始配置将是基本配置，并包含通用部分，例如用户名、管理子网、默认路由和SNMP社区。其他*子模板*扩展基础模板并继承它。
- en: The terms Jinja and Jinja2 are used interchangeably throughout this chapter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，术语Jinja和Jinja2可以互换使用。
- en: 'Let''s take a few examples of building templates before we deep dive into more
    features provided by the Jinja2 language:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究Jinja2语言提供的更多功能之前，让我们先来看几个构建模板的例子：
- en: 'First, we need to make sure that Jinja2 is installed in your system by using
    the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要确保Jinja2已经安装在您的系统中，使用以下命令：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The package will be downloaded from PyPi and then will be installed on the site
    packages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该软件包将从PyPi下载，然后将安装在站点软件包中。
- en: 'Now, open your favorite text editor and write the following template, which
    represents a simple Day 0 (initial) configuration for a Layer 2 switch that configures
    the device hostname, some `aaa` parameters, default VLANs that should exist on
    each switch, and the management of IP addresses:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开你喜欢的文本编辑器，并编写以下模板，它代表了一个简单的Day 0（初始）配置，用于配置设备主机名、一些`aaa`参数、每个交换机上应存在的默认VLAN以及IP地址的管理：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Some text editors (such as Sublime Text and Notepad++) provide support for Jinja2
    and can do syntax highlighting and auto-completion for you, either by natively
    supporting it or through extension.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一些文本编辑器（如Sublime Text和Notepad++）支持Jinja2，并可以为您提供语法高亮和自动补全，无论是通过本地支持还是通过扩展。
- en: 'Notice that in the previous template, the variables were written in double
    curly braces `{{  }}`. So, when the Python script loads the template, it will
    replace those variables with the desired values:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上一个模板中，变量是用双大括号`{{  }}`写的。因此，当Python脚本加载模板时，它将用所需的值替换这些变量：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this example, we can see the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到以下内容：
- en: The first thing is we imported the `Template` class from the `jinja2` module.
    This class will validate and parse the Jinja2 file.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们导入了`jinja2`模块中的`Template`类。这个类将验证和解析Jinja2文件。
- en: Then, we defined a variable, `sw1`, as a dictionary with keys that have names
    equal to variables inside the template. The dictionary values will be the data
    that renders the template.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们定义了一个变量`sw1`，它是一个带有与模板内变量名称相等的键的字典。字典值将是渲染模板的数据。
- en: Finally, we used the `render()` method inside the template which takes `sw1`
    as an input to connect the Jinja2 template with the rendered values and prints
    the configuration.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们在模板中使用了`render()`方法，该方法以`sw1`作为输入，将Jinja2模板与渲染值连接起来，并打印配置。
- en: '**Script output**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本输出**'
- en: '![](../images/00117.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00117.jpeg)'
- en: 'Now, let''s enhance our script and use YAML to render the template instead
    of hard-coding the values inside dictionaries. The concept is simple: we will
    model the `day0` configuration for our lab inside the YAML file, then load this
    file into our Python script using `yaml.load()` and use the output to feed the
    Jinja2 template, which will result in generating the `day0` configuration files
    for each device:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们改进我们的脚本，使用YAML来渲染模板，而不是在字典中硬编码值。这个概念很简单：我们将在YAML文件中建模我们实验室的`day0`配置，然后使用`yaml.load()`将该文件加载到我们的Python脚本中，并使用输出来填充Jinja2模板，从而生成每个设备的`day0`配置文件：
- en: '![](../images/00118.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00118.jpeg)'
- en: 'First, we will extend the YAML file that we developed last time and add other
    devices to it while keeping the hierarchy for each node the same:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将扩展上次开发的YAML文件，并在保持每个节点层次结构不变的情况下，向其中添加其他设备：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Following is the Python script:**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下是Python脚本：**'
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this example, we can see the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们可以看到以下内容：
- en: We imported the `yaml` and `Jinja2` modules as usual
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们像往常一样导入了`yaml`和`Jinja2`模块
- en: Then, we instructed the script to load the `yaml` file into the `yaml_data`
    variable, which will convert it into a series of dictionaries and lists
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们指示脚本将`yaml`文件加载到`yaml_data`变量中，这将把它转换为一系列字典和列表
- en: Two templates for router and switch configuration are defined as `router_day0_template`
    and `switch_day0_template` respectively
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分别定义了路由器和交换机配置的两个模板，分别为`router_day0_template`和`switch_day0_template`
- en: The `for` loop will iterate over devices of `dc1` and check the `device_template`,
    then will render configuration for each device
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`循环将遍历`dc1`的设备，并检查`device_template`，然后为每个设备渲染配置'
- en: '**Script output**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本输出**'
- en: 'Following is the router configuration (output omitted):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是路由器配置（输出已省略）：
- en: '![](../images/00119.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00119.jpeg)'
- en: 'Following is the switch 1 configuration (output omitted):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是交换机1的配置（输出已省略）：
- en: '![](../images/00120.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00120.jpeg)'
- en: Reading templates from the filesystem
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件系统中读取模板
- en: A common approach for Python developers is to move the static, hard-coded values
    and templates outside the Python script and keep only the logic inside the script.
    This approach keeps your program clean and scalable, while allowing other team
    members who don't have much knowledge of Python to get the desired output by changing
    the input, and Jinja2 is no exception to this approach. You can use the `FileSystemLoader()`
    class inside the Jinja2 module to load the template from the operating system
    directories. We will modify our code and move both the `router_day0_template`
    and `switch_day0_template` contents from the script to text files, then load them
    into our script.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Python开发人员的一种常见方法是将静态的、硬编码的值和模板移出Python脚本，只保留脚本内的逻辑。这种方法可以使您的程序更加清晰和可扩展，同时允许其他团队成员通过更改输入来获得期望的输出，而对Python了解不多的人也可以使用这种方法。Jinja2也不例外。您可以使用Jinja2模块中的`FileSystemLoader()`类从操作系统目录中加载模板。我们将修改我们的代码，将`router_day0_template`和`switch_day0_template`的内容从脚本中移到文本文件中，然后将它们加载到我们的脚本中。
- en: '**Python code**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 代码**'
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, instead of loading the `Template()` class from the Jinja2 module
    as we did before, we will import  `Environment()` and `FileSystemLoader()`, which
    are used to read the Jinja2 file from the specific operating system directory
    by providing them with `template_dir` where our templates are stored. Then, we
    will use the created `template_env` object, along with the `get_template()` method,
    to get the template name and render it with the configuration.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们不再像之前那样从Jinja2模块中加载`Template()`类，而是导入`Environment()`和`FileSystemLoader()`，它们用于通过提供`template_dir`从特定操作系统目录中读取Jinja2文件，其中存储了我们的模板。然后，我们将使用创建的`template_env`对象，以及`get_template()`方法，获取模板名称并使用配置渲染它。
- en: Make sure your template file has a `.j2` extension at the end. This will make
    PyCharm recognize the text inside the file as a Jinja2 template and hence provide
    syntax highlighting and better code completion.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的模板文件以`.j2`扩展名结尾。这将使PyCharm将文件中的文本识别为Jinja2模板，从而提供语法高亮和更好的代码完成。
- en: Using Jinja2 loops and conditions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jinja2循环和条件
- en: Loops and conditions in Jinja2 are used to enhance our template and add more
    functionality to it. We will start by understanding how to add the `for` loop
    inside the template in order to iterate over passed values from YAML. For example,
    we may need to add a switch configuration under each interface, such as using
    the switchport mode  and configure the VLAN ID which will be configured under
    the access port, or configure the allowed VLANs range in the case of the trunk
    ports.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2中的循环和条件用于增强我们的模板并为其添加更多功能。我们将首先了解如何在模板中添加`for`循环，以便迭代从YAML传递的值。例如，我们可能需要在每个接口下添加交换机配置，比如使用交换机端口模式并配置VLAN
    ID，这将在访问端口下配置，或者在干线端口的情况下配置允许的VLAN范围。
- en: On the other hand, we may need to enable some interfaces in the router and add
    custom configurations to it, such as MTU, speed, and duplex. So, we will use the
    `for` loop.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们可能需要在路由器上启用一些接口并为其添加自定义配置，比如MTU、速度和双工。因此，我们将使用`for`循环。
- en: Notice that part of our script logic will now be moved from Python to the Jinja2
    template. The Python script will just read the template, either externally from
    the operating system or through the `Template()` class inside the script, then
    render the template with the parsed values from the YAML file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的脚本逻辑的一部分现在将从Python移动到Jinja2模板中。Python脚本将只是从操作系统外部或通过脚本内部的`Template()`类读取模板，然后使用来自YAML文件的解析值渲染模板。
- en: 'The basic structure of `for` loops inside Jinja2 is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2中`for`循环的基本结构如下：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice the use of `{% %}` to define logic inside the Jinja2 file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意使用`{% %}`来定义Jinja2文件中的逻辑。
- en: Also, `iteritems()` has the same function as iterating over the Python dictionary,
    which is iterating over the key and value pairs. The loop will return both the
    key and value for each element inside the `var1` dictionary.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`iteritems()`具有与迭代Python字典相同的功能，即迭代键和值对。循环将为`var1`字典中的每个元素返回键和值。
- en: 'Also, we can have an `if` condition that validates a specific condition and,
    if it''s true, then the configuration snippets will be added to the rendered file.
    The basic `if` structure will be as shown in the following snippet:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以有一个`if`条件来验证特定条件，如果条件为真，则配置片段将被添加到渲染文件中。基本的`if`结构如下所示：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we will modify our `.yaml` file which describes the data center devices,
    and add the interface configuration and enabled ports for each device:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改描述数据中心设备的`.yaml`文件，并为每个设备添加接口配置和已启用的端口：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice, that we categorized the switch ports to either trunk port or access
    port, and also added the vlans for each one.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将交换机端口分类为干线端口或访问端口，并为每个端口添加VLAN。
- en: According to the `yaml` file, the incoming packets to the interface with switchport
    access mode will be tagged with the VLAN. In case of the switchport mode trunk,
    the incoming packets be allowed if it has a vlan ID belong to the configured list.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`yaml`文件，以交换机端口访问模式进入的数据包将被标记为VLAN。在干线端口模式下，只有数据包的VLAN ID属于配置列表，才允许数据包进入。
- en: 'Now, we will create two additional templates for devices Day 1 (operational)
    configuration. The first template will be `router_day1_template` and the second
    will be `switch_day1_template`, and both of them will inherit from the corresponding
    day0 template that we developed before:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为设备Day 1（运行）配置创建两个额外的模板。第一个模板将是`router_day1_template`，第二个将是`switch_day1_template`，它们都将继承之前开发的相应day0模板：
- en: '**router_day1_template:**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**router_day1_template:**'
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**switch_day1_template:**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**switch_day1_template:**'
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice the use of the `{% include <template_name.j2> %}`  tag, which refers
    to the day0 template of the device.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意使用`{% include <template_name.j2> %}`标签，它指的是设备的day0模板。
- en: This template will be rendered first and filled with passed values from YAML,
    then the next parts will be filled.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板将首先被渲染并填充来自YAML的传递值，然后填充下一个部分。
- en: The Jinja2 language inherits many writing styles and features from the Python
    language. Although it's not mandatory to follow the indentation rule when developing
    the template and inserting the tags, the author prefers to have it in a readable
    Jinja2 template.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja2语言继承了许多写作风格和特性，来自Python语言。虽然在开发模板和插入标签时不是强制遵循缩进规则，但作者更喜欢在可读的Jinja2模板中使用缩进。
- en: '**Script output:**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本输出:**'
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about YAML and its formatting and how to work with
    text editors. We also learned about Jinja2 and its configuration. Then, we explored
    the ways in which we can use loops and conditions in Jinja2.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了YAML及其格式以及如何使用文本编辑器。我们还了解了Jinja2及其配置。然后，我们探讨了在Jinja2中使用循环和条件的方法。
- en: In the next chapter, we will learn how to instantiate and execute Python code
    in parallel using multiprocessing.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用多进程同时实例化和执行Python代码。
